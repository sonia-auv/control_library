//
// Academic License - for use in teaching, academic research, and meeting
// course requirements at degree granting institutions only.  Not for
// government, commercial, or other organizational use.
//
// File: full_loop.cpp
//
// Code generated for Simulink model 'full_loop'.
//
// Model version                  : 1.699
// Simulink Coder version         : 9.3 (R2020a) 18-Nov-2019
// C/C++ source code generated on : Fri May  7 11:30:20 2021
//
// Target selection: ert.tlc
// Embedded hardware selection: Intel->x86-64 (Linux 64)
// Code generation objectives: Unspecified
// Validation result: Not run
//
#include "full_loop.h"
#include "full_loop_private.h"

const SL_Bus_full_loop_sonia_common_BodyVelocityDVL
  full_loop_rtZSL_Bus_full_loop_sonia_common_BodyVelocityDVL = {
  0.0,                                 // XVelBtm
  0.0,                                 // YVelBtm
  0.0,                                 // ZVelBtm
  0.0,                                 // EVelBtm

  {
    0U,                                // Seq

    {
      0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,
      0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,
      0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,
      0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,
      0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,
      0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,
      0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U }
    ,                                  // FrameId

    {
      0U,                              // CurrentLength
      0U                               // ReceivedLength
    },                                 // FrameId_SL_Info

    {
      0.0,                             // Sec
      0.0                              // Nsec
    }                                  // Stamp
  }                                    // Header
} ;                     // SL_Bus_full_loop_sonia_common_BodyVelocityDVL ground

const SL_Bus_full_loop_sensor_msgs_Imu
  full_loop_rtZSL_Bus_full_loop_sensor_msgs_Imu = {
  {
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }
  ,                                    // OrientationCovariance

  {
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }
  ,                                    // AngularVelocityCovariance

  {
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }
  ,                                    // LinearAccelerationCovariance

  {
    0U,                                // Seq

    {
      0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,
      0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,
      0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,
      0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,
      0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,
      0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,
      0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U }
    ,                                  // FrameId

    {
      0U,                              // CurrentLength
      0U                               // ReceivedLength
    },                                 // FrameId_SL_Info

    {
      0.0,                             // Sec
      0.0                              // Nsec
    }                                  // Stamp
  },                                   // Header

  {
    0.0,                               // X
    0.0,                               // Y
    0.0,                               // Z
    0.0                                // W
  },                                   // Orientation

  {
    0.0,                               // X
    0.0,                               // Y
    0.0                                // Z
  },                                   // AngularVelocity

  {
    0.0,                               // X
    0.0,                               // Y
    0.0                                // Z
  }                                    // LinearAcceleration
} ;                                  // SL_Bus_full_loop_sensor_msgs_Imu ground

const SL_Bus_full_loop_gazebo_msgs_ModelState
  full_loop_rtZSL_Bus_full_loop_gazebo_msgs_ModelState = {
  {
    0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,
    0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,
    0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,
    0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,
    0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,
    0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,
    0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U }
  ,                                    // ModelName

  {
    0U,                                // CurrentLength
    0U                                 // ReceivedLength
  },                                   // ModelName_SL_Info

  {
    0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,
    0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,
    0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,
    0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,
    0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,
    0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,
    0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U }
  ,                                    // ReferenceFrame

  {
    0U,                                // CurrentLength
    0U                                 // ReceivedLength
  },                                   // ReferenceFrame_SL_Info

  {
    {
      0.0,                             // X
      0.0,                             // Y
      0.0                              // Z
    },                                 // Position

    {
      0.0,                             // X
      0.0,                             // Y
      0.0,                             // Z
      0.0                              // W
    }                                  // Orientation
  },                                   // Pose

  {
    {
      0.0,                             // X
      0.0,                             // Y
      0.0                              // Z
    },                                 // Linear

    {
      0.0,                             // X
      0.0,                             // Y
      0.0                              // Z
    }                                  // Angular
  }                                    // Twist
} ;                           // SL_Bus_full_loop_gazebo_msgs_ModelState ground

const SL_Bus_full_loop_std_msgs_UInt16MultiArray
  full_loop_rtZSL_Bus_full_loop_std_msgs_UInt16MultiArray = {
  {
    0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,
    0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,
    0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,
    0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,
    0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,
    0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,
    0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U }
  ,                                    // Data

  {
    0U,                                // CurrentLength
    0U                                 // ReceivedLength
  },                                   // Data_SL_Info

  {
    0U,                                // DataOffset

    {
      {
        {
          0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,
          0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,
          0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,
          0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,
          0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,
          0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,
          0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,
          0U, 0U }
        ,                              // Label

        {
          0U,                          // CurrentLength
          0U                           // ReceivedLength
        },                             // Label_SL_Info
        0U,                            // Size
        0U                             // Stride
      }, {
        {
          0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,
          0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,
          0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,
          0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,
          0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,
          0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,
          0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,
          0U, 0U }
        ,                              // Label

        {
          0U,                          // CurrentLength
          0U                           // ReceivedLength
        },                             // Label_SL_Info
        0U,                            // Size
        0U                             // Stride
      }, {
        {
          0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,
          0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,
          0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,
          0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,
          0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,
          0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,
          0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,
          0U, 0U }
        ,                              // Label

        {
          0U,                          // CurrentLength
          0U                           // ReceivedLength
        },                             // Label_SL_Info
        0U,                            // Size
        0U                             // Stride
      }, {
        {
          0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,
          0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,
          0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,
          0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,
          0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,
          0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,
          0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,
          0U, 0U }
        ,                              // Label

        {
          0U,                          // CurrentLength
          0U                           // ReceivedLength
        },                             // Label_SL_Info
        0U,                            // Size
        0U                             // Stride
      }, {
        {
          0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,
          0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,
          0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,
          0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,
          0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,
          0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,
          0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,
          0U, 0U }
        ,                              // Label

        {
          0U,                          // CurrentLength
          0U                           // ReceivedLength
        },                             // Label_SL_Info
        0U,                            // Size
        0U                             // Stride
      }, {
        {
          0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,
          0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,
          0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,
          0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,
          0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,
          0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,
          0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,
          0U, 0U }
        ,                              // Label

        {
          0U,                          // CurrentLength
          0U                           // ReceivedLength
        },                             // Label_SL_Info
        0U,                            // Size
        0U                             // Stride
      }, {
        {
          0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,
          0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,
          0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,
          0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,
          0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,
          0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,
          0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,
          0U, 0U }
        ,                              // Label

        {
          0U,                          // CurrentLength
          0U                           // ReceivedLength
        },                             // Label_SL_Info
        0U,                            // Size
        0U                             // Stride
      }, {
        {
          0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,
          0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,
          0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,
          0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,
          0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,
          0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,
          0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,
          0U, 0U }
        ,                              // Label

        {
          0U,                          // CurrentLength
          0U                           // ReceivedLength
        },                             // Label_SL_Info
        0U,                            // Size
        0U                             // Stride
      }, {
        {
          0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,
          0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,
          0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,
          0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,
          0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,
          0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,
          0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,
          0U, 0U }
        ,                              // Label

        {
          0U,                          // CurrentLength
          0U                           // ReceivedLength
        },                             // Label_SL_Info
        0U,                            // Size
        0U                             // Stride
      }, {
        {
          0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,
          0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,
          0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,
          0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,
          0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,
          0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,
          0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,
          0U, 0U }
        ,                              // Label

        {
          0U,                          // CurrentLength
          0U                           // ReceivedLength
        },                             // Label_SL_Info
        0U,                            // Size
        0U                             // Stride
      }, {
        {
          0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,
          0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,
          0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,
          0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,
          0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,
          0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,
          0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,
          0U, 0U }
        ,                              // Label

        {
          0U,                          // CurrentLength
          0U                           // ReceivedLength
        },                             // Label_SL_Info
        0U,                            // Size
        0U                             // Stride
      }, {
        {
          0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,
          0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,
          0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,
          0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,
          0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,
          0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,
          0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,
          0U, 0U }
        ,                              // Label

        {
          0U,                          // CurrentLength
          0U                           // ReceivedLength
        },                             // Label_SL_Info
        0U,                            // Size
        0U                             // Stride
      }, {
        {
          0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,
          0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,
          0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,
          0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,
          0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,
          0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,
          0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,
          0U, 0U }
        ,                              // Label

        {
          0U,                          // CurrentLength
          0U                           // ReceivedLength
        },                             // Label_SL_Info
        0U,                            // Size
        0U                             // Stride
      }, {
        {
          0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,
          0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,
          0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,
          0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,
          0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,
          0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,
          0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,
          0U, 0U }
        ,                              // Label

        {
          0U,                          // CurrentLength
          0U                           // ReceivedLength
        },                             // Label_SL_Info
        0U,                            // Size
        0U                             // Stride
      }, {
        {
          0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,
          0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,
          0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,
          0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,
          0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,
          0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,
          0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,
          0U, 0U }
        ,                              // Label

        {
          0U,                          // CurrentLength
          0U                           // ReceivedLength
        },                             // Label_SL_Info
        0U,                            // Size
        0U                             // Stride
      }, {
        {
          0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,
          0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,
          0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,
          0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,
          0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,
          0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,
          0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,
          0U, 0U }
        ,                              // Label

        {
          0U,                          // CurrentLength
          0U                           // ReceivedLength
        },                             // Label_SL_Info
        0U,                            // Size
        0U                             // Stride
      } }
    ,                                  // Dim

    {
      0U,                              // CurrentLength
      0U                               // ReceivedLength
    }                                  // Dim_SL_Info
  }                                    // Layout
} ;                        // SL_Bus_full_loop_std_msgs_UInt16MultiArray ground

static void rate_scheduler(full_loopModelClass::RT_MODEL_full_loop_T *const
  full_loop_M);
uint32_T plook_u32d_binckpan(real_T u, const real_T bp[], uint32_T maxIndex,
  uint32_T *prevIndex)
{
  uint32_T bpIndex;

  // Prelookup - Index only
  // Index Search method: 'binary'
  // Interpolation method: 'Use nearest'
  // Extrapolation method: 'Clip'
  // Use previous index: 'on'
  // Use last breakpoint for index at or above upper limit: 'on'
  // Remove protection against out-of-range input in generated code: 'off'

  if (u <= bp[0U]) {
    bpIndex = 0U;
  } else if (u < bp[maxIndex]) {
    bpIndex = binsearch_u32d_prevIdx(u, bp, *prevIndex, maxIndex);
    if ((bpIndex < maxIndex) && (bp[bpIndex + 1U] - u <= u - bp[bpIndex])) {
      bpIndex++;
    }
  } else {
    bpIndex = maxIndex;
  }

  *prevIndex = bpIndex;
  return bpIndex;
}

uint32_T plook_u32u16_binckpan(uint16_T u, const uint16_T bp[], uint32_T
  maxIndex, uint32_T *prevIndex)
{
  uint32_T bpIndex;

  // Prelookup - Index only
  // Index Search method: 'binary'
  // Interpolation method: 'Use nearest'
  // Extrapolation method: 'Clip'
  // Use previous index: 'on'
  // Use last breakpoint for index at or above upper limit: 'on'
  // Remove protection against out-of-range input in generated code: 'off'

  if (u <= bp[0U]) {
    bpIndex = 0U;
  } else if (u < bp[maxIndex]) {
    bpIndex = binsearch_u32u16_prevIdx(u, bp, *prevIndex, maxIndex);
    if ((bpIndex < maxIndex) && (static_cast<uint16_T>(static_cast<uint32_T>
          (bp[bpIndex + 1U]) - u) <= static_cast<uint16_T>(static_cast<uint32_T>
          (u) - bp[bpIndex]))) {
      bpIndex++;
    }
  } else {
    bpIndex = maxIndex;
  }

  *prevIndex = bpIndex;
  return bpIndex;
}

uint32_T binsearch_u32d_prevIdx(real_T u, const real_T bp[], uint32_T startIndex,
  uint32_T maxIndex)
{
  uint32_T bpIndex;
  uint32_T iRght;
  uint32_T iLeft;
  uint32_T found;

  // Binary Search using Previous Index
  bpIndex = startIndex;
  iLeft = 0U;
  iRght = maxIndex;
  found = 0U;
  while (found == 0U) {
    if (u < bp[bpIndex]) {
      iRght = bpIndex - 1U;
      bpIndex = (iRght + iLeft) >> 1U;
    } else if (u < bp[bpIndex + 1U]) {
      found = 1U;
    } else {
      iLeft = bpIndex + 1U;
      bpIndex = (iRght + iLeft) >> 1U;
    }
  }

  return bpIndex;
}

uint32_T binsearch_u32u16_prevIdx(uint16_T u, const uint16_T bp[], uint32_T
  startIndex, uint32_T maxIndex)
{
  uint32_T bpIndex;
  uint32_T iRght;
  uint32_T iLeft;
  uint32_T found;

  // Binary Search using Previous Index
  bpIndex = startIndex;
  iLeft = 0U;
  iRght = maxIndex;
  found = 0U;
  while (found == 0U) {
    if (u < bp[bpIndex]) {
      iRght = bpIndex - 1U;
      bpIndex = (iRght + iLeft) >> 1U;
    } else if (u < bp[bpIndex + 1U]) {
      found = 1U;
    } else {
      iLeft = bpIndex + 1U;
      bpIndex = (iRght + iLeft) >> 1U;
    }
  }

  return bpIndex;
}

int32_T div_s32_floor(int32_T numerator, int32_T denominator)
{
  int32_T quotient;
  uint32_T absNumerator;
  uint32_T absDenominator;
  uint32_T tempAbsQuotient;
  boolean_T quotientNeedsNegation;
  if (denominator == 0) {
    quotient = numerator >= 0 ? MAX_int32_T : MIN_int32_T;

    // Divide by zero handler
  } else {
    absNumerator = numerator < 0 ? ~static_cast<uint32_T>(numerator) + 1U :
      static_cast<uint32_T>(numerator);
    absDenominator = denominator < 0 ? ~static_cast<uint32_T>(denominator) + 1U :
      static_cast<uint32_T>(denominator);
    quotientNeedsNegation = ((numerator < 0) != (denominator < 0));
    tempAbsQuotient = absNumerator / absDenominator;
    if (quotientNeedsNegation) {
      absNumerator %= absDenominator;
      if (absNumerator > 0U) {
        tempAbsQuotient++;
      }
    }

    quotient = quotientNeedsNegation ? -static_cast<int32_T>(tempAbsQuotient) :
      static_cast<int32_T>(tempAbsQuotient);
  }

  return quotient;
}

//
//   This function updates active task flag for each subrate.
// The function is called at model base rate, hence the
// generated code self-manages all its subrates.
//
static void rate_scheduler(full_loopModelClass::RT_MODEL_full_loop_T *const
  full_loop_M)
{
  // Compute which subrates run during the next base time step.  Subrates
  //  are an integer multiple of the base rate counter.  Therefore, the subtask
  //  counter is reset when it reaches its limit (zero means run).

  (full_loop_M->Timing.TaskCounters.TID[2])++;
  if ((full_loop_M->Timing.TaskCounters.TID[2]) > 1) {
                                  // Sample time: [0.033333333333333333s, 0.0s]
    full_loop_M->Timing.TaskCounters.TID[2] = 0;
  }

  (full_loop_M->Timing.TaskCounters.TID[3])++;
  if ((full_loop_M->Timing.TaskCounters.TID[3]) > 2) {// Sample time: [0.05s, 0.0s] 
    full_loop_M->Timing.TaskCounters.TID[3] = 0;
  }

  (full_loop_M->Timing.TaskCounters.TID[4])++;
  if ((full_loop_M->Timing.TaskCounters.TID[4]) > 14) {// Sample time: [0.25s, 0.0s] 
    full_loop_M->Timing.TaskCounters.TID[4] = 0;
  }

  (full_loop_M->Timing.TaskCounters.TID[5])++;
  if ((full_loop_M->Timing.TaskCounters.TID[5]) > 299) {// Sample time: [5.0s, 0.0s] 
    full_loop_M->Timing.TaskCounters.TID[5] = 0;
  }
}

//
// This function updates continuous states using the ODE3 fixed-step
// solver algorithm
//
void full_loopModelClass::rt_ertODEUpdateContinuousStates(RTWSolverInfo *si )
{
  // Solver Matrices
  static const real_T rt_ODE3_A[3] = {
    1.0/2.0, 3.0/4.0, 1.0
  };

  static const real_T rt_ODE3_B[3][3] = {
    { 1.0/2.0, 0.0, 0.0 },

    { 0.0, 3.0/4.0, 0.0 },

    { 2.0/9.0, 1.0/3.0, 4.0/9.0 }
  };

  time_T t = rtsiGetT(si);
  time_T tnew = rtsiGetSolverStopTime(si);
  time_T h = rtsiGetStepSize(si);
  real_T *x = rtsiGetContStates(si);
  ODE3_IntgData *id = static_cast<ODE3_IntgData *>(rtsiGetSolverData(si));
  real_T *y = id->y;
  real_T *f0 = id->f[0];
  real_T *f1 = id->f[1];
  real_T *f2 = id->f[2];
  real_T hB[3];
  int_T i;
  int_T nXc = 23;
  rtsiSetSimTimeStep(si,MINOR_TIME_STEP);

  // Save the state values at time t in y, we'll use x as ynew.
  (void) std::memcpy(y, x,
                     static_cast<uint_T>(nXc)*sizeof(real_T));

  // Assumes that rtsiSetT and ModelOutputs are up-to-date
  // f0 = f(t,y)
  rtsiSetdX(si, f0);
  full_loop_derivatives();

  // f(:,2) = feval(odefile, t + hA(1), y + f*hB(:,1), args(:)(*));
  hB[0] = h * rt_ODE3_B[0][0];
  for (i = 0; i < nXc; i++) {
    x[i] = y[i] + (f0[i]*hB[0]);
  }

  rtsiSetT(si, t + h*rt_ODE3_A[0]);
  rtsiSetdX(si, f1);
  this->step();
  full_loop_derivatives();

  // f(:,3) = feval(odefile, t + hA(2), y + f*hB(:,2), args(:)(*));
  for (i = 0; i <= 1; i++) {
    hB[i] = h * rt_ODE3_B[1][i];
  }

  for (i = 0; i < nXc; i++) {
    x[i] = y[i] + (f0[i]*hB[0] + f1[i]*hB[1]);
  }

  rtsiSetT(si, t + h*rt_ODE3_A[1]);
  rtsiSetdX(si, f2);
  this->step();
  full_loop_derivatives();

  // tnew = t + hA(3);
  // ynew = y + f*hB(:,3);
  for (i = 0; i <= 2; i++) {
    hB[i] = h * rt_ODE3_B[2][i];
  }

  for (i = 0; i < nXc; i++) {
    x[i] = y[i] + (f0[i]*hB[0] + f1[i]*hB[1] + f2[i]*hB[2]);
  }

  rtsiSetT(si, tnew);
  rtsiSetSimTimeStep(si,MAJOR_TIME_STEP);
}

void full_loopModelClass::full_loop_quatmultiply(const real_T q[4], const real_T
  r[4], real_T qout[4])
{
  qout[0] = ((q[0] * r[0] - q[1] * r[1]) - q[2] * r[2]) - q[3] * r[3];
  qout[1] = (q[0] * r[1] + r[0] * q[1]) + (q[2] * r[3] - q[3] * r[2]);
  qout[2] = (q[0] * r[2] + r[0] * q[2]) + (q[3] * r[1] - q[1] * r[3]);
  qout[3] = (q[0] * r[3] + r[0] * q[3]) + (q[1] * r[2] - q[2] * r[1]);
}

real_T rt_roundd_snf(real_T u)
{
  real_T y;
  if (std::abs(u) < 4.503599627370496E+15) {
    if (u >= 0.5) {
      y = std::floor(u + 0.5);
    } else if (u > -0.5) {
      y = u * 0.0;
    } else {
      y = std::ceil(u - 0.5);
    }
  } else {
    y = u;
  }

  return y;
}

boolean_T full_loopModelClass::full_loop_isequal_p43r(const real_T varargin_1[7],
  const real_T varargin_2[7])
{
  boolean_T p;
  boolean_T p_0;
  int32_T b_k;
  boolean_T exitg1;
  p = false;
  p_0 = true;
  b_k = 0;
  exitg1 = false;
  while ((!exitg1) && (b_k < 7)) {
    if (!(varargin_1[b_k] == varargin_2[b_k])) {
      p_0 = false;
      exitg1 = true;
    } else {
      b_k++;
    }
  }

  if (p_0) {
    p = true;
  }

  return p;
}

void full_loopModelClass::full__quaternioncg_quaternioncg(const real_T
  varargin_1[84], real_T obj_a[21], real_T obj_b[21], real_T obj_c[21], real_T
  obj_d[21])
{
  std::memcpy(&obj_a[0], &varargin_1[0], 21U * sizeof(real_T));
  std::memcpy(&obj_b[0], &varargin_1[21], 21U * sizeof(real_T));
  std::memcpy(&obj_c[0], &varargin_1[42], 21U * sizeof(real_T));
  std::memcpy(&obj_d[0], &varargin_1[63], 21U * sizeof(real_T));
}

void full_loopModelClass::waypointTrajectory_setPropertie
  (waypointTrajectory_full_loop_T *obj, const real_T varargin_1[63], const
   real_T varargin_2[21], real_T varargin_4, const real_T varargin_8_a[21],
   const real_T varargin_8_b[21], const real_T varargin_8_c[21], const real_T
   varargin_8_d[21])
{
  std::memcpy(&obj->Waypoints[0], &varargin_1[0], 63U * sizeof(real_T));
  obj->SampleRate = varargin_4;
  std::memcpy(&obj->TimeOfArrival[0], &varargin_2[0], 21U * sizeof(real_T));
  std::memcpy(&obj->Quaternions.a[0], &varargin_8_a[0], 21U * sizeof(real_T));
  std::memcpy(&obj->Quaternions.b[0], &varargin_8_b[0], 21U * sizeof(real_T));
  std::memcpy(&obj->Quaternions.c[0], &varargin_8_c[0], 21U * sizeof(real_T));
  std::memcpy(&obj->Quaternions.d[0], &varargin_8_d[0], 21U * sizeof(real_T));
}

boolean_T full_loopModelClass::full_loop_isequal_p43ri(const real_T varargin_1[2],
  const real_T varargin_2[2])
{
  boolean_T p;
  boolean_T p_0;
  int32_T b_k;
  boolean_T exitg1;
  p = false;
  p_0 = true;
  b_k = 0;
  exitg1 = false;
  while ((!exitg1) && (b_k < 2)) {
    if (!(varargin_1[b_k] == varargin_2[b_k])) {
      p_0 = false;
      exitg1 = true;
    } else {
      b_k++;
    }
  }

  if (p_0) {
    p = true;
  }

  return p;
}

void full_loopModelClass::full_loop_pol2cart_p(real_T th[2], const real_T r[2],
  real_T x[2])
{
  x[0] = std::cos(th[0]);
  x[1] = std::cos(th[1]);
  th[0] = std::sin(th[0]);
  x[0] *= r[0];
  th[1] = std::sin(th[1]);
  x[1] *= r[1];
  th[0] *= r[0];
  th[1] *= r[1];
}

void full_loopModelClass::full_loop_endpointpadding_p4(const creal_T
  zcurrent_data[], const int32_T zcurrent_size[2], const creal_T varargin_1[2],
  creal_T *zleft, creal_T *zright)
{
  if (rtIsNaN(varargin_1[0].re) || rtIsNaN(varargin_1[0].im)) {
    zleft->re = (zcurrent_data[0].re - zcurrent_data[1].re) * 100.0 +
      zcurrent_data[0].re;
    zleft->im = (zcurrent_data[0].im - zcurrent_data[1].im) * 100.0 +
      zcurrent_data[0].im;
  } else {
    zleft->re = (rtNaN);
    zleft->im = 0.0;
  }

  if (rtIsNaN(varargin_1[1].re) || rtIsNaN(varargin_1[1].im)) {
    zright->re = (zcurrent_data[zcurrent_size[1] - 1].re -
                  zcurrent_data[zcurrent_size[1] - 2].re) * 100.0 +
      zcurrent_data[zcurrent_size[1] - 1].re;
    zright->im = (zcurrent_data[zcurrent_size[1] - 1].im -
                  zcurrent_data[zcurrent_size[1] - 2].im) * 100.0 +
      zcurrent_data[zcurrent_size[1] - 1].im;
  } else {
    zright->re = (rtNaN);
    zright->im = 0.0;
  }
}

void full_loopModelClass::full_loop_diff(const creal_T x_data[], const int32_T
  x_size[2], creal_T y_data[], int32_T y_size[2])
{
  int32_T ySize_idx_1;
  int32_T u0;
  full_loop_B.dimSize = x_size[1];
  if (x_size[1] == 0) {
    y_size[0] = 1;
    y_size[1] = 0;
  } else {
    u0 = x_size[1] - 1;
    if (u0 >= 1) {
      u0 = 1;
    }

    if (u0 < 1) {
      y_size[0] = 1;
      y_size[1] = 0;
    } else {
      ySize_idx_1 = x_size[1] - 1;
      if (ySize_idx_1 != 0) {
        full_loop_B.ixLead_d = 1;
        full_loop_B.iyLead_e = 0;
        full_loop_B.work_data_d = x_data[0];
        for (u0 = 2; u0 <= full_loop_B.dimSize; u0++) {
          full_loop_B.xzero_re = x_data[full_loop_B.ixLead_d].re;
          full_loop_B.xzero_im = x_data[full_loop_B.ixLead_d].im;
          for (full_loop_B.c_k_e = 0; full_loop_B.c_k_e < 1; full_loop_B.c_k_e++)
          {
            full_loop_B.tmp2_re = full_loop_B.work_data_d.re;
            full_loop_B.tmp2_im = full_loop_B.work_data_d.im;
            full_loop_B.work_data_d.re = full_loop_B.xzero_re;
            full_loop_B.work_data_d.im = full_loop_B.xzero_im;
            full_loop_B.xzero_re -= full_loop_B.tmp2_re;
            full_loop_B.xzero_im -= full_loop_B.tmp2_im;
          }

          full_loop_B.ixLead_d++;
          full_loop_B.b_y1_data[full_loop_B.iyLead_e].re = full_loop_B.xzero_re;
          full_loop_B.b_y1_data[full_loop_B.iyLead_e].im = full_loop_B.xzero_im;
          full_loop_B.iyLead_e++;
        }
      }

      y_size[0] = 1;
      y_size[1] = ySize_idx_1;
      full_loop_B.dimSize = ySize_idx_1 - 1;
      if (0 <= full_loop_B.dimSize) {
        std::memcpy(&y_data[0], &full_loop_B.b_y1_data[0], (full_loop_B.dimSize
          + 1) * sizeof(creal_T));
      }
    }
  }
}

real_T full_loopModelClass::full_loop_rt_hypotd_snf(real_T u0, real_T u1)
{
  real_T y;
  full_loop_B.a_o = std::abs(u0);
  y = std::abs(u1);
  if (full_loop_B.a_o < y) {
    full_loop_B.a_o /= y;
    y *= std::sqrt(full_loop_B.a_o * full_loop_B.a_o + 1.0);
  } else if (full_loop_B.a_o > y) {
    y /= full_loop_B.a_o;
    y = std::sqrt(y * y + 1.0) * full_loop_B.a_o;
  } else {
    if (!rtIsNaN(y)) {
      y = full_loop_B.a_o * 1.4142135623730951;
    }
  }

  return y;
}

void full_loopModelClass::full_loop_abs(const creal_T x_data[], const int32_T
  x_size[2], real_T y_data[], int32_T y_size[2])
{
  int32_T nx;
  int32_T b_k;
  nx = x_size[1] - 1;
  y_size[0] = 1;
  y_size[1] = x_size[1];
  for (b_k = 0; b_k <= nx; b_k++) {
    y_data[b_k] = full_loop_rt_hypotd_snf(x_data[b_k].re, x_data[b_k].im);
  }
}

real_T rt_atan2d_snf(real_T u0, real_T u1)
{
  real_T y;
  int32_T u0_0;
  int32_T u1_0;
  if (rtIsNaN(u0) || rtIsNaN(u1)) {
    y = (rtNaN);
  } else if (rtIsInf(u0) && rtIsInf(u1)) {
    if (u0 > 0.0) {
      u0_0 = 1;
    } else {
      u0_0 = -1;
    }

    if (u1 > 0.0) {
      u1_0 = 1;
    } else {
      u1_0 = -1;
    }

    y = atan2(static_cast<real_T>(u0_0), static_cast<real_T>(u1_0));
  } else if (u1 == 0.0) {
    if (u0 > 0.0) {
      y = RT_PI / 2.0;
    } else if (u0 < 0.0) {
      y = -(RT_PI / 2.0);
    } else {
      y = 0.0;
    }
  } else {
    y = atan2(u0, u1);
  }

  return y;
}

void full_loopModelClass::full_loop_angle(const creal_T x_data[], const int32_T
  x_size[2], real_T y_data[], int32_T y_size[2])
{
  full_loop_B.nx_j = x_size[1] - 1;
  y_size[0] = 1;
  y_size[1] = x_size[1];
  for (full_loop_B.b_k_h = 0; full_loop_B.b_k_h <= full_loop_B.nx_j;
       full_loop_B.b_k_h++) {
    y_data[full_loop_B.b_k_h] = rt_atan2d_snf(x_data[full_loop_B.b_k_h].im,
      x_data[full_loop_B.b_k_h].re);
  }
}

boolean_T full_loopModelClass::full_loop_isnan(const creal_T x)
{
  return rtIsNaN(x.re) || rtIsNaN(x.im);
}

void full_loopModelClass::full_loop_tan(const real_T x_data[], const int32_T
  x_size[2], real_T b_x_data[], int32_T b_x_size[2])
{
  int32_T nx;
  int32_T loop_ub;
  b_x_size[0] = 1;
  b_x_size[1] = x_size[1];
  loop_ub = x_size[0] * x_size[1] - 1;
  if (0 <= loop_ub) {
    std::memcpy(&b_x_data[0], &x_data[0], (loop_ub + 1) * sizeof(real_T));
  }

  nx = x_size[1] - 1;
  for (loop_ub = 0; loop_ub <= nx; loop_ub++) {
    b_x_data[loop_ub] = std::tan(b_x_data[loop_ub]);
  }
}

void full_loopModelClass::full_loop_midcurve(const creal_T Pb_data[], const
  int32_T Pb_size[2], const creal_T Vbd_data[], const real_T Lab_data[], const
  int32_T Lab_size[2], const real_T Lbd_data[], const int32_T Lbd_size[2], const
  real_T Lde_data[], const int32_T Lde_size[2], const real_T alpha_data[], const
  real_T beta_data[], creal_T Pc_data[], int32_T Pc_size[2])
{
  full_loop_B.loop_ub_dmq = Lde_size[0] * Lde_size[1] - 1;
  for (full_loop_B.d_i = 0; full_loop_B.d_i <= full_loop_B.loop_ub_dmq;
       full_loop_B.d_i++) {
    full_loop_B.a_data[full_loop_B.d_i] = 2.0 * Lde_data[full_loop_B.d_i] +
      Lbd_data[full_loop_B.d_i];
  }

  full_loop_B.loop_ub_dmq = Lab_size[0] * Lab_size[1] - 1;
  for (full_loop_B.d_i = 0; full_loop_B.d_i <= full_loop_B.loop_ub_dmq;
       full_loop_B.d_i++) {
    full_loop_B.b_data_l[full_loop_B.d_i] = 2.0 * Lab_data[full_loop_B.d_i] +
      Lbd_data[full_loop_B.d_i];
  }

  full_loop_B.Lbd_size[0] = 1;
  full_loop_B.Lbd_size[1] = Lbd_size[1];
  full_loop_B.loop_ub_dmq = Lbd_size[0] * Lbd_size[1];
  for (full_loop_B.d_i = 0; full_loop_B.d_i < full_loop_B.loop_ub_dmq;
       full_loop_B.d_i++) {
    full_loop_B.Lbd_data[full_loop_B.d_i] = (alpha_data[full_loop_B.d_i] *
      full_loop_B.a_data[full_loop_B.d_i] + beta_data[full_loop_B.d_i] *
      full_loop_B.b_data_l[full_loop_B.d_i]) * Lbd_data[full_loop_B.d_i] /
      (full_loop_B.a_data[full_loop_B.d_i] *
       full_loop_B.b_data_l[full_loop_B.d_i] * 2.0 +
       (full_loop_B.a_data[full_loop_B.d_i] +
        full_loop_B.b_data_l[full_loop_B.d_i]) * Lbd_data[full_loop_B.d_i]);
  }

  full_loop_tan(full_loop_B.Lbd_data, full_loop_B.Lbd_size, full_loop_B.b_data_l,
                full_loop_B.b_size_m);
  Pc_size[0] = 1;
  Pc_size[1] = Pb_size[1];
  full_loop_B.loop_ub_dmq = Pb_size[0] * Pb_size[1];
  for (full_loop_B.d_i = 0; full_loop_B.d_i < full_loop_B.loop_ub_dmq;
       full_loop_B.d_i++) {
    full_loop_B.re_p = 0.0 * full_loop_B.b_data_l[full_loop_B.d_i] + 1.0;
    full_loop_B.re_o = full_loop_B.re_p * Vbd_data[full_loop_B.d_i].re -
      full_loop_B.b_data_l[full_loop_B.d_i] * Vbd_data[full_loop_B.d_i].im;
    full_loop_B.im_h = full_loop_B.re_p * Vbd_data[full_loop_B.d_i].im +
      full_loop_B.b_data_l[full_loop_B.d_i] * Vbd_data[full_loop_B.d_i].re;
    if (full_loop_B.im_h == 0.0) {
      full_loop_B.re_p = full_loop_B.re_o / 2.0;
      full_loop_B.im_h = 0.0;
    } else if (full_loop_B.re_o == 0.0) {
      full_loop_B.re_p = 0.0;
      full_loop_B.im_h /= 2.0;
    } else {
      full_loop_B.re_p = full_loop_B.re_o / 2.0;
      full_loop_B.im_h /= 2.0;
    }

    Pc_data[full_loop_B.d_i].re = Pb_data[full_loop_B.d_i].re + full_loop_B.re_p;
    Pc_data[full_loop_B.d_i].im = Pb_data[full_loop_B.d_i].im + full_loop_B.im_h;
  }

  full_loop_B.loop_ub_dmq = Lbd_size[1] - 1;
  for (full_loop_B.d_i = 0; full_loop_B.d_i <= full_loop_B.loop_ub_dmq;
       full_loop_B.d_i++) {
    if (Lbd_data[full_loop_B.d_i] == 0.0) {
      Pc_data[full_loop_B.d_i] = Pb_data[full_loop_B.d_i];
    }
  }
}

void full_loopModelClass::full_loop_insertCodegen_p(const creal_T zorig_data[],
  real_T m, real_T nmax, const creal_T varargin_1[2], creal_T Zout_data[],
  int32_T Zout_size[2])
{
  if (1.0 > m) {
    full_loop_B.b_bt = 0;
  } else {
    full_loop_B.b_bt = static_cast<int32_T>(m);
  }

  full_loop_B.zorig_size[0] = 1;
  full_loop_B.zorig_size[1] = full_loop_B.b_bt;
  if (0 <= full_loop_B.b_bt - 1) {
    std::memcpy(&full_loop_B.zorig_data[0], &zorig_data[0], full_loop_B.b_bt *
                sizeof(creal_T));
  }

  full_loop_endpointpadding_p4(full_loop_B.zorig_data, full_loop_B.zorig_size,
    varargin_1, &full_loop_B.z_data[0], &full_loop_B.zright);
  if (1.0 > m) {
    full_loop_B.b_bt = 0;
  } else {
    full_loop_B.b_bt = static_cast<int32_T>(m);
  }

  full_loop_B.z_size_c[0] = 1;
  full_loop_B.z_size_c[1] = full_loop_B.b_bt - -2;
  full_loop_B.loop_ub_nk = full_loop_B.b_bt - -2;
  if (0 <= full_loop_B.loop_ub_nk - 3) {
    std::memcpy(&full_loop_B.z_data[1], &zorig_data[0], (full_loop_B.loop_ub_nk
      + -2) * sizeof(creal_T));
  }

  full_loop_B.z_data[full_loop_B.b_bt + 1] = full_loop_B.zright;
  full_loop_diff(full_loop_B.z_data, full_loop_B.z_size_c, full_loop_B.dz_data,
                 full_loop_B.zorig_size);
  full_loop_abs(full_loop_B.dz_data, full_loop_B.zorig_size,
                full_loop_B.l_data_l, full_loop_B.l_size_n);
  if (2 > full_loop_B.zorig_size[1]) {
    full_loop_B.loop_ub_nk = 0;
    full_loop_B.b_bt = 0;
  } else {
    full_loop_B.loop_ub_nk = 1;
    full_loop_B.b_bt = full_loop_B.zorig_size[1];
  }

  full_loop_B.dz_size[0] = 1;
  full_loop_B.dz_size_tmp = full_loop_B.b_bt - full_loop_B.loop_ub_nk;
  full_loop_B.dz_size[1] = full_loop_B.dz_size_tmp;
  for (full_loop_B.b_bt = 0; full_loop_B.b_bt < full_loop_B.dz_size_tmp;
       full_loop_B.b_bt++) {
    full_loop_B.dz_data_re_tmp = full_loop_B.loop_ub_nk + full_loop_B.b_bt;
    full_loop_B.zorig_data[full_loop_B.b_bt].re =
      full_loop_B.dz_data[full_loop_B.dz_data_re_tmp].re *
      full_loop_B.dz_data[full_loop_B.b_bt].re -
      -full_loop_B.dz_data[full_loop_B.dz_data_re_tmp].im *
      full_loop_B.dz_data[full_loop_B.b_bt].im;
    full_loop_B.zorig_data[full_loop_B.b_bt].im =
      full_loop_B.dz_data[full_loop_B.dz_data_re_tmp].re *
      full_loop_B.dz_data[full_loop_B.b_bt].im +
      -full_loop_B.dz_data[full_loop_B.dz_data_re_tmp].im *
      full_loop_B.dz_data[full_loop_B.b_bt].re;
  }

  full_loop_angle(full_loop_B.zorig_data, full_loop_B.dz_size,
                  full_loop_B.alpha_data, full_loop_B.alpha_size);
  if (!full_loop_isnan(varargin_1[0])) {
    full_loop_B.l_data_l[0] = 0.0;
    full_loop_B.alpha_data[0] = rt_atan2d_snf(full_loop_B.dz_data[1].re *
      varargin_1[0].im + -full_loop_B.dz_data[1].im * varargin_1[0].re,
      full_loop_B.dz_data[1].re * varargin_1[0].re - -full_loop_B.dz_data[1].im *
      varargin_1[0].im);
  }

  if (!full_loop_isnan(varargin_1[1])) {
    full_loop_B.l_data_l[full_loop_B.l_size_n[1] - 1] = 0.0;
    full_loop_B.alpha_data[full_loop_B.alpha_size[1] - 1] = rt_atan2d_snf
      (full_loop_B.dz_data[full_loop_B.zorig_size[1] - 2].im * varargin_1[1].re
       + full_loop_B.dz_data[full_loop_B.zorig_size[1] - 2].re * -varargin_1[1].
       im, full_loop_B.dz_data[full_loop_B.zorig_size[1] - 2].re * varargin_1[1]
       .re - full_loop_B.dz_data[full_loop_B.zorig_size[1] - 2].im *
       -varargin_1[1].im);
  }

  if (2.0 > static_cast<real_T>(full_loop_B.z_size_c[1]) - 2.0) {
    full_loop_B.dz_size_tmp = 0;
    full_loop_B.b_bt = 0;
  } else {
    full_loop_B.dz_size_tmp = 1;
    full_loop_B.b_bt = full_loop_B.z_size_c[1] - 2;
  }

  if (2.0 > static_cast<real_T>(full_loop_B.zorig_size[1]) - 1.0) {
    full_loop_B.u_c = 0;
    full_loop_B.t_ds = 0;
  } else {
    full_loop_B.u_c = 1;
    full_loop_B.t_ds = full_loop_B.zorig_size[1] - 1;
  }

  if (1.0 > static_cast<real_T>(full_loop_B.l_size_n[1]) - 2.0) {
    full_loop_B.w_h = 0;
  } else {
    full_loop_B.w_h = full_loop_B.l_size_n[1] - 2;
  }

  if (2.0 > static_cast<real_T>(full_loop_B.l_size_n[1]) - 1.0) {
    full_loop_B.dz_data_re_tmp = 0;
    full_loop_B.ab_f = 0;
  } else {
    full_loop_B.dz_data_re_tmp = 1;
    full_loop_B.ab_f = full_loop_B.l_size_n[1] - 1;
  }

  if (3 > full_loop_B.l_size_n[1]) {
    full_loop_B.eb = 0;
    full_loop_B.db = 0;
  } else {
    full_loop_B.eb = 2;
    full_loop_B.db = full_loop_B.l_size_n[1];
  }

  if (1.0 > static_cast<real_T>(full_loop_B.alpha_size[1]) - 1.0) {
    full_loop_B.gb = 0;
  } else {
    full_loop_B.gb = full_loop_B.alpha_size[1] - 1;
  }

  if (2 > full_loop_B.alpha_size[1]) {
    full_loop_B.loop_ub_nk = 0;
    full_loop_B.jb = 0;
  } else {
    full_loop_B.loop_ub_nk = 1;
    full_loop_B.jb = full_loop_B.alpha_size[1];
  }

  full_loop_B.z_size_j[0] = 1;
  full_loop_B.z_size_tmp = full_loop_B.b_bt - full_loop_B.dz_size_tmp;
  full_loop_B.z_size_j[1] = full_loop_B.z_size_tmp;
  for (full_loop_B.b_bt = 0; full_loop_B.b_bt < full_loop_B.z_size_tmp;
       full_loop_B.b_bt++) {
    full_loop_B.z_data_f[full_loop_B.b_bt] =
      full_loop_B.z_data[full_loop_B.dz_size_tmp + full_loop_B.b_bt];
  }

  full_loop_B.dz_size_tmp = full_loop_B.t_ds - full_loop_B.u_c;
  for (full_loop_B.b_bt = 0; full_loop_B.b_bt < full_loop_B.dz_size_tmp;
       full_loop_B.b_bt++) {
    full_loop_B.zorig_data[full_loop_B.b_bt] =
      full_loop_B.dz_data[full_loop_B.u_c + full_loop_B.b_bt];
  }

  full_loop_B.l_size_k[0] = 1;
  full_loop_B.l_size_k[1] = full_loop_B.w_h;
  if (0 <= full_loop_B.w_h - 1) {
    std::memcpy(&full_loop_B.l_data_h[0], &full_loop_B.l_data_l[0],
                full_loop_B.w_h * sizeof(real_T));
  }

  full_loop_B.l_size_o[0] = 1;
  full_loop_B.u_c = full_loop_B.ab_f - full_loop_B.dz_data_re_tmp;
  full_loop_B.l_size_o[1] = full_loop_B.u_c;
  for (full_loop_B.b_bt = 0; full_loop_B.b_bt < full_loop_B.u_c;
       full_loop_B.b_bt++) {
    full_loop_B.l_data_b[full_loop_B.b_bt] =
      full_loop_B.l_data_l[full_loop_B.dz_data_re_tmp + full_loop_B.b_bt];
  }

  full_loop_B.l_size_g[0] = 1;
  full_loop_B.u_c = full_loop_B.db - full_loop_B.eb;
  full_loop_B.l_size_g[1] = full_loop_B.u_c;
  for (full_loop_B.b_bt = 0; full_loop_B.b_bt < full_loop_B.u_c;
       full_loop_B.b_bt++) {
    full_loop_B.l_data_d[full_loop_B.b_bt] = full_loop_B.l_data_l[full_loop_B.eb
      + full_loop_B.b_bt];
  }

  if (0 <= full_loop_B.gb - 1) {
    std::memcpy(&full_loop_B.alpha_data_b[0], &full_loop_B.alpha_data[0],
                full_loop_B.gb * sizeof(real_T));
  }

  full_loop_B.dz_data_re_tmp = full_loop_B.jb - full_loop_B.loop_ub_nk;
  for (full_loop_B.b_bt = 0; full_loop_B.b_bt < full_loop_B.dz_data_re_tmp;
       full_loop_B.b_bt++) {
    full_loop_B.alpha_data_n[full_loop_B.b_bt] =
      full_loop_B.alpha_data[full_loop_B.loop_ub_nk + full_loop_B.b_bt];
  }

  full_loop_midcurve(full_loop_B.z_data_f, full_loop_B.z_size_j,
                     full_loop_B.zorig_data, full_loop_B.l_data_h,
                     full_loop_B.l_size_k, full_loop_B.l_data_b,
                     full_loop_B.l_size_o, full_loop_B.l_data_d,
                     full_loop_B.l_size_g, full_loop_B.alpha_data_b,
                     full_loop_B.alpha_data_n, full_loop_B.znew_data,
                     full_loop_B.z_size_c);
  full_loop_B.loop_ub_nk = static_cast<int32_T>(nmax) - 1;
  if (0 <= full_loop_B.loop_ub_nk) {
    std::memset(&Zout_data[0], 0, (full_loop_B.loop_ub_nk + 1) * sizeof(creal_T));
  }

  if (1.0 > m) {
    full_loop_B.loop_ub_nk = -1;
  } else {
    full_loop_B.loop_ub_nk = static_cast<int32_T>(m) - 1;
  }

  full_loop_B.wb = 2.0 * m - 1.0;
  if (1.0 > full_loop_B.wb) {
    full_loop_B.dz_data_re_tmp = 1;
  } else {
    full_loop_B.dz_data_re_tmp = 2;
  }

  for (full_loop_B.b_bt = 0; full_loop_B.b_bt <= full_loop_B.loop_ub_nk;
       full_loop_B.b_bt++) {
    Zout_data[full_loop_B.dz_data_re_tmp * full_loop_B.b_bt] =
      zorig_data[full_loop_B.b_bt];
  }

  if (2.0 > 2.0 * static_cast<real_T>(full_loop_B.z_size_c[1]) + 1.0) {
    full_loop_B.dz_data_re_tmp = 0;
    full_loop_B.eb = 1;
  } else {
    full_loop_B.dz_data_re_tmp = 1;
    full_loop_B.eb = 2;
  }

  full_loop_B.loop_ub_nk = full_loop_B.z_size_c[1];
  for (full_loop_B.b_bt = 0; full_loop_B.b_bt < full_loop_B.loop_ub_nk;
       full_loop_B.b_bt++) {
    Zout_data[full_loop_B.dz_data_re_tmp + full_loop_B.eb * full_loop_B.b_bt] =
      full_loop_B.znew_data[full_loop_B.b_bt];
  }

  if (1.0 > full_loop_B.wb) {
    full_loop_B.loop_ub_nk = 0;
  } else {
    full_loop_B.loop_ub_nk = static_cast<int32_T>(full_loop_B.wb);
  }

  Zout_size[0] = 1;
  Zout_size[1] = full_loop_B.loop_ub_nk;
}

void full_loopModelClass::full_loop_optimize_p(const creal_T zcurrent_data[],
  const int32_T zcurrent_size[2], const creal_T zorig_data[], const int32_T
  zorig_size[2], const creal_T varargin_1[2], creal_T Zout_data[], int32_T
  Zout_size[2])
{
  full_loop_endpointpadding_p4(zcurrent_data, zcurrent_size, varargin_1,
    &full_loop_B.z_data_c[0], &full_loop_B.zright_h);
  full_loop_B.z_size_kg[0] = 1;
  full_loop_B.z_size_kg[1] = zcurrent_size[1] + 2;
  full_loop_B.loop_ub_lt = zcurrent_size[0] * zcurrent_size[1] - 1;
  if (0 <= full_loop_B.loop_ub_lt) {
    std::memcpy(&full_loop_B.z_data_c[1], &zcurrent_data[0],
                (full_loop_B.loop_ub_lt + 1) * sizeof(creal_T));
  }

  full_loop_B.z_data_c[full_loop_B.loop_ub_lt + 2] = full_loop_B.zright_h;
  full_loop_diff(full_loop_B.z_data_c, full_loop_B.z_size_kg,
                 full_loop_B.d1_data, full_loop_B.d1_size_j);
  full_loop_abs(full_loop_B.d1_data, full_loop_B.d1_size_j, full_loop_B.l1_data,
                full_loop_B.l1_size_d);
  if (3 > full_loop_B.z_size_kg[1]) {
    full_loop_B.d_jx = 0;
    full_loop_B.c_dxa = 0;
  } else {
    full_loop_B.d_jx = 2;
    full_loop_B.c_dxa = full_loop_B.z_size_kg[1];
  }

  full_loop_B.d2_size_idx_1_tmp_j = full_loop_B.c_dxa - full_loop_B.d_jx;
  for (full_loop_B.c_dxa = 0; full_loop_B.c_dxa <
       full_loop_B.d2_size_idx_1_tmp_j; full_loop_B.c_dxa++) {
    full_loop_B.loop_ub_lt = full_loop_B.d_jx + full_loop_B.c_dxa;
    full_loop_B.d2_data[full_loop_B.c_dxa].re =
      full_loop_B.z_data_c[full_loop_B.loop_ub_lt].re -
      full_loop_B.z_data_c[full_loop_B.c_dxa].re;
    full_loop_B.d2_data[full_loop_B.c_dxa].im =
      full_loop_B.z_data_c[full_loop_B.loop_ub_lt].im -
      full_loop_B.z_data_c[full_loop_B.c_dxa].im;
  }

  if (2 > full_loop_B.d2_size_idx_1_tmp_j - 1) {
    full_loop_B.d_jx = 0;
    full_loop_B.c_dxa = 0;
  } else {
    full_loop_B.d_jx = 1;
    full_loop_B.c_dxa = full_loop_B.d2_size_idx_1_tmp_j - 1;
  }

  full_loop_B.d2_size_p[0] = 1;
  full_loop_B.loop_ub_lt = full_loop_B.c_dxa - full_loop_B.d_jx;
  full_loop_B.d2_size_p[1] = full_loop_B.loop_ub_lt;
  for (full_loop_B.c_dxa = 0; full_loop_B.c_dxa < full_loop_B.loop_ub_lt;
       full_loop_B.c_dxa++) {
    full_loop_B.d2_data_re_tmp_n = full_loop_B.d_jx + full_loop_B.c_dxa;
    full_loop_B.d2_data_p[full_loop_B.c_dxa].re =
      full_loop_B.d2_data[full_loop_B.d2_data_re_tmp_n].re *
      full_loop_B.d1_data[full_loop_B.c_dxa].re -
      -full_loop_B.d2_data[full_loop_B.d2_data_re_tmp_n].im *
      full_loop_B.d1_data[full_loop_B.c_dxa].im;
    full_loop_B.d2_data_p[full_loop_B.c_dxa].im =
      full_loop_B.d2_data[full_loop_B.d2_data_re_tmp_n].re *
      full_loop_B.d1_data[full_loop_B.c_dxa].im +
      -full_loop_B.d2_data[full_loop_B.d2_data_re_tmp_n].im *
      full_loop_B.d1_data[full_loop_B.c_dxa].re;
  }

  full_loop_angle(full_loop_B.d2_data_p, full_loop_B.d2_size_p,
                  full_loop_B.tmp_data_bs, full_loop_B.z_size_kg);
  full_loop_B.c_dxa = full_loop_B.z_size_kg[0] * full_loop_B.z_size_kg[1];
  if (0 <= full_loop_B.c_dxa - 1) {
    std::memcpy(&full_loop_B.alpha_data_e[0], &full_loop_B.tmp_data_bs[0],
                full_loop_B.c_dxa * sizeof(real_T));
  }

  if (4 > full_loop_B.d1_size_j[1]) {
    full_loop_B.d_jx = 0;
    full_loop_B.c_dxa = 0;
  } else {
    full_loop_B.d_jx = 3;
    full_loop_B.c_dxa = full_loop_B.d1_size_j[1];
  }

  if (2 > full_loop_B.d2_size_idx_1_tmp_j - 1) {
    full_loop_B.d2_data_re_tmp_n = 0;
  } else {
    full_loop_B.d2_data_re_tmp_n = 1;
  }

  full_loop_B.d1_size_d[0] = 1;
  full_loop_B.d1_size_tmp_g = full_loop_B.c_dxa - full_loop_B.d_jx;
  full_loop_B.d1_size_d[1] = full_loop_B.d1_size_tmp_g;
  for (full_loop_B.c_dxa = 0; full_loop_B.c_dxa < full_loop_B.d1_size_tmp_g;
       full_loop_B.c_dxa++) {
    full_loop_B.d1_data_re_tmp_d = full_loop_B.d_jx + full_loop_B.c_dxa;
    full_loop_B.loop_ub_lt = full_loop_B.d2_data_re_tmp_n + full_loop_B.c_dxa;
    full_loop_B.d1_data_n[full_loop_B.c_dxa].re =
      full_loop_B.d2_data[full_loop_B.loop_ub_lt].re *
      full_loop_B.d1_data[full_loop_B.d1_data_re_tmp_d].re -
      full_loop_B.d2_data[full_loop_B.loop_ub_lt].im *
      -full_loop_B.d1_data[full_loop_B.d1_data_re_tmp_d].im;
    full_loop_B.d1_data_n[full_loop_B.c_dxa].im =
      full_loop_B.d2_data[full_loop_B.loop_ub_lt].im *
      full_loop_B.d1_data[full_loop_B.d1_data_re_tmp_d].re +
      full_loop_B.d2_data[full_loop_B.loop_ub_lt].re *
      -full_loop_B.d1_data[full_loop_B.d1_data_re_tmp_d].im;
  }

  full_loop_angle(full_loop_B.d1_data_n, full_loop_B.d1_size_d,
                  full_loop_B.tmp_data_bs, full_loop_B.z_size_kg);
  full_loop_B.loop_ub_lt = full_loop_B.z_size_kg[0] * full_loop_B.z_size_kg[1];
  if (0 <= full_loop_B.loop_ub_lt - 1) {
    std::memcpy(&full_loop_B.beta_data[0], &full_loop_B.tmp_data_bs[0],
                full_loop_B.loop_ub_lt * sizeof(real_T));
  }

  if (!full_loop_isnan(varargin_1[0])) {
    full_loop_B.l1_data[0] = 0.0;
    full_loop_B.alpha_data_e[0] = rt_atan2d_snf(full_loop_B.d2_data[1].re *
      varargin_1[0].im + -full_loop_B.d2_data[1].im * varargin_1[0].re,
      full_loop_B.d2_data[1].re * varargin_1[0].re - -full_loop_B.d2_data[1].im *
      varargin_1[0].im);
  }

  if (!full_loop_isnan(varargin_1[1])) {
    full_loop_B.l1_data[full_loop_B.l1_size_d[1] - 1] = 0.0;
    full_loop_B.beta_data[full_loop_B.z_size_kg[1] - 1] = rt_atan2d_snf
      (full_loop_B.d2_data[full_loop_B.d2_size_idx_1_tmp_j - 2].im * varargin_1
       [1].re + full_loop_B.d2_data[full_loop_B.d2_size_idx_1_tmp_j - 2].re *
       -varargin_1[1].im, full_loop_B.d2_data[full_loop_B.d2_size_idx_1_tmp_j -
       2].re * varargin_1[1].re -
       full_loop_B.d2_data[full_loop_B.d2_size_idx_1_tmp_j - 2].im *
       -varargin_1[1].im);
  }

  if (1.0 > static_cast<real_T>(zcurrent_size[1]) - 2.0) {
    full_loop_B.c_dxa = 0;
  } else {
    full_loop_B.c_dxa = zcurrent_size[1] - 2;
  }

  if (2 > full_loop_B.d2_size_idx_1_tmp_j - 1) {
    full_loop_B.d_jx = 0;
    full_loop_B.loop_ub_lt = 0;
  } else {
    full_loop_B.d_jx = 1;
    full_loop_B.loop_ub_lt = full_loop_B.d2_size_idx_1_tmp_j - 1;
  }

  if (1.0 > static_cast<real_T>(full_loop_B.l1_size_d[1]) - 3.0) {
    full_loop_B.hb_k = 0;
  } else {
    full_loop_B.hb_k = full_loop_B.l1_size_d[1] - 3;
  }

  if (2.0 > static_cast<real_T>(full_loop_B.l1_size_d[1]) - 2.0) {
    full_loop_B.d2_size_idx_1_tmp_j = 0;
    full_loop_B.kb_b = 0;
  } else {
    full_loop_B.d2_size_idx_1_tmp_j = 1;
    full_loop_B.kb_b = full_loop_B.l1_size_d[1] - 2;
  }

  if (3.0 > static_cast<real_T>(full_loop_B.l1_size_d[1]) - 1.0) {
    full_loop_B.d2_data_re_tmp_n = 0;
  } else {
    full_loop_B.d2_data_re_tmp_n = 2;
  }

  if (4 > full_loop_B.l1_size_d[1]) {
    full_loop_B.d1_size_tmp_g = 0;
    full_loop_B.d1_data_re_tmp_d = 0;
  } else {
    full_loop_B.d1_size_tmp_g = 3;
    full_loop_B.d1_data_re_tmp_d = full_loop_B.l1_size_d[1];
  }

  full_loop_B.zcurrent_size_b[0] = 1;
  full_loop_B.zcurrent_size_b[1] = full_loop_B.c_dxa;
  if (0 <= full_loop_B.c_dxa - 1) {
    std::memcpy(&full_loop_B.d2_data_p[0], &zcurrent_data[0], full_loop_B.c_dxa *
                sizeof(creal_T));
  }

  full_loop_B.loop_ub_lt -= full_loop_B.d_jx;
  for (full_loop_B.c_dxa = 0; full_loop_B.c_dxa < full_loop_B.loop_ub_lt;
       full_loop_B.c_dxa++) {
    full_loop_B.d1_data_n[full_loop_B.c_dxa] =
      full_loop_B.d2_data[full_loop_B.d_jx + full_loop_B.c_dxa];
  }

  full_loop_B.l1_size_o[0] = 1;
  full_loop_B.l1_size_o[1] = full_loop_B.hb_k;
  if (0 <= full_loop_B.hb_k - 1) {
    std::memcpy(&full_loop_B.l1_data_b[0], &full_loop_B.l1_data[0],
                full_loop_B.hb_k * sizeof(real_T));
  }

  full_loop_B.l1_size_j[0] = 1;
  full_loop_B.loop_ub_lt = full_loop_B.kb_b - full_loop_B.d2_size_idx_1_tmp_j;
  full_loop_B.l1_size_j[1] = full_loop_B.loop_ub_lt;
  for (full_loop_B.c_dxa = 0; full_loop_B.c_dxa < full_loop_B.loop_ub_lt;
       full_loop_B.c_dxa++) {
    full_loop_B.l1_data_da[full_loop_B.c_dxa] =
      full_loop_B.l1_data[full_loop_B.d2_size_idx_1_tmp_j + full_loop_B.c_dxa] +
      full_loop_B.l1_data[full_loop_B.d2_data_re_tmp_n + full_loop_B.c_dxa];
  }

  full_loop_B.l1_size_p[0] = 1;
  full_loop_B.loop_ub_lt = full_loop_B.d1_data_re_tmp_d -
    full_loop_B.d1_size_tmp_g;
  full_loop_B.l1_size_p[1] = full_loop_B.loop_ub_lt;
  for (full_loop_B.c_dxa = 0; full_loop_B.c_dxa < full_loop_B.loop_ub_lt;
       full_loop_B.c_dxa++) {
    full_loop_B.l1_data_d[full_loop_B.c_dxa] =
      full_loop_B.l1_data[full_loop_B.d1_size_tmp_g + full_loop_B.c_dxa];
  }

  full_loop_midcurve(full_loop_B.d2_data_p, full_loop_B.zcurrent_size_b,
                     full_loop_B.d1_data_n, full_loop_B.l1_data_b,
                     full_loop_B.l1_size_o, full_loop_B.l1_data_da,
                     full_loop_B.l1_size_j, full_loop_B.l1_data_d,
                     full_loop_B.l1_size_p, full_loop_B.alpha_data_e,
                     full_loop_B.beta_data, full_loop_B.tmp_data_m,
                     full_loop_B.z_size_kg);
  Zout_size[0] = 1;
  Zout_size[1] = full_loop_B.z_size_kg[1] + 2;
  Zout_data[0] = zorig_data[0];
  full_loop_B.c_dxa = full_loop_B.z_size_kg[0] * full_loop_B.z_size_kg[1];
  if (0 <= full_loop_B.c_dxa - 1) {
    std::memcpy(&Zout_data[1], &full_loop_B.tmp_data_m[0], full_loop_B.c_dxa *
                sizeof(creal_T));
  }

  Zout_data[full_loop_B.c_dxa + 1] = zorig_data[zorig_size[1] - 1];
  full_loop_B.ub_tmp_o = (static_cast<real_T>(zcurrent_size[1]) -
    static_cast<real_T>(zorig_size[1])) / (static_cast<real_T>(zorig_size[1]) -
    1.0) + 1.0;
  if ((full_loop_B.ub_tmp_o == 0.0) || (((full_loop_B.ub_tmp_o > 0.0) && (1 >
         Zout_size[1])) || ((0.0 > full_loop_B.ub_tmp_o) && (Zout_size[1] > 1))))
  {
    full_loop_B.d2_size_idx_1_tmp_j = 1;
  } else {
    full_loop_B.d2_size_idx_1_tmp_j = static_cast<int32_T>(full_loop_B.ub_tmp_o);
  }

  full_loop_B.loop_ub_lt = zorig_size[1];
  for (full_loop_B.c_dxa = 0; full_loop_B.c_dxa < full_loop_B.loop_ub_lt;
       full_loop_B.c_dxa++) {
    Zout_data[full_loop_B.d2_size_idx_1_tmp_j * full_loop_B.c_dxa] =
      zorig_data[full_loop_B.c_dxa];
  }
}

void full_loopModelClass::full_loop_cloth_p(const creal_T z_data[], const
  int32_T *z_size, const creal_T varargin_1[2], real_T r_data[], int32_T r_size
  [2], real_T s_data[], int32_T s_size[2])
{
  full_loop_B.nmax = (static_cast<real_T>(*z_size) - 1.0) * 128.0 + 1.0;
  full_loop_B.Zout_size_tmp = static_cast<int32_T>(full_loop_B.nmax);
  full_loop_B.loop_ub_hh = full_loop_B.Zout_size_tmp - 1;
  if (0 <= full_loop_B.loop_ub_hh) {
    std::memset(&full_loop_B.Zout_data[0], 0, (full_loop_B.loop_ub_hh + 1) *
                sizeof(creal_T));
  }

  full_loop_B.m_a = *z_size;
  full_loop_B.unnamed_idx_1 = *z_size;
  if (0 <= full_loop_B.unnamed_idx_1 - 1) {
    std::memcpy(&full_loop_B.Zout_data[0], &z_data[0], full_loop_B.unnamed_idx_1
                * sizeof(creal_T));
  }

  full_loop_B.iv8[0] = 1;
  full_loop_B.iv8[1] = *z_size;
  full_loop_B.Zout_size[0] = 1;
  full_loop_B.iv9[0] = 1;
  full_loop_B.iv9[1] = *z_size;
  full_loop_B.Zout_size_c[0] = 1;
  full_loop_B.iv10[0] = 1;
  full_loop_B.iv10[1] = *z_size;
  full_loop_B.Zout_size_j[0] = 1;
  for (full_loop_B.unnamed_idx_1 = 0; full_loop_B.unnamed_idx_1 < 7;
       full_loop_B.unnamed_idx_1++) {
    full_loop_B.mnew = 2.0 * full_loop_B.m_a - 1.0;
    full_loop_insertCodegen_p(full_loop_B.Zout_data, full_loop_B.m_a,
      full_loop_B.nmax, varargin_1, full_loop_B.tmp_data_p,
      full_loop_B.tmp_size_d);
    full_loop_B.loop_ub_hh = full_loop_B.tmp_size_d[1];
    if (0 <= full_loop_B.loop_ub_hh - 1) {
      std::memcpy(&full_loop_B.Zout_data[0], &full_loop_B.tmp_data_p[0],
                  full_loop_B.loop_ub_hh * sizeof(creal_T));
    }

    if (1.0 > full_loop_B.mnew) {
      full_loop_B.loop_ub_hh = 0;
    } else {
      full_loop_B.loop_ub_hh = static_cast<int32_T>(full_loop_B.mnew);
    }

    full_loop_B.Zout_size[1] = full_loop_B.loop_ub_hh;
    if (0 <= full_loop_B.loop_ub_hh - 1) {
      std::memcpy(&full_loop_B.Zout_data_c[0], &full_loop_B.Zout_data[0],
                  full_loop_B.loop_ub_hh * sizeof(creal_T));
    }

    full_loop_optimize_p(full_loop_B.Zout_data_c, full_loop_B.Zout_size, z_data,
                         full_loop_B.iv8, varargin_1, full_loop_B.tmp_data_p,
                         full_loop_B.tmp_size_d);
    full_loop_B.loop_ub_hh = full_loop_B.tmp_size_d[1];
    if (0 <= full_loop_B.loop_ub_hh - 1) {
      std::memcpy(&full_loop_B.Zout_data[0], &full_loop_B.tmp_data_p[0],
                  full_loop_B.loop_ub_hh * sizeof(creal_T));
    }

    if (1.0 > full_loop_B.mnew) {
      full_loop_B.loop_ub_hh = 0;
    } else {
      full_loop_B.loop_ub_hh = static_cast<int32_T>(full_loop_B.mnew);
    }

    full_loop_B.Zout_size_c[1] = full_loop_B.loop_ub_hh;
    if (0 <= full_loop_B.loop_ub_hh - 1) {
      std::memcpy(&full_loop_B.Zout_data_c[0], &full_loop_B.Zout_data[0],
                  full_loop_B.loop_ub_hh * sizeof(creal_T));
    }

    full_loop_optimize_p(full_loop_B.Zout_data_c, full_loop_B.Zout_size_c,
                         z_data, full_loop_B.iv9, varargin_1,
                         full_loop_B.tmp_data_p, full_loop_B.tmp_size_d);
    full_loop_B.loop_ub_hh = full_loop_B.tmp_size_d[1];
    if (0 <= full_loop_B.loop_ub_hh - 1) {
      std::memcpy(&full_loop_B.Zout_data[0], &full_loop_B.tmp_data_p[0],
                  full_loop_B.loop_ub_hh * sizeof(creal_T));
    }

    if (1.0 > full_loop_B.mnew) {
      full_loop_B.loop_ub_hh = 0;
    } else {
      full_loop_B.loop_ub_hh = static_cast<int32_T>(full_loop_B.mnew);
    }

    full_loop_B.Zout_size_j[1] = full_loop_B.loop_ub_hh;
    if (0 <= full_loop_B.loop_ub_hh - 1) {
      std::memcpy(&full_loop_B.Zout_data_c[0], &full_loop_B.Zout_data[0],
                  full_loop_B.loop_ub_hh * sizeof(creal_T));
    }

    full_loop_optimize_p(full_loop_B.Zout_data_c, full_loop_B.Zout_size_j,
                         z_data, full_loop_B.iv10, varargin_1,
                         full_loop_B.tmp_data_p, full_loop_B.tmp_size_d);
    full_loop_B.loop_ub_hh = full_loop_B.tmp_size_d[1];
    if (0 <= full_loop_B.loop_ub_hh - 1) {
      std::memcpy(&full_loop_B.Zout_data[0], &full_loop_B.tmp_data_p[0],
                  full_loop_B.loop_ub_hh * sizeof(creal_T));
    }

    full_loop_B.m_a = full_loop_B.mnew;
  }

  r_size[0] = 1;
  r_size[1] = full_loop_B.Zout_size_tmp;
  full_loop_B.loop_ub_hh = full_loop_B.Zout_size_tmp - 1;
  for (full_loop_B.unnamed_idx_1 = 0; full_loop_B.unnamed_idx_1 <=
       full_loop_B.loop_ub_hh; full_loop_B.unnamed_idx_1++) {
    r_data[full_loop_B.unnamed_idx_1] =
      full_loop_B.Zout_data[full_loop_B.unnamed_idx_1].re;
  }

  s_size[0] = 1;
  s_size[1] = full_loop_B.Zout_size_tmp;
  full_loop_B.loop_ub_hh = full_loop_B.Zout_size_tmp - 1;
  for (full_loop_B.unnamed_idx_1 = 0; full_loop_B.unnamed_idx_1 <=
       full_loop_B.loop_ub_hh; full_loop_B.unnamed_idx_1++) {
    s_data[full_loop_B.unnamed_idx_1] =
      full_loop_B.Zout_data[full_loop_B.unnamed_idx_1].im;
  }
}

void full_loopModelClass::full_loop_packageCodegen_p(const real_T r_data[],
  const real_T s_data[], real_T n, real_T u_data[], int32_T *u_size, real_T
  v_data[], int32_T *v_size)
{
  int32_T u_size_tmp;
  u_size_tmp = static_cast<int32_T>(n);
  *u_size = u_size_tmp;
  if (0 <= u_size_tmp - 1) {
    std::memset(&u_data[0], 0, u_size_tmp * sizeof(real_T));
  }

  *v_size = u_size_tmp;
  if (0 <= u_size_tmp - 1) {
    std::memset(&v_data[0], 0, u_size_tmp * sizeof(real_T));
  }

  if (1.0 > n) {
    u_size_tmp = -1;
  } else {
    u_size_tmp--;
  }

  if (0 <= u_size_tmp) {
    std::memcpy(&u_data[0], &r_data[0], (u_size_tmp + 1) * sizeof(real_T));
  }

  if (1.0 > n) {
    u_size_tmp = -1;
  } else {
    u_size_tmp = static_cast<int32_T>(n) - 1;
  }

  if (0 <= u_size_tmp) {
    std::memcpy(&v_data[0], &s_data[0], (u_size_tmp + 1) * sizeof(real_T));
  }
}

void full_loopModelClass::full_loop_dclothoidwp_p(const real_T x_data[], const
  int32_T *x_size, const real_T y_data[], const real_T varargin_1[2], const
  real_T varargin_2[2], real_T u_data[], int32_T *u_size, real_T v_data[],
  int32_T *v_size)
{
  full_loop_B.x_size_gh = *x_size;
  full_loop_B.loop_ub_dm = *x_size;
  for (full_loop_B.i15 = 0; full_loop_B.i15 < full_loop_B.loop_ub_dm;
       full_loop_B.i15++) {
    full_loop_B.x_data_a[full_loop_B.i15].re = x_data[full_loop_B.i15];
    full_loop_B.x_data_a[full_loop_B.i15].im = y_data[full_loop_B.i15];
  }

  full_loop_B.varargin_1[0].re = varargin_1[0];
  full_loop_B.varargin_1[0].im = varargin_2[0];
  full_loop_B.varargin_1[1].re = varargin_1[1];
  full_loop_B.varargin_1[1].im = varargin_2[1];
  full_loop_cloth_p(full_loop_B.x_data_a, &full_loop_B.x_size_gh,
                    full_loop_B.varargin_1, full_loop_B.r_data,
                    full_loop_B.r_size, full_loop_B.s_data, full_loop_B.s_size);
  full_loop_packageCodegen_p(full_loop_B.r_data, full_loop_B.s_data, 128.0 * (
    static_cast<real_T>(*x_size) - 1.0) + 1.0, u_data, u_size, v_data, v_size);
}

void full_loopModelClass::full_loop_angle_p(const creal_T x_data[], const
  int32_T *x_size, real_T y_data[], int32_T *y_size)
{
  int32_T nx;
  int32_T b_k;
  nx = *x_size - 1;
  *y_size = *x_size;
  for (b_k = 0; b_k <= nx; b_k++) {
    y_data[b_k] = rt_atan2d_snf(x_data[b_k].im, x_data[b_k].re);
  }
}

void full_loopModelClass::full_loop_exp_p(creal_T x_data[], const int32_T
  *x_size)
{
  full_loop_B.nx = *x_size - 1;
  for (full_loop_B.b_k_n = 0; full_loop_B.b_k_n <= full_loop_B.nx;
       full_loop_B.b_k_n++) {
    if (x_data[full_loop_B.b_k_n].im == 0.0) {
      full_loop_B.b_x_re = std::exp(x_data[full_loop_B.b_k_n].re);
      full_loop_B.r_e = 0.0;
    } else if (rtIsInf(x_data[full_loop_B.b_k_n].im) && rtIsInf
               (x_data[full_loop_B.b_k_n].re) && (x_data[full_loop_B.b_k_n].re <
                0.0)) {
      full_loop_B.b_x_re = 0.0;
      full_loop_B.r_e = 0.0;
    } else {
      full_loop_B.r_e = std::exp(x_data[full_loop_B.b_k_n].re / 2.0);
      full_loop_B.b_x_re = full_loop_B.r_e * std::cos(x_data[full_loop_B.b_k_n].
        im) * full_loop_B.r_e;
      full_loop_B.r_e *= full_loop_B.r_e * std::sin(x_data[full_loop_B.b_k_n].im);
    }

    x_data[full_loop_B.b_k_n].re = full_loop_B.b_x_re;
    x_data[full_loop_B.b_k_n].im = full_loop_B.r_e;
  }
}

real_T full_loopModelClass::full_loop_rt_powd_snf(real_T u0, real_T u1)
{
  real_T y;
  if (rtIsNaN(u0) || rtIsNaN(u1)) {
    y = (rtNaN);
  } else {
    full_loop_B.d1 = std::abs(u0);
    full_loop_B.d2 = std::abs(u1);
    if (rtIsInf(u1)) {
      if (full_loop_B.d1 == 1.0) {
        y = 1.0;
      } else if (full_loop_B.d1 > 1.0) {
        if (u1 > 0.0) {
          y = (rtInf);
        } else {
          y = 0.0;
        }
      } else if (u1 > 0.0) {
        y = 0.0;
      } else {
        y = (rtInf);
      }
    } else if (full_loop_B.d2 == 0.0) {
      y = 1.0;
    } else if (full_loop_B.d2 == 1.0) {
      if (u1 > 0.0) {
        y = u0;
      } else {
        y = 1.0 / u0;
      }
    } else if (u1 == 2.0) {
      y = u0 * u0;
    } else if ((u1 == 0.5) && (u0 >= 0.0)) {
      y = std::sqrt(u0);
    } else if ((u0 < 0.0) && (u1 > std::floor(u1))) {
      y = (rtNaN);
    } else {
      y = pow(u0, u1);
    }
  }

  return y;
}

void full_loopModelClass::full_loop_power_p(const real_T a_data[], const int32_T
  *a_size, real_T y_data[], int32_T *y_size)
{
  int32_T nx;
  int32_T b_k;
  *y_size = *a_size;
  nx = *a_size - 1;
  for (b_k = 0; b_k <= nx; b_k++) {
    y_data[b_k] = full_loop_rt_powd_snf(a_data[b_k], 2.0);
  }
}

void full_loopModelClass::full_loop_repmat_p(const real_T a_data[], const
  int32_T *a_size, real_T b_data[], int32_T b_size[2])
{
  b_size[0] = *a_size;
  b_size[1] = 25;
  full_loop_B.nrows = *a_size;
  for (full_loop_B.b_jtilecol = 0; full_loop_B.b_jtilecol < 25;
       full_loop_B.b_jtilecol++) {
    full_loop_B.ibcol = full_loop_B.b_jtilecol * full_loop_B.nrows - 1;
    for (full_loop_B.b_k_b = 0; full_loop_B.b_k_b < full_loop_B.nrows;
         full_loop_B.b_k_b++) {
      b_data[(full_loop_B.ibcol + full_loop_B.b_k_b) + 1] =
        a_data[full_loop_B.b_k_b];
    }
  }
}

void full_loopModelClass::full_loop_fetchAgrad_p(const real_T x_data[], const
  int32_T *x_size, const real_T y_data[], real_T a_data[], int32_T *a_size,
  real_T dadx_data[], int32_T *dadx_size, real_T dady_data[], int32_T *dady_size)
{
  static const real_T tmp[351] = { -1.5361481088532109E-40,
    -5.1782003708968662E-38, 5.8080516979367073E-38, -6.2922109794702842E-36,
    1.7744129415359022E-35, -9.8266873453160865E-36, -3.0557011816989596E-34,
    1.9988681524430764E-33, -2.7007621230825949E-33, 9.6497076628562535E-34,
    -8.50146594503621E-33, 8.7613736854720049E-32, -2.8258679893784358E-31,
    2.3637604856716169E-31, -5.8556266604372106E-32, -1.2863962524996432E-31,
    2.229093841830142E-30, -1.1057059963507232E-29, 2.3139349101185755E-29,
    -1.2630223562649489E-29, 2.0068564650639364E-30, -1.1052377502159136E-30,
    3.0309726719642508E-29, -2.57153235020298E-28, 7.9357820762496212E-28,
    -1.1834423538462616E-27, 3.7518152500494656E-28, -9.5988758699827141E-30,
    -5.8444661902772888E-30, 2.2799302267031842E-28, -3.118708591261201E-27,
    1.6937953593997347E-26, -3.4234259338177584E-26, 3.675290577810477E-26,
    -1.6183294340108731E-27, -2.9209077909746285E-27, -2.0493494333051533E-29,
    1.0232091530758262E-27, -2.0119872415420161E-26, 1.8157191663212143E-25,
    -6.8278782273948665E-25, 7.9289707228553727E-25, -5.1713140278139824E-25,
    -3.5757401738269863E-25, 1.7191521549607673E-25, -5.001307006229815E-29,
    2.9234616420394369E-27, -7.3372627735809734E-26, 9.6978563886575261E-25,
    -6.3976458551757164E-24, 1.6073455072306433E-23, -7.37463587795066E-25,
    -7.0522343048774666E-24, 1.4805755563608624E-23, -5.1965352404273039E-24,
    -8.5391792173019132E-29, 5.4962692899068422E-27, -1.5546891778194411E-25,
    2.6049795261751296E-24, -2.6172058881327836E-23, 1.2985982037510549E-22,
    -1.423772303418446E-22, -5.8282903661876709E-22, 4.1133508360308628E-22,
    -1.742659308147939E-22, 8.07786256209318E-23, -9.7738126735700558E-29,
    6.6212355845436972E-27, -1.7707072436748613E-25, 2.8057133511879665E-24,
    -3.4869970759687543E-23, 3.0241871214865029E-22, -9.92012310209099E-22,
    -3.2149566866116185E-21, 1.8710249707031661E-20, -1.2453541845369618E-21,
    -7.5062472154050874E-21, 2.8499865852964518E-22, -6.9207112182904389E-29,
    4.4179830835754724E-27, -4.4762524882779791E-26, -2.450817653228083E-24,
    7.1914140604820392E-23, -7.2673875098954476E-22, 3.3571441047866719E-21,
    -1.5906878744538782E-20, 1.0715370660853569E-19, -2.1813900762258771E-19,
    -3.7882773476137619E-19, 4.4188357957185649E-19, -5.2046323054922296E-20,
    -2.8170935396816464E-29, 7.8914114794548443E-28, 1.528966070127476E-25,
    -1.1332880987718864E-23, 3.3104475572268851E-22, -4.9647512138578754E-21,
    3.9715384015216385E-20, -1.6290821269847189E-19, 3.36612516663913E-19,
    -3.36275918384194E-19, -2.8323208988729979E-18, 1.5348780107717589E-17,
    -1.2231243924447674E-17, 1.5460269152965008E-18, -1.0350259940425787E-29,
    -4.7414043171551787E-28, 1.9707672417753685E-25, -1.4495788889042659E-23,
    5.1378340796211685E-22, -1.0210774519786583E-20, 1.165542649503511E-19,
    -7.1421779330877591E-19, 1.6365283191176908E-18, 4.9170568130837211E-18,
    -4.4186234291063853E-17, 1.6247947613884891E-16, -3.4187835062780104E-16,
    2.2495563268135524E-16, -2.8304172442233909E-17, -9.54190907880087E-30,
    4.33416352213585E-28, 7.30606772876727E-26, -8.4789175470441986E-24,
    3.9746370968729408E-22, -1.0350198533651566E-20, 1.589371276512773E-19,
    -1.3721089740423357E-18, 4.7868869804965763E-18, 1.9699426816042335E-17,
    -2.7595647699194014E-16, 1.2612122765846683E-15, -3.3199758280144047E-15,
    5.1284109097493322E-15, -2.9773954125181772E-15, 3.6686222388116938E-16,
    -7.13761114432792E-30, 8.6070327678610011E-28, -2.5253411261423782E-26,
    -1.429985806399278E-24, 1.4200678258817658E-22, -5.2901273901739912E-21,
    1.0879148930261737E-19, -1.2468905412479112E-18, 5.651703115185149E-18,
    4.073824764700649E-17, -7.7193016891576893E-16, 5.1280294092344238E-15,
    -1.8830251965098877E-14, 4.2082102420983456E-14, -5.4816521831539046E-14,
    2.9056289127761095E-14, -3.5049036301087839E-15, -2.7032712394278119E-30,
    4.4439845217679321E-28, -2.8561533629781625E-26, 7.4263493149653183E-25,
    7.7648205291611823E-24, -1.1313407629960782E-21, 3.4992489982228452E-20,
    -5.11237062122324E-19, 1.9082838069139238E-18, 6.02161124473958E-17,
    -1.1855133738581856E-15, 1.0647602057665829E-14, -5.5915318620809614E-14,
    1.8096099090326831E-13, -3.6385985586845819E-13, 4.2410069501559273E-13,
    -2.106362282048389E-13, 2.4385529408308407E-14, -4.8547818044528891E-31,
    9.5570081279537094E-29, -7.8572054752482576E-27, 3.3174769183447452E-25,
    -6.2142341258768858E-24, -5.0991712996566211E-23, 5.1392990708290932E-21,
    -8.807706142947147E-20, -5.8182766640448854E-19, 5.1419279154935842E-17,
    -1.04407697522146E-15, 1.1898094238539857E-14, -8.5367937011271162E-14,
    3.9513126620957262E-13, -1.1748533341492665E-12, 2.1917257282808794E-12,
    -2.3566809884820566E-12, 1.0795020408261728E-12, -1.5837465906955864E-13,
    -2.7533507225420422E-32, 5.7619182837708977E-30, -4.6471657116787863E-28,
    1.4048422360791874E-26, 3.7650962241144584E-25, -4.9228435831327322E-23,
    1.9071729205179347E-21, -3.3490783882201909E-20, -7.018689437542322E-20,
    1.8324124104655822E-17, -4.7883976550407734E-16, 7.0487303907715931E-15,
    -6.735734123826801E-14, 4.3114382655453385E-13, -1.8436618496422663E-12,
    5.1655481921478335E-12, -9.1498502333527442E-12, 9.53768065186612E-12,
    -5.5096965823391316E-12, -1.9256688414961511E-12, 2.6993907913031997E-33,
    -8.3658508533748674E-31, 1.2360111759498158E-28, -1.1391057286564071E-26,
    7.1943116140837765E-25, -3.2278401611187206E-23, 1.0313736180462972E-21,
    -2.2595952680170383E-20, 2.9013328570466337E-19, -1.4189880636575127E-19,
    -8.2575877751974837E-17, 1.9535524420193836E-15, -2.60333162544509E-14,
    2.2905798368369833E-13, -1.3730942326110817E-12, 5.5797967300488639E-12,
    -1.5044456366394642E-11, 2.5612747661164289E-11, -1.9627816796196334E-11,
    -2.8036172295220303E-11, -1.9615478304946413E-10, 3.8934925377973957E-34,
    -1.2639609126235819E-31, 1.9287682878359229E-29, -1.8332237204928374E-27,
    1.2092531131064511E-25, -5.8236835135326278E-24, 2.0915581782354698E-22,
    -5.5964099612773872E-21, 1.0833579869797173E-19, -1.3736666335311385E-18,
    6.6209633655847283E-18, 1.4362053626673917E-16, -4.0159095765450877E-15,
    5.320276578988179E-14, -4.5399145021925304E-13, 2.6343951113716903E-12,
    -1.0426603808524378E-11, 2.7378813158203465E-11, -2.4213032965198892E-11,
    -6.43589148489966E-11, 8.7111108876109732E-11, -1.58880825805031E-8,
    1.2049379324305816E-35, -4.3610770108214582E-33, 7.4936434757448969E-31,
    -8.1105245364317889E-29, 6.1705088386370215E-27, -3.480752271664829E-25,
    1.4948191338667704E-23, -4.9368146563727049E-22, 1.2499110582545291E-20,
    -2.3793207120554828E-19, 3.2322327482741956E-18, -2.6498507726404211E-17,
    7.8731033015748051E-18, 3.2775331491296092E-15, -5.1807698267687295E-14,
    4.62732644627914E-13, -2.7239785524170987E-12, 1.0896716883650769E-11,
    -1.8645986337651637E-11, 2.5459617591435155E-12, -1.3347654837468073E-8,
    1.3161132276731047E-7, -1.3227534741608429E-6, -9.7984625010885519E-38,
    3.2900432333335651E-35, -4.4581754057254838E-33, 2.5824817729473294E-31,
    5.2049615357860253E-30, -2.1583876518311414E-27, 1.9476950757610683E-25,
    -1.0716316264212252E-23, 4.1440657240625748E-22, -1.1817624319451798E-20,
    2.5249339155046378E-19, -4.0233948389965105E-18, 4.64169135391771E-17,
    -3.5476759515651092E-16, 1.1999262837080123E-15, 8.516412269170767E-15,
    -1.527199343162684E-13, 1.1449867637138848E-12, -3.6599461401055181E-12,
    -4.6103940452468584E-11, -4.7424213964325014E-9, 1.4095535848735113E-8,
    1.1415162393763462E-5, -0.00011904761791914855, -7.7487127476207258E-39,
    3.1576790378728681E-36, -5.9250135047007422E-34, 6.7643789484475193E-32,
    -5.220570875188387E-30, 2.8506788574160792E-28, -1.1098370767710674E-26,
    2.9468645436878283E-25, -4.2328657438375513E-24, -3.3901276335768838E-23,
    3.8407990599986091E-21, -1.1933448342985106E-19, 2.3702576054378613E-18,
    -3.3709086299905129E-17, 3.5240422748635714E-16, -2.688297081936284E-15,
    1.4426938768292247E-14, -4.5785087028675909E-14, 1.6710103243486247E-14,
    -1.1024143067873009E-11, -3.3079062392811025E-10, 2.8376658214791753E-8,
    2.8265347449301076E-6, 3.9682541488440042E-5, -0.016666666666889381,
    -8.6841596356231729E-42, 3.1939131296905081E-39, -4.8490390875687847E-37,
    3.2729122440862841E-35, 5.3980586162289553E-34, -3.3686936226391223E-31,
    3.7197707807256541E-29, -2.5380412938111731E-27, 1.2494404817163045E-25,
    -4.6966036280739172E-24, 1.3852307187625331E-22, -3.2509821682467773E-21,
    6.1100085267801761E-20, -9.20594856358596E-19, 1.1081925404564449E-17,
    -1.0575868027372313E-16, 7.920139233623936E-16, -4.5514965597202215E-15,
    1.3296256931854534E-14, -3.345171633728989E-13, 1.7101904098836834E-11,
    2.4300392651460408E-9, 4.6155748216027864E-8, -1.5460729722609369E-5,
    -0.00238095238099261, 1.0000000000000047 };

  const real_T *c;
  full_loop_B.u_size_p = *x_size;
  full_loop_B.loop_ub_k3 = *x_size;
  for (full_loop_B.result_e = 0; full_loop_B.result_e < full_loop_B.loop_ub_k3;
       full_loop_B.result_e++) {
    full_loop_B.u_data_g[full_loop_B.result_e] = x_data[full_loop_B.result_e] -
      y_data[full_loop_B.result_e];
  }

  full_loop_B.v_size_kn = *x_size;
  full_loop_B.loop_ub_k3 = *x_size;
  for (full_loop_B.result_e = 0; full_loop_B.result_e < full_loop_B.loop_ub_k3;
       full_loop_B.result_e++) {
    full_loop_B.v_data_o[full_loop_B.result_e] = x_data[full_loop_B.result_e] +
      y_data[full_loop_B.result_e];
  }

  c = &tmp[0];
  full_loop_B.n_n = 351;
  full_loop_B.b_idx_0_p = *x_size;
  full_loop_power_p(full_loop_B.u_data_g, &full_loop_B.u_size_p,
                    full_loop_B.tmp_data_av, &full_loop_B.tmp_size_p1);
  full_loop_repmat_p(full_loop_B.tmp_data_av, &full_loop_B.tmp_size_p1,
                     full_loop_B.varargin_2_data, full_loop_B.varargin_2_size);
  if (*x_size != 0) {
    full_loop_B.result_n = *x_size;
  } else if (full_loop_B.varargin_2_size[0] != 0) {
    full_loop_B.result_n = full_loop_B.varargin_2_size[0];
  } else {
    full_loop_B.result_n = 0;
  }

  full_loop_B.empty_non_axis_sizes = (full_loop_B.result_n == 0);
  if (full_loop_B.empty_non_axis_sizes || (*x_size != 0)) {
    full_loop_B.result_i = 1;
  } else {
    full_loop_B.result_i = 0;
  }

  if (full_loop_B.empty_non_axis_sizes || (full_loop_B.varargin_2_size[0] != 0))
  {
    full_loop_B.result_e = 25;
  } else {
    full_loop_B.result_e = 0;
  }

  full_loop_B.result_size_idx_1 = full_loop_B.result_i + full_loop_B.result_e;
  full_loop_B.loop_ub_k3 = full_loop_B.result_n * full_loop_B.result_i;
  full_loop_B.loop_ub_kj = full_loop_B.result_n * full_loop_B.result_e - 1;
  for (full_loop_B.result_e = 0; full_loop_B.result_e < full_loop_B.loop_ub_k3;
       full_loop_B.result_e++) {
    full_loop_B.result_data[full_loop_B.result_e] = 1.0;
  }

  for (full_loop_B.result_e = 0; full_loop_B.result_e <= full_loop_B.loop_ub_kj;
       full_loop_B.result_e++) {
    full_loop_B.result_data[full_loop_B.result_e + full_loop_B.loop_ub_k3] =
      full_loop_B.varargin_2_data[full_loop_B.result_e];
  }

  full_loop_B.loop_ub_k3 = full_loop_B.result_n * full_loop_B.result_size_idx_1
    - 1;
  if (0 <= full_loop_B.loop_ub_k3) {
    std::memcpy(&full_loop_B.x_data[0], &full_loop_B.result_data[0],
                (full_loop_B.loop_ub_k3 + 1) * sizeof(real_T));
  }

  if ((full_loop_B.result_n != 0) && (full_loop_B.result_size_idx_1 != 0)) {
    full_loop_B.result_size_idx_1 -= 2;
    for (full_loop_B.result_e = 0; full_loop_B.result_e <=
         full_loop_B.result_size_idx_1; full_loop_B.result_e++) {
      full_loop_B.loop_ub_kj = full_loop_B.result_n - 1;
      for (full_loop_B.loop_ub_k3 = 0; full_loop_B.loop_ub_k3 <=
           full_loop_B.loop_ub_kj; full_loop_B.loop_ub_k3++) {
        full_loop_B.x_data_tmp = full_loop_B.result_n * (full_loop_B.result_e +
          1) + full_loop_B.loop_ub_k3;
        full_loop_B.x_data[full_loop_B.x_data_tmp] *=
          full_loop_B.x_data[full_loop_B.result_n * full_loop_B.result_e +
          full_loop_B.loop_ub_k3];
      }
    }
  }

  full_loop_power_p(full_loop_B.v_data_o, &full_loop_B.v_size_kn,
                    full_loop_B.tmp_data_av, &full_loop_B.tmp_size_p1);
  full_loop_repmat_p(full_loop_B.tmp_data_av, &full_loop_B.tmp_size_p1,
                     full_loop_B.varargin_2_data, full_loop_B.varargin_2_size);
  if (*x_size != 0) {
    full_loop_B.result_i = *x_size;
  } else if (full_loop_B.varargin_2_size[0] != 0) {
    full_loop_B.result_i = full_loop_B.varargin_2_size[0];
  } else {
    full_loop_B.result_i = 0;
  }

  full_loop_B.empty_non_axis_sizes = (full_loop_B.result_i == 0);
  if (full_loop_B.empty_non_axis_sizes || (*x_size != 0)) {
    full_loop_B.result_e = 1;
  } else {
    full_loop_B.result_e = 0;
  }

  if (full_loop_B.empty_non_axis_sizes || (full_loop_B.varargin_2_size[0] != 0))
  {
    full_loop_B.loop_ub_kj = 25;
  } else {
    full_loop_B.loop_ub_kj = 0;
  }

  full_loop_B.result_size_idx_1 = full_loop_B.result_e + full_loop_B.loop_ub_kj;
  full_loop_B.loop_ub_k3 = full_loop_B.result_i * full_loop_B.result_e;
  full_loop_B.loop_ub_kj = full_loop_B.result_i * full_loop_B.loop_ub_kj - 1;
  for (full_loop_B.result_e = 0; full_loop_B.result_e < full_loop_B.loop_ub_k3;
       full_loop_B.result_e++) {
    full_loop_B.result_data[full_loop_B.result_e] = 1.0;
  }

  for (full_loop_B.result_e = 0; full_loop_B.result_e <= full_loop_B.loop_ub_kj;
       full_loop_B.result_e++) {
    full_loop_B.result_data[full_loop_B.result_e + full_loop_B.loop_ub_k3] =
      full_loop_B.varargin_2_data[full_loop_B.result_e];
  }

  full_loop_B.loop_ub_k3 = full_loop_B.result_i * full_loop_B.result_size_idx_1
    - 1;
  if (0 <= full_loop_B.loop_ub_k3) {
    std::memcpy(&full_loop_B.x_data_f[0], &full_loop_B.result_data[0],
                (full_loop_B.loop_ub_k3 + 1) * sizeof(real_T));
  }

  if ((full_loop_B.result_i != 0) && (full_loop_B.result_size_idx_1 != 0)) {
    full_loop_B.result_size_idx_1 -= 2;
    for (full_loop_B.result_e = 0; full_loop_B.result_e <=
         full_loop_B.result_size_idx_1; full_loop_B.result_e++) {
      full_loop_B.loop_ub_kj = full_loop_B.result_i - 1;
      for (full_loop_B.loop_ub_k3 = 0; full_loop_B.loop_ub_k3 <=
           full_loop_B.loop_ub_kj; full_loop_B.loop_ub_k3++) {
        full_loop_B.x_data_tmp = full_loop_B.result_i * (full_loop_B.result_e +
          1) + full_loop_B.loop_ub_k3;
        full_loop_B.x_data_f[full_loop_B.x_data_tmp] *=
          full_loop_B.x_data_f[full_loop_B.result_i * full_loop_B.result_e +
          full_loop_B.loop_ub_k3];
      }
    }
  }

  if (0 <= full_loop_B.b_idx_0_p - 1) {
    std::memset(&a_data[0], 0, full_loop_B.b_idx_0_p * sizeof(real_T));
    std::memset(&full_loop_B.dadr_data[0], 0, full_loop_B.b_idx_0_p * sizeof
                (real_T));
    std::memset(&dady_data[0], 0, full_loop_B.b_idx_0_p * sizeof(real_T));
  }

  full_loop_B.i_i = 0.0;
  full_loop_B.j_n = 0.0;
  while (full_loop_B.n_n > 0) {
    full_loop_B.c_tmp = c[full_loop_B.n_n - 1];
    full_loop_B.loop_ub_k3 = static_cast<int32_T>(full_loop_B.i_i + 1.0);
    full_loop_B.result_size_idx_1 = static_cast<int32_T>(full_loop_B.j_n + 1.0);
    for (full_loop_B.result_e = 0; full_loop_B.result_e < full_loop_B.b_idx_0_p;
         full_loop_B.result_e++) {
      a_data[full_loop_B.result_e] += full_loop_B.x_data[(full_loop_B.loop_ub_k3
        - 1) * full_loop_B.result_n + full_loop_B.result_e] * full_loop_B.c_tmp *
        full_loop_B.x_data_f[(full_loop_B.result_size_idx_1 - 1) *
        full_loop_B.result_i + full_loop_B.result_e];
    }

    if (full_loop_B.i_i > 0.0) {
      full_loop_B.i_o = (full_loop_B.i_i + 1.0) * full_loop_B.c_tmp;
      full_loop_B.loop_ub_kj = static_cast<int32_T>(full_loop_B.i_i);
      for (full_loop_B.result_e = 0; full_loop_B.result_e <
           full_loop_B.b_idx_0_p; full_loop_B.result_e++) {
        full_loop_B.dadr_data[full_loop_B.result_e] += full_loop_B.x_data
          [(full_loop_B.loop_ub_kj - 1) * full_loop_B.result_n +
          full_loop_B.result_e] * full_loop_B.i_o * full_loop_B.x_data_f
          [(full_loop_B.result_size_idx_1 - 1) * full_loop_B.result_i +
          full_loop_B.result_e];
      }
    }

    if (full_loop_B.j_n > 0.0) {
      full_loop_B.c_tmp *= full_loop_B.j_n + 1.0;
      full_loop_B.result_size_idx_1 = static_cast<int32_T>(full_loop_B.j_n);
      for (full_loop_B.result_e = 0; full_loop_B.result_e <
           full_loop_B.b_idx_0_p; full_loop_B.result_e++) {
        dady_data[full_loop_B.result_e] += full_loop_B.x_data
          [(full_loop_B.loop_ub_k3 - 1) * full_loop_B.result_n +
          full_loop_B.result_e] * full_loop_B.c_tmp * full_loop_B.x_data_f
          [(full_loop_B.result_size_idx_1 - 1) * full_loop_B.result_i +
          full_loop_B.result_e];
      }
    }

    full_loop_B.j_n++;
    if (full_loop_B.i_i + full_loop_B.j_n > 25.0) {
      full_loop_B.i_i++;
      full_loop_B.j_n = 0.0;
    }

    full_loop_B.n_n--;
  }

  full_loop_B.loop_ub_k3 = *x_size;
  for (full_loop_B.result_e = 0; full_loop_B.result_e < full_loop_B.loop_ub_k3;
       full_loop_B.result_e++) {
    dady_data[full_loop_B.result_e] *= full_loop_B.v_data_o[full_loop_B.result_e];
  }

  for (full_loop_B.result_e = 0; full_loop_B.result_e < full_loop_B.b_idx_0_p;
       full_loop_B.result_e++) {
    full_loop_B.dadr_data[full_loop_B.result_e] *=
      full_loop_B.u_data_g[full_loop_B.result_e];
  }

  *dadx_size = *x_size;
  full_loop_B.loop_ub_k3 = *x_size;
  for (full_loop_B.result_e = 0; full_loop_B.result_e < full_loop_B.loop_ub_k3;
       full_loop_B.result_e++) {
    dadx_data[full_loop_B.result_e] = (2.0 *
      full_loop_B.v_data_o[full_loop_B.result_e] *
      (dady_data[full_loop_B.result_e] +
       full_loop_B.dadr_data[full_loop_B.result_e]) +
      a_data[full_loop_B.result_e]) * 3.0;
  }

  *dady_size = *x_size;
  full_loop_B.loop_ub_k3 = *x_size;
  for (full_loop_B.result_e = 0; full_loop_B.result_e < full_loop_B.loop_ub_k3;
       full_loop_B.result_e++) {
    dady_data[full_loop_B.result_e] = (2.0 *
      full_loop_B.v_data_o[full_loop_B.result_e] *
      (dady_data[full_loop_B.result_e] -
       full_loop_B.dadr_data[full_loop_B.result_e]) +
      a_data[full_loop_B.result_e]) * 3.0;
  }

  *a_size = *x_size;
  full_loop_B.loop_ub_k3 = *x_size;
  for (full_loop_B.result_e = 0; full_loop_B.result_e < full_loop_B.loop_ub_k3;
       full_loop_B.result_e++) {
    a_data[full_loop_B.result_e] *= 3.0 *
      full_loop_B.v_data_o[full_loop_B.result_e];
  }
}

void full_loopModelClass::full_loop_abs_p(const real_T x_data[], const int32_T
  *x_size, real_T y_data[], int32_T *y_size)
{
  full_loop_B.nx_n = *x_size - 1;
  *y_size = *x_size;
  for (full_loop_B.b_k_d = 0; full_loop_B.b_k_d <= full_loop_B.nx_n;
       full_loop_B.b_k_d++) {
    y_data[full_loop_B.b_k_d] = std::abs(x_data[full_loop_B.b_k_d]);
  }
}

creal_T full_loopModelClass::full_loop_sqrt_p(const creal_T x)
{
  creal_T b_x;
  real_T absxr;
  real_T absxi;
  if (x.im == 0.0) {
    if (x.re < 0.0) {
      absxr = 0.0;
      absxi = std::sqrt(-x.re);
    } else {
      absxr = std::sqrt(x.re);
      absxi = 0.0;
    }
  } else if (x.re == 0.0) {
    if (x.im < 0.0) {
      absxr = std::sqrt(-x.im / 2.0);
      absxi = -absxr;
    } else {
      absxr = std::sqrt(x.im / 2.0);
      absxi = absxr;
    }
  } else if (rtIsNaN(x.re)) {
    absxr = x.re;
    absxi = x.re;
  } else if (rtIsNaN(x.im)) {
    absxr = x.im;
    absxi = x.im;
  } else if (rtIsInf(x.im)) {
    absxr = std::abs(x.im);
    absxi = x.im;
  } else if (rtIsInf(x.re)) {
    if (x.re < 0.0) {
      absxr = 0.0;
      absxi = x.im * -x.re;
    } else {
      absxr = x.re;
      absxi = 0.0;
    }
  } else {
    absxr = std::abs(x.re);
    absxi = std::abs(x.im);
    if ((absxr > 4.4942328371557893E+307) || (absxi > 4.4942328371557893E+307))
    {
      absxr *= 0.5;
      absxi *= 0.5;
      absxi = full_loop_rt_hypotd_snf(absxr, absxi);
      if (absxi > absxr) {
        absxr = std::sqrt(absxr / absxi + 1.0) * std::sqrt(absxi);
      } else {
        absxr = std::sqrt(absxi) * 1.4142135623730951;
      }
    } else {
      absxr = std::sqrt((full_loop_rt_hypotd_snf(absxr, absxi) + absxr) * 0.5);
    }

    if (x.re > 0.0) {
      absxi = x.im / absxr * 0.5;
    } else {
      if (x.im < 0.0) {
        absxi = -absxr;
      } else {
        absxi = absxr;
      }

      absxr = x.im / absxi * 0.5;
    }
  }

  b_x.re = absxr;
  b_x.im = absxi;
  return b_x;
}

void full_loopModelClass::full_loop_sqrt_p43(creal_T x_data[], const int32_T
  *x_size)
{
  int32_T nx;
  int32_T b_k;
  nx = *x_size - 1;
  for (b_k = 0; b_k <= nx; b_k++) {
    x_data[b_k] = full_loop_sqrt_p(x_data[b_k]);
  }
}

void full_loopModelClass::full_loop_fresnelr(const real_T x_data[], const
  int32_T *x_size, creal_T z_data[], int32_T *z_size)
{
  static const real_T tmp[10] = { 0.42154355504367752, 0.1434079197807589,
    0.011522095507358577, 0.000345017939782574, 4.6361374928786735E-6,
    3.0556898379025758E-8, 1.0230451416490724E-10, 1.7201074326816183E-13,
    1.3428327623306275E-16, 3.763297112699879E-20 };

  static const real_T tmp_0[11] = { 0.50444207364338323, 0.19710283352552341,
    0.018764858409257526, 0.00068407938091539307, 1.1513882611188428E-5,
    9.8285244368842225E-8, 4.4534441586175015E-10, 1.0826804113902088E-12,
    1.375554606332618E-15, 8.3635443563067741E-19, 1.8695871016278324E-22 };

  static const real_T tmp_1[11] = { 1.0, 0.75158639835337893,
    0.11688892585919138, 0.0064405152650885865, 0.00015593440916415301,
    1.8462756734893055E-6, 1.1269922476399903E-8, 3.6014002958937136E-11,
    5.8875453362157839E-14, 4.5200143407412973E-17, 1.2544323709001127E-20 };

  static const real_T tmp_2[12] = { 1.0, 1.4749575992512833, 0.33774898912002,
    0.025360374142033879, 0.00081467910718430615, 1.2754507566772912E-5,
    1.0431458965757199E-7, 4.6068072814652043E-10, 1.1027321506624028E-12,
    1.3879653125957886E-15, 8.3915881628311874E-19, 1.8695871016278324E-22 };

  static const real_T tmp_3[6] = { -2991.8191940101983, 708840.04525773856,
    -6.2974148620586254E+7, 2.5489088057337637E+9, -4.429795180596978E+10,
    3.1801629787656781E+11 };

  static const real_T tmp_4[7] = { 1.0, 281.37626888999432, 45584.781080653258,
    5.1734388877009638E+6, 4.1932024589811122E+8, 2.2441179564534092E+10,
    6.0736638949008459E+11 };

  static const real_T tmp_5[6] = { -4.9884311457357354E-8, 9.5042806282985963E-6,
    -0.00064519143568396507, 0.018884331939670384, -0.20552590095501388, 1.0 };

  static const real_T tmp_6[7] = { 3.99982968972496E-12, 9.1543921577465745E-10,
    1.2500186247959882E-7, 1.2226278902417902E-5, 0.00086802954294178428,
    0.041214209072219982, 1.0 };

  const real_T *fn;
  const real_T *gn;
  const real_T *fd;
  const real_T *gd;
  boolean_T exitg1;
  for (full_loop_B.i_dp = 0; full_loop_B.i_dp < 6; full_loop_B.i_dp++) {
    full_loop_B.sn[full_loop_B.i_dp] = tmp_3[full_loop_B.i_dp];
  }

  fn = &tmp[0];
  gn = &tmp_0[0];
  for (full_loop_B.i_dp = 0; full_loop_B.i_dp < 7; full_loop_B.i_dp++) {
    full_loop_B.sd[full_loop_B.i_dp] = tmp_4[full_loop_B.i_dp];
  }

  for (full_loop_B.i_dp = 0; full_loop_B.i_dp < 6; full_loop_B.i_dp++) {
    full_loop_B.cn[full_loop_B.i_dp] = tmp_5[full_loop_B.i_dp];
  }

  for (full_loop_B.i_dp = 0; full_loop_B.i_dp < 7; full_loop_B.i_dp++) {
    full_loop_B.cd[full_loop_B.i_dp] = tmp_6[full_loop_B.i_dp];
  }

  fd = &tmp_1[0];
  gd = &tmp_2[0];
  full_loop_B.b_idx_0 = *x_size;
  *z_size = *x_size;
  for (full_loop_B.i_dp = 0; full_loop_B.i_dp < full_loop_B.b_idx_0;
       full_loop_B.i_dp++) {
    z_data[full_loop_B.i_dp].re = (rtNaN);
    z_data[full_loop_B.i_dp].im = 0.0;
  }

  full_loop_abs_p(x_data, x_size, full_loop_B.tmp_data_jk,
                  &full_loop_B.tmp_size_p);
  full_loop_B.xabs_size_idx_0 = full_loop_B.tmp_size_p;
  full_loop_B.i_dp = full_loop_B.tmp_size_p;
  if (0 <= full_loop_B.i_dp - 1) {
    std::memcpy(&full_loop_B.xabs_data[0], &full_loop_B.tmp_data_jk[0],
                full_loop_B.i_dp * sizeof(real_T));
  }

  for (full_loop_B.i_dp = 0; full_loop_B.i_dp < full_loop_B.xabs_size_idx_0;
       full_loop_B.i_dp++) {
    full_loop_B.ibig_data_d = full_loop_B.xabs_data[full_loop_B.i_dp] *
      full_loop_B.xabs_data[full_loop_B.i_dp];
    full_loop_B.x_data_dm[full_loop_B.i_dp] = (full_loop_B.ibig_data_d < 2.5625);
    full_loop_B.ibig_data[full_loop_B.i_dp] = full_loop_B.ibig_data_d;
  }

  full_loop_B.idx_d = 0;
  full_loop_B.b_idx_0 = full_loop_B.tmp_size_p;
  full_loop_B.i_dp = 1;
  exitg1 = false;
  while ((!exitg1) && (full_loop_B.i_dp - 1 <= full_loop_B.xabs_size_idx_0 - 1))
  {
    if (full_loop_B.x_data_dm[full_loop_B.i_dp - 1]) {
      full_loop_B.idx_d++;
      full_loop_B.ii_data_k[full_loop_B.idx_d - 1] = full_loop_B.i_dp;
      if (full_loop_B.idx_d >= full_loop_B.xabs_size_idx_0) {
        exitg1 = true;
      } else {
        full_loop_B.i_dp++;
      }
    } else {
      full_loop_B.i_dp++;
    }
  }

  if (full_loop_B.tmp_size_p == 1) {
    if (full_loop_B.idx_d == 0) {
      full_loop_B.b_idx_0 = 0;
    }
  } else {
    if (1 > full_loop_B.idx_d) {
      full_loop_B.idx_d = 0;
    }

    full_loop_B.b_idx_0 = full_loop_B.idx_d;
  }

  for (full_loop_B.i_dp = 0; full_loop_B.i_dp < full_loop_B.b_idx_0;
       full_loop_B.i_dp++) {
    full_loop_B.idx_d = full_loop_B.ii_data_k[full_loop_B.i_dp] - 1;
    full_loop_B.ibig_data_d = full_loop_B.xabs_data[full_loop_B.idx_d] *
      full_loop_B.xabs_data[full_loop_B.idx_d];
    full_loop_B.x4_data_e = full_loop_B.ibig_data_d * full_loop_B.ibig_data_d;
    z_data[full_loop_B.idx_d].re = (((((full_loop_B.cn[0] *
      full_loop_B.x4_data_e + full_loop_B.cn[1]) * full_loop_B.x4_data_e +
      full_loop_B.cn[2]) * full_loop_B.x4_data_e + full_loop_B.cn[3]) *
      full_loop_B.x4_data_e + full_loop_B.cn[4]) * full_loop_B.x4_data_e +
      full_loop_B.cn[5]) / ((((((full_loop_B.cd[0] * full_loop_B.x4_data_e +
      full_loop_B.cd[1]) * full_loop_B.x4_data_e + full_loop_B.cd[2]) *
      full_loop_B.x4_data_e + full_loop_B.cd[3]) * full_loop_B.x4_data_e +
      full_loop_B.cd[4]) * full_loop_B.x4_data_e + full_loop_B.cd[5]) *
      full_loop_B.x4_data_e + full_loop_B.cd[6]) *
      full_loop_B.xabs_data[full_loop_B.idx_d];
    z_data[full_loop_B.idx_d].im = (((((full_loop_B.sn[0] *
      full_loop_B.x4_data_e + full_loop_B.sn[1]) * full_loop_B.x4_data_e +
      full_loop_B.sn[2]) * full_loop_B.x4_data_e + full_loop_B.sn[3]) *
      full_loop_B.x4_data_e + full_loop_B.sn[4]) * full_loop_B.x4_data_e +
      full_loop_B.sn[5]) * full_loop_B.ibig_data_d / ((((((full_loop_B.sd[0] *
      full_loop_B.x4_data_e + full_loop_B.sd[1]) * full_loop_B.x4_data_e +
      full_loop_B.sd[2]) * full_loop_B.x4_data_e + full_loop_B.sd[3]) *
      full_loop_B.x4_data_e + full_loop_B.sd[4]) * full_loop_B.x4_data_e +
      full_loop_B.sd[5]) * full_loop_B.x4_data_e + full_loop_B.sd[6]) *
      full_loop_B.xabs_data[full_loop_B.idx_d];
  }

  for (full_loop_B.i_dp = 0; full_loop_B.i_dp < full_loop_B.xabs_size_idx_0;
       full_loop_B.i_dp++) {
    full_loop_B.x_data_dm[full_loop_B.i_dp] = ((2.5625 <=
      full_loop_B.ibig_data[full_loop_B.i_dp]) &&
      (full_loop_B.ibig_data[full_loop_B.i_dp] <= 1.367076676E+9));
  }

  full_loop_B.idx_d = 0;
  full_loop_B.b_idx_0 = full_loop_B.tmp_size_p;
  full_loop_B.i_dp = 1;
  exitg1 = false;
  while ((!exitg1) && (full_loop_B.i_dp - 1 <= full_loop_B.xabs_size_idx_0 - 1))
  {
    if (full_loop_B.x_data_dm[full_loop_B.i_dp - 1]) {
      full_loop_B.idx_d++;
      full_loop_B.ii_data_k[full_loop_B.idx_d - 1] = full_loop_B.i_dp;
      if (full_loop_B.idx_d >= full_loop_B.xabs_size_idx_0) {
        exitg1 = true;
      } else {
        full_loop_B.i_dp++;
      }
    } else {
      full_loop_B.i_dp++;
    }
  }

  if (full_loop_B.tmp_size_p == 1) {
    if (full_loop_B.idx_d == 0) {
      full_loop_B.b_idx_0 = 0;
    }
  } else {
    if (1 > full_loop_B.idx_d) {
      full_loop_B.idx_d = 0;
    }

    full_loop_B.b_idx_0 = full_loop_B.idx_d;
  }

  full_loop_B.tmp_size_es = full_loop_B.b_idx_0;
  for (full_loop_B.i_dp = 0; full_loop_B.i_dp < full_loop_B.b_idx_0;
       full_loop_B.i_dp++) {
    full_loop_B.xabs_size_idx_0 = full_loop_B.ii_data_k[full_loop_B.i_dp] - 1;
    full_loop_B.ibig_data_d = full_loop_B.xabs_data[full_loop_B.xabs_size_idx_0]
      * full_loop_B.xabs_data[full_loop_B.xabs_size_idx_0];
    full_loop_B.x4_data_e = 1.0 / (full_loop_B.ibig_data_d * 3.1415926535897931);
    full_loop_B.x4_data[full_loop_B.i_dp] = full_loop_B.x4_data_e *
      full_loop_B.x4_data_e;
    full_loop_B.tmp_data_gg[full_loop_B.i_dp].re = full_loop_B.ibig_data_d * 0.0;
    full_loop_B.tmp_data_gg[full_loop_B.i_dp].im = full_loop_B.ibig_data_d *
      1.5707963267948966;
    full_loop_B.ibig_data[full_loop_B.i_dp] =
      full_loop_B.ii_data_k[full_loop_B.i_dp];
    full_loop_B.ismall_data[full_loop_B.i_dp] = full_loop_B.x4_data_e;
  }

  full_loop_exp_p(full_loop_B.tmp_data_gg, &full_loop_B.tmp_size_es);
  for (full_loop_B.i_dp = 0; full_loop_B.i_dp < full_loop_B.b_idx_0;
       full_loop_B.i_dp++) {
    full_loop_B.x4_data_e = (((((((((fn[0] *
      full_loop_B.x4_data[full_loop_B.i_dp] + fn[1]) *
      full_loop_B.x4_data[full_loop_B.i_dp] + fn[2]) *
      full_loop_B.x4_data[full_loop_B.i_dp] + fn[3]) *
      full_loop_B.x4_data[full_loop_B.i_dp] + fn[4]) *
      full_loop_B.x4_data[full_loop_B.i_dp] + fn[5]) *
      full_loop_B.x4_data[full_loop_B.i_dp] + fn[6]) *
      full_loop_B.x4_data[full_loop_B.i_dp] + fn[7]) *
      full_loop_B.x4_data[full_loop_B.i_dp] + fn[8]) *
      full_loop_B.x4_data[full_loop_B.i_dp] + fn[9]) *
      full_loop_B.x4_data[full_loop_B.i_dp] / ((((((((((fd[0] *
      full_loop_B.x4_data[full_loop_B.i_dp] + fd[1]) *
      full_loop_B.x4_data[full_loop_B.i_dp] + fd[2]) *
      full_loop_B.x4_data[full_loop_B.i_dp] + fd[3]) *
      full_loop_B.x4_data[full_loop_B.i_dp] + fd[4]) *
      full_loop_B.x4_data[full_loop_B.i_dp] + fd[5]) *
      full_loop_B.x4_data[full_loop_B.i_dp] + fd[6]) *
      full_loop_B.x4_data[full_loop_B.i_dp] + fd[7]) *
      full_loop_B.x4_data[full_loop_B.i_dp] + fd[8]) *
      full_loop_B.x4_data[full_loop_B.i_dp] + fd[9]) *
      full_loop_B.x4_data[full_loop_B.i_dp] + fd[10]) - 1.0;
    full_loop_B.x4_data_im = ((((((((((gn[0] *
      full_loop_B.x4_data[full_loop_B.i_dp] + gn[1]) *
      full_loop_B.x4_data[full_loop_B.i_dp] + gn[2]) *
      full_loop_B.x4_data[full_loop_B.i_dp] + gn[3]) *
      full_loop_B.x4_data[full_loop_B.i_dp] + gn[4]) *
      full_loop_B.x4_data[full_loop_B.i_dp] + gn[5]) *
      full_loop_B.x4_data[full_loop_B.i_dp] + gn[6]) *
      full_loop_B.x4_data[full_loop_B.i_dp] + gn[7]) *
      full_loop_B.x4_data[full_loop_B.i_dp] + gn[8]) *
      full_loop_B.x4_data[full_loop_B.i_dp] + gn[9]) *
      full_loop_B.x4_data[full_loop_B.i_dp] + gn[10]) *
      full_loop_B.ismall_data[full_loop_B.i_dp] / (((((((((((gd[0] *
      full_loop_B.x4_data[full_loop_B.i_dp] + gd[1]) *
      full_loop_B.x4_data[full_loop_B.i_dp] + gd[2]) *
      full_loop_B.x4_data[full_loop_B.i_dp] + gd[3]) *
      full_loop_B.x4_data[full_loop_B.i_dp] + gd[4]) *
      full_loop_B.x4_data[full_loop_B.i_dp] + gd[5]) *
      full_loop_B.x4_data[full_loop_B.i_dp] + gd[6]) *
      full_loop_B.x4_data[full_loop_B.i_dp] + gd[7]) *
      full_loop_B.x4_data[full_loop_B.i_dp] + gd[8]) *
      full_loop_B.x4_data[full_loop_B.i_dp] + gd[9]) *
      full_loop_B.x4_data[full_loop_B.i_dp] + gd[10]) *
      full_loop_B.x4_data[full_loop_B.i_dp] + gd[11]);
    full_loop_B.ibig_data_d = 0.0 * full_loop_B.x4_data_e -
      full_loop_B.x4_data_im;
    full_loop_B.x4_data_e += 0.0 * full_loop_B.x4_data_im;
    full_loop_B.x4_data_im = full_loop_B.ibig_data_d *
      full_loop_B.tmp_data_gg[full_loop_B.i_dp].re - full_loop_B.x4_data_e *
      full_loop_B.tmp_data_gg[full_loop_B.i_dp].im;
    full_loop_B.x4_data_e = full_loop_B.ibig_data_d *
      full_loop_B.tmp_data_gg[full_loop_B.i_dp].im + full_loop_B.x4_data_e *
      full_loop_B.tmp_data_gg[full_loop_B.i_dp].re;
    full_loop_B.xabs_size_idx_0 = static_cast<int32_T>
      (full_loop_B.ibig_data[full_loop_B.i_dp]) - 1;
    full_loop_B.br = full_loop_B.xabs_data[full_loop_B.xabs_size_idx_0] *
      3.1415926535897931;
    if (full_loop_B.x4_data_e == 0.0) {
      full_loop_B.ibig_data_d = full_loop_B.x4_data_im / full_loop_B.br;
      full_loop_B.x4_data_e = 0.0;
    } else if (full_loop_B.x4_data_im == 0.0) {
      full_loop_B.ibig_data_d = 0.0;
      full_loop_B.x4_data_e /= full_loop_B.br;
    } else {
      full_loop_B.ibig_data_d = full_loop_B.x4_data_im / full_loop_B.br;
      full_loop_B.x4_data_e /= full_loop_B.br;
    }

    z_data[full_loop_B.xabs_size_idx_0].re = 0.5 + full_loop_B.ibig_data_d;
    z_data[full_loop_B.xabs_size_idx_0].im = 0.5 + full_loop_B.x4_data_e;
  }

  full_loop_B.xabs_size_idx_0 = full_loop_B.tmp_size_p - 1;
  full_loop_B.b_idx_0 = 0;
  full_loop_B.idx_d = 0;
  for (full_loop_B.i_dp = 0; full_loop_B.i_dp <= full_loop_B.xabs_size_idx_0;
       full_loop_B.i_dp++) {
    if (full_loop_B.xabs_data[full_loop_B.i_dp] *
        full_loop_B.xabs_data[full_loop_B.i_dp] > 1.367076676E+9) {
      full_loop_B.b_idx_0++;
      full_loop_B.bd_data[full_loop_B.idx_d] = full_loop_B.i_dp + 1;
      full_loop_B.idx_d++;
    }
  }

  for (full_loop_B.i_dp = 0; full_loop_B.i_dp < full_loop_B.b_idx_0;
       full_loop_B.i_dp++) {
    z_data[full_loop_B.bd_data[full_loop_B.i_dp] - 1].re = 0.5;
    z_data[full_loop_B.bd_data[full_loop_B.i_dp] - 1].im = 0.5;
  }

  full_loop_B.xabs_size_idx_0 = *x_size - 1;
  full_loop_B.b_idx_0 = 0;
  full_loop_B.idx_d = 0;
  for (full_loop_B.i_dp = 0; full_loop_B.i_dp <= full_loop_B.xabs_size_idx_0;
       full_loop_B.i_dp++) {
    if (x_data[full_loop_B.i_dp] < 0.0) {
      full_loop_B.b_idx_0++;
      full_loop_B.dd_data[full_loop_B.idx_d] = full_loop_B.i_dp + 1;
      full_loop_B.idx_d++;
    }
  }

  for (full_loop_B.i_dp = 0; full_loop_B.i_dp < full_loop_B.b_idx_0;
       full_loop_B.i_dp++) {
    full_loop_B.tmp_data_gg[full_loop_B.i_dp].re =
      -z_data[full_loop_B.dd_data[full_loop_B.i_dp] - 1].re;
    full_loop_B.tmp_data_gg[full_loop_B.i_dp].im =
      -z_data[full_loop_B.dd_data[full_loop_B.i_dp] - 1].im;
  }

  for (full_loop_B.i_dp = 0; full_loop_B.i_dp < full_loop_B.b_idx_0;
       full_loop_B.i_dp++) {
    z_data[full_loop_B.dd_data[full_loop_B.i_dp] - 1] =
      full_loop_B.tmp_data_gg[full_loop_B.i_dp];
  }
}

void full_loopModelClass::full_loop_fresnel(const creal_T x_data[], const
  int32_T *x_size, creal_T z_data[], int32_T *z_size)
{
  full_loop_B.x_size_b = *x_size;
  full_loop_B.loop_ub_nc = *x_size;
  for (full_loop_B.i2 = 0; full_loop_B.i2 < full_loop_B.loop_ub_nc;
       full_loop_B.i2++) {
    full_loop_B.x_data_h[full_loop_B.i2] = x_data[full_loop_B.i2].re;
  }

  full_loop_fresnelr(full_loop_B.x_data_h, &full_loop_B.x_size_b, z_data, z_size);
  full_loop_B.x_size_i = *x_size;
  full_loop_B.loop_ub_nc = *x_size;
  for (full_loop_B.i2 = 0; full_loop_B.i2 < full_loop_B.loop_ub_nc;
       full_loop_B.i2++) {
    full_loop_B.x_data_h[full_loop_B.i2] = -x_data[full_loop_B.i2].im;
  }

  full_loop_fresnelr(full_loop_B.x_data_h, &full_loop_B.x_size_i,
                     full_loop_B.tmp_data_oy, &full_loop_B.x_size_b);
  full_loop_B.loop_ub_nc = *z_size;
  for (full_loop_B.i2 = 0; full_loop_B.i2 < full_loop_B.loop_ub_nc;
       full_loop_B.i2++) {
    full_loop_B.z_data_ng.re = (0.0 * full_loop_B.tmp_data_oy[full_loop_B.i2].re
      - (-full_loop_B.tmp_data_oy[full_loop_B.i2].im)) + z_data[full_loop_B.i2].
      re;
    full_loop_B.z_data_ng.im = (0.0 * -full_loop_B.tmp_data_oy[full_loop_B.i2].
      im + full_loop_B.tmp_data_oy[full_loop_B.i2].re) + z_data[full_loop_B.i2].
      im;
    z_data[full_loop_B.i2] = full_loop_B.z_data_ng;
  }
}

void full_loopModelClass::full_loop_power_p4(const creal_T a_data[], const
  int32_T *a_size, creal_T y_data[], int32_T *y_size)
{
  *y_size = *a_size;
  full_loop_B.nx_i = *a_size - 1;
  for (full_loop_B.b_k_o = 0; full_loop_B.b_k_o <= full_loop_B.nx_i;
       full_loop_B.b_k_o++) {
    if ((a_data[full_loop_B.b_k_o].im == 0.0) && (a_data[full_loop_B.b_k_o].re >=
         0.0)) {
      y_data[full_loop_B.b_k_o].re = full_loop_rt_powd_snf
        (a_data[full_loop_B.b_k_o].re, 3.0);
      y_data[full_loop_B.b_k_o].im = 0.0;
    } else if (a_data[full_loop_B.b_k_o].re == 0.0) {
      y_data[full_loop_B.b_k_o].re = 0.0;
      y_data[full_loop_B.b_k_o].im = -full_loop_rt_powd_snf
        (a_data[full_loop_B.b_k_o].im, 3.0);
    } else {
      if (a_data[full_loop_B.b_k_o].im == 0.0) {
        if (a_data[full_loop_B.b_k_o].re < 0.0) {
          full_loop_B.r_le = std::log(std::abs(a_data[full_loop_B.b_k_o].re));
          full_loop_B.b_x_im = 3.1415926535897931;
        } else {
          full_loop_B.r_le = std::log(std::abs(a_data[full_loop_B.b_k_o].re));
          full_loop_B.b_x_im = 0.0;
        }
      } else if ((std::abs(a_data[full_loop_B.b_k_o].re) >
                  8.9884656743115785E+307) || (std::abs(a_data[full_loop_B.b_k_o]
                   .im) > 8.9884656743115785E+307)) {
        full_loop_B.r_le = std::log(full_loop_rt_hypotd_snf
          (a_data[full_loop_B.b_k_o].re / 2.0, a_data[full_loop_B.b_k_o].im /
           2.0)) + 0.69314718055994529;
        full_loop_B.b_x_im = rt_atan2d_snf(a_data[full_loop_B.b_k_o].im,
          a_data[full_loop_B.b_k_o].re);
      } else {
        full_loop_B.r_le = std::log(full_loop_rt_hypotd_snf
          (a_data[full_loop_B.b_k_o].re, a_data[full_loop_B.b_k_o].im));
        full_loop_B.b_x_im = rt_atan2d_snf(a_data[full_loop_B.b_k_o].im,
          a_data[full_loop_B.b_k_o].re);
      }

      full_loop_B.r_le *= 3.0;
      full_loop_B.b_x_im *= 3.0;
      if (full_loop_B.b_x_im == 0.0) {
        y_data[full_loop_B.b_k_o].re = std::exp(full_loop_B.r_le);
        y_data[full_loop_B.b_k_o].im = 0.0;
      } else if (rtIsInf(full_loop_B.b_x_im) && rtIsInf(full_loop_B.r_le) &&
                 (full_loop_B.r_le < 0.0)) {
        y_data[full_loop_B.b_k_o].re = 0.0;
        y_data[full_loop_B.b_k_o].im = 0.0;
      } else {
        full_loop_B.r_le = std::exp(full_loop_B.r_le / 2.0);
        y_data[full_loop_B.b_k_o].re = full_loop_B.r_le * std::cos
          (full_loop_B.b_x_im) * full_loop_B.r_le;
        y_data[full_loop_B.b_k_o].im = full_loop_B.r_le * std::sin
          (full_loop_B.b_x_im) * full_loop_B.r_le;
      }
    }
  }
}

void full_loopModelClass::full_loop_sign_p(real_T x_data[], const int32_T
  *x_size)
{
  int32_T nx;
  int32_T b_k;
  nx = *x_size - 1;
  for (b_k = 0; b_k <= nx; b_k++) {
    if (x_data[b_k] < 0.0) {
      x_data[b_k] = -1.0;
    } else if (x_data[b_k] > 0.0) {
      x_data[b_k] = 1.0;
    } else if (x_data[b_k] == 0.0) {
      x_data[b_k] = 0.0;
    } else {
      x_data[b_k] = (rtNaN);
    }
  }
}

void full_loopModelClass::full_loop_power_p43(const creal_T a_data[], const
  int32_T *a_size, creal_T y_data[], int32_T *y_size)
{
  int32_T nx;
  int32_T b_k;
  real_T tmp;
  *y_size = *a_size;
  nx = *a_size - 1;
  for (b_k = 0; b_k <= nx; b_k++) {
    y_data[b_k].re = a_data[b_k].re * a_data[b_k].re - a_data[b_k].im *
      a_data[b_k].im;
    tmp = a_data[b_k].re * a_data[b_k].im;
    y_data[b_k].im = tmp + tmp;
  }
}

void full_loopModelClass::full_loop_fresnelgLargea1(const real_T a_data[], const
  int32_T *a_size, const real_T d_data[], const int32_T *d_size, const real_T
  c_data[], const int32_T *c_size, creal_T rsfa_data[], int32_T *rsfa_size,
  creal_T drsfa_data[], int32_T *drsfa_size)
{
  full_loop_B.a1_size = *a_size;
  full_loop_B.loop_ub_j = *a_size;
  for (full_loop_B.i1 = 0; full_loop_B.i1 < full_loop_B.loop_ub_j;
       full_loop_B.i1++) {
    full_loop_B.a1_data[full_loop_B.i1].re = 2.0 * a_data[full_loop_B.i1] /
      3.1415926535897931;
    full_loop_B.a1_data[full_loop_B.i1].im = 0.0;
  }

  full_loop_sqrt_p43(full_loop_B.a1_data, &full_loop_B.a1_size);
  full_loop_B.a2_size = *a_size;
  full_loop_B.loop_ub_j = *a_size;
  for (full_loop_B.i1 = 0; full_loop_B.i1 < full_loop_B.loop_ub_j;
       full_loop_B.i1++) {
    full_loop_B.a2_data[full_loop_B.i1].re = 6.2831853071795862 *
      a_data[full_loop_B.i1];
    full_loop_B.a2_data[full_loop_B.i1].im = 0.0;
  }

  full_loop_sqrt_p43(full_loop_B.a2_data, &full_loop_B.a2_size);
  full_loop_B.a2_size = *d_size;
  full_loop_B.loop_ub_j = *d_size;
  for (full_loop_B.i1 = 0; full_loop_B.i1 < full_loop_B.loop_ub_j;
       full_loop_B.i1++) {
    full_loop_B.ar = d_data[full_loop_B.i1] - a_data[full_loop_B.i1];
    if (full_loop_B.a2_data[full_loop_B.i1].im == 0.0) {
      full_loop_B.re = full_loop_B.ar / full_loop_B.a2_data[full_loop_B.i1].re;
      full_loop_B.ar = 0.0;
    } else if (full_loop_B.a2_data[full_loop_B.i1].re == 0.0) {
      if (full_loop_B.ar == 0.0) {
        full_loop_B.re = 0.0 / full_loop_B.a2_data[full_loop_B.i1].im;
        full_loop_B.ar = 0.0;
      } else {
        full_loop_B.re = 0.0;
        full_loop_B.ar = -(full_loop_B.ar / full_loop_B.a2_data[full_loop_B.i1].
                           im);
      }
    } else {
      full_loop_B.brm_a = std::abs(full_loop_B.a2_data[full_loop_B.i1].re);
      full_loop_B.bim_g = std::abs(full_loop_B.a2_data[full_loop_B.i1].im);
      if (full_loop_B.brm_a > full_loop_B.bim_g) {
        full_loop_B.brm_a = full_loop_B.a2_data[full_loop_B.i1].im /
          full_loop_B.a2_data[full_loop_B.i1].re;
        full_loop_B.d_m = full_loop_B.brm_a * full_loop_B.a2_data[full_loop_B.i1]
          .im + full_loop_B.a2_data[full_loop_B.i1].re;
        full_loop_B.re = (full_loop_B.brm_a * 0.0 + full_loop_B.ar) /
          full_loop_B.d_m;
        full_loop_B.ar = (0.0 - full_loop_B.brm_a * full_loop_B.ar) /
          full_loop_B.d_m;
      } else if (full_loop_B.bim_g == full_loop_B.brm_a) {
        full_loop_B.d_m = full_loop_B.a2_data[full_loop_B.i1].re > 0.0 ? 0.5 :
          -0.5;
        full_loop_B.sgnbi = full_loop_B.a2_data[full_loop_B.i1].im > 0.0 ? 0.5 :
          -0.5;
        full_loop_B.re = (full_loop_B.ar * full_loop_B.d_m + 0.0 *
                          full_loop_B.sgnbi) / full_loop_B.brm_a;
        full_loop_B.ar = (0.0 * full_loop_B.d_m - full_loop_B.ar *
                          full_loop_B.sgnbi) / full_loop_B.brm_a;
      } else {
        full_loop_B.brm_a = full_loop_B.a2_data[full_loop_B.i1].re /
          full_loop_B.a2_data[full_loop_B.i1].im;
        full_loop_B.d_m = full_loop_B.brm_a * full_loop_B.a2_data[full_loop_B.i1]
          .re + full_loop_B.a2_data[full_loop_B.i1].im;
        full_loop_B.re = full_loop_B.brm_a * full_loop_B.ar / full_loop_B.d_m;
        full_loop_B.ar = (full_loop_B.brm_a * 0.0 - full_loop_B.ar) /
          full_loop_B.d_m;
      }
    }

    full_loop_B.a2_data_h.re = full_loop_B.re;
    full_loop_B.a2_data_h.im = full_loop_B.ar;
    full_loop_B.a2_data[full_loop_B.i1] = full_loop_B.a2_data_h;
  }

  full_loop_B.a1_size_k = full_loop_B.a1_size;
  full_loop_B.loop_ub_j = full_loop_B.a1_size;
  for (full_loop_B.i1 = 0; full_loop_B.i1 < full_loop_B.loop_ub_j;
       full_loop_B.i1++) {
    full_loop_B.a1_data_n[full_loop_B.i1].re =
      full_loop_B.a1_data[full_loop_B.i1].re +
      full_loop_B.a2_data[full_loop_B.i1].re;
    full_loop_B.a1_data_n[full_loop_B.i1].im =
      full_loop_B.a1_data[full_loop_B.i1].im +
      full_loop_B.a2_data[full_loop_B.i1].im;
  }

  full_loop_fresnel(full_loop_B.a1_data_n, &full_loop_B.a1_size_k,
                    full_loop_B.fa_data, &full_loop_B.fa_size);
  full_loop_fresnel(full_loop_B.a2_data, &full_loop_B.a2_size,
                    full_loop_B.tmp_data_k, &full_loop_B.a1_size_k);
  full_loop_B.loop_ub_j = full_loop_B.fa_size;
  for (full_loop_B.i1 = 0; full_loop_B.i1 < full_loop_B.loop_ub_j;
       full_loop_B.i1++) {
    full_loop_B.fa_data_n.re = full_loop_B.fa_data[full_loop_B.i1].re -
      full_loop_B.tmp_data_k[full_loop_B.i1].re;
    full_loop_B.fa_data_n.im = full_loop_B.fa_data[full_loop_B.i1].im -
      full_loop_B.tmp_data_k[full_loop_B.i1].im;
    full_loop_B.fa_data[full_loop_B.i1] = full_loop_B.fa_data_n;
  }

  full_loop_B.s_size_e = *a_size;
  full_loop_B.loop_ub_j = *a_size;
  for (full_loop_B.i1 = 0; full_loop_B.i1 < full_loop_B.loop_ub_j;
       full_loop_B.i1++) {
    full_loop_B.s_data_p[full_loop_B.i1].re = 3.1415926535897931 / (2.0 *
      a_data[full_loop_B.i1]);
    full_loop_B.s_data_p[full_loop_B.i1].im = 0.0;
  }

  full_loop_sqrt_p43(full_loop_B.s_data_p, &full_loop_B.s_size_e);
  full_loop_B.ratio_size = *d_size;
  full_loop_B.loop_ub_j = *d_size;
  for (full_loop_B.i1 = 0; full_loop_B.i1 < full_loop_B.loop_ub_j;
       full_loop_B.i1++) {
    full_loop_B.ratio_data[full_loop_B.i1] = d_data[full_loop_B.i1] -
      a_data[full_loop_B.i1];
  }

  full_loop_power_p(full_loop_B.ratio_data, &full_loop_B.ratio_size,
                    full_loop_B.tmp_data_kv, &full_loop_B.fa_size);
  full_loop_B.r_size_d = *c_size;
  full_loop_B.loop_ub_j = *c_size;
  for (full_loop_B.i1 = 0; full_loop_B.i1 < full_loop_B.loop_ub_j;
       full_loop_B.i1++) {
    full_loop_B.re = c_data[full_loop_B.i1] -
      full_loop_B.tmp_data_kv[full_loop_B.i1] / (4.0 * a_data[full_loop_B.i1]);
    full_loop_B.r_data_p[full_loop_B.i1].re = full_loop_B.re * 0.0;
    full_loop_B.r_data_p[full_loop_B.i1].im = full_loop_B.re;
  }

  full_loop_exp_p(full_loop_B.r_data_p, &full_loop_B.r_size_d);
  *drsfa_size = full_loop_B.s_size_e;
  full_loop_B.loop_ub_j = full_loop_B.s_size_e;
  for (full_loop_B.i1 = 0; full_loop_B.i1 < full_loop_B.loop_ub_j;
       full_loop_B.i1++) {
    drsfa_data[full_loop_B.i1].re = full_loop_B.s_data_p[full_loop_B.i1].re *
      full_loop_B.r_data_p[full_loop_B.i1].re -
      full_loop_B.s_data_p[full_loop_B.i1].im *
      full_loop_B.r_data_p[full_loop_B.i1].im;
    drsfa_data[full_loop_B.i1].im = full_loop_B.s_data_p[full_loop_B.i1].re *
      full_loop_B.r_data_p[full_loop_B.i1].im +
      full_loop_B.s_data_p[full_loop_B.i1].im *
      full_loop_B.r_data_p[full_loop_B.i1].re;
  }

  *rsfa_size = full_loop_B.s_size_e;
  full_loop_B.loop_ub_j = full_loop_B.s_size_e;
  for (full_loop_B.i1 = 0; full_loop_B.i1 < full_loop_B.loop_ub_j;
       full_loop_B.i1++) {
    rsfa_data[full_loop_B.i1].re = drsfa_data[full_loop_B.i1].re *
      full_loop_B.fa_data[full_loop_B.i1].re - drsfa_data[full_loop_B.i1].im *
      full_loop_B.fa_data[full_loop_B.i1].im;
    rsfa_data[full_loop_B.i1].im = drsfa_data[full_loop_B.i1].re *
      full_loop_B.fa_data[full_loop_B.i1].im + drsfa_data[full_loop_B.i1].im *
      full_loop_B.fa_data[full_loop_B.i1].re;
  }

  full_loop_B.a1_size_k = *a_size;
  full_loop_B.loop_ub_j = *a_size;
  for (full_loop_B.i1 = 0; full_loop_B.i1 < full_loop_B.loop_ub_j;
       full_loop_B.i1++) {
    full_loop_B.tmp_data_k[full_loop_B.i1].re = 6.2831853071795862 *
      a_data[full_loop_B.i1];
    full_loop_B.tmp_data_k[full_loop_B.i1].im = 0.0;
  }

  full_loop_sqrt_p43(full_loop_B.tmp_data_k, &full_loop_B.a1_size_k);
  full_loop_power_p4(full_loop_B.tmp_data_k, &full_loop_B.a1_size_k,
                     full_loop_B.da2_data, &full_loop_B.ratio_size);
  full_loop_B.a1_size_k = *a_size;
  full_loop_B.loop_ub_j = *a_size;
  for (full_loop_B.i1 = 0; full_loop_B.i1 < full_loop_B.loop_ub_j;
       full_loop_B.i1++) {
    full_loop_B.tmp_data_k[full_loop_B.i1].re = 6.2831853071795862 *
      a_data[full_loop_B.i1];
    full_loop_B.tmp_data_k[full_loop_B.i1].im = 0.0;
  }

  full_loop_sqrt_p43(full_loop_B.tmp_data_k, &full_loop_B.a1_size_k);
  full_loop_B.loop_ub_j = *d_size;
  for (full_loop_B.i1 = 0; full_loop_B.i1 < full_loop_B.loop_ub_j;
       full_loop_B.i1++) {
    if (full_loop_B.da2_data[full_loop_B.i1].im == 0.0) {
      full_loop_B.re = -3.1415926535897931 / full_loop_B.da2_data[full_loop_B.i1]
        .re;
      full_loop_B.ar = 0.0;
    } else if (full_loop_B.da2_data[full_loop_B.i1].re == 0.0) {
      full_loop_B.re = 0.0;
      full_loop_B.ar = -(-3.1415926535897931 /
                         full_loop_B.da2_data[full_loop_B.i1].im);
    } else {
      full_loop_B.brm_a = std::abs(full_loop_B.da2_data[full_loop_B.i1].re);
      full_loop_B.bim_g = std::abs(full_loop_B.da2_data[full_loop_B.i1].im);
      if (full_loop_B.brm_a > full_loop_B.bim_g) {
        full_loop_B.brm_a = full_loop_B.da2_data[full_loop_B.i1].im /
          full_loop_B.da2_data[full_loop_B.i1].re;
        full_loop_B.d_m = full_loop_B.brm_a *
          full_loop_B.da2_data[full_loop_B.i1].im +
          full_loop_B.da2_data[full_loop_B.i1].re;
        full_loop_B.re = (full_loop_B.brm_a * 0.0 + -3.1415926535897931) /
          full_loop_B.d_m;
        full_loop_B.ar = (0.0 - full_loop_B.brm_a * -3.1415926535897931) /
          full_loop_B.d_m;
      } else if (full_loop_B.bim_g == full_loop_B.brm_a) {
        full_loop_B.d_m = full_loop_B.da2_data[full_loop_B.i1].re > 0.0 ? 0.5 :
          -0.5;
        full_loop_B.sgnbi = full_loop_B.da2_data[full_loop_B.i1].im > 0.0 ? 0.5 :
          -0.5;
        full_loop_B.re = (-3.1415926535897931 * full_loop_B.d_m + 0.0 *
                          full_loop_B.sgnbi) / full_loop_B.brm_a;
        full_loop_B.ar = (0.0 * full_loop_B.d_m - -3.1415926535897931 *
                          full_loop_B.sgnbi) / full_loop_B.brm_a;
      } else {
        full_loop_B.brm_a = full_loop_B.da2_data[full_loop_B.i1].re /
          full_loop_B.da2_data[full_loop_B.i1].im;
        full_loop_B.d_m = full_loop_B.brm_a *
          full_loop_B.da2_data[full_loop_B.i1].re +
          full_loop_B.da2_data[full_loop_B.i1].im;
        full_loop_B.re = full_loop_B.brm_a * -3.1415926535897931 /
          full_loop_B.d_m;
        full_loop_B.ar = (full_loop_B.brm_a * 0.0 - -3.1415926535897931) /
          full_loop_B.d_m;
      }
    }

    if (full_loop_B.tmp_data_k[full_loop_B.i1].im == 0.0) {
      full_loop_B.bim_g = 1.0 / full_loop_B.tmp_data_k[full_loop_B.i1].re;
      full_loop_B.brm_a = 0.0;
    } else if (full_loop_B.tmp_data_k[full_loop_B.i1].re == 0.0) {
      full_loop_B.bim_g = 0.0;
      full_loop_B.brm_a = -(1.0 / full_loop_B.tmp_data_k[full_loop_B.i1].im);
    } else {
      full_loop_B.brm_a = std::abs(full_loop_B.tmp_data_k[full_loop_B.i1].re);
      full_loop_B.bim_g = std::abs(full_loop_B.tmp_data_k[full_loop_B.i1].im);
      if (full_loop_B.brm_a > full_loop_B.bim_g) {
        full_loop_B.brm_a = full_loop_B.tmp_data_k[full_loop_B.i1].im /
          full_loop_B.tmp_data_k[full_loop_B.i1].re;
        full_loop_B.d_m = full_loop_B.brm_a *
          full_loop_B.tmp_data_k[full_loop_B.i1].im +
          full_loop_B.tmp_data_k[full_loop_B.i1].re;
        full_loop_B.bim_g = (full_loop_B.brm_a * 0.0 + 1.0) / full_loop_B.d_m;
        full_loop_B.brm_a = (0.0 - full_loop_B.brm_a) / full_loop_B.d_m;
      } else if (full_loop_B.bim_g == full_loop_B.brm_a) {
        full_loop_B.d_m = full_loop_B.tmp_data_k[full_loop_B.i1].re > 0.0 ? 0.5 :
          -0.5;
        full_loop_B.sgnbi = full_loop_B.tmp_data_k[full_loop_B.i1].im > 0.0 ?
          0.5 : -0.5;
        full_loop_B.bim_g = (0.0 * full_loop_B.sgnbi + full_loop_B.d_m) /
          full_loop_B.brm_a;
        full_loop_B.brm_a = (0.0 * full_loop_B.d_m - full_loop_B.sgnbi) /
          full_loop_B.brm_a;
      } else {
        full_loop_B.brm_a = full_loop_B.tmp_data_k[full_loop_B.i1].re /
          full_loop_B.tmp_data_k[full_loop_B.i1].im;
        full_loop_B.d_m = full_loop_B.brm_a *
          full_loop_B.tmp_data_k[full_loop_B.i1].re +
          full_loop_B.tmp_data_k[full_loop_B.i1].im;
        full_loop_B.bim_g = full_loop_B.brm_a / full_loop_B.d_m;
        full_loop_B.brm_a = (full_loop_B.brm_a * 0.0 - 1.0) / full_loop_B.d_m;
      }
    }

    full_loop_B.da2_data_m.re = full_loop_B.ratio_data[full_loop_B.i1] *
      full_loop_B.re - full_loop_B.bim_g;
    full_loop_B.da2_data_m.im = full_loop_B.ratio_data[full_loop_B.i1] *
      full_loop_B.ar - full_loop_B.brm_a;
    full_loop_B.da2_data[full_loop_B.i1] = full_loop_B.da2_data_m;
  }

  full_loop_B.a1_size_k = *a_size;
  full_loop_B.loop_ub_j = *a_size;
  for (full_loop_B.i1 = 0; full_loop_B.i1 < full_loop_B.loop_ub_j;
       full_loop_B.i1++) {
    full_loop_B.tmp_data_k[full_loop_B.i1].re = 3.1415926535897931 / (2.0 *
      a_data[full_loop_B.i1]);
    full_loop_B.tmp_data_k[full_loop_B.i1].im = 0.0;
  }

  full_loop_sqrt_p43(full_loop_B.tmp_data_k, &full_loop_B.a1_size_k);
  full_loop_power_p4(full_loop_B.tmp_data_k, &full_loop_B.a1_size_k,
                     full_loop_B.x_data_n, &full_loop_B.ratio_size);
  full_loop_B.loop_ub_j = full_loop_B.ratio_size;
  for (full_loop_B.i1 = 0; full_loop_B.i1 < full_loop_B.loop_ub_j;
       full_loop_B.i1++) {
    full_loop_B.x_data_gu.re = -full_loop_B.x_data_n[full_loop_B.i1].re;
    full_loop_B.x_data_gu.im = -full_loop_B.x_data_n[full_loop_B.i1].im;
    full_loop_B.x_data_n[full_loop_B.i1] = full_loop_B.x_data_gu;
  }

  full_loop_B.loop_ub_j = *d_size;
  for (full_loop_B.i1 = 0; full_loop_B.i1 < full_loop_B.loop_ub_j;
       full_loop_B.i1++) {
    full_loop_B.ratio_data[full_loop_B.i1] /= 4.0 * a_data[full_loop_B.i1];
  }

  full_loop_B.tmp_size_j4 = *a_size;
  full_loop_B.loop_ub_j = *a_size;
  if (0 <= full_loop_B.loop_ub_j - 1) {
    std::memcpy(&full_loop_B.tmp_data_h[0], &a_data[0], full_loop_B.loop_ub_j *
                sizeof(real_T));
  }

  full_loop_sign_p(full_loop_B.tmp_data_h, &full_loop_B.tmp_size_j4);
  full_loop_B.a1_size_o = full_loop_B.a1_size;
  full_loop_B.loop_ub_j = full_loop_B.a1_size;
  for (full_loop_B.i1 = 0; full_loop_B.i1 < full_loop_B.loop_ub_j;
       full_loop_B.i1++) {
    full_loop_B.a1_data_n[full_loop_B.i1].re =
      full_loop_B.a1_data[full_loop_B.i1].re +
      full_loop_B.a2_data[full_loop_B.i1].re;
    full_loop_B.a1_data_n[full_loop_B.i1].im =
      full_loop_B.a1_data[full_loop_B.i1].im +
      full_loop_B.a2_data[full_loop_B.i1].im;
  }

  full_loop_power_p43(full_loop_B.a1_data_n, &full_loop_B.a1_size_o,
                      full_loop_B.tmp_data_k, &full_loop_B.a1_size_k);
  full_loop_B.loop_ub_j = full_loop_B.a1_size_k;
  for (full_loop_B.i1 = 0; full_loop_B.i1 < full_loop_B.loop_ub_j;
       full_loop_B.i1++) {
    full_loop_B.tmp_data_jb.re = 0.0 * full_loop_B.tmp_data_k[full_loop_B.i1].re
      - 1.5707963267948966 * full_loop_B.tmp_data_k[full_loop_B.i1].im;
    full_loop_B.tmp_data_jb.im = 0.0 * full_loop_B.tmp_data_k[full_loop_B.i1].im
      + 1.5707963267948966 * full_loop_B.tmp_data_k[full_loop_B.i1].re;
    full_loop_B.tmp_data_k[full_loop_B.i1] = full_loop_B.tmp_data_jb;
  }

  full_loop_exp_p(full_loop_B.tmp_data_k, &full_loop_B.a1_size_k);
  full_loop_B.a1_size = *a_size;
  full_loop_B.loop_ub_j = *a_size;
  for (full_loop_B.i1 = 0; full_loop_B.i1 < full_loop_B.loop_ub_j;
       full_loop_B.i1++) {
    full_loop_B.a1_data[full_loop_B.i1].re = 6.2831853071795862 *
      a_data[full_loop_B.i1];
    full_loop_B.a1_data[full_loop_B.i1].im = 0.0;
  }

  full_loop_sqrt_p43(full_loop_B.a1_data, &full_loop_B.a1_size);
  full_loop_power_p43(full_loop_B.a2_data, &full_loop_B.a2_size,
                      full_loop_B.a1_data_n, &full_loop_B.a1_size_k);
  full_loop_B.loop_ub_j = full_loop_B.a1_size_k;
  for (full_loop_B.i1 = 0; full_loop_B.i1 < full_loop_B.loop_ub_j;
       full_loop_B.i1++) {
    full_loop_B.tmp_data_f0.re = 0.0 * full_loop_B.a1_data_n[full_loop_B.i1].re
      - 1.5707963267948966 * full_loop_B.a1_data_n[full_loop_B.i1].im;
    full_loop_B.tmp_data_f0.im = 0.0 * full_loop_B.a1_data_n[full_loop_B.i1].im
      + 1.5707963267948966 * full_loop_B.a1_data_n[full_loop_B.i1].re;
    full_loop_B.a1_data_n[full_loop_B.i1] = full_loop_B.tmp_data_f0;
  }

  full_loop_exp_p(full_loop_B.a1_data_n, &full_loop_B.a1_size_k);
  full_loop_B.loop_ub_j = full_loop_B.s_size_e;
  for (full_loop_B.i1 = 0; full_loop_B.i1 < full_loop_B.loop_ub_j;
       full_loop_B.i1++) {
    if (full_loop_B.a1_data[full_loop_B.i1].im == 0.0) {
      full_loop_B.re = 1.0 / full_loop_B.a1_data[full_loop_B.i1].re;
      full_loop_B.ar = 0.0;
    } else if (full_loop_B.a1_data[full_loop_B.i1].re == 0.0) {
      full_loop_B.re = 0.0;
      full_loop_B.ar = -(1.0 / full_loop_B.a1_data[full_loop_B.i1].im);
    } else {
      full_loop_B.brm_a = std::abs(full_loop_B.a1_data[full_loop_B.i1].re);
      full_loop_B.bim_g = std::abs(full_loop_B.a1_data[full_loop_B.i1].im);
      if (full_loop_B.brm_a > full_loop_B.bim_g) {
        full_loop_B.brm_a = full_loop_B.a1_data[full_loop_B.i1].im /
          full_loop_B.a1_data[full_loop_B.i1].re;
        full_loop_B.d_m = full_loop_B.brm_a * full_loop_B.a1_data[full_loop_B.i1]
          .im + full_loop_B.a1_data[full_loop_B.i1].re;
        full_loop_B.re = (full_loop_B.brm_a * 0.0 + 1.0) / full_loop_B.d_m;
        full_loop_B.ar = (0.0 - full_loop_B.brm_a) / full_loop_B.d_m;
      } else if (full_loop_B.bim_g == full_loop_B.brm_a) {
        full_loop_B.d_m = full_loop_B.a1_data[full_loop_B.i1].re > 0.0 ? 0.5 :
          -0.5;
        full_loop_B.sgnbi = full_loop_B.a1_data[full_loop_B.i1].im > 0.0 ? 0.5 :
          -0.5;
        full_loop_B.re = (0.0 * full_loop_B.sgnbi + full_loop_B.d_m) /
          full_loop_B.brm_a;
        full_loop_B.ar = (0.0 * full_loop_B.d_m - full_loop_B.sgnbi) /
          full_loop_B.brm_a;
      } else {
        full_loop_B.brm_a = full_loop_B.a1_data[full_loop_B.i1].re /
          full_loop_B.a1_data[full_loop_B.i1].im;
        full_loop_B.d_m = full_loop_B.brm_a * full_loop_B.a1_data[full_loop_B.i1]
          .re + full_loop_B.a1_data[full_loop_B.i1].im;
        full_loop_B.re = full_loop_B.brm_a / full_loop_B.d_m;
        full_loop_B.ar = (full_loop_B.brm_a * 0.0 - 1.0) / full_loop_B.d_m;
      }
    }

    full_loop_B.re += full_loop_B.da2_data[full_loop_B.i1].re;
    full_loop_B.ar += full_loop_B.da2_data[full_loop_B.i1].im;
    full_loop_B.bim_g = ((full_loop_B.tmp_data_k[full_loop_B.i1].re *
                          full_loop_B.re - full_loop_B.tmp_data_k[full_loop_B.i1]
                          .im * full_loop_B.ar) -
                         (full_loop_B.a1_data_n[full_loop_B.i1].re *
                          full_loop_B.da2_data[full_loop_B.i1].re -
                          full_loop_B.a1_data_n[full_loop_B.i1].im *
                          full_loop_B.da2_data[full_loop_B.i1].im)) *
      full_loop_B.tmp_data_h[full_loop_B.i1];
    full_loop_B.re = ((full_loop_B.tmp_data_k[full_loop_B.i1].re *
                       full_loop_B.ar + full_loop_B.tmp_data_k[full_loop_B.i1].
                       im * full_loop_B.re) -
                      (full_loop_B.a1_data_n[full_loop_B.i1].re *
                       full_loop_B.da2_data[full_loop_B.i1].im +
                       full_loop_B.a1_data_n[full_loop_B.i1].im *
                       full_loop_B.da2_data[full_loop_B.i1].re)) *
      full_loop_B.tmp_data_h[full_loop_B.i1];
    full_loop_B.brm_a = 2.0 * full_loop_B.ratio_data[full_loop_B.i1] + 1.0;
    full_loop_B.ar = (full_loop_B.r_data_p[full_loop_B.i1].re * 0.0 -
                      full_loop_B.r_data_p[full_loop_B.i1].im * 2.0) *
      full_loop_B.ratio_data[full_loop_B.i1] * full_loop_B.brm_a;
    full_loop_B.d_m = (full_loop_B.r_data_p[full_loop_B.i1].re * 2.0 +
                       full_loop_B.r_data_p[full_loop_B.i1].im * 0.0) *
      full_loop_B.ratio_data[full_loop_B.i1] * full_loop_B.brm_a;
    if (full_loop_B.x_data_n[full_loop_B.i1].im == 0.0) {
      full_loop_B.sgnbi = full_loop_B.x_data_n[full_loop_B.i1].re /
        3.1415926535897931;
      full_loop_B.x_data_im = 0.0;
    } else if (full_loop_B.x_data_n[full_loop_B.i1].re == 0.0) {
      full_loop_B.sgnbi = 0.0;
      full_loop_B.x_data_im = full_loop_B.x_data_n[full_loop_B.i1].im /
        3.1415926535897931;
    } else {
      full_loop_B.sgnbi = full_loop_B.x_data_n[full_loop_B.i1].re /
        3.1415926535897931;
      full_loop_B.x_data_im = full_loop_B.x_data_n[full_loop_B.i1].im /
        3.1415926535897931;
    }

    full_loop_B.brm_a = (full_loop_B.s_data_p[full_loop_B.i1].re *
                         full_loop_B.ar - full_loop_B.s_data_p[full_loop_B.i1].
                         im * full_loop_B.d_m) +
      (full_loop_B.r_data_p[full_loop_B.i1].re * full_loop_B.sgnbi -
       full_loop_B.r_data_p[full_loop_B.i1].im * full_loop_B.x_data_im);
    full_loop_B.ar = (full_loop_B.s_data_p[full_loop_B.i1].re * full_loop_B.d_m
                      + full_loop_B.s_data_p[full_loop_B.i1].im * full_loop_B.ar)
      + (full_loop_B.r_data_p[full_loop_B.i1].re * full_loop_B.x_data_im +
         full_loop_B.r_data_p[full_loop_B.i1].im * full_loop_B.sgnbi);
    full_loop_B.drsfa_data.re = (drsfa_data[full_loop_B.i1].re *
      full_loop_B.bim_g - drsfa_data[full_loop_B.i1].im * full_loop_B.re) +
      (full_loop_B.fa_data[full_loop_B.i1].re * full_loop_B.brm_a -
       full_loop_B.fa_data[full_loop_B.i1].im * full_loop_B.ar);
    full_loop_B.drsfa_data.im = (full_loop_B.fa_data[full_loop_B.i1].re *
      full_loop_B.ar + full_loop_B.fa_data[full_loop_B.i1].im *
      full_loop_B.brm_a) + (drsfa_data[full_loop_B.i1].re * full_loop_B.re +
      drsfa_data[full_loop_B.i1].im * full_loop_B.bim_g);
    drsfa_data[full_loop_B.i1] = full_loop_B.drsfa_data;
  }
}

void full_loopModelClass::full_loop_power_p43r(const real_T a_data[], const
  int32_T *a_size, real_T y_data[], int32_T *y_size)
{
  int32_T loop_ub;
  if (0 <= *a_size - 1) {
    std::memcpy(&full_loop_B.c_z1_data[0], &y_data[0], *a_size * sizeof(real_T));
  }

  full_loop_B.nx_b = *a_size - 1;
  for (loop_ub = 0; loop_ub <= full_loop_B.nx_b; loop_ub++) {
    full_loop_B.c_z1_data[loop_ub] = full_loop_rt_powd_snf(a_data[loop_ub], 3.0);
  }

  *y_size = *a_size;
  if (0 <= *a_size - 1) {
    std::memcpy(&y_data[0], &full_loop_B.c_z1_data[0], *a_size * sizeof(real_T));
  }
}

void full_loopModelClass::full_loop_fresnelgSmalla1(const real_T a_data[], const
  int32_T *a_size, const real_T d_data[], const int32_T *d_size, const real_T
  c_data[], const int32_T *c_size, creal_T z_data[], int32_T *z_size, creal_T
  dz_data[], int32_T *dz_size)
{
  full_loop_B.y_size_idx_0 = *a_size;
  full_loop_B.loop_ub_l = *a_size;
  for (full_loop_B.i4 = 0; full_loop_B.i4 < full_loop_B.loop_ub_l;
       full_loop_B.i4++) {
    full_loop_B.y_data_j[full_loop_B.i4] = 2.0 * a_data[full_loop_B.i4];
  }

  full_loop_B.k_size_e3 = *d_size;
  full_loop_B.loop_ub_l = *d_size;
  for (full_loop_B.i4 = 0; full_loop_B.i4 < full_loop_B.loop_ub_l;
       full_loop_B.i4++) {
    full_loop_B.k_data_n[full_loop_B.i4] = d_data[full_loop_B.i4] -
      a_data[full_loop_B.i4];
  }

  full_loop_B.nik_size_idx_0 = *d_size;
  full_loop_B.loop_ub_l = *d_size;
  for (full_loop_B.i4 = 0; full_loop_B.i4 < full_loop_B.loop_ub_l;
       full_loop_B.i4++) {
    full_loop_B.nik_data[full_loop_B.i4].re =
      full_loop_B.k_data_n[full_loop_B.i4] * -0.0;
    full_loop_B.nik_data[full_loop_B.i4].im =
      -full_loop_B.k_data_n[full_loop_B.i4];
  }

  full_loop_B.e_size_gn = *d_size;
  for (full_loop_B.i4 = 0; full_loop_B.i4 < full_loop_B.nik_size_idx_0;
       full_loop_B.i4++) {
    full_loop_B.e_data_m[full_loop_B.i4].re =
      -full_loop_B.nik_data[full_loop_B.i4].re;
    full_loop_B.e_data_m[full_loop_B.i4].im =
      -full_loop_B.nik_data[full_loop_B.i4].im;
  }

  full_loop_exp_p(full_loop_B.e_data_m, &full_loop_B.e_size_gn);
  full_loop_power_p(full_loop_B.k_data_n, &full_loop_B.k_size_e3,
                    full_loop_B.tmp_data_oo, &full_loop_B.tmp_size_ba);
  full_loop_power_p43r(full_loop_B.k_data_n, &full_loop_B.k_size_e3,
                       full_loop_B.tmp_data_gv, &full_loop_B.tmp_size_ba);
  for (full_loop_B.i4 = 0; full_loop_B.i4 < full_loop_B.y_size_idx_0;
       full_loop_B.i4++) {
    full_loop_B.A_data_j[full_loop_B.i4].re =
      full_loop_B.y_data_j[full_loop_B.i4] * 0.0;
    full_loop_B.A_data_j[full_loop_B.i4].im =
      full_loop_B.y_data_j[full_loop_B.i4] * 0.5;
    full_loop_B.ai = 0.5 * full_loop_B.y_data_j[full_loop_B.i4];
    if (full_loop_B.ai == 0.0) {
      full_loop_B.a_re = 0.0 * full_loop_B.y_data_j[full_loop_B.i4] /
        full_loop_B.tmp_data_oo[full_loop_B.i4];
      full_loop_B.ai = 0.0;
    } else if (0.0 * full_loop_B.y_data_j[full_loop_B.i4] == 0.0) {
      full_loop_B.a_re = 0.0;
      full_loop_B.ai /= full_loop_B.tmp_data_oo[full_loop_B.i4];
    } else {
      full_loop_B.a_re = (rtNaN);
      full_loop_B.ai /= full_loop_B.tmp_data_oo[full_loop_B.i4];
    }

    full_loop_B.m2C_data[full_loop_B.i4].re = -2.0 * full_loop_B.a_re;
    full_loop_B.m2C_data[full_loop_B.i4].im = -2.0 * full_loop_B.ai;
    full_loop_B.ai = -(2.0 * full_loop_B.y_data_j[full_loop_B.i4] + 2.0 *
                       full_loop_B.k_data_n[full_loop_B.i4]);
    if (full_loop_B.ai == 0.0) {
      full_loop_B.dm2C_data[full_loop_B.i4].re = -(0.0 *
        full_loop_B.y_data_j[full_loop_B.i4] + 0.0 *
        full_loop_B.k_data_n[full_loop_B.i4]) /
        full_loop_B.tmp_data_gv[full_loop_B.i4];
      full_loop_B.dm2C_data[full_loop_B.i4].im = 0.0;
    } else if (-(0.0 * full_loop_B.y_data_j[full_loop_B.i4] + 0.0 *
                 full_loop_B.k_data_n[full_loop_B.i4]) == 0.0) {
      full_loop_B.dm2C_data[full_loop_B.i4].re = 0.0;
      full_loop_B.dm2C_data[full_loop_B.i4].im = full_loop_B.ai /
        full_loop_B.tmp_data_gv[full_loop_B.i4];
    } else {
      full_loop_B.dm2C_data[full_loop_B.i4].re = (rtNaN);
      full_loop_B.dm2C_data[full_loop_B.i4].im = full_loop_B.ai /
        full_loop_B.tmp_data_gv[full_loop_B.i4];
    }
  }

  full_loop_B.t_size_idx_0 = full_loop_B.e_size_gn;
  full_loop_B.loop_ub_l = full_loop_B.e_size_gn;
  for (full_loop_B.i4 = 0; full_loop_B.i4 < full_loop_B.loop_ub_l;
       full_loop_B.i4++) {
    if (full_loop_B.nik_data[full_loop_B.i4].im == 0.0) {
      if (0.0 - full_loop_B.e_data_m[full_loop_B.i4].im == 0.0) {
        full_loop_B.t_data[full_loop_B.i4].re = (1.0 -
          full_loop_B.e_data_m[full_loop_B.i4].re) /
          full_loop_B.nik_data[full_loop_B.i4].re;
        full_loop_B.t_data[full_loop_B.i4].im = 0.0;
      } else if (1.0 - full_loop_B.e_data_m[full_loop_B.i4].re == 0.0) {
        full_loop_B.t_data[full_loop_B.i4].re = 0.0;
        full_loop_B.t_data[full_loop_B.i4].im = (0.0 -
          full_loop_B.e_data_m[full_loop_B.i4].im) /
          full_loop_B.nik_data[full_loop_B.i4].re;
      } else {
        full_loop_B.t_data[full_loop_B.i4].re = (1.0 -
          full_loop_B.e_data_m[full_loop_B.i4].re) /
          full_loop_B.nik_data[full_loop_B.i4].re;
        full_loop_B.t_data[full_loop_B.i4].im = (0.0 -
          full_loop_B.e_data_m[full_loop_B.i4].im) /
          full_loop_B.nik_data[full_loop_B.i4].re;
      }
    } else if (full_loop_B.nik_data[full_loop_B.i4].re == 0.0) {
      if (1.0 - full_loop_B.e_data_m[full_loop_B.i4].re == 0.0) {
        full_loop_B.t_data[full_loop_B.i4].re = (0.0 -
          full_loop_B.e_data_m[full_loop_B.i4].im) /
          full_loop_B.nik_data[full_loop_B.i4].im;
        full_loop_B.t_data[full_loop_B.i4].im = 0.0;
      } else if (0.0 - full_loop_B.e_data_m[full_loop_B.i4].im == 0.0) {
        full_loop_B.t_data[full_loop_B.i4].re = 0.0;
        full_loop_B.t_data[full_loop_B.i4].im = -((1.0 -
          full_loop_B.e_data_m[full_loop_B.i4].re) /
          full_loop_B.nik_data[full_loop_B.i4].im);
      } else {
        full_loop_B.t_data[full_loop_B.i4].re = (0.0 -
          full_loop_B.e_data_m[full_loop_B.i4].im) /
          full_loop_B.nik_data[full_loop_B.i4].im;
        full_loop_B.t_data[full_loop_B.i4].im = -((1.0 -
          full_loop_B.e_data_m[full_loop_B.i4].re) /
          full_loop_B.nik_data[full_loop_B.i4].im);
      }
    } else {
      full_loop_B.t_data[full_loop_B.i4].re = (rtNaN);
      full_loop_B.t_data[full_loop_B.i4].im = (rtNaN);
    }
  }

  full_loop_B.dt_size = *d_size;
  full_loop_B.loop_ub_l = *d_size;
  for (full_loop_B.i4 = 0; full_loop_B.i4 < full_loop_B.loop_ub_l;
       full_loop_B.i4++) {
    full_loop_B.dt_data[full_loop_B.i4].re = full_loop_B.k_data_n[full_loop_B.i4]
      * 0.0;
    full_loop_B.dt_data[full_loop_B.i4].im = full_loop_B.k_data_n[full_loop_B.i4];
  }

  full_loop_exp_p(full_loop_B.dt_data, &full_loop_B.dt_size);
  full_loop_B.dp_size = *d_size;
  full_loop_B.loop_ub_l = *d_size;
  for (full_loop_B.i4 = 0; full_loop_B.i4 < full_loop_B.loop_ub_l;
       full_loop_B.i4++) {
    full_loop_B.dp_data[full_loop_B.i4].re = full_loop_B.k_data_n[full_loop_B.i4]
      * 0.0;
    full_loop_B.dp_data[full_loop_B.i4].im = full_loop_B.k_data_n[full_loop_B.i4];
  }

  full_loop_exp_p(full_loop_B.dp_data, &full_loop_B.dp_size);
  full_loop_power_p(full_loop_B.k_data_n, &full_loop_B.k_size_e3,
                    full_loop_B.tmp_data_oo, &full_loop_B.tmp_size_ba);
  full_loop_B.loop_ub_l = *d_size;
  for (full_loop_B.i4 = 0; full_loop_B.i4 < full_loop_B.loop_ub_l;
       full_loop_B.i4++) {
    full_loop_B.a_re = -(((full_loop_B.dp_data[full_loop_B.i4].re - 1.0) * 0.0 -
                          full_loop_B.dp_data[full_loop_B.i4].im) +
                         full_loop_B.k_data_n[full_loop_B.i4] *
                         full_loop_B.dt_data[full_loop_B.i4].re);
    full_loop_B.ai = -((0.0 * full_loop_B.dp_data[full_loop_B.i4].im +
                        (full_loop_B.dp_data[full_loop_B.i4].re - 1.0)) +
                       full_loop_B.k_data_n[full_loop_B.i4] *
                       full_loop_B.dt_data[full_loop_B.i4].im);
    if (full_loop_B.ai == 0.0) {
      full_loop_B.dt_data_g.re = full_loop_B.a_re /
        full_loop_B.tmp_data_oo[full_loop_B.i4];
      full_loop_B.dt_data_g.im = 0.0;
    } else if (full_loop_B.a_re == 0.0) {
      full_loop_B.dt_data_g.re = 0.0;
      full_loop_B.dt_data_g.im = full_loop_B.ai /
        full_loop_B.tmp_data_oo[full_loop_B.i4];
    } else {
      full_loop_B.dt_data_g.re = full_loop_B.a_re /
        full_loop_B.tmp_data_oo[full_loop_B.i4];
      full_loop_B.dt_data_g.im = full_loop_B.ai /
        full_loop_B.tmp_data_oo[full_loop_B.i4];
    }

    full_loop_B.dt_data[full_loop_B.i4] = full_loop_B.dt_data_g;
  }

  for (full_loop_B.i4 = 0; full_loop_B.i4 < full_loop_B.nik_size_idx_0;
       full_loop_B.i4++) {
    if (full_loop_B.nik_data[full_loop_B.i4].im == 0.0) {
      full_loop_B.ai = full_loop_B.nik_data[full_loop_B.i4].re / 2.0;
      full_loop_B.a_re = 0.0;
    } else if (full_loop_B.nik_data[full_loop_B.i4].re == 0.0) {
      full_loop_B.ai = 0.0;
      full_loop_B.a_re = full_loop_B.nik_data[full_loop_B.i4].im / 2.0;
    } else {
      full_loop_B.ai = (rtNaN);
      full_loop_B.a_re = full_loop_B.nik_data[full_loop_B.i4].im / 2.0;
    }

    full_loop_B.nik_data_d.re = full_loop_B.ai;
    full_loop_B.nik_data_d.im = full_loop_B.a_re;
    full_loop_B.nik_data[full_loop_B.i4] = full_loop_B.nik_data_d;
  }

  full_loop_B.loop_ub_l = full_loop_B.e_size_gn;
  for (full_loop_B.i4 = 0; full_loop_B.i4 < full_loop_B.loop_ub_l;
       full_loop_B.i4++) {
    full_loop_B.e_data_cj.re = -full_loop_B.e_data_m[full_loop_B.i4].re;
    full_loop_B.e_data_cj.im = -full_loop_B.e_data_m[full_loop_B.i4].im;
    full_loop_B.e_data_m[full_loop_B.i4] = full_loop_B.e_data_cj;
  }

  full_loop_B.dp_size = *d_size;
  full_loop_B.loop_ub_l = *d_size;
  for (full_loop_B.i4 = 0; full_loop_B.i4 < full_loop_B.loop_ub_l;
       full_loop_B.i4++) {
    full_loop_B.dp_data[full_loop_B.i4].re = full_loop_B.k_data_n[full_loop_B.i4]
      * 0.0;
    full_loop_B.dp_data[full_loop_B.i4].im = full_loop_B.k_data_n[full_loop_B.i4];
  }

  full_loop_exp_p(full_loop_B.dp_data, &full_loop_B.dp_size);
  full_loop_B.loop_ub_l = full_loop_B.dp_size;
  for (full_loop_B.i4 = 0; full_loop_B.i4 < full_loop_B.loop_ub_l;
       full_loop_B.i4++) {
    full_loop_B.dp_data_m.re = 0.0 * full_loop_B.dp_data[full_loop_B.i4].re -
      full_loop_B.dp_data[full_loop_B.i4].im;
    full_loop_B.dp_data_m.im = 0.0 * full_loop_B.dp_data[full_loop_B.i4].im +
      full_loop_B.dp_data[full_loop_B.i4].re;
    full_loop_B.dp_data[full_loop_B.i4] = full_loop_B.dp_data_m;
  }

  *z_size = full_loop_B.e_size_gn;
  if (0 <= full_loop_B.t_size_idx_0 - 1) {
    std::memcpy(&z_data[0], &full_loop_B.t_data[0], full_loop_B.t_size_idx_0 *
                sizeof(creal_T));
  }

  *dz_size = *d_size;
  full_loop_B.loop_ub_l = *d_size;
  if (0 <= full_loop_B.loop_ub_l - 1) {
    std::memcpy(&dz_data[0], &full_loop_B.dt_data[0], full_loop_B.loop_ub_l *
                sizeof(creal_T));
  }

  for (full_loop_B.loop_ub_l = 0; full_loop_B.loop_ub_l < 20;
       full_loop_B.loop_ub_l++) {
    full_loop_B.dz_size_f = *dz_size;
    full_loop_B.z_size_co = *z_size;
    full_loop_B.e_size_f = full_loop_B.e_size_gn;
    full_loop_B.i4 = ((full_loop_B.loop_ub_l + 1) << 1) - 1;
    full_loop_B.re_j = full_loop_B.loop_ub_l + 1;
    for (full_loop_B.nik_size_idx_0 = 0; full_loop_B.nik_size_idx_0 <
         full_loop_B.t_size_idx_0; full_loop_B.nik_size_idx_0++) {
      full_loop_B.ai = static_cast<real_T>(full_loop_B.re_j) +
        full_loop_B.nik_data[full_loop_B.nik_size_idx_0].re;
      full_loop_B.t_data_n.re = (full_loop_B.ai *
        full_loop_B.e_data_m[full_loop_B.nik_size_idx_0].re -
        full_loop_B.nik_data[full_loop_B.nik_size_idx_0].im *
        full_loop_B.e_data_m[full_loop_B.nik_size_idx_0].im) +
        static_cast<real_T>(full_loop_B.i4) *
        full_loop_B.t_data[full_loop_B.nik_size_idx_0].re;
      full_loop_B.t_data_n.im = (full_loop_B.ai *
        full_loop_B.e_data_m[full_loop_B.nik_size_idx_0].im +
        full_loop_B.nik_data[full_loop_B.nik_size_idx_0].im *
        full_loop_B.e_data_m[full_loop_B.nik_size_idx_0].re) +
        static_cast<real_T>(full_loop_B.i4) *
        full_loop_B.t_data[full_loop_B.nik_size_idx_0].im;
      full_loop_B.t_data[full_loop_B.nik_size_idx_0] = full_loop_B.t_data_n;
    }

    full_loop_B.re_j = full_loop_B.loop_ub_l + 1;
    for (full_loop_B.nik_size_idx_0 = 0; full_loop_B.nik_size_idx_0 <
         full_loop_B.y_size_idx_0; full_loop_B.nik_size_idx_0++) {
      full_loop_B.ai = static_cast<real_T>(full_loop_B.re_j) +
        full_loop_B.nik_data[full_loop_B.nik_size_idx_0].re;
      full_loop_B.re_l = ((0.0 * full_loop_B.e_data_m[full_loop_B.nik_size_idx_0]
                           .re - 0.5 *
                           full_loop_B.e_data_m[full_loop_B.nik_size_idx_0].im)
                          + static_cast<real_T>(full_loop_B.i4) *
                          full_loop_B.dt_data[full_loop_B.nik_size_idx_0].re) +
        (full_loop_B.dp_data[full_loop_B.nik_size_idx_0].re * full_loop_B.ai -
         full_loop_B.dp_data[full_loop_B.nik_size_idx_0].im *
         full_loop_B.nik_data[full_loop_B.nik_size_idx_0].im);
      full_loop_B.a_re = ((0.0 * full_loop_B.e_data_m[full_loop_B.nik_size_idx_0]
                           .im + 0.5 *
                           full_loop_B.e_data_m[full_loop_B.nik_size_idx_0].re)
                          + static_cast<real_T>(full_loop_B.i4) *
                          full_loop_B.dt_data[full_loop_B.nik_size_idx_0].im) +
        (full_loop_B.dp_data[full_loop_B.nik_size_idx_0].re *
         full_loop_B.nik_data[full_loop_B.nik_size_idx_0].im +
         full_loop_B.dp_data[full_loop_B.nik_size_idx_0].im * full_loop_B.ai);
      full_loop_B.dt_data_b.re =
        (full_loop_B.m2C_data[full_loop_B.nik_size_idx_0].re * full_loop_B.re_l
         - full_loop_B.m2C_data[full_loop_B.nik_size_idx_0].im *
         full_loop_B.a_re) + (full_loop_B.t_data[full_loop_B.nik_size_idx_0].re *
        full_loop_B.dm2C_data[full_loop_B.nik_size_idx_0].re -
        full_loop_B.t_data[full_loop_B.nik_size_idx_0].im *
        full_loop_B.dm2C_data[full_loop_B.nik_size_idx_0].im);
      full_loop_B.dt_data_b.im =
        (full_loop_B.m2C_data[full_loop_B.nik_size_idx_0].re * full_loop_B.a_re
         + full_loop_B.m2C_data[full_loop_B.nik_size_idx_0].im *
         full_loop_B.re_l) + (full_loop_B.t_data[full_loop_B.nik_size_idx_0].re *
        full_loop_B.dm2C_data[full_loop_B.nik_size_idx_0].im +
        full_loop_B.t_data[full_loop_B.nik_size_idx_0].im *
        full_loop_B.dm2C_data[full_loop_B.nik_size_idx_0].re);
      full_loop_B.t_data_p.re = full_loop_B.m2C_data[full_loop_B.nik_size_idx_0]
        .re * full_loop_B.t_data[full_loop_B.nik_size_idx_0].re -
        full_loop_B.m2C_data[full_loop_B.nik_size_idx_0].im *
        full_loop_B.t_data[full_loop_B.nik_size_idx_0].im;
      full_loop_B.t_data_p.im = full_loop_B.m2C_data[full_loop_B.nik_size_idx_0]
        .re * full_loop_B.t_data[full_loop_B.nik_size_idx_0].im +
        full_loop_B.m2C_data[full_loop_B.nik_size_idx_0].im *
        full_loop_B.t_data[full_loop_B.nik_size_idx_0].re;
      full_loop_B.dt_data[full_loop_B.nik_size_idx_0] = full_loop_B.dt_data_b;
      full_loop_B.t_data[full_loop_B.nik_size_idx_0] = full_loop_B.t_data_p;
    }

    for (full_loop_B.i4 = 0; full_loop_B.i4 < full_loop_B.dz_size_f;
         full_loop_B.i4++) {
      full_loop_B.dz_data_k.re = dz_data[full_loop_B.i4].re +
        full_loop_B.dt_data[full_loop_B.i4].re;
      full_loop_B.dz_data_k.im = dz_data[full_loop_B.i4].im +
        full_loop_B.dt_data[full_loop_B.i4].im;
      dz_data[full_loop_B.i4] = full_loop_B.dz_data_k;
    }

    for (full_loop_B.i4 = 0; full_loop_B.i4 < full_loop_B.z_size_co;
         full_loop_B.i4++) {
      full_loop_B.z_data_cl.re = z_data[full_loop_B.i4].re +
        full_loop_B.t_data[full_loop_B.i4].re;
      full_loop_B.z_data_cl.im = z_data[full_loop_B.i4].im +
        full_loop_B.t_data[full_loop_B.i4].im;
      z_data[full_loop_B.i4] = full_loop_B.z_data_cl;
    }

    full_loop_B.re_j = full_loop_B.loop_ub_l + 2;
    for (full_loop_B.i4 = 0; full_loop_B.i4 < full_loop_B.e_size_f;
         full_loop_B.i4++) {
      full_loop_B.a_re = (full_loop_B.e_data_m[full_loop_B.i4].re * 0.0 -
                          full_loop_B.e_data_m[full_loop_B.i4].im) +
        (full_loop_B.A_data_j[full_loop_B.i4].re *
         full_loop_B.dp_data[full_loop_B.i4].re -
         full_loop_B.A_data_j[full_loop_B.i4].im *
         full_loop_B.dp_data[full_loop_B.i4].im);
      full_loop_B.ai = (full_loop_B.e_data_m[full_loop_B.i4].im * 0.0 +
                        full_loop_B.e_data_m[full_loop_B.i4].re) +
        (full_loop_B.A_data_j[full_loop_B.i4].re *
         full_loop_B.dp_data[full_loop_B.i4].im +
         full_loop_B.A_data_j[full_loop_B.i4].im *
         full_loop_B.dp_data[full_loop_B.i4].re);
      if (full_loop_B.ai == 0.0) {
        full_loop_B.dp_data_n.re = full_loop_B.a_re / static_cast<real_T>
          (full_loop_B.re_j);
        full_loop_B.dp_data_n.im = 0.0;
      } else if (full_loop_B.a_re == 0.0) {
        full_loop_B.dp_data_n.re = 0.0;
        full_loop_B.dp_data_n.im = full_loop_B.ai / static_cast<real_T>
          (full_loop_B.re_j);
      } else {
        full_loop_B.dp_data_n.re = full_loop_B.a_re / static_cast<real_T>
          (full_loop_B.re_j);
        full_loop_B.dp_data_n.im = full_loop_B.ai / static_cast<real_T>
          (full_loop_B.re_j);
      }

      full_loop_B.dp_data[full_loop_B.i4] = full_loop_B.dp_data_n;
    }

    full_loop_B.re_j = full_loop_B.loop_ub_l + 2;
    for (full_loop_B.i4 = 0; full_loop_B.i4 < full_loop_B.e_size_f;
         full_loop_B.i4++) {
      full_loop_B.ai = full_loop_B.e_data_m[full_loop_B.i4].re *
        full_loop_B.A_data_j[full_loop_B.i4].re -
        full_loop_B.e_data_m[full_loop_B.i4].im *
        full_loop_B.A_data_j[full_loop_B.i4].im;
      full_loop_B.a_re = full_loop_B.e_data_m[full_loop_B.i4].re *
        full_loop_B.A_data_j[full_loop_B.i4].im +
        full_loop_B.e_data_m[full_loop_B.i4].im *
        full_loop_B.A_data_j[full_loop_B.i4].re;
      if (full_loop_B.a_re == 0.0) {
        full_loop_B.e_data_cd.re = full_loop_B.ai / static_cast<real_T>
          (full_loop_B.re_j);
        full_loop_B.e_data_cd.im = 0.0;
      } else if (full_loop_B.ai == 0.0) {
        full_loop_B.e_data_cd.re = 0.0;
        full_loop_B.e_data_cd.im = full_loop_B.a_re / static_cast<real_T>
          (full_loop_B.re_j);
      } else {
        full_loop_B.e_data_cd.re = full_loop_B.ai / static_cast<real_T>
          (full_loop_B.re_j);
        full_loop_B.e_data_cd.im = full_loop_B.a_re / static_cast<real_T>
          (full_loop_B.re_j);
      }

      full_loop_B.e_data_m[full_loop_B.i4] = full_loop_B.e_data_cd;
    }

    full_loop_B.t_size_idx_0 = full_loop_B.y_size_idx_0;
  }

  full_loop_B.dp_size = *c_size;
  full_loop_B.loop_ub_l = *c_size;
  for (full_loop_B.i4 = 0; full_loop_B.i4 < full_loop_B.loop_ub_l;
       full_loop_B.i4++) {
    full_loop_B.dp_data[full_loop_B.i4].re = c_data[full_loop_B.i4] * 0.0;
    full_loop_B.dp_data[full_loop_B.i4].im = c_data[full_loop_B.i4];
  }

  full_loop_exp_p(full_loop_B.dp_data, &full_loop_B.dp_size);
  full_loop_B.loop_ub_l = *z_size;
  for (full_loop_B.i4 = 0; full_loop_B.i4 < full_loop_B.loop_ub_l;
       full_loop_B.i4++) {
    full_loop_B.z_data_d.re = z_data[full_loop_B.i4].re *
      full_loop_B.dp_data[full_loop_B.i4].re - z_data[full_loop_B.i4].im *
      full_loop_B.dp_data[full_loop_B.i4].im;
    full_loop_B.z_data_d.im = z_data[full_loop_B.i4].re *
      full_loop_B.dp_data[full_loop_B.i4].im + z_data[full_loop_B.i4].im *
      full_loop_B.dp_data[full_loop_B.i4].re;
    z_data[full_loop_B.i4] = full_loop_B.z_data_d;
  }

  full_loop_B.dp_size = *c_size;
  full_loop_B.loop_ub_l = *c_size;
  for (full_loop_B.i4 = 0; full_loop_B.i4 < full_loop_B.loop_ub_l;
       full_loop_B.i4++) {
    full_loop_B.dp_data[full_loop_B.i4].re = c_data[full_loop_B.i4] * 0.0;
    full_loop_B.dp_data[full_loop_B.i4].im = c_data[full_loop_B.i4];
  }

  full_loop_exp_p(full_loop_B.dp_data, &full_loop_B.dp_size);
  full_loop_B.loop_ub_l = *dz_size;
  for (full_loop_B.i4 = 0; full_loop_B.i4 < full_loop_B.loop_ub_l;
       full_loop_B.i4++) {
    full_loop_B.dz_data_n.re = dz_data[full_loop_B.i4].re *
      full_loop_B.dp_data[full_loop_B.i4].re - dz_data[full_loop_B.i4].im *
      full_loop_B.dp_data[full_loop_B.i4].im;
    full_loop_B.dz_data_n.im = dz_data[full_loop_B.i4].re *
      full_loop_B.dp_data[full_loop_B.i4].im + dz_data[full_loop_B.i4].im *
      full_loop_B.dp_data[full_loop_B.i4].re;
    dz_data[full_loop_B.i4] = full_loop_B.dz_data_n;
  }
}

void full_loopModelClass::full_loop_fresnelg1_p(const real_T a_data[], const
  int32_T *a_size, const real_T d_data[], const int32_T *d_size, const real_T
  c_data[], creal_T z_data[], int32_T *z_size, creal_T dz_data[], int32_T
  *dz_size)
{
  boolean_T exitg1;
  full_loop_B.h_idx_0 = *a_size;
  *z_size = *a_size;
  *dz_size = *a_size;
  if (0 <= full_loop_B.h_idx_0 - 1) {
    std::memset(&z_data[0], 0, full_loop_B.h_idx_0 * sizeof(creal_T));
    std::memset(&dz_data[0], 0, full_loop_B.h_idx_0 * sizeof(creal_T));
  }

  full_loop_B.d_size = *d_size;
  full_loop_B.idx_j = *d_size;
  for (full_loop_B.h_idx_0 = 0; full_loop_B.h_idx_0 < full_loop_B.idx_j;
       full_loop_B.h_idx_0++) {
    full_loop_B.d_data_f[full_loop_B.h_idx_0] = d_data[full_loop_B.h_idx_0] -
      a_data[full_loop_B.h_idx_0];
  }

  full_loop_power_p(full_loop_B.d_data_f, &full_loop_B.d_size,
                    full_loop_B.tmp_data_lm, &full_loop_B.tmp_size_j);
  full_loop_B.tmp_size_c3 = full_loop_B.tmp_size_j;
  full_loop_B.idx_j = full_loop_B.tmp_size_j;
  for (full_loop_B.h_idx_0 = 0; full_loop_B.h_idx_0 < full_loop_B.idx_j;
       full_loop_B.h_idx_0++) {
    full_loop_B.d_data_f[full_loop_B.h_idx_0] =
      full_loop_B.tmp_data_lm[full_loop_B.h_idx_0] / (4.0 *
      a_data[full_loop_B.h_idx_0]);
  }

  full_loop_abs_p(full_loop_B.d_data_f, &full_loop_B.tmp_size_c3,
                  full_loop_B.tmp_data_lm, &full_loop_B.tmp_size_j);
  full_loop_B.criteria_size_idx_0 = full_loop_B.tmp_size_j;
  full_loop_B.idx_j = full_loop_B.tmp_size_j;
  for (full_loop_B.h_idx_0 = 0; full_loop_B.h_idx_0 < full_loop_B.idx_j;
       full_loop_B.h_idx_0++) {
    full_loop_B.criteria_data[full_loop_B.h_idx_0] =
      (full_loop_B.tmp_data_lm[full_loop_B.h_idx_0] < 628.31853071795865);
  }

  full_loop_B.idx_j = 0;
  full_loop_B.ii_size_idx_0 = full_loop_B.tmp_size_j;
  full_loop_B.h_idx_0 = 1;
  exitg1 = false;
  while ((!exitg1) && (full_loop_B.h_idx_0 - 1 <=
                       full_loop_B.criteria_size_idx_0 - 1)) {
    if (full_loop_B.criteria_data[full_loop_B.h_idx_0 - 1]) {
      full_loop_B.idx_j++;
      full_loop_B.ii_data[full_loop_B.idx_j - 1] = full_loop_B.h_idx_0;
      if (full_loop_B.idx_j >= full_loop_B.criteria_size_idx_0) {
        exitg1 = true;
      } else {
        full_loop_B.h_idx_0++;
      }
    } else {
      full_loop_B.h_idx_0++;
    }
  }

  if (full_loop_B.tmp_size_j == 1) {
    if (full_loop_B.idx_j == 0) {
      full_loop_B.ii_size_idx_0 = 0;
    }
  } else {
    if (1 > full_loop_B.idx_j) {
      full_loop_B.idx_j = 0;
    }

    full_loop_B.ii_size_idx_0 = full_loop_B.idx_j;
  }

  full_loop_B.ilarge_size_idx_0 = full_loop_B.ii_size_idx_0;
  if (0 <= full_loop_B.ii_size_idx_0 - 1) {
    std::memcpy(&full_loop_B.ilarge_data[0], &full_loop_B.ii_data[0],
                full_loop_B.ii_size_idx_0 * sizeof(int32_T));
  }

  for (full_loop_B.h_idx_0 = 0; full_loop_B.h_idx_0 <
       full_loop_B.criteria_size_idx_0; full_loop_B.h_idx_0++) {
    full_loop_B.criteria_data[full_loop_B.h_idx_0] =
      !full_loop_B.criteria_data[full_loop_B.h_idx_0];
  }

  full_loop_B.idx_j = 0;
  full_loop_B.ii_size_idx_0 = full_loop_B.tmp_size_j;
  full_loop_B.h_idx_0 = 1;
  exitg1 = false;
  while ((!exitg1) && (full_loop_B.h_idx_0 - 1 <=
                       full_loop_B.criteria_size_idx_0 - 1)) {
    if (full_loop_B.criteria_data[full_loop_B.h_idx_0 - 1]) {
      full_loop_B.idx_j++;
      full_loop_B.ii_data[full_loop_B.idx_j - 1] = full_loop_B.h_idx_0;
      if (full_loop_B.idx_j >= full_loop_B.criteria_size_idx_0) {
        exitg1 = true;
      } else {
        full_loop_B.h_idx_0++;
      }
    } else {
      full_loop_B.h_idx_0++;
    }
  }

  if (full_loop_B.tmp_size_j == 1) {
    if (full_loop_B.idx_j == 0) {
      full_loop_B.ii_size_idx_0 = 0;
    }
  } else {
    if (1 > full_loop_B.idx_j) {
      full_loop_B.idx_j = 0;
    }

    full_loop_B.ii_size_idx_0 = full_loop_B.idx_j;
  }

  full_loop_B.ismall_size_idx_0 = full_loop_B.ii_size_idx_0;
  if (0 <= full_loop_B.ii_size_idx_0 - 1) {
    std::memcpy(&full_loop_B.ismall_data_m[0], &full_loop_B.ii_data[0],
                full_loop_B.ii_size_idx_0 * sizeof(int32_T));
  }

  full_loop_B.criteria_size_idx_0 = *d_size;
  full_loop_B.idx_j = *d_size;
  for (full_loop_B.h_idx_0 = 0; full_loop_B.h_idx_0 < full_loop_B.idx_j;
       full_loop_B.h_idx_0++) {
    full_loop_B.criteria_data[full_loop_B.h_idx_0] =
      ((d_data[full_loop_B.h_idx_0] == 0.0) && (a_data[full_loop_B.h_idx_0] ==
        0.0));
  }

  full_loop_B.idx_j = 0;
  full_loop_B.ii_size_idx_0 = *d_size;
  full_loop_B.h_idx_0 = 1;
  exitg1 = false;
  while ((!exitg1) && (full_loop_B.h_idx_0 - 1 <=
                       full_loop_B.criteria_size_idx_0 - 1)) {
    if (full_loop_B.criteria_data[full_loop_B.h_idx_0 - 1]) {
      full_loop_B.idx_j++;
      full_loop_B.ii_data[full_loop_B.idx_j - 1] = full_loop_B.h_idx_0;
      if (full_loop_B.idx_j >= full_loop_B.criteria_size_idx_0) {
        exitg1 = true;
      } else {
        full_loop_B.h_idx_0++;
      }
    } else {
      full_loop_B.h_idx_0++;
    }
  }

  if (*d_size == 1) {
    if (full_loop_B.idx_j == 0) {
      full_loop_B.ii_size_idx_0 = 0;
    }
  } else {
    if (1 > full_loop_B.idx_j) {
      full_loop_B.idx_j = 0;
    }

    full_loop_B.ii_size_idx_0 = full_loop_B.idx_j;
  }

  if (0 <= full_loop_B.ii_size_idx_0 - 1) {
    std::memcpy(&full_loop_B.izero_data[0], &full_loop_B.ii_data[0],
                full_loop_B.ii_size_idx_0 * sizeof(int32_T));
  }

  if (full_loop_B.ilarge_size_idx_0 != 0) {
    full_loop_B.a_size_b = full_loop_B.ilarge_size_idx_0;
    full_loop_B.d_size_i = full_loop_B.ilarge_size_idx_0;
    full_loop_B.c_size_k = full_loop_B.ilarge_size_idx_0;
    for (full_loop_B.h_idx_0 = 0; full_loop_B.h_idx_0 <
         full_loop_B.ilarge_size_idx_0; full_loop_B.h_idx_0++) {
      full_loop_B.a_data_e[full_loop_B.h_idx_0] =
        a_data[full_loop_B.ilarge_data[full_loop_B.h_idx_0] - 1];
      full_loop_B.d_data_f[full_loop_B.h_idx_0] =
        d_data[full_loop_B.ilarge_data[full_loop_B.h_idx_0] - 1];
      full_loop_B.c_data_nh[full_loop_B.h_idx_0] =
        c_data[full_loop_B.ilarge_data[full_loop_B.h_idx_0] - 1];
    }

    full_loop_fresnelgLargea1(full_loop_B.a_data_e, &full_loop_B.a_size_b,
      full_loop_B.d_data_f, &full_loop_B.d_size_i, full_loop_B.c_data_nh,
      &full_loop_B.c_size_k, full_loop_B.b_data_cg, &full_loop_B.b_size_l,
      full_loop_B.e_data_f, &full_loop_B.d_size);
    full_loop_B.idx_j = full_loop_B.b_size_l;
    for (full_loop_B.h_idx_0 = 0; full_loop_B.h_idx_0 < full_loop_B.idx_j;
         full_loop_B.h_idx_0++) {
      z_data[full_loop_B.ilarge_data[full_loop_B.h_idx_0] - 1] =
        full_loop_B.b_data_cg[full_loop_B.h_idx_0];
    }

    full_loop_B.idx_j = full_loop_B.d_size;
    for (full_loop_B.h_idx_0 = 0; full_loop_B.h_idx_0 < full_loop_B.idx_j;
         full_loop_B.h_idx_0++) {
      dz_data[full_loop_B.ilarge_data[full_loop_B.h_idx_0] - 1] =
        full_loop_B.e_data_f[full_loop_B.h_idx_0];
    }
  }

  if (full_loop_B.ismall_size_idx_0 != 0) {
    full_loop_B.a_size_l = full_loop_B.ismall_size_idx_0;
    full_loop_B.d_size_j = full_loop_B.ismall_size_idx_0;
    full_loop_B.c_size_m = full_loop_B.ismall_size_idx_0;
    for (full_loop_B.h_idx_0 = 0; full_loop_B.h_idx_0 <
         full_loop_B.ismall_size_idx_0; full_loop_B.h_idx_0++) {
      full_loop_B.a_data_e[full_loop_B.h_idx_0] =
        a_data[full_loop_B.ismall_data_m[full_loop_B.h_idx_0] - 1];
      full_loop_B.d_data_f[full_loop_B.h_idx_0] =
        d_data[full_loop_B.ismall_data_m[full_loop_B.h_idx_0] - 1];
      full_loop_B.c_data_nh[full_loop_B.h_idx_0] =
        c_data[full_loop_B.ismall_data_m[full_loop_B.h_idx_0] - 1];
    }

    full_loop_fresnelgSmalla1(full_loop_B.a_data_e, &full_loop_B.a_size_l,
      full_loop_B.d_data_f, &full_loop_B.d_size_j, full_loop_B.c_data_nh,
      &full_loop_B.c_size_m, full_loop_B.b_data_cg, &full_loop_B.b_size_l,
      full_loop_B.e_data_f, &full_loop_B.d_size);
    full_loop_B.idx_j = full_loop_B.b_size_l;
    for (full_loop_B.h_idx_0 = 0; full_loop_B.h_idx_0 < full_loop_B.idx_j;
         full_loop_B.h_idx_0++) {
      z_data[full_loop_B.ismall_data_m[full_loop_B.h_idx_0] - 1] =
        full_loop_B.b_data_cg[full_loop_B.h_idx_0];
    }

    full_loop_B.idx_j = full_loop_B.d_size;
    for (full_loop_B.h_idx_0 = 0; full_loop_B.h_idx_0 < full_loop_B.idx_j;
         full_loop_B.h_idx_0++) {
      dz_data[full_loop_B.ismall_data_m[full_loop_B.h_idx_0] - 1] =
        full_loop_B.e_data_f[full_loop_B.h_idx_0];
    }
  }

  if (full_loop_B.ii_size_idx_0 != 0) {
    if (0 <= full_loop_B.ii_size_idx_0 - 1) {
      std::memcpy(&full_loop_B.ii_data[0], &full_loop_B.izero_data[0],
                  full_loop_B.ii_size_idx_0 * sizeof(int32_T));
    }

    full_loop_B.b_size_l = full_loop_B.ii_size_idx_0;
    for (full_loop_B.h_idx_0 = 0; full_loop_B.h_idx_0 <
         full_loop_B.ii_size_idx_0; full_loop_B.h_idx_0++) {
      full_loop_B.d_f = c_data[full_loop_B.ii_data[full_loop_B.h_idx_0] - 1];
      full_loop_B.b_data_cg[full_loop_B.h_idx_0].re = full_loop_B.d_f * 0.0;
      full_loop_B.b_data_cg[full_loop_B.h_idx_0].im = full_loop_B.d_f;
    }

    full_loop_exp_p(full_loop_B.b_data_cg, &full_loop_B.b_size_l);
    full_loop_B.idx_j = full_loop_B.b_size_l;
    for (full_loop_B.h_idx_0 = 0; full_loop_B.h_idx_0 < full_loop_B.idx_j;
         full_loop_B.h_idx_0++) {
      z_data[full_loop_B.izero_data[full_loop_B.h_idx_0] - 1] =
        full_loop_B.b_data_cg[full_loop_B.h_idx_0];
    }

    for (full_loop_B.h_idx_0 = 0; full_loop_B.h_idx_0 <
         full_loop_B.ii_size_idx_0; full_loop_B.h_idx_0++) {
      dz_data[full_loop_B.ii_data[full_loop_B.h_idx_0] - 1].re = 0.0;
      dz_data[full_loop_B.ii_data[full_loop_B.h_idx_0] - 1].im = 0.0;
    }
  }
}

void full_loopModelClass::full_loop_abs_p4(const creal_T x_data[], const int32_T
  *x_size, real_T y_data[], int32_T *y_size)
{
  int32_T nx;
  int32_T b_k;
  nx = *x_size - 1;
  *y_size = *x_size;
  for (b_k = 0; b_k <= nx; b_k++) {
    y_data[b_k] = full_loop_rt_hypotd_snf(x_data[b_k].re, x_data[b_k].im);
  }
}

void full_loopModelClass::full_loop_clothoidG1fit2wp_p(const creal_T z0_data[],
  const real_T theta0_data[], const int32_T *theta0_size, const creal_T z1_data[],
  const int32_T *z1_size, const real_T theta1_data[], const int32_T *theta1_size,
  real_T k0_data[], int32_T *k0_size, real_T k1_data[], int32_T *k1_size, real_T
  l_data[], int32_T *l_size, real_T dk0_dtheta0_data[], int32_T
  *dk0_dtheta0_size, real_T dk0_dtheta1_data[], int32_T *dk0_dtheta1_size,
  real_T dk1_dtheta0_data[], int32_T *dk1_dtheta0_size, real_T dk1_dtheta1_data[],
  int32_T *dk1_dtheta1_size)
{
  full_loop_B.z_size_c0 = *z1_size;
  full_loop_B.loop_ub_n = *z1_size;
  for (full_loop_B.b_i_p = 0; full_loop_B.b_i_p < full_loop_B.loop_ub_n;
       full_loop_B.b_i_p++) {
    full_loop_B.z_data_n[full_loop_B.b_i_p].re = z1_data[full_loop_B.b_i_p].re -
      z0_data[full_loop_B.b_i_p].re;
    full_loop_B.z_data_n[full_loop_B.b_i_p].im = z1_data[full_loop_B.b_i_p].im -
      z0_data[full_loop_B.b_i_p].im;
  }

  full_loop_angle_p(full_loop_B.z_data_n, &full_loop_B.z_size_c0,
                    full_loop_B.phi_data, &full_loop_B.phi_size);
  full_loop_B.tmp_size_et = *theta0_size;
  full_loop_B.loop_ub_n = *theta0_size;
  for (full_loop_B.b_i_p = 0; full_loop_B.b_i_p < full_loop_B.loop_ub_n;
       full_loop_B.b_i_p++) {
    full_loop_B.brm = theta0_data[full_loop_B.b_i_p] -
      full_loop_B.phi_data[full_loop_B.b_i_p];
    full_loop_B.tmp_data_n[full_loop_B.b_i_p].re = full_loop_B.brm * 0.0;
    full_loop_B.tmp_data_n[full_loop_B.b_i_p].im = full_loop_B.brm;
  }

  full_loop_exp_p(full_loop_B.tmp_data_n, &full_loop_B.tmp_size_et);
  full_loop_angle_p(full_loop_B.tmp_data_n, &full_loop_B.tmp_size_et,
                    full_loop_B.phi0_data, &full_loop_B.phi0_size);
  full_loop_B.tmp_size_et = *theta1_size;
  full_loop_B.loop_ub_n = *theta1_size;
  for (full_loop_B.b_i_p = 0; full_loop_B.b_i_p < full_loop_B.loop_ub_n;
       full_loop_B.b_i_p++) {
    full_loop_B.brm = theta1_data[full_loop_B.b_i_p] -
      full_loop_B.phi_data[full_loop_B.b_i_p];
    full_loop_B.tmp_data_n[full_loop_B.b_i_p].re = full_loop_B.brm * 0.0;
    full_loop_B.tmp_data_n[full_loop_B.b_i_p].im = full_loop_B.brm;
  }

  full_loop_exp_p(full_loop_B.tmp_data_n, &full_loop_B.tmp_size_et);
  full_loop_angle_p(full_loop_B.tmp_data_n, &full_loop_B.tmp_size_et,
                    full_loop_B.phi1_data, &full_loop_B.phi1_size);
  *k1_size = full_loop_B.phi1_size;
  full_loop_B.loop_ub_n = full_loop_B.phi1_size;
  for (full_loop_B.b_i_p = 0; full_loop_B.b_i_p < full_loop_B.loop_ub_n;
       full_loop_B.b_i_p++) {
    k1_data[full_loop_B.b_i_p] = full_loop_B.phi1_data[full_loop_B.b_i_p] -
      full_loop_B.phi0_data[full_loop_B.b_i_p];
  }

  full_loop_fetchAgrad_p(full_loop_B.phi0_data, &full_loop_B.phi0_size,
    full_loop_B.phi1_data, full_loop_B.phi_data, &full_loop_B.phi_size,
    full_loop_B.da_dphi0_data, &full_loop_B.tmp_size_et,
    full_loop_B.da_dphi1_data, &full_loop_B.da_dphi1_size);
  full_loop_fresnelg1_p(full_loop_B.phi_data, &full_loop_B.phi_size, k1_data,
                        k1_size, full_loop_B.phi0_data, full_loop_B.f_data_d,
                        &full_loop_B.phi0_size, full_loop_B.df_da_data,
                        &full_loop_B.tmp_size_et);
  full_loop_abs_p4(full_loop_B.z_data_n, &full_loop_B.z_size_c0,
                   dk1_dtheta1_data, dk1_dtheta1_size);
  *l_size = *dk1_dtheta1_size;
  full_loop_B.loop_ub_n = *dk1_dtheta1_size;
  for (full_loop_B.b_i_p = 0; full_loop_B.b_i_p < full_loop_B.loop_ub_n;
       full_loop_B.b_i_p++) {
    l_data[full_loop_B.b_i_p] = dk1_dtheta1_data[full_loop_B.b_i_p] /
      full_loop_B.f_data_d[full_loop_B.b_i_p].re;
  }

  full_loop_power_p43(full_loop_B.f_data_d, &full_loop_B.phi0_size,
                      full_loop_B.tmp_data_n, &full_loop_B.tmp_size_et);
  full_loop_B.loop_ub_n = *dk1_dtheta1_size;
  for (full_loop_B.b_i_p = 0; full_loop_B.b_i_p < full_loop_B.loop_ub_n;
       full_loop_B.b_i_p++) {
    if (full_loop_B.tmp_data_n[full_loop_B.b_i_p].im == 0.0) {
      if (full_loop_B.df_da_data[full_loop_B.b_i_p].im == 0.0) {
        full_loop_B.brm = full_loop_B.df_da_data[full_loop_B.b_i_p].re /
          full_loop_B.tmp_data_n[full_loop_B.b_i_p].re;
      } else if (full_loop_B.df_da_data[full_loop_B.b_i_p].re == 0.0) {
        full_loop_B.brm = 0.0;
      } else {
        full_loop_B.brm = full_loop_B.df_da_data[full_loop_B.b_i_p].re /
          full_loop_B.tmp_data_n[full_loop_B.b_i_p].re;
      }
    } else if (full_loop_B.tmp_data_n[full_loop_B.b_i_p].re == 0.0) {
      if (full_loop_B.df_da_data[full_loop_B.b_i_p].re == 0.0) {
        full_loop_B.brm = full_loop_B.df_da_data[full_loop_B.b_i_p].im /
          full_loop_B.tmp_data_n[full_loop_B.b_i_p].im;
      } else if (full_loop_B.df_da_data[full_loop_B.b_i_p].im == 0.0) {
        full_loop_B.brm = 0.0;
      } else {
        full_loop_B.brm = full_loop_B.df_da_data[full_loop_B.b_i_p].im /
          full_loop_B.tmp_data_n[full_loop_B.b_i_p].im;
      }
    } else {
      full_loop_B.brm = std::abs(full_loop_B.tmp_data_n[full_loop_B.b_i_p].re);
      full_loop_B.bim = std::abs(full_loop_B.tmp_data_n[full_loop_B.b_i_p].im);
      if (full_loop_B.brm > full_loop_B.bim) {
        full_loop_B.brm = full_loop_B.tmp_data_n[full_loop_B.b_i_p].im /
          full_loop_B.tmp_data_n[full_loop_B.b_i_p].re;
        full_loop_B.brm = (full_loop_B.brm *
                           full_loop_B.df_da_data[full_loop_B.b_i_p].im +
                           full_loop_B.df_da_data[full_loop_B.b_i_p].re) /
          (full_loop_B.brm * full_loop_B.tmp_data_n[full_loop_B.b_i_p].im +
           full_loop_B.tmp_data_n[full_loop_B.b_i_p].re);
      } else if (full_loop_B.bim == full_loop_B.brm) {
        full_loop_B.brm = ((full_loop_B.tmp_data_n[full_loop_B.b_i_p].re > 0.0 ?
                            0.5 : -0.5) *
                           full_loop_B.df_da_data[full_loop_B.b_i_p].re +
                           (full_loop_B.tmp_data_n[full_loop_B.b_i_p].im > 0.0 ?
                            0.5 : -0.5) *
                           full_loop_B.df_da_data[full_loop_B.b_i_p].im) /
          full_loop_B.brm;
      } else {
        full_loop_B.brm = full_loop_B.tmp_data_n[full_loop_B.b_i_p].re /
          full_loop_B.tmp_data_n[full_loop_B.b_i_p].im;
        full_loop_B.brm = (full_loop_B.brm *
                           full_loop_B.df_da_data[full_loop_B.b_i_p].re +
                           full_loop_B.df_da_data[full_loop_B.b_i_p].im) /
          (full_loop_B.brm * full_loop_B.tmp_data_n[full_loop_B.b_i_p].re +
           full_loop_B.tmp_data_n[full_loop_B.b_i_p].im);
      }
    }

    dk1_dtheta1_data[full_loop_B.b_i_p] = -dk1_dtheta1_data[full_loop_B.b_i_p] *
      full_loop_B.brm;
  }

  full_loop_power_p(l_data, l_size, full_loop_B.tmp_data_ob,
                    &full_loop_B.tmp_size_et);
  full_loop_B.loop_ub_n = full_loop_B.tmp_size_et;
  if (0 <= full_loop_B.loop_ub_n - 1) {
    std::memcpy(&full_loop_B.phi0_data[0], &full_loop_B.tmp_data_ob[0],
                full_loop_B.loop_ub_n * sizeof(real_T));
  }

  *k0_size = full_loop_B.phi1_size;
  full_loop_B.loop_ub_n = full_loop_B.phi1_size;
  for (full_loop_B.b_i_p = 0; full_loop_B.b_i_p < full_loop_B.loop_ub_n;
       full_loop_B.b_i_p++) {
    k0_data[full_loop_B.b_i_p] = k1_data[full_loop_B.b_i_p] -
      full_loop_B.phi_data[full_loop_B.b_i_p];
  }

  full_loop_B.loop_ub_n = *dk1_dtheta1_size;
  for (full_loop_B.b_i_p = 0; full_loop_B.b_i_p < full_loop_B.loop_ub_n;
       full_loop_B.b_i_p++) {
    dk1_dtheta0_data[full_loop_B.b_i_p] = -dk1_dtheta1_data[full_loop_B.b_i_p] *
      full_loop_B.da_dphi0_data[full_loop_B.b_i_p] /
      full_loop_B.phi0_data[full_loop_B.b_i_p];
  }

  *dk0_dtheta0_size = full_loop_B.phi1_size;
  full_loop_B.loop_ub_n = full_loop_B.phi1_size;
  for (full_loop_B.b_i_p = 0; full_loop_B.b_i_p < full_loop_B.loop_ub_n;
       full_loop_B.b_i_p++) {
    dk0_dtheta0_data[full_loop_B.b_i_p] = (-1.0 -
      full_loop_B.da_dphi0_data[full_loop_B.b_i_p]) / l_data[full_loop_B.b_i_p]
      + k0_data[full_loop_B.b_i_p] * dk1_dtheta0_data[full_loop_B.b_i_p];
  }

  full_loop_B.loop_ub_n = *dk1_dtheta1_size;
  for (full_loop_B.b_i_p = 0; full_loop_B.b_i_p < full_loop_B.loop_ub_n;
       full_loop_B.b_i_p++) {
    dk1_dtheta1_data[full_loop_B.b_i_p] = -dk1_dtheta1_data[full_loop_B.b_i_p] *
      full_loop_B.da_dphi1_data[full_loop_B.b_i_p] /
      full_loop_B.phi0_data[full_loop_B.b_i_p];
  }

  *dk0_dtheta1_size = full_loop_B.phi1_size;
  full_loop_B.loop_ub_n = full_loop_B.phi1_size;
  for (full_loop_B.b_i_p = 0; full_loop_B.b_i_p < full_loop_B.loop_ub_n;
       full_loop_B.b_i_p++) {
    dk0_dtheta1_data[full_loop_B.b_i_p] = (1.0 -
      full_loop_B.da_dphi1_data[full_loop_B.b_i_p]) / l_data[full_loop_B.b_i_p]
      + k0_data[full_loop_B.b_i_p] * dk1_dtheta1_data[full_loop_B.b_i_p];
  }

  full_loop_B.loop_ub_n = full_loop_B.phi1_size;
  for (full_loop_B.b_i_p = 0; full_loop_B.b_i_p < full_loop_B.loop_ub_n;
       full_loop_B.b_i_p++) {
    k1_data[full_loop_B.b_i_p] += full_loop_B.phi_data[full_loop_B.b_i_p];
  }

  *dk1_dtheta0_size = full_loop_B.phi1_size;
  full_loop_B.loop_ub_n = full_loop_B.phi1_size;
  for (full_loop_B.b_i_p = 0; full_loop_B.b_i_p < full_loop_B.loop_ub_n;
       full_loop_B.b_i_p++) {
    dk1_dtheta0_data[full_loop_B.b_i_p] =
      (full_loop_B.da_dphi0_data[full_loop_B.b_i_p] + -1.0) /
      l_data[full_loop_B.b_i_p] + k1_data[full_loop_B.b_i_p] *
      dk1_dtheta0_data[full_loop_B.b_i_p];
  }

  *dk1_dtheta1_size = full_loop_B.phi1_size;
  full_loop_B.loop_ub_n = full_loop_B.phi1_size;
  for (full_loop_B.b_i_p = 0; full_loop_B.b_i_p < full_loop_B.loop_ub_n;
       full_loop_B.b_i_p++) {
    dk1_dtheta1_data[full_loop_B.b_i_p] =
      (full_loop_B.da_dphi1_data[full_loop_B.b_i_p] + 1.0) /
      l_data[full_loop_B.b_i_p] + k1_data[full_loop_B.b_i_p] *
      dk1_dtheta1_data[full_loop_B.b_i_p];
  }

  full_loop_B.loop_ub_n = *l_size - 1;
  for (full_loop_B.b_i_p = 0; full_loop_B.b_i_p <= full_loop_B.loop_ub_n;
       full_loop_B.b_i_p++) {
    if (l_data[full_loop_B.b_i_p] == 0.0) {
      dk0_dtheta0_data[full_loop_B.b_i_p] = 0.0;
    }
  }

  full_loop_B.loop_ub_n = *l_size - 1;
  for (full_loop_B.b_i_p = 0; full_loop_B.b_i_p <= full_loop_B.loop_ub_n;
       full_loop_B.b_i_p++) {
    if (l_data[full_loop_B.b_i_p] == 0.0) {
      dk0_dtheta1_data[full_loop_B.b_i_p] = 0.0;
    }
  }

  full_loop_B.loop_ub_n = *l_size - 1;
  for (full_loop_B.b_i_p = 0; full_loop_B.b_i_p <= full_loop_B.loop_ub_n;
       full_loop_B.b_i_p++) {
    if (l_data[full_loop_B.b_i_p] == 0.0) {
      dk1_dtheta0_data[full_loop_B.b_i_p] = 0.0;
    }
  }

  full_loop_B.loop_ub_n = *l_size - 1;
  for (full_loop_B.b_i_p = 0; full_loop_B.b_i_p <= full_loop_B.loop_ub_n;
       full_loop_B.b_i_p++) {
    if (l_data[full_loop_B.b_i_p] == 0.0) {
      dk1_dtheta1_data[full_loop_B.b_i_p] = 0.0;
    }
  }

  full_loop_B.loop_ub_n = full_loop_B.phi1_size;
  for (full_loop_B.b_i_p = 0; full_loop_B.b_i_p < full_loop_B.loop_ub_n;
       full_loop_B.b_i_p++) {
    k0_data[full_loop_B.b_i_p] /= l_data[full_loop_B.b_i_p];
  }

  full_loop_B.loop_ub_n = full_loop_B.phi1_size;
  for (full_loop_B.b_i_p = 0; full_loop_B.b_i_p < full_loop_B.loop_ub_n;
       full_loop_B.b_i_p++) {
    k1_data[full_loop_B.b_i_p] /= l_data[full_loop_B.b_i_p];
  }

  full_loop_B.loop_ub_n = *l_size - 1;
  for (full_loop_B.b_i_p = 0; full_loop_B.b_i_p <= full_loop_B.loop_ub_n;
       full_loop_B.b_i_p++) {
    if (l_data[full_loop_B.b_i_p] == 0.0) {
      k0_data[full_loop_B.b_i_p] = 0.0;
    }
  }

  full_loop_B.loop_ub_n = *l_size - 1;
  for (full_loop_B.b_i_p = 0; full_loop_B.b_i_p <= full_loop_B.loop_ub_n;
       full_loop_B.b_i_p++) {
    if (l_data[full_loop_B.b_i_p] == 0.0) {
      k1_data[full_loop_B.b_i_p] = 0.0;
    }
  }
}

void full_loopModelClass::full_loop___anon_fcn_p43(const real_T waypoints_data[],
  const int32_T waypoints_size[2], const real_T course_data[], const int32_T
  *course_size, const real_T x_data[], real_T varargout_1_data[], int32_T
  *varargout_1_size, real_T varargout_2_data[], int32_T varargout_2_size[2])
{
  full_loop_B.loop_ub_o = *course_size;
  if (0 <= full_loop_B.loop_ub_o - 1) {
    std::memcpy(&full_loop_B.course_data_j[0], &course_data[0],
                full_loop_B.loop_ub_o * sizeof(real_T));
  }

  full_loop_B.loop_ub_o = waypoints_size[0];
  for (full_loop_B.e_m = 0; full_loop_B.e_m < full_loop_B.loop_ub_o;
       full_loop_B.e_m++) {
    full_loop_B.hip_data[full_loop_B.e_m].re = waypoints_data[full_loop_B.e_m];
    full_loop_B.hip_data[full_loop_B.e_m].im = waypoints_data[full_loop_B.e_m +
      waypoints_size[0]];
  }

  if (2.0 > static_cast<real_T>(*course_size) - 1.0) {
    full_loop_B.f_m = 0;
    full_loop_B.e_m = 0;
  } else {
    full_loop_B.f_m = 1;
    full_loop_B.e_m = *course_size - 1;
  }

  full_loop_B.g_size_idx_1_tmp = full_loop_B.e_m - full_loop_B.f_m;
  for (full_loop_B.e_m = 0; full_loop_B.e_m < full_loop_B.g_size_idx_1_tmp;
       full_loop_B.e_m++) {
    full_loop_B.g_data_p[full_loop_B.e_m] = full_loop_B.f_m + full_loop_B.e_m;
  }

  for (full_loop_B.e_m = 0; full_loop_B.e_m < full_loop_B.g_size_idx_1_tmp;
       full_loop_B.e_m++) {
    full_loop_B.course_data_j[full_loop_B.g_data_p[full_loop_B.e_m]] =
      x_data[full_loop_B.e_m];
  }

  if (1.0 > static_cast<real_T>(waypoints_size[0]) - 1.0) {
    full_loop_B.e_m = 0;
    full_loop_B.l_n = 0;
  } else {
    full_loop_B.e_m = waypoints_size[0] - 1;
    full_loop_B.l_n = waypoints_size[0] - 1;
  }

  if (2 > waypoints_size[0]) {
    full_loop_B.g_size_idx_1_tmp = 0;
    full_loop_B.o_m = 0;
    full_loop_B.f_m = 0;
    full_loop_B.q_l = 0;
  } else {
    full_loop_B.g_size_idx_1_tmp = 1;
    full_loop_B.o_m = waypoints_size[0];
    full_loop_B.f_m = 1;
    full_loop_B.q_l = waypoints_size[0];
  }

  if (0 <= full_loop_B.e_m - 1) {
    std::memcpy(&full_loop_B.hip_data_g[0], &full_loop_B.hip_data[0],
                full_loop_B.e_m * sizeof(creal_T));
  }

  full_loop_B.course_size = full_loop_B.l_n;
  if (0 <= full_loop_B.l_n - 1) {
    std::memcpy(&full_loop_B.course_data_pl[0], &full_loop_B.course_data_j[0],
                full_loop_B.l_n * sizeof(real_T));
  }

  full_loop_B.l_n = full_loop_B.o_m - full_loop_B.g_size_idx_1_tmp;
  full_loop_B.hip_size = full_loop_B.l_n;
  for (full_loop_B.e_m = 0; full_loop_B.e_m < full_loop_B.l_n; full_loop_B.e_m++)
  {
    full_loop_B.hip_data_m[full_loop_B.e_m] =
      full_loop_B.hip_data[full_loop_B.g_size_idx_1_tmp + full_loop_B.e_m];
  }

  full_loop_B.g_size_idx_1_tmp = full_loop_B.q_l - full_loop_B.f_m;
  full_loop_B.course_size_i = full_loop_B.g_size_idx_1_tmp;
  for (full_loop_B.e_m = 0; full_loop_B.e_m < full_loop_B.g_size_idx_1_tmp;
       full_loop_B.e_m++) {
    full_loop_B.course_data_p[full_loop_B.e_m] =
      full_loop_B.course_data_j[full_loop_B.f_m + full_loop_B.e_m];
  }

  full_loop_clothoidG1fit2wp_p(full_loop_B.hip_data_g,
    full_loop_B.course_data_pl, &full_loop_B.course_size, full_loop_B.hip_data_m,
    &full_loop_B.hip_size, full_loop_B.course_data_p, &full_loop_B.course_size_i,
    full_loop_B.k0_data, &full_loop_B.k0_size, full_loop_B.k1_data,
    &full_loop_B.k1_size, full_loop_B.unusedU3_data, &full_loop_B.unusedU3_size,
    full_loop_B.dk0_dc0_data, &full_loop_B.dk0_dc0_size,
    full_loop_B.dk0_dc1_data, &full_loop_B.dk0_dc1_size,
    full_loop_B.dk1_dc0_data, &full_loop_B.dk1_dc0_size,
    full_loop_B.dk1_dc1_data, &full_loop_B.dk1_dc1_size);
  if (1.0 > static_cast<real_T>(full_loop_B.k1_size) - 1.0) {
    full_loop_B.f_m = 0;
  } else {
    full_loop_B.f_m = full_loop_B.k1_size - 1;
  }

  if (2 > full_loop_B.k0_size) {
    full_loop_B.g_size_idx_1_tmp = 0;
  } else {
    full_loop_B.g_size_idx_1_tmp = 1;
  }

  if (2.0 > static_cast<real_T>(full_loop_B.dk0_dc1_size) - 1.0) {
    full_loop_B.q_l = 0;
    full_loop_B.l_n = 0;
  } else {
    full_loop_B.q_l = 1;
    full_loop_B.l_n = full_loop_B.dk0_dc1_size - 1;
  }

  if (2.0 > static_cast<real_T>(full_loop_B.dk1_dc0_size) - 1.0) {
    full_loop_B.o_m = 0;
    full_loop_B.e_m = 0;
  } else {
    full_loop_B.o_m = 1;
    full_loop_B.e_m = full_loop_B.dk1_dc0_size - 1;
  }

  if (1.0 > static_cast<real_T>(waypoints_size[0]) - 2.0) {
    full_loop_B.ib = 0;
  } else {
    full_loop_B.ib = waypoints_size[0] - 2;
  }

  if (2.0 > static_cast<real_T>(waypoints_size[0]) - 1.0) {
    full_loop_B.mb = 0;
  } else {
    full_loop_B.mb = 1;
  }

  full_loop_B.loop_ub_o = full_loop_B.e_m - full_loop_B.o_m;
  full_loop_B.reshapes_o[0].f1.size = full_loop_B.loop_ub_o + 1;
  for (full_loop_B.e_m = 0; full_loop_B.e_m < full_loop_B.loop_ub_o;
       full_loop_B.e_m++) {
    full_loop_B.reshapes_o[0].f1.data[full_loop_B.e_m] =
      full_loop_B.dk1_dc0_data[full_loop_B.o_m + full_loop_B.e_m];
  }

  full_loop_B.reshapes_o[0].f1.data[full_loop_B.loop_ub_o] = 0.0;
  for (full_loop_B.e_m = 0; full_loop_B.e_m < full_loop_B.ib; full_loop_B.e_m++)
  {
    full_loop_B.reshapes_o[1].f1.data[full_loop_B.e_m] =
      full_loop_B.dk1_dc1_data[full_loop_B.e_m] -
      full_loop_B.dk0_dc0_data[full_loop_B.mb + full_loop_B.e_m];
  }

  full_loop_B.loop_ub_o = full_loop_B.l_n - full_loop_B.q_l;
  full_loop_B.reshapes_o[2].f1.size = full_loop_B.loop_ub_o + 1;
  for (full_loop_B.e_m = 0; full_loop_B.e_m < full_loop_B.loop_ub_o;
       full_loop_B.e_m++) {
    full_loop_B.reshapes_o[2].f1.data[full_loop_B.e_m] =
      -full_loop_B.dk0_dc1_data[full_loop_B.q_l + full_loop_B.e_m];
  }

  full_loop_B.reshapes_o[2].f1.data[full_loop_B.loop_ub_o] = 0.0;
  *varargout_1_size = full_loop_B.f_m;
  for (full_loop_B.e_m = 0; full_loop_B.e_m < full_loop_B.f_m; full_loop_B.e_m++)
  {
    varargout_1_data[full_loop_B.e_m] = full_loop_B.k1_data[full_loop_B.e_m] -
      full_loop_B.k0_data[full_loop_B.g_size_idx_1_tmp + full_loop_B.e_m];
  }

  varargout_2_size[0] = full_loop_B.reshapes_o[0].f1.size;
  varargout_2_size[1] = 3;
  full_loop_B.loop_ub_o = full_loop_B.reshapes_o[0].f1.size;
  for (full_loop_B.e_m = 0; full_loop_B.e_m < full_loop_B.loop_ub_o;
       full_loop_B.e_m++) {
    varargout_2_data[full_loop_B.e_m] = full_loop_B.reshapes_o[0]
      .f1.data[full_loop_B.e_m];
  }

  for (full_loop_B.e_m = 0; full_loop_B.e_m < full_loop_B.ib; full_loop_B.e_m++)
  {
    varargout_2_data[full_loop_B.e_m + full_loop_B.reshapes_o[0].f1.size] =
      full_loop_B.reshapes_o[1].f1.data[full_loop_B.e_m];
  }

  full_loop_B.loop_ub_o = full_loop_B.reshapes_o[2].f1.size;
  for (full_loop_B.e_m = 0; full_loop_B.e_m < full_loop_B.loop_ub_o;
       full_loop_B.e_m++) {
    varargout_2_data[(full_loop_B.e_m + full_loop_B.reshapes_o[0].f1.size) +
      full_loop_B.ib] = full_loop_B.reshapes_o[2].f1.data[full_loop_B.e_m];
  }
}

void full_loopModelClass::full_loop_mulJt_p(const real_T Jtri_data[], const
  int32_T Jtri_size[2], const real_T x_data[], const int32_T *x_size, real_T
  y_data[], int32_T *y_size)
{
  int32_T y_size_idx_1;
  int32_T y_size_idx_1_tmp;
  if (*x_size < 2) {
    full_loop_B.y_size_idx_1_ke = 0;
  } else {
    full_loop_B.y_size_idx_1_ke = *x_size - 1;
    full_loop_B.loop_ub_dk = *x_size - 2;
    for (full_loop_B.i14 = 0; full_loop_B.i14 <= full_loop_B.loop_ub_dk;
         full_loop_B.i14++) {
      full_loop_B.y_data_i[full_loop_B.i14] = static_cast<real_T>
        (full_loop_B.i14) + 2.0;
    }
  }

  if (static_cast<real_T>(*x_size) - 1.0 < 1.0) {
    y_size_idx_1_tmp = 0;
    y_size_idx_1 = 0;
  } else {
    full_loop_B.loop_ub_dk = static_cast<int32_T>((static_cast<real_T>(*x_size)
      - 1.0) - 1.0);
    y_size_idx_1_tmp = full_loop_B.loop_ub_dk + 1;
    for (full_loop_B.i14 = 0; full_loop_B.i14 <= full_loop_B.loop_ub_dk;
         full_loop_B.i14++) {
      full_loop_B.y_data_mid[full_loop_B.i14] = static_cast<real_T>
        (full_loop_B.i14) + 1.0;
    }

    y_size_idx_1 = y_size_idx_1_tmp;
    for (full_loop_B.i14 = 0; full_loop_B.i14 <= full_loop_B.loop_ub_dk;
         full_loop_B.i14++) {
      full_loop_B.y_data_f[full_loop_B.i14] = static_cast<real_T>
        (full_loop_B.i14) + 1.0;
    }
  }

  for (full_loop_B.i14 = 0; full_loop_B.i14 < full_loop_B.y_size_idx_1_ke;
       full_loop_B.i14++) {
    full_loop_B.y_data_ca[full_loop_B.i14] = static_cast<int32_T>
      (full_loop_B.y_data_i[full_loop_B.i14]) - 1;
  }

  full_loop_B.y_data_ca[full_loop_B.y_size_idx_1_ke] = 0;
  full_loop_B.x_data_kt[0] = *x_size - 1;
  for (full_loop_B.i14 = 0; full_loop_B.i14 < y_size_idx_1_tmp; full_loop_B.i14
       ++) {
    full_loop_B.x_data_kt[full_loop_B.i14 + 1] = static_cast<int32_T>
      (full_loop_B.y_data_mid[full_loop_B.i14]) - 1;
  }

  full_loop_B.x_data_d[0] = *x_size - 1;
  for (full_loop_B.i14 = 0; full_loop_B.i14 < y_size_idx_1; full_loop_B.i14++) {
    full_loop_B.x_data_d[full_loop_B.i14 + 1] = static_cast<int32_T>
      (full_loop_B.y_data_f[full_loop_B.i14]) - 1;
  }

  full_loop_B.loop_ub_dk = Jtri_size[0];
  *y_size = Jtri_size[0];
  for (full_loop_B.i14 = 0; full_loop_B.i14 < full_loop_B.loop_ub_dk;
       full_loop_B.i14++) {
    y_data[full_loop_B.i14] = (Jtri_data[full_loop_B.i14 + Jtri_size[0]] *
      x_data[full_loop_B.i14] + Jtri_data[full_loop_B.i14] *
      x_data[full_loop_B.y_data_ca[full_loop_B.i14]]) + Jtri_data[(Jtri_size[0] <<
      1) + full_loop_B.x_data_kt[full_loop_B.i14]] *
      x_data[full_loop_B.x_data_d[full_loop_B.i14]];
  }
}

void full_loopModelClass::full_loop_repmat_p4(real_T varargin_1, real_T b_data[],
  int32_T *b_size)
{
  int32_T i;
  int32_T outsize_idx_0;
  outsize_idx_0 = static_cast<int32_T>(varargin_1);
  *b_size = outsize_idx_0;
  for (i = 0; i < outsize_idx_0; i++) {
    b_data[i] = 1.0E-7;
  }
}

boolean_T full_loopModelClass::full_loop_any_p4(const boolean_T x_data[], const
  int32_T *x_size)
{
  boolean_T y;
  int32_T ix;
  boolean_T exitg1;
  y = false;
  ix = 0;
  exitg1 = false;
  while ((!exitg1) && (ix + 1 <= *x_size)) {
    if (!x_data[ix]) {
      ix++;
    } else {
      y = true;
      exitg1 = true;
    }
  }

  return y;
}

void full_loopModelClass::full_loop_bsxfun(const real_T a_data[], const int32_T
  a_size[2], const real_T b_data[], const int32_T *b_size, real_T c_data[],
  int32_T c_size[2])
{
  int32_T csz_idx_0;
  if (*b_size == 1) {
    csz_idx_0 = a_size[0];
  } else if (a_size[0] == 1) {
    csz_idx_0 = *b_size;
  } else if (a_size[0] == *b_size) {
    csz_idx_0 = a_size[0];
  } else if (*b_size < a_size[0]) {
    csz_idx_0 = *b_size;
  } else {
    csz_idx_0 = a_size[0];
  }

  c_size[0] = csz_idx_0;
  c_size[1] = a_size[1];
  if ((csz_idx_0 != 0) && (a_size[1] != 0)) {
    full_loop_B.acoef = (a_size[1] != 1);
    full_loop_B.d_a = a_size[1];
    for (full_loop_B.k_n = 0; full_loop_B.k_n < full_loop_B.d_a; full_loop_B.k_n
         ++) {
      full_loop_B.ia = full_loop_B.acoef * full_loop_B.k_n;
      full_loop_B.acoef_e = (a_size[0] != 1);
      full_loop_B.bcoef = (*b_size != 1);
      for (full_loop_B.k_nf = 0; full_loop_B.k_nf < csz_idx_0; full_loop_B.k_nf
           ++) {
        c_data[full_loop_B.k_nf + csz_idx_0 * full_loop_B.k_n] =
          a_data[full_loop_B.acoef_e * full_loop_B.k_nf + a_size[0] *
          full_loop_B.ia] / b_data[full_loop_B.bcoef * full_loop_B.k_nf];
      }
    }
  }
}

void full_loopModelClass::full_loop_sympentdisolve_p4(const real_T d_data[],
  const real_T e_data[], const real_T f_data[], const real_T b_data[], const
  int32_T b_size[2], real_T x_data[], int32_T x_size[2])
{
  x_size[0] = b_size[0];
  x_size[1] = b_size[1];
  full_loop_B.loop_ub_tmp_d = b_size[0] * b_size[1] - 1;
  if (0 <= full_loop_B.loop_ub_tmp_d) {
    std::memset(&x_data[0], 0, (full_loop_B.loop_ub_tmp_d + 1) * sizeof(real_T));
  }

  full_loop_B.alpha_size_o = b_size[0];
  full_loop_B.loop_ub_b = b_size[0];
  if (0 <= full_loop_B.loop_ub_b - 1) {
    std::memset(&full_loop_B.alpha_data_ey[0], 0, full_loop_B.loop_ub_b * sizeof
                (real_T));
  }

  full_loop_B.loop_ub_b = b_size[0] - 1;
  if (0 <= full_loop_B.loop_ub_b - 1) {
    std::memset(&full_loop_B.b_gamma_data[0], 0, full_loop_B.loop_ub_b * sizeof
                (real_T));
  }

  full_loop_B.loop_ub_b = b_size[0] - 2;
  if (0 <= full_loop_B.loop_ub_b - 1) {
    std::memset(&full_loop_B.delta_data[0], 0, full_loop_B.loop_ub_b * sizeof
                (real_T));
  }

  full_loop_B.alpha_data_ey[0] = d_data[0];
  full_loop_B.b_gamma_data[0] = e_data[0] / d_data[0];
  full_loop_B.delta_data[0] = f_data[0] / d_data[0];
  full_loop_B.alpha_data_ey[1] = d_data[1] - e_data[0] *
    full_loop_B.b_gamma_data[0];
  full_loop_B.b_gamma_data[1] = (e_data[1] - f_data[0] *
    full_loop_B.b_gamma_data[0]) / full_loop_B.alpha_data_ey[1];
  full_loop_B.delta_data[1] = f_data[1] / full_loop_B.alpha_data_ey[1];
  full_loop_B.loop_ub_b = static_cast<int32_T>((static_cast<real_T>(b_size[0]) -
    2.0) + -2.0) - 1;
  for (full_loop_B.b_k_f = 0; full_loop_B.b_k_f <= full_loop_B.loop_ub_b;
       full_loop_B.b_k_f++) {
    full_loop_B.alpha_data_tmp_p = static_cast<int32_T>((static_cast<real_T>
      (full_loop_B.b_k_f) + 3.0) - 2.0) - 1;
    full_loop_B.alpha_data_tmp_l = static_cast<int32_T>((static_cast<real_T>
      (full_loop_B.b_k_f) + 3.0) - 1.0) - 1;
    full_loop_B.alpha_data_ey[full_loop_B.b_k_f + 2] = (d_data[full_loop_B.b_k_f
      + 2] - f_data[full_loop_B.alpha_data_tmp_p] *
      full_loop_B.delta_data[full_loop_B.alpha_data_tmp_p]) -
      full_loop_B.b_gamma_data[full_loop_B.alpha_data_tmp_l] *
      full_loop_B.b_gamma_data[full_loop_B.alpha_data_tmp_l] *
      full_loop_B.alpha_data_ey[full_loop_B.alpha_data_tmp_l];
    full_loop_B.b_gamma_data_tmp_p = full_loop_B.alpha_data_ey[full_loop_B.b_k_f
      + 2];
    full_loop_B.b_gamma_data[full_loop_B.b_k_f + 2] = (e_data[full_loop_B.b_k_f
      + 2] - f_data[full_loop_B.alpha_data_tmp_l] *
      full_loop_B.b_gamma_data[full_loop_B.alpha_data_tmp_l]) /
      full_loop_B.b_gamma_data_tmp_p;
    full_loop_B.delta_data[full_loop_B.b_k_f + 2] = f_data[full_loop_B.b_k_f + 2]
      / full_loop_B.b_gamma_data_tmp_p;
  }

  full_loop_B.alpha_data_tmp = full_loop_B.b_gamma_data[b_size[0] - 3];
  full_loop_B.alpha_data_ey[b_size[0] - 2] = (d_data[b_size[0] - 2] -
    f_data[b_size[0] - 4] * full_loop_B.delta_data[b_size[0] - 4]) -
    full_loop_B.alpha_data_tmp * full_loop_B.alpha_data_tmp *
    full_loop_B.alpha_data_ey[b_size[0] - 3];
  full_loop_B.b_gamma_data_tmp_p = f_data[b_size[0] - 3];
  full_loop_B.b_gamma_data_tmp = full_loop_B.alpha_data_ey[b_size[0] - 2];
  full_loop_B.b_gamma_data[b_size[0] - 2] = (e_data[b_size[0] - 2] -
    full_loop_B.b_gamma_data_tmp_p * full_loop_B.alpha_data_tmp) /
    full_loop_B.b_gamma_data_tmp;
  full_loop_B.alpha_data_tmp = full_loop_B.b_gamma_data[b_size[0] - 2];
  full_loop_B.alpha_data_ey[b_size[0] - 1] = (d_data[b_size[0] - 1] -
    full_loop_B.b_gamma_data_tmp_p * full_loop_B.delta_data[b_size[0] - 3]) -
    full_loop_B.alpha_data_tmp * full_loop_B.alpha_data_tmp *
    full_loop_B.b_gamma_data_tmp;
  full_loop_B.z_size[0] = b_size[0];
  full_loop_B.z_size[1] = b_size[1];
  if (0 <= full_loop_B.loop_ub_tmp_d) {
    std::memset(&full_loop_B.z_data_p[0], 0, (full_loop_B.loop_ub_tmp_d + 1) *
                sizeof(real_T));
  }

  full_loop_B.loop_ub_b = b_size[1] - 1;
  for (full_loop_B.b_k_f = 0; full_loop_B.b_k_f <= full_loop_B.loop_ub_b;
       full_loop_B.b_k_f++) {
    full_loop_B.z_data_p[full_loop_B.z_size[0] * full_loop_B.b_k_f] =
      b_data[b_size[0] * full_loop_B.b_k_f];
  }

  full_loop_B.loop_ub_b = b_size[1];
  for (full_loop_B.b_k_f = 0; full_loop_B.b_k_f < full_loop_B.loop_ub_b;
       full_loop_B.b_k_f++) {
    full_loop_B.b_data_cx[full_loop_B.b_k_f] = b_data[b_size[0] *
      full_loop_B.b_k_f + 1] - full_loop_B.z_data_p[full_loop_B.z_size[0] *
      full_loop_B.b_k_f] * full_loop_B.b_gamma_data[0];
  }

  for (full_loop_B.b_k_f = 0; full_loop_B.b_k_f < full_loop_B.loop_ub_b;
       full_loop_B.b_k_f++) {
    full_loop_B.z_data_p[full_loop_B.z_size[0] * full_loop_B.b_k_f + 1] =
      full_loop_B.b_data_cx[full_loop_B.b_k_f];
  }

  full_loop_B.alpha_data_tmp_l = b_size[0] - 3;
  for (full_loop_B.alpha_data_tmp_p = 0; full_loop_B.alpha_data_tmp_p <=
       full_loop_B.alpha_data_tmp_l; full_loop_B.alpha_data_tmp_p++) {
    full_loop_B.loop_ub_tmp_d = static_cast<int32_T>((static_cast<real_T>
      (full_loop_B.alpha_data_tmp_p) + 3.0) - 1.0);
    full_loop_B.b_gamma_data_tmp_p =
      full_loop_B.b_gamma_data[full_loop_B.loop_ub_tmp_d - 1];
    full_loop_B.delta_tmp = static_cast<int32_T>((static_cast<real_T>
      (full_loop_B.alpha_data_tmp_p) + 3.0) - 2.0);
    full_loop_B.b_gamma_data_tmp = full_loop_B.delta_data[full_loop_B.delta_tmp
      - 1];
    full_loop_B.loop_ub_b = b_size[1];
    for (full_loop_B.b_k_f = 0; full_loop_B.b_k_f < full_loop_B.loop_ub_b;
         full_loop_B.b_k_f++) {
      full_loop_B.b_data_tmp = full_loop_B.z_size[0] * full_loop_B.b_k_f;
      full_loop_B.b_data_cx[full_loop_B.b_k_f] = (b_data[(b_size[0] *
        full_loop_B.b_k_f + full_loop_B.alpha_data_tmp_p) + 2] -
        full_loop_B.z_data_p[(full_loop_B.b_data_tmp + full_loop_B.loop_ub_tmp_d)
        - 1] * full_loop_B.b_gamma_data_tmp_p) - full_loop_B.z_data_p
        [(full_loop_B.b_data_tmp + full_loop_B.delta_tmp) - 1] *
        full_loop_B.b_gamma_data_tmp;
    }

    for (full_loop_B.b_k_f = 0; full_loop_B.b_k_f < full_loop_B.loop_ub_b;
         full_loop_B.b_k_f++) {
      full_loop_B.z_data_p[(full_loop_B.alpha_data_tmp_p + full_loop_B.z_size[0]
                            * full_loop_B.b_k_f) + 2] =
        full_loop_B.b_data_cx[full_loop_B.b_k_f];
    }
  }

  full_loop_bsxfun(full_loop_B.z_data_p, full_loop_B.z_size,
                   full_loop_B.alpha_data_ey, &full_loop_B.alpha_size_o,
                   full_loop_B.c_data_pt, full_loop_B.c_size);
  full_loop_B.loop_ub_b = full_loop_B.c_size[1] - 1;
  for (full_loop_B.b_k_f = 0; full_loop_B.b_k_f <= full_loop_B.loop_ub_b;
       full_loop_B.b_k_f++) {
    x_data[(b_size[0] + x_size[0] * full_loop_B.b_k_f) - 1] =
      full_loop_B.c_data_pt[(full_loop_B.c_size[0] * full_loop_B.b_k_f + b_size
      [0]) - 1];
  }

  full_loop_B.loop_ub_tmp_d = b_size[0] - 1;
  full_loop_B.alpha_data_tmp_p = b_size[0] - 1;
  full_loop_B.loop_ub_b = full_loop_B.c_size[1];
  for (full_loop_B.b_k_f = 0; full_loop_B.b_k_f < full_loop_B.loop_ub_b;
       full_loop_B.b_k_f++) {
    full_loop_B.b_data_cx[full_loop_B.b_k_f] = full_loop_B.c_data_pt
      [(full_loop_B.c_size[0] * full_loop_B.b_k_f + full_loop_B.loop_ub_tmp_d) -
      1] - x_data[(x_size[0] * full_loop_B.b_k_f + b_size[0]) - 1] *
      full_loop_B.alpha_data_tmp;
  }

  for (full_loop_B.b_k_f = 0; full_loop_B.b_k_f < full_loop_B.loop_ub_b;
       full_loop_B.b_k_f++) {
    x_data[(full_loop_B.alpha_data_tmp_p + x_size[0] * full_loop_B.b_k_f) - 1] =
      full_loop_B.b_data_cx[full_loop_B.b_k_f];
  }

  full_loop_B.alpha_data_tmp_l = static_cast<int32_T>(((-1.0 -
    (static_cast<real_T>(b_size[0]) - 2.0)) + 1.0) / -1.0) - 1;
  for (full_loop_B.alpha_data_tmp_p = 0; full_loop_B.alpha_data_tmp_p <=
       full_loop_B.alpha_data_tmp_l; full_loop_B.alpha_data_tmp_p++) {
    full_loop_B.alpha_data_tmp = (static_cast<real_T>(b_size[0]) - 2.0) + -
      static_cast<real_T>(full_loop_B.alpha_data_tmp_p);
    full_loop_B.delta_tmp = static_cast<int32_T>(full_loop_B.alpha_data_tmp);
    full_loop_B.loop_ub_tmp_d = full_loop_B.delta_tmp - 1;
    full_loop_B.b_data_tmp = static_cast<int32_T>(full_loop_B.alpha_data_tmp +
      1.0);
    full_loop_B.k_d = static_cast<int32_T>(full_loop_B.alpha_data_tmp + 2.0);
    full_loop_B.loop_ub_b = full_loop_B.c_size[1];
    for (full_loop_B.b_k_f = 0; full_loop_B.b_k_f < full_loop_B.loop_ub_b;
         full_loop_B.b_k_f++) {
      full_loop_B.c_data_tmp_l = x_size[0] * full_loop_B.b_k_f;
      full_loop_B.b_data_cx[full_loop_B.b_k_f] = (full_loop_B.c_data_pt
        [(full_loop_B.c_size[0] * full_loop_B.b_k_f + full_loop_B.delta_tmp) - 1]
        - x_data[(full_loop_B.c_data_tmp_l + full_loop_B.b_data_tmp) - 1] *
        full_loop_B.b_gamma_data[full_loop_B.loop_ub_tmp_d]) - x_data
        [(full_loop_B.c_data_tmp_l + full_loop_B.k_d) - 1] *
        full_loop_B.delta_data[full_loop_B.loop_ub_tmp_d];
    }

    for (full_loop_B.b_k_f = 0; full_loop_B.b_k_f < full_loop_B.loop_ub_b;
         full_loop_B.b_k_f++) {
      x_data[(full_loop_B.delta_tmp + x_size[0] * full_loop_B.b_k_f) - 1] =
        full_loop_B.b_data_cx[full_loop_B.b_k_f];
    }
  }
}

void full_loopModelClass::full_loop_eye_p(real_T b_I[16])
{
  std::memset(&b_I[0], 0, sizeof(real_T) << 4U);
  b_I[0] = 1.0;
  b_I[5] = 1.0;
  b_I[10] = 1.0;
  b_I[15] = 1.0;
}

void full_loopModelClass::full_loop_mldivide_p4(const real_T A[16], real_T B[4])
{
  int32_T c;
  std::memcpy(&full_loop_B.c_A[0], &A[0], sizeof(real_T) << 4U);
  full_loop_B.b_ipiv[0] = 1;
  full_loop_B.b_ipiv[1] = 2;
  full_loop_B.b_ipiv[2] = 3;
  for (full_loop_B.b_j_cf = 0; full_loop_B.b_j_cf < 3; full_loop_B.b_j_cf++) {
    full_loop_B.c_ob = full_loop_B.b_j_cf * 5 + 2;
    full_loop_B.jj = full_loop_B.b_j_cf * 5;
    full_loop_B.iy_m = 4 - full_loop_B.b_j_cf;
    full_loop_B.idxmax = 1;
    full_loop_B.ix_l = full_loop_B.c_ob - 2;
    full_loop_B.smax_e = std::abs(full_loop_B.c_A[full_loop_B.jj]);
    for (full_loop_B.k_e = 2; full_loop_B.k_e <= full_loop_B.iy_m;
         full_loop_B.k_e++) {
      full_loop_B.ix_l++;
      full_loop_B.s_n = std::abs(full_loop_B.c_A[full_loop_B.ix_l]);
      if (full_loop_B.s_n > full_loop_B.smax_e) {
        full_loop_B.idxmax = full_loop_B.k_e;
        full_loop_B.smax_e = full_loop_B.s_n;
      }
    }

    if (full_loop_B.c_A[(full_loop_B.c_ob + full_loop_B.idxmax) - 3] != 0.0) {
      if (full_loop_B.idxmax - 1 != 0) {
        full_loop_B.ix_l = full_loop_B.b_j_cf + full_loop_B.idxmax;
        full_loop_B.b_ipiv[full_loop_B.b_j_cf] = static_cast<int8_T>
          (full_loop_B.ix_l);
        full_loop_B.iy_m = full_loop_B.ix_l - 1;
        full_loop_B.smax_e = full_loop_B.c_A[full_loop_B.b_j_cf];
        full_loop_B.c_A[full_loop_B.b_j_cf] = full_loop_B.c_A[full_loop_B.iy_m];
        full_loop_B.c_A[full_loop_B.iy_m] = full_loop_B.smax_e;
        full_loop_B.ix_l = full_loop_B.b_j_cf + 4;
        full_loop_B.iy_m += 4;
        full_loop_B.smax_e = full_loop_B.c_A[full_loop_B.ix_l];
        full_loop_B.c_A[full_loop_B.ix_l] = full_loop_B.c_A[full_loop_B.iy_m];
        full_loop_B.c_A[full_loop_B.iy_m] = full_loop_B.smax_e;
        full_loop_B.ix_l += 4;
        full_loop_B.iy_m += 4;
        full_loop_B.smax_e = full_loop_B.c_A[full_loop_B.ix_l];
        full_loop_B.c_A[full_loop_B.ix_l] = full_loop_B.c_A[full_loop_B.iy_m];
        full_loop_B.c_A[full_loop_B.iy_m] = full_loop_B.smax_e;
        full_loop_B.ix_l += 4;
        full_loop_B.iy_m += 4;
        full_loop_B.smax_e = full_loop_B.c_A[full_loop_B.ix_l];
        full_loop_B.c_A[full_loop_B.ix_l] = full_loop_B.c_A[full_loop_B.iy_m];
        full_loop_B.c_A[full_loop_B.iy_m] = full_loop_B.smax_e;
      }

      full_loop_B.iy_m = full_loop_B.c_ob - full_loop_B.b_j_cf;
      for (full_loop_B.ix_l = full_loop_B.c_ob; full_loop_B.ix_l <=
           full_loop_B.iy_m + 2; full_loop_B.ix_l++) {
        full_loop_B.c_A[full_loop_B.ix_l - 1] /= full_loop_B.c_A[full_loop_B.jj];
      }
    }

    full_loop_B.iy_m = 2 - full_loop_B.b_j_cf;
    full_loop_B.jy_o = full_loop_B.jj + 4;
    for (full_loop_B.k_e = 0; full_loop_B.k_e <= full_loop_B.iy_m;
         full_loop_B.k_e++) {
      if (full_loop_B.c_A[full_loop_B.jy_o] != 0.0) {
        full_loop_B.smax_e = -full_loop_B.c_A[full_loop_B.jy_o];
        full_loop_B.ix_l = full_loop_B.c_ob - 1;
        c = full_loop_B.jj - full_loop_B.b_j_cf;
        for (full_loop_B.idxmax = full_loop_B.jj + 6; full_loop_B.idxmax <= c +
             8; full_loop_B.idxmax++) {
          full_loop_B.c_A[full_loop_B.idxmax - 1] +=
            full_loop_B.c_A[full_loop_B.ix_l] * full_loop_B.smax_e;
          full_loop_B.ix_l++;
        }
      }

      full_loop_B.jy_o += 4;
      full_loop_B.jj += 4;
    }
  }

  if (full_loop_B.b_ipiv[0] != 1) {
    full_loop_B.smax_e = B[0];
    full_loop_B.b_j_cf = full_loop_B.b_ipiv[0] - 1;
    B[0] = B[full_loop_B.b_j_cf];
    B[full_loop_B.b_j_cf] = full_loop_B.smax_e;
  }

  if (full_loop_B.b_ipiv[1] != 2) {
    full_loop_B.smax_e = B[1];
    full_loop_B.b_j_cf = full_loop_B.b_ipiv[1] - 1;
    B[1] = B[full_loop_B.b_j_cf];
    B[full_loop_B.b_j_cf] = full_loop_B.smax_e;
  }

  if (full_loop_B.b_ipiv[2] != 3) {
    full_loop_B.smax_e = B[2];
    full_loop_B.b_j_cf = full_loop_B.b_ipiv[2] - 1;
    B[2] = B[full_loop_B.b_j_cf];
    B[full_loop_B.b_j_cf] = full_loop_B.smax_e;
  }

  if (B[0] != 0.0) {
    for (full_loop_B.ix_l = 2; full_loop_B.ix_l < 5; full_loop_B.ix_l++) {
      B[full_loop_B.ix_l - 1] -= full_loop_B.c_A[full_loop_B.ix_l + -1] * B[0];
    }
  }

  if (B[1] != 0.0) {
    for (full_loop_B.ix_l = 3; full_loop_B.ix_l < 5; full_loop_B.ix_l++) {
      B[full_loop_B.ix_l - 1] -= full_loop_B.c_A[full_loop_B.ix_l + 3] * B[1];
    }
  }

  if (B[2] != 0.0) {
    for (full_loop_B.ix_l = 4; full_loop_B.ix_l < 5; full_loop_B.ix_l++) {
      B[3] -= B[2] * full_loop_B.c_A[11];
    }
  }

  if (B[3] != 0.0) {
    B[3] /= full_loop_B.c_A[15];
    for (full_loop_B.b_j_cf = 0; full_loop_B.b_j_cf < 3; full_loop_B.b_j_cf++) {
      B[full_loop_B.b_j_cf] -= full_loop_B.c_A[full_loop_B.b_j_cf + 12] * B[3];
    }
  }

  if (B[2] != 0.0) {
    B[2] /= full_loop_B.c_A[10];
    for (full_loop_B.b_j_cf = 0; full_loop_B.b_j_cf < 2; full_loop_B.b_j_cf++) {
      B[full_loop_B.b_j_cf] -= full_loop_B.c_A[full_loop_B.b_j_cf + 8] * B[2];
    }
  }

  if (B[1] != 0.0) {
    B[1] /= full_loop_B.c_A[5];
    for (full_loop_B.b_j_cf = 0; full_loop_B.b_j_cf < 1; full_loop_B.b_j_cf++) {
      B[0] -= B[1] * full_loop_B.c_A[4];
    }
  }

  if (B[0] != 0.0) {
    B[0] /= full_loop_B.c_A[0];
  }
}

void full_loopModelClass::full_loop_cycsympentdisolve_p(const real_T d_data[],
  const real_T e_data[], const real_T f_data[], const real_T b_data[], const
  int32_T *b_size, real_T x_data[], int32_T *x_size)
{
  boolean_T empty_non_axis_sizes;
  full_loop_B.loop_ub_tmp_e = (*b_size << 2) - 1;
  if (0 <= full_loop_B.loop_ub_tmp_e) {
    std::memset(&full_loop_B.u_data_f[0], 0, (full_loop_B.loop_ub_tmp_e + 1) *
                sizeof(real_T));
  }

  full_loop_B.u_data_f[0] = 1.0;
  full_loop_B.u_data_f[*b_size + 1] = 1.0;
  full_loop_B.m_k = *b_size << 1;
  full_loop_B.u_data_f[(*b_size + full_loop_B.m_k) - 2] = 1.0;
  full_loop_B.u_data_f[(*b_size + *b_size * 3) - 1] = 1.0;
  if (*b_size != 0) {
    full_loop_B.inner_a = *b_size;
  } else if (*b_size != 0) {
    full_loop_B.inner_a = *b_size;
  } else {
    full_loop_B.inner_a = 0;
  }

  empty_non_axis_sizes = (full_loop_B.inner_a == 0);
  if (empty_non_axis_sizes || (*b_size != 0)) {
    full_loop_B.result = 4;
  } else {
    full_loop_B.result = 0;
  }

  if (empty_non_axis_sizes || (*b_size != 0)) {
    full_loop_B.inner_g = 1;
  } else {
    full_loop_B.inner_g = 0;
  }

  full_loop_B.result_size[0] = full_loop_B.inner_a;
  full_loop_B.result_size[1] = full_loop_B.result + full_loop_B.inner_g;
  full_loop_B.result *= full_loop_B.inner_a;
  full_loop_B.inner_g = full_loop_B.inner_a * full_loop_B.inner_g - 1;
  if (0 <= full_loop_B.result - 1) {
    std::memcpy(&full_loop_B.result_data_c[0], &full_loop_B.u_data_f[0],
                full_loop_B.result * sizeof(real_T));
  }

  for (full_loop_B.inner_a = 0; full_loop_B.inner_a <= full_loop_B.inner_g;
       full_loop_B.inner_a++) {
    full_loop_B.result_data_c[full_loop_B.inner_a + full_loop_B.result] =
      b_data[full_loop_B.inner_a];
  }

  full_loop_sympentdisolve_p4(d_data, e_data, f_data, full_loop_B.result_data_c,
    full_loop_B.result_size, full_loop_B.zy_data, full_loop_B.zy_size);
  full_loop_B.result = full_loop_B.zy_size[0];
  for (full_loop_B.inner_a = 0; full_loop_B.inner_a < full_loop_B.result;
       full_loop_B.inner_a++) {
    full_loop_B.u_data_f[full_loop_B.inner_a] =
      full_loop_B.zy_data[full_loop_B.inner_a];
    full_loop_B.u_data_f[full_loop_B.inner_a + full_loop_B.result] =
      full_loop_B.zy_data[full_loop_B.inner_a + full_loop_B.zy_size[0]];
  }

  for (full_loop_B.inner_a = 0; full_loop_B.inner_a < full_loop_B.result;
       full_loop_B.inner_a++) {
    full_loop_B.u_data_f[full_loop_B.inner_a + (full_loop_B.result << 1)] =
      full_loop_B.zy_data[(full_loop_B.zy_size[0] << 1) + full_loop_B.inner_a];
  }

  for (full_loop_B.inner_a = 0; full_loop_B.inner_a < full_loop_B.result;
       full_loop_B.inner_a++) {
    full_loop_B.u_data_f[full_loop_B.inner_a + full_loop_B.result * 3] =
      full_loop_B.zy_data[full_loop_B.zy_size[0] * 3 + full_loop_B.inner_a];
  }

  full_loop_B.result = *b_size;
  if (0 <= full_loop_B.loop_ub_tmp_e) {
    std::memset(&full_loop_B.v_data_i[0], 0, (full_loop_B.loop_ub_tmp_e + 1) *
                sizeof(real_T));
  }

  full_loop_B.bkj_c = f_data[*b_size - 2];
  full_loop_B.v_data_i[*b_size - 2] = full_loop_B.bkj_c;
  full_loop_B.v_data_tmp = e_data[*b_size - 1];
  full_loop_B.v_data_i[*b_size - 1] = full_loop_B.v_data_tmp;
  full_loop_B.v_data_tmp_l = f_data[*b_size - 1];
  full_loop_B.v_data_i[(*b_size + *b_size) - 1] = full_loop_B.v_data_tmp_l;
  full_loop_B.v_data_i[full_loop_B.m_k] = full_loop_B.bkj_c;
  full_loop_B.v_data_i[*b_size * 3] = full_loop_B.v_data_tmp;
  full_loop_B.v_data_i[*b_size * 3 + 1] = full_loop_B.v_data_tmp_l;
  full_loop_B.inner_a = *b_size - 1;
  full_loop_B.inner_g = *b_size - 1;
  for (full_loop_B.loop_ub_tmp_e = 0; full_loop_B.loop_ub_tmp_e < 4;
       full_loop_B.loop_ub_tmp_e++) {
    full_loop_B.coffset_l = (full_loop_B.loop_ub_tmp_e << 2) - 1;
    full_loop_B.boffset_e = full_loop_B.loop_ub_tmp_e * full_loop_B.zy_size[0] -
      1;
    full_loop_B.y_m[full_loop_B.coffset_l + 1] = 0.0;
    full_loop_B.y_m[full_loop_B.coffset_l + 2] = 0.0;
    full_loop_B.y_m[full_loop_B.coffset_l + 3] = 0.0;
    full_loop_B.y_m[full_loop_B.coffset_l + 4] = 0.0;
    for (full_loop_B.m_k = 0; full_loop_B.m_k <= full_loop_B.inner_a;
         full_loop_B.m_k++) {
      full_loop_B.bkj_c = full_loop_B.u_data_f[(full_loop_B.boffset_e +
        full_loop_B.m_k) + 1];
      full_loop_B.y_m[full_loop_B.coffset_l + 1] +=
        full_loop_B.v_data_i[full_loop_B.m_k] * full_loop_B.bkj_c;
      full_loop_B.y_m[full_loop_B.coffset_l + 2] +=
        full_loop_B.v_data_i[full_loop_B.result + full_loop_B.m_k] *
        full_loop_B.bkj_c;
      full_loop_B.y_m[full_loop_B.coffset_l + 3] += full_loop_B.v_data_i
        [(full_loop_B.result << 1) + full_loop_B.m_k] * full_loop_B.bkj_c;
      full_loop_B.y_m[full_loop_B.coffset_l + 4] += full_loop_B.v_data_i[3 *
        full_loop_B.result + full_loop_B.m_k] * full_loop_B.bkj_c;
    }

    full_loop_B.y_g[full_loop_B.loop_ub_tmp_e] = 0.0;
  }

  for (full_loop_B.m_k = 0; full_loop_B.m_k <= full_loop_B.inner_g;
       full_loop_B.m_k++) {
    full_loop_B.bkj_c = full_loop_B.zy_data[(full_loop_B.zy_size[0] << 2) +
      full_loop_B.m_k];
    full_loop_B.y_g[0] += full_loop_B.v_data_i[full_loop_B.m_k] *
      full_loop_B.bkj_c;
    full_loop_B.y_g[1] += full_loop_B.v_data_i[full_loop_B.result +
      full_loop_B.m_k] * full_loop_B.bkj_c;
    full_loop_B.y_g[2] += full_loop_B.v_data_i[(full_loop_B.result << 1) +
      full_loop_B.m_k] * full_loop_B.bkj_c;
    full_loop_B.y_g[3] += full_loop_B.v_data_i[3 * full_loop_B.result +
      full_loop_B.m_k] * full_loop_B.bkj_c;
  }

  full_loop_eye_p(full_loop_B.dv20);
  for (full_loop_B.inner_a = 0; full_loop_B.inner_a < 16; full_loop_B.inner_a++)
  {
    full_loop_B.dv21[full_loop_B.inner_a] = full_loop_B.dv20[full_loop_B.inner_a]
      + full_loop_B.y_m[full_loop_B.inner_a];
  }

  full_loop_mldivide_p4(full_loop_B.dv21, full_loop_B.y_g);
  full_loop_B.m_k = full_loop_B.zy_size[0] - 1;
  for (full_loop_B.loop_ub_tmp_e = 0; full_loop_B.loop_ub_tmp_e <=
       full_loop_B.m_k; full_loop_B.loop_ub_tmp_e++) {
    full_loop_B.c_data_d[full_loop_B.loop_ub_tmp_e] =
      ((full_loop_B.u_data_f[full_loop_B.zy_size[0] + full_loop_B.loop_ub_tmp_e]
        * full_loop_B.y_g[1] + full_loop_B.u_data_f[full_loop_B.loop_ub_tmp_e] *
        full_loop_B.y_g[0]) + full_loop_B.u_data_f[(full_loop_B.zy_size[0] << 1)
       + full_loop_B.loop_ub_tmp_e] * full_loop_B.y_g[2]) +
      full_loop_B.u_data_f[3 * full_loop_B.zy_size[0] +
      full_loop_B.loop_ub_tmp_e] * full_loop_B.y_g[3];
  }

  full_loop_B.result = full_loop_B.zy_size[0];
  *x_size = full_loop_B.zy_size[0];
  for (full_loop_B.inner_a = 0; full_loop_B.inner_a < full_loop_B.result;
       full_loop_B.inner_a++) {
    x_data[full_loop_B.inner_a] = full_loop_B.zy_data[(full_loop_B.zy_size[0] <<
      2) + full_loop_B.inner_a] - full_loop_B.c_data_d[full_loop_B.inner_a];
  }
}

void full_loopModelClass::full_loop_sympentdisolve_p(const real_T d_data[],
  const real_T e_data[], const real_T f_data[], const real_T b_data[], const
  int32_T *b_size, real_T x_data[], int32_T *x_size)
{
  int32_T loop_ub;
  int32_T csz_idx_0;
  *x_size = *b_size;
  if (0 <= *b_size - 1) {
    std::memset(&x_data[0], 0, *b_size * sizeof(real_T));
  }

  if (0 <= *b_size - 1) {
    std::memset(&full_loop_B.alpha_data_h[0], 0, *b_size * sizeof(real_T));
  }

  loop_ub = *b_size - 1;
  if (0 <= loop_ub - 1) {
    std::memset(&full_loop_B.b_gamma_data_j[0], 0, loop_ub * sizeof(real_T));
  }

  loop_ub = *b_size - 2;
  if (0 <= loop_ub - 1) {
    std::memset(&full_loop_B.delta_data_g[0], 0, loop_ub * sizeof(real_T));
  }

  full_loop_B.alpha_data_h[0] = d_data[0];
  full_loop_B.b_gamma_data_j[0] = e_data[0] / d_data[0];
  full_loop_B.delta_data_g[0] = f_data[0] / d_data[0];
  full_loop_B.alpha_data_h[1] = d_data[1] - e_data[0] *
    full_loop_B.b_gamma_data_j[0];
  full_loop_B.b_gamma_data_j[1] = (e_data[1] - f_data[0] *
    full_loop_B.b_gamma_data_j[0]) / full_loop_B.alpha_data_h[1];
  full_loop_B.delta_data_g[1] = f_data[1] / full_loop_B.alpha_data_h[1];
  csz_idx_0 = static_cast<int32_T>((static_cast<real_T>(*b_size) - 2.0) + -2.0)
    - 1;
  for (loop_ub = 0; loop_ub <= csz_idx_0; loop_ub++) {
    full_loop_B.acoef_a = static_cast<int32_T>((static_cast<real_T>(loop_ub) +
      3.0) - 2.0) - 1;
    full_loop_B.bcoef_k = static_cast<int32_T>((static_cast<real_T>(loop_ub) +
      3.0) - 1.0) - 1;
    full_loop_B.alpha_data_h[loop_ub + 2] = (d_data[loop_ub + 2] -
      f_data[full_loop_B.acoef_a] * full_loop_B.delta_data_g[full_loop_B.acoef_a])
      - full_loop_B.b_gamma_data_j[full_loop_B.bcoef_k] *
      full_loop_B.b_gamma_data_j[full_loop_B.bcoef_k] *
      full_loop_B.alpha_data_h[full_loop_B.bcoef_k];
    full_loop_B.b_gamma_data_tmp_m = full_loop_B.alpha_data_h[loop_ub + 2];
    full_loop_B.b_gamma_data_j[loop_ub + 2] = (e_data[loop_ub + 2] -
      f_data[full_loop_B.bcoef_k] *
      full_loop_B.b_gamma_data_j[full_loop_B.bcoef_k]) /
      full_loop_B.b_gamma_data_tmp_m;
    full_loop_B.delta_data_g[loop_ub + 2] = f_data[loop_ub + 2] /
      full_loop_B.b_gamma_data_tmp_m;
  }

  full_loop_B.alpha_data_tmp_d = full_loop_B.b_gamma_data_j[*b_size - 3];
  full_loop_B.alpha_data_h[*b_size - 2] = (d_data[*b_size - 2] - f_data[*b_size
    - 4] * full_loop_B.delta_data_g[*b_size - 4]) - full_loop_B.alpha_data_tmp_d
    * full_loop_B.alpha_data_tmp_d * full_loop_B.alpha_data_h[*b_size - 3];
  full_loop_B.b_gamma_data_tmp_m = f_data[*b_size - 3];
  full_loop_B.b_gamma_data_tmp_k = full_loop_B.alpha_data_h[*b_size - 2];
  full_loop_B.b_gamma_data_j[*b_size - 2] = (e_data[*b_size - 2] -
    full_loop_B.b_gamma_data_tmp_m * full_loop_B.alpha_data_tmp_d) /
    full_loop_B.b_gamma_data_tmp_k;
  full_loop_B.alpha_data_tmp_d = full_loop_B.b_gamma_data_j[*b_size - 2];
  full_loop_B.alpha_data_h[*b_size - 1] = (d_data[*b_size - 1] -
    full_loop_B.b_gamma_data_tmp_m * full_loop_B.delta_data_g[*b_size - 3]) -
    full_loop_B.alpha_data_tmp_d * full_loop_B.alpha_data_tmp_d *
    full_loop_B.b_gamma_data_tmp_k;
  if (0 <= *b_size - 1) {
    std::memset(&full_loop_B.z_data_e[0], 0, *b_size * sizeof(real_T));
  }

  full_loop_B.z_data_e[0] = b_data[0];
  full_loop_B.z_data_e[1] = b_data[1] - full_loop_B.b_gamma_data_j[0] * b_data[0];
  csz_idx_0 = *b_size - 3;
  for (loop_ub = 0; loop_ub <= csz_idx_0; loop_ub++) {
    full_loop_B.acoef_a = static_cast<int32_T>((static_cast<real_T>(loop_ub) +
      3.0) - 1.0) - 1;
    full_loop_B.bcoef_k = static_cast<int32_T>((static_cast<real_T>(loop_ub) +
      3.0) - 2.0) - 1;
    full_loop_B.z_data_e[loop_ub + 2] = (b_data[loop_ub + 2] -
      full_loop_B.b_gamma_data_j[full_loop_B.acoef_a] *
      full_loop_B.z_data_e[full_loop_B.acoef_a]) -
      full_loop_B.delta_data_g[full_loop_B.bcoef_k] *
      full_loop_B.z_data_e[full_loop_B.bcoef_k];
  }

  if (*b_size == 1) {
    csz_idx_0 = *b_size;
  } else {
    csz_idx_0 = *b_size;
  }

  if (csz_idx_0 != 0) {
    full_loop_B.acoef_a = (*b_size != 1);
    full_loop_B.bcoef_k = (*b_size != 1);
    for (loop_ub = 0; loop_ub < csz_idx_0; loop_ub++) {
      full_loop_B.c_data_hn[loop_ub] = full_loop_B.z_data_e[full_loop_B.acoef_a *
        loop_ub] / full_loop_B.alpha_data_h[full_loop_B.bcoef_k * loop_ub];
    }
  }

  x_data[*b_size - 1] = full_loop_B.c_data_hn[*b_size - 1];
  x_data[*b_size - 2] = full_loop_B.c_data_hn[*b_size - 2] -
    full_loop_B.alpha_data_tmp_d * x_data[*b_size - 1];
  csz_idx_0 = static_cast<int32_T>(((-1.0 - (static_cast<real_T>(*b_size) - 2.0))
    + 1.0) / -1.0) - 1;
  for (loop_ub = 0; loop_ub <= csz_idx_0; loop_ub++) {
    full_loop_B.b_gamma_data_tmp_m = (static_cast<real_T>(*b_size) - 2.0) + -
      static_cast<real_T>(loop_ub);
    full_loop_B.acoef_a = static_cast<int32_T>(full_loop_B.b_gamma_data_tmp_m) -
      1;
    x_data[full_loop_B.acoef_a] = (full_loop_B.c_data_hn[full_loop_B.acoef_a] -
      x_data[static_cast<int32_T>(full_loop_B.b_gamma_data_tmp_m + 1.0) - 1] *
      full_loop_B.b_gamma_data_j[full_loop_B.acoef_a]) - x_data
      [static_cast<int32_T>(full_loop_B.b_gamma_data_tmp_m + 2.0) - 1] *
      full_loop_B.delta_data_g[full_loop_B.acoef_a];
  }
}

void full_loopModelClass::full_loop_AccumArrayScalarVal(const real_T subs_data[],
  const int32_T subs_size[2], real_T val, const int32_T sz[2], real_T A_data[],
  int32_T A_size[2])
{
  int32_T counts_data_tmp;
  int32_T loop_ub_tmp;
  full_loop_B.nsubs_g = subs_size[0] - 1;
  loop_ub_tmp = sz[0] * sz[1] - 1;
  if (0 <= loop_ub_tmp) {
    std::memset(&full_loop_B.counts_data[0], 0, (loop_ub_tmp + 1) * sizeof
                (int32_T));
  }

  for (full_loop_B.b_k_nl = 0; full_loop_B.b_k_nl <= full_loop_B.nsubs_g;
       full_loop_B.b_k_nl++) {
    counts_data_tmp = ((static_cast<int32_T>(subs_data[full_loop_B.b_k_nl +
      subs_size[0]]) - 1) * sz[0] + static_cast<int32_T>
                       (subs_data[full_loop_B.b_k_nl])) - 1;
    full_loop_B.counts_data[counts_data_tmp]++;
  }

  A_size[0] = sz[0];
  A_size[1] = sz[1];
  for (full_loop_B.b_k_nl = 0; full_loop_B.b_k_nl <= loop_ub_tmp;
       full_loop_B.b_k_nl++) {
    if (full_loop_B.counts_data[full_loop_B.b_k_nl] == 0) {
      A_data[full_loop_B.b_k_nl] = 0.0;
    } else {
      A_data[full_loop_B.b_k_nl] = static_cast<real_T>
        (full_loop_B.counts_data[full_loop_B.b_k_nl]) * val;
    }
  }
}

void full_loopModelClass::full_loop_accumarray_p(const real_T subs_data[], const
  int32_T subs_size[2], const real_T val_data[], const int32_T *val_size, const
  real_T sz[2], real_T A_data[], int32_T A_size[2])
{
  full_loop_B.SZ[0] = static_cast<int32_T>(sz[0]);
  full_loop_B.SZ[1] = static_cast<int32_T>(sz[1]);
  if (*val_size == 1) {
    full_loop_AccumArrayScalarVal(subs_data, subs_size, val_data[0],
      full_loop_B.SZ, A_data, A_size);
  } else {
    full_loop_B.nsubs = subs_size[0] - 1;
    full_loop_B.loop_ub_tmp_mi = full_loop_B.SZ[0] * full_loop_B.SZ[1] - 1;
    for (full_loop_B.A_data_tmp = 0; full_loop_B.A_data_tmp <=
         full_loop_B.loop_ub_tmp_mi; full_loop_B.A_data_tmp++) {
      full_loop_B.filled_data[full_loop_B.A_data_tmp] = true;
    }

    A_size[0] = full_loop_B.SZ[0];
    A_size[1] = full_loop_B.SZ[1];
    if (0 <= full_loop_B.loop_ub_tmp_mi) {
      std::memset(&A_data[0], 0, (full_loop_B.loop_ub_tmp_mi + 1) * sizeof
                  (real_T));
    }

    for (full_loop_B.loop_ub_tmp_mi = 0; full_loop_B.loop_ub_tmp_mi <=
         full_loop_B.nsubs; full_loop_B.loop_ub_tmp_mi++) {
      full_loop_B.s_idx_1 = subs_data[full_loop_B.loop_ub_tmp_mi + subs_size[0]];
      full_loop_B.A_data_tmp = static_cast<int32_T>(full_loop_B.s_idx_1) - 1;
      full_loop_B.i12 = static_cast<int32_T>
        (subs_data[full_loop_B.loop_ub_tmp_mi]);
      full_loop_B.i13 = (full_loop_B.A_data_tmp * full_loop_B.SZ[0] +
                         full_loop_B.i12) - 1;
      if (full_loop_B.filled_data[full_loop_B.i13]) {
        full_loop_B.filled_data[full_loop_B.i13] = false;
        A_data[(static_cast<int32_T>(subs_data[full_loop_B.loop_ub_tmp_mi]) +
                A_size[0] * (static_cast<int32_T>(full_loop_B.s_idx_1) - 1)) - 1]
          = val_data[full_loop_B.loop_ub_tmp_mi];
      } else {
        full_loop_B.A_data_tmp = (full_loop_B.A_data_tmp * A_size[0] +
          full_loop_B.i12) - 1;
        A_data[full_loop_B.A_data_tmp] += val_data[full_loop_B.loop_ub_tmp_mi];
      }
    }
  }
}

void full_loopModelClass::full_loop_diag_p(const real_T v_data[], const int32_T
  v_size[2], real_T d_data[], int32_T *d_size)
{
  int32_T dlen;
  int32_T k;
  if ((v_size[0] == 1) && (v_size[1] == 1)) {
    *d_size = 1;
    d_data[0] = v_data[0];
  } else if (0 > v_size[1]) {
    *d_size = 0;
  } else {
    if (0 < v_size[1]) {
      if (v_size[0] < v_size[1]) {
        dlen = v_size[0];
      } else {
        dlen = v_size[1];
      }
    } else {
      dlen = 0;
    }

    *d_size = dlen;
    for (k = 0; k < dlen; k++) {
      d_data[k] = v_data[v_size[0] * k + k];
    }
  }
}

void full_loopModelClass::full_loop_diag_p4(const real_T v_data[], const int32_T
  *v_size, real_T d_data[], int32_T d_size[2])
{
  int32_T nv;
  int32_T loop_ub;
  nv = *v_size - 1;
  d_size[0] = *v_size;
  d_size[1] = *v_size;
  loop_ub = *v_size * *v_size - 1;
  if (0 <= loop_ub) {
    std::memset(&d_data[0], 0, (loop_ub + 1) * sizeof(real_T));
  }

  for (loop_ub = 0; loop_ub <= nv; loop_ub++) {
    d_data[loop_ub + *v_size * loop_ub] = v_data[loop_ub];
  }
}

real_T full_loopModelClass::full_loop_xnrm2_p43(int32_T n, const real_T x_data[],
  int32_T ix0)
{
  real_T y;
  int32_T kend;
  int32_T k;
  y = 0.0;
  if (n >= 1) {
    if (n == 1) {
      y = std::abs(x_data[ix0 - 1]);
    } else {
      full_loop_B.scale_cf = 3.3121686421112381E-170;
      kend = ix0 + n;
      for (k = ix0; k < kend; k++) {
        full_loop_B.absxk_oz = std::abs(x_data[k - 1]);
        if (full_loop_B.absxk_oz > full_loop_B.scale_cf) {
          full_loop_B.t_a = full_loop_B.scale_cf / full_loop_B.absxk_oz;
          y = y * full_loop_B.t_a * full_loop_B.t_a + 1.0;
          full_loop_B.scale_cf = full_loop_B.absxk_oz;
        } else {
          full_loop_B.t_a = full_loop_B.absxk_oz / full_loop_B.scale_cf;
          y += full_loop_B.t_a * full_loop_B.t_a;
        }
      }

      y = full_loop_B.scale_cf * std::sqrt(y);
    }
  }

  return y;
}

int32_T full_loopModelClass::full_loop_ixamax_p(int32_T n, const real_T x_data[],
  int32_T ix0)
{
  int32_T idxmax;
  int32_T ix;
  real_T smax;
  real_T s;
  int32_T k;
  if (n < 1) {
    idxmax = 0;
  } else {
    idxmax = 1;
    if (n > 1) {
      ix = ix0 - 1;
      smax = std::abs(x_data[ix0 - 1]);
      for (k = 2; k <= n; k++) {
        ix++;
        s = std::abs(x_data[ix]);
        if (s > smax) {
          idxmax = k;
          smax = s;
        }
      }
    }
  }

  return idxmax;
}

void full_loopModelClass::full_loop_xswap_p(int32_T n, const real_T x_data[],
  const int32_T x_size[2], int32_T ix0, int32_T iy0, real_T b_x_data[], int32_T
  b_x_size[2])
{
  int32_T k;
  int32_T loop_ub_tmp;
  loop_ub_tmp = x_size[0] * x_size[1] - 1;
  if (0 <= loop_ub_tmp) {
    std::memcpy(&full_loop_B.c_x_data_i[0], &x_data[0], (loop_ub_tmp + 1) *
                sizeof(real_T));
  }

  full_loop_B.ix_n = ix0 - 1;
  full_loop_B.iy_j = iy0 - 1;
  for (k = 0; k < n; k++) {
    full_loop_B.temp_h = full_loop_B.c_x_data_i[full_loop_B.ix_n];
    full_loop_B.c_x_data_i[full_loop_B.ix_n] =
      full_loop_B.c_x_data_i[full_loop_B.iy_j];
    full_loop_B.c_x_data_i[full_loop_B.iy_j] = full_loop_B.temp_h;
    full_loop_B.ix_n++;
    full_loop_B.iy_j++;
  }

  b_x_size[0] = x_size[0];
  b_x_size[1] = x_size[1];
  if (0 <= loop_ub_tmp) {
    std::memcpy(&b_x_data[0], &full_loop_B.c_x_data_i[0], (loop_ub_tmp + 1) *
                sizeof(real_T));
  }
}

void full_loopModelClass::full_loop_xzlarfg_p43(int32_T n, real_T alpha1, const
  real_T x_data[], const int32_T x_size[2], int32_T ix0, real_T *b_alpha1,
  real_T b_x_data[], int32_T b_x_size[2], real_T *tau)
{
  b_x_size[0] = x_size[0];
  b_x_size[1] = x_size[1];
  full_loop_B.loop_ub_tmp_i = x_size[0] * x_size[1] - 1;
  if (0 <= full_loop_B.loop_ub_tmp_i) {
    std::memcpy(&b_x_data[0], &x_data[0], (full_loop_B.loop_ub_tmp_i + 1) *
                sizeof(real_T));
  }

  *b_alpha1 = alpha1;
  *tau = 0.0;
  if (n > 0) {
    full_loop_B.xnorm_o = full_loop_xnrm2_p43(n - 1, x_data, ix0);
    if (full_loop_B.xnorm_o != 0.0) {
      full_loop_B.xnorm_o = full_loop_rt_hypotd_snf(alpha1, full_loop_B.xnorm_o);
      if (alpha1 >= 0.0) {
        full_loop_B.xnorm_o = -full_loop_B.xnorm_o;
      }

      if (std::abs(full_loop_B.xnorm_o) < 1.0020841800044864E-292) {
        full_loop_B.knt_c = -1;
        full_loop_B.b_tmp_k = ix0 + n;
        do {
          full_loop_B.knt_c++;
          for (full_loop_B.loop_ub_tmp_i = ix0; full_loop_B.loop_ub_tmp_i <=
               full_loop_B.b_tmp_k - 2; full_loop_B.loop_ub_tmp_i++) {
            b_x_data[full_loop_B.loop_ub_tmp_i - 1] *= 9.9792015476736E+291;
          }

          full_loop_B.xnorm_o *= 9.9792015476736E+291;
          *b_alpha1 *= 9.9792015476736E+291;
        } while (!(std::abs(full_loop_B.xnorm_o) >= 1.0020841800044864E-292));

        full_loop_B.xnorm_o = full_loop_rt_hypotd_snf(*b_alpha1,
          full_loop_xnrm2_p43(n - 1, b_x_data, ix0));
        if (*b_alpha1 >= 0.0) {
          full_loop_B.xnorm_o = -full_loop_B.xnorm_o;
        }

        *tau = (full_loop_B.xnorm_o - *b_alpha1) / full_loop_B.xnorm_o;
        *b_alpha1 = 1.0 / (*b_alpha1 - full_loop_B.xnorm_o);
        for (full_loop_B.loop_ub_tmp_i = ix0; full_loop_B.loop_ub_tmp_i <=
             full_loop_B.b_tmp_k - 2; full_loop_B.loop_ub_tmp_i++) {
          b_x_data[full_loop_B.loop_ub_tmp_i - 1] *= *b_alpha1;
        }

        for (full_loop_B.loop_ub_tmp_i = 0; full_loop_B.loop_ub_tmp_i <=
             full_loop_B.knt_c; full_loop_B.loop_ub_tmp_i++) {
          full_loop_B.xnorm_o *= 1.0020841800044864E-292;
        }

        *b_alpha1 = full_loop_B.xnorm_o;
      } else {
        *tau = (full_loop_B.xnorm_o - alpha1) / full_loop_B.xnorm_o;
        *b_alpha1 = 1.0 / (alpha1 - full_loop_B.xnorm_o);
        b_x_size[0] = x_size[0];
        b_x_size[1] = x_size[1];
        if (0 <= full_loop_B.loop_ub_tmp_i) {
          std::memcpy(&b_x_data[0], &x_data[0], (full_loop_B.loop_ub_tmp_i + 1) *
                      sizeof(real_T));
        }

        full_loop_B.knt_c = ix0 + n;
        for (full_loop_B.loop_ub_tmp_i = ix0; full_loop_B.loop_ub_tmp_i <=
             full_loop_B.knt_c - 2; full_loop_B.loop_ub_tmp_i++) {
          b_x_data[full_loop_B.loop_ub_tmp_i - 1] *= *b_alpha1;
        }

        *b_alpha1 = full_loop_B.xnorm_o;
      }
    }
  }
}

void full_loopModelClass::full_loop_ilazlc_p(int32_T m, int32_T n, const real_T
  A_data[], const int32_T A_size[2], int32_T ia0, int32_T lda, int32_T *j,
  real_T b_A_data[], int32_T b_A_size[2])
{
  int32_T coltop;
  int32_T ia;
  int32_T exitg1;
  boolean_T exitg2;
  b_A_size[0] = A_size[0];
  b_A_size[1] = A_size[1];
  coltop = A_size[0] * A_size[1] - 1;
  if (0 <= coltop) {
    std::memcpy(&b_A_data[0], &A_data[0], (coltop + 1) * sizeof(real_T));
  }

  *j = n;
  exitg2 = false;
  while ((!exitg2) && (*j > 0)) {
    coltop = (*j - 1) * lda + ia0;
    ia = coltop;
    do {
      exitg1 = 0;
      if (ia <= (coltop + m) - 1) {
        if (A_data[ia - 1] != 0.0) {
          exitg1 = 1;
        } else {
          ia++;
        }
      } else {
        (*j)--;
        exitg1 = 2;
      }
    } while (exitg1 == 0);

    if (exitg1 == 1) {
      exitg2 = true;
    }
  }
}

void full_loopModelClass::full_loop_xgemv_p(int32_T m, int32_T n, const real_T
  A_data[], int32_T ia0, int32_T lda, const real_T x_data[], int32_T ix0, const
  real_T y_data[], const int32_T *y_size, real_T b_y_data[], int32_T *b_y_size)
{
  int32_T loop_ub;
  if (0 <= *y_size - 1) {
    std::memcpy(&full_loop_B.b_y_data[0], &y_data[0], *y_size * sizeof(real_T));
  }

  if ((m == 0) || (n == 0)) {
  } else {
    if (0 <= n - 1) {
      std::memset(&full_loop_B.b_y_data[0], 0, n * sizeof(real_T));
    }

    full_loop_B.iy_o = 0;
    full_loop_B.b_mr = (n - 1) * lda + ia0;
    for (loop_ub = ia0; lda < 0 ? loop_ub >= full_loop_B.b_mr : loop_ub <=
         full_loop_B.b_mr; loop_ub += lda) {
      full_loop_B.ix_in = ix0 - 1;
      full_loop_B.c_fv = 0.0;
      full_loop_B.d_a5 = loop_ub + m;
      for (full_loop_B.ia_c = loop_ub; full_loop_B.ia_c < full_loop_B.d_a5;
           full_loop_B.ia_c++) {
        full_loop_B.c_fv += A_data[full_loop_B.ia_c - 1] *
          x_data[full_loop_B.ix_in];
        full_loop_B.ix_in++;
      }

      full_loop_B.b_y_data[full_loop_B.iy_o] += full_loop_B.c_fv;
      full_loop_B.iy_o++;
    }
  }

  *b_y_size = *y_size;
  if (0 <= *y_size - 1) {
    std::memcpy(&b_y_data[0], &full_loop_B.b_y_data[0], *y_size * sizeof(real_T));
  }
}

void full_loopModelClass::full_loop_xgerc_p(int32_T m, int32_T n, real_T alpha1,
  int32_T ix0, const real_T y_data[], const real_T A_data[], const int32_T
  A_size[2], int32_T ia0, int32_T lda, real_T b_A_data[], int32_T b_A_size[2])
{
  int32_T ijA;
  int32_T loop_ub_tmp;
  loop_ub_tmp = A_size[0] * A_size[1] - 1;
  if (0 <= loop_ub_tmp) {
    std::memcpy(&full_loop_B.b_A_data_i[0], &A_data[0], (loop_ub_tmp + 1) *
                sizeof(real_T));
  }

  if (!(alpha1 == 0.0)) {
    full_loop_B.jA_n = ia0;
    full_loop_B.jy_l = 0;
    for (full_loop_B.j_ln = 0; full_loop_B.j_ln < n; full_loop_B.j_ln++) {
      if (y_data[full_loop_B.jy_l] != 0.0) {
        full_loop_B.temp_o = y_data[full_loop_B.jy_l] * alpha1;
        full_loop_B.ix_po = ix0 - 1;
        full_loop_B.c_pg = (m + full_loop_B.jA_n) - 1;
        for (ijA = full_loop_B.jA_n; ijA <= full_loop_B.c_pg; ijA++) {
          full_loop_B.b_A_data_i[ijA - 1] +=
            full_loop_B.b_A_data_i[full_loop_B.ix_po] * full_loop_B.temp_o;
          full_loop_B.ix_po++;
        }
      }

      full_loop_B.jy_l++;
      full_loop_B.jA_n += lda;
    }
  }

  b_A_size[0] = A_size[0];
  b_A_size[1] = A_size[1];
  if (0 <= loop_ub_tmp) {
    std::memcpy(&b_A_data[0], &full_loop_B.b_A_data_i[0], (loop_ub_tmp + 1) *
                sizeof(real_T));
  }
}

void full_loopModelClass::full_loop_xzlarf_p43riobt(int32_T m, int32_T n,
  int32_T iv0, real_T tau, const real_T C_data[], const int32_T C_size[2],
  int32_T ic0, int32_T ldc, real_T work_data[], int32_T *work_size, real_T
  b_C_data[], int32_T b_C_size[2])
{
  b_C_size[0] = C_size[0];
  b_C_size[1] = C_size[1];
  full_loop_B.i_oo = C_size[0] * C_size[1] - 1;
  if (0 <= full_loop_B.i_oo) {
    std::memcpy(&b_C_data[0], &C_data[0], (full_loop_B.i_oo + 1) * sizeof(real_T));
  }

  if (tau != 0.0) {
    full_loop_B.lastv = m;
    full_loop_B.i_oo = (iv0 + m) - 2;
    while ((full_loop_B.lastv > 0) && (C_data[full_loop_B.i_oo] == 0.0)) {
      full_loop_B.lastv--;
      full_loop_B.i_oo--;
    }

    full_loop_ilazlc_p(full_loop_B.lastv, n, C_data, C_size, ic0, ldc,
                       &full_loop_B.lastc, full_loop_B.d_C_data,
                       full_loop_B.d_C_size);
    b_C_size[0] = full_loop_B.d_C_size[0];
    b_C_size[1] = full_loop_B.d_C_size[1];
    full_loop_B.i_oo = full_loop_B.d_C_size[0] * full_loop_B.d_C_size[1] - 1;
    if (0 <= full_loop_B.i_oo) {
      std::memcpy(&b_C_data[0], &full_loop_B.d_C_data[0], (full_loop_B.i_oo + 1)
                  * sizeof(real_T));
    }
  } else {
    full_loop_B.lastv = 0;
    full_loop_B.lastc = 0;
  }

  if (full_loop_B.lastv > 0) {
    full_loop_B.work_size_n = *work_size;
    full_loop_B.i_oo = *work_size;
    if (0 <= full_loop_B.i_oo - 1) {
      std::memcpy(&full_loop_B.work_data_n[0], &work_data[0], full_loop_B.i_oo *
                  sizeof(real_T));
    }

    full_loop_xgemv_p(full_loop_B.lastv, full_loop_B.lastc, b_C_data, ic0, ldc,
                      b_C_data, iv0, full_loop_B.work_data_n,
                      &full_loop_B.work_size_n, work_data, work_size);
    full_loop_B.b_C_size[0] = b_C_size[0];
    full_loop_B.b_C_size[1] = b_C_size[1];
    full_loop_B.i_oo = b_C_size[0] * b_C_size[1];
    if (0 <= full_loop_B.i_oo - 1) {
      std::memcpy(&full_loop_B.b_C_data_g[0], &b_C_data[0], full_loop_B.i_oo *
                  sizeof(real_T));
    }

    full_loop_xgerc_p(full_loop_B.lastv, full_loop_B.lastc, -tau, iv0, work_data,
                      full_loop_B.b_C_data_g, full_loop_B.b_C_size, ic0, ldc,
                      b_C_data, b_C_size);
  }
}

void full_loopModelClass::full_loop_qrpf_p4(const real_T A_data[], const int32_T
  A_size[2], int32_T m, int32_T n, real_T tau_data[], const int32_T jpvt_data[],
  const int32_T jpvt_size[2], real_T b_A_data[], int32_T b_A_size[2], int32_T
  b_jpvt_data[], int32_T b_jpvt_size[2])
{
  b_jpvt_size[0] = 1;
  b_jpvt_size[1] = jpvt_size[1];
  full_loop_B.itemp_m = jpvt_size[0] * jpvt_size[1] - 1;
  if (0 <= full_loop_B.itemp_m) {
    std::memcpy(&b_jpvt_data[0], &jpvt_data[0], (full_loop_B.itemp_m + 1) *
                sizeof(int32_T));
  }

  b_A_size[0] = A_size[0];
  b_A_size[1] = A_size[1];
  full_loop_B.itemp_m = A_size[0] * A_size[1] - 1;
  if (0 <= full_loop_B.itemp_m) {
    std::memcpy(&b_A_data[0], &A_data[0], (full_loop_B.itemp_m + 1) * sizeof
                (real_T));
  }

  full_loop_B.ma_l = A_size[0];
  if (m < n) {
    full_loop_B.m_l = m;
  } else {
    full_loop_B.m_l = n;
  }

  full_loop_B.minmn_i = full_loop_B.m_l - 1;
  full_loop_B.work_size = A_size[1];
  full_loop_B.itemp_m = A_size[1];
  if (0 <= full_loop_B.itemp_m - 1) {
    std::memset(&full_loop_B.work_data_c[0], 0, full_loop_B.itemp_m * sizeof
                (real_T));
  }

  full_loop_B.itemp_m = A_size[1];
  if (0 <= full_loop_B.itemp_m - 1) {
    std::memset(&full_loop_B.vn1_data_p[0], 0, full_loop_B.itemp_m * sizeof
                (real_T));
  }

  full_loop_B.itemp_m = A_size[1];
  if (0 <= full_loop_B.itemp_m - 1) {
    std::memset(&full_loop_B.vn2_data_a[0], 0, full_loop_B.itemp_m * sizeof
                (real_T));
  }

  for (full_loop_B.m_l = 0; full_loop_B.m_l < n; full_loop_B.m_l++) {
    full_loop_B.b_atmp_d = full_loop_xnrm2_p43(m, A_data, full_loop_B.m_l *
      full_loop_B.ma_l + 1);
    full_loop_B.vn2_data_a[full_loop_B.m_l] = full_loop_B.b_atmp_d;
    full_loop_B.vn1_data_p[full_loop_B.m_l] = full_loop_B.b_atmp_d;
  }

  for (full_loop_B.m_l = 0; full_loop_B.m_l <= full_loop_B.minmn_i;
       full_loop_B.m_l++) {
    full_loop_B.ii_bq = full_loop_B.m_l * full_loop_B.ma_l + full_loop_B.m_l;
    full_loop_B.nmi_e = (n - full_loop_B.m_l) - 1;
    full_loop_B.mmi_b = m - full_loop_B.m_l;
    full_loop_B.pvt_i = (full_loop_ixamax_p(full_loop_B.nmi_e + 1,
      full_loop_B.vn1_data_p, full_loop_B.m_l + 1) + full_loop_B.m_l) - 1;
    if (full_loop_B.pvt_i + 1 != full_loop_B.m_l + 1) {
      full_loop_B.b_A_size[0] = b_A_size[0];
      full_loop_B.b_A_size[1] = b_A_size[1];
      full_loop_B.itemp_m = b_A_size[0] * b_A_size[1];
      if (0 <= full_loop_B.itemp_m - 1) {
        std::memcpy(&full_loop_B.b_A_data_o[0], &b_A_data[0],
                    full_loop_B.itemp_m * sizeof(real_T));
      }

      full_loop_xswap_p(m, full_loop_B.b_A_data_o, full_loop_B.b_A_size,
                        full_loop_B.pvt_i * full_loop_B.ma_l + 1,
                        full_loop_B.m_l * full_loop_B.ma_l + 1, b_A_data,
                        b_A_size);
      full_loop_B.itemp_m = b_jpvt_data[full_loop_B.pvt_i];
      b_jpvt_data[full_loop_B.pvt_i] = b_jpvt_data[full_loop_B.m_l];
      b_jpvt_data[full_loop_B.m_l] = full_loop_B.itemp_m;
      full_loop_B.vn1_data_p[full_loop_B.pvt_i] =
        full_loop_B.vn1_data_p[full_loop_B.m_l];
      full_loop_B.vn2_data_a[full_loop_B.pvt_i] =
        full_loop_B.vn2_data_a[full_loop_B.m_l];
    }

    if (full_loop_B.m_l + 1 < m) {
      full_loop_xzlarfg_p43(full_loop_B.mmi_b, b_A_data[full_loop_B.ii_bq],
                            b_A_data, b_A_size, full_loop_B.ii_bq + 2,
                            &full_loop_B.b_atmp_d, full_loop_B.e_A_data,
                            full_loop_B.e_A_size, &tau_data[full_loop_B.m_l]);
      b_A_size[0] = full_loop_B.e_A_size[0];
      b_A_size[1] = full_loop_B.e_A_size[1];
      full_loop_B.itemp_m = full_loop_B.e_A_size[0] * full_loop_B.e_A_size[1] -
        1;
      if (0 <= full_loop_B.itemp_m) {
        std::memcpy(&b_A_data[0], &full_loop_B.e_A_data[0], (full_loop_B.itemp_m
          + 1) * sizeof(real_T));
      }

      b_A_data[full_loop_B.ii_bq] = full_loop_B.b_atmp_d;
    } else {
      tau_data[full_loop_B.m_l] = 0.0;
    }

    if (full_loop_B.m_l + 1 < n) {
      full_loop_B.b_atmp_d = b_A_data[full_loop_B.ii_bq];
      b_A_data[full_loop_B.ii_bq] = 1.0;
      full_loop_xzlarf_p43riobt(full_loop_B.mmi_b, full_loop_B.nmi_e,
        full_loop_B.ii_bq + 1, tau_data[full_loop_B.m_l], b_A_data, b_A_size,
        (full_loop_B.ii_bq + full_loop_B.ma_l) + 1, full_loop_B.ma_l,
        full_loop_B.work_data_c, &full_loop_B.work_size, full_loop_B.b_A_data_o,
        full_loop_B.e_A_size);
      b_A_size[0] = full_loop_B.e_A_size[0];
      b_A_size[1] = full_loop_B.e_A_size[1];
      full_loop_B.itemp_m = full_loop_B.e_A_size[0] * full_loop_B.e_A_size[1] -
        1;
      if (0 <= full_loop_B.itemp_m) {
        std::memcpy(&b_A_data[0], &full_loop_B.b_A_data_o[0],
                    (full_loop_B.itemp_m + 1) * sizeof(real_T));
      }

      b_A_data[full_loop_B.ii_bq] = full_loop_B.b_atmp_d;
    }

    for (full_loop_B.ii_bq = full_loop_B.m_l + 2; full_loop_B.ii_bq <= n;
         full_loop_B.ii_bq++) {
      full_loop_B.nmi_e = (full_loop_B.ii_bq - 1) * full_loop_B.ma_l +
        full_loop_B.m_l;
      full_loop_B.b_atmp_d = full_loop_B.vn1_data_p[full_loop_B.ii_bq - 1];
      if (full_loop_B.b_atmp_d != 0.0) {
        full_loop_B.temp1_d = std::abs(b_A_data[full_loop_B.nmi_e]) /
          full_loop_B.b_atmp_d;
        full_loop_B.temp1_d = 1.0 - full_loop_B.temp1_d * full_loop_B.temp1_d;
        if (full_loop_B.temp1_d < 0.0) {
          full_loop_B.temp1_d = 0.0;
        }

        full_loop_B.temp2_b = full_loop_B.b_atmp_d /
          full_loop_B.vn2_data_a[full_loop_B.ii_bq - 1];
        full_loop_B.temp2_b = full_loop_B.temp2_b * full_loop_B.temp2_b *
          full_loop_B.temp1_d;
        if (full_loop_B.temp2_b <= 1.4901161193847656E-8) {
          if (full_loop_B.m_l + 1 < m) {
            full_loop_B.vn1_data_p[full_loop_B.ii_bq - 1] = full_loop_xnrm2_p43
              (full_loop_B.mmi_b - 1, b_A_data, full_loop_B.nmi_e + 2);
            full_loop_B.vn2_data_a[full_loop_B.ii_bq - 1] =
              full_loop_B.vn1_data_p[full_loop_B.ii_bq - 1];
          } else {
            full_loop_B.vn1_data_p[full_loop_B.ii_bq - 1] = 0.0;
            full_loop_B.vn2_data_a[full_loop_B.ii_bq - 1] = 0.0;
          }
        } else {
          full_loop_B.vn1_data_p[full_loop_B.ii_bq - 1] = full_loop_B.b_atmp_d *
            std::sqrt(full_loop_B.temp1_d);
        }
      }
    }
  }
}

void full_loopModelClass::full_loop_lusolve_p(const real_T A_data[], const
  int32_T A_size[2], real_T B_data[], const int32_T *B_size)
{
  int32_T c_tmp;
  int32_T mmj_tmp;
  if (A_size[0] < A_size[1]) {
    full_loop_B.n_h = A_size[0];
  } else {
    full_loop_B.n_h = A_size[1];
  }

  if (*B_size < full_loop_B.n_h) {
    full_loop_B.n_h = *B_size;
  }

  full_loop_B.LDA = A_size[0];
  full_loop_B.c_A_size_idx_0 = A_size[0];
  full_loop_B.kAcol = A_size[1];
  full_loop_B.loop_ub_ck = A_size[0] * A_size[1] - 1;
  if (0 <= full_loop_B.loop_ub_ck) {
    std::memcpy(&full_loop_B.c_A_data_i[0], &A_data[0], (full_loop_B.loop_ub_ck
      + 1) * sizeof(real_T));
  }

  if (full_loop_B.n_h < 1) {
    full_loop_B.n_do = 0;
  } else {
    full_loop_B.n_do = full_loop_B.n_h;
  }

  if (full_loop_B.n_do > 0) {
    full_loop_B.b_ipiv_data[0] = 1;
    full_loop_B.yk = 1;
    for (full_loop_B.loop_ub_ck = 2; full_loop_B.loop_ub_ck <= full_loop_B.n_do;
         full_loop_B.loop_ub_ck++) {
      full_loop_B.yk++;
      full_loop_B.b_ipiv_data[full_loop_B.loop_ub_ck - 1] = full_loop_B.yk;
    }
  }

  if (full_loop_B.n_h >= 1) {
    full_loop_B.ldap1 = A_size[0];
    full_loop_B.n_do = full_loop_B.n_h - 1;
    if (full_loop_B.n_do >= full_loop_B.n_h) {
      full_loop_B.n_do = full_loop_B.n_h;
    }

    full_loop_B.yk = full_loop_B.n_do - 1;
    if (0 <= full_loop_B.yk) {
      if (A_size[0] < 0) {
        full_loop_B.jyinc = -A_size[0];
      } else {
        full_loop_B.jyinc = A_size[0];
      }
    }

    for (full_loop_B.n_do = 0; full_loop_B.n_do <= full_loop_B.yk;
         full_loop_B.n_do++) {
      mmj_tmp = full_loop_B.n_h - full_loop_B.n_do;
      c_tmp = (full_loop_B.ldap1 + 1) * full_loop_B.n_do;
      full_loop_B.c_cf = c_tmp + 2;
      if (mmj_tmp < 1) {
        full_loop_B.iy_a = 0;
      } else {
        full_loop_B.iy_a = 1;
        if (mmj_tmp > 1) {
          full_loop_B.ix_j = full_loop_B.c_cf - 2;
          full_loop_B.smax = std::abs(full_loop_B.c_A_data_i[c_tmp]);
          for (full_loop_B.loop_ub_ck = 2; full_loop_B.loop_ub_ck <= mmj_tmp;
               full_loop_B.loop_ub_ck++) {
            full_loop_B.ix_j++;
            full_loop_B.s_c = std::abs(full_loop_B.c_A_data_i[full_loop_B.ix_j]);
            if (full_loop_B.s_c > full_loop_B.smax) {
              full_loop_B.iy_a = full_loop_B.loop_ub_ck;
              full_loop_B.smax = full_loop_B.s_c;
            }
          }
        }
      }

      if (full_loop_B.c_A_data_i[(full_loop_B.c_cf + full_loop_B.iy_a) - 3] !=
          0.0) {
        if (full_loop_B.iy_a - 1 != 0) {
          full_loop_B.iy_a += full_loop_B.n_do;
          full_loop_B.b_ipiv_data[full_loop_B.n_do] = full_loop_B.iy_a;
          full_loop_B.loop_ub_ck = full_loop_B.c_A_size_idx_0 *
            full_loop_B.kAcol - 1;
          if (0 <= full_loop_B.loop_ub_ck) {
            std::memcpy(&full_loop_B.c_x_data_e[0], &full_loop_B.c_A_data_i[0],
                        (full_loop_B.loop_ub_ck + 1) * sizeof(real_T));
          }

          full_loop_B.ix_j = full_loop_B.n_do + 1;
          if (full_loop_B.LDA < 0) {
            full_loop_B.ixinc = -full_loop_B.LDA;
            full_loop_B.iyinc = -full_loop_B.LDA;
          } else {
            full_loop_B.ixinc = full_loop_B.LDA;
            full_loop_B.iyinc = full_loop_B.LDA;
          }

          for (full_loop_B.loop_ub_ck = 0; full_loop_B.loop_ub_ck <
               full_loop_B.n_h; full_loop_B.loop_ub_ck++) {
            full_loop_B.smax = full_loop_B.c_x_data_e[full_loop_B.ix_j - 1];
            full_loop_B.c_x_data_e[full_loop_B.ix_j - 1] =
              full_loop_B.c_x_data_e[full_loop_B.iy_a - 1];
            full_loop_B.c_x_data_e[full_loop_B.iy_a - 1] = full_loop_B.smax;
            if (full_loop_B.LDA < 0) {
              full_loop_B.ix_j -= full_loop_B.ixinc;
              full_loop_B.iy_a -= full_loop_B.iyinc;
            } else {
              full_loop_B.ix_j += full_loop_B.ixinc;
              full_loop_B.iy_a += full_loop_B.iyinc;
            }
          }

          full_loop_B.loop_ub_ck = full_loop_B.c_A_size_idx_0 *
            full_loop_B.kAcol - 1;
          if (0 <= full_loop_B.loop_ub_ck) {
            std::memcpy(&full_loop_B.c_A_data_i[0], &full_loop_B.c_x_data_e[0],
                        (full_loop_B.loop_ub_ck + 1) * sizeof(real_T));
          }
        }

        full_loop_B.iy_a = full_loop_B.c_cf + mmj_tmp;
        for (full_loop_B.loop_ub_ck = full_loop_B.c_cf; full_loop_B.loop_ub_ck <=
             full_loop_B.iy_a - 2; full_loop_B.loop_ub_ck++) {
          full_loop_B.c_A_data_i[full_loop_B.loop_ub_ck - 1] /=
            full_loop_B.c_A_data_i[c_tmp];
        }
      }

      full_loop_B.iy_a = mmj_tmp - 2;
      full_loop_B.ixinc = c_tmp + full_loop_B.ldap1;
      full_loop_B.iyinc = (c_tmp + full_loop_B.LDA) + 1;
      for (full_loop_B.loop_ub_ck = 0; full_loop_B.loop_ub_ck <=
           full_loop_B.iy_a; full_loop_B.loop_ub_ck++) {
        full_loop_B.smax = full_loop_B.c_A_data_i[full_loop_B.iyinc - 1];
        if (full_loop_B.smax != 0.0) {
          full_loop_B.ix_j = full_loop_B.c_cf - 1;
          full_loop_B.c_bb = mmj_tmp + full_loop_B.ixinc;
          for (c_tmp = full_loop_B.ixinc + 2; c_tmp <= full_loop_B.c_bb; c_tmp++)
          {
            full_loop_B.c_A_data_i[c_tmp - 1] +=
              full_loop_B.c_A_data_i[full_loop_B.ix_j] * -full_loop_B.smax;
            full_loop_B.ix_j++;
          }
        }

        if (full_loop_B.LDA < 0) {
          full_loop_B.iyinc -= full_loop_B.jyinc;
        } else {
          full_loop_B.iyinc += full_loop_B.jyinc;
        }

        full_loop_B.ixinc += full_loop_B.LDA;
      }
    }
  }

  full_loop_B.yk = full_loop_B.n_h - 2;
  for (full_loop_B.LDA = 0; full_loop_B.LDA <= full_loop_B.yk; full_loop_B.LDA++)
  {
    if (full_loop_B.LDA + 1 != full_loop_B.b_ipiv_data[full_loop_B.LDA]) {
      full_loop_B.smax = B_data[full_loop_B.LDA];
      B_data[full_loop_B.LDA] = B_data[full_loop_B.b_ipiv_data[full_loop_B.LDA]
        - 1];
      B_data[full_loop_B.b_ipiv_data[full_loop_B.LDA] - 1] = full_loop_B.smax;
    }
  }

  if (*B_size != 0) {
    for (full_loop_B.LDA = 0; full_loop_B.LDA < full_loop_B.n_h; full_loop_B.LDA
         ++) {
      full_loop_B.kAcol = full_loop_B.c_A_size_idx_0 * full_loop_B.LDA - 1;
      if (B_data[full_loop_B.LDA] != 0.0) {
        for (full_loop_B.loop_ub_ck = full_loop_B.LDA + 2;
             full_loop_B.loop_ub_ck <= full_loop_B.n_h; full_loop_B.loop_ub_ck++)
        {
          B_data[full_loop_B.loop_ub_ck - 1] -=
            full_loop_B.c_A_data_i[full_loop_B.loop_ub_ck + full_loop_B.kAcol] *
            B_data[full_loop_B.LDA];
        }
      }
    }
  }

  if (*B_size != 0) {
    for (full_loop_B.loop_ub_ck = full_loop_B.n_h; full_loop_B.loop_ub_ck >= 1;
         full_loop_B.loop_ub_ck--) {
      full_loop_B.kAcol = (full_loop_B.loop_ub_ck - 1) *
        full_loop_B.c_A_size_idx_0 - 1;
      if (B_data[full_loop_B.loop_ub_ck - 1] != 0.0) {
        B_data[full_loop_B.loop_ub_ck - 1] /=
          full_loop_B.c_A_data_i[full_loop_B.loop_ub_ck + full_loop_B.kAcol];
        full_loop_B.yk = full_loop_B.loop_ub_ck - 2;
        for (full_loop_B.LDA = 0; full_loop_B.LDA <= full_loop_B.yk;
             full_loop_B.LDA++) {
          B_data[full_loop_B.LDA] -= full_loop_B.c_A_data_i[(full_loop_B.LDA +
            full_loop_B.kAcol) + 1] * B_data[full_loop_B.loop_ub_ck - 1];
        }
      }
    }
  }
}

void full_loopModelClass::full_loop_mldivide_p(const real_T A_data[], const
  int32_T A_size[2], const real_T B_data[], const int32_T *B_size, real_T
  Y_data[], int32_T *Y_size)
{
  boolean_T guard1 = false;
  if ((A_size[0] == 0) || (A_size[1] == 0) || (*B_size == 0)) {
    full_loop_B.minmana_b = A_size[1];
    *Y_size = A_size[1];
    if (0 <= full_loop_B.minmana_b - 1) {
      std::memset(&Y_data[0], 0, full_loop_B.minmana_b * sizeof(real_T));
    }
  } else if (A_size[0] == A_size[1]) {
    *Y_size = *B_size;
    full_loop_B.maxmn = *B_size;
    if (0 <= full_loop_B.maxmn - 1) {
      std::memcpy(&Y_data[0], &B_data[0], full_loop_B.maxmn * sizeof(real_T));
    }

    full_loop_lusolve_p(A_data, A_size, Y_data, Y_size);
  } else {
    full_loop_B.na = A_size[1] - 1;
    full_loop_B.c_A_size[0] = A_size[0];
    full_loop_B.c_A_size[1] = A_size[1];
    full_loop_B.maxmn = A_size[0] * A_size[1] - 1;
    if (0 <= full_loop_B.maxmn) {
      std::memcpy(&full_loop_B.c_A_data_b[0], &A_data[0], (full_loop_B.maxmn + 1)
                  * sizeof(real_T));
    }

    if (A_size[0] < A_size[1]) {
      full_loop_B.minmana_b = A_size[0];
    } else {
      full_loop_B.minmana_b = A_size[1];
    }

    if (0 <= full_loop_B.minmana_b - 1) {
      std::memset(&full_loop_B.b_tau_data[0], 0, full_loop_B.minmana_b * sizeof
                  (real_T));
    }

    guard1 = false;
    if ((A_size[0] == 0) || (A_size[1] == 0)) {
      guard1 = true;
    } else {
      if (A_size[0] < A_size[1]) {
        full_loop_B.maxmn = A_size[0];
      } else {
        full_loop_B.maxmn = A_size[1];
      }

      if (full_loop_B.maxmn < 1) {
        guard1 = true;
      } else {
        full_loop_B.maxmn = A_size[1] - 1;
        if (0 <= full_loop_B.maxmn) {
          std::memset(&full_loop_B.b_jpvt_data[0], 0, (full_loop_B.maxmn + 1) *
                      sizeof(int32_T));
        }

        for (full_loop_B.maxmn = 0; full_loop_B.maxmn <= full_loop_B.na;
             full_loop_B.maxmn++) {
          full_loop_B.b_jpvt_data[full_loop_B.maxmn] = full_loop_B.maxmn + 1;
        }

        if (0 <= full_loop_B.minmana_b - 1) {
          std::memset(&full_loop_B.b_tau_data[0], 0, full_loop_B.minmana_b *
                      sizeof(real_T));
        }

        full_loop_B.b_jpvt_size_f[0] = 1;
        full_loop_B.b_jpvt_size_f[1] = A_size[1];
        full_loop_B.maxmn = A_size[1];
        if (0 <= full_loop_B.maxmn - 1) {
          std::memcpy(&full_loop_B.b_jpvt_data_l[0], &full_loop_B.b_jpvt_data[0],
                      full_loop_B.maxmn * sizeof(int32_T));
        }

        full_loop_qrpf_p4(A_data, A_size, A_size[0], A_size[1],
                          full_loop_B.b_tau_data, full_loop_B.b_jpvt_data_l,
                          full_loop_B.b_jpvt_size_f, full_loop_B.c_A_data_b,
                          full_loop_B.c_A_size, full_loop_B.b_jpvt_data,
                          full_loop_B.b_jpvt_size);
      }
    }

    if (guard1) {
      full_loop_B.maxmn = A_size[1] - 1;
      if (0 <= full_loop_B.maxmn) {
        std::memset(&full_loop_B.b_jpvt_data[0], 0, (full_loop_B.maxmn + 1) *
                    sizeof(int32_T));
      }

      for (full_loop_B.minmana_b = 0; full_loop_B.minmana_b <= full_loop_B.na;
           full_loop_B.minmana_b++) {
        full_loop_B.b_jpvt_data[full_loop_B.minmana_b] = full_loop_B.minmana_b +
          1;
      }
    }

    full_loop_B.na = 0;
    if (full_loop_B.c_A_size[0] < full_loop_B.c_A_size[1]) {
      full_loop_B.minmana_b = full_loop_B.c_A_size[0];
      full_loop_B.maxmn = full_loop_B.c_A_size[1];
    } else {
      full_loop_B.minmana_b = full_loop_B.c_A_size[1];
      full_loop_B.maxmn = full_loop_B.c_A_size[0];
    }

    if (full_loop_B.minmana_b > 0) {
      full_loop_B.tol_a = 2.2204460492503131E-15 * static_cast<real_T>
        (full_loop_B.maxmn);
      if (1.4901161193847656E-8 < full_loop_B.tol_a) {
        full_loop_B.tol_a = 1.4901161193847656E-8;
      }

      full_loop_B.tol_a *= std::abs(full_loop_B.c_A_data_b[0]);
      while ((full_loop_B.na < full_loop_B.minmana_b) && (!(std::abs
               (full_loop_B.c_A_data_b[full_loop_B.c_A_size[0] * full_loop_B.na
                + full_loop_B.na]) <= full_loop_B.tol_a))) {
        full_loop_B.na++;
      }
    }

    full_loop_B.minmana_b = full_loop_B.c_A_size[1];
    *Y_size = full_loop_B.c_A_size[1];
    if (0 <= full_loop_B.minmana_b - 1) {
      std::memset(&Y_data[0], 0, full_loop_B.minmana_b * sizeof(real_T));
    }

    full_loop_B.maxmn = *B_size;
    if (0 <= full_loop_B.maxmn - 1) {
      std::memcpy(&full_loop_B.B_data_f[0], &B_data[0], full_loop_B.maxmn *
                  sizeof(real_T));
    }

    full_loop_B.maxmn = full_loop_B.c_A_size[0];
    if (full_loop_B.c_A_size[0] < full_loop_B.c_A_size[1]) {
      full_loop_B.minmana_b = full_loop_B.c_A_size[0];
    } else {
      full_loop_B.minmana_b = full_loop_B.c_A_size[1];
    }

    full_loop_B.mn = full_loop_B.minmana_b - 1;
    for (full_loop_B.minmana_b = 0; full_loop_B.minmana_b <= full_loop_B.mn;
         full_loop_B.minmana_b++) {
      if (full_loop_B.b_tau_data[full_loop_B.minmana_b] != 0.0) {
        full_loop_B.tol_a = full_loop_B.B_data_f[full_loop_B.minmana_b];
        for (full_loop_B.i_e5 = full_loop_B.minmana_b + 2; full_loop_B.i_e5 <=
             full_loop_B.maxmn; full_loop_B.i_e5++) {
          full_loop_B.tol_a += full_loop_B.c_A_data_b[(full_loop_B.c_A_size[0] *
            full_loop_B.minmana_b + full_loop_B.i_e5) - 1] *
            full_loop_B.B_data_f[full_loop_B.i_e5 - 1];
        }

        full_loop_B.tol_a *= full_loop_B.b_tau_data[full_loop_B.minmana_b];
        if (full_loop_B.tol_a != 0.0) {
          full_loop_B.B_data_f[full_loop_B.minmana_b] -= full_loop_B.tol_a;
          for (full_loop_B.i_e5 = full_loop_B.minmana_b + 2; full_loop_B.i_e5 <=
               full_loop_B.maxmn; full_loop_B.i_e5++) {
            full_loop_B.B_data_f[full_loop_B.i_e5 - 1] -=
              full_loop_B.c_A_data_b[(full_loop_B.c_A_size[0] *
              full_loop_B.minmana_b + full_loop_B.i_e5) - 1] * full_loop_B.tol_a;
          }
        }
      }
    }

    for (full_loop_B.i_e5 = 0; full_loop_B.i_e5 < full_loop_B.na;
         full_loop_B.i_e5++) {
      Y_data[full_loop_B.b_jpvt_data[full_loop_B.i_e5] - 1] =
        full_loop_B.B_data_f[full_loop_B.i_e5];
    }

    for (full_loop_B.minmana_b = full_loop_B.na; full_loop_B.minmana_b >= 1;
         full_loop_B.minmana_b--) {
      full_loop_B.mn = full_loop_B.b_jpvt_data[full_loop_B.minmana_b - 1] - 1;
      full_loop_B.i_e5 = (full_loop_B.minmana_b - 1) * full_loop_B.c_A_size[0];
      Y_data[full_loop_B.mn] /= full_loop_B.c_A_data_b[(full_loop_B.i_e5 +
        full_loop_B.minmana_b) - 1];
      full_loop_B.c_if = full_loop_B.minmana_b - 2;
      for (full_loop_B.maxmn = 0; full_loop_B.maxmn <= full_loop_B.c_if;
           full_loop_B.maxmn++) {
        Y_data[full_loop_B.b_jpvt_data[full_loop_B.maxmn] - 1] -=
          full_loop_B.c_A_data_b[full_loop_B.i_e5 + full_loop_B.maxmn] *
          Y_data[full_loop_B.mn];
      }
    }
  }
}

void full_loopModelClass::full_loo_solveDampenedHessian_p(const real_T
  Jtri_data[], const int32_T Jtri_size[2], real_T lambda, const real_T v_data[],
  const int32_T *v_size, real_T dx_data[], int32_T *dx_size)
{
  full_loop_B.loop_ub_ku = Jtri_size[0];
  full_loop_B.a_size_lo = Jtri_size[0];
  if (0 <= full_loop_B.loop_ub_ku - 1) {
    std::memcpy(&full_loop_B.a_data_n[0], &Jtri_data[0], full_loop_B.loop_ub_ku *
                sizeof(real_T));
  }

  full_loop_B.loop_ub_k0 = Jtri_size[0];
  full_loop_B.b_size_me = Jtri_size[0];
  for (full_loop_B.J_size_idx_0 = 0; full_loop_B.J_size_idx_0 <
       full_loop_B.loop_ub_k0; full_loop_B.J_size_idx_0++) {
    full_loop_B.b_data_i[full_loop_B.J_size_idx_0] =
      Jtri_data[full_loop_B.J_size_idx_0 + Jtri_size[0]];
  }

  full_loop_B.loop_ub_on = Jtri_size[0];
  for (full_loop_B.J_size_idx_0 = 0; full_loop_B.J_size_idx_0 <
       full_loop_B.loop_ub_on; full_loop_B.J_size_idx_0++) {
    full_loop_B.c_data_l4[full_loop_B.J_size_idx_0] = Jtri_data[(Jtri_size[0] <<
      1) + full_loop_B.J_size_idx_0];
  }

  if (static_cast<real_T>(*v_size) - 1.0 < 1.0) {
    full_loop_B.m_d = 0;
  } else {
    full_loop_B.inner = static_cast<int32_T>((static_cast<real_T>(*v_size) - 1.0)
      - 1.0);
    full_loop_B.m_d = full_loop_B.inner + 1;
    for (full_loop_B.J_size_idx_0 = 0; full_loop_B.J_size_idx_0 <=
         full_loop_B.inner; full_loop_B.J_size_idx_0++) {
      full_loop_B.y_data_hz[full_loop_B.J_size_idx_0] = static_cast<real_T>
        (full_loop_B.J_size_idx_0) + 1.0;
    }
  }

  full_loop_power_p(full_loop_B.a_data_n, &full_loop_B.a_size_lo,
                    full_loop_B.d_data_i, &full_loop_B.d_size_o);
  full_loop_power_p(full_loop_B.b_data_i, &full_loop_B.b_size_me,
                    full_loop_B.e_data_k, &full_loop_B.a_size_lo);
  full_loop_B.inner = full_loop_B.m_d + 1;
  full_loop_B.v_data_ot[0] = *v_size - 1;
  for (full_loop_B.J_size_idx_0 = 0; full_loop_B.J_size_idx_0 < full_loop_B.m_d;
       full_loop_B.J_size_idx_0++) {
    full_loop_B.v_data_ot[full_loop_B.J_size_idx_0 + 1] = static_cast<int32_T>
      (full_loop_B.y_data_hz[full_loop_B.J_size_idx_0]) - 1;
  }

  full_loop_B.c_size_at = full_loop_B.inner;
  for (full_loop_B.J_size_idx_0 = 0; full_loop_B.J_size_idx_0 <
       full_loop_B.inner; full_loop_B.J_size_idx_0++) {
    full_loop_B.c_data_al[full_loop_B.J_size_idx_0] =
      full_loop_B.c_data_l4[full_loop_B.v_data_ot[full_loop_B.J_size_idx_0]];
  }

  full_loop_power_p(full_loop_B.c_data_al, &full_loop_B.c_size_at,
                    full_loop_B.f_data_f, &full_loop_B.b_size_me);
  full_loop_B.loop_ub_do = full_loop_B.d_size_o;
  for (full_loop_B.J_size_idx_0 = 0; full_loop_B.J_size_idx_0 <
       full_loop_B.loop_ub_do; full_loop_B.J_size_idx_0++) {
    full_loop_B.d_data_i[full_loop_B.J_size_idx_0] =
      ((full_loop_B.d_data_i[full_loop_B.J_size_idx_0] +
        full_loop_B.e_data_k[full_loop_B.J_size_idx_0]) +
       full_loop_B.f_data_f[full_loop_B.J_size_idx_0]) * (lambda + 1.0);
  }

  if (*v_size < 2) {
    full_loop_B.m_d = 0;
  } else {
    full_loop_B.m_d = *v_size - 1;
    full_loop_B.loop_ub_do = *v_size - 2;
    for (full_loop_B.J_size_idx_0 = 0; full_loop_B.J_size_idx_0 <=
         full_loop_B.loop_ub_do; full_loop_B.J_size_idx_0++) {
      full_loop_B.y_data_hz[full_loop_B.J_size_idx_0] = static_cast<real_T>
        (full_loop_B.J_size_idx_0) + 2.0;
    }
  }

  for (full_loop_B.J_size_idx_0 = 0; full_loop_B.J_size_idx_0 < full_loop_B.m_d;
       full_loop_B.J_size_idx_0++) {
    full_loop_B.v_data_ot[full_loop_B.J_size_idx_0] = static_cast<int32_T>
      (full_loop_B.y_data_hz[full_loop_B.J_size_idx_0]) - 1;
  }

  full_loop_B.v_data_ot[full_loop_B.m_d] = 0;
  full_loop_B.loop_ub_do = Jtri_size[0];
  for (full_loop_B.J_size_idx_0 = 0; full_loop_B.J_size_idx_0 <
       full_loop_B.loop_ub_do; full_loop_B.J_size_idx_0++) {
    full_loop_B.e_data_k[full_loop_B.J_size_idx_0] =
      full_loop_B.a_data_n[full_loop_B.J_size_idx_0] *
      full_loop_B.b_data_i[full_loop_B.v_data_ot[full_loop_B.J_size_idx_0]] +
      full_loop_B.b_data_i[full_loop_B.J_size_idx_0] *
      full_loop_B.c_data_l4[full_loop_B.J_size_idx_0];
  }

  if (*v_size < 2) {
    full_loop_B.m_d = 0;
  } else {
    full_loop_B.m_d = *v_size - 1;
    full_loop_B.loop_ub_do = *v_size - 2;
    for (full_loop_B.J_size_idx_0 = 0; full_loop_B.J_size_idx_0 <=
         full_loop_B.loop_ub_do; full_loop_B.J_size_idx_0++) {
      full_loop_B.y_data_hz[full_loop_B.J_size_idx_0] = static_cast<real_T>
        (full_loop_B.J_size_idx_0) + 2.0;
    }
  }

  for (full_loop_B.J_size_idx_0 = 0; full_loop_B.J_size_idx_0 < full_loop_B.m_d;
       full_loop_B.J_size_idx_0++) {
    full_loop_B.v_data_ot[full_loop_B.J_size_idx_0] = static_cast<int32_T>
      (full_loop_B.y_data_hz[full_loop_B.J_size_idx_0]) - 1;
  }

  full_loop_B.v_data_ot[full_loop_B.m_d] = 0;
  full_loop_B.loop_ub_do = Jtri_size[0];
  for (full_loop_B.J_size_idx_0 = 0; full_loop_B.J_size_idx_0 <
       full_loop_B.loop_ub_do; full_loop_B.J_size_idx_0++) {
    full_loop_B.f_data_f[full_loop_B.J_size_idx_0] =
      full_loop_B.a_data_n[full_loop_B.J_size_idx_0] *
      full_loop_B.c_data_l4[full_loop_B.v_data_ot[full_loop_B.J_size_idx_0]];
  }

  if (*v_size < 5) {
    if (*v_size < 1) {
      full_loop_B.m_d = 0;
      full_loop_B.inner = 0;
    } else {
      full_loop_B.m_d = *v_size;
      full_loop_B.loop_ub_do = *v_size - 1;
      for (full_loop_B.J_size_idx_0 = 0; full_loop_B.J_size_idx_0 <=
           full_loop_B.loop_ub_do; full_loop_B.J_size_idx_0++) {
        full_loop_B.y_data_hz[full_loop_B.J_size_idx_0] = static_cast<real_T>
          (full_loop_B.J_size_idx_0) + 1.0;
      }

      full_loop_B.inner = *v_size;
      full_loop_B.loop_ub_do = *v_size - 1;
      for (full_loop_B.J_size_idx_0 = 0; full_loop_B.J_size_idx_0 <=
           full_loop_B.loop_ub_do; full_loop_B.J_size_idx_0++) {
        full_loop_B.y_data_b[full_loop_B.J_size_idx_0] = static_cast<real_T>
          (full_loop_B.J_size_idx_0) + 1.0;
      }
    }

    if (*v_size < 2) {
      full_loop_B.n_o = 0;
      full_loop_B.coffset = 0;
    } else {
      full_loop_B.n_o = *v_size - 1;
      full_loop_B.loop_ub_do = *v_size - 2;
      for (full_loop_B.J_size_idx_0 = 0; full_loop_B.J_size_idx_0 <=
           full_loop_B.loop_ub_do; full_loop_B.J_size_idx_0++) {
        full_loop_B.y_data_os[full_loop_B.J_size_idx_0] = static_cast<real_T>
          (full_loop_B.J_size_idx_0) + 2.0;
      }

      full_loop_B.coffset = *v_size - 1;
      full_loop_B.loop_ub_do = *v_size - 2;
      for (full_loop_B.J_size_idx_0 = 0; full_loop_B.J_size_idx_0 <=
           full_loop_B.loop_ub_do; full_loop_B.J_size_idx_0++) {
        full_loop_B.y_data_n[full_loop_B.J_size_idx_0] = static_cast<real_T>
          (full_loop_B.J_size_idx_0) + 2.0;
      }
    }

    if (*v_size < 1) {
      full_loop_B.boffset = 0;
      full_loop_B.y_size_idx_1_f = 0;
    } else {
      full_loop_B.boffset = *v_size;
      full_loop_B.loop_ub_do = *v_size - 1;
      for (full_loop_B.J_size_idx_0 = 0; full_loop_B.J_size_idx_0 <=
           full_loop_B.loop_ub_do; full_loop_B.J_size_idx_0++) {
        full_loop_B.y_data_mi[full_loop_B.J_size_idx_0] = static_cast<real_T>
          (full_loop_B.J_size_idx_0) + 1.0;
      }

      full_loop_B.y_size_idx_1_f = *v_size;
      full_loop_B.loop_ub_do = *v_size - 1;
      for (full_loop_B.J_size_idx_0 = 0; full_loop_B.J_size_idx_0 <=
           full_loop_B.loop_ub_do; full_loop_B.J_size_idx_0++) {
        full_loop_B.y_data_ku[full_loop_B.J_size_idx_0] = static_cast<real_T>
          (full_loop_B.J_size_idx_0) + 1.0;
      }
    }

    full_loop_B.loop_ub_do = (full_loop_B.m_d + full_loop_B.inner) +
      full_loop_B.n_o;
    full_loop_B.y_size[0] = full_loop_B.loop_ub_do + 1;
    full_loop_B.y_size[1] = 2;
    if (0 <= full_loop_B.m_d - 1) {
      std::memcpy(&full_loop_B.y_data_bj[0], &full_loop_B.y_data_hz[0],
                  full_loop_B.m_d * sizeof(real_T));
    }

    for (full_loop_B.J_size_idx_0 = 0; full_loop_B.J_size_idx_0 <
         full_loop_B.inner; full_loop_B.J_size_idx_0++) {
      full_loop_B.y_data_bj[full_loop_B.J_size_idx_0 + full_loop_B.m_d] =
        full_loop_B.y_data_b[full_loop_B.J_size_idx_0];
    }

    for (full_loop_B.J_size_idx_0 = 0; full_loop_B.J_size_idx_0 <
         full_loop_B.n_o; full_loop_B.J_size_idx_0++) {
      full_loop_B.y_data_bj[(full_loop_B.J_size_idx_0 + full_loop_B.m_d) +
        full_loop_B.inner] = full_loop_B.y_data_os[full_loop_B.J_size_idx_0];
    }

    full_loop_B.y_data_bj[full_loop_B.loop_ub_do] = 1.0;
    for (full_loop_B.J_size_idx_0 = 0; full_loop_B.J_size_idx_0 <
         full_loop_B.coffset; full_loop_B.J_size_idx_0++) {
      full_loop_B.y_data_bj[full_loop_B.J_size_idx_0 + full_loop_B.y_size[0]] =
        full_loop_B.y_data_n[full_loop_B.J_size_idx_0];
    }

    full_loop_B.y_data_bj[full_loop_B.coffset + full_loop_B.y_size[0]] = 1.0;
    for (full_loop_B.J_size_idx_0 = 0; full_loop_B.J_size_idx_0 <
         full_loop_B.boffset; full_loop_B.J_size_idx_0++) {
      full_loop_B.y_data_bj[((full_loop_B.J_size_idx_0 + full_loop_B.coffset) +
        full_loop_B.y_size[0]) + 1] =
        full_loop_B.y_data_mi[full_loop_B.J_size_idx_0];
    }

    for (full_loop_B.J_size_idx_0 = 0; full_loop_B.J_size_idx_0 <
         full_loop_B.y_size_idx_1_f; full_loop_B.J_size_idx_0++) {
      full_loop_B.y_data_bj[(((full_loop_B.J_size_idx_0 + full_loop_B.coffset) +
        full_loop_B.boffset) + full_loop_B.y_size[0]) + 1] =
        full_loop_B.y_data_ku[full_loop_B.J_size_idx_0];
    }

    full_loop_B.a_size_i = (Jtri_size[0] + Jtri_size[0]) + Jtri_size[0];
    full_loop_B.loop_ub_do = Jtri_size[0];
    if (0 <= full_loop_B.loop_ub_do - 1) {
      std::memcpy(&full_loop_B.a_data_o[0], &full_loop_B.a_data_n[0],
                  full_loop_B.loop_ub_do * sizeof(real_T));
    }

    full_loop_B.loop_ub_do = Jtri_size[0];
    for (full_loop_B.J_size_idx_0 = 0; full_loop_B.J_size_idx_0 <
         full_loop_B.loop_ub_do; full_loop_B.J_size_idx_0++) {
      full_loop_B.a_data_o[full_loop_B.J_size_idx_0 + full_loop_B.loop_ub_ku] =
        full_loop_B.b_data_i[full_loop_B.J_size_idx_0];
    }

    for (full_loop_B.J_size_idx_0 = 0; full_loop_B.J_size_idx_0 <
         full_loop_B.loop_ub_on; full_loop_B.J_size_idx_0++) {
      full_loop_B.a_data_o[(full_loop_B.J_size_idx_0 + full_loop_B.loop_ub_ku) +
        full_loop_B.loop_ub_k0] = full_loop_B.c_data_l4[full_loop_B.J_size_idx_0];
    }

    full_loop_B.v_g[0] = *v_size;
    full_loop_B.v_g[1] = *v_size;
    full_loop_accumarray_p(full_loop_B.y_data_bj, full_loop_B.y_size,
      full_loop_B.a_data_o, &full_loop_B.a_size_i, full_loop_B.v_g,
      full_loop_B.tmp_data_f, full_loop_B.tmp_size);
    full_loop_B.J_size_idx_0 = full_loop_B.tmp_size[0];
    full_loop_B.loop_ub_ku = full_loop_B.tmp_size[0] * full_loop_B.tmp_size[1];
    if (0 <= full_loop_B.loop_ub_ku - 1) {
      std::memcpy(&full_loop_B.J_data[0], &full_loop_B.tmp_data_f[0],
                  full_loop_B.loop_ub_ku * sizeof(real_T));
    }

    full_loop_B.m_d = full_loop_B.tmp_size[1] - 1;
    full_loop_B.inner = full_loop_B.tmp_size[0] - 1;
    full_loop_B.n_o = full_loop_B.tmp_size[1] - 1;
    full_loop_B.A_size_d[0] = full_loop_B.tmp_size[1];
    full_loop_B.A_size_d[1] = full_loop_B.tmp_size[1];
    for (full_loop_B.loop_ub_ku = 0; full_loop_B.loop_ub_ku <= full_loop_B.n_o;
         full_loop_B.loop_ub_ku++) {
      full_loop_B.coffset = (full_loop_B.m_d + 1) * full_loop_B.loop_ub_ku - 1;
      full_loop_B.boffset = full_loop_B.loop_ub_ku * full_loop_B.J_size_idx_0 -
        1;
      if (0 <= full_loop_B.m_d) {
        std::memset(&full_loop_B.A_data_jd[full_loop_B.coffset + 1], 0,
                    (((full_loop_B.m_d + full_loop_B.coffset) -
                      full_loop_B.coffset) + 1) * sizeof(real_T));
      }

      for (full_loop_B.loop_ub_k0 = 0; full_loop_B.loop_ub_k0 <=
           full_loop_B.inner; full_loop_B.loop_ub_k0++) {
        full_loop_B.bkj = full_loop_B.J_data[(full_loop_B.boffset +
          full_loop_B.loop_ub_k0) + 1];
        for (full_loop_B.loop_ub_on = 0; full_loop_B.loop_ub_on <=
             full_loop_B.m_d; full_loop_B.loop_ub_on++) {
          full_loop_B.y_size_idx_1_f = (full_loop_B.coffset +
            full_loop_B.loop_ub_on) + 1;
          full_loop_B.A_data_jd[full_loop_B.y_size_idx_1_f] +=
            full_loop_B.J_data[full_loop_B.loop_ub_on * full_loop_B.J_size_idx_0
            + full_loop_B.loop_ub_k0] * full_loop_B.bkj;
        }
      }
    }

    full_loop_diag_p(full_loop_B.A_data_jd, full_loop_B.A_size_d,
                     full_loop_B.tmp_data_bo, &full_loop_B.d_size_o);
    full_loop_B.lambda_size = full_loop_B.d_size_o;
    full_loop_B.loop_ub_ku = full_loop_B.d_size_o;
    for (full_loop_B.J_size_idx_0 = 0; full_loop_B.J_size_idx_0 <
         full_loop_B.loop_ub_ku; full_loop_B.J_size_idx_0++) {
      full_loop_B.y_data_hz[full_loop_B.J_size_idx_0] = lambda *
        full_loop_B.tmp_data_bo[full_loop_B.J_size_idx_0];
    }

    full_loop_diag_p4(full_loop_B.y_data_hz, &full_loop_B.lambda_size,
                      full_loop_B.tmp_data_i, full_loop_B.y_size);
    full_loop_B.A_size_j[0] = full_loop_B.tmp_size[1];
    full_loop_B.A_size_j[1] = full_loop_B.tmp_size[1];
    full_loop_B.loop_ub_ku = full_loop_B.tmp_size[1] * full_loop_B.tmp_size[1];
    for (full_loop_B.J_size_idx_0 = 0; full_loop_B.J_size_idx_0 <
         full_loop_B.loop_ub_ku; full_loop_B.J_size_idx_0++) {
      full_loop_B.J_data[full_loop_B.J_size_idx_0] =
        full_loop_B.A_data_jd[full_loop_B.J_size_idx_0] +
        full_loop_B.tmp_data_i[full_loop_B.J_size_idx_0];
    }

    full_loop_mldivide_p(full_loop_B.J_data, full_loop_B.A_size_j, v_data,
                         v_size, full_loop_B.tmp_data_bo, &full_loop_B.d_size_o);
    *dx_size = full_loop_B.d_size_o;
    full_loop_B.loop_ub_ku = full_loop_B.d_size_o;
    if (0 <= full_loop_B.loop_ub_ku - 1) {
      std::memcpy(&dx_data[0], &full_loop_B.tmp_data_bo[0],
                  full_loop_B.loop_ub_ku * sizeof(real_T));
    }
  } else if ((Jtri_data[Jtri_size[0] - 1] == 0.0) && (Jtri_data[(Jtri_size[0] +
               (Jtri_size[0] << 1)) - 1] == 0.0)) {
    full_loop_sympentdisolve_p(full_loop_B.d_data_i, full_loop_B.e_data_k,
      full_loop_B.f_data_f, v_data, v_size, dx_data, dx_size);
  } else {
    full_loop_cycsympentdisolve_p(full_loop_B.d_data_i, full_loop_B.e_data_k,
      full_loop_B.f_data_f, v_data, v_size, dx_data, dx_size);
  }
}

void full_loopModelClass::full_loop_mulJtJ(const real_T Jtri_data[], const
  int32_T Jtri_size[2], const real_T x_data[], const int32_T *x_size, real_T
  y_data[], int32_T *y_size)
{
  int32_T y_size_idx_1_tmp;
  int32_T y_size_idx_1_tmp_0;
  full_loop_B.loop_ub_n3 = Jtri_size[0];
  if (0 <= full_loop_B.loop_ub_n3 - 1) {
    std::memcpy(&full_loop_B.lower_data_f[0], &Jtri_data[0],
                full_loop_B.loop_ub_n3 * sizeof(real_T));
  }

  full_loop_B.loop_ub_n3 = Jtri_size[0];
  for (full_loop_B.i10 = 0; full_loop_B.i10 < full_loop_B.loop_ub_n3;
       full_loop_B.i10++) {
    full_loop_B.center_data_j[full_loop_B.i10] = Jtri_data[full_loop_B.i10 +
      Jtri_size[0]];
  }

  full_loop_B.loop_ub_me = Jtri_size[0];
  for (full_loop_B.i10 = 0; full_loop_B.i10 < full_loop_B.loop_ub_me;
       full_loop_B.i10++) {
    full_loop_B.upper_data_k[full_loop_B.i10] = Jtri_data[(Jtri_size[0] << 1) +
      full_loop_B.i10];
  }

  if (*x_size < 2) {
    full_loop_B.y_size_idx_1_m4 = 0;
  } else {
    full_loop_B.y_size_idx_1_m4 = *x_size - 1;
    full_loop_B.loop_ub_me = *x_size - 2;
    for (full_loop_B.i10 = 0; full_loop_B.i10 <= full_loop_B.loop_ub_me;
         full_loop_B.i10++) {
      full_loop_B.y_data_hm[full_loop_B.i10] = static_cast<real_T>
        (full_loop_B.i10) + 2.0;
    }
  }

  if (static_cast<real_T>(*x_size) - 1.0 < 1.0) {
    y_size_idx_1_tmp_0 = 0;
    full_loop_B.loop_ub_me = 0;
  } else {
    y_size_idx_1_tmp = static_cast<int32_T>((static_cast<real_T>(*x_size) - 1.0)
      - 1.0);
    y_size_idx_1_tmp_0 = y_size_idx_1_tmp + 1;
    for (full_loop_B.i10 = 0; full_loop_B.i10 <= y_size_idx_1_tmp;
         full_loop_B.i10++) {
      full_loop_B.y_data_c2[full_loop_B.i10] = static_cast<real_T>
        (full_loop_B.i10) + 1.0;
    }

    full_loop_B.loop_ub_me = y_size_idx_1_tmp_0;
    for (full_loop_B.i10 = 0; full_loop_B.i10 <= y_size_idx_1_tmp;
         full_loop_B.i10++) {
      full_loop_B.y_data_a[full_loop_B.i10] = static_cast<real_T>
        (full_loop_B.i10) + 1.0;
    }
  }

  for (full_loop_B.i10 = 0; full_loop_B.i10 < full_loop_B.y_size_idx_1_m4;
       full_loop_B.i10++) {
    full_loop_B.y_data_ge[full_loop_B.i10] = static_cast<int32_T>
      (full_loop_B.y_data_hm[full_loop_B.i10]) - 1;
  }

  full_loop_B.y_data_ge[full_loop_B.y_size_idx_1_m4] = 0;
  full_loop_B.x_data_g[0] = *x_size - 1;
  for (full_loop_B.i10 = 0; full_loop_B.i10 < y_size_idx_1_tmp_0;
       full_loop_B.i10++) {
    full_loop_B.x_data_g[full_loop_B.i10 + 1] = static_cast<int32_T>
      (full_loop_B.y_data_c2[full_loop_B.i10]) - 1;
  }

  full_loop_B.x_data_gr[0] = *x_size - 1;
  for (full_loop_B.i10 = 0; full_loop_B.i10 < full_loop_B.loop_ub_me;
       full_loop_B.i10++) {
    full_loop_B.x_data_gr[full_loop_B.i10 + 1] = static_cast<int32_T>
      (full_loop_B.y_data_a[full_loop_B.i10]) - 1;
  }

  for (full_loop_B.i10 = 0; full_loop_B.i10 < full_loop_B.loop_ub_n3;
       full_loop_B.i10++) {
    full_loop_B.z_data_b[full_loop_B.i10] =
      (full_loop_B.center_data_j[full_loop_B.i10] * x_data[full_loop_B.i10] +
       full_loop_B.upper_data_k[full_loop_B.i10] *
       x_data[full_loop_B.y_data_ge[full_loop_B.i10]]) +
      full_loop_B.lower_data_f[full_loop_B.x_data_g[full_loop_B.i10]] *
      x_data[full_loop_B.x_data_gr[full_loop_B.i10]];
  }

  if (*x_size < 2) {
    full_loop_B.y_size_idx_1_m4 = 0;
  } else {
    full_loop_B.y_size_idx_1_m4 = *x_size - 1;
    full_loop_B.loop_ub_me = *x_size - 2;
    for (full_loop_B.i10 = 0; full_loop_B.i10 <= full_loop_B.loop_ub_me;
         full_loop_B.i10++) {
      full_loop_B.y_data_hm[full_loop_B.i10] = static_cast<real_T>
        (full_loop_B.i10) + 2.0;
    }
  }

  if (static_cast<real_T>(*x_size) - 1.0 < 1.0) {
    y_size_idx_1_tmp_0 = 0;
    full_loop_B.loop_ub_me = 0;
  } else {
    y_size_idx_1_tmp_0 = static_cast<int32_T>((static_cast<real_T>(*x_size) -
      1.0) - 1.0) + 1;
    y_size_idx_1_tmp = static_cast<int32_T>((static_cast<real_T>(*x_size) - 1.0)
      - 1.0);
    for (full_loop_B.i10 = 0; full_loop_B.i10 <= y_size_idx_1_tmp;
         full_loop_B.i10++) {
      full_loop_B.y_data_c2[full_loop_B.i10] = static_cast<real_T>
        (full_loop_B.i10) + 1.0;
    }

    full_loop_B.loop_ub_me = y_size_idx_1_tmp_0;
    for (full_loop_B.i10 = 0; full_loop_B.i10 <= y_size_idx_1_tmp;
         full_loop_B.i10++) {
      full_loop_B.y_data_a[full_loop_B.i10] = static_cast<real_T>
        (full_loop_B.i10) + 1.0;
    }
  }

  for (full_loop_B.i10 = 0; full_loop_B.i10 < full_loop_B.y_size_idx_1_m4;
       full_loop_B.i10++) {
    full_loop_B.y_data_ge[full_loop_B.i10] = static_cast<int32_T>
      (full_loop_B.y_data_hm[full_loop_B.i10]) - 1;
  }

  full_loop_B.y_data_ge[full_loop_B.y_size_idx_1_m4] = 0;
  full_loop_B.x_data_g[0] = *x_size - 1;
  for (full_loop_B.i10 = 0; full_loop_B.i10 < y_size_idx_1_tmp_0;
       full_loop_B.i10++) {
    full_loop_B.x_data_g[full_loop_B.i10 + 1] = static_cast<int32_T>
      (full_loop_B.y_data_c2[full_loop_B.i10]) - 1;
  }

  full_loop_B.x_data_gr[0] = *x_size - 1;
  for (full_loop_B.i10 = 0; full_loop_B.i10 < full_loop_B.loop_ub_me;
       full_loop_B.i10++) {
    full_loop_B.x_data_gr[full_loop_B.i10 + 1] = static_cast<int32_T>
      (full_loop_B.y_data_a[full_loop_B.i10]) - 1;
  }

  *y_size = Jtri_size[0];
  for (full_loop_B.i10 = 0; full_loop_B.i10 < full_loop_B.loop_ub_n3;
       full_loop_B.i10++) {
    y_data[full_loop_B.i10] = (full_loop_B.center_data_j[full_loop_B.i10] *
      full_loop_B.z_data_b[full_loop_B.i10] +
      full_loop_B.lower_data_f[full_loop_B.i10] *
      full_loop_B.z_data_b[full_loop_B.y_data_ge[full_loop_B.i10]]) +
      full_loop_B.upper_data_k[full_loop_B.x_data_g[full_loop_B.i10]] *
      full_loop_B.z_data_b[full_loop_B.x_data_gr[full_loop_B.i10]];
  }
}

real_T full_loopModelClass::full_loop_norm_p4(const real_T x_data[], const
  int32_T *x_size)
{
  real_T y;
  real_T scale;
  int32_T kend;
  real_T absxk;
  real_T t;
  int32_T b_k;
  if (*x_size == 0) {
    y = 0.0;
  } else {
    y = 0.0;
    if (*x_size >= 1) {
      if (*x_size == 1) {
        y = std::abs(x_data[0]);
      } else {
        scale = 3.3121686421112381E-170;
        kend = *x_size - 1;
        for (b_k = 0; b_k <= kend; b_k++) {
          absxk = std::abs(x_data[b_k]);
          if (absxk > scale) {
            t = scale / absxk;
            y = y * t * t + 1.0;
            scale = absxk;
          } else {
            t = absxk / scale;
            y += t * t;
          }
        }

        y = scale * std::sqrt(y);
      }
    }
  }

  return y;
}

void full_loopModelClass::full_loop_tridisolve(const real_T a_data[], real_T
  b_data[], const real_T c_data[], const real_T d_data[], const int32_T *d_size,
  real_T x_data[], int32_T *x_size)
{
  int32_T loop_ub;
  int32_T x_data_tmp;
  *x_size = *d_size;
  if (0 <= *d_size - 1) {
    std::memcpy(&x_data[0], &d_data[0], *d_size * sizeof(real_T));
  }

  full_loop_B.f_b = *d_size - 2;
  for (loop_ub = 0; loop_ub <= full_loop_B.f_b; loop_ub++) {
    full_loop_B.mu = a_data[loop_ub] / b_data[loop_ub];
    x_data_tmp = static_cast<int32_T>((static_cast<real_T>(loop_ub) + 1.0) + 1.0)
      - 1;
    b_data[x_data_tmp] -= full_loop_B.mu * c_data[loop_ub];
    x_data[x_data_tmp] -= full_loop_B.mu * x_data[loop_ub];
  }

  x_data[*d_size - 1] /= b_data[*d_size - 1];
  full_loop_B.f_b = static_cast<int32_T>(((-1.0 - (static_cast<real_T>(*d_size)
    - 1.0)) + 1.0) / -1.0) - 1;
  for (loop_ub = 0; loop_ub <= full_loop_B.f_b; loop_ub++) {
    full_loop_B.mu = (static_cast<real_T>(*d_size) - 1.0) + -static_cast<real_T>
      (loop_ub);
    x_data_tmp = static_cast<int32_T>(full_loop_B.mu) - 1;
    x_data[x_data_tmp] = (x_data[x_data_tmp] - x_data[static_cast<int32_T>
                          (full_loop_B.mu + 1.0) - 1] * c_data[x_data_tmp]) /
      b_data[x_data_tmp];
  }
}

void full_loopModelClass::full_loop_cyctridisolve_p(const real_T a_data[],
  real_T b_data[], const int32_T *b_size, const real_T c_data[], const real_T
  d_data[], const int32_T *d_size, real_T x_data[], int32_T *x_size)
{
  full_loop_B.b_gamma_i = -b_data[0];
  b_data[0] -= -b_data[0];
  full_loop_B.d4 = c_data[*d_size - 1];
  full_loop_B.d5 = a_data[*d_size - 1];
  b_data[*d_size - 1] -= full_loop_B.d5 * full_loop_B.d4 / full_loop_B.b_gamma_i;
  full_loop_B.loop_ub_m = *b_size;
  if (0 <= full_loop_B.loop_ub_m - 1) {
    std::memcpy(&full_loop_B.b_data_cf[0], &b_data[0], full_loop_B.loop_ub_m *
                sizeof(real_T));
  }

  full_loop_tridisolve(a_data, full_loop_B.b_data_cf, c_data, d_data, d_size,
                       x_data, x_size);
  full_loop_B.u_size_i = *d_size;
  full_loop_B.loop_ub_m = *d_size;
  if (0 <= full_loop_B.loop_ub_m - 1) {
    std::memset(&full_loop_B.u_data_j[0], 0, full_loop_B.loop_ub_m * sizeof
                (real_T));
  }

  full_loop_B.u_data_j[0] = full_loop_B.b_gamma_i;
  full_loop_B.u_data_j[*d_size - 1] = full_loop_B.d4;
  if (2.0 > static_cast<real_T>(*d_size) - 1.0) {
    full_loop_B.loop_ub_m = 0;
    full_loop_B.f_f = 0;
  } else {
    full_loop_B.loop_ub_m = 1;
    full_loop_B.f_f = *d_size - 1;
  }

  full_loop_B.h_size_idx_1_tmp = full_loop_B.f_f - full_loop_B.loop_ub_m;
  for (full_loop_B.f_f = 0; full_loop_B.f_f < full_loop_B.h_size_idx_1_tmp;
       full_loop_B.f_f++) {
    full_loop_B.h_data_a[full_loop_B.f_f] = full_loop_B.loop_ub_m +
      full_loop_B.f_f;
  }

  for (full_loop_B.f_f = 0; full_loop_B.f_f < full_loop_B.h_size_idx_1_tmp;
       full_loop_B.f_f++) {
    full_loop_B.u_data_j[full_loop_B.h_data_a[full_loop_B.f_f]] = 0.0;
  }

  full_loop_B.loop_ub_m = *b_size;
  if (0 <= full_loop_B.loop_ub_m - 1) {
    std::memcpy(&full_loop_B.b_data_cf[0], &b_data[0], full_loop_B.loop_ub_m *
                sizeof(real_T));
  }

  full_loop_tridisolve(a_data, full_loop_B.b_data_cf, c_data,
                       full_loop_B.u_data_j, &full_loop_B.u_size_i,
                       full_loop_B.z_data_h, &full_loop_B.z_size_i);
  full_loop_B.b_gamma_i = (full_loop_B.d5 * x_data[*d_size - 1] /
    full_loop_B.b_gamma_i + x_data[0]) / (full_loop_B.d5 * full_loop_B.z_data_h[*
    d_size - 1] / full_loop_B.b_gamma_i + (full_loop_B.z_data_h[0] + 1.0));
  full_loop_B.loop_ub_m = *x_size;
  for (full_loop_B.f_f = 0; full_loop_B.f_f < full_loop_B.loop_ub_m;
       full_loop_B.f_f++) {
    x_data[full_loop_B.f_f] -= full_loop_B.b_gamma_i *
      full_loop_B.z_data_h[full_loop_B.f_f];
  }
}

void full_loopModelClass::full_loop_solveHessian_p(const real_T Jtri_data[],
  const int32_T Jtri_size[2], const real_T v_data[], const int32_T *v_size,
  real_T dx_data[], int32_T *dx_size)
{
  full_loop_B.loop_ub_ka = Jtri_size[0];
  if (0 <= full_loop_B.loop_ub_ka - 1) {
    std::memcpy(&full_loop_B.lower_data[0], &Jtri_data[0],
                full_loop_B.loop_ub_ka * sizeof(real_T));
  }

  full_loop_B.loop_ub_ka = Jtri_size[0];
  full_loop_B.center_size = Jtri_size[0];
  for (full_loop_B.i6 = 0; full_loop_B.i6 < full_loop_B.loop_ub_ka;
       full_loop_B.i6++) {
    full_loop_B.center_data[full_loop_B.i6] = Jtri_data[full_loop_B.i6 +
      Jtri_size[0]];
  }

  full_loop_B.loop_ub_ka = Jtri_size[0];
  for (full_loop_B.i6 = 0; full_loop_B.i6 < full_loop_B.loop_ub_ka;
       full_loop_B.i6++) {
    full_loop_B.upper_data[full_loop_B.i6] = Jtri_data[(Jtri_size[0] << 1) +
      full_loop_B.i6];
  }

  if ((Jtri_data[Jtri_size[0] - 1] == 0.0) && (Jtri_data[(Jtri_size[0] +
        (Jtri_size[0] << 1)) - 1] == 0.0)) {
    full_loop_B.loop_ub_ka = Jtri_size[0];
    if (0 <= full_loop_B.loop_ub_ka - 1) {
      std::memcpy(&full_loop_B.center_data_f[0], &full_loop_B.center_data[0],
                  full_loop_B.loop_ub_ka * sizeof(real_T));
    }

    full_loop_tridisolve(full_loop_B.upper_data, full_loop_B.center_data_f,
                         full_loop_B.lower_data, v_data, v_size,
                         full_loop_B.tmp_data_jo, &full_loop_B.tmp_size_kg);
    full_loop_tridisolve(full_loop_B.lower_data, full_loop_B.center_data,
                         full_loop_B.upper_data, full_loop_B.tmp_data_jo,
                         &full_loop_B.tmp_size_kg, dx_data, dx_size);
  } else {
    full_loop_B.center_size_n = Jtri_size[0];
    full_loop_B.loop_ub_ka = Jtri_size[0];
    if (0 <= full_loop_B.loop_ub_ka - 1) {
      std::memcpy(&full_loop_B.center_data_f[0], &full_loop_B.center_data[0],
                  full_loop_B.loop_ub_ka * sizeof(real_T));
    }

    full_loop_cyctridisolve_p(full_loop_B.upper_data, full_loop_B.center_data_f,
      &full_loop_B.center_size_n, full_loop_B.lower_data, v_data, v_size,
      full_loop_B.tmp_data_jo, &full_loop_B.tmp_size_kg);
    full_loop_cyctridisolve_p(full_loop_B.lower_data, full_loop_B.center_data,
      &full_loop_B.center_size, full_loop_B.upper_data, full_loop_B.tmp_data_jo,
      &full_loop_B.tmp_size_kg, dx_data, dx_size);
  }
}

boolean_T full_loopModelClass::full_loop_anyNonFinite(const real_T x_data[],
  const int32_T x_size[2])
{
  boolean_T p;
  int32_T nx;
  int32_T b_k;
  nx = x_size[0] * x_size[1] - 1;
  p = true;
  for (b_k = 0; b_k <= nx; b_k++) {
    if (p && ((!rtIsInf(x_data[b_k])) && (!rtIsNaN(x_data[b_k])))) {
    } else {
      p = false;
    }
  }

  return !p;
}

boolean_T full_loopModelClass::full_loop_ishermitian(const real_T A_data[],
  const int32_T A_size[2])
{
  boolean_T p;
  int32_T b_j;
  int32_T b_i;
  int32_T exitg1;
  boolean_T exitg2;
  p = (A_size[0] == A_size[1]);
  if (p) {
    b_j = 0;
    exitg2 = false;
    while ((!exitg2) && (b_j <= A_size[1] - 1)) {
      b_i = 0;
      do {
        exitg1 = 0;
        if (b_i <= b_j) {
          if (!(A_data[A_size[0] * b_j + b_i] == A_data[A_size[0] * b_i + b_j]))
          {
            p = false;
            exitg1 = 1;
          } else {
            b_i++;
          }
        } else {
          b_j++;
          exitg1 = 2;
        }
      } while (exitg1 == 0);

      if (exitg1 == 1) {
        exitg2 = true;
      }
    }
  }

  return p;
}

real_T full_loopModelClass::full_loop_xzlangeM_p(const creal_T x_data[], const
  int32_T x_size[2])
{
  real_T y;
  real_T absxk;
  int32_T b_k;
  boolean_T d;
  boolean_T e;
  boolean_T exitg1;
  y = 0.0;
  d = (x_size[0] == 0);
  e = (x_size[1] == 0);
  if ((!d) && (!e)) {
    b_k = 0;
    exitg1 = false;
    while ((!exitg1) && (b_k <= x_size[0] * x_size[1] - 1)) {
      absxk = full_loop_rt_hypotd_snf(x_data[b_k].re, x_data[b_k].im);
      if (rtIsNaN(absxk)) {
        y = (rtNaN);
        exitg1 = true;
      } else {
        if (absxk > y) {
          y = absxk;
        }

        b_k++;
      }
    }
  }

  return y;
}

boolean_T full_loopModelClass::full_loop_isfinite_p(real_T x)
{
  return (!rtIsInf(x)) && (!rtIsNaN(x));
}

void full_loopModelClass::full_loop_xzlascl_p4(real_T cfrom, real_T cto, const
  creal_T A_data[], const int32_T A_size[2], creal_T b_A_data[], int32_T
  b_A_size[2])
{
  boolean_T notdone;
  int32_T i;
  b_A_size[0] = A_size[0];
  b_A_size[1] = A_size[1];
  full_loop_B.loop_ub_ee = A_size[0] * A_size[1] - 1;
  if (0 <= full_loop_B.loop_ub_ee) {
    std::memcpy(&b_A_data[0], &A_data[0], (full_loop_B.loop_ub_ee + 1) * sizeof
                (creal_T));
  }

  full_loop_B.cfromc = cfrom;
  full_loop_B.ctoc = cto;
  notdone = true;
  while (notdone) {
    full_loop_B.cfrom1 = full_loop_B.cfromc * 2.0041683600089728E-292;
    full_loop_B.cto1 = full_loop_B.ctoc / 4.9896007738368E+291;
    if ((std::abs(full_loop_B.cfrom1) > std::abs(full_loop_B.ctoc)) &&
        (full_loop_B.ctoc != 0.0)) {
      full_loop_B.mul = 2.0041683600089728E-292;
      full_loop_B.cfromc = full_loop_B.cfrom1;
    } else if (std::abs(full_loop_B.cto1) > std::abs(full_loop_B.cfromc)) {
      full_loop_B.mul = 4.9896007738368E+291;
      full_loop_B.ctoc = full_loop_B.cto1;
    } else {
      full_loop_B.mul = full_loop_B.ctoc / full_loop_B.cfromc;
      notdone = false;
    }

    full_loop_B.loop_ub_ee = b_A_size[0] * b_A_size[1] - 1;
    for (i = 0; i <= full_loop_B.loop_ub_ee; i++) {
      full_loop_B.b_A_data_g.re = full_loop_B.mul * b_A_data[i].re;
      full_loop_B.b_A_data_g.im = full_loop_B.mul * b_A_data[i].im;
      b_A_data[i] = full_loop_B.b_A_data_g;
    }
  }
}

void full_loopModelClass::full_loop_xzggbal_p(const creal_T A_data[], const
  int32_T A_size[2], creal_T b_A_data[], int32_T b_A_size[2], int32_T *ilo,
  int32_T *ihi, int32_T rscale_data[], int32_T *rscale_size)
{
  boolean_T found;
  int32_T atmp_im_tmp;
  int32_T exitg1;
  int32_T exitg2;
  boolean_T exitg3;
  boolean_T exitg4;
  b_A_size[0] = A_size[0];
  b_A_size[1] = A_size[1];
  full_loop_B.ii_h = A_size[0] * A_size[1] - 1;
  if (0 <= full_loop_B.ii_h) {
    std::memcpy(&b_A_data[0], &A_data[0], (full_loop_B.ii_h + 1) * sizeof
                (creal_T));
  }

  *rscale_size = A_size[0];
  full_loop_B.ii_h = A_size[0];
  for (full_loop_B.c_A_size_idx_0_k = 0; full_loop_B.c_A_size_idx_0_k <
       full_loop_B.ii_h; full_loop_B.c_A_size_idx_0_k++) {
    rscale_data[full_loop_B.c_A_size_idx_0_k] = 1;
  }

  *ilo = 1;
  *ihi = A_size[0];
  if (A_size[0] <= 1) {
    *ihi = 1;
  } else {
    do {
      exitg2 = 0;
      full_loop_B.i_da = -1;
      full_loop_B.j_a = 0;
      found = false;
      full_loop_B.ii_h = *ihi;
      exitg3 = false;
      while ((!exitg3) && (full_loop_B.ii_h > 0)) {
        full_loop_B.nzcount = 0;
        full_loop_B.i_da = full_loop_B.ii_h - 1;
        full_loop_B.j_a = *ihi;
        full_loop_B.b_jj = 1;
        exitg4 = false;
        while ((!exitg4) && (full_loop_B.b_jj - 1 <= *ihi - 1)) {
          full_loop_B.c_A_size_idx_0_k = ((full_loop_B.b_jj - 1) * b_A_size[0] +
            full_loop_B.ii_h) - 1;
          if ((b_A_data[full_loop_B.c_A_size_idx_0_k].re != 0.0) ||
              (b_A_data[full_loop_B.c_A_size_idx_0_k].im != 0.0) ||
              (full_loop_B.ii_h == full_loop_B.b_jj)) {
            if (full_loop_B.nzcount == 0) {
              full_loop_B.j_a = full_loop_B.b_jj;
              full_loop_B.nzcount = 1;
              full_loop_B.b_jj++;
            } else {
              full_loop_B.nzcount = 2;
              exitg4 = true;
            }
          } else {
            full_loop_B.b_jj++;
          }
        }

        if (full_loop_B.nzcount < 2) {
          found = true;
          exitg3 = true;
        } else {
          full_loop_B.ii_h--;
        }
      }

      if (!found) {
        exitg2 = 2;
      } else {
        full_loop_B.c_A_size_idx_0_k = b_A_size[0];
        full_loop_B.ii_h = b_A_size[0] * b_A_size[1] - 1;
        if (0 <= full_loop_B.ii_h) {
          std::memcpy(&full_loop_B.c_A_data[0], &b_A_data[0], (full_loop_B.ii_h
            + 1) * sizeof(creal_T));
        }

        full_loop_B.nzcount = b_A_size[0];
        if (full_loop_B.i_da + 1 != *ihi) {
          for (full_loop_B.ii_h = 1; full_loop_B.ii_h <= full_loop_B.nzcount;
               full_loop_B.ii_h++) {
            full_loop_B.atmp_re = full_loop_B.c_A_data[(full_loop_B.ii_h - 1) *
              full_loop_B.c_A_size_idx_0_k + full_loop_B.i_da].re;
            full_loop_B.b_jj = (full_loop_B.ii_h - 1) *
              full_loop_B.c_A_size_idx_0_k;
            atmp_im_tmp = full_loop_B.b_jj + full_loop_B.i_da;
            full_loop_B.atmp_im = full_loop_B.c_A_data[atmp_im_tmp].im;
            full_loop_B.b_jj = (full_loop_B.b_jj + *ihi) - 1;
            full_loop_B.c_A_data[atmp_im_tmp] =
              full_loop_B.c_A_data[full_loop_B.b_jj];
            full_loop_B.c_A_data[full_loop_B.b_jj].re = full_loop_B.atmp_re;
            full_loop_B.c_A_data[full_loop_B.b_jj].im = full_loop_B.atmp_im;
          }
        }

        if (full_loop_B.j_a != *ihi) {
          for (full_loop_B.i_da = 0; full_loop_B.i_da < *ihi; full_loop_B.i_da++)
          {
            atmp_im_tmp = (full_loop_B.j_a - 1) * full_loop_B.c_A_size_idx_0_k +
              full_loop_B.i_da;
            full_loop_B.atmp_re = full_loop_B.c_A_data[atmp_im_tmp].re;
            full_loop_B.atmp_im = full_loop_B.c_A_data[atmp_im_tmp].im;
            full_loop_B.b_jj = (*ihi - 1) * full_loop_B.c_A_size_idx_0_k +
              full_loop_B.i_da;
            full_loop_B.c_A_data[atmp_im_tmp] =
              full_loop_B.c_A_data[full_loop_B.b_jj];
            full_loop_B.c_A_data[full_loop_B.b_jj].re = full_loop_B.atmp_re;
            full_loop_B.c_A_data[full_loop_B.b_jj].im = full_loop_B.atmp_im;
          }
        }

        full_loop_B.ii_h = b_A_size[0] * b_A_size[1] - 1;
        if (0 <= full_loop_B.ii_h) {
          std::memcpy(&b_A_data[0], &full_loop_B.c_A_data[0], (full_loop_B.ii_h
            + 1) * sizeof(creal_T));
        }

        rscale_data[*ihi - 1] = full_loop_B.j_a;
        (*ihi)--;
        if (*ihi == 1) {
          rscale_data[0] = 1;
          exitg2 = 1;
        }
      }
    } while (exitg2 == 0);

    if (exitg2 == 1) {
    } else {
      do {
        exitg1 = 0;
        full_loop_B.i_da = 0;
        full_loop_B.j_a = 0;
        found = false;
        full_loop_B.b_jj = *ilo;
        exitg3 = false;
        while ((!exitg3) && (full_loop_B.b_jj <= *ihi)) {
          full_loop_B.nzcount = 0;
          full_loop_B.i_da = *ihi;
          full_loop_B.j_a = full_loop_B.b_jj;
          full_loop_B.ii_h = *ilo;
          exitg4 = false;
          while ((!exitg4) && (full_loop_B.ii_h <= *ihi)) {
            full_loop_B.c_A_size_idx_0_k = ((full_loop_B.b_jj - 1) * b_A_size[0]
              + full_loop_B.ii_h) - 1;
            if ((b_A_data[full_loop_B.c_A_size_idx_0_k].re != 0.0) ||
                (b_A_data[full_loop_B.c_A_size_idx_0_k].im != 0.0) ||
                (full_loop_B.ii_h == full_loop_B.b_jj)) {
              if (full_loop_B.nzcount == 0) {
                full_loop_B.i_da = full_loop_B.ii_h;
                full_loop_B.nzcount = 1;
                full_loop_B.ii_h++;
              } else {
                full_loop_B.nzcount = 2;
                exitg4 = true;
              }
            } else {
              full_loop_B.ii_h++;
            }
          }

          if (full_loop_B.nzcount < 2) {
            found = true;
            exitg3 = true;
          } else {
            full_loop_B.b_jj++;
          }
        }

        if (!found) {
          exitg1 = 1;
        } else {
          full_loop_B.c_A_size_idx_0_k = b_A_size[0];
          full_loop_B.ii_h = b_A_size[0] * b_A_size[1] - 1;
          if (0 <= full_loop_B.ii_h) {
            std::memcpy(&full_loop_B.c_A_data[0], &b_A_data[0],
                        (full_loop_B.ii_h + 1) * sizeof(creal_T));
          }

          full_loop_B.nzcount = b_A_size[0];
          if (full_loop_B.i_da != *ilo) {
            for (full_loop_B.ii_h = *ilo; full_loop_B.ii_h <=
                 full_loop_B.nzcount; full_loop_B.ii_h++) {
              full_loop_B.b_jj = (full_loop_B.ii_h - 1) *
                full_loop_B.c_A_size_idx_0_k;
              atmp_im_tmp = (full_loop_B.b_jj + full_loop_B.i_da) - 1;
              full_loop_B.atmp_re = full_loop_B.c_A_data[atmp_im_tmp].re;
              full_loop_B.atmp_im = full_loop_B.c_A_data[atmp_im_tmp].im;
              full_loop_B.b_jj = (full_loop_B.b_jj + *ilo) - 1;
              full_loop_B.c_A_data[atmp_im_tmp] =
                full_loop_B.c_A_data[full_loop_B.b_jj];
              full_loop_B.c_A_data[full_loop_B.b_jj].re = full_loop_B.atmp_re;
              full_loop_B.c_A_data[full_loop_B.b_jj].im = full_loop_B.atmp_im;
            }
          }

          if (full_loop_B.j_a != *ilo) {
            for (full_loop_B.i_da = 0; full_loop_B.i_da < *ihi; full_loop_B.i_da
                 ++) {
              atmp_im_tmp = (full_loop_B.j_a - 1) * full_loop_B.c_A_size_idx_0_k
                + full_loop_B.i_da;
              full_loop_B.atmp_re = full_loop_B.c_A_data[atmp_im_tmp].re;
              full_loop_B.atmp_im = full_loop_B.c_A_data[atmp_im_tmp].im;
              full_loop_B.b_jj = (*ilo - 1) * full_loop_B.c_A_size_idx_0_k +
                full_loop_B.i_da;
              full_loop_B.c_A_data[atmp_im_tmp] =
                full_loop_B.c_A_data[full_loop_B.b_jj];
              full_loop_B.c_A_data[full_loop_B.b_jj].re = full_loop_B.atmp_re;
              full_loop_B.c_A_data[full_loop_B.b_jj].im = full_loop_B.atmp_im;
            }
          }

          full_loop_B.ii_h = b_A_size[0] * b_A_size[1] - 1;
          if (0 <= full_loop_B.ii_h) {
            std::memcpy(&b_A_data[0], &full_loop_B.c_A_data[0],
                        (full_loop_B.ii_h + 1) * sizeof(creal_T));
          }

          rscale_data[*ilo - 1] = full_loop_B.j_a;
          (*ilo)++;
          if (*ilo == *ihi) {
            rscale_data[*ilo - 1] = *ilo;
            exitg1 = 1;
          }
        }
      } while (exitg1 == 0);
    }
  }
}

void full_loopModelClass::full_loop_xzlartg(const creal_T f, const creal_T g,
  real_T *cs, creal_T *sn, creal_T *r)
{
  boolean_T guard1 = false;
  full_loop_B.f2s = std::abs(f.re);
  full_loop_B.di = std::abs(f.im);
  full_loop_B.scale_ck = full_loop_B.f2s;
  if (full_loop_B.di > full_loop_B.f2s) {
    full_loop_B.scale_ck = full_loop_B.di;
  }

  full_loop_B.gs_re = std::abs(g.re);
  full_loop_B.gs_im = std::abs(g.im);
  if (full_loop_B.gs_im > full_loop_B.gs_re) {
    full_loop_B.gs_re = full_loop_B.gs_im;
  }

  if (full_loop_B.gs_re > full_loop_B.scale_ck) {
    full_loop_B.scale_ck = full_loop_B.gs_re;
  }

  full_loop_B.fs_re = f.re;
  full_loop_B.fs_im = f.im;
  full_loop_B.gs_re = g.re;
  full_loop_B.gs_im = g.im;
  full_loop_B.count = -1;
  full_loop_B.rescaledir = 0;
  guard1 = false;
  if (full_loop_B.scale_ck >= 7.4428285367870146E+137) {
    do {
      full_loop_B.count++;
      full_loop_B.fs_re *= 1.3435752215134178E-138;
      full_loop_B.fs_im *= 1.3435752215134178E-138;
      full_loop_B.gs_re *= 1.3435752215134178E-138;
      full_loop_B.gs_im *= 1.3435752215134178E-138;
      full_loop_B.scale_ck *= 1.3435752215134178E-138;
    } while (!(full_loop_B.scale_ck < 7.4428285367870146E+137));

    full_loop_B.rescaledir = 1;
    guard1 = true;
  } else if (full_loop_B.scale_ck <= 1.3435752215134178E-138) {
    if ((g.re == 0.0) && (g.im == 0.0)) {
      *cs = 1.0;
      sn->re = 0.0;
      sn->im = 0.0;
      *r = f;
    } else {
      do {
        full_loop_B.count++;
        full_loop_B.fs_re *= 7.4428285367870146E+137;
        full_loop_B.fs_im *= 7.4428285367870146E+137;
        full_loop_B.gs_re *= 7.4428285367870146E+137;
        full_loop_B.gs_im *= 7.4428285367870146E+137;
        full_loop_B.scale_ck *= 7.4428285367870146E+137;
      } while (!(full_loop_B.scale_ck > 1.3435752215134178E-138));

      full_loop_B.rescaledir = -1;
      guard1 = true;
    }
  } else {
    guard1 = true;
  }

  if (guard1) {
    full_loop_B.scale_ck = full_loop_B.fs_re * full_loop_B.fs_re +
      full_loop_B.fs_im * full_loop_B.fs_im;
    full_loop_B.g2 = full_loop_B.gs_re * full_loop_B.gs_re + full_loop_B.gs_im *
      full_loop_B.gs_im;
    full_loop_B.b_x_i = full_loop_B.g2;
    if (1.0 > full_loop_B.g2) {
      full_loop_B.b_x_i = 1.0;
    }

    if (full_loop_B.scale_ck <= full_loop_B.b_x_i * 2.0041683600089728E-292) {
      if ((f.re == 0.0) && (f.im == 0.0)) {
        *cs = 0.0;
        r->re = full_loop_rt_hypotd_snf(g.re, g.im);
        r->im = 0.0;
        full_loop_B.f2s = full_loop_rt_hypotd_snf(full_loop_B.gs_re,
          full_loop_B.gs_im);
        sn->re = full_loop_B.gs_re / full_loop_B.f2s;
        sn->im = -full_loop_B.gs_im / full_loop_B.f2s;
      } else {
        full_loop_B.scale_ck = std::sqrt(full_loop_B.g2);
        *cs = full_loop_rt_hypotd_snf(full_loop_B.fs_re, full_loop_B.fs_im) /
          full_loop_B.scale_ck;
        if (full_loop_B.di > full_loop_B.f2s) {
          full_loop_B.f2s = full_loop_B.di;
        }

        if (full_loop_B.f2s > 1.0) {
          full_loop_B.f2s = full_loop_rt_hypotd_snf(f.re, f.im);
          full_loop_B.fs_re = f.re / full_loop_B.f2s;
          full_loop_B.fs_im = f.im / full_loop_B.f2s;
        } else {
          full_loop_B.fs_re = 7.4428285367870146E+137 * f.re;
          full_loop_B.di = 7.4428285367870146E+137 * f.im;
          full_loop_B.f2s = full_loop_rt_hypotd_snf(full_loop_B.fs_re,
            full_loop_B.di);
          full_loop_B.fs_re /= full_loop_B.f2s;
          full_loop_B.fs_im = full_loop_B.di / full_loop_B.f2s;
        }

        full_loop_B.gs_re /= full_loop_B.scale_ck;
        full_loop_B.gs_im = -full_loop_B.gs_im / full_loop_B.scale_ck;
        sn->re = full_loop_B.fs_re * full_loop_B.gs_re - full_loop_B.fs_im *
          full_loop_B.gs_im;
        sn->im = full_loop_B.fs_re * full_loop_B.gs_im + full_loop_B.fs_im *
          full_loop_B.gs_re;
        r->re = (sn->re * g.re - sn->im * g.im) + *cs * f.re;
        r->im = (sn->re * g.im + sn->im * g.re) + *cs * f.im;
      }
    } else {
      full_loop_B.f2s = std::sqrt(full_loop_B.g2 / full_loop_B.scale_ck + 1.0);
      r->re = full_loop_B.f2s * full_loop_B.fs_re;
      r->im = full_loop_B.f2s * full_loop_B.fs_im;
      *cs = 1.0 / full_loop_B.f2s;
      full_loop_B.f2s = full_loop_B.scale_ck + full_loop_B.g2;
      full_loop_B.fs_re = r->re / full_loop_B.f2s;
      full_loop_B.f2s = r->im / full_loop_B.f2s;
      sn->re = full_loop_B.fs_re * full_loop_B.gs_re - full_loop_B.f2s *
        -full_loop_B.gs_im;
      sn->im = full_loop_B.fs_re * -full_loop_B.gs_im + full_loop_B.f2s *
        full_loop_B.gs_re;
      if (full_loop_B.rescaledir > 0) {
        for (full_loop_B.rescaledir = 0; full_loop_B.rescaledir <=
             full_loop_B.count; full_loop_B.rescaledir++) {
          r->re *= 7.4428285367870146E+137;
          r->im *= 7.4428285367870146E+137;
        }
      } else {
        if (full_loop_B.rescaledir < 0) {
          for (full_loop_B.rescaledir = 0; full_loop_B.rescaledir <=
               full_loop_B.count; full_loop_B.rescaledir++) {
            r->re *= 1.3435752215134178E-138;
            r->im *= 1.3435752215134178E-138;
          }
        }
      }
    }
  }
}

void full_loopModelClass::full_loop_xzgghrd_p(int32_T ilo, int32_T ihi, const
  creal_T A_data[], const int32_T A_size[2], creal_T b_A_data[], int32_T
  b_A_size[2])
{
  int32_T stemp_re_tmp_tmp;
  b_A_size[0] = A_size[0];
  b_A_size[1] = A_size[1];
  full_loop_B.n_bv = A_size[0] * A_size[1] - 1;
  if (0 <= full_loop_B.n_bv) {
    std::memcpy(&b_A_data[0], &A_data[0], (full_loop_B.n_bv + 1) * sizeof
                (creal_T));
  }

  full_loop_B.n_bv = A_size[0];
  if ((A_size[0] > 1) && (ihi >= ilo + 2)) {
    full_loop_B.jcol = ilo - 1;
    while (full_loop_B.jcol + 1 < ihi - 1) {
      full_loop_B.jrow = ihi - 2;
      while (full_loop_B.jrow + 2 > full_loop_B.jcol + 2) {
        full_loop_xzlartg(b_A_data[full_loop_B.jrow + b_A_size[0] *
                          full_loop_B.jcol], b_A_data[(full_loop_B.jrow +
          b_A_size[0] * full_loop_B.jcol) + 1], &full_loop_B.c_pu,
                          &full_loop_B.s_e, &b_A_data[full_loop_B.jrow +
                          b_A_size[0] * full_loop_B.jcol]);
        full_loop_B.stemp_re_tmp = (full_loop_B.jrow + b_A_size[0] *
          full_loop_B.jcol) + 1;
        b_A_data[full_loop_B.stemp_re_tmp].re = 0.0;
        b_A_data[full_loop_B.stemp_re_tmp].im = 0.0;
        for (full_loop_B.j_iz = full_loop_B.jcol + 2; full_loop_B.j_iz <=
             full_loop_B.n_bv; full_loop_B.j_iz++) {
          stemp_re_tmp_tmp = (full_loop_B.j_iz - 1) * b_A_size[0] +
            full_loop_B.jrow;
          full_loop_B.stemp_re_tmp = stemp_re_tmp_tmp + 1;
          full_loop_B.stemp_re_f = (b_A_data[full_loop_B.stemp_re_tmp].re *
            full_loop_B.s_e.re - b_A_data[full_loop_B.stemp_re_tmp].im *
            full_loop_B.s_e.im) + b_A_data[stemp_re_tmp_tmp].re *
            full_loop_B.c_pu;
          full_loop_B.stemp_im_h = (b_A_data[full_loop_B.stemp_re_tmp].im *
            full_loop_B.s_e.re + b_A_data[full_loop_B.stemp_re_tmp].re *
            full_loop_B.s_e.im) + b_A_data[stemp_re_tmp_tmp].im *
            full_loop_B.c_pu;
          full_loop_B.d9 = b_A_data[stemp_re_tmp_tmp].re;
          b_A_data[full_loop_B.stemp_re_tmp].re =
            b_A_data[full_loop_B.stemp_re_tmp].re * full_loop_B.c_pu -
            (b_A_data[stemp_re_tmp_tmp].re * full_loop_B.s_e.re +
             b_A_data[stemp_re_tmp_tmp].im * full_loop_B.s_e.im);
          b_A_data[full_loop_B.stemp_re_tmp].im =
            b_A_data[full_loop_B.stemp_re_tmp].im * full_loop_B.c_pu -
            (b_A_data[stemp_re_tmp_tmp].im * full_loop_B.s_e.re -
             full_loop_B.s_e.im * full_loop_B.d9);
          b_A_data[stemp_re_tmp_tmp].re = full_loop_B.stemp_re_f;
          b_A_data[stemp_re_tmp_tmp].im = full_loop_B.stemp_im_h;
        }

        full_loop_B.s_e.re = -full_loop_B.s_e.re;
        full_loop_B.s_e.im = -full_loop_B.s_e.im;
        for (full_loop_B.j_iz = 1; full_loop_B.j_iz <= ihi; full_loop_B.j_iz++)
        {
          full_loop_B.stemp_re_tmp = (b_A_size[0] * full_loop_B.jrow +
            full_loop_B.j_iz) - 1;
          stemp_re_tmp_tmp = ((full_loop_B.jrow + 1) * b_A_size[0] +
                              full_loop_B.j_iz) - 1;
          full_loop_B.stemp_re_f = b_A_data[stemp_re_tmp_tmp].re *
            full_loop_B.c_pu + (b_A_data[full_loop_B.stemp_re_tmp].re *
                                full_loop_B.s_e.re -
                                b_A_data[full_loop_B.stemp_re_tmp].im *
                                full_loop_B.s_e.im);
          full_loop_B.stemp_im_h = b_A_data[stemp_re_tmp_tmp].im *
            full_loop_B.c_pu + (b_A_data[full_loop_B.stemp_re_tmp].im *
                                full_loop_B.s_e.re +
                                b_A_data[full_loop_B.stemp_re_tmp].re *
                                full_loop_B.s_e.im);
          full_loop_B.d9 = b_A_data[stemp_re_tmp_tmp].re;
          b_A_data[full_loop_B.stemp_re_tmp].re =
            b_A_data[full_loop_B.stemp_re_tmp].re * full_loop_B.c_pu -
            (b_A_data[stemp_re_tmp_tmp].re * full_loop_B.s_e.re +
             b_A_data[stemp_re_tmp_tmp].im * full_loop_B.s_e.im);
          b_A_data[full_loop_B.stemp_re_tmp].im =
            b_A_data[full_loop_B.stemp_re_tmp].im * full_loop_B.c_pu -
            (b_A_data[stemp_re_tmp_tmp].im * full_loop_B.s_e.re -
             full_loop_B.s_e.im * full_loop_B.d9);
          b_A_data[stemp_re_tmp_tmp].re = full_loop_B.stemp_re_f;
          b_A_data[stemp_re_tmp_tmp].im = full_loop_B.stemp_im_h;
        }

        full_loop_B.jrow--;
      }

      full_loop_B.jcol++;
    }
  }
}

real_T full_loopModelClass::full_loop_xzlanhs_p(const creal_T A_data[], const
  int32_T A_size[2], int32_T ilo, int32_T ihi)
{
  real_T f;
  boolean_T firstNonZero;
  f = 0.0;
  if (ilo <= ihi) {
    full_loop_B.scale_h = 0.0;
    full_loop_B.sumsq_b = 0.0;
    firstNonZero = true;
    for (full_loop_B.j_f = ilo; full_loop_B.j_f <= ihi; full_loop_B.j_f++) {
      full_loop_B.b_l = full_loop_B.j_f + 1;
      if (ihi < full_loop_B.j_f + 1) {
        full_loop_B.b_l = ihi;
      }

      for (full_loop_B.i_ob = ilo; full_loop_B.i_ob <= full_loop_B.b_l;
           full_loop_B.i_ob++) {
        full_loop_B.reAij_tmp_l = ((full_loop_B.j_f - 1) * A_size[0] +
          full_loop_B.i_ob) - 1;
        if (A_data[full_loop_B.reAij_tmp_l].re != 0.0) {
          full_loop_B.temp1_p = std::abs(A_data[full_loop_B.reAij_tmp_l].re);
          if (firstNonZero) {
            full_loop_B.sumsq_b = 1.0;
            full_loop_B.scale_h = full_loop_B.temp1_p;
            firstNonZero = false;
          } else if (full_loop_B.scale_h < full_loop_B.temp1_p) {
            full_loop_B.temp2_bp = full_loop_B.scale_h / full_loop_B.temp1_p;
            full_loop_B.sumsq_b = full_loop_B.sumsq_b * full_loop_B.temp2_bp *
              full_loop_B.temp2_bp + 1.0;
            full_loop_B.scale_h = full_loop_B.temp1_p;
          } else {
            full_loop_B.temp2_bp = full_loop_B.temp1_p / full_loop_B.scale_h;
            full_loop_B.sumsq_b += full_loop_B.temp2_bp * full_loop_B.temp2_bp;
          }
        }

        if (A_data[full_loop_B.reAij_tmp_l].im != 0.0) {
          full_loop_B.temp1_p = std::abs(A_data[full_loop_B.reAij_tmp_l].im);
          if (firstNonZero) {
            full_loop_B.sumsq_b = 1.0;
            full_loop_B.scale_h = full_loop_B.temp1_p;
            firstNonZero = false;
          } else if (full_loop_B.scale_h < full_loop_B.temp1_p) {
            full_loop_B.temp2_bp = full_loop_B.scale_h / full_loop_B.temp1_p;
            full_loop_B.sumsq_b = full_loop_B.sumsq_b * full_loop_B.temp2_bp *
              full_loop_B.temp2_bp + 1.0;
            full_loop_B.scale_h = full_loop_B.temp1_p;
          } else {
            full_loop_B.temp2_bp = full_loop_B.temp1_p / full_loop_B.scale_h;
            full_loop_B.sumsq_b += full_loop_B.temp2_bp * full_loop_B.temp2_bp;
          }
        }
      }
    }

    f = full_loop_B.scale_h * std::sqrt(full_loop_B.sumsq_b);
  }

  return f;
}

int32_T full_loopModelClass::full_loop_mod_p(int32_T x)
{
  return x - x / 10 * 10;
}

void full_loopModelClass::full_loop_xzlartg_p(const creal_T f, const creal_T g,
  real_T *cs, creal_T *sn)
{
  boolean_T guard1 = false;
  full_loop_B.f2s_b = std::abs(f.re);
  full_loop_B.di_m = std::abs(f.im);
  full_loop_B.scale_m = full_loop_B.f2s_b;
  if (full_loop_B.di_m > full_loop_B.f2s_b) {
    full_loop_B.scale_m = full_loop_B.di_m;
  }

  full_loop_B.gs_re_m = std::abs(g.re);
  full_loop_B.gs_im_n = std::abs(g.im);
  if (full_loop_B.gs_im_n > full_loop_B.gs_re_m) {
    full_loop_B.gs_re_m = full_loop_B.gs_im_n;
  }

  if (full_loop_B.gs_re_m > full_loop_B.scale_m) {
    full_loop_B.scale_m = full_loop_B.gs_re_m;
  }

  full_loop_B.fs_re_i = f.re;
  full_loop_B.fs_im_g = f.im;
  full_loop_B.gs_re_m = g.re;
  full_loop_B.gs_im_n = g.im;
  guard1 = false;
  if (full_loop_B.scale_m >= 7.4428285367870146E+137) {
    do {
      full_loop_B.fs_re_i *= 1.3435752215134178E-138;
      full_loop_B.fs_im_g *= 1.3435752215134178E-138;
      full_loop_B.gs_re_m *= 1.3435752215134178E-138;
      full_loop_B.gs_im_n *= 1.3435752215134178E-138;
      full_loop_B.scale_m *= 1.3435752215134178E-138;
    } while (!(full_loop_B.scale_m < 7.4428285367870146E+137));

    guard1 = true;
  } else if (full_loop_B.scale_m <= 1.3435752215134178E-138) {
    if ((g.re == 0.0) && (g.im == 0.0)) {
      *cs = 1.0;
      sn->re = 0.0;
      sn->im = 0.0;
    } else {
      do {
        full_loop_B.fs_re_i *= 7.4428285367870146E+137;
        full_loop_B.fs_im_g *= 7.4428285367870146E+137;
        full_loop_B.gs_re_m *= 7.4428285367870146E+137;
        full_loop_B.gs_im_n *= 7.4428285367870146E+137;
        full_loop_B.scale_m *= 7.4428285367870146E+137;
      } while (!(full_loop_B.scale_m > 1.3435752215134178E-138));

      guard1 = true;
    }
  } else {
    guard1 = true;
  }

  if (guard1) {
    full_loop_B.scale_m = full_loop_B.fs_re_i * full_loop_B.fs_re_i +
      full_loop_B.fs_im_g * full_loop_B.fs_im_g;
    full_loop_B.g2_o = full_loop_B.gs_re_m * full_loop_B.gs_re_m +
      full_loop_B.gs_im_n * full_loop_B.gs_im_n;
    full_loop_B.b_x_ii = full_loop_B.g2_o;
    if (1.0 > full_loop_B.g2_o) {
      full_loop_B.b_x_ii = 1.0;
    }

    if (full_loop_B.scale_m <= full_loop_B.b_x_ii * 2.0041683600089728E-292) {
      if ((f.re == 0.0) && (f.im == 0.0)) {
        *cs = 0.0;
        full_loop_B.f2s_b = full_loop_rt_hypotd_snf(full_loop_B.gs_re_m,
          full_loop_B.gs_im_n);
        sn->re = full_loop_B.gs_re_m / full_loop_B.f2s_b;
        sn->im = -full_loop_B.gs_im_n / full_loop_B.f2s_b;
      } else {
        full_loop_B.scale_m = std::sqrt(full_loop_B.g2_o);
        *cs = full_loop_rt_hypotd_snf(full_loop_B.fs_re_i, full_loop_B.fs_im_g) /
          full_loop_B.scale_m;
        if (full_loop_B.di_m > full_loop_B.f2s_b) {
          full_loop_B.f2s_b = full_loop_B.di_m;
        }

        if (full_loop_B.f2s_b > 1.0) {
          full_loop_B.f2s_b = full_loop_rt_hypotd_snf(f.re, f.im);
          full_loop_B.fs_re_i = f.re / full_loop_B.f2s_b;
          full_loop_B.fs_im_g = f.im / full_loop_B.f2s_b;
        } else {
          full_loop_B.fs_re_i = 7.4428285367870146E+137 * f.re;
          full_loop_B.di_m = 7.4428285367870146E+137 * f.im;
          full_loop_B.f2s_b = full_loop_rt_hypotd_snf(full_loop_B.fs_re_i,
            full_loop_B.di_m);
          full_loop_B.fs_re_i /= full_loop_B.f2s_b;
          full_loop_B.fs_im_g = full_loop_B.di_m / full_loop_B.f2s_b;
        }

        full_loop_B.gs_re_m /= full_loop_B.scale_m;
        full_loop_B.gs_im_n = -full_loop_B.gs_im_n / full_loop_B.scale_m;
        sn->re = full_loop_B.fs_re_i * full_loop_B.gs_re_m - full_loop_B.fs_im_g
          * full_loop_B.gs_im_n;
        sn->im = full_loop_B.fs_re_i * full_loop_B.gs_im_n + full_loop_B.fs_im_g
          * full_loop_B.gs_re_m;
      }
    } else {
      full_loop_B.f2s_b = std::sqrt(full_loop_B.g2_o / full_loop_B.scale_m + 1.0);
      full_loop_B.fs_re_i *= full_loop_B.f2s_b;
      full_loop_B.fs_im_g *= full_loop_B.f2s_b;
      *cs = 1.0 / full_loop_B.f2s_b;
      full_loop_B.f2s_b = full_loop_B.scale_m + full_loop_B.g2_o;
      full_loop_B.fs_re_i /= full_loop_B.f2s_b;
      full_loop_B.fs_im_g /= full_loop_B.f2s_b;
      sn->re = full_loop_B.fs_re_i * full_loop_B.gs_re_m - full_loop_B.fs_im_g *
        -full_loop_B.gs_im_n;
      sn->im = full_loop_B.fs_re_i * -full_loop_B.gs_im_n + full_loop_B.fs_im_g *
        full_loop_B.gs_re_m;
    }
  }
}

void full_loopModelClass::full_loop_xzhgeqz_p(const creal_T A_data[], const
  int32_T A_size[2], int32_T ilo, int32_T ihi, int32_T *info, creal_T
  alpha1_data[], int32_T *alpha1_size, creal_T beta1_data[], int32_T *beta1_size)
{
  boolean_T failed;
  boolean_T goto60;
  boolean_T goto70;
  boolean_T goto90;
  boolean_T guard1 = false;
  boolean_T guard2 = false;
  boolean_T guard3 = false;
  int32_T exitg1;
  boolean_T exitg2;
  full_loop_B.b_A_size_idx_0 = A_size[0];
  full_loop_B.ifirst = A_size[0] * A_size[1] - 1;
  if (0 <= full_loop_B.ifirst) {
    std::memcpy(&full_loop_B.b_A_data[0], &A_data[0], (full_loop_B.ifirst + 1) *
                sizeof(creal_T));
  }

  *info = 0;
  if ((A_size[0] == 1) && (A_size[1] == 1)) {
    ihi = 1;
  }

  full_loop_B.n_e = A_size[0];
  *alpha1_size = A_size[0];
  full_loop_B.ifirst = A_size[0];
  if (0 <= full_loop_B.ifirst - 1) {
    std::memset(&alpha1_data[0], 0, full_loop_B.ifirst * sizeof(creal_T));
  }

  *beta1_size = A_size[0];
  full_loop_B.ifirst = A_size[0];
  for (full_loop_B.jp1 = 0; full_loop_B.jp1 < full_loop_B.ifirst;
       full_loop_B.jp1++) {
    beta1_data[full_loop_B.jp1].re = 1.0;
    beta1_data[full_loop_B.jp1].im = 0.0;
  }

  full_loop_B.eshift_re = 0.0;
  full_loop_B.eshift_im = 0.0;
  full_loop_B.ctemp.re = 0.0;
  full_loop_B.ctemp.im = 0.0;
  full_loop_B.anorm = full_loop_xzlanhs_p(A_data, A_size, ilo, ihi);
  full_loop_B.bscale = 2.2204460492503131E-16 * full_loop_B.anorm;
  full_loop_B.b_atol = 2.2250738585072014E-308;
  if (full_loop_B.bscale > 2.2250738585072014E-308) {
    full_loop_B.b_atol = full_loop_B.bscale;
  }

  full_loop_B.bscale = 2.2250738585072014E-308;
  if (full_loop_B.anorm > 2.2250738585072014E-308) {
    full_loop_B.bscale = full_loop_B.anorm;
  }

  full_loop_B.anorm = 1.0 / full_loop_B.bscale;
  full_loop_B.bscale = 1.0 / std::sqrt(static_cast<real_T>(A_size[0]));
  failed = true;
  for (full_loop_B.ifirst = ihi + 1; full_loop_B.ifirst <= full_loop_B.n_e;
       full_loop_B.ifirst++) {
    alpha1_data[full_loop_B.ifirst - 1] = A_data[((full_loop_B.ifirst - 1) *
      A_size[0] + full_loop_B.ifirst) - 1];
  }

  guard1 = false;
  guard2 = false;
  if (ihi >= ilo) {
    full_loop_B.ifirst = ilo;
    full_loop_B.istart_i = ilo;
    full_loop_B.n_e = ihi - 1;
    full_loop_B.ilastm1 = ihi - 2;
    full_loop_B.ilastm = ihi;
    full_loop_B.iiter = 0;
    goto60 = false;
    goto70 = false;
    goto90 = false;
    full_loop_B.jiter = 0;
    do {
      exitg1 = 0;
      if (full_loop_B.jiter <= ((ihi - ilo) + 1) * 30 - 1) {
        if (full_loop_B.n_e + 1 == ilo) {
          goto60 = true;
        } else {
          full_loop_B.jp1 = full_loop_B.b_A_size_idx_0 * full_loop_B.ilastm1 +
            full_loop_B.n_e;
          if (std::abs(full_loop_B.b_A_data[full_loop_B.jp1].re) + std::abs
              (full_loop_B.b_A_data[full_loop_B.jp1].im) <= full_loop_B.b_atol)
          {
            full_loop_B.b_A_data[full_loop_B.jp1].re = 0.0;
            full_loop_B.b_A_data[full_loop_B.jp1].im = 0.0;
            goto60 = true;
          } else {
            full_loop_B.j_b = full_loop_B.ilastm1 + 1;
            guard3 = false;
            exitg2 = false;
            while ((!exitg2) && (full_loop_B.j_b >= ilo)) {
              if (full_loop_B.j_b == ilo) {
                guard3 = true;
                exitg2 = true;
              } else {
                full_loop_B.jp1 = ((full_loop_B.j_b - 2) *
                                   full_loop_B.b_A_size_idx_0 + full_loop_B.j_b)
                  - 1;
                if (std::abs(full_loop_B.b_A_data[full_loop_B.jp1].re) + std::
                    abs(full_loop_B.b_A_data[full_loop_B.jp1].im) <=
                    full_loop_B.b_atol) {
                  full_loop_B.b_A_data[full_loop_B.jp1].re = 0.0;
                  full_loop_B.b_A_data[full_loop_B.jp1].im = 0.0;
                  guard3 = true;
                  exitg2 = true;
                } else {
                  full_loop_B.j_b--;
                  guard3 = false;
                }
              }
            }

            if (guard3) {
              full_loop_B.ifirst = full_loop_B.j_b;
              goto70 = true;
            }
          }
        }

        if (goto60 || goto70) {
          if (goto60) {
            goto60 = false;
            alpha1_data[full_loop_B.n_e] =
              full_loop_B.b_A_data[full_loop_B.b_A_size_idx_0 * full_loop_B.n_e
              + full_loop_B.n_e];
            full_loop_B.n_e = full_loop_B.ilastm1;
            full_loop_B.ilastm1--;
            if (full_loop_B.n_e + 1 < ilo) {
              failed = false;
              guard2 = true;
              exitg1 = 1;
            } else {
              full_loop_B.iiter = 0;
              full_loop_B.eshift_re = 0.0;
              full_loop_B.eshift_im = 0.0;
              full_loop_B.ilastm = full_loop_B.n_e + 1;
              full_loop_B.jiter++;
            }
          } else {
            if (goto70) {
              goto70 = false;
              full_loop_B.iiter++;
              if (full_loop_mod_p(full_loop_B.iiter) != 0) {
                full_loop_B.j_b = full_loop_B.b_A_size_idx_0 *
                  full_loop_B.ilastm1 + full_loop_B.ilastm1;
                full_loop_B.tempr = full_loop_B.b_A_data[full_loop_B.j_b].re *
                  full_loop_B.anorm;
                full_loop_B.ai_g = full_loop_B.b_A_data[full_loop_B.j_b].im *
                  full_loop_B.anorm;
                if (full_loop_B.ai_g == 0.0) {
                  full_loop_B.ad11.re = full_loop_B.tempr / full_loop_B.bscale;
                  full_loop_B.ad11.im = 0.0;
                } else if (full_loop_B.tempr == 0.0) {
                  full_loop_B.ad11.re = 0.0;
                  full_loop_B.ad11.im = full_loop_B.ai_g / full_loop_B.bscale;
                } else {
                  full_loop_B.ad11.re = full_loop_B.tempr / full_loop_B.bscale;
                  full_loop_B.ad11.im = full_loop_B.ai_g / full_loop_B.bscale;
                }

                full_loop_B.j_b = full_loop_B.b_A_size_idx_0 * full_loop_B.n_e +
                  full_loop_B.n_e;
                full_loop_B.tempr = full_loop_B.b_A_data[full_loop_B.j_b].re *
                  full_loop_B.anorm;
                full_loop_B.ai_g = full_loop_B.b_A_data[full_loop_B.j_b].im *
                  full_loop_B.anorm;
                if (full_loop_B.ai_g == 0.0) {
                  full_loop_B.stemp_re = full_loop_B.tempr / full_loop_B.bscale;
                  full_loop_B.stemp_im = 0.0;
                } else if (full_loop_B.tempr == 0.0) {
                  full_loop_B.stemp_re = 0.0;
                  full_loop_B.stemp_im = full_loop_B.ai_g / full_loop_B.bscale;
                } else {
                  full_loop_B.stemp_re = full_loop_B.tempr / full_loop_B.bscale;
                  full_loop_B.stemp_im = full_loop_B.ai_g / full_loop_B.bscale;
                }

                full_loop_B.t1.re = (full_loop_B.ad11.re + full_loop_B.stemp_re)
                  * 0.5;
                full_loop_B.t1.im = (full_loop_B.ad11.im + full_loop_B.stemp_im)
                  * 0.5;
                full_loop_B.j_b = full_loop_B.b_A_size_idx_0 * full_loop_B.n_e +
                  full_loop_B.ilastm1;
                full_loop_B.tempr = full_loop_B.b_A_data[full_loop_B.j_b].re *
                  full_loop_B.anorm;
                full_loop_B.ai_g = full_loop_B.b_A_data[full_loop_B.j_b].im *
                  full_loop_B.anorm;
                if (full_loop_B.ai_g == 0.0) {
                  full_loop_B.temp_b = full_loop_B.tempr / full_loop_B.bscale;
                  full_loop_B.temp2_c = 0.0;
                } else if (full_loop_B.tempr == 0.0) {
                  full_loop_B.temp_b = 0.0;
                  full_loop_B.temp2_c = full_loop_B.ai_g / full_loop_B.bscale;
                } else {
                  full_loop_B.temp_b = full_loop_B.tempr / full_loop_B.bscale;
                  full_loop_B.temp2_c = full_loop_B.ai_g / full_loop_B.bscale;
                }

                full_loop_B.j_b = full_loop_B.b_A_size_idx_0 *
                  full_loop_B.ilastm1 + full_loop_B.n_e;
                full_loop_B.tempr = full_loop_B.b_A_data[full_loop_B.j_b].re *
                  full_loop_B.anorm;
                full_loop_B.ai_g = full_loop_B.b_A_data[full_loop_B.j_b].im *
                  full_loop_B.anorm;
                if (full_loop_B.ai_g == 0.0) {
                  full_loop_B.tempr /= full_loop_B.bscale;
                  full_loop_B.ai_g = 0.0;
                } else if (full_loop_B.tempr == 0.0) {
                  full_loop_B.tempr = 0.0;
                  full_loop_B.ai_g /= full_loop_B.bscale;
                } else {
                  full_loop_B.tempr /= full_loop_B.bscale;
                  full_loop_B.ai_g /= full_loop_B.bscale;
                }

                full_loop_B.t1_l.re = ((full_loop_B.t1.re * full_loop_B.t1.re -
                  full_loop_B.t1.im * full_loop_B.t1.im) + (full_loop_B.temp_b *
                  full_loop_B.tempr - full_loop_B.temp2_c * full_loop_B.ai_g)) -
                  (full_loop_B.ad11.re * full_loop_B.stemp_re -
                   full_loop_B.ad11.im * full_loop_B.stemp_im);
                full_loop_B.t1_tmp = full_loop_B.t1.re * full_loop_B.t1.im;
                full_loop_B.t1_l.im = ((full_loop_B.t1_tmp + full_loop_B.t1_tmp)
                  + (full_loop_B.temp_b * full_loop_B.ai_g + full_loop_B.temp2_c
                     * full_loop_B.tempr)) - (full_loop_B.ad11.re *
                  full_loop_B.stemp_im + full_loop_B.ad11.im *
                  full_loop_B.stemp_re);
                full_loop_B.ad11 = full_loop_sqrt_p(full_loop_B.t1_l);
                if ((full_loop_B.t1.re - full_loop_B.stemp_re) *
                    full_loop_B.ad11.re + (full_loop_B.t1.im -
                     full_loop_B.stemp_im) * full_loop_B.ad11.im <= 0.0) {
                  full_loop_B.stemp_re = full_loop_B.t1.re + full_loop_B.ad11.re;
                  full_loop_B.stemp_im = full_loop_B.t1.im + full_loop_B.ad11.im;
                } else {
                  full_loop_B.stemp_re = full_loop_B.t1.re - full_loop_B.ad11.re;
                  full_loop_B.stemp_im = full_loop_B.t1.im - full_loop_B.ad11.im;
                }
              } else {
                full_loop_B.j_b = full_loop_B.b_A_size_idx_0 *
                  full_loop_B.ilastm1 + full_loop_B.n_e;
                full_loop_B.tempr = full_loop_B.b_A_data[full_loop_B.j_b].re *
                  full_loop_B.anorm;
                full_loop_B.ai_g = full_loop_B.b_A_data[full_loop_B.j_b].im *
                  full_loop_B.anorm;
                if (full_loop_B.ai_g == 0.0) {
                  full_loop_B.temp_b = full_loop_B.tempr / full_loop_B.bscale;
                  full_loop_B.temp2_c = 0.0;
                } else if (full_loop_B.tempr == 0.0) {
                  full_loop_B.temp_b = 0.0;
                  full_loop_B.temp2_c = full_loop_B.ai_g / full_loop_B.bscale;
                } else {
                  full_loop_B.temp_b = full_loop_B.tempr / full_loop_B.bscale;
                  full_loop_B.temp2_c = full_loop_B.ai_g / full_loop_B.bscale;
                }

                full_loop_B.eshift_re += full_loop_B.temp_b;
                full_loop_B.eshift_im += full_loop_B.temp2_c;
                full_loop_B.stemp_re = full_loop_B.eshift_re;
                full_loop_B.stemp_im = full_loop_B.eshift_im;
              }

              full_loop_B.j_b = full_loop_B.ilastm1;
              full_loop_B.jp1 = full_loop_B.ilastm1 + 1;
              exitg2 = false;
              while ((!exitg2) && (full_loop_B.j_b + 1 > full_loop_B.ifirst)) {
                full_loop_B.istart_i = full_loop_B.j_b + 1;
                full_loop_B.ctemp_tmp_tmp = full_loop_B.b_A_size_idx_0 *
                  full_loop_B.j_b;
                full_loop_B.ctemp_tmp = full_loop_B.ctemp_tmp_tmp +
                  full_loop_B.j_b;
                full_loop_B.ctemp.re =
                  full_loop_B.b_A_data[full_loop_B.ctemp_tmp].re *
                  full_loop_B.anorm - full_loop_B.stemp_re * full_loop_B.bscale;
                full_loop_B.ctemp.im =
                  full_loop_B.b_A_data[full_loop_B.ctemp_tmp].im *
                  full_loop_B.anorm - full_loop_B.stemp_im * full_loop_B.bscale;
                full_loop_B.temp_b = std::abs(full_loop_B.ctemp.re) + std::abs
                  (full_loop_B.ctemp.im);
                full_loop_B.jp1 += full_loop_B.ctemp_tmp_tmp;
                full_loop_B.temp2_c = (std::abs
                  (full_loop_B.b_A_data[full_loop_B.jp1].re) + std::abs
                  (full_loop_B.b_A_data[full_loop_B.jp1].im)) *
                  full_loop_B.anorm;
                full_loop_B.tempr = full_loop_B.temp_b;
                if (full_loop_B.temp2_c > full_loop_B.temp_b) {
                  full_loop_B.tempr = full_loop_B.temp2_c;
                }

                if ((full_loop_B.tempr < 1.0) && (full_loop_B.tempr != 0.0)) {
                  full_loop_B.temp_b /= full_loop_B.tempr;
                  full_loop_B.temp2_c /= full_loop_B.tempr;
                }

                full_loop_B.jp1 = (full_loop_B.j_b - 1) *
                  full_loop_B.b_A_size_idx_0 + full_loop_B.j_b;
                if ((std::abs(full_loop_B.b_A_data[full_loop_B.jp1].re) + std::
                     abs(full_loop_B.b_A_data[full_loop_B.jp1].im)) *
                    full_loop_B.temp2_c <= full_loop_B.temp_b *
                    full_loop_B.b_atol) {
                  goto90 = true;
                  exitg2 = true;
                } else {
                  full_loop_B.jp1 = full_loop_B.j_b;
                  full_loop_B.j_b--;
                }
              }

              if (!goto90) {
                full_loop_B.istart_i = full_loop_B.ifirst;
                full_loop_B.ctemp_tmp = ((full_loop_B.ifirst - 1) *
                  full_loop_B.b_A_size_idx_0 + full_loop_B.ifirst) - 1;
                full_loop_B.ctemp.re =
                  full_loop_B.b_A_data[full_loop_B.ctemp_tmp].re *
                  full_loop_B.anorm - full_loop_B.stemp_re * full_loop_B.bscale;
                full_loop_B.ctemp.im =
                  full_loop_B.b_A_data[full_loop_B.ctemp_tmp].im *
                  full_loop_B.anorm - full_loop_B.stemp_im * full_loop_B.bscale;
              }

              goto90 = false;
              full_loop_B.j_b = (full_loop_B.istart_i - 1) *
                full_loop_B.b_A_size_idx_0 + full_loop_B.istart_i;
              full_loop_B.ascale.re = full_loop_B.b_A_data[full_loop_B.j_b].re *
                full_loop_B.anorm;
              full_loop_B.ascale.im = full_loop_B.b_A_data[full_loop_B.j_b].im *
                full_loop_B.anorm;
              full_loop_xzlartg_p(full_loop_B.ctemp, full_loop_B.ascale,
                                  &full_loop_B.temp_b, &full_loop_B.t1);
              full_loop_B.j_b = full_loop_B.istart_i;
              full_loop_B.jp1 = full_loop_B.istart_i - 2;
              while (full_loop_B.j_b < full_loop_B.n_e + 1) {
                if (full_loop_B.j_b > full_loop_B.istart_i) {
                  full_loop_xzlartg(full_loop_B.b_A_data[(full_loop_B.j_b +
                    full_loop_B.b_A_size_idx_0 * full_loop_B.jp1) - 1],
                                    full_loop_B.b_A_data[full_loop_B.j_b +
                                    full_loop_B.b_A_size_idx_0 * full_loop_B.jp1],
                                    &full_loop_B.temp_b, &full_loop_B.t1,
                                    &full_loop_B.b_A_data[(full_loop_B.j_b +
                    full_loop_B.b_A_size_idx_0 * full_loop_B.jp1) - 1]);
                  full_loop_B.jp1 = full_loop_B.j_b + full_loop_B.b_A_size_idx_0
                    * full_loop_B.jp1;
                  full_loop_B.b_A_data[full_loop_B.jp1].re = 0.0;
                  full_loop_B.b_A_data[full_loop_B.jp1].im = 0.0;
                }

                for (full_loop_B.ctemp_tmp = full_loop_B.j_b;
                     full_loop_B.ctemp_tmp <= full_loop_B.ilastm;
                     full_loop_B.ctemp_tmp++) {
                  full_loop_B.jp1 = (full_loop_B.ctemp_tmp - 1) *
                    full_loop_B.b_A_size_idx_0 + full_loop_B.j_b;
                  full_loop_B.ctemp_tmp_tmp = full_loop_B.jp1 - 1;
                  full_loop_B.stemp_re =
                    full_loop_B.b_A_data[full_loop_B.ctemp_tmp_tmp].re *
                    full_loop_B.temp_b + (full_loop_B.b_A_data[full_loop_B.jp1].
                    re * full_loop_B.t1.re -
                    full_loop_B.b_A_data[full_loop_B.jp1].im * full_loop_B.t1.im);
                  full_loop_B.stemp_im =
                    full_loop_B.b_A_data[full_loop_B.ctemp_tmp_tmp].im *
                    full_loop_B.temp_b + (full_loop_B.b_A_data[full_loop_B.jp1].
                    im * full_loop_B.t1.re +
                    full_loop_B.b_A_data[full_loop_B.jp1].re * full_loop_B.t1.im);
                  full_loop_B.temp2_c =
                    full_loop_B.b_A_data[full_loop_B.ctemp_tmp_tmp].re;
                  full_loop_B.b_A_data[full_loop_B.jp1].re =
                    full_loop_B.b_A_data[full_loop_B.jp1].re *
                    full_loop_B.temp_b -
                    (full_loop_B.b_A_data[full_loop_B.ctemp_tmp_tmp].re *
                     full_loop_B.t1.re +
                     full_loop_B.b_A_data[full_loop_B.ctemp_tmp_tmp].im *
                     full_loop_B.t1.im);
                  full_loop_B.b_A_data[full_loop_B.jp1].im =
                    full_loop_B.b_A_data[full_loop_B.jp1].im *
                    full_loop_B.temp_b -
                    (full_loop_B.b_A_data[full_loop_B.ctemp_tmp_tmp].im *
                     full_loop_B.t1.re - full_loop_B.t1.im * full_loop_B.temp2_c);
                  full_loop_B.b_A_data[full_loop_B.ctemp_tmp_tmp].re =
                    full_loop_B.stemp_re;
                  full_loop_B.b_A_data[full_loop_B.ctemp_tmp_tmp].im =
                    full_loop_B.stemp_im;
                }

                full_loop_B.t1.re = -full_loop_B.t1.re;
                full_loop_B.t1.im = -full_loop_B.t1.im;
                full_loop_B.b_x_kh = full_loop_B.j_b + 2;
                if (full_loop_B.n_e + 1 < full_loop_B.j_b + 2) {
                  full_loop_B.b_x_kh = full_loop_B.n_e + 1;
                }

                for (full_loop_B.ctemp_tmp = full_loop_B.ifirst;
                     full_loop_B.ctemp_tmp <= full_loop_B.b_x_kh;
                     full_loop_B.ctemp_tmp++) {
                  full_loop_B.jp1 = ((full_loop_B.j_b - 1) *
                                     full_loop_B.b_A_size_idx_0 +
                                     full_loop_B.ctemp_tmp) - 1;
                  full_loop_B.ctemp_tmp_tmp = (full_loop_B.b_A_size_idx_0 *
                    full_loop_B.j_b + full_loop_B.ctemp_tmp) - 1;
                  full_loop_B.stemp_re = (full_loop_B.b_A_data[full_loop_B.jp1].
                    re * full_loop_B.t1.re -
                    full_loop_B.b_A_data[full_loop_B.jp1].im * full_loop_B.t1.im)
                    + full_loop_B.b_A_data[full_loop_B.ctemp_tmp_tmp].re *
                    full_loop_B.temp_b;
                  full_loop_B.stemp_im = (full_loop_B.b_A_data[full_loop_B.jp1].
                    im * full_loop_B.t1.re +
                    full_loop_B.b_A_data[full_loop_B.jp1].re * full_loop_B.t1.im)
                    + full_loop_B.b_A_data[full_loop_B.ctemp_tmp_tmp].im *
                    full_loop_B.temp_b;
                  full_loop_B.temp2_c =
                    full_loop_B.b_A_data[full_loop_B.ctemp_tmp_tmp].re;
                  full_loop_B.b_A_data[full_loop_B.jp1].re =
                    full_loop_B.b_A_data[full_loop_B.jp1].re *
                    full_loop_B.temp_b -
                    (full_loop_B.b_A_data[full_loop_B.ctemp_tmp_tmp].re *
                     full_loop_B.t1.re +
                     full_loop_B.b_A_data[full_loop_B.ctemp_tmp_tmp].im *
                     full_loop_B.t1.im);
                  full_loop_B.b_A_data[full_loop_B.jp1].im =
                    full_loop_B.b_A_data[full_loop_B.jp1].im *
                    full_loop_B.temp_b -
                    (full_loop_B.b_A_data[full_loop_B.ctemp_tmp_tmp].im *
                     full_loop_B.t1.re - full_loop_B.t1.im * full_loop_B.temp2_c);
                  full_loop_B.b_A_data[full_loop_B.ctemp_tmp_tmp].re =
                    full_loop_B.stemp_re;
                  full_loop_B.b_A_data[full_loop_B.ctemp_tmp_tmp].im =
                    full_loop_B.stemp_im;
                }

                full_loop_B.jp1 = full_loop_B.j_b - 1;
                full_loop_B.j_b++;
              }
            }

            full_loop_B.jiter++;
          }
        } else {
          full_loop_B.ifirst = *alpha1_size;
          for (full_loop_B.jp1 = 0; full_loop_B.jp1 < full_loop_B.ifirst;
               full_loop_B.jp1++) {
            alpha1_data[full_loop_B.jp1].re = (rtNaN);
            alpha1_data[full_loop_B.jp1].im = 0.0;
          }

          full_loop_B.ifirst = *beta1_size;
          for (full_loop_B.jp1 = 0; full_loop_B.jp1 < full_loop_B.ifirst;
               full_loop_B.jp1++) {
            beta1_data[full_loop_B.jp1].re = (rtNaN);
            beta1_data[full_loop_B.jp1].im = 0.0;
          }

          *info = 1;
          exitg1 = 1;
        }
      } else {
        guard2 = true;
        exitg1 = 1;
      }
    } while (exitg1 == 0);
  } else {
    guard1 = true;
  }

  if (guard2) {
    if (failed) {
      *info = full_loop_B.n_e + 1;
      for (full_loop_B.b_A_size_idx_0 = 0; full_loop_B.b_A_size_idx_0 <=
           full_loop_B.n_e; full_loop_B.b_A_size_idx_0++) {
        alpha1_data[full_loop_B.b_A_size_idx_0].re = (rtNaN);
        alpha1_data[full_loop_B.b_A_size_idx_0].im = 0.0;
        beta1_data[full_loop_B.b_A_size_idx_0].re = (rtNaN);
        beta1_data[full_loop_B.b_A_size_idx_0].im = 0.0;
      }
    } else {
      guard1 = true;
    }
  }

  if (guard1) {
    full_loop_B.ifirst = ilo - 2;
    for (full_loop_B.n_e = 0; full_loop_B.n_e <= full_loop_B.ifirst;
         full_loop_B.n_e++) {
      alpha1_data[full_loop_B.n_e] =
        full_loop_B.b_A_data[full_loop_B.b_A_size_idx_0 * full_loop_B.n_e +
        full_loop_B.n_e];
    }
  }
}

void full_loopModelClass::full_loop_xzlascl_p43ri(real_T cfrom, real_T cto,
  creal_T A_data[], const int32_T *A_size)
{
  boolean_T notdone;
  int32_T loop_ub;
  full_loop_B.cfromc_dq = cfrom;
  full_loop_B.ctoc_e = cto;
  notdone = true;
  while (notdone) {
    full_loop_B.cfrom1_i = full_loop_B.cfromc_dq * 2.0041683600089728E-292;
    full_loop_B.cto1_b = full_loop_B.ctoc_e / 4.9896007738368E+291;
    if ((std::abs(full_loop_B.cfrom1_i) > std::abs(full_loop_B.ctoc_e)) &&
        (full_loop_B.ctoc_e != 0.0)) {
      full_loop_B.mul_a = 2.0041683600089728E-292;
      full_loop_B.cfromc_dq = full_loop_B.cfrom1_i;
    } else if (std::abs(full_loop_B.cto1_b) > std::abs(full_loop_B.cfromc_dq)) {
      full_loop_B.mul_a = 4.9896007738368E+291;
      full_loop_B.ctoc_e = full_loop_B.cto1_b;
    } else {
      full_loop_B.mul_a = full_loop_B.ctoc_e / full_loop_B.cfromc_dq;
      notdone = false;
    }

    loop_ub = *A_size;
    for (full_loop_B.i22 = 0; full_loop_B.i22 < loop_ub; full_loop_B.i22++) {
      A_data[full_loop_B.i22].re *= full_loop_B.mul_a;
      A_data[full_loop_B.i22].im *= full_loop_B.mul_a;
    }
  }
}

void full_loopModelClass::full_loop_xzgeev_p(const real_T A_data[], const
  int32_T A_size[2], int32_T *info, creal_T alpha1_data[], int32_T *alpha1_size,
  creal_T beta1_data[], int32_T *beta1_size)
{
  boolean_T ilascl;
  full_loop_B.At_size[0] = A_size[0];
  full_loop_B.At_size[1] = A_size[1];
  full_loop_B.loop_ub_tmp_ev = A_size[0] * A_size[1] - 1;
  for (full_loop_B.ilo = 0; full_loop_B.ilo <= full_loop_B.loop_ub_tmp_ev;
       full_loop_B.ilo++) {
    full_loop_B.At_data[full_loop_B.ilo].re = A_data[full_loop_B.ilo];
    full_loop_B.At_data[full_loop_B.ilo].im = 0.0;
  }

  full_loop_B.b_At_size[0] = A_size[0];
  full_loop_B.b_At_size[1] = A_size[1];
  if (0 <= full_loop_B.loop_ub_tmp_ev) {
    std::memcpy(&full_loop_B.b_At_data[0], &full_loop_B.At_data[0],
                (full_loop_B.loop_ub_tmp_ev + 1) * sizeof(creal_T));
  }

  *info = 0;
  *alpha1_size = A_size[0];
  full_loop_B.loop_ub_tmp_ev = A_size[0];
  if (0 <= full_loop_B.loop_ub_tmp_ev - 1) {
    std::memset(&alpha1_data[0], 0, full_loop_B.loop_ub_tmp_ev * sizeof(creal_T));
  }

  *beta1_size = A_size[0];
  full_loop_B.loop_ub_tmp_ev = A_size[0];
  if (0 <= full_loop_B.loop_ub_tmp_ev - 1) {
    std::memset(&beta1_data[0], 0, full_loop_B.loop_ub_tmp_ev * sizeof(creal_T));
  }

  if ((A_size[0] != 0) && (A_size[1] != 0)) {
    full_loop_B.anrm = full_loop_xzlangeM_p(full_loop_B.At_data,
      full_loop_B.At_size);
    if (!full_loop_isfinite_p(full_loop_B.anrm)) {
      *alpha1_size = A_size[0];
      full_loop_B.loop_ub_tmp_ev = A_size[0];
      for (full_loop_B.ilo = 0; full_loop_B.ilo < full_loop_B.loop_ub_tmp_ev;
           full_loop_B.ilo++) {
        alpha1_data[full_loop_B.ilo].re = (rtNaN);
        alpha1_data[full_loop_B.ilo].im = 0.0;
      }

      *beta1_size = A_size[0];
      full_loop_B.loop_ub_tmp_ev = A_size[0];
      for (full_loop_B.ilo = 0; full_loop_B.ilo < full_loop_B.loop_ub_tmp_ev;
           full_loop_B.ilo++) {
        beta1_data[full_loop_B.ilo].re = (rtNaN);
        beta1_data[full_loop_B.ilo].im = 0.0;
      }
    } else {
      ilascl = false;
      full_loop_B.anrmto = full_loop_B.anrm;
      if ((full_loop_B.anrm > 0.0) && (full_loop_B.anrm <
           6.7178761075670888E-139)) {
        full_loop_B.anrmto = 6.7178761075670888E-139;
        ilascl = true;
        full_loop_xzlascl_p4(full_loop_B.anrm, full_loop_B.anrmto,
                             full_loop_B.At_data, full_loop_B.At_size,
                             full_loop_B.b_At_data, full_loop_B.b_At_size);
      } else {
        if (full_loop_B.anrm > 1.4885657073574029E+138) {
          full_loop_B.anrmto = 1.4885657073574029E+138;
          ilascl = true;
          full_loop_xzlascl_p4(full_loop_B.anrm, full_loop_B.anrmto,
                               full_loop_B.At_data, full_loop_B.At_size,
                               full_loop_B.b_At_data, full_loop_B.b_At_size);
        }
      }

      full_loop_xzggbal_p(full_loop_B.b_At_data, full_loop_B.b_At_size,
                          full_loop_B.At_data, full_loop_B.At_size,
                          &full_loop_B.ilo, &full_loop_B.loop_ub_tmp_ev,
                          full_loop_B.rscale_data, &full_loop_B.rscale_size);
      full_loop_xzgghrd_p(full_loop_B.ilo, full_loop_B.loop_ub_tmp_ev,
                          full_loop_B.At_data, full_loop_B.At_size,
                          full_loop_B.b_At_data, full_loop_B.b_At_size);
      full_loop_xzhgeqz_p(full_loop_B.b_At_data, full_loop_B.b_At_size,
                          full_loop_B.ilo, full_loop_B.loop_ub_tmp_ev, info,
                          alpha1_data, alpha1_size, beta1_data, beta1_size);
      if ((*info == 0) && ilascl) {
        full_loop_xzlascl_p43ri(full_loop_B.anrmto, full_loop_B.anrm,
          alpha1_data, alpha1_size);
      }
    }
  }
}

void full_loopModelClass::full_loop_ilazlr(int32_T m, int32_T n, const real_T
  A_data[], const int32_T A_size[2], int32_T ia0, int32_T lda, int32_T *i,
  real_T b_A_data[], int32_T b_A_size[2])
{
  int32_T rowleft;
  int32_T rowright;
  int32_T exitg1;
  boolean_T exitg2;
  b_A_size[0] = A_size[0];
  b_A_size[1] = A_size[1];
  rowleft = A_size[0] * A_size[1] - 1;
  if (0 <= rowleft) {
    std::memcpy(&b_A_data[0], &A_data[0], (rowleft + 1) * sizeof(real_T));
  }

  *i = m;
  exitg2 = false;
  while ((!exitg2) && (*i > 0)) {
    rowleft = (ia0 + *i) - 1;
    rowright = (n - 1) * lda + rowleft;
    do {
      exitg1 = 0;
      if (((lda > 0) && (rowleft <= rowright)) || ((lda < 0) && (rowleft >=
            rowright))) {
        if (A_data[rowleft - 1] != 0.0) {
          exitg1 = 1;
        } else {
          rowleft += lda;
        }
      } else {
        (*i)--;
        exitg1 = 2;
      }
    } while (exitg1 == 0);

    if (exitg1 == 1) {
      exitg2 = true;
    }
  }
}

void full_loopModelClass::full_loop_xgemv_p43r(int32_T m, int32_T n, const
  real_T A_data[], int32_T ia0, int32_T lda, const real_T x_data[], int32_T ix0,
  real_T y_data[])
{
  int32_T iy;
  int32_T ix;
  int32_T b;
  int32_T iac;
  int32_T d;
  int32_T ia;
  if ((m == 0) || (n == 0)) {
  } else {
    if (0 <= m - 1) {
      std::memset(&y_data[0], 0, m * sizeof(real_T));
    }

    ix = ix0 - 1;
    b = (n - 1) * lda + ia0;
    for (iac = ia0; lda < 0 ? iac >= b : iac <= b; iac += lda) {
      iy = 0;
      d = iac + m;
      for (ia = iac; ia < d; ia++) {
        y_data[iy] += A_data[ia - 1] * x_data[ix];
        iy++;
      }

      ix++;
    }
  }
}

void full_loopModelClass::full_loop_xgerc_p4(int32_T m, int32_T n, real_T alpha1,
  const real_T x_data[], int32_T iy0, const real_T A_data[], const int32_T
  A_size[2], int32_T ia0, int32_T lda, real_T b_A_data[], int32_T b_A_size[2])
{
  int32_T ijA;
  int32_T loop_ub;
  b_A_size[0] = A_size[0];
  b_A_size[1] = A_size[1];
  loop_ub = A_size[0] * A_size[1] - 1;
  if (0 <= loop_ub) {
    std::memcpy(&b_A_data[0], &A_data[0], (loop_ub + 1) * sizeof(real_T));
  }

  if (!(alpha1 == 0.0)) {
    full_loop_B.jA_o = ia0;
    full_loop_B.jy_e = iy0 - 1;
    for (loop_ub = 0; loop_ub < n; loop_ub++) {
      if (b_A_data[full_loop_B.jy_e] != 0.0) {
        full_loop_B.temp_d = b_A_data[full_loop_B.jy_e] * alpha1;
        full_loop_B.ix_m = 0;
        full_loop_B.c_dq = (m + full_loop_B.jA_o) - 1;
        for (ijA = full_loop_B.jA_o; ijA <= full_loop_B.c_dq; ijA++) {
          b_A_data[ijA - 1] += x_data[full_loop_B.ix_m] * full_loop_B.temp_d;
          full_loop_B.ix_m++;
        }
      }

      full_loop_B.jy_e++;
      full_loop_B.jA_o += lda;
    }
  }
}

void full_loopModelClass::full_loop_xzlarf_p43riobte(int32_T m, int32_T n,
  int32_T iv0, real_T tau, const real_T C_data[], const int32_T C_size[2],
  int32_T ic0, int32_T ldc, real_T work_data[], real_T b_C_data[], int32_T
  b_C_size[2])
{
  b_C_size[0] = C_size[0];
  b_C_size[1] = C_size[1];
  full_loop_B.i_a3 = C_size[0] * C_size[1] - 1;
  if (0 <= full_loop_B.i_a3) {
    std::memcpy(&b_C_data[0], &C_data[0], (full_loop_B.i_a3 + 1) * sizeof(real_T));
  }

  if (tau != 0.0) {
    full_loop_B.lastv_d = n;
    full_loop_B.i_a3 = (iv0 + n) - 2;
    while ((full_loop_B.lastv_d > 0) && (C_data[full_loop_B.i_a3] == 0.0)) {
      full_loop_B.lastv_d--;
      full_loop_B.i_a3--;
    }

    full_loop_ilazlr(m, full_loop_B.lastv_d, C_data, C_size, ic0, ldc,
                     &full_loop_B.lastc_j, b_C_data, b_C_size);
  } else {
    full_loop_B.lastv_d = 0;
    full_loop_B.lastc_j = 0;
  }

  if (full_loop_B.lastv_d > 0) {
    full_loop_xgemv_p43r(full_loop_B.lastc_j, full_loop_B.lastv_d, b_C_data, ic0,
                         ldc, b_C_data, iv0, work_data);
    full_loop_B.b_C_size_m[0] = b_C_size[0];
    full_loop_B.b_C_size_m[1] = b_C_size[1];
    full_loop_B.i_a3 = b_C_size[0] * b_C_size[1];
    if (0 <= full_loop_B.i_a3 - 1) {
      std::memcpy(&full_loop_B.b_C_data[0], &b_C_data[0], full_loop_B.i_a3 *
                  sizeof(real_T));
    }

    full_loop_xgerc_p4(full_loop_B.lastc_j, full_loop_B.lastv_d, -tau, work_data,
                       iv0, full_loop_B.b_C_data, full_loop_B.b_C_size_m, ic0,
                       ldc, b_C_data, b_C_size);
  }
}

void full_loopModelClass::full_loop_xgemv_p43ri(int32_T m, int32_T n, const
  real_T A_data[], int32_T ia0, int32_T lda, const real_T x_data[], int32_T ix0,
  real_T y_data[])
{
  int32_T ix;
  real_T c;
  int32_T iy;
  int32_T b;
  int32_T iac;
  int32_T d;
  int32_T ia;
  if ((m == 0) || (n == 0)) {
  } else {
    if (0 <= n - 1) {
      std::memset(&y_data[0], 0, n * sizeof(real_T));
    }

    iy = 0;
    b = (n - 1) * lda + ia0;
    for (iac = ia0; lda < 0 ? iac >= b : iac <= b; iac += lda) {
      ix = ix0 - 1;
      c = 0.0;
      d = iac + m;
      for (ia = iac; ia < d; ia++) {
        c += A_data[ia - 1] * x_data[ix];
        ix++;
      }

      y_data[iy] += c;
      iy++;
    }
  }
}

void full_loopModelClass::full_loop_xgerc_p43(int32_T m, int32_T n, real_T
  alpha1, int32_T ix0, const real_T y_data[], const real_T A_data[], const
  int32_T A_size[2], int32_T ia0, int32_T lda, real_T b_A_data[], int32_T
  b_A_size[2])
{
  int32_T ijA;
  int32_T loop_ub;
  b_A_size[0] = A_size[0];
  b_A_size[1] = A_size[1];
  loop_ub = A_size[0] * A_size[1] - 1;
  if (0 <= loop_ub) {
    std::memcpy(&b_A_data[0], &A_data[0], (loop_ub + 1) * sizeof(real_T));
  }

  if (!(alpha1 == 0.0)) {
    full_loop_B.jA = ia0;
    full_loop_B.jy = 0;
    for (loop_ub = 0; loop_ub < n; loop_ub++) {
      if (y_data[full_loop_B.jy] != 0.0) {
        full_loop_B.temp_j = y_data[full_loop_B.jy] * alpha1;
        full_loop_B.ix_a = ix0 - 1;
        full_loop_B.c_h = (m + full_loop_B.jA) - 1;
        for (ijA = full_loop_B.jA; ijA <= full_loop_B.c_h; ijA++) {
          b_A_data[ijA - 1] += b_A_data[full_loop_B.ix_a] * full_loop_B.temp_j;
          full_loop_B.ix_a++;
        }
      }

      full_loop_B.jy++;
      full_loop_B.jA += lda;
    }
  }
}

void full_loopModelClass::full_loop_xzlarf_p43riobte0(int32_T m, int32_T n,
  int32_T iv0, real_T tau, const real_T C_data[], const int32_T C_size[2],
  int32_T ic0, int32_T ldc, real_T work_data[], real_T b_C_data[], int32_T
  b_C_size[2])
{
  b_C_size[0] = C_size[0];
  b_C_size[1] = C_size[1];
  full_loop_B.i_cp = C_size[0] * C_size[1] - 1;
  if (0 <= full_loop_B.i_cp) {
    std::memcpy(&b_C_data[0], &C_data[0], (full_loop_B.i_cp + 1) * sizeof(real_T));
  }

  if (tau != 0.0) {
    full_loop_B.lastv_g = m;
    full_loop_B.i_cp = (iv0 + m) - 2;
    while ((full_loop_B.lastv_g > 0) && (C_data[full_loop_B.i_cp] == 0.0)) {
      full_loop_B.lastv_g--;
      full_loop_B.i_cp--;
    }

    full_loop_ilazlc_p(full_loop_B.lastv_g, n, C_data, C_size, ic0, ldc,
                       &full_loop_B.lastc_d, b_C_data, b_C_size);
  } else {
    full_loop_B.lastv_g = 0;
    full_loop_B.lastc_d = 0;
  }

  if (full_loop_B.lastv_g > 0) {
    full_loop_xgemv_p43ri(full_loop_B.lastv_g, full_loop_B.lastc_d, b_C_data,
                          ic0, ldc, b_C_data, iv0, work_data);
    full_loop_B.b_C_size_p[0] = b_C_size[0];
    full_loop_B.b_C_size_p[1] = b_C_size[1];
    full_loop_B.i_cp = b_C_size[0] * b_C_size[1];
    if (0 <= full_loop_B.i_cp - 1) {
      std::memcpy(&full_loop_B.b_C_data_m[0], &b_C_data[0], full_loop_B.i_cp *
                  sizeof(real_T));
    }

    full_loop_xgerc_p43(full_loop_B.lastv_g, full_loop_B.lastc_d, -tau, iv0,
                        work_data, full_loop_B.b_C_data_m,
                        full_loop_B.b_C_size_p, ic0, ldc, b_C_data, b_C_size);
  }
}

void full_loopModelClass::full_loop_xgehrd_p(const real_T a_data[], const
  int32_T a_size[2], real_T b_a_data[], int32_T b_a_size[2])
{
  full_loop_B.c_a_size[0] = a_size[0];
  full_loop_B.c_a_size[1] = a_size[1];
  full_loop_B.loop_ub_hho = a_size[0] * a_size[1] - 1;
  if (0 <= full_loop_B.loop_ub_hho) {
    std::memcpy(&full_loop_B.c_a_data[0], &a_data[0], (full_loop_B.loop_ub_hho +
      1) * sizeof(real_T));
  }

  full_loop_B.n_dj = a_size[0];
  full_loop_B.d_idx_0 = a_size[0];
  if (0 <= full_loop_B.d_idx_0 - 1) {
    std::memset(&full_loop_B.work_data_lg[0], 0, full_loop_B.d_idx_0 * sizeof
                (real_T));
  }

  full_loop_B.e_bm = a_size[0] - 2;
  for (full_loop_B.d_idx_0 = 0; full_loop_B.d_idx_0 <= full_loop_B.e_bm;
       full_loop_B.d_idx_0++) {
    full_loop_B.im1n_c = full_loop_B.d_idx_0 * full_loop_B.n_dj + 2;
    full_loop_B.in_b = (full_loop_B.d_idx_0 + 1) * full_loop_B.n_dj + 1;
    full_loop_B.c_a_size_k[0] = full_loop_B.c_a_size[0];
    full_loop_B.c_a_size_k[1] = full_loop_B.c_a_size[1];
    full_loop_B.loop_ub_hho = full_loop_B.c_a_size[0] * full_loop_B.c_a_size[1];
    if (0 <= full_loop_B.loop_ub_hho - 1) {
      std::memcpy(&full_loop_B.c_a_data_l[0], &full_loop_B.c_a_data[0],
                  full_loop_B.loop_ub_hho * sizeof(real_T));
    }

    full_loop_B.loop_ub_hho = full_loop_B.d_idx_0 + 3;
    if (full_loop_B.loop_ub_hho >= full_loop_B.n_dj) {
      full_loop_B.loop_ub_hho = full_loop_B.n_dj;
    }

    full_loop_xzlarfg_p43((full_loop_B.n_dj - full_loop_B.d_idx_0) - 1,
                          full_loop_B.c_a_data[(full_loop_B.d_idx_0 +
      full_loop_B.c_a_size[0] * full_loop_B.d_idx_0) + 1],
                          full_loop_B.c_a_data_l, full_loop_B.c_a_size_k,
                          full_loop_B.loop_ub_hho + full_loop_B.d_idx_0 *
                          full_loop_B.n_dj, &full_loop_B.b_alpha1_b,
                          full_loop_B.c_a_data, full_loop_B.c_a_size,
                          &full_loop_B.tau_data);
    full_loop_B.c_a_data[(full_loop_B.d_idx_0 + full_loop_B.c_a_size[0] *
                          full_loop_B.d_idx_0) + 1] = 1.0;
    full_loop_xzlarf_p43riobte(full_loop_B.n_dj, (full_loop_B.n_dj -
      full_loop_B.d_idx_0) - 1, full_loop_B.d_idx_0 + full_loop_B.im1n_c,
      full_loop_B.tau_data, full_loop_B.c_a_data, full_loop_B.c_a_size,
      full_loop_B.in_b, full_loop_B.n_dj, full_loop_B.work_data_lg,
      full_loop_B.c_a_data_l, full_loop_B.d_a_size);
    full_loop_xzlarf_p43riobte0((full_loop_B.n_dj - full_loop_B.d_idx_0) - 1,
      (full_loop_B.n_dj - full_loop_B.d_idx_0) - 1, full_loop_B.d_idx_0 +
      full_loop_B.im1n_c, full_loop_B.tau_data, full_loop_B.c_a_data_l,
      full_loop_B.d_a_size, (full_loop_B.d_idx_0 + full_loop_B.in_b) + 1,
      full_loop_B.n_dj, full_loop_B.work_data_lg, full_loop_B.c_a_data,
      full_loop_B.c_a_size);
    full_loop_B.c_a_data[(full_loop_B.d_idx_0 + full_loop_B.c_a_size[0] *
                          full_loop_B.d_idx_0) + 1] = full_loop_B.b_alpha1_b;
  }

  b_a_size[0] = full_loop_B.c_a_size[0];
  b_a_size[1] = full_loop_B.c_a_size[1];
  full_loop_B.loop_ub_hho = full_loop_B.c_a_size[0] * full_loop_B.c_a_size[1] -
    1;
  if (0 <= full_loop_B.loop_ub_hho) {
    std::memcpy(&b_a_data[0], &full_loop_B.c_a_data[0], (full_loop_B.loop_ub_hho
      + 1) * sizeof(real_T));
  }
}

real_T full_loopModelClass::full_loop_xnrm2_p4(int32_T n, const real_T x[3])
{
  real_T y;
  int32_T k;
  y = 0.0;
  if (n >= 1) {
    if (n == 1) {
      y = std::abs(x[1]);
    } else {
      full_loop_B.scale_po = 3.3121686421112381E-170;
      for (k = 2; k <= n + 1; k++) {
        full_loop_B.absxk_h = std::abs(x[k - 1]);
        if (full_loop_B.absxk_h > full_loop_B.scale_po) {
          full_loop_B.t_d = full_loop_B.scale_po / full_loop_B.absxk_h;
          y = y * full_loop_B.t_d * full_loop_B.t_d + 1.0;
          full_loop_B.scale_po = full_loop_B.absxk_h;
        } else {
          full_loop_B.t_d = full_loop_B.absxk_h / full_loop_B.scale_po;
          y += full_loop_B.t_d * full_loop_B.t_d;
        }
      }

      y = full_loop_B.scale_po * std::sqrt(y);
    }
  }

  return y;
}

void full_loopModelClass::full_loop_xzlarfg_p43r(int32_T n, real_T alpha1,
  real_T x[3], real_T *b_alpha1, real_T *tau)
{
  *b_alpha1 = alpha1;
  *tau = 0.0;
  if (n > 0) {
    full_loop_B.xnorm_g = full_loop_xnrm2_p4(n - 1, x);
    if (full_loop_B.xnorm_g != 0.0) {
      full_loop_B.xnorm_g = full_loop_rt_hypotd_snf(alpha1, full_loop_B.xnorm_g);
      if (alpha1 >= 0.0) {
        full_loop_B.xnorm_g = -full_loop_B.xnorm_g;
      }

      if (std::abs(full_loop_B.xnorm_g) < 1.0020841800044864E-292) {
        full_loop_B.knt_e = -1;
        do {
          full_loop_B.knt_e++;
          for (full_loop_B.k_gi = 2; full_loop_B.k_gi <= n; full_loop_B.k_gi++)
          {
            x[full_loop_B.k_gi - 1] *= 9.9792015476736E+291;
          }

          full_loop_B.xnorm_g *= 9.9792015476736E+291;
          *b_alpha1 *= 9.9792015476736E+291;
        } while (!(std::abs(full_loop_B.xnorm_g) >= 1.0020841800044864E-292));

        full_loop_B.xnorm_g = full_loop_rt_hypotd_snf(*b_alpha1,
          full_loop_xnrm2_p4(n - 1, x));
        if (*b_alpha1 >= 0.0) {
          full_loop_B.xnorm_g = -full_loop_B.xnorm_g;
        }

        *tau = (full_loop_B.xnorm_g - *b_alpha1) / full_loop_B.xnorm_g;
        *b_alpha1 = 1.0 / (*b_alpha1 - full_loop_B.xnorm_g);
        for (full_loop_B.k_gi = 2; full_loop_B.k_gi <= n; full_loop_B.k_gi++) {
          x[full_loop_B.k_gi - 1] *= *b_alpha1;
        }

        for (full_loop_B.k_gi = 0; full_loop_B.k_gi <= full_loop_B.knt_e;
             full_loop_B.k_gi++) {
          full_loop_B.xnorm_g *= 1.0020841800044864E-292;
        }

        *b_alpha1 = full_loop_B.xnorm_g;
      } else {
        *tau = (full_loop_B.xnorm_g - alpha1) / full_loop_B.xnorm_g;
        *b_alpha1 = 1.0 / (alpha1 - full_loop_B.xnorm_g);
        for (full_loop_B.k_gi = 2; full_loop_B.k_gi <= n; full_loop_B.k_gi++) {
          x[full_loop_B.k_gi - 1] *= *b_alpha1;
        }

        *b_alpha1 = full_loop_B.xnorm_g;
      }
    }
  }
}

void full_loopModelClass::full_loop_xdlanv2(real_T a, real_T b, real_T c, real_T
  d, real_T *rt1r, real_T *rt1i, real_T *rt2r, real_T *rt2i, real_T *b_a, real_T
  *b_b, real_T *b_c, real_T *b_d, real_T *cs, real_T *sn)
{
  int32_T c_0;
  boolean_T tmp;
  *b_d = d;
  *b_c = c;
  *b_b = b;
  *b_a = a;
  if (c == 0.0) {
    *cs = 1.0;
    *sn = 0.0;
  } else if (b == 0.0) {
    *cs = 0.0;
    *sn = 1.0;
    *b_d = a;
    *b_a = d;
    *b_b = -c;
    *b_c = 0.0;
  } else {
    full_loop_B.tau_n = a - d;
    if ((full_loop_B.tau_n == 0.0) && ((b < 0.0) != (c < 0.0))) {
      *cs = 1.0;
      *sn = 0.0;
    } else {
      full_loop_B.p_p = 0.5 * full_loop_B.tau_n;
      full_loop_B.z_f = std::abs(b);
      full_loop_B.bcmis = std::abs(c);
      tmp = rtIsNaN(full_loop_B.bcmis);
      if ((full_loop_B.z_f > full_loop_B.bcmis) || tmp) {
        full_loop_B.bcmax = full_loop_B.z_f;
      } else {
        full_loop_B.bcmax = full_loop_B.bcmis;
      }

      if ((full_loop_B.z_f < full_loop_B.bcmis) || tmp) {
        full_loop_B.bcmis = full_loop_B.z_f;
      }

      if (!(b < 0.0)) {
        full_loop_B.b_o = 1;
      } else {
        full_loop_B.b_o = -1;
      }

      if (!(c < 0.0)) {
        c_0 = 1;
      } else {
        c_0 = -1;
      }

      full_loop_B.bcmis = full_loop_B.bcmis * static_cast<real_T>
        (full_loop_B.b_o) * static_cast<real_T>(c_0);
      full_loop_B.scale_dd = std::abs(full_loop_B.p_p);
      if ((!(full_loop_B.scale_dd > full_loop_B.bcmax)) && (!rtIsNaN
           (full_loop_B.bcmax))) {
        full_loop_B.scale_dd = full_loop_B.bcmax;
      }

      full_loop_B.z_f = full_loop_B.p_p / full_loop_B.scale_dd * full_loop_B.p_p
        + full_loop_B.bcmax / full_loop_B.scale_dd * full_loop_B.bcmis;
      if (full_loop_B.z_f >= 8.8817841970012523E-16) {
        if (!(full_loop_B.p_p < 0.0)) {
          full_loop_B.tau_n = std::sqrt(full_loop_B.scale_dd) * std::sqrt
            (full_loop_B.z_f);
        } else {
          full_loop_B.tau_n = -(std::sqrt(full_loop_B.scale_dd) * std::sqrt
                                (full_loop_B.z_f));
        }

        full_loop_B.z_f = full_loop_B.p_p + full_loop_B.tau_n;
        *b_a = d + full_loop_B.z_f;
        *b_d = d - full_loop_B.bcmax / full_loop_B.z_f * full_loop_B.bcmis;
        full_loop_B.tau_n = full_loop_rt_hypotd_snf(c, full_loop_B.z_f);
        *cs = full_loop_B.z_f / full_loop_B.tau_n;
        *sn = c / full_loop_B.tau_n;
        *b_b = b - c;
        *b_c = 0.0;
      } else {
        full_loop_B.bcmax = b + c;
        full_loop_B.tau_n = full_loop_rt_hypotd_snf(full_loop_B.bcmax,
          full_loop_B.tau_n);
        *cs = std::sqrt((std::abs(full_loop_B.bcmax) / full_loop_B.tau_n + 1.0) *
                        0.5);
        if (!(full_loop_B.bcmax < 0.0)) {
          full_loop_B.b_o = 1;
        } else {
          full_loop_B.b_o = -1;
        }

        *sn = -(full_loop_B.p_p / (full_loop_B.tau_n * *cs)) *
          static_cast<real_T>(full_loop_B.b_o);
        full_loop_B.p_p = a * *cs + b * *sn;
        full_loop_B.tau_n = -a * *sn + b * *cs;
        full_loop_B.bcmax = c * *cs + d * *sn;
        full_loop_B.z_f = -c * *sn + d * *cs;
        *b_b = full_loop_B.tau_n * *cs + full_loop_B.z_f * *sn;
        *b_c = -full_loop_B.p_p * *sn + full_loop_B.bcmax * *cs;
        full_loop_B.bcmax = ((full_loop_B.p_p * *cs + full_loop_B.bcmax * *sn) +
                             (-full_loop_B.tau_n * *sn + full_loop_B.z_f * *cs))
          * 0.5;
        *b_a = full_loop_B.bcmax;
        *b_d = full_loop_B.bcmax;
        if (*b_c != 0.0) {
          if (*b_b != 0.0) {
            if ((*b_b < 0.0) == (*b_c < 0.0)) {
              full_loop_B.bcmis = std::sqrt(std::abs(*b_b));
              full_loop_B.z_f = std::sqrt(std::abs(*b_c));
              if (!(*b_c < 0.0)) {
                full_loop_B.p_p = full_loop_B.bcmis * full_loop_B.z_f;
              } else {
                full_loop_B.p_p = -(full_loop_B.bcmis * full_loop_B.z_f);
              }

              full_loop_B.tau_n = 1.0 / std::sqrt(std::abs(*b_b + *b_c));
              *b_a = full_loop_B.bcmax + full_loop_B.p_p;
              *b_d = full_loop_B.bcmax - full_loop_B.p_p;
              *b_b -= *b_c;
              *b_c = 0.0;
              full_loop_B.p_p = full_loop_B.bcmis * full_loop_B.tau_n;
              full_loop_B.tau_n *= full_loop_B.z_f;
              full_loop_B.bcmax = *cs * full_loop_B.p_p - *sn *
                full_loop_B.tau_n;
              *sn = *cs * full_loop_B.tau_n + *sn * full_loop_B.p_p;
              *cs = full_loop_B.bcmax;
            }
          } else {
            *b_b = -*b_c;
            *b_c = 0.0;
            full_loop_B.bcmax = *cs;
            *cs = -*sn;
            *sn = full_loop_B.bcmax;
          }
        }
      }
    }
  }

  *rt1r = *b_a;
  *rt2r = *b_d;
  if (*b_c == 0.0) {
    *rt1i = 0.0;
    *rt2i = 0.0;
  } else {
    *rt1i = std::sqrt(std::abs(*b_b)) * std::sqrt(std::abs(*b_c));
    *rt2i = -*rt1i;
  }
}

void full_loopModelClass::full_loop_xrot_p4(int32_T n, const real_T x_data[],
  const int32_T x_size[2], int32_T ix0, int32_T incx, int32_T iy0, int32_T incy,
  real_T c, real_T s, real_T b_x_data[], int32_T b_x_size[2])
{
  int32_T ix;
  int32_T iy;
  real_T temp;
  int32_T k;
  int32_T loop_ub_tmp;
  loop_ub_tmp = x_size[0] * x_size[1] - 1;
  if (0 <= loop_ub_tmp) {
    std::memcpy(&full_loop_B.c_x_data[0], &x_data[0], (loop_ub_tmp + 1) * sizeof
                (real_T));
  }

  if (n >= 1) {
    ix = ix0 - 1;
    iy = iy0 - 1;
    for (k = 0; k < n; k++) {
      temp = c * full_loop_B.c_x_data[ix] + s * full_loop_B.c_x_data[iy];
      full_loop_B.c_x_data[iy] = c * full_loop_B.c_x_data[iy] - s *
        full_loop_B.c_x_data[ix];
      full_loop_B.c_x_data[ix] = temp;
      iy += incx;
      ix += incy;
    }
  }

  b_x_size[0] = x_size[0];
  b_x_size[1] = x_size[1];
  if (0 <= loop_ub_tmp) {
    std::memcpy(&b_x_data[0], &full_loop_B.c_x_data[0], (loop_ub_tmp + 1) *
                sizeof(real_T));
  }
}

void full_loopModelClass::full_loop_xrot_p43(int32_T n, const real_T x_data[],
  const int32_T x_size[2], int32_T ix0, int32_T iy0, real_T c, real_T s, real_T
  b_x_data[], int32_T b_x_size[2])
{
  int32_T ix;
  int32_T iy;
  real_T temp;
  int32_T k;
  int32_T loop_ub_tmp;
  loop_ub_tmp = x_size[0] * x_size[1] - 1;
  if (0 <= loop_ub_tmp) {
    std::memcpy(&full_loop_B.c_x_data_m[0], &x_data[0], (loop_ub_tmp + 1) *
                sizeof(real_T));
  }

  if (n >= 1) {
    ix = ix0 - 1;
    iy = iy0 - 1;
    for (k = 0; k < n; k++) {
      temp = c * full_loop_B.c_x_data_m[ix] + s * full_loop_B.c_x_data_m[iy];
      full_loop_B.c_x_data_m[iy] = c * full_loop_B.c_x_data_m[iy] - s *
        full_loop_B.c_x_data_m[ix];
      full_loop_B.c_x_data_m[ix] = temp;
      iy++;
      ix++;
    }
  }

  b_x_size[0] = x_size[0];
  b_x_size[1] = x_size[1];
  if (0 <= loop_ub_tmp) {
    std::memcpy(&b_x_data[0], &full_loop_B.c_x_data_m[0], (loop_ub_tmp + 1) *
                sizeof(real_T));
  }
}

void full_loopModelClass::full_loop_eml_dlahqr_p(const real_T h_data[], const
  int32_T h_size[2], real_T b_h_data[], int32_T b_h_size[2], int32_T *info)
{
  boolean_T goto150;
  boolean_T exitg1;
  boolean_T exitg2;
  boolean_T exitg3;
  b_h_size[0] = h_size[0];
  b_h_size[1] = h_size[1];
  full_loop_B.loop_ub_hr = h_size[0] * h_size[1] - 1;
  if (0 <= full_loop_B.loop_ub_hr) {
    std::memcpy(&b_h_data[0], &h_data[0], (full_loop_B.loop_ub_hr + 1) * sizeof
                (real_T));
  }

  full_loop_B.n_dm = h_size[0];
  full_loop_B.ldh = h_size[0];
  *info = 0;
  if ((h_size[0] != 0) && (1 != h_size[0])) {
    full_loop_B.v_m[0] = 0.0;
    full_loop_B.v_m[1] = 0.0;
    full_loop_B.v_m[2] = 0.0;
    full_loop_B.L_d = h_size[0] - 4;
    for (full_loop_B.i_b = 0; full_loop_B.i_b <= full_loop_B.L_d;
         full_loop_B.i_b++) {
      full_loop_B.b_h_data_tmp = full_loop_B.i_b + b_h_size[0] * full_loop_B.i_b;
      b_h_data[full_loop_B.b_h_data_tmp + 2] = 0.0;
      b_h_data[full_loop_B.b_h_data_tmp + 3] = 0.0;
    }

    if (1 <= h_size[0] - 2) {
      b_h_data[(h_size[0] + h_size[0] * (h_size[0] - 3)) - 1] = 0.0;
    }

    if (10.0 > h_size[0]) {
      full_loop_B.itmax = 10.0;
    } else {
      full_loop_B.itmax = h_size[0];
    }

    full_loop_B.itmax *= 30.0;
    full_loop_B.SMLNUM = static_cast<real_T>(h_size[0]) / 2.2204460492503131E-16
      * 2.2250738585072014E-308;
    full_loop_B.i_b = h_size[0] - 1;
    exitg1 = false;
    while ((!exitg1) && (full_loop_B.i_b + 1 >= 1)) {
      full_loop_B.L_d = 1;
      goto150 = false;
      full_loop_B.loop_ub_hr = 0;
      exitg2 = false;
      while ((!exitg2) && (full_loop_B.loop_ub_hr <= static_cast<int32_T>
                           (full_loop_B.itmax))) {
        full_loop_B.k_dcj = full_loop_B.i_b;
        exitg3 = false;
        while ((!exitg3) && (full_loop_B.k_dcj + 1 > full_loop_B.L_d)) {
          full_loop_B.b_h_data_tmp = (full_loop_B.k_dcj - 1) * b_h_size[0] +
            full_loop_B.k_dcj;
          full_loop_B.ba_l = std::abs(b_h_data[full_loop_B.b_h_data_tmp]);
          if (full_loop_B.ba_l <= full_loop_B.SMLNUM) {
            exitg3 = true;
          } else {
            full_loop_B.m_eh = b_h_size[0] * full_loop_B.k_dcj +
              full_loop_B.k_dcj;
            full_loop_B.bb_i = std::abs(b_h_data[full_loop_B.m_eh]);
            full_loop_B.tst_tmp_k = full_loop_B.b_h_data_tmp - 1;
            full_loop_B.tst_f = std::abs(b_h_data[full_loop_B.tst_tmp_k]) +
              full_loop_B.bb_i;
            if (full_loop_B.tst_f == 0.0) {
              if (full_loop_B.k_dcj - 1 >= 1) {
                full_loop_B.tst_f = std::abs(b_h_data[((full_loop_B.k_dcj - 2) *
                  b_h_size[0] + full_loop_B.k_dcj) - 1]);
              }

              if (full_loop_B.k_dcj + 2 <= full_loop_B.n_dm) {
                full_loop_B.tst_f += std::abs(b_h_data[(b_h_size[0] *
                  full_loop_B.k_dcj + full_loop_B.k_dcj) + 1]);
              }
            }

            if (full_loop_B.ba_l <= 2.2204460492503131E-16 * full_loop_B.tst_f)
            {
              full_loop_B.tst_f = std::abs(b_h_data[full_loop_B.m_eh - 1]);
              if (full_loop_B.ba_l > full_loop_B.tst_f) {
                full_loop_B.ab_p = full_loop_B.ba_l;
                full_loop_B.ba_l = full_loop_B.tst_f;
              } else {
                full_loop_B.ab_p = full_loop_B.tst_f;
              }

              full_loop_B.tst_f = std::abs(b_h_data[full_loop_B.tst_tmp_k] -
                b_h_data[full_loop_B.m_eh]);
              if (full_loop_B.bb_i > full_loop_B.tst_f) {
                full_loop_B.aa_l = full_loop_B.bb_i;
                full_loop_B.bb_i = full_loop_B.tst_f;
              } else {
                full_loop_B.aa_l = full_loop_B.tst_f;
              }

              full_loop_B.tst_f = full_loop_B.aa_l + full_loop_B.ab_p;
              full_loop_B.bb_i = full_loop_B.aa_l / full_loop_B.tst_f *
                full_loop_B.bb_i * 2.2204460492503131E-16;
              if ((full_loop_B.SMLNUM > full_loop_B.bb_i) || rtIsNaN
                  (full_loop_B.bb_i)) {
                full_loop_B.bb_i = full_loop_B.SMLNUM;
              }

              if (full_loop_B.ab_p / full_loop_B.tst_f * full_loop_B.ba_l <=
                  full_loop_B.bb_i) {
                exitg3 = true;
              } else {
                full_loop_B.k_dcj--;
              }
            } else {
              full_loop_B.k_dcj--;
            }
          }
        }

        full_loop_B.L_d = full_loop_B.k_dcj + 1;
        if (full_loop_B.k_dcj + 1 > 1) {
          b_h_data[full_loop_B.k_dcj + b_h_size[0] * (full_loop_B.k_dcj - 1)] =
            0.0;
        }

        if (full_loop_B.k_dcj + 1 >= full_loop_B.i_b) {
          goto150 = true;
          exitg2 = true;
        } else {
          if (full_loop_B.loop_ub_hr == 10) {
            full_loop_B.tst_tmp_k = b_h_size[0] * full_loop_B.k_dcj +
              full_loop_B.k_dcj;
            full_loop_B.tst_f = std::abs(b_h_data[((full_loop_B.k_dcj + 1) *
              b_h_size[0] + full_loop_B.k_dcj) + 2]) + std::abs
              (b_h_data[full_loop_B.tst_tmp_k + 1]);
            full_loop_B.ab_p = b_h_data[full_loop_B.tst_tmp_k] + 0.75 *
              full_loop_B.tst_f;
            full_loop_B.h12_o = -0.4375 * full_loop_B.tst_f;
            full_loop_B.aa_l = full_loop_B.tst_f;
            full_loop_B.ba_l = full_loop_B.ab_p;
          } else if (full_loop_B.loop_ub_hr == 20) {
            full_loop_B.tst_f = std::abs(b_h_data[((full_loop_B.i_b - 2) *
              b_h_size[0] + full_loop_B.i_b) - 1]) + std::abs(b_h_data
              [(full_loop_B.i_b - 1) * b_h_size[0] + full_loop_B.i_b]);
            full_loop_B.ab_p = b_h_data[b_h_size[0] * full_loop_B.i_b +
              full_loop_B.i_b] + 0.75 * full_loop_B.tst_f;
            full_loop_B.h12_o = -0.4375 * full_loop_B.tst_f;
            full_loop_B.aa_l = full_loop_B.tst_f;
            full_loop_B.ba_l = full_loop_B.ab_p;
          } else {
            full_loop_B.m_eh = (full_loop_B.i_b - 1) * b_h_size[0] +
              full_loop_B.i_b;
            full_loop_B.ab_p = b_h_data[full_loop_B.m_eh - 1];
            full_loop_B.aa_l = b_h_data[full_loop_B.m_eh];
            full_loop_B.h12_o = b_h_data[(b_h_size[0] * full_loop_B.i_b +
              full_loop_B.i_b) - 1];
            full_loop_B.ba_l = b_h_data[b_h_size[0] * full_loop_B.i_b +
              full_loop_B.i_b];
          }

          full_loop_B.tst_f = ((std::abs(full_loop_B.ab_p) + std::abs
                                (full_loop_B.h12_o)) + std::abs(full_loop_B.aa_l))
            + std::abs(full_loop_B.ba_l);
          if (full_loop_B.tst_f == 0.0) {
            full_loop_B.ab_p = 0.0;
            full_loop_B.ba_l = 0.0;
            full_loop_B.bb_i = 0.0;
            full_loop_B.aa_l = 0.0;
          } else {
            full_loop_B.ab_p /= full_loop_B.tst_f;
            full_loop_B.aa_l /= full_loop_B.tst_f;
            full_loop_B.h12_o /= full_loop_B.tst_f;
            full_loop_B.ba_l /= full_loop_B.tst_f;
            full_loop_B.bb_i = (full_loop_B.ab_p + full_loop_B.ba_l) / 2.0;
            full_loop_B.ab_p = (full_loop_B.ab_p - full_loop_B.bb_i) *
              (full_loop_B.ba_l - full_loop_B.bb_i) - full_loop_B.h12_o *
              full_loop_B.aa_l;
            full_loop_B.aa_l = std::sqrt(std::abs(full_loop_B.ab_p));
            if (full_loop_B.ab_p >= 0.0) {
              full_loop_B.ab_p = full_loop_B.bb_i * full_loop_B.tst_f;
              full_loop_B.bb_i = full_loop_B.ab_p;
              full_loop_B.ba_l = full_loop_B.aa_l * full_loop_B.tst_f;
              full_loop_B.aa_l = -full_loop_B.ba_l;
            } else {
              full_loop_B.ab_p = full_loop_B.bb_i + full_loop_B.aa_l;
              full_loop_B.bb_i -= full_loop_B.aa_l;
              if (std::abs(full_loop_B.ab_p - full_loop_B.ba_l) <= std::abs
                  (full_loop_B.bb_i - full_loop_B.ba_l)) {
                full_loop_B.ab_p *= full_loop_B.tst_f;
                full_loop_B.bb_i = full_loop_B.ab_p;
              } else {
                full_loop_B.bb_i *= full_loop_B.tst_f;
                full_loop_B.ab_p = full_loop_B.bb_i;
              }

              full_loop_B.ba_l = 0.0;
              full_loop_B.aa_l = 0.0;
            }
          }

          full_loop_B.m_eh = full_loop_B.i_b - 2;
          exitg3 = false;
          while ((!exitg3) && (full_loop_B.m_eh + 1 >= full_loop_B.k_dcj + 1)) {
            full_loop_B.tst_tmp_k = b_h_size[0] * full_loop_B.m_eh +
              full_loop_B.m_eh;
            full_loop_B.b_h_data_tmp = full_loop_B.tst_tmp_k + 1;
            full_loop_B.h12_o = b_h_data[full_loop_B.tst_tmp_k] -
              full_loop_B.bb_i;
            full_loop_B.tst_f = (std::abs(full_loop_B.h12_o) + std::abs
                                 (full_loop_B.aa_l)) + std::abs
              (b_h_data[full_loop_B.b_h_data_tmp]);
            full_loop_B.h21s_b = b_h_data[full_loop_B.b_h_data_tmp] /
              full_loop_B.tst_f;
            full_loop_B.b_h_data_tmp = (full_loop_B.m_eh + 1) * b_h_size[0] +
              full_loop_B.m_eh;
            full_loop_B.v_m[0] = (full_loop_B.h12_o / full_loop_B.tst_f *
                                  (b_h_data[full_loop_B.tst_tmp_k] -
              full_loop_B.ab_p) + b_h_data[full_loop_B.b_h_data_tmp] *
                                  full_loop_B.h21s_b) - full_loop_B.aa_l /
              full_loop_B.tst_f * full_loop_B.ba_l;
            full_loop_B.nr_l = full_loop_B.b_h_data_tmp + 1;
            full_loop_B.v_m[1] = (((b_h_data[full_loop_B.nr_l] +
              b_h_data[full_loop_B.tst_tmp_k]) - full_loop_B.ab_p) -
                                  full_loop_B.bb_i) * full_loop_B.h21s_b;
            full_loop_B.v_m[2] = b_h_data[full_loop_B.b_h_data_tmp + 2] *
              full_loop_B.h21s_b;
            full_loop_B.tst_f = (std::abs(full_loop_B.v_m[0]) + std::abs
                                 (full_loop_B.v_m[1])) + std::abs
              (full_loop_B.v_m[2]);
            full_loop_B.v_m[0] /= full_loop_B.tst_f;
            full_loop_B.v_m[1] /= full_loop_B.tst_f;
            full_loop_B.v_m[2] /= full_loop_B.tst_f;
            if (full_loop_B.m_eh + 1 == full_loop_B.k_dcj + 1) {
              exitg3 = true;
            } else {
              full_loop_B.b_h_data_tmp = (full_loop_B.m_eh - 1) * b_h_size[0] +
                full_loop_B.m_eh;
              if (std::abs(b_h_data[full_loop_B.b_h_data_tmp]) * (std::abs
                   (full_loop_B.v_m[1]) + std::abs(full_loop_B.v_m[2])) <= ((std::
                    abs(b_h_data[full_loop_B.b_h_data_tmp - 1]) + std::abs
                    (b_h_data[full_loop_B.tst_tmp_k])) + std::abs
                   (b_h_data[full_loop_B.nr_l])) * (2.2204460492503131E-16 * std::
                   abs(full_loop_B.v_m[0]))) {
                exitg3 = true;
              } else {
                full_loop_B.m_eh--;
              }
            }
          }

          for (full_loop_B.tst_tmp_k = full_loop_B.m_eh + 1;
               full_loop_B.tst_tmp_k <= full_loop_B.i_b; full_loop_B.tst_tmp_k++)
          {
            full_loop_B.nr_l = (full_loop_B.i_b - full_loop_B.tst_tmp_k) + 2;
            if (3 < full_loop_B.nr_l) {
              full_loop_B.nr_l = 3;
            }

            if (full_loop_B.tst_tmp_k > full_loop_B.m_eh + 1) {
              full_loop_B.hoffset_k = ((full_loop_B.tst_tmp_k - 2) *
                full_loop_B.ldh + full_loop_B.tst_tmp_k) - 2;
              for (full_loop_B.b_h_data_tmp = 0; full_loop_B.b_h_data_tmp <
                   full_loop_B.nr_l; full_loop_B.b_h_data_tmp++) {
                full_loop_B.v_m[full_loop_B.b_h_data_tmp] = b_h_data
                  [(full_loop_B.b_h_data_tmp + full_loop_B.hoffset_k) + 1];
              }
            }

            full_loop_B.b_v_c[0] = full_loop_B.v_m[0];
            full_loop_B.b_v_c[1] = full_loop_B.v_m[1];
            full_loop_B.b_v_c[2] = full_loop_B.v_m[2];
            full_loop_xzlarfg_p43r(full_loop_B.nr_l, full_loop_B.v_m[0],
              full_loop_B.b_v_c, &full_loop_B.ba_l, &full_loop_B.tst_f);
            full_loop_B.v_m[1] = full_loop_B.b_v_c[1];
            full_loop_B.v_m[2] = full_loop_B.b_v_c[2];
            full_loop_B.v_m[0] = full_loop_B.ba_l;
            if (full_loop_B.tst_tmp_k > full_loop_B.m_eh + 1) {
              full_loop_B.b_h_data_tmp = full_loop_B.tst_tmp_k + b_h_size[0] *
                (full_loop_B.tst_tmp_k - 2);
              b_h_data[full_loop_B.b_h_data_tmp - 1] = full_loop_B.ba_l;
              b_h_data[full_loop_B.b_h_data_tmp] = 0.0;
              if (full_loop_B.tst_tmp_k < full_loop_B.i_b) {
                b_h_data[full_loop_B.b_h_data_tmp + 1] = 0.0;
              }
            } else {
              if (full_loop_B.m_eh + 1 > full_loop_B.k_dcj + 1) {
                full_loop_B.b_h_data_tmp = ((full_loop_B.tst_tmp_k - 2) *
                  b_h_size[0] + full_loop_B.tst_tmp_k) - 1;
                b_h_data[full_loop_B.b_h_data_tmp] *= 1.0 - full_loop_B.tst_f;
              }
            }

            full_loop_B.ba_l = full_loop_B.b_v_c[1];
            full_loop_B.ab_p = full_loop_B.tst_f * full_loop_B.b_v_c[1];
            if (full_loop_B.nr_l == 3) {
              full_loop_B.aa_l = full_loop_B.b_v_c[2];
              full_loop_B.h12_o = full_loop_B.tst_f * full_loop_B.b_v_c[2];
              for (full_loop_B.e_j_l = full_loop_B.tst_tmp_k; full_loop_B.e_j_l <=
                   full_loop_B.n_dm; full_loop_B.e_j_l++) {
                full_loop_B.b_h_data_tmp = (full_loop_B.e_j_l - 1) * b_h_size[0]
                  + full_loop_B.tst_tmp_k;
                full_loop_B.nr_l = full_loop_B.b_h_data_tmp - 1;
                full_loop_B.hoffset_k = full_loop_B.b_h_data_tmp + 1;
                full_loop_B.bb_i = (b_h_data[full_loop_B.nr_l] +
                                    b_h_data[full_loop_B.b_h_data_tmp] *
                                    full_loop_B.ba_l) +
                  b_h_data[full_loop_B.hoffset_k] * full_loop_B.aa_l;
                b_h_data[full_loop_B.nr_l] -= full_loop_B.bb_i *
                  full_loop_B.tst_f;
                b_h_data[full_loop_B.b_h_data_tmp] -= full_loop_B.bb_i *
                  full_loop_B.ab_p;
                b_h_data[full_loop_B.hoffset_k] -= full_loop_B.bb_i *
                  full_loop_B.h12_o;
              }

              full_loop_B.b_h_data_tmp = full_loop_B.tst_tmp_k + 3;
              full_loop_B.nr_l = full_loop_B.i_b + 1;
              if (full_loop_B.b_h_data_tmp < full_loop_B.nr_l) {
                full_loop_B.nr_l = full_loop_B.b_h_data_tmp;
              }

              full_loop_B.o_jt = full_loop_B.nr_l - 1;
              for (full_loop_B.e_j_l = 0; full_loop_B.e_j_l <= full_loop_B.o_jt;
                   full_loop_B.e_j_l++) {
                full_loop_B.b_h_data_tmp = (full_loop_B.tst_tmp_k - 1) *
                  b_h_size[0] + full_loop_B.e_j_l;
                full_loop_B.nr_l = b_h_size[0] * full_loop_B.tst_tmp_k +
                  full_loop_B.e_j_l;
                full_loop_B.hoffset_k = (full_loop_B.tst_tmp_k + 1) * b_h_size[0]
                  + full_loop_B.e_j_l;
                full_loop_B.bb_i = (b_h_data[full_loop_B.b_h_data_tmp] +
                                    b_h_data[full_loop_B.nr_l] *
                                    full_loop_B.ba_l) +
                  b_h_data[full_loop_B.hoffset_k] * full_loop_B.aa_l;
                b_h_data[full_loop_B.b_h_data_tmp] -= full_loop_B.bb_i *
                  full_loop_B.tst_f;
                b_h_data[full_loop_B.nr_l] -= full_loop_B.bb_i *
                  full_loop_B.ab_p;
                b_h_data[full_loop_B.hoffset_k] -= full_loop_B.bb_i *
                  full_loop_B.h12_o;
              }
            } else {
              if (full_loop_B.nr_l == 2) {
                for (full_loop_B.hoffset_k = full_loop_B.tst_tmp_k;
                     full_loop_B.hoffset_k <= full_loop_B.n_dm;
                     full_loop_B.hoffset_k++) {
                  full_loop_B.b_h_data_tmp = (full_loop_B.hoffset_k - 1) *
                    b_h_size[0] + full_loop_B.tst_tmp_k;
                  full_loop_B.nr_l = full_loop_B.b_h_data_tmp - 1;
                  full_loop_B.bb_i = b_h_data[full_loop_B.nr_l] +
                    b_h_data[full_loop_B.b_h_data_tmp] * full_loop_B.ba_l;
                  b_h_data[full_loop_B.nr_l] -= full_loop_B.bb_i *
                    full_loop_B.tst_f;
                  b_h_data[full_loop_B.b_h_data_tmp] -= full_loop_B.bb_i *
                    full_loop_B.ab_p;
                }

                for (full_loop_B.hoffset_k = 0; full_loop_B.hoffset_k <=
                     full_loop_B.i_b; full_loop_B.hoffset_k++) {
                  full_loop_B.b_h_data_tmp = (full_loop_B.tst_tmp_k - 1) *
                    b_h_size[0] + full_loop_B.hoffset_k;
                  full_loop_B.nr_l = b_h_size[0] * full_loop_B.tst_tmp_k +
                    full_loop_B.hoffset_k;
                  full_loop_B.bb_i = b_h_data[full_loop_B.b_h_data_tmp] +
                    b_h_data[full_loop_B.nr_l] * full_loop_B.ba_l;
                  b_h_data[full_loop_B.b_h_data_tmp] -= full_loop_B.bb_i *
                    full_loop_B.tst_f;
                  b_h_data[full_loop_B.nr_l] -= full_loop_B.bb_i *
                    full_loop_B.ab_p;
                }
              }
            }
          }

          full_loop_B.loop_ub_hr++;
        }
      }

      if (!goto150) {
        *info = full_loop_B.i_b + 1;
        exitg1 = true;
      } else {
        if ((full_loop_B.i_b + 1 != full_loop_B.L_d) && (full_loop_B.L_d ==
             full_loop_B.i_b)) {
          full_loop_xdlanv2(b_h_data[(full_loop_B.i_b + b_h_size[0] *
            (full_loop_B.i_b - 1)) - 1], b_h_data[(full_loop_B.i_b + b_h_size[0]
            * full_loop_B.i_b) - 1], b_h_data[full_loop_B.i_b + b_h_size[0] *
                            (full_loop_B.i_b - 1)], b_h_data[full_loop_B.i_b +
                            b_h_size[0] * full_loop_B.i_b], &full_loop_B.tst_f,
                            &full_loop_B.ba_l, &full_loop_B.ab_p,
                            &full_loop_B.bb_i, &b_h_data[(full_loop_B.i_b +
            b_h_size[0] * (full_loop_B.i_b - 1)) - 1], &full_loop_B.aa_l,
                            &full_loop_B.h12_o, &full_loop_B.h21s_b,
                            &full_loop_B.cs, &full_loop_B.sn_i);
          full_loop_B.b_h_data_tmp = full_loop_B.i_b + b_h_size[0] *
            full_loop_B.i_b;
          b_h_data[full_loop_B.b_h_data_tmp - 1] = full_loop_B.aa_l;
          b_h_data[full_loop_B.i_b + b_h_size[0] * (full_loop_B.i_b - 1)] =
            full_loop_B.h12_o;
          b_h_data[full_loop_B.b_h_data_tmp] = full_loop_B.h21s_b;
          if (full_loop_B.n_dm > full_loop_B.i_b + 1) {
            full_loop_B.b_h_size_a[0] = b_h_size[0];
            full_loop_B.b_h_size_a[1] = b_h_size[1];
            full_loop_B.loop_ub_hr = b_h_size[0] * b_h_size[1];
            if (0 <= full_loop_B.loop_ub_hr - 1) {
              std::memcpy(&full_loop_B.b_h_data[0], &b_h_data[0],
                          full_loop_B.loop_ub_hr * sizeof(real_T));
            }

            full_loop_xrot_p4((full_loop_B.n_dm - full_loop_B.i_b) - 1,
                              full_loop_B.b_h_data, full_loop_B.b_h_size_a,
                              full_loop_B.i_b + (full_loop_B.i_b + 1) *
                              full_loop_B.ldh, full_loop_B.ldh, (full_loop_B.i_b
              + (full_loop_B.i_b + 1) * full_loop_B.ldh) + 1, full_loop_B.ldh,
                              full_loop_B.cs, full_loop_B.sn_i, b_h_data,
                              b_h_size);
          }

          full_loop_B.b_h_size[0] = b_h_size[0];
          full_loop_B.b_h_size[1] = b_h_size[1];
          full_loop_B.loop_ub_hr = b_h_size[0] * b_h_size[1];
          if (0 <= full_loop_B.loop_ub_hr - 1) {
            std::memcpy(&full_loop_B.b_h_data[0], &b_h_data[0],
                        full_loop_B.loop_ub_hr * sizeof(real_T));
          }

          full_loop_xrot_p43(full_loop_B.i_b - 1, full_loop_B.b_h_data,
                             full_loop_B.b_h_size, (full_loop_B.i_b - 1) *
                             full_loop_B.ldh + 1, full_loop_B.i_b *
                             full_loop_B.ldh + 1, full_loop_B.cs,
                             full_loop_B.sn_i, b_h_data, b_h_size);
        }

        full_loop_B.i_b = full_loop_B.L_d - 2;
      }
    }
  }
}

void full_loopModelClass::full_loop_xhseqr_p(const real_T h_data[], const
  int32_T h_size[2], real_T b_h_data[], int32_T b_h_size[2], int32_T *info)
{
  full_loop_eml_dlahqr_p(h_data, h_size, full_loop_B.c_h_data,
    full_loop_B.c_h_size, info);
  b_h_size[0] = full_loop_B.c_h_size[0];
  b_h_size[1] = full_loop_B.c_h_size[1];
  full_loop_B.m_ax = full_loop_B.c_h_size[0] * full_loop_B.c_h_size[1] - 1;
  if (0 <= full_loop_B.m_ax) {
    std::memcpy(&b_h_data[0], &full_loop_B.c_h_data[0], (full_loop_B.m_ax + 1) *
                sizeof(real_T));
  }

  full_loop_B.m_ax = full_loop_B.c_h_size[0];
  if ((full_loop_B.c_h_size[0] == 0) || (full_loop_B.c_h_size[1] == 0) || (3 >=
       full_loop_B.c_h_size[0])) {
  } else {
    full_loop_B.istart_o = 4;
    if (full_loop_B.c_h_size[0] - 4 < full_loop_B.c_h_size[1] - 1) {
      full_loop_B.c_h_size_p = full_loop_B.c_h_size[0] - 3;
    } else {
      full_loop_B.c_h_size_p = full_loop_B.c_h_size[1];
    }

    full_loop_B.jend = full_loop_B.c_h_size_p - 1;
    for (full_loop_B.c_h_size_p = 0; full_loop_B.c_h_size_p <= full_loop_B.jend;
         full_loop_B.c_h_size_p++) {
      for (full_loop_B.i_l = full_loop_B.istart_o; full_loop_B.i_l <=
           full_loop_B.m_ax; full_loop_B.i_l++) {
        b_h_data[(full_loop_B.i_l + b_h_size[0] * full_loop_B.c_h_size_p) - 1] =
          0.0;
      }

      if (full_loop_B.c_h_size_p + 1 >= 1) {
        full_loop_B.istart_o++;
      }
    }
  }
}

void full_loopModelClass::full_loop_triu(const real_T x_data[], const int32_T
  x_size[2], real_T b_x_data[], int32_T b_x_size[2])
{
  int32_T m;
  int32_T istart;
  int32_T jend;
  int32_T i;
  int32_T x_size_0;
  b_x_size[0] = x_size[0];
  b_x_size[1] = x_size[1];
  m = x_size[0] * x_size[1] - 1;
  if (0 <= m) {
    std::memcpy(&b_x_data[0], &x_data[0], (m + 1) * sizeof(real_T));
  }

  m = x_size[0];
  if ((x_size[0] == 0) || (x_size[1] == 0) || (1 >= x_size[0])) {
  } else {
    istart = 2;
    if (x_size[0] - 2 < x_size[1] - 1) {
      x_size_0 = x_size[0] - 1;
    } else {
      x_size_0 = x_size[1];
    }

    jend = x_size_0 - 1;
    for (x_size_0 = 0; x_size_0 <= jend; x_size_0++) {
      for (i = istart; i <= m; i++) {
        b_x_data[(i + b_x_size[0] * x_size_0) - 1] = 0.0;
      }

      if (x_size_0 + 1 >= 1) {
        istart++;
      }
    }
  }
}

void full_loopModelClass::full_loop_schur_p(real_T A_data[], int32_T A_size[2],
  real_T V_data[], int32_T V_size[2])
{
  if (full_loop_anyNonFinite(A_data, A_size)) {
    full_loop_B.A_size_n[0] = A_size[0];
    full_loop_B.A_size_n[1] = A_size[1];
    full_loop_B.loop_ub_nq = A_size[0] * A_size[1];
    for (full_loop_B.info_f = 0; full_loop_B.info_f < full_loop_B.loop_ub_nq;
         full_loop_B.info_f++) {
      full_loop_B.A_data_o[full_loop_B.info_f] = (rtNaN);
    }

    full_loop_triu(full_loop_B.A_data_o, full_loop_B.A_size_n, V_data, V_size);
  } else {
    full_loop_B.A_size_n[0] = A_size[0];
    full_loop_B.A_size_n[1] = A_size[1];
    full_loop_B.loop_ub_nq = A_size[0] * A_size[1];
    if (0 <= full_loop_B.loop_ub_nq - 1) {
      std::memcpy(&full_loop_B.A_data_o[0], &A_data[0], full_loop_B.loop_ub_nq *
                  sizeof(real_T));
    }

    full_loop_xgehrd_p(full_loop_B.A_data_o, full_loop_B.A_size_n, A_data,
                       A_size);
    full_loop_xhseqr_p(A_data, A_size, V_data, V_size, &full_loop_B.info_f);
  }
}

void full_loopModelClass::full_loop_mainDiagZeroImag(const real_T D_data[],
  const int32_T D_size[2], real_T d_data[], int32_T *d_size)
{
  int32_T n;
  int32_T b_k;
  n = D_size[0] - 1;
  *d_size = D_size[0];
  for (b_k = 0; b_k <= n; b_k++) {
    d_data[b_k] = D_data[D_size[0] * b_k + b_k];
  }
}

void full_loopModelClass::full_loop_eig_p(const real_T A_data[], const int32_T
  A_size[2], creal_T V_data[], int32_T *V_size)
{
  if ((A_size[0] == 0) || (A_size[1] == 0)) {
    *V_size = A_size[0];
    full_loop_B.loop_ub_ic = A_size[0];
    if (0 <= full_loop_B.loop_ub_ic - 1) {
      std::memset(&V_data[0], 0, full_loop_B.loop_ub_ic * sizeof(creal_T));
    }
  } else if (full_loop_anyNonFinite(A_data, A_size)) {
    if ((A_size[0] == 1) && (A_size[1] == 1)) {
      *V_size = 1;
      V_data[0].re = (rtNaN);
      V_data[0].im = 0.0;
    } else {
      *V_size = A_size[0];
      full_loop_B.loop_ub_ic = A_size[0];
      for (full_loop_B.b_info = 0; full_loop_B.b_info < full_loop_B.loop_ub_ic;
           full_loop_B.b_info++) {
        V_data[full_loop_B.b_info].re = (rtNaN);
        V_data[full_loop_B.b_info].im = 0.0;
      }
    }
  } else if ((A_size[0] == 1) && (A_size[1] == 1)) {
    *V_size = 1;
    V_data[0].re = A_data[0];
    V_data[0].im = 0.0;
  } else if (full_loop_ishermitian(A_data, A_size)) {
    full_loop_B.A_size_i[0] = A_size[0];
    full_loop_B.A_size_i[1] = A_size[1];
    full_loop_B.loop_ub_ic = A_size[0] * A_size[1];
    if (0 <= full_loop_B.loop_ub_ic - 1) {
      std::memcpy(&full_loop_B.A_data_c[0], &A_data[0], full_loop_B.loop_ub_ic *
                  sizeof(real_T));
    }

    full_loop_schur_p(full_loop_B.A_data_c, full_loop_B.A_size_i,
                      full_loop_B.tmp_data_gx, full_loop_B.tmp_size_h);
    full_loop_mainDiagZeroImag(full_loop_B.tmp_data_gx, full_loop_B.tmp_size_h,
      full_loop_B.tmp_data_jz, &full_loop_B.beta1_size);
    *V_size = full_loop_B.beta1_size;
    full_loop_B.loop_ub_ic = full_loop_B.beta1_size;
    for (full_loop_B.b_info = 0; full_loop_B.b_info < full_loop_B.loop_ub_ic;
         full_loop_B.b_info++) {
      V_data[full_loop_B.b_info].re = full_loop_B.tmp_data_jz[full_loop_B.b_info];
      V_data[full_loop_B.b_info].im = 0.0;
    }
  } else {
    full_loop_xzgeev_p(A_data, A_size, &full_loop_B.b_info, V_data, V_size,
                       full_loop_B.beta1_data, &full_loop_B.beta1_size);
    full_loop_B.loop_ub_ic = *V_size;
    for (full_loop_B.b_info = 0; full_loop_B.b_info < full_loop_B.loop_ub_ic;
         full_loop_B.b_info++) {
      if (full_loop_B.beta1_data[full_loop_B.b_info].im == 0.0) {
        if (V_data[full_loop_B.b_info].im == 0.0) {
          full_loop_B.bim_m = V_data[full_loop_B.b_info].re /
            full_loop_B.beta1_data[full_loop_B.b_info].re;
          full_loop_B.brm_f = 0.0;
        } else if (V_data[full_loop_B.b_info].re == 0.0) {
          full_loop_B.bim_m = 0.0;
          full_loop_B.brm_f = V_data[full_loop_B.b_info].im /
            full_loop_B.beta1_data[full_loop_B.b_info].re;
        } else {
          full_loop_B.bim_m = V_data[full_loop_B.b_info].re /
            full_loop_B.beta1_data[full_loop_B.b_info].re;
          full_loop_B.brm_f = V_data[full_loop_B.b_info].im /
            full_loop_B.beta1_data[full_loop_B.b_info].re;
        }
      } else if (full_loop_B.beta1_data[full_loop_B.b_info].re == 0.0) {
        if (V_data[full_loop_B.b_info].re == 0.0) {
          full_loop_B.bim_m = V_data[full_loop_B.b_info].im /
            full_loop_B.beta1_data[full_loop_B.b_info].im;
          full_loop_B.brm_f = 0.0;
        } else if (V_data[full_loop_B.b_info].im == 0.0) {
          full_loop_B.bim_m = 0.0;
          full_loop_B.brm_f = -(V_data[full_loop_B.b_info].re /
                                full_loop_B.beta1_data[full_loop_B.b_info].im);
        } else {
          full_loop_B.bim_m = V_data[full_loop_B.b_info].im /
            full_loop_B.beta1_data[full_loop_B.b_info].im;
          full_loop_B.brm_f = -(V_data[full_loop_B.b_info].re /
                                full_loop_B.beta1_data[full_loop_B.b_info].im);
        }
      } else {
        full_loop_B.brm_f = std::abs(full_loop_B.beta1_data[full_loop_B.b_info].
          re);
        full_loop_B.bim_m = std::abs(full_loop_B.beta1_data[full_loop_B.b_info].
          im);
        if (full_loop_B.brm_f > full_loop_B.bim_m) {
          full_loop_B.brm_f = full_loop_B.beta1_data[full_loop_B.b_info].im /
            full_loop_B.beta1_data[full_loop_B.b_info].re;
          full_loop_B.d_mi = full_loop_B.brm_f *
            full_loop_B.beta1_data[full_loop_B.b_info].im +
            full_loop_B.beta1_data[full_loop_B.b_info].re;
          full_loop_B.bim_m = (full_loop_B.brm_f * V_data[full_loop_B.b_info].im
                               + V_data[full_loop_B.b_info].re) /
            full_loop_B.d_mi;
          full_loop_B.brm_f = (V_data[full_loop_B.b_info].im - full_loop_B.brm_f
                               * V_data[full_loop_B.b_info].re) /
            full_loop_B.d_mi;
        } else if (full_loop_B.bim_m == full_loop_B.brm_f) {
          full_loop_B.d_mi = full_loop_B.beta1_data[full_loop_B.b_info].re > 0.0
            ? 0.5 : -0.5;
          full_loop_B.sgnbi_n = full_loop_B.beta1_data[full_loop_B.b_info].im >
            0.0 ? 0.5 : -0.5;
          full_loop_B.bim_m = (V_data[full_loop_B.b_info].re * full_loop_B.d_mi
                               + V_data[full_loop_B.b_info].im *
                               full_loop_B.sgnbi_n) / full_loop_B.brm_f;
          full_loop_B.brm_f = (V_data[full_loop_B.b_info].im * full_loop_B.d_mi
                               - V_data[full_loop_B.b_info].re *
                               full_loop_B.sgnbi_n) / full_loop_B.brm_f;
        } else {
          full_loop_B.brm_f = full_loop_B.beta1_data[full_loop_B.b_info].re /
            full_loop_B.beta1_data[full_loop_B.b_info].im;
          full_loop_B.d_mi = full_loop_B.brm_f *
            full_loop_B.beta1_data[full_loop_B.b_info].re +
            full_loop_B.beta1_data[full_loop_B.b_info].im;
          full_loop_B.bim_m = (full_loop_B.brm_f * V_data[full_loop_B.b_info].re
                               + V_data[full_loop_B.b_info].im) /
            full_loop_B.d_mi;
          full_loop_B.brm_f = (full_loop_B.brm_f * V_data[full_loop_B.b_info].im
                               - V_data[full_loop_B.b_info].re) /
            full_loop_B.d_mi;
        }
      }

      full_loop_B.V_data.re = full_loop_B.bim_m;
      full_loop_B.V_data.im = full_loop_B.brm_f;
      V_data[full_loop_B.b_info] = full_loop_B.V_data;
    }
  }
}

real_T full_loopModelClass::full_loop_leastEigvJtJ_p(const real_T Jtri_data[],
  const int32_T Jtri_size[2], real_T n)
{
  real_T lev;
  boolean_T exitg1;
  full_loop_B.bet_n = 0.0;
  full_loop_B.b_idx_h = Jtri_size[0];
  if (0 <= full_loop_B.b_idx_h - 1) {
    std::memset(&full_loop_B.oldq_data[0], 0, full_loop_B.b_idx_h * sizeof
                (real_T));
  }

  full_loop_B.b_size_b = Jtri_size[0];
  full_loop_B.b_idx_h = Jtri_size[0];
  for (full_loop_B.alpha_size_idx_0 = 0; full_loop_B.alpha_size_idx_0 <
       full_loop_B.b_idx_h; full_loop_B.alpha_size_idx_0++) {
    full_loop_B.b_data_d[full_loop_B.alpha_size_idx_0] = 1.0;
  }

  full_loop_B.q_h = full_loop_norm_p4(full_loop_B.b_data_d,
    &full_loop_B.b_size_b);
  full_loop_B.q_size = Jtri_size[0];
  full_loop_B.b_idx_h = Jtri_size[0];
  for (full_loop_B.alpha_size_idx_0 = 0; full_loop_B.alpha_size_idx_0 <
       full_loop_B.b_idx_h; full_loop_B.alpha_size_idx_0++) {
    full_loop_B.q_data_d[full_loop_B.alpha_size_idx_0] = 1.0 / full_loop_B.q_h;
  }

  full_loop_B.c_tmp_i = static_cast<int32_T>(n);
  full_loop_B.c_ez = full_loop_B.c_tmp_i - 1;
  for (full_loop_B.b_i_m = 0; full_loop_B.b_i_m <= full_loop_B.c_ez;
       full_loop_B.b_i_m++) {
    full_loop_solveHessian_p(Jtri_data, Jtri_size, full_loop_B.q_data_d,
      &full_loop_B.q_size, full_loop_B.b_data_d, &full_loop_B.b_size_b);
    full_loop_B.q_h = 0.0;
    full_loop_B.b_idx_h = full_loop_B.q_size;
    for (full_loop_B.alpha_size_idx_0 = 0; full_loop_B.alpha_size_idx_0 <
         full_loop_B.b_idx_h; full_loop_B.alpha_size_idx_0++) {
      full_loop_B.q_h += full_loop_B.q_data_d[full_loop_B.alpha_size_idx_0] *
        full_loop_B.b_data_d[full_loop_B.alpha_size_idx_0];
    }

    full_loop_B.b_idx_h = full_loop_B.b_size_b;
    for (full_loop_B.alpha_size_idx_0 = 0; full_loop_B.alpha_size_idx_0 <
         full_loop_B.b_idx_h; full_loop_B.alpha_size_idx_0++) {
      full_loop_B.b_data_d[full_loop_B.alpha_size_idx_0] =
        (full_loop_B.b_data_d[full_loop_B.alpha_size_idx_0] - full_loop_B.bet_n *
         full_loop_B.oldq_data[full_loop_B.alpha_size_idx_0]) - full_loop_B.q_h *
        full_loop_B.q_data_d[full_loop_B.alpha_size_idx_0];
    }

    full_loop_B.bet_n = full_loop_norm_p4(full_loop_B.b_data_d,
      &full_loop_B.b_size_b);
    full_loop_B.b_idx_h = full_loop_B.q_size;
    if (0 <= full_loop_B.b_idx_h - 1) {
      std::memcpy(&full_loop_B.oldq_data[0], &full_loop_B.q_data_d[0],
                  full_loop_B.b_idx_h * sizeof(real_T));
    }

    full_loop_B.q_size = full_loop_B.b_size_b;
    full_loop_B.b_idx_h = full_loop_B.b_size_b;
    for (full_loop_B.alpha_size_idx_0 = 0; full_loop_B.alpha_size_idx_0 <
         full_loop_B.b_idx_h; full_loop_B.alpha_size_idx_0++) {
      full_loop_B.q_data_d[full_loop_B.alpha_size_idx_0] =
        full_loop_B.b_data_d[full_loop_B.alpha_size_idx_0] / full_loop_B.bet_n;
    }

    full_loop_B.beta_data_a[full_loop_B.b_i_m] = full_loop_B.bet_n;
    full_loop_B.alpha_data_m[full_loop_B.b_i_m] = full_loop_B.q_h;
  }

  if (1.0 > n - 1.0) {
    full_loop_B.c_ez = 0;
    full_loop_B.b_i_m = 0;
  } else {
    full_loop_B.c_ez = static_cast<int32_T>(n - 1.0);
    full_loop_B.b_i_m = full_loop_B.c_ez;
  }

  if (rtIsNaN(n - 1.0)) {
    full_loop_B.y_size_idx_1_d = 1;
    full_loop_B.y_data_g[0] = (rtNaN);
  } else if (n - 1.0 < 1.0) {
    full_loop_B.y_size_idx_1_d = 0;
  } else if (rtIsInf(n - 1.0) && (n - 1.0 == 1.0)) {
    full_loop_B.y_size_idx_1_d = 1;
    full_loop_B.y_data_g[0] = (rtNaN);
  } else {
    full_loop_B.b_idx_h = static_cast<int32_T>(std::floor((n - 1.0) - 1.0));
    full_loop_B.y_size_idx_1_d = full_loop_B.b_idx_h + 1;
    for (full_loop_B.alpha_size_idx_0 = 0; full_loop_B.alpha_size_idx_0 <=
         full_loop_B.b_idx_h; full_loop_B.alpha_size_idx_0++) {
      full_loop_B.y_data_g[full_loop_B.alpha_size_idx_0] = static_cast<real_T>
        (full_loop_B.alpha_size_idx_0) + 1.0;
    }
  }

  if (rtIsNaN(n)) {
    full_loop_B.y_size_idx_1_o = 1;
    full_loop_B.y_data_jc[0] = (rtNaN);
    full_loop_B.y_size_idx_1_k = 1;
    full_loop_B.y_data_c[0] = (rtNaN);
    full_loop_B.y_size_idx_1_m = 1;
    full_loop_B.y_data_eg[0] = (rtNaN);
    full_loop_B.y_size_idx_1_fj = 1;
    full_loop_B.y_data_mx[0] = (rtNaN);
  } else {
    if (n < 1.0) {
      full_loop_B.y_size_idx_1_o = 0;
    } else if (rtIsInf(n) && (1.0 == n)) {
      full_loop_B.y_size_idx_1_o = 1;
      full_loop_B.y_data_jc[0] = (rtNaN);
    } else {
      full_loop_B.b_idx_h = static_cast<int32_T>(std::floor(n - 1.0));
      full_loop_B.y_size_idx_1_o = full_loop_B.b_idx_h + 1;
      for (full_loop_B.alpha_size_idx_0 = 0; full_loop_B.alpha_size_idx_0 <=
           full_loop_B.b_idx_h; full_loop_B.alpha_size_idx_0++) {
        full_loop_B.y_data_jc[full_loop_B.alpha_size_idx_0] = static_cast<real_T>
          (full_loop_B.alpha_size_idx_0) + 1.0;
      }
    }

    if (n < 2.0) {
      full_loop_B.y_size_idx_1_k = 0;
      full_loop_B.y_size_idx_1_m = 0;
    } else {
      if (rtIsInf(n) && (2.0 == n)) {
        full_loop_B.y_size_idx_1_k = 1;
        full_loop_B.y_data_c[0] = (rtNaN);
      } else {
        full_loop_B.b_idx_h = static_cast<int32_T>(std::floor(n - 2.0));
        full_loop_B.y_size_idx_1_k = full_loop_B.b_idx_h + 1;
        for (full_loop_B.alpha_size_idx_0 = 0; full_loop_B.alpha_size_idx_0 <=
             full_loop_B.b_idx_h; full_loop_B.alpha_size_idx_0++) {
          full_loop_B.y_data_c[full_loop_B.alpha_size_idx_0] =
            static_cast<real_T>(full_loop_B.alpha_size_idx_0) + 2.0;
        }
      }

      if (rtIsInf(n) && (2.0 == n)) {
        full_loop_B.y_size_idx_1_m = 1;
        full_loop_B.y_data_eg[0] = (rtNaN);
      } else {
        full_loop_B.y_size_idx_1_m = static_cast<int32_T>(std::floor(n - 2.0)) +
          1;
        full_loop_B.b_idx_h = static_cast<int32_T>(std::floor(n - 2.0));
        for (full_loop_B.alpha_size_idx_0 = 0; full_loop_B.alpha_size_idx_0 <=
             full_loop_B.b_idx_h; full_loop_B.alpha_size_idx_0++) {
          full_loop_B.y_data_eg[full_loop_B.alpha_size_idx_0] =
            static_cast<real_T>(full_loop_B.alpha_size_idx_0) + 2.0;
        }
      }
    }

    if (n < 1.0) {
      full_loop_B.y_size_idx_1_fj = 0;
    } else if (rtIsInf(n) && (1.0 == n)) {
      full_loop_B.y_size_idx_1_fj = 1;
      full_loop_B.y_data_mx[0] = (rtNaN);
    } else {
      full_loop_B.y_size_idx_1_fj = static_cast<int32_T>(std::floor(n - 1.0)) +
        1;
      full_loop_B.b_idx_h = static_cast<int32_T>(std::floor(n - 1.0));
      for (full_loop_B.alpha_size_idx_0 = 0; full_loop_B.alpha_size_idx_0 <=
           full_loop_B.b_idx_h; full_loop_B.alpha_size_idx_0++) {
        full_loop_B.y_data_mx[full_loop_B.alpha_size_idx_0] = static_cast<real_T>
          (full_loop_B.alpha_size_idx_0) + 1.0;
      }
    }
  }

  if (rtIsNaN(n - 1.0)) {
    full_loop_B.y_size_idx_1_ox = 1;
    full_loop_B.y_data_of[0] = (rtNaN);
  } else if (n - 1.0 < 1.0) {
    full_loop_B.y_size_idx_1_ox = 0;
  } else if (rtIsInf(n - 1.0) && (n - 1.0 == 1.0)) {
    full_loop_B.y_size_idx_1_ox = 1;
    full_loop_B.y_data_of[0] = (rtNaN);
  } else {
    full_loop_B.y_size_idx_1_ox = static_cast<int32_T>(std::floor((n - 1.0) -
      1.0)) + 1;
    full_loop_B.b_idx_h = static_cast<int32_T>(std::floor((n - 1.0) - 1.0));
    for (full_loop_B.alpha_size_idx_0 = 0; full_loop_B.alpha_size_idx_0 <=
         full_loop_B.b_idx_h; full_loop_B.alpha_size_idx_0++) {
      full_loop_B.y_data_of[full_loop_B.alpha_size_idx_0] = static_cast<real_T>
        (full_loop_B.alpha_size_idx_0) + 1.0;
    }
  }

  full_loop_B.y_size_g[0] = (full_loop_B.y_size_idx_1_d +
    full_loop_B.y_size_idx_1_o) + full_loop_B.y_size_idx_1_k;
  full_loop_B.y_size_g[1] = 2;
  if (0 <= full_loop_B.y_size_idx_1_d - 1) {
    std::memcpy(&full_loop_B.y_data_m[0], &full_loop_B.y_data_g[0],
                full_loop_B.y_size_idx_1_d * sizeof(real_T));
  }

  for (full_loop_B.alpha_size_idx_0 = 0; full_loop_B.alpha_size_idx_0 <
       full_loop_B.y_size_idx_1_o; full_loop_B.alpha_size_idx_0++) {
    full_loop_B.y_data_m[full_loop_B.alpha_size_idx_0 +
      full_loop_B.y_size_idx_1_d] =
      full_loop_B.y_data_jc[full_loop_B.alpha_size_idx_0];
  }

  for (full_loop_B.alpha_size_idx_0 = 0; full_loop_B.alpha_size_idx_0 <
       full_loop_B.y_size_idx_1_k; full_loop_B.alpha_size_idx_0++) {
    full_loop_B.y_data_m[(full_loop_B.alpha_size_idx_0 +
                          full_loop_B.y_size_idx_1_d) +
      full_loop_B.y_size_idx_1_o] =
      full_loop_B.y_data_c[full_loop_B.alpha_size_idx_0];
  }

  for (full_loop_B.alpha_size_idx_0 = 0; full_loop_B.alpha_size_idx_0 <
       full_loop_B.y_size_idx_1_m; full_loop_B.alpha_size_idx_0++) {
    full_loop_B.y_data_m[full_loop_B.alpha_size_idx_0 + full_loop_B.y_size_g[0]]
      = full_loop_B.y_data_eg[full_loop_B.alpha_size_idx_0];
  }

  for (full_loop_B.alpha_size_idx_0 = 0; full_loop_B.alpha_size_idx_0 <
       full_loop_B.y_size_idx_1_fj; full_loop_B.alpha_size_idx_0++) {
    full_loop_B.y_data_m[(full_loop_B.alpha_size_idx_0 +
                          full_loop_B.y_size_idx_1_m) + full_loop_B.y_size_g[0]]
      = full_loop_B.y_data_mx[full_loop_B.alpha_size_idx_0];
  }

  for (full_loop_B.alpha_size_idx_0 = 0; full_loop_B.alpha_size_idx_0 <
       full_loop_B.y_size_idx_1_ox; full_loop_B.alpha_size_idx_0++) {
    full_loop_B.y_data_m[((full_loop_B.alpha_size_idx_0 +
      full_loop_B.y_size_idx_1_m) + full_loop_B.y_size_idx_1_fj) +
      full_loop_B.y_size_g[0]] =
      full_loop_B.y_data_of[full_loop_B.alpha_size_idx_0];
  }

  full_loop_B.beta_size = (full_loop_B.c_ez + full_loop_B.c_tmp_i) +
    full_loop_B.b_i_m;
  if (0 <= full_loop_B.c_ez - 1) {
    std::memcpy(&full_loop_B.beta_data_k[0], &full_loop_B.beta_data_a[0],
                full_loop_B.c_ez * sizeof(real_T));
  }

  for (full_loop_B.alpha_size_idx_0 = 0; full_loop_B.alpha_size_idx_0 <
       full_loop_B.c_tmp_i; full_loop_B.alpha_size_idx_0++) {
    full_loop_B.beta_data_k[full_loop_B.alpha_size_idx_0 + full_loop_B.c_ez] =
      full_loop_B.alpha_data_m[full_loop_B.alpha_size_idx_0];
  }

  for (full_loop_B.alpha_size_idx_0 = 0; full_loop_B.alpha_size_idx_0 <
       full_loop_B.b_i_m; full_loop_B.alpha_size_idx_0++) {
    full_loop_B.beta_data_k[(full_loop_B.alpha_size_idx_0 + full_loop_B.c_ez) +
      full_loop_B.c_tmp_i] =
      full_loop_B.beta_data_a[full_loop_B.alpha_size_idx_0];
  }

  full_loop_B.n_dz[0] = n;
  full_loop_B.n_dz[1] = n;
  full_loop_accumarray_p(full_loop_B.y_data_m, full_loop_B.y_size_g,
    full_loop_B.beta_data_k, &full_loop_B.beta_size, full_loop_B.n_dz,
    full_loop_B.tmp_data_ff, full_loop_B.tmp_size_i);
  full_loop_eig_p(full_loop_B.tmp_data_ff, full_loop_B.tmp_size_i,
                  full_loop_B.tmp_data_g4, &full_loop_B.b_size_b);
  full_loop_abs_p4(full_loop_B.tmp_data_g4, &full_loop_B.b_size_b,
                   full_loop_B.y_data_g, &full_loop_B.q_size);
  full_loop_B.alpha_size_idx_0 = full_loop_B.q_size;
  full_loop_B.b_idx_h = full_loop_B.q_size;
  if (0 <= full_loop_B.b_idx_h - 1) {
    std::memcpy(&full_loop_B.alpha_data_m[0], &full_loop_B.y_data_g[0],
                full_loop_B.b_idx_h * sizeof(real_T));
  }

  if (full_loop_B.q_size <= 2) {
    if (full_loop_B.q_size == 0) {
      full_loop_B.bet_n = (rtNaN);
    } else if (full_loop_B.q_size == 1) {
      full_loop_B.bet_n = full_loop_B.alpha_data_m[0];
    } else if ((full_loop_B.alpha_data_m[0] > full_loop_B.alpha_data_m[1]) ||
               (rtIsNaN(full_loop_B.alpha_data_m[0]) && (!rtIsNaN
                 (full_loop_B.alpha_data_m[1])))) {
      full_loop_B.bet_n = full_loop_B.alpha_data_m[1];
    } else {
      full_loop_B.bet_n = full_loop_B.alpha_data_m[0];
    }
  } else {
    if (!rtIsNaN(full_loop_B.alpha_data_m[0])) {
      full_loop_B.b_idx_h = 1;
    } else {
      full_loop_B.b_idx_h = 0;
      full_loop_B.b_i_m = 2;
      exitg1 = false;
      while ((!exitg1) && (full_loop_B.b_i_m <= full_loop_B.alpha_size_idx_0)) {
        if (!rtIsNaN(full_loop_B.alpha_data_m[full_loop_B.b_i_m - 1])) {
          full_loop_B.b_idx_h = full_loop_B.b_i_m;
          exitg1 = true;
        } else {
          full_loop_B.b_i_m++;
        }
      }
    }

    if (full_loop_B.b_idx_h == 0) {
      full_loop_B.bet_n = full_loop_B.alpha_data_m[0];
    } else {
      full_loop_B.bet_n = full_loop_B.alpha_data_m[full_loop_B.b_idx_h - 1];
      for (full_loop_B.b_i_m = full_loop_B.b_idx_h + 1; full_loop_B.b_i_m <=
           full_loop_B.alpha_size_idx_0; full_loop_B.b_i_m++) {
        full_loop_B.q_h = full_loop_B.alpha_data_m[full_loop_B.b_i_m - 1];
        if (full_loop_B.bet_n > full_loop_B.q_h) {
          full_loop_B.bet_n = full_loop_B.q_h;
        }
      }
    }
  }

  lev = 1.0 / full_loop_B.bet_n;
  return lev;
}

void full_loopModelClass::full_loop_fletcher_p(real_T S, real_T Snew, const
  real_T dx_data[], const int32_T *dx_size, const real_T v_data[], const real_T
  Jtri_data[], const int32_T Jtri_size[2], real_T lambda, real_T lambdac, real_T
  *b_lambda, real_T *b_lambdac)
{
  *b_lambdac = lambdac;
  *b_lambda = lambda;
  full_loop_mulJtJ(Jtri_data, Jtri_size, dx_data, dx_size,
                   full_loop_B.tmp_data_gf, &full_loop_B.tmp_size_b0);
  full_loop_B.R_c = 0.0;
  full_loop_B.loop_ub_e = *dx_size;
  for (full_loop_B.i5 = 0; full_loop_B.i5 < full_loop_B.loop_ub_e;
       full_loop_B.i5++) {
    full_loop_B.R_c += (2.0 * v_data[full_loop_B.i5] -
                        full_loop_B.tmp_data_gf[full_loop_B.i5]) *
      dx_data[full_loop_B.i5];
  }

  full_loop_B.R_c = (S - Snew) / full_loop_B.R_c;
  if (full_loop_B.R_c > 0.75) {
    *b_lambda = lambda / 2.0;
    if (*b_lambda < lambdac) {
      *b_lambda = 0.0;
    }
  } else {
    if (full_loop_B.R_c < 0.25) {
      full_loop_B.R_c = 0.0;
      full_loop_B.loop_ub_e = *dx_size;
      for (full_loop_B.i5 = 0; full_loop_B.i5 < full_loop_B.loop_ub_e;
           full_loop_B.i5++) {
        full_loop_B.R_c += dx_data[full_loop_B.i5] * v_data[full_loop_B.i5];
      }

      full_loop_B.R_c = (Snew - S) / full_loop_B.R_c + 2.0;
      if ((2.0 > full_loop_B.R_c) || rtIsNaN(full_loop_B.R_c)) {
        full_loop_B.R_c = 2.0;
      }

      if (!(full_loop_B.R_c < 10.0)) {
        full_loop_B.R_c = 10.0;
      }

      if (lambda == 0.0) {
        if (40.0 < Jtri_size[0]) {
          full_loop_B.d3 = 40.0;
        } else {
          full_loop_B.d3 = Jtri_size[0];
        }

        *b_lambdac = full_loop_leastEigvJtJ_p(Jtri_data, Jtri_size,
          full_loop_B.d3);
        *b_lambda = *b_lambdac;
        full_loop_B.R_c /= 2.0;
      }

      *b_lambda *= full_loop_B.R_c;
    }
  }
}

void full_loopModelClass::full_loop_LMFsolve_p43riobte(const real_T
  FUN_tunableEnvironment_f1_data[], const int32_T
  FUN_tunableEnvironment_f1_size[2], const real_T
  FUN_tunableEnvironment_f2_data[], const int32_T
  *FUN_tunableEnvironment_f2_size, real_T x_data[], const int32_T *x_size)
{
  boolean_T exitg1;
  full_loop_B.maxiter = 100.0 * static_cast<real_T>(*x_size);
  full_loop___anon_fcn_p43(FUN_tunableEnvironment_f1_data,
    FUN_tunableEnvironment_f1_size, FUN_tunableEnvironment_f2_data,
    FUN_tunableEnvironment_f2_size, x_data, full_loop_B.b_r_data_o,
    &full_loop_B.b_r_size, full_loop_B.b_varargout_2_data_a,
    full_loop_B.b_varargout_2_size);
  full_loop_B.Jtri_size[0] = full_loop_B.b_varargout_2_size[0];
  full_loop_B.Jtri_size[1] = 3;
  full_loop_B.loop_ub_tmp = full_loop_B.b_varargout_2_size[0] *
    full_loop_B.b_varargout_2_size[1] - 1;
  if (0 <= full_loop_B.loop_ub_tmp) {
    std::memcpy(&full_loop_B.Jtri_data_m4[0], &full_loop_B.b_varargout_2_data_a
                [0], (full_loop_B.loop_ub_tmp + 1) * sizeof(real_T));
  }

  full_loop_mulJt_p(full_loop_B.b_varargout_2_data_a,
                    full_loop_B.b_varargout_2_size, full_loop_B.b_r_data_o,
                    &full_loop_B.b_r_size, full_loop_B.tmp_data_ow,
                    &full_loop_B.tmp_size_cr);
  full_loop_B.v_size_k = full_loop_B.tmp_size_cr;
  full_loop_B.loop_ub_i = full_loop_B.tmp_size_cr;
  if (0 <= full_loop_B.loop_ub_i - 1) {
    std::memcpy(&full_loop_B.v_data_j0[0], &full_loop_B.tmp_data_ow[0],
                full_loop_B.loop_ub_i * sizeof(real_T));
  }

  full_loop_B.S = 0.0;
  full_loop_B.loop_ub_i = full_loop_B.b_r_size;
  for (full_loop_B.loop_ub_tmp = 0; full_loop_B.loop_ub_tmp <
       full_loop_B.loop_ub_i; full_loop_B.loop_ub_tmp++) {
    full_loop_B.S += full_loop_B.b_r_data_o[full_loop_B.loop_ub_tmp] *
      full_loop_B.b_r_data_o[full_loop_B.loop_ub_tmp];
  }

  full_loop_B.lambda = 0.0;
  full_loop_B.lambdac = 0.75;
  full_loop_B.iter = 0.0;
  full_loop_repmat_p4(static_cast<real_T>(*x_size), full_loop_B.tmp_data_ow,
                      &full_loop_B.tmp_size_cr);
  full_loop_B.loop_ub_tmp = full_loop_B.tmp_size_cr;
  full_loop_B.loop_ub_i = full_loop_B.tmp_size_cr;
  if (0 <= full_loop_B.loop_ub_i - 1) {
    std::memcpy(&full_loop_B.epsx_data_h[0], &full_loop_B.tmp_data_ow[0],
                full_loop_B.loop_ub_i * sizeof(real_T));
  }

  full_loop_repmat_p4(static_cast<real_T>(*x_size), full_loop_B.tmp_data_ow,
                      &full_loop_B.tmp_size_cr);
  full_loop_B.loop_ub_i = full_loop_B.tmp_size_cr;
  if (0 <= full_loop_B.loop_ub_i - 1) {
    std::memcpy(&full_loop_B.epsr_data_i[0], &full_loop_B.tmp_data_ow[0],
                full_loop_B.loop_ub_i * sizeof(real_T));
  }

  full_loop_B.dx_size = full_loop_B.loop_ub_tmp;
  if (0 <= full_loop_B.loop_ub_tmp - 1) {
    std::memcpy(&full_loop_B.dx_data[0], &full_loop_B.epsx_data_h[0],
                full_loop_B.loop_ub_tmp * sizeof(real_T));
  }

  exitg1 = false;
  while ((!exitg1) && (full_loop_B.iter < full_loop_B.maxiter)) {
    full_loop_abs_p(full_loop_B.dx_data, &full_loop_B.dx_size,
                    full_loop_B.tmp_data_ow, &full_loop_B.tmp_size_cr);
    full_loop_B.tmp_size_nc = full_loop_B.tmp_size_cr;
    full_loop_B.loop_ub_i = full_loop_B.tmp_size_cr;
    for (full_loop_B.loop_ub_tmp = 0; full_loop_B.loop_ub_tmp <
         full_loop_B.loop_ub_i; full_loop_B.loop_ub_tmp++) {
      full_loop_B.tmp_data_kn[full_loop_B.loop_ub_tmp] =
        (full_loop_B.tmp_data_ow[full_loop_B.loop_ub_tmp] >=
         full_loop_B.epsx_data_h[full_loop_B.loop_ub_tmp]);
    }

    if (full_loop_any_p4(full_loop_B.tmp_data_kn, &full_loop_B.tmp_size_nc)) {
      full_loop_abs_p(full_loop_B.b_r_data_o, &full_loop_B.b_r_size,
                      full_loop_B.tmp_data_ow, &full_loop_B.tmp_size_cr);
      full_loop_B.tmp_size_bp = full_loop_B.tmp_size_cr;
      full_loop_B.loop_ub_i = full_loop_B.tmp_size_cr;
      for (full_loop_B.loop_ub_tmp = 0; full_loop_B.loop_ub_tmp <
           full_loop_B.loop_ub_i; full_loop_B.loop_ub_tmp++) {
        full_loop_B.tmp_data_kn[full_loop_B.loop_ub_tmp] =
          (full_loop_B.tmp_data_ow[full_loop_B.loop_ub_tmp] >=
           full_loop_B.epsr_data_i[full_loop_B.loop_ub_tmp]);
      }

      if (full_loop_any_p4(full_loop_B.tmp_data_kn, &full_loop_B.tmp_size_bp)) {
        full_loop_B.iter++;
        full_loo_solveDampenedHessian_p(full_loop_B.Jtri_data_m4,
          full_loop_B.Jtri_size, full_loop_B.lambda, full_loop_B.v_data_j0,
          &full_loop_B.v_size_k, full_loop_B.dx_data, &full_loop_B.dx_size);
        full_loop_B.loop_ub_i = *x_size;
        for (full_loop_B.loop_ub_tmp = 0; full_loop_B.loop_ub_tmp <
             full_loop_B.loop_ub_i; full_loop_B.loop_ub_tmp++) {
          full_loop_B.xnew_data_c[full_loop_B.loop_ub_tmp] =
            x_data[full_loop_B.loop_ub_tmp] -
            full_loop_B.dx_data[full_loop_B.loop_ub_tmp];
        }

        full_loop___anon_fcn_p43(FUN_tunableEnvironment_f1_data,
          FUN_tunableEnvironment_f1_size, FUN_tunableEnvironment_f2_data,
          FUN_tunableEnvironment_f2_size, full_loop_B.xnew_data_c,
          full_loop_B.b_varargout_1_data_fr, &full_loop_B.b_varargout_1_size,
          full_loop_B.b_varargout_2_data_a, full_loop_B.b_varargout_2_size);
        full_loop_B.b_varargout_1_f = 0.0;
        full_loop_B.loop_ub_i = full_loop_B.b_varargout_1_size;
        for (full_loop_B.loop_ub_tmp = 0; full_loop_B.loop_ub_tmp <
             full_loop_B.loop_ub_i; full_loop_B.loop_ub_tmp++) {
          full_loop_B.b_varargout_1_f +=
            full_loop_B.b_varargout_1_data_fr[full_loop_B.loop_ub_tmp] *
            full_loop_B.b_varargout_1_data_fr[full_loop_B.loop_ub_tmp];
        }

        full_loop_fletcher_p(full_loop_B.S, full_loop_B.b_varargout_1_f,
                             full_loop_B.dx_data, &full_loop_B.dx_size,
                             full_loop_B.v_data_j0, full_loop_B.Jtri_data_m4,
                             full_loop_B.Jtri_size, full_loop_B.lambda,
                             full_loop_B.lambdac, &full_loop_B.lambda,
                             &full_loop_B.lambdac);
        if (full_loop_B.b_varargout_1_f < full_loop_B.S) {
          full_loop_B.S = full_loop_B.b_varargout_1_f;
          full_loop_B.loop_ub_i = *x_size;
          if (0 <= full_loop_B.loop_ub_i - 1) {
            std::memcpy(&x_data[0], &full_loop_B.xnew_data_c[0],
                        full_loop_B.loop_ub_i * sizeof(real_T));
          }

          full_loop_B.b_r_size = full_loop_B.b_varargout_1_size;
          full_loop_B.loop_ub_i = full_loop_B.b_varargout_1_size;
          if (0 <= full_loop_B.loop_ub_i - 1) {
            std::memcpy(&full_loop_B.b_r_data_o[0],
                        &full_loop_B.b_varargout_1_data_fr[0],
                        full_loop_B.loop_ub_i * sizeof(real_T));
          }

          full_loop_B.Jtri_size[0] = full_loop_B.b_varargout_2_size[0];
          full_loop_B.Jtri_size[1] = 3;
          full_loop_B.loop_ub_i = full_loop_B.b_varargout_2_size[0] *
            full_loop_B.b_varargout_2_size[1] - 1;
          if (0 <= full_loop_B.loop_ub_i) {
            std::memcpy(&full_loop_B.Jtri_data_m4[0],
                        &full_loop_B.b_varargout_2_data_a[0],
                        (full_loop_B.loop_ub_i + 1) * sizeof(real_T));
          }

          full_loop_mulJt_p(full_loop_B.b_varargout_2_data_a,
                            full_loop_B.b_varargout_2_size,
                            full_loop_B.b_varargout_1_data_fr,
                            &full_loop_B.b_varargout_1_size,
                            full_loop_B.tmp_data_ow, &full_loop_B.tmp_size_cr);
          full_loop_B.v_size_k = full_loop_B.tmp_size_cr;
          full_loop_B.loop_ub_i = full_loop_B.tmp_size_cr;
          if (0 <= full_loop_B.loop_ub_i - 1) {
            std::memcpy(&full_loop_B.v_data_j0[0], &full_loop_B.tmp_data_ow[0],
                        full_loop_B.loop_ub_i * sizeof(real_T));
          }
        }
      } else {
        exitg1 = true;
      }
    } else {
      exitg1 = true;
    }
  }
}

void full_loopModelClass::full_loop___anon_fcn_p4(const real_T waypoints_data[],
  const int32_T waypoints_size[2], const real_T course_data[], const int32_T
  *course_size, const real_T x_data[], real_T varargout_1_data[], int32_T
  *varargout_1_size, real_T varargout_2_data[], int32_T varargout_2_size[2])
{
  full_loop_B.loop_ub_nj = *course_size;
  if (0 <= full_loop_B.loop_ub_nj - 1) {
    std::memcpy(&full_loop_B.course_data_n[0], &course_data[0],
                full_loop_B.loop_ub_nj * sizeof(real_T));
  }

  full_loop_B.loop_ub_nj = waypoints_size[0];
  for (full_loop_B.e_et = 0; full_loop_B.e_et < full_loop_B.loop_ub_nj;
       full_loop_B.e_et++) {
    full_loop_B.hip_data_jg[full_loop_B.e_et].re =
      waypoints_data[full_loop_B.e_et];
    full_loop_B.hip_data_jg[full_loop_B.e_et].im =
      waypoints_data[full_loop_B.e_et + waypoints_size[0]];
  }

  if (2 > *course_size) {
    full_loop_B.f_h = 0;
    full_loop_B.e_et = 0;
  } else {
    full_loop_B.f_h = 1;
    full_loop_B.e_et = *course_size;
  }

  full_loop_B.g_size_idx_1_tmp_k = full_loop_B.e_et - full_loop_B.f_h;
  for (full_loop_B.e_et = 0; full_loop_B.e_et < full_loop_B.g_size_idx_1_tmp_k;
       full_loop_B.e_et++) {
    full_loop_B.g_data_g[full_loop_B.e_et] = full_loop_B.f_h + full_loop_B.e_et;
  }

  for (full_loop_B.e_et = 0; full_loop_B.e_et < full_loop_B.g_size_idx_1_tmp_k;
       full_loop_B.e_et++) {
    full_loop_B.course_data_n[full_loop_B.g_data_g[full_loop_B.e_et]] =
      x_data[full_loop_B.e_et];
  }

  if (1.0 > static_cast<real_T>(waypoints_size[0]) - 1.0) {
    full_loop_B.e_et = 0;
    full_loop_B.l_i = 0;
  } else {
    full_loop_B.e_et = waypoints_size[0] - 1;
    full_loop_B.l_i = waypoints_size[0] - 1;
  }

  if (2 > waypoints_size[0]) {
    full_loop_B.g_size_idx_1_tmp_k = 0;
    full_loop_B.o_j = 0;
    full_loop_B.f_h = 0;
    full_loop_B.q_a2r = 0;
  } else {
    full_loop_B.g_size_idx_1_tmp_k = 1;
    full_loop_B.o_j = waypoints_size[0];
    full_loop_B.f_h = 1;
    full_loop_B.q_a2r = waypoints_size[0];
  }

  if (0 <= full_loop_B.e_et - 1) {
    std::memcpy(&full_loop_B.hip_data_k[0], &full_loop_B.hip_data_jg[0],
                full_loop_B.e_et * sizeof(creal_T));
  }

  full_loop_B.course_size_d = full_loop_B.l_i;
  if (0 <= full_loop_B.l_i - 1) {
    std::memcpy(&full_loop_B.course_data_jb[0], &full_loop_B.course_data_n[0],
                full_loop_B.l_i * sizeof(real_T));
  }

  full_loop_B.l_i = full_loop_B.o_j - full_loop_B.g_size_idx_1_tmp_k;
  full_loop_B.hip_size_j = full_loop_B.l_i;
  for (full_loop_B.e_et = 0; full_loop_B.e_et < full_loop_B.l_i;
       full_loop_B.e_et++) {
    full_loop_B.hip_data_f[full_loop_B.e_et] =
      full_loop_B.hip_data_jg[full_loop_B.g_size_idx_1_tmp_k + full_loop_B.e_et];
  }

  full_loop_B.g_size_idx_1_tmp_k = full_loop_B.q_a2r - full_loop_B.f_h;
  full_loop_B.course_size_f = full_loop_B.g_size_idx_1_tmp_k;
  for (full_loop_B.e_et = 0; full_loop_B.e_et < full_loop_B.g_size_idx_1_tmp_k;
       full_loop_B.e_et++) {
    full_loop_B.course_data_k[full_loop_B.e_et] =
      full_loop_B.course_data_n[full_loop_B.f_h + full_loop_B.e_et];
  }

  full_loop_clothoidG1fit2wp_p(full_loop_B.hip_data_k,
    full_loop_B.course_data_jb, &full_loop_B.course_size_d,
    full_loop_B.hip_data_f, &full_loop_B.hip_size_j, full_loop_B.course_data_k,
    &full_loop_B.course_size_f, full_loop_B.k0_data_a, &full_loop_B.k0_size_l,
    full_loop_B.k1_data_j, &full_loop_B.k1_size_e, full_loop_B.unusedU1_data,
    &full_loop_B.unusedU1_size, full_loop_B.dk0_dc0_data_g,
    &full_loop_B.dk0_dc0_size_c, full_loop_B.dk0_dc1_data_j,
    &full_loop_B.dk0_dc1_size_h, full_loop_B.dk1_dc0_data_e,
    &full_loop_B.dk1_dc0_size_o, full_loop_B.dk1_dc1_data_j,
    &full_loop_B.dk1_dc1_size_d);
  if (1.0 > static_cast<real_T>(full_loop_B.k1_size_e) - 1.0) {
    full_loop_B.f_h = 0;
  } else {
    full_loop_B.f_h = full_loop_B.k1_size_e - 1;
  }

  if (2 > full_loop_B.k0_size_l) {
    full_loop_B.g_size_idx_1_tmp_k = 0;
  } else {
    full_loop_B.g_size_idx_1_tmp_k = 1;
  }

  if (2 > full_loop_B.dk0_dc1_size_h) {
    full_loop_B.q_a2r = 0;
    full_loop_B.l_i = 0;
  } else {
    full_loop_B.q_a2r = 1;
    full_loop_B.l_i = full_loop_B.dk0_dc1_size_h;
  }

  if (2 > full_loop_B.dk1_dc0_size_o) {
    full_loop_B.o_j = 0;
    full_loop_B.e_et = 0;
  } else {
    full_loop_B.o_j = 1;
    full_loop_B.e_et = full_loop_B.dk1_dc0_size_o;
  }

  if (1.0 > static_cast<real_T>(waypoints_size[0]) - 2.0) {
    full_loop_B.ib_j = 0;
  } else {
    full_loop_B.ib_j = waypoints_size[0] - 2;
  }

  if (2.0 > static_cast<real_T>(waypoints_size[0]) - 1.0) {
    full_loop_B.mb_g = 0;
  } else {
    full_loop_B.mb_g = 1;
  }

  full_loop_B.loop_ub_nj = full_loop_B.e_et - full_loop_B.o_j;
  full_loop_B.reshapes_i[0].f1.size = full_loop_B.loop_ub_nj + 1;
  for (full_loop_B.e_et = 0; full_loop_B.e_et < full_loop_B.loop_ub_nj;
       full_loop_B.e_et++) {
    full_loop_B.reshapes_i[0].f1.data[full_loop_B.e_et] =
      full_loop_B.dk1_dc0_data_e[full_loop_B.o_j + full_loop_B.e_et];
  }

  full_loop_B.reshapes_i[0].f1.data[full_loop_B.loop_ub_nj] = 0.0;
  full_loop_B.reshapes_i[1].f1.size = full_loop_B.ib_j + 1;
  for (full_loop_B.e_et = 0; full_loop_B.e_et < full_loop_B.ib_j;
       full_loop_B.e_et++) {
    full_loop_B.reshapes_i[1].f1.data[full_loop_B.e_et] =
      full_loop_B.dk1_dc1_data_j[full_loop_B.e_et] -
      full_loop_B.dk0_dc0_data_g[full_loop_B.mb_g + full_loop_B.e_et];
  }

  full_loop_B.reshapes_i[1].f1.data[full_loop_B.ib_j] =
    full_loop_B.dk1_dc1_data_j[waypoints_size[0] - 2];
  full_loop_B.loop_ub_nj = full_loop_B.l_i - full_loop_B.q_a2r;
  full_loop_B.reshapes_i[2].f1.size = full_loop_B.loop_ub_nj + 1;
  for (full_loop_B.e_et = 0; full_loop_B.e_et < full_loop_B.loop_ub_nj;
       full_loop_B.e_et++) {
    full_loop_B.reshapes_i[2].f1.data[full_loop_B.e_et] =
      -full_loop_B.dk0_dc1_data_j[full_loop_B.q_a2r + full_loop_B.e_et];
  }

  full_loop_B.reshapes_i[2].f1.data[full_loop_B.loop_ub_nj] = 0.0;
  *varargout_1_size = full_loop_B.f_h + 1;
  for (full_loop_B.e_et = 0; full_loop_B.e_et < full_loop_B.f_h;
       full_loop_B.e_et++) {
    varargout_1_data[full_loop_B.e_et] = full_loop_B.k1_data_j[full_loop_B.e_et]
      - full_loop_B.k0_data_a[full_loop_B.g_size_idx_1_tmp_k + full_loop_B.e_et];
  }

  varargout_1_data[full_loop_B.f_h] =
    full_loop_B.k1_data_j[full_loop_B.k1_size_e - 1];
  varargout_2_size[0] = full_loop_B.reshapes_i[0].f1.size;
  varargout_2_size[1] = 3;
  full_loop_B.loop_ub_nj = full_loop_B.reshapes_i[0].f1.size;
  for (full_loop_B.e_et = 0; full_loop_B.e_et < full_loop_B.loop_ub_nj;
       full_loop_B.e_et++) {
    varargout_2_data[full_loop_B.e_et] = full_loop_B.reshapes_i[0]
      .f1.data[full_loop_B.e_et];
  }

  full_loop_B.loop_ub_nj = full_loop_B.reshapes_i[1].f1.size;
  for (full_loop_B.e_et = 0; full_loop_B.e_et < full_loop_B.loop_ub_nj;
       full_loop_B.e_et++) {
    varargout_2_data[full_loop_B.e_et + full_loop_B.reshapes_i[0].f1.size] =
      full_loop_B.reshapes_i[1].f1.data[full_loop_B.e_et];
  }

  full_loop_B.loop_ub_nj = full_loop_B.reshapes_i[2].f1.size;
  for (full_loop_B.e_et = 0; full_loop_B.e_et < full_loop_B.loop_ub_nj;
       full_loop_B.e_et++) {
    varargout_2_data[(full_loop_B.e_et + full_loop_B.reshapes_i[0].f1.size) +
      full_loop_B.reshapes_i[1].f1.size] = full_loop_B.reshapes_i[2]
      .f1.data[full_loop_B.e_et];
  }
}

void full_loopModelClass::full_loop_LMFsolve_p43riobt(const real_T
  FUN_tunableEnvironment_f1_data[], const int32_T
  FUN_tunableEnvironment_f1_size[2], const real_T
  FUN_tunableEnvironment_f2_data[], const int32_T
  *FUN_tunableEnvironment_f2_size, real_T x_data[], const int32_T *x_size)
{
  boolean_T exitg1;
  full_loop_B.maxiter_i = 100.0 * static_cast<real_T>(*x_size);
  full_loop___anon_fcn_p4(FUN_tunableEnvironment_f1_data,
    FUN_tunableEnvironment_f1_size, FUN_tunableEnvironment_f2_data,
    FUN_tunableEnvironment_f2_size, x_data, full_loop_B.b_r_data_m,
    &full_loop_B.b_r_size_g, full_loop_B.b_varargout_2_data_h,
    full_loop_B.b_varargout_2_size_pz);
  full_loop_B.Jtri_size_d[0] = full_loop_B.b_varargout_2_size_pz[0];
  full_loop_B.Jtri_size_d[1] = 3;
  full_loop_B.loop_ub_tmp_a = full_loop_B.b_varargout_2_size_pz[0] *
    full_loop_B.b_varargout_2_size_pz[1] - 1;
  if (0 <= full_loop_B.loop_ub_tmp_a) {
    std::memcpy(&full_loop_B.Jtri_data_f[0], &full_loop_B.b_varargout_2_data_h[0],
                (full_loop_B.loop_ub_tmp_a + 1) * sizeof(real_T));
  }

  full_loop_mulJt_p(full_loop_B.b_varargout_2_data_h,
                    full_loop_B.b_varargout_2_size_pz, full_loop_B.b_r_data_m,
                    &full_loop_B.b_r_size_g, full_loop_B.xnew_data_o,
                    &full_loop_B.xnew_size_l);
  full_loop_B.v_size_j = full_loop_B.xnew_size_l;
  full_loop_B.loop_ub_de = full_loop_B.xnew_size_l;
  if (0 <= full_loop_B.loop_ub_de - 1) {
    std::memcpy(&full_loop_B.v_data_d[0], &full_loop_B.xnew_data_o[0],
                full_loop_B.loop_ub_de * sizeof(real_T));
  }

  full_loop_B.S_m = 0.0;
  full_loop_B.loop_ub_de = full_loop_B.b_r_size_g;
  for (full_loop_B.loop_ub_tmp_a = 0; full_loop_B.loop_ub_tmp_a <
       full_loop_B.loop_ub_de; full_loop_B.loop_ub_tmp_a++) {
    full_loop_B.S_m += full_loop_B.b_r_data_m[full_loop_B.loop_ub_tmp_a] *
      full_loop_B.b_r_data_m[full_loop_B.loop_ub_tmp_a];
  }

  full_loop_B.lambda_a = 0.0;
  full_loop_B.lambdac_i = 0.75;
  full_loop_B.iter_c3 = 0.0;
  full_loop_repmat_p4(static_cast<real_T>(*x_size), full_loop_B.epsx_data_l,
                      &full_loop_B.xnew_size_l);
  full_loop_repmat_p4(static_cast<real_T>(*x_size), full_loop_B.epsr_data_l,
                      &full_loop_B.epsr_size);
  full_loop_B.dx_size_o = full_loop_B.xnew_size_l;
  full_loop_B.loop_ub_de = full_loop_B.xnew_size_l;
  if (0 <= full_loop_B.loop_ub_de - 1) {
    std::memcpy(&full_loop_B.dx_data_f[0], &full_loop_B.epsx_data_l[0],
                full_loop_B.loop_ub_de * sizeof(real_T));
  }

  exitg1 = false;
  while ((!exitg1) && (full_loop_B.iter_c3 < full_loop_B.maxiter_i)) {
    full_loop_abs_p(full_loop_B.dx_data_f, &full_loop_B.dx_size_o,
                    full_loop_B.xnew_data_o, &full_loop_B.xnew_size_l);
    full_loop_B.xnew_size_m = full_loop_B.xnew_size_l;
    full_loop_B.loop_ub_de = full_loop_B.xnew_size_l;
    for (full_loop_B.loop_ub_tmp_a = 0; full_loop_B.loop_ub_tmp_a <
         full_loop_B.loop_ub_de; full_loop_B.loop_ub_tmp_a++) {
      full_loop_B.xnew_data_a[full_loop_B.loop_ub_tmp_a] =
        (full_loop_B.xnew_data_o[full_loop_B.loop_ub_tmp_a] >=
         full_loop_B.epsx_data_l[full_loop_B.loop_ub_tmp_a]);
    }

    if (full_loop_any_p4(full_loop_B.xnew_data_a, &full_loop_B.xnew_size_m)) {
      full_loop_abs_p(full_loop_B.b_r_data_m, &full_loop_B.b_r_size_g,
                      full_loop_B.xnew_data_o, &full_loop_B.xnew_size_l);
      full_loop_B.xnew_size_g = full_loop_B.xnew_size_l;
      full_loop_B.loop_ub_de = full_loop_B.xnew_size_l;
      for (full_loop_B.loop_ub_tmp_a = 0; full_loop_B.loop_ub_tmp_a <
           full_loop_B.loop_ub_de; full_loop_B.loop_ub_tmp_a++) {
        full_loop_B.xnew_data_a[full_loop_B.loop_ub_tmp_a] =
          (full_loop_B.xnew_data_o[full_loop_B.loop_ub_tmp_a] >=
           full_loop_B.epsr_data_l[full_loop_B.loop_ub_tmp_a]);
      }

      if (full_loop_any_p4(full_loop_B.xnew_data_a, &full_loop_B.xnew_size_g)) {
        full_loop_B.iter_c3++;
        full_loo_solveDampenedHessian_p(full_loop_B.Jtri_data_f,
          full_loop_B.Jtri_size_d, full_loop_B.lambda_a, full_loop_B.v_data_d,
          &full_loop_B.v_size_j, full_loop_B.dx_data_f, &full_loop_B.dx_size_o);
        full_loop_B.loop_ub_de = *x_size;
        for (full_loop_B.loop_ub_tmp_a = 0; full_loop_B.loop_ub_tmp_a <
             full_loop_B.loop_ub_de; full_loop_B.loop_ub_tmp_a++) {
          full_loop_B.xnew_data_o[full_loop_B.loop_ub_tmp_a] =
            x_data[full_loop_B.loop_ub_tmp_a] -
            full_loop_B.dx_data_f[full_loop_B.loop_ub_tmp_a];
        }

        full_loop___anon_fcn_p4(FUN_tunableEnvironment_f1_data,
          FUN_tunableEnvironment_f1_size, FUN_tunableEnvironment_f2_data,
          FUN_tunableEnvironment_f2_size, full_loop_B.xnew_data_o,
          full_loop_B.b_varargout_1_data_f, &full_loop_B.epsr_size,
          full_loop_B.b_varargout_2_data_h, full_loop_B.b_varargout_2_size_pz);
        full_loop_B.b_varargout_1_n = 0.0;
        full_loop_B.loop_ub_de = full_loop_B.epsr_size;
        for (full_loop_B.loop_ub_tmp_a = 0; full_loop_B.loop_ub_tmp_a <
             full_loop_B.loop_ub_de; full_loop_B.loop_ub_tmp_a++) {
          full_loop_B.b_varargout_1_n +=
            full_loop_B.b_varargout_1_data_f[full_loop_B.loop_ub_tmp_a] *
            full_loop_B.b_varargout_1_data_f[full_loop_B.loop_ub_tmp_a];
        }

        full_loop_fletcher_p(full_loop_B.S_m, full_loop_B.b_varargout_1_n,
                             full_loop_B.dx_data_f, &full_loop_B.dx_size_o,
                             full_loop_B.v_data_d, full_loop_B.Jtri_data_f,
                             full_loop_B.Jtri_size_d, full_loop_B.lambda_a,
                             full_loop_B.lambdac_i, &full_loop_B.lambda_a,
                             &full_loop_B.lambdac_i);
        if (full_loop_B.b_varargout_1_n < full_loop_B.S_m) {
          full_loop_B.S_m = full_loop_B.b_varargout_1_n;
          full_loop_B.loop_ub_de = *x_size;
          if (0 <= full_loop_B.loop_ub_de - 1) {
            std::memcpy(&x_data[0], &full_loop_B.xnew_data_o[0],
                        full_loop_B.loop_ub_de * sizeof(real_T));
          }

          full_loop_B.b_r_size_g = full_loop_B.epsr_size;
          full_loop_B.loop_ub_de = full_loop_B.epsr_size;
          if (0 <= full_loop_B.loop_ub_de - 1) {
            std::memcpy(&full_loop_B.b_r_data_m[0],
                        &full_loop_B.b_varargout_1_data_f[0],
                        full_loop_B.loop_ub_de * sizeof(real_T));
          }

          full_loop_B.Jtri_size_d[0] = full_loop_B.b_varargout_2_size_pz[0];
          full_loop_B.Jtri_size_d[1] = 3;
          full_loop_B.loop_ub_de = full_loop_B.b_varargout_2_size_pz[0] *
            full_loop_B.b_varargout_2_size_pz[1] - 1;
          if (0 <= full_loop_B.loop_ub_de) {
            std::memcpy(&full_loop_B.Jtri_data_f[0],
                        &full_loop_B.b_varargout_2_data_h[0],
                        (full_loop_B.loop_ub_de + 1) * sizeof(real_T));
          }

          full_loop_mulJt_p(full_loop_B.b_varargout_2_data_h,
                            full_loop_B.b_varargout_2_size_pz,
                            full_loop_B.b_varargout_1_data_f,
                            &full_loop_B.epsr_size, full_loop_B.xnew_data_o,
                            &full_loop_B.xnew_size_l);
          full_loop_B.v_size_j = full_loop_B.xnew_size_l;
          full_loop_B.loop_ub_de = full_loop_B.xnew_size_l;
          if (0 <= full_loop_B.loop_ub_de - 1) {
            std::memcpy(&full_loop_B.v_data_d[0], &full_loop_B.xnew_data_o[0],
                        full_loop_B.loop_ub_de * sizeof(real_T));
          }
        }
      } else {
        exitg1 = true;
      }
    } else {
      exitg1 = true;
    }
  }
}

void full_loopModelClass::full_loop___anon_fcn_p(const real_T waypoints_data[],
  const int32_T waypoints_size[2], const real_T course_data[], const int32_T
  *course_size, const real_T x_data[], real_T varargout_1_data[], int32_T
  *varargout_1_size, real_T varargout_2_data[], int32_T varargout_2_size[2])
{
  full_loop_B.loop_ub_h = *course_size;
  if (0 <= full_loop_B.loop_ub_h - 1) {
    std::memcpy(&full_loop_B.course_data_i[0], &course_data[0],
                full_loop_B.loop_ub_h * sizeof(real_T));
  }

  full_loop_B.loop_ub_h = waypoints_size[0];
  for (full_loop_B.e_k = 0; full_loop_B.e_k < full_loop_B.loop_ub_h;
       full_loop_B.e_k++) {
    full_loop_B.hip_data_mv[full_loop_B.e_k].re = waypoints_data[full_loop_B.e_k];
    full_loop_B.hip_data_mv[full_loop_B.e_k].im = waypoints_data[full_loop_B.e_k
      + waypoints_size[0]];
  }

  if (1.0 > static_cast<real_T>(*course_size) - 1.0) {
    full_loop_B.e_k = 0;
  } else {
    full_loop_B.e_k = *course_size - 1;
  }

  if (0 <= full_loop_B.e_k - 1) {
    std::memcpy(&full_loop_B.course_data_i[0], &x_data[0], full_loop_B.e_k *
                sizeof(real_T));
  }

  if (1.0 > static_cast<real_T>(waypoints_size[0]) - 1.0) {
    full_loop_B.e_k = 0;
    full_loop_B.l_m = 0;
  } else {
    full_loop_B.e_k = waypoints_size[0] - 1;
    full_loop_B.l_m = waypoints_size[0] - 1;
  }

  if (2 > waypoints_size[0]) {
    full_loop_B.p_g = 0;
    full_loop_B.loop_ub_h = 0;
    full_loop_B.r_i = 0;
    full_loop_B.q_b5 = 0;
  } else {
    full_loop_B.p_g = 1;
    full_loop_B.loop_ub_h = waypoints_size[0];
    full_loop_B.r_i = 1;
    full_loop_B.q_b5 = waypoints_size[0];
  }

  if (0 <= full_loop_B.e_k - 1) {
    std::memcpy(&full_loop_B.hip_data_cj[0], &full_loop_B.hip_data_mv[0],
                full_loop_B.e_k * sizeof(creal_T));
  }

  full_loop_B.course_size_o = full_loop_B.l_m;
  if (0 <= full_loop_B.l_m - 1) {
    std::memcpy(&full_loop_B.course_data_m[0], &full_loop_B.course_data_i[0],
                full_loop_B.l_m * sizeof(real_T));
  }

  full_loop_B.l_m = full_loop_B.loop_ub_h - full_loop_B.p_g;
  full_loop_B.hip_size_f = full_loop_B.l_m;
  for (full_loop_B.e_k = 0; full_loop_B.e_k < full_loop_B.l_m; full_loop_B.e_k++)
  {
    full_loop_B.hip_data_m0[full_loop_B.e_k] =
      full_loop_B.hip_data_mv[full_loop_B.p_g + full_loop_B.e_k];
  }

  full_loop_B.p_g = full_loop_B.q_b5 - full_loop_B.r_i;
  full_loop_B.course_size_o3 = full_loop_B.p_g;
  for (full_loop_B.e_k = 0; full_loop_B.e_k < full_loop_B.p_g; full_loop_B.e_k++)
  {
    full_loop_B.course_data_f[full_loop_B.e_k] =
      full_loop_B.course_data_i[full_loop_B.r_i + full_loop_B.e_k];
  }

  full_loop_clothoidG1fit2wp_p(full_loop_B.hip_data_cj,
    full_loop_B.course_data_m, &full_loop_B.course_size_o,
    full_loop_B.hip_data_m0, &full_loop_B.hip_size_f, full_loop_B.course_data_f,
    &full_loop_B.course_size_o3, full_loop_B.k0_data_k, &full_loop_B.k0_size_d,
    full_loop_B.k1_data_ic, &full_loop_B.k1_size_f, full_loop_B.unusedU2_data,
    &full_loop_B.unusedU2_size, full_loop_B.dk0_dc0_data_h,
    &full_loop_B.dk0_dc0_size_d, full_loop_B.dk0_dc1_data_m,
    &full_loop_B.dk0_dc1_size_p, full_loop_B.dk1_dc0_data_g,
    &full_loop_B.dk1_dc0_size_gs, full_loop_B.dk1_dc1_data_l,
    &full_loop_B.dk1_dc1_size_f);
  if (1.0 > static_cast<real_T>(full_loop_B.k1_size_f) - 1.0) {
    full_loop_B.r_i = 0;
  } else {
    full_loop_B.r_i = full_loop_B.k1_size_f - 1;
  }

  if (2 > full_loop_B.k0_size_d) {
    full_loop_B.p_g = 0;
  } else {
    full_loop_B.p_g = 1;
  }

  if (1.0 > static_cast<real_T>(full_loop_B.dk0_dc1_size_p) - 1.0) {
    full_loop_B.q_b5 = 0;
  } else {
    full_loop_B.q_b5 = full_loop_B.dk0_dc1_size_p - 1;
  }

  if (1.0 > static_cast<real_T>(full_loop_B.dk1_dc0_size_gs) - 1.0) {
    full_loop_B.loop_ub_h = 0;
  } else {
    full_loop_B.loop_ub_h = full_loop_B.dk1_dc0_size_gs - 1;
  }

  if (1.0 > static_cast<real_T>(waypoints_size[0]) - 2.0) {
    full_loop_B.ib_b = 0;
  } else {
    full_loop_B.ib_b = waypoints_size[0] - 2;
  }

  if (2.0 > static_cast<real_T>(waypoints_size[0]) - 1.0) {
    full_loop_B.l_m = 0;
  } else {
    full_loop_B.l_m = 1;
  }

  full_loop_B.reshapes_k[0].f1.size = full_loop_B.loop_ub_h + 1;
  for (full_loop_B.e_k = 0; full_loop_B.e_k < full_loop_B.loop_ub_h;
       full_loop_B.e_k++) {
    full_loop_B.reshapes_k[0].f1.data[full_loop_B.e_k] =
      full_loop_B.dk1_dc0_data_g[full_loop_B.e_k];
  }

  full_loop_B.reshapes_k[0].f1.data[full_loop_B.loop_ub_h] = 0.0;
  full_loop_B.reshapes_k[1].f1.size = full_loop_B.ib_b - -1;
  full_loop_B.reshapes_k[1].f1.data[0] = 0.0 - full_loop_B.dk0_dc0_data_h[0];
  full_loop_B.loop_ub_h = full_loop_B.ib_b - -1;
  for (full_loop_B.e_k = 0; full_loop_B.e_k <= full_loop_B.loop_ub_h - 2;
       full_loop_B.e_k++) {
    full_loop_B.reshapes_k[1].f1.data[full_loop_B.e_k + 1] =
      full_loop_B.dk1_dc1_data_l[full_loop_B.e_k] -
      full_loop_B.dk0_dc0_data_h[full_loop_B.l_m + full_loop_B.e_k];
  }

  full_loop_B.reshapes_k[2].f1.size = full_loop_B.q_b5 + 1;
  for (full_loop_B.e_k = 0; full_loop_B.e_k < full_loop_B.q_b5; full_loop_B.e_k
       ++) {
    full_loop_B.reshapes_k[2].f1.data[full_loop_B.e_k] =
      -full_loop_B.dk0_dc1_data_m[full_loop_B.e_k];
  }

  full_loop_B.reshapes_k[2].f1.data[full_loop_B.q_b5] = 0.0;
  *varargout_1_size = full_loop_B.r_i - -1;
  varargout_1_data[0] = 0.0 - full_loop_B.k0_data_k[0];
  full_loop_B.loop_ub_h = full_loop_B.r_i - -1;
  for (full_loop_B.e_k = 0; full_loop_B.e_k <= full_loop_B.loop_ub_h - 2;
       full_loop_B.e_k++) {
    varargout_1_data[full_loop_B.e_k + 1] =
      full_loop_B.k1_data_ic[full_loop_B.e_k] -
      full_loop_B.k0_data_k[full_loop_B.p_g + full_loop_B.e_k];
  }

  varargout_2_size[0] = full_loop_B.reshapes_k[0].f1.size;
  varargout_2_size[1] = 3;
  full_loop_B.loop_ub_h = full_loop_B.reshapes_k[0].f1.size;
  for (full_loop_B.e_k = 0; full_loop_B.e_k < full_loop_B.loop_ub_h;
       full_loop_B.e_k++) {
    varargout_2_data[full_loop_B.e_k] = full_loop_B.reshapes_k[0]
      .f1.data[full_loop_B.e_k];
  }

  full_loop_B.loop_ub_h = full_loop_B.reshapes_k[1].f1.size;
  for (full_loop_B.e_k = 0; full_loop_B.e_k < full_loop_B.loop_ub_h;
       full_loop_B.e_k++) {
    varargout_2_data[full_loop_B.e_k + full_loop_B.reshapes_k[0].f1.size] =
      full_loop_B.reshapes_k[1].f1.data[full_loop_B.e_k];
  }

  full_loop_B.loop_ub_h = full_loop_B.reshapes_k[2].f1.size;
  for (full_loop_B.e_k = 0; full_loop_B.e_k < full_loop_B.loop_ub_h;
       full_loop_B.e_k++) {
    varargout_2_data[(full_loop_B.e_k + full_loop_B.reshapes_k[0].f1.size) +
      full_loop_B.reshapes_k[1].f1.size] = full_loop_B.reshapes_k[2]
      .f1.data[full_loop_B.e_k];
  }
}

void full_loopModelClass::full_loop_LMFsolve_p43riob(const real_T
  FUN_tunableEnvironment_f1_data[], const int32_T
  FUN_tunableEnvironment_f1_size[2], const real_T
  FUN_tunableEnvironment_f2_data[], const int32_T
  *FUN_tunableEnvironment_f2_size, real_T x_data[], const int32_T *x_size)
{
  boolean_T exitg1;
  full_loop_B.maxiter_h = 100.0 * static_cast<real_T>(*x_size);
  full_loop___anon_fcn_p(FUN_tunableEnvironment_f1_data,
    FUN_tunableEnvironment_f1_size, FUN_tunableEnvironment_f2_data,
    FUN_tunableEnvironment_f2_size, x_data, full_loop_B.b_r_data_f,
    &full_loop_B.b_r_size_o, full_loop_B.b_varargout_2_data_c,
    full_loop_B.b_varargout_2_size_m);
  full_loop_B.Jtri_size_k[0] = full_loop_B.b_varargout_2_size_m[0];
  full_loop_B.Jtri_size_k[1] = 3;
  full_loop_B.loop_ub_tmp_b = full_loop_B.b_varargout_2_size_m[0] *
    full_loop_B.b_varargout_2_size_m[1] - 1;
  if (0 <= full_loop_B.loop_ub_tmp_b) {
    std::memcpy(&full_loop_B.Jtri_data_m[0], &full_loop_B.b_varargout_2_data_c[0],
                (full_loop_B.loop_ub_tmp_b + 1) * sizeof(real_T));
  }

  full_loop_mulJt_p(full_loop_B.b_varargout_2_data_c,
                    full_loop_B.b_varargout_2_size_m, full_loop_B.b_r_data_f,
                    &full_loop_B.b_r_size_o, full_loop_B.tmp_data_a,
                    &full_loop_B.tmp_size_fr);
  full_loop_B.v_size_a = full_loop_B.tmp_size_fr;
  full_loop_B.loop_ub_om = full_loop_B.tmp_size_fr;
  if (0 <= full_loop_B.loop_ub_om - 1) {
    std::memcpy(&full_loop_B.v_data_j[0], &full_loop_B.tmp_data_a[0],
                full_loop_B.loop_ub_om * sizeof(real_T));
  }

  full_loop_B.S_a = 0.0;
  full_loop_B.loop_ub_om = full_loop_B.b_r_size_o;
  for (full_loop_B.loop_ub_tmp_b = 0; full_loop_B.loop_ub_tmp_b <
       full_loop_B.loop_ub_om; full_loop_B.loop_ub_tmp_b++) {
    full_loop_B.S_a += full_loop_B.b_r_data_f[full_loop_B.loop_ub_tmp_b] *
      full_loop_B.b_r_data_f[full_loop_B.loop_ub_tmp_b];
  }

  full_loop_B.lambda_l = 0.0;
  full_loop_B.lambdac_c = 0.75;
  full_loop_B.iter_c = 0.0;
  full_loop_repmat_p4(static_cast<real_T>(*x_size), full_loop_B.tmp_data_a,
                      &full_loop_B.tmp_size_fr);
  full_loop_B.loop_ub_tmp_b = full_loop_B.tmp_size_fr;
  full_loop_B.loop_ub_om = full_loop_B.tmp_size_fr;
  if (0 <= full_loop_B.loop_ub_om - 1) {
    std::memcpy(&full_loop_B.epsx_data_d[0], &full_loop_B.tmp_data_a[0],
                full_loop_B.loop_ub_om * sizeof(real_T));
  }

  full_loop_repmat_p4(static_cast<real_T>(*x_size), full_loop_B.tmp_data_a,
                      &full_loop_B.tmp_size_fr);
  full_loop_B.loop_ub_om = full_loop_B.tmp_size_fr;
  if (0 <= full_loop_B.loop_ub_om - 1) {
    std::memcpy(&full_loop_B.epsr_data_li[0], &full_loop_B.tmp_data_a[0],
                full_loop_B.loop_ub_om * sizeof(real_T));
  }

  full_loop_B.dx_size_p = full_loop_B.loop_ub_tmp_b;
  if (0 <= full_loop_B.loop_ub_tmp_b - 1) {
    std::memcpy(&full_loop_B.dx_data_b[0], &full_loop_B.epsx_data_d[0],
                full_loop_B.loop_ub_tmp_b * sizeof(real_T));
  }

  exitg1 = false;
  while ((!exitg1) && (full_loop_B.iter_c < full_loop_B.maxiter_h)) {
    full_loop_abs_p(full_loop_B.dx_data_b, &full_loop_B.dx_size_p,
                    full_loop_B.tmp_data_a, &full_loop_B.tmp_size_fr);
    full_loop_B.tmp_size_pn = full_loop_B.tmp_size_fr;
    full_loop_B.loop_ub_om = full_loop_B.tmp_size_fr;
    for (full_loop_B.loop_ub_tmp_b = 0; full_loop_B.loop_ub_tmp_b <
         full_loop_B.loop_ub_om; full_loop_B.loop_ub_tmp_b++) {
      full_loop_B.tmp_data_ji[full_loop_B.loop_ub_tmp_b] =
        (full_loop_B.tmp_data_a[full_loop_B.loop_ub_tmp_b] >=
         full_loop_B.epsx_data_d[full_loop_B.loop_ub_tmp_b]);
    }

    if (full_loop_any_p4(full_loop_B.tmp_data_ji, &full_loop_B.tmp_size_pn)) {
      full_loop_abs_p(full_loop_B.b_r_data_f, &full_loop_B.b_r_size_o,
                      full_loop_B.tmp_data_a, &full_loop_B.tmp_size_fr);
      full_loop_B.tmp_size_p5 = full_loop_B.tmp_size_fr;
      full_loop_B.loop_ub_om = full_loop_B.tmp_size_fr;
      for (full_loop_B.loop_ub_tmp_b = 0; full_loop_B.loop_ub_tmp_b <
           full_loop_B.loop_ub_om; full_loop_B.loop_ub_tmp_b++) {
        full_loop_B.tmp_data_ji[full_loop_B.loop_ub_tmp_b] =
          (full_loop_B.tmp_data_a[full_loop_B.loop_ub_tmp_b] >=
           full_loop_B.epsr_data_li[full_loop_B.loop_ub_tmp_b]);
      }

      if (full_loop_any_p4(full_loop_B.tmp_data_ji, &full_loop_B.tmp_size_p5)) {
        full_loop_B.iter_c++;
        full_loo_solveDampenedHessian_p(full_loop_B.Jtri_data_m,
          full_loop_B.Jtri_size_k, full_loop_B.lambda_l, full_loop_B.v_data_j,
          &full_loop_B.v_size_a, full_loop_B.dx_data_b, &full_loop_B.dx_size_p);
        full_loop_B.loop_ub_om = *x_size;
        for (full_loop_B.loop_ub_tmp_b = 0; full_loop_B.loop_ub_tmp_b <
             full_loop_B.loop_ub_om; full_loop_B.loop_ub_tmp_b++) {
          full_loop_B.xnew_data_h[full_loop_B.loop_ub_tmp_b] =
            x_data[full_loop_B.loop_ub_tmp_b] -
            full_loop_B.dx_data_b[full_loop_B.loop_ub_tmp_b];
        }

        full_loop___anon_fcn_p(FUN_tunableEnvironment_f1_data,
          FUN_tunableEnvironment_f1_size, FUN_tunableEnvironment_f2_data,
          FUN_tunableEnvironment_f2_size, full_loop_B.xnew_data_h,
          full_loop_B.b_varargout_1_data, &full_loop_B.b_varargout_1_size_l,
          full_loop_B.b_varargout_2_data_c, full_loop_B.b_varargout_2_size_m);
        full_loop_B.b_varargout_1_i = 0.0;
        full_loop_B.loop_ub_om = full_loop_B.b_varargout_1_size_l;
        for (full_loop_B.loop_ub_tmp_b = 0; full_loop_B.loop_ub_tmp_b <
             full_loop_B.loop_ub_om; full_loop_B.loop_ub_tmp_b++) {
          full_loop_B.b_varargout_1_i +=
            full_loop_B.b_varargout_1_data[full_loop_B.loop_ub_tmp_b] *
            full_loop_B.b_varargout_1_data[full_loop_B.loop_ub_tmp_b];
        }

        full_loop_fletcher_p(full_loop_B.S_a, full_loop_B.b_varargout_1_i,
                             full_loop_B.dx_data_b, &full_loop_B.dx_size_p,
                             full_loop_B.v_data_j, full_loop_B.Jtri_data_m,
                             full_loop_B.Jtri_size_k, full_loop_B.lambda_l,
                             full_loop_B.lambdac_c, &full_loop_B.lambda_l,
                             &full_loop_B.lambdac_c);
        if (full_loop_B.b_varargout_1_i < full_loop_B.S_a) {
          full_loop_B.S_a = full_loop_B.b_varargout_1_i;
          full_loop_B.loop_ub_om = *x_size;
          if (0 <= full_loop_B.loop_ub_om - 1) {
            std::memcpy(&x_data[0], &full_loop_B.xnew_data_h[0],
                        full_loop_B.loop_ub_om * sizeof(real_T));
          }

          full_loop_B.b_r_size_o = full_loop_B.b_varargout_1_size_l;
          full_loop_B.loop_ub_om = full_loop_B.b_varargout_1_size_l;
          if (0 <= full_loop_B.loop_ub_om - 1) {
            std::memcpy(&full_loop_B.b_r_data_f[0],
                        &full_loop_B.b_varargout_1_data[0],
                        full_loop_B.loop_ub_om * sizeof(real_T));
          }

          full_loop_B.Jtri_size_k[0] = full_loop_B.b_varargout_2_size_m[0];
          full_loop_B.Jtri_size_k[1] = 3;
          full_loop_B.loop_ub_om = full_loop_B.b_varargout_2_size_m[0] *
            full_loop_B.b_varargout_2_size_m[1] - 1;
          if (0 <= full_loop_B.loop_ub_om) {
            std::memcpy(&full_loop_B.Jtri_data_m[0],
                        &full_loop_B.b_varargout_2_data_c[0],
                        (full_loop_B.loop_ub_om + 1) * sizeof(real_T));
          }

          full_loop_mulJt_p(full_loop_B.b_varargout_2_data_c,
                            full_loop_B.b_varargout_2_size_m,
                            full_loop_B.b_varargout_1_data,
                            &full_loop_B.b_varargout_1_size_l,
                            full_loop_B.tmp_data_a, &full_loop_B.tmp_size_fr);
          full_loop_B.v_size_a = full_loop_B.tmp_size_fr;
          full_loop_B.loop_ub_om = full_loop_B.tmp_size_fr;
          if (0 <= full_loop_B.loop_ub_om - 1) {
            std::memcpy(&full_loop_B.v_data_j[0], &full_loop_B.tmp_data_a[0],
                        full_loop_B.loop_ub_om * sizeof(real_T));
          }
        }
      } else {
        exitg1 = true;
      }
    } else {
      exitg1 = true;
    }
  }
}

void full_loopModelClass::full_loop_LMFsolve_p43rio(const
  f_cell_wrap_full_loop_T *FUN_tunableEnvironment, real_T x_data[], const
  int32_T *x_size)
{
  boolean_T exitg1;
  full_loop_B.maxiter_f = 100.0 * static_cast<real_T>(*x_size);
  full_loop_B.loop_ub_c = FUN_tunableEnvironment->f1.size[0];
  for (full_loop_B.e_br = 0; full_loop_B.e_br < full_loop_B.loop_ub_c;
       full_loop_B.e_br++) {
    full_loop_B.hip_data_j[full_loop_B.e_br].re =
      FUN_tunableEnvironment->f1.data[full_loop_B.e_br];
    full_loop_B.hip_data_j[full_loop_B.e_br].im =
      FUN_tunableEnvironment->f1.data[full_loop_B.e_br +
      FUN_tunableEnvironment->f1.size[0]];
  }

  if (1.0 > static_cast<real_T>(FUN_tunableEnvironment->f1.size[0]) - 1.0) {
    full_loop_B.e_br = 0;
    full_loop_B.h_f0 = 0;
  } else {
    full_loop_B.e_br = FUN_tunableEnvironment->f1.size[0] - 1;
    full_loop_B.h_f0 = FUN_tunableEnvironment->f1.size[0] - 1;
  }

  if (2 > FUN_tunableEnvironment->f1.size[0]) {
    full_loop_B.k_h = 0;
    full_loop_B.j_j = 0;
    full_loop_B.loop_ub_c = 0;
    full_loop_B.l_hg = 0;
  } else {
    full_loop_B.k_h = 1;
    full_loop_B.j_j = FUN_tunableEnvironment->f1.size[0];
    full_loop_B.loop_ub_c = 1;
    full_loop_B.l_hg = FUN_tunableEnvironment->f1.size[0];
  }

  if (0 <= full_loop_B.e_br - 1) {
    std::memcpy(&full_loop_B.hip_data_c[0], &full_loop_B.hip_data_j[0],
                full_loop_B.e_br * sizeof(creal_T));
  }

  full_loop_B.x_size_a = full_loop_B.h_f0;
  if (0 <= full_loop_B.h_f0 - 1) {
    std::memcpy(&full_loop_B.x_data_k[0], &x_data[0], full_loop_B.h_f0 * sizeof
                (real_T));
  }

  full_loop_B.h_f0 = full_loop_B.j_j - full_loop_B.k_h;
  full_loop_B.hip_size_e = full_loop_B.h_f0;
  for (full_loop_B.e_br = 0; full_loop_B.e_br < full_loop_B.h_f0;
       full_loop_B.e_br++) {
    full_loop_B.hip_data_e[full_loop_B.e_br] =
      full_loop_B.hip_data_j[full_loop_B.k_h + full_loop_B.e_br];
  }

  full_loop_B.k_h = full_loop_B.l_hg - full_loop_B.loop_ub_c;
  full_loop_B.x_size_h = full_loop_B.k_h;
  for (full_loop_B.e_br = 0; full_loop_B.e_br < full_loop_B.k_h;
       full_loop_B.e_br++) {
    full_loop_B.b_r_data[full_loop_B.e_br] = x_data[full_loop_B.loop_ub_c +
      full_loop_B.e_br];
  }

  full_loop_clothoidG1fit2wp_p(full_loop_B.hip_data_c, full_loop_B.x_data_k,
    &full_loop_B.x_size_a, full_loop_B.hip_data_e, &full_loop_B.hip_size_e,
    full_loop_B.b_r_data, &full_loop_B.x_size_h, full_loop_B.k0_data_f,
    &full_loop_B.k0_size_a, full_loop_B.k1_data_i, &full_loop_B.k1_size_h,
    full_loop_B.unusedU4_data, &full_loop_B.unusedU4_size,
    full_loop_B.dk0_dc0_data_f, &full_loop_B.dk0_dc0_size_g,
    full_loop_B.dk0_dc1_data_c, &full_loop_B.dk0_dc1_size_a,
    full_loop_B.dk1_dc0_data_n, &full_loop_B.dk1_dc0_size_g,
    full_loop_B.dk1_dc1_data_h, &full_loop_B.dk1_dc1_size_o);
  if (1.0 > static_cast<real_T>(full_loop_B.k1_size_h) - 1.0) {
    full_loop_B.k_h = 0;
  } else {
    full_loop_B.k_h = full_loop_B.k1_size_h - 1;
  }

  if (2 > full_loop_B.k0_size_a) {
    full_loop_B.l_hg = 0;
  } else {
    full_loop_B.l_hg = 1;
  }

  full_loop_B.b_r_size_e = full_loop_B.k_h - -2;
  full_loop_B.b_r_data[0] = 0.0 - full_loop_B.k0_data_f[0];
  full_loop_B.loop_ub_c = full_loop_B.k_h - -2;
  for (full_loop_B.e_br = 0; full_loop_B.e_br <= full_loop_B.loop_ub_c - 3;
       full_loop_B.e_br++) {
    full_loop_B.b_r_data[full_loop_B.e_br + 1] =
      full_loop_B.k1_data_i[full_loop_B.e_br] -
      full_loop_B.k0_data_f[full_loop_B.l_hg + full_loop_B.e_br];
  }

  full_loop_B.b_r_data[full_loop_B.k_h + 1] =
    full_loop_B.k1_data_i[full_loop_B.k1_size_h - 1];
  if (1.0 > static_cast<real_T>(FUN_tunableEnvironment->f1.size[0]) - 2.0) {
    full_loop_B.k_h = 0;
  } else {
    full_loop_B.k_h = FUN_tunableEnvironment->f1.size[0] - 2;
  }

  if (2.0 > static_cast<real_T>(FUN_tunableEnvironment->f1.size[0]) - 1.0) {
    full_loop_B.l_hg = 0;
  } else {
    full_loop_B.l_hg = 1;
  }

  full_loop_B.b_varargout_2_size_p[0] = full_loop_B.dk1_dc0_size_g + 1;
  full_loop_B.b_varargout_2_size_p[1] = 3;
  full_loop_B.loop_ub_c = full_loop_B.dk1_dc0_size_g;
  if (0 <= full_loop_B.loop_ub_c - 1) {
    std::memcpy(&full_loop_B.b_varargout_2_data[0], &full_loop_B.dk1_dc0_data_n
                [0], full_loop_B.loop_ub_c * sizeof(real_T));
  }

  full_loop_B.b_varargout_2_data[full_loop_B.dk1_dc0_size_g] = 0.0;
  full_loop_B.b_varargout_2_data[full_loop_B.b_varargout_2_size_p[0]] = 0.0 -
    full_loop_B.dk0_dc0_data_f[0];
  full_loop_B.loop_ub_c = full_loop_B.k_h - -1;
  for (full_loop_B.e_br = 0; full_loop_B.e_br <= full_loop_B.loop_ub_c - 2;
       full_loop_B.e_br++) {
    full_loop_B.b_varargout_2_data[(full_loop_B.e_br +
      full_loop_B.b_varargout_2_size_p[0]) + 1] =
      full_loop_B.dk1_dc1_data_h[full_loop_B.e_br] -
      full_loop_B.dk0_dc0_data_f[full_loop_B.l_hg + full_loop_B.e_br];
  }

  full_loop_B.b_varargout_2_data[(full_loop_B.k_h +
    full_loop_B.b_varargout_2_size_p[0]) + 1] =
    full_loop_B.dk1_dc1_data_h[FUN_tunableEnvironment->f1.size[0] - 2];
  full_loop_B.loop_ub_c = full_loop_B.dk0_dc1_size_a;
  for (full_loop_B.e_br = 0; full_loop_B.e_br < full_loop_B.loop_ub_c;
       full_loop_B.e_br++) {
    full_loop_B.b_varargout_2_data[full_loop_B.e_br +
      (full_loop_B.b_varargout_2_size_p[0] << 1)] =
      -full_loop_B.dk0_dc1_data_c[full_loop_B.e_br];
  }

  full_loop_B.b_varargout_2_data[full_loop_B.dk0_dc1_size_a +
    (full_loop_B.b_varargout_2_size_p[0] << 1)] = 0.0;
  full_loop_B.Jtri_size_j[0] = full_loop_B.b_varargout_2_size_p[0];
  full_loop_B.Jtri_size_j[1] = 3;
  full_loop_B.loop_ub_c = full_loop_B.b_varargout_2_size_p[0] * 3 - 1;
  if (0 <= full_loop_B.loop_ub_c) {
    std::memcpy(&full_loop_B.Jtri_data[0], &full_loop_B.b_varargout_2_data[0],
                (full_loop_B.loop_ub_c + 1) * sizeof(real_T));
  }

  full_loop_mulJt_p(full_loop_B.b_varargout_2_data,
                    full_loop_B.b_varargout_2_size_p, full_loop_B.b_r_data,
                    &full_loop_B.b_r_size_e, full_loop_B.v_data_f,
                    &full_loop_B.x_size_a);
  full_loop_B.S_i = 0.0;
  full_loop_B.loop_ub_c = full_loop_B.b_r_size_e;
  for (full_loop_B.e_br = 0; full_loop_B.e_br < full_loop_B.loop_ub_c;
       full_loop_B.e_br++) {
    full_loop_B.S_i += full_loop_B.b_r_data[full_loop_B.e_br] *
      full_loop_B.b_r_data[full_loop_B.e_br];
  }

  full_loop_B.lambda_g = 0.0;
  full_loop_B.lambdac_d = 0.75;
  full_loop_B.iter_h = 0.0;
  full_loop_repmat_p4(static_cast<real_T>(*x_size), full_loop_B.epsx_data,
                      &full_loop_B.k0_size_a);
  full_loop_repmat_p4(static_cast<real_T>(*x_size), full_loop_B.epsr_data,
                      &full_loop_B.k1_size_h);
  full_loop_B.dx_size_g = full_loop_B.k0_size_a;
  full_loop_B.loop_ub_c = full_loop_B.k0_size_a;
  if (0 <= full_loop_B.loop_ub_c - 1) {
    std::memcpy(&full_loop_B.dx_data_c[0], &full_loop_B.epsx_data[0],
                full_loop_B.loop_ub_c * sizeof(real_T));
  }

  exitg1 = false;
  while ((!exitg1) && (full_loop_B.iter_h < full_loop_B.maxiter_f)) {
    full_loop_abs_p(full_loop_B.dx_data_c, &full_loop_B.dx_size_g,
                    full_loop_B.xnew_data, &full_loop_B.k0_size_a);
    full_loop_B.xnew_size = full_loop_B.k0_size_a;
    full_loop_B.loop_ub_c = full_loop_B.k0_size_a;
    for (full_loop_B.e_br = 0; full_loop_B.e_br < full_loop_B.loop_ub_c;
         full_loop_B.e_br++) {
      full_loop_B.xnew_data_ca[full_loop_B.e_br] =
        (full_loop_B.xnew_data[full_loop_B.e_br] >=
         full_loop_B.epsx_data[full_loop_B.e_br]);
    }

    if (full_loop_any_p4(full_loop_B.xnew_data_ca, &full_loop_B.xnew_size)) {
      full_loop_abs_p(full_loop_B.b_r_data, &full_loop_B.b_r_size_e,
                      full_loop_B.xnew_data, &full_loop_B.k0_size_a);
      full_loop_B.xnew_size_j = full_loop_B.k0_size_a;
      full_loop_B.loop_ub_c = full_loop_B.k0_size_a;
      for (full_loop_B.e_br = 0; full_loop_B.e_br < full_loop_B.loop_ub_c;
           full_loop_B.e_br++) {
        full_loop_B.xnew_data_ca[full_loop_B.e_br] =
          (full_loop_B.xnew_data[full_loop_B.e_br] >=
           full_loop_B.epsr_data[full_loop_B.e_br]);
      }

      if (full_loop_any_p4(full_loop_B.xnew_data_ca, &full_loop_B.xnew_size_j))
      {
        full_loop_B.iter_h++;
        full_loo_solveDampenedHessian_p(full_loop_B.Jtri_data,
          full_loop_B.Jtri_size_j, full_loop_B.lambda_g, full_loop_B.v_data_f,
          &full_loop_B.x_size_a, full_loop_B.dx_data_c, &full_loop_B.dx_size_g);
        full_loop_B.loop_ub_c = *x_size;
        for (full_loop_B.e_br = 0; full_loop_B.e_br < full_loop_B.loop_ub_c;
             full_loop_B.e_br++) {
          full_loop_B.xnew_data[full_loop_B.e_br] = x_data[full_loop_B.e_br] -
            full_loop_B.dx_data_c[full_loop_B.e_br];
        }

        full_loop_B.loop_ub_c = FUN_tunableEnvironment->f1.size[0];
        for (full_loop_B.e_br = 0; full_loop_B.e_br < full_loop_B.loop_ub_c;
             full_loop_B.e_br++) {
          full_loop_B.hip_data_j[full_loop_B.e_br].re =
            FUN_tunableEnvironment->f1.data[full_loop_B.e_br];
          full_loop_B.hip_data_j[full_loop_B.e_br].im =
            FUN_tunableEnvironment->f1.data[full_loop_B.e_br +
            FUN_tunableEnvironment->f1.size[0]];
        }

        if (1.0 > static_cast<real_T>(FUN_tunableEnvironment->f1.size[0]) - 1.0)
        {
          full_loop_B.e_br = 0;
          full_loop_B.h_f0 = 0;
        } else {
          full_loop_B.e_br = FUN_tunableEnvironment->f1.size[0] - 1;
          full_loop_B.h_f0 = FUN_tunableEnvironment->f1.size[0] - 1;
        }

        if (2 > FUN_tunableEnvironment->f1.size[0]) {
          full_loop_B.k_h = 0;
          full_loop_B.j_j = 0;
          full_loop_B.loop_ub_c = 0;
          full_loop_B.l_hg = 0;
        } else {
          full_loop_B.k_h = 1;
          full_loop_B.j_j = FUN_tunableEnvironment->f1.size[0];
          full_loop_B.loop_ub_c = 1;
          full_loop_B.l_hg = FUN_tunableEnvironment->f1.size[0];
        }

        if (0 <= full_loop_B.e_br - 1) {
          std::memcpy(&full_loop_B.hip_data_c[0], &full_loop_B.hip_data_j[0],
                      full_loop_B.e_br * sizeof(creal_T));
        }

        full_loop_B.xnew_size_b = full_loop_B.h_f0;
        if (0 <= full_loop_B.h_f0 - 1) {
          std::memcpy(&full_loop_B.x_data_k[0], &full_loop_B.xnew_data[0],
                      full_loop_B.h_f0 * sizeof(real_T));
        }

        full_loop_B.h_f0 = full_loop_B.j_j - full_loop_B.k_h;
        full_loop_B.hip_size_k = full_loop_B.h_f0;
        for (full_loop_B.e_br = 0; full_loop_B.e_br < full_loop_B.h_f0;
             full_loop_B.e_br++) {
          full_loop_B.hip_data_e[full_loop_B.e_br] =
            full_loop_B.hip_data_j[full_loop_B.k_h + full_loop_B.e_br];
        }

        full_loop_B.k_h = full_loop_B.l_hg - full_loop_B.loop_ub_c;
        full_loop_B.xnew_size_h = full_loop_B.k_h;
        for (full_loop_B.e_br = 0; full_loop_B.e_br < full_loop_B.k_h;
             full_loop_B.e_br++) {
          full_loop_B.xnew_data_f[full_loop_B.e_br] =
            full_loop_B.xnew_data[full_loop_B.loop_ub_c + full_loop_B.e_br];
        }

        full_loop_clothoidG1fit2wp_p(full_loop_B.hip_data_c,
          full_loop_B.x_data_k, &full_loop_B.xnew_size_b, full_loop_B.hip_data_e,
          &full_loop_B.hip_size_k, full_loop_B.xnew_data_f,
          &full_loop_B.xnew_size_h, full_loop_B.k0_data_f,
          &full_loop_B.k0_size_a, full_loop_B.k1_data_i, &full_loop_B.k1_size_h,
          full_loop_B.unusedU4_data, &full_loop_B.unusedU4_size,
          full_loop_B.dk0_dc0_data_f, &full_loop_B.dk0_dc0_size_g,
          full_loop_B.dk0_dc1_data_c, &full_loop_B.dk0_dc1_size_a,
          full_loop_B.dk1_dc0_data_n, &full_loop_B.dk1_dc0_size_g,
          full_loop_B.dk1_dc1_data_h, &full_loop_B.dk1_dc1_size_o);
        if (1.0 > static_cast<real_T>(full_loop_B.k1_size_h) - 1.0) {
          full_loop_B.k_h = 0;
        } else {
          full_loop_B.k_h = full_loop_B.k1_size_h - 1;
        }

        if (2 > full_loop_B.k0_size_a) {
          full_loop_B.l_hg = 0;
        } else {
          full_loop_B.l_hg = 1;
        }

        full_loop_B.b_varargout_1_size_e = full_loop_B.k_h - -2;
        full_loop_B.xnew_data_f[0] = 0.0 - full_loop_B.k0_data_f[0];
        full_loop_B.loop_ub_c = full_loop_B.k_h - -2;
        for (full_loop_B.e_br = 0; full_loop_B.e_br <= full_loop_B.loop_ub_c - 3;
             full_loop_B.e_br++) {
          full_loop_B.xnew_data_f[full_loop_B.e_br + 1] =
            full_loop_B.k1_data_i[full_loop_B.e_br] -
            full_loop_B.k0_data_f[full_loop_B.l_hg + full_loop_B.e_br];
        }

        full_loop_B.xnew_data_f[full_loop_B.k_h + 1] =
          full_loop_B.k1_data_i[full_loop_B.k1_size_h - 1];
        if (1.0 > static_cast<real_T>(FUN_tunableEnvironment->f1.size[0]) - 2.0)
        {
          full_loop_B.k_h = 0;
        } else {
          full_loop_B.k_h = FUN_tunableEnvironment->f1.size[0] - 2;
        }

        if (2.0 > static_cast<real_T>(FUN_tunableEnvironment->f1.size[0]) - 1.0)
        {
          full_loop_B.l_hg = 0;
        } else {
          full_loop_B.l_hg = 1;
        }

        full_loop_B.b_varargout_2_size_p[0] = full_loop_B.dk1_dc0_size_g + 1;
        full_loop_B.b_varargout_2_size_p[1] = 3;
        full_loop_B.loop_ub_c = full_loop_B.dk1_dc0_size_g;
        if (0 <= full_loop_B.loop_ub_c - 1) {
          std::memcpy(&full_loop_B.b_varargout_2_data[0],
                      &full_loop_B.dk1_dc0_data_n[0], full_loop_B.loop_ub_c *
                      sizeof(real_T));
        }

        full_loop_B.b_varargout_2_data[full_loop_B.dk1_dc0_size_g] = 0.0;
        full_loop_B.b_varargout_2_data[full_loop_B.b_varargout_2_size_p[0]] =
          0.0 - full_loop_B.dk0_dc0_data_f[0];
        full_loop_B.loop_ub_c = full_loop_B.k_h - -1;
        for (full_loop_B.e_br = 0; full_loop_B.e_br <= full_loop_B.loop_ub_c - 2;
             full_loop_B.e_br++) {
          full_loop_B.b_varargout_2_data[(full_loop_B.e_br +
            full_loop_B.b_varargout_2_size_p[0]) + 1] =
            full_loop_B.dk1_dc1_data_h[full_loop_B.e_br] -
            full_loop_B.dk0_dc0_data_f[full_loop_B.l_hg + full_loop_B.e_br];
        }

        full_loop_B.b_varargout_2_data[(full_loop_B.k_h +
          full_loop_B.b_varargout_2_size_p[0]) + 1] =
          full_loop_B.dk1_dc1_data_h[FUN_tunableEnvironment->f1.size[0] - 2];
        full_loop_B.loop_ub_c = full_loop_B.dk0_dc1_size_a;
        for (full_loop_B.e_br = 0; full_loop_B.e_br < full_loop_B.loop_ub_c;
             full_loop_B.e_br++) {
          full_loop_B.b_varargout_2_data[full_loop_B.e_br +
            (full_loop_B.b_varargout_2_size_p[0] << 1)] =
            -full_loop_B.dk0_dc1_data_c[full_loop_B.e_br];
        }

        full_loop_B.b_varargout_2_data[full_loop_B.dk0_dc1_size_a +
          (full_loop_B.b_varargout_2_size_p[0] << 1)] = 0.0;
        full_loop_B.b_varargout_1_m = 0.0;
        full_loop_B.loop_ub_c = full_loop_B.b_varargout_1_size_e;
        for (full_loop_B.e_br = 0; full_loop_B.e_br < full_loop_B.loop_ub_c;
             full_loop_B.e_br++) {
          full_loop_B.b_varargout_1_m +=
            full_loop_B.xnew_data_f[full_loop_B.e_br] *
            full_loop_B.xnew_data_f[full_loop_B.e_br];
        }

        full_loop_fletcher_p(full_loop_B.S_i, full_loop_B.b_varargout_1_m,
                             full_loop_B.dx_data_c, &full_loop_B.dx_size_g,
                             full_loop_B.v_data_f, full_loop_B.Jtri_data,
                             full_loop_B.Jtri_size_j, full_loop_B.lambda_g,
                             full_loop_B.lambdac_d, &full_loop_B.lambda_g,
                             &full_loop_B.lambdac_d);
        if (full_loop_B.b_varargout_1_m < full_loop_B.S_i) {
          full_loop_B.S_i = full_loop_B.b_varargout_1_m;
          full_loop_B.loop_ub_c = *x_size;
          if (0 <= full_loop_B.loop_ub_c - 1) {
            std::memcpy(&x_data[0], &full_loop_B.xnew_data[0],
                        full_loop_B.loop_ub_c * sizeof(real_T));
          }

          full_loop_B.b_r_size_e = full_loop_B.b_varargout_1_size_e;
          full_loop_B.loop_ub_c = full_loop_B.b_varargout_1_size_e;
          if (0 <= full_loop_B.loop_ub_c - 1) {
            std::memcpy(&full_loop_B.b_r_data[0], &full_loop_B.xnew_data_f[0],
                        full_loop_B.loop_ub_c * sizeof(real_T));
          }

          full_loop_B.Jtri_size_j[0] = full_loop_B.b_varargout_2_size_p[0];
          full_loop_B.Jtri_size_j[1] = 3;
          full_loop_B.loop_ub_c = full_loop_B.b_varargout_2_size_p[0] * 3 - 1;
          if (0 <= full_loop_B.loop_ub_c) {
            std::memcpy(&full_loop_B.Jtri_data[0],
                        &full_loop_B.b_varargout_2_data[0],
                        (full_loop_B.loop_ub_c + 1) * sizeof(real_T));
          }

          full_loop_mulJt_p(full_loop_B.b_varargout_2_data,
                            full_loop_B.b_varargout_2_size_p,
                            full_loop_B.xnew_data_f,
                            &full_loop_B.b_varargout_1_size_e,
                            full_loop_B.v_data_f, &full_loop_B.x_size_a);
        }
      } else {
        exitg1 = true;
      }
    } else {
      exitg1 = true;
    }
  }
}

void full_loopModelClass::full_loop_fitCourse_p(const real_T waypoints_data[],
  const int32_T waypoints_size[2], real_T course_data[], int32_T *course_size)
{
  full_loop_B.freelead = rtIsNaN(course_data[0]);
  full_loop_B.freetail_tmp = course_data[*course_size - 1];
  full_loop_B.freetail = rtIsNaN(full_loop_B.freetail_tmp);
  full_loop_B.dy[0] = course_data[0];
  full_loop_B.dv27[0] = 1.0;
  full_loop_B.dy[1] = full_loop_B.freetail_tmp;
  full_loop_B.dv27[1] = 1.0;
  full_loop_pol2cart_p(full_loop_B.dy, full_loop_B.dv27, full_loop_B.dx_g);
  full_loop_B.loop_ub = waypoints_size[0];
  full_loop_B.waypoints_size_b = waypoints_size[0];
  if (0 <= full_loop_B.loop_ub - 1) {
    std::memcpy(&full_loop_B.waypoints_data_p[0], &waypoints_data[0],
                full_loop_B.loop_ub * sizeof(real_T));
  }

  full_loop_B.loop_ub = waypoints_size[0];
  for (full_loop_B.l_a = 0; full_loop_B.l_a < full_loop_B.loop_ub;
       full_loop_B.l_a++) {
    full_loop_B.waypoints_data_a[full_loop_B.l_a] =
      waypoints_data[full_loop_B.l_a + waypoints_size[0]];
  }

  full_loop_dclothoidwp_p(full_loop_B.waypoints_data_p,
    &full_loop_B.waypoints_size_b, full_loop_B.waypoints_data_a,
    full_loop_B.dx_g, full_loop_B.dy, full_loop_B.u_data, &full_loop_B.u_size_b,
    full_loop_B.v_data, &full_loop_B.v_size);
  full_loop_B.c_b4 = waypoints_size[0] - 3;
  for (full_loop_B.loop_ub = 0; full_loop_B.loop_ub <= full_loop_B.c_b4;
       full_loop_B.loop_ub++) {
    full_loop_B.freetail_tmp = (static_cast<real_T>(full_loop_B.loop_ub) + 1.0) *
      128.0;
    full_loop_B.l_a = static_cast<int32_T>(full_loop_B.freetail_tmp + 1.0) - 1;
    full_loop_B.i_p = static_cast<int32_T>(full_loop_B.freetail_tmp) - 1;
    course_data[static_cast<int32_T>((static_cast<real_T>(full_loop_B.loop_ub) +
      1.0) + 1.0) - 1] = rt_atan2d_snf(full_loop_B.v_data[full_loop_B.l_a] -
      full_loop_B.v_data[full_loop_B.i_p], full_loop_B.u_data[full_loop_B.l_a] -
      full_loop_B.u_data[full_loop_B.i_p]);
  }

  if (full_loop_B.freelead) {
    course_data[0] = rt_atan2d_snf(full_loop_B.v_data[1] - full_loop_B.v_data[0],
      full_loop_B.u_data[1] - full_loop_B.u_data[0]);
  }

  if (full_loop_B.freetail) {
    course_data[*course_size - 1] = rt_atan2d_snf
      (full_loop_B.v_data[full_loop_B.v_size - 1] -
       full_loop_B.v_data[full_loop_B.v_size - 2],
       full_loop_B.u_data[full_loop_B.u_size_b - 1] -
       full_loop_B.u_data[full_loop_B.u_size_b - 2]);
  }

  if (full_loop_B.freelead && full_loop_B.freetail) {
    full_loop_B.tunableEnvironment.f1.size[0] = waypoints_size[0];
    full_loop_B.tunableEnvironment.f1.size[1] = 3;
    full_loop_B.loop_ub = waypoints_size[0] * waypoints_size[1] - 1;
    for (full_loop_B.l_a = 0; full_loop_B.l_a <= full_loop_B.loop_ub;
         full_loop_B.l_a++) {
      full_loop_B.tunableEnvironment.f1.data[full_loop_B.l_a] =
        waypoints_data[full_loop_B.l_a];
    }

    full_loop_B.tmp_size_nt = *course_size;
    full_loop_B.loop_ub = *course_size;
    if (0 <= full_loop_B.loop_ub - 1) {
      std::memcpy(&full_loop_B.waypoints_data_p[0], &course_data[0],
                  full_loop_B.loop_ub * sizeof(real_T));
    }

    full_loop_LMFsolve_p43rio(&full_loop_B.tunableEnvironment,
      full_loop_B.waypoints_data_p, &full_loop_B.tmp_size_nt);
    full_loop_B.l_a = full_loop_B.tmp_size_nt;
    full_loop_B.loop_ub = full_loop_B.tmp_size_nt;
    if (0 <= full_loop_B.loop_ub - 1) {
      std::memcpy(&full_loop_B.courselsq_data[0], &full_loop_B.waypoints_data_p
                  [0], full_loop_B.loop_ub * sizeof(real_T));
    }
  } else if (full_loop_B.freelead) {
    if (1.0 > static_cast<real_T>(*course_size) - 1.0) {
      full_loop_B.l_a = 0;
    } else {
      full_loop_B.l_a = *course_size - 1;
    }

    full_loop_B.tmp_size_nt = full_loop_B.l_a;
    if (0 <= full_loop_B.l_a - 1) {
      std::memcpy(&full_loop_B.tmp_data_ooe[0], &course_data[0], full_loop_B.l_a
                  * sizeof(real_T));
    }

    full_loop_LMFsolve_p43riob(waypoints_data, waypoints_size, course_data,
      course_size, full_loop_B.tmp_data_ooe, &full_loop_B.tmp_size_nt);
    full_loop_B.loop_ub = full_loop_B.tmp_size_nt;
    if (0 <= full_loop_B.loop_ub - 1) {
      std::memcpy(&full_loop_B.courselsq_data[0], &full_loop_B.tmp_data_ooe[0],
                  full_loop_B.loop_ub * sizeof(real_T));
    }

    full_loop_B.l_a = full_loop_B.tmp_size_nt + 1;
    full_loop_B.courselsq_data[full_loop_B.tmp_size_nt] =
      course_data[waypoints_size[0] - 1];
  } else if (full_loop_B.freetail) {
    if (2 > *course_size) {
      full_loop_B.loop_ub = 0;
      full_loop_B.l_a = 0;
    } else {
      full_loop_B.loop_ub = 1;
      full_loop_B.l_a = *course_size;
    }

    full_loop_B.c_b4 = full_loop_B.l_a - full_loop_B.loop_ub;
    full_loop_B.tmp_size_nt = full_loop_B.c_b4;
    for (full_loop_B.l_a = 0; full_loop_B.l_a < full_loop_B.c_b4;
         full_loop_B.l_a++) {
      full_loop_B.waypoints_data_p[full_loop_B.l_a] =
        course_data[full_loop_B.loop_ub + full_loop_B.l_a];
    }

    full_loop_LMFsolve_p43riobt(waypoints_data, waypoints_size, course_data,
      course_size, full_loop_B.waypoints_data_p, &full_loop_B.tmp_size_nt);
    full_loop_B.l_a = full_loop_B.tmp_size_nt;
    full_loop_B.loop_ub = full_loop_B.tmp_size_nt;
    if (0 <= full_loop_B.loop_ub - 1) {
      std::memcpy(&full_loop_B.courselsq_data[0], &full_loop_B.waypoints_data_p
                  [0], full_loop_B.loop_ub * sizeof(real_T));
    }

    full_loop_B.loop_ub = full_loop_B.tmp_size_nt + 1;
    full_loop_B.course_data_d[0] = course_data[0];
    if (0 <= full_loop_B.l_a - 1) {
      std::memcpy(&full_loop_B.course_data_d[1], &full_loop_B.courselsq_data[0],
                  full_loop_B.l_a * sizeof(real_T));
    }

    full_loop_B.l_a = full_loop_B.loop_ub;
    if (0 <= full_loop_B.loop_ub - 1) {
      std::memcpy(&full_loop_B.courselsq_data[0], &full_loop_B.course_data_d[0],
                  full_loop_B.loop_ub * sizeof(real_T));
    }
  } else {
    if (2.0 > static_cast<real_T>(*course_size) - 1.0) {
      full_loop_B.loop_ub = 0;
      full_loop_B.l_a = 0;
    } else {
      full_loop_B.loop_ub = 1;
      full_loop_B.l_a = *course_size - 1;
    }

    full_loop_B.c_b4 = full_loop_B.l_a - full_loop_B.loop_ub;
    full_loop_B.tmp_size_nt = full_loop_B.c_b4;
    for (full_loop_B.l_a = 0; full_loop_B.l_a < full_loop_B.c_b4;
         full_loop_B.l_a++) {
      full_loop_B.tmp_data_ooe[full_loop_B.l_a] =
        course_data[full_loop_B.loop_ub + full_loop_B.l_a];
    }

    full_loop_LMFsolve_p43riobte(waypoints_data, waypoints_size, course_data,
      course_size, full_loop_B.tmp_data_ooe, &full_loop_B.tmp_size_nt);
    full_loop_B.l_a = full_loop_B.tmp_size_nt;
    full_loop_B.loop_ub = full_loop_B.tmp_size_nt;
    if (0 <= full_loop_B.loop_ub - 1) {
      std::memcpy(&full_loop_B.courselsq_data[0], &full_loop_B.tmp_data_ooe[0],
                  full_loop_B.loop_ub * sizeof(real_T));
    }

    full_loop_B.loop_ub = full_loop_B.tmp_size_nt + 2;
    full_loop_B.course_data[0] = course_data[0];
    if (0 <= full_loop_B.l_a - 1) {
      std::memcpy(&full_loop_B.course_data[1], &full_loop_B.courselsq_data[0],
                  full_loop_B.l_a * sizeof(real_T));
    }

    full_loop_B.course_data[full_loop_B.tmp_size_nt + 1] =
      course_data[waypoints_size[0] - 1];
    full_loop_B.l_a = full_loop_B.loop_ub;
    if (0 <= full_loop_B.loop_ub - 1) {
      std::memcpy(&full_loop_B.courselsq_data[0], &full_loop_B.course_data[0],
                  full_loop_B.loop_ub * sizeof(real_T));
    }
  }

  *course_size = full_loop_B.l_a;
  if (0 <= full_loop_B.l_a - 1) {
    std::memcpy(&course_data[0], &full_loop_B.courselsq_data[0], full_loop_B.l_a
                * sizeof(real_T));
  }
}

void full_loopModelClass::full_loop_fitPartialCourse(const real_T waypoints[63],
  real_T course[21])
{
  for (full_loop_B.i_f = 0; full_loop_B.i_f < 21; full_loop_B.i_f++) {
    course[full_loop_B.i_f] = (rtNaN);
  }

  full_loop_B.waypoints_size_i[0] = 21;
  full_loop_B.waypoints_size_i[1] = 3;
  for (full_loop_B.i_f = 0; full_loop_B.i_f < 1; full_loop_B.i_f++) {
    for (full_loop_B.loop_ub_d = 0; full_loop_B.loop_ub_d < 21;
         full_loop_B.loop_ub_d++) {
      full_loop_B.d_data_po[full_loop_B.loop_ub_d] = static_cast<int8_T>
        (full_loop_B.loop_ub_d + 1);
      full_loop_B.range_data_n[full_loop_B.loop_ub_d] = 1.0 + static_cast<real_T>
        (full_loop_B.loop_ub_d);
    }

    full_loop_B.tmp_size_nr = 21;
    for (full_loop_B.loop_ub_d = 0; full_loop_B.loop_ub_d < 21;
         full_loop_B.loop_ub_d++) {
      full_loop_B.tmp_data_pw[full_loop_B.loop_ub_d] = course
        [static_cast<int32_T>(full_loop_B.range_data_n[full_loop_B.loop_ub_d]) -
        1];
    }

    for (full_loop_B.loop_ub_d = 0; full_loop_B.loop_ub_d < 3;
         full_loop_B.loop_ub_d++) {
      for (full_loop_B.i3 = 0; full_loop_B.i3 < 21; full_loop_B.i3++) {
        full_loop_B.waypoints_data_d[full_loop_B.i3 + 21 * full_loop_B.loop_ub_d]
          = waypoints[(21 * full_loop_B.loop_ub_d + static_cast<int32_T>
                       (full_loop_B.range_data_n[full_loop_B.i3])) - 1];
      }
    }

    full_loop_fitCourse_p(full_loop_B.waypoints_data_d,
                          full_loop_B.waypoints_size_i, full_loop_B.tmp_data_pw,
                          &full_loop_B.tmp_size_nr);
    full_loop_B.loop_ub_d = full_loop_B.tmp_size_nr;
    if (0 <= full_loop_B.loop_ub_d - 1) {
      std::memcpy(&full_loop_B.e_data_e[0], &full_loop_B.tmp_data_pw[0],
                  full_loop_B.loop_ub_d * sizeof(real_T));
    }

    for (full_loop_B.loop_ub_d = 0; full_loop_B.loop_ub_d < 21;
         full_loop_B.loop_ub_d++) {
      course[full_loop_B.d_data_po[full_loop_B.loop_ub_d] - 1] =
        full_loop_B.e_data_e[full_loop_B.loop_ub_d];
    }
  }
}

void full_loopModelClass::full_loop_partitionCourse(const real_T course[21],
  real_T ibegin_data[], int32_T *ibegin_size, real_T iend_data[], int32_T
  *iend_size)
{
  int32_T b_ii;
  int32_T i;
  boolean_T exitg1;
  for (i = 0; i < 20; i++) {
    full_loop_B.x_kw[i] = ((!rtIsNaN(course[i])) && rtIsNaN(course[i + 1]));
  }

  i = 0;
  b_ii = 1;
  exitg1 = false;
  while ((!exitg1) && (b_ii - 1 < 20)) {
    if (full_loop_B.x_kw[b_ii - 1]) {
      i++;
      full_loop_B.ii_data_c[i - 1] = b_ii;
      if (i >= 20) {
        exitg1 = true;
      } else {
        b_ii++;
      }
    } else {
      b_ii++;
    }
  }

  if (1 > i) {
    i = 0;
  }

  *ibegin_size = i;
  for (b_ii = 0; b_ii < i; b_ii++) {
    ibegin_data[b_ii] = full_loop_B.ii_data_c[b_ii];
  }

  if (i == 0) {
    *ibegin_size = 0;
  }

  for (i = 0; i < 20; i++) {
    full_loop_B.x_kw[i] = (rtIsNaN(course[i]) && (!rtIsNaN(course[i + 1])));
  }

  i = 0;
  b_ii = 1;
  exitg1 = false;
  while ((!exitg1) && (b_ii - 1 < 20)) {
    if (full_loop_B.x_kw[b_ii - 1]) {
      i++;
      full_loop_B.ii_data_c[i - 1] = b_ii;
      if (i >= 20) {
        exitg1 = true;
      } else {
        b_ii++;
      }
    } else {
      b_ii++;
    }
  }

  if (1 > i) {
    i = 0;
  }

  *iend_size = i;
  for (b_ii = 0; b_ii < i; b_ii++) {
    iend_data[b_ii] = static_cast<real_T>(full_loop_B.ii_data_c[b_ii]) + 1.0;
  }

  if (i == 0) {
    *iend_size = 0;
  }
}

void full_loopModelClass::full_loop_endpointpadding(const creal_T zcurrent_data[],
  const int32_T zcurrent_size[2], const creal_T zorig_data[], const int32_T
  zorig_size[2], creal_T *zleft, creal_T *zright)
{
  if ((zorig_data[zorig_size[1] - 1].re == zorig_data[0].re) &&
      (zorig_data[zorig_size[1] - 1].im == zorig_data[0].im) && (zorig_size[1] >
       2)) {
    *zleft = zcurrent_data[zcurrent_size[1] - 2];
    *zright = zcurrent_data[1];
  } else {
    zleft->re = (zcurrent_data[0].re - zcurrent_data[1].re) * 100.0 +
      zcurrent_data[0].re;
    zleft->im = (zcurrent_data[0].im - zcurrent_data[1].im) * 100.0 +
      zcurrent_data[0].im;
    zright->re = (zcurrent_data[zcurrent_size[1] - 1].re -
                  zcurrent_data[zcurrent_size[1] - 2].re) * 100.0 +
      zcurrent_data[zcurrent_size[1] - 1].re;
    zright->im = (zcurrent_data[zcurrent_size[1] - 1].im -
                  zcurrent_data[zcurrent_size[1] - 2].im) * 100.0 +
      zcurrent_data[zcurrent_size[1] - 1].im;
  }
}

void full_loopModelClass::full_loop_insertCodegen(const creal_T zorig[2561],
  real_T m, creal_T Zout_data[], int32_T Zout_size[2])
{
  if (1.0 > m) {
    full_loop_B.b_tmp_m = 0;
    full_loop_B.d_m3 = 0;
  } else {
    full_loop_B.b_tmp_m = static_cast<int32_T>(m);
    full_loop_B.d_m3 = full_loop_B.b_tmp_m;
  }

  full_loop_B.zorig_size_d[0] = 1;
  full_loop_B.zorig_size_d[1] = full_loop_B.b_tmp_m;
  if (0 <= full_loop_B.b_tmp_m - 1) {
    std::memcpy(&full_loop_B.b_Zout[0], &zorig[0], full_loop_B.b_tmp_m * sizeof
                (creal_T));
  }

  full_loop_B.zorig_size_m[0] = 1;
  full_loop_B.zorig_size_m[1] = full_loop_B.d_m3;
  if (0 <= full_loop_B.d_m3 - 1) {
    std::memcpy(&full_loop_B.zorig_data_n[0], &zorig[0], full_loop_B.d_m3 *
                sizeof(creal_T));
  }

  full_loop_endpointpadding(full_loop_B.b_Zout, full_loop_B.zorig_size_d,
    full_loop_B.zorig_data_n, full_loop_B.zorig_size_m, &full_loop_B.z_data_j[0],
    &full_loop_B.zright_o);
  if (1.0 > m) {
    full_loop_B.d_m3 = 0;
  } else {
    full_loop_B.d_m3 = static_cast<int32_T>(m);
  }

  full_loop_B.z_size_k[0] = 1;
  full_loop_B.z_size_k[1] = full_loop_B.d_m3 - -2;
  full_loop_B.b_tmp_m = full_loop_B.d_m3 - -2;
  if (0 <= full_loop_B.b_tmp_m - 3) {
    std::memcpy(&full_loop_B.z_data_j[1], &zorig[0], (full_loop_B.b_tmp_m + -2) *
                sizeof(creal_T));
  }

  full_loop_B.z_data_j[full_loop_B.d_m3 + 1] = full_loop_B.zright_o;
  full_loop_diff(full_loop_B.z_data_j, full_loop_B.z_size_k,
                 full_loop_B.tmp_data, full_loop_B.zorig_size_d);
  full_loop_B.dz_size_c[0] = 1;
  full_loop_B.dz_size_c[1] = full_loop_B.zorig_size_d[1];
  full_loop_B.b_tmp_m = full_loop_B.zorig_size_d[0] * full_loop_B.zorig_size_d[1];
  if (0 <= full_loop_B.b_tmp_m - 1) {
    std::memcpy(&full_loop_B.dz_data_a[0], &full_loop_B.tmp_data[0],
                full_loop_B.b_tmp_m * sizeof(creal_T));
  }

  full_loop_abs(full_loop_B.dz_data_a, full_loop_B.dz_size_c,
                full_loop_B.tmp_data_d, full_loop_B.zorig_size_m);
  full_loop_B.b_tmp_m = full_loop_B.zorig_size_m[0] * full_loop_B.zorig_size_m[1];
  if (0 <= full_loop_B.b_tmp_m - 1) {
    std::memcpy(&full_loop_B.l_data_m[0], &full_loop_B.tmp_data_d[0],
                full_loop_B.b_tmp_m * sizeof(real_T));
  }

  if (2 > full_loop_B.zorig_size_d[1]) {
    full_loop_B.d_m3 = 0;
    full_loop_B.b_tmp_m = 0;
  } else {
    full_loop_B.d_m3 = 1;
    full_loop_B.b_tmp_m = full_loop_B.zorig_size_d[1];
  }

  full_loop_B.dz_size_j[0] = 1;
  full_loop_B.dz_size_tmp_o = full_loop_B.b_tmp_m - full_loop_B.d_m3;
  full_loop_B.dz_size_j[1] = full_loop_B.dz_size_tmp_o;
  for (full_loop_B.b_tmp_m = 0; full_loop_B.b_tmp_m < full_loop_B.dz_size_tmp_o;
       full_loop_B.b_tmp_m++) {
    full_loop_B.dz_data_re_tmp_f = full_loop_B.d_m3 + full_loop_B.b_tmp_m;
    full_loop_B.b_Zout[full_loop_B.b_tmp_m].re =
      full_loop_B.dz_data_a[full_loop_B.dz_data_re_tmp_f].re *
      full_loop_B.dz_data_a[full_loop_B.b_tmp_m].re -
      -full_loop_B.dz_data_a[full_loop_B.dz_data_re_tmp_f].im *
      full_loop_B.dz_data_a[full_loop_B.b_tmp_m].im;
    full_loop_B.b_Zout[full_loop_B.b_tmp_m].im =
      full_loop_B.dz_data_a[full_loop_B.dz_data_re_tmp_f].re *
      full_loop_B.dz_data_a[full_loop_B.b_tmp_m].im +
      -full_loop_B.dz_data_a[full_loop_B.dz_data_re_tmp_f].im *
      full_loop_B.dz_data_a[full_loop_B.b_tmp_m].re;
  }

  full_loop_angle(full_loop_B.b_Zout, full_loop_B.dz_size_j,
                  full_loop_B.tmp_data_l, full_loop_B.dz_size_c);
  full_loop_B.b_tmp_m = full_loop_B.dz_size_c[0] * full_loop_B.dz_size_c[1];
  if (0 <= full_loop_B.b_tmp_m - 1) {
    std::memcpy(&full_loop_B.alpha_data_c[0], &full_loop_B.tmp_data_l[0],
                full_loop_B.b_tmp_m * sizeof(real_T));
  }

  if (2.0 > static_cast<real_T>(full_loop_B.z_size_k[1]) - 2.0) {
    full_loop_B.dz_size_tmp_o = 0;
    full_loop_B.b_tmp_m = 0;
  } else {
    full_loop_B.dz_size_tmp_o = 1;
    full_loop_B.b_tmp_m = full_loop_B.z_size_k[1] - 2;
  }

  if (2.0 > static_cast<real_T>(full_loop_B.zorig_size_d[1]) - 1.0) {
    full_loop_B.w_o = 0;
    full_loop_B.v_le = 0;
  } else {
    full_loop_B.w_o = 1;
    full_loop_B.v_le = full_loop_B.zorig_size_d[1] - 1;
  }

  if (1.0 > static_cast<real_T>(full_loop_B.zorig_size_m[1]) - 2.0) {
    full_loop_B.y_p = 0;
  } else {
    full_loop_B.y_p = full_loop_B.zorig_size_m[1] - 2;
  }

  if (2.0 > static_cast<real_T>(full_loop_B.zorig_size_m[1]) - 1.0) {
    full_loop_B.dz_data_re_tmp_f = 0;
    full_loop_B.cb = 0;
  } else {
    full_loop_B.dz_data_re_tmp_f = 1;
    full_loop_B.cb = full_loop_B.zorig_size_m[1] - 1;
  }

  if (3 > full_loop_B.zorig_size_m[1]) {
    full_loop_B.gb_d = 0;
    full_loop_B.fb = 0;
  } else {
    full_loop_B.gb_d = 2;
    full_loop_B.fb = full_loop_B.zorig_size_m[1];
  }

  if (1.0 > static_cast<real_T>(full_loop_B.dz_size_c[1]) - 1.0) {
    full_loop_B.ib_g = 0;
  } else {
    full_loop_B.ib_g = full_loop_B.dz_size_c[1] - 1;
  }

  if (2 > full_loop_B.dz_size_c[1]) {
    full_loop_B.d_m3 = 0;
    full_loop_B.lb = 0;
  } else {
    full_loop_B.d_m3 = 1;
    full_loop_B.lb = full_loop_B.dz_size_c[1];
  }

  full_loop_B.z_size_cf[0] = 1;
  full_loop_B.z_size_tmp_i = full_loop_B.b_tmp_m - full_loop_B.dz_size_tmp_o;
  full_loop_B.z_size_cf[1] = full_loop_B.z_size_tmp_i;
  for (full_loop_B.b_tmp_m = 0; full_loop_B.b_tmp_m < full_loop_B.z_size_tmp_i;
       full_loop_B.b_tmp_m++) {
    full_loop_B.znew_data_o[full_loop_B.b_tmp_m] =
      full_loop_B.z_data_j[full_loop_B.dz_size_tmp_o + full_loop_B.b_tmp_m];
  }

  full_loop_B.dz_size_tmp_o = full_loop_B.v_le - full_loop_B.w_o;
  for (full_loop_B.b_tmp_m = 0; full_loop_B.b_tmp_m < full_loop_B.dz_size_tmp_o;
       full_loop_B.b_tmp_m++) {
    full_loop_B.b_Zout[full_loop_B.b_tmp_m] =
      full_loop_B.dz_data_a[full_loop_B.w_o + full_loop_B.b_tmp_m];
  }

  full_loop_B.l_size_d[0] = 1;
  full_loop_B.l_size_d[1] = full_loop_B.y_p;
  if (0 <= full_loop_B.y_p - 1) {
    std::memcpy(&full_loop_B.l_data_a[0], &full_loop_B.l_data_m[0],
                full_loop_B.y_p * sizeof(real_T));
  }

  full_loop_B.l_size_p[0] = 1;
  full_loop_B.w_o = full_loop_B.cb - full_loop_B.dz_data_re_tmp_f;
  full_loop_B.l_size_p[1] = full_loop_B.w_o;
  for (full_loop_B.b_tmp_m = 0; full_loop_B.b_tmp_m < full_loop_B.w_o;
       full_loop_B.b_tmp_m++) {
    full_loop_B.l_data_p[full_loop_B.b_tmp_m] =
      full_loop_B.l_data_m[full_loop_B.dz_data_re_tmp_f + full_loop_B.b_tmp_m];
  }

  full_loop_B.l_size_a[0] = 1;
  full_loop_B.w_o = full_loop_B.fb - full_loop_B.gb_d;
  full_loop_B.l_size_a[1] = full_loop_B.w_o;
  for (full_loop_B.b_tmp_m = 0; full_loop_B.b_tmp_m < full_loop_B.w_o;
       full_loop_B.b_tmp_m++) {
    full_loop_B.l_data_j[full_loop_B.b_tmp_m] =
      full_loop_B.l_data_m[full_loop_B.gb_d + full_loop_B.b_tmp_m];
  }

  if (0 <= full_loop_B.ib_g - 1) {
    std::memcpy(&full_loop_B.alpha_data_ev[0], &full_loop_B.alpha_data_c[0],
                full_loop_B.ib_g * sizeof(real_T));
  }

  full_loop_B.dz_data_re_tmp_f = full_loop_B.lb - full_loop_B.d_m3;
  for (full_loop_B.b_tmp_m = 0; full_loop_B.b_tmp_m <
       full_loop_B.dz_data_re_tmp_f; full_loop_B.b_tmp_m++) {
    full_loop_B.alpha_data_p[full_loop_B.b_tmp_m] =
      full_loop_B.alpha_data_c[full_loop_B.d_m3 + full_loop_B.b_tmp_m];
  }

  full_loop_midcurve(full_loop_B.znew_data_o, full_loop_B.z_size_cf,
                     full_loop_B.b_Zout, full_loop_B.l_data_a,
                     full_loop_B.l_size_d, full_loop_B.l_data_p,
                     full_loop_B.l_size_p, full_loop_B.l_data_j,
                     full_loop_B.l_size_a, full_loop_B.alpha_data_ev,
                     full_loop_B.alpha_data_p, full_loop_B.tmp_data_g,
                     full_loop_B.zorig_size_d);
  full_loop_B.d_m3 = full_loop_B.zorig_size_d[1];
  full_loop_B.b_tmp_m = full_loop_B.zorig_size_d[0] * full_loop_B.zorig_size_d[1];
  if (0 <= full_loop_B.b_tmp_m - 1) {
    std::memcpy(&full_loop_B.znew_data_o[0], &full_loop_B.tmp_data_g[0],
                full_loop_B.b_tmp_m * sizeof(creal_T));
  }

  std::memset(&full_loop_B.b_Zout[0], 0, 2561U * sizeof(creal_T));
  if (1.0 > m) {
    full_loop_B.dz_data_re_tmp_f = -1;
  } else {
    full_loop_B.dz_data_re_tmp_f = static_cast<int32_T>(m) - 1;
  }

  full_loop_B.yb = 2.0 * m - 1.0;
  if (1.0 > full_loop_B.yb) {
    full_loop_B.gb_d = 1;
  } else {
    full_loop_B.gb_d = 2;
  }

  for (full_loop_B.b_tmp_m = 0; full_loop_B.b_tmp_m <=
       full_loop_B.dz_data_re_tmp_f; full_loop_B.b_tmp_m++) {
    full_loop_B.b_Zout[full_loop_B.gb_d * full_loop_B.b_tmp_m] =
      zorig[full_loop_B.b_tmp_m];
  }

  if (2.0 > 2.0 * static_cast<real_T>(full_loop_B.zorig_size_d[1]) + 1.0) {
    full_loop_B.dz_data_re_tmp_f = 0;
    full_loop_B.gb_d = 1;
  } else {
    full_loop_B.dz_data_re_tmp_f = 1;
    full_loop_B.gb_d = 2;
  }

  for (full_loop_B.b_tmp_m = 0; full_loop_B.b_tmp_m < full_loop_B.d_m3;
       full_loop_B.b_tmp_m++) {
    full_loop_B.b_Zout[full_loop_B.dz_data_re_tmp_f + full_loop_B.gb_d *
      full_loop_B.b_tmp_m] = full_loop_B.znew_data_o[full_loop_B.b_tmp_m];
  }

  if (1.0 > full_loop_B.yb) {
    full_loop_B.b_tmp_m = 0;
  } else {
    full_loop_B.b_tmp_m = static_cast<int32_T>(full_loop_B.yb);
  }

  Zout_size[0] = 1;
  Zout_size[1] = full_loop_B.b_tmp_m;
  if (0 <= full_loop_B.b_tmp_m - 1) {
    std::memcpy(&Zout_data[0], &full_loop_B.b_Zout[0], full_loop_B.b_tmp_m *
                sizeof(creal_T));
  }
}

void full_loopModelClass::full_loop_endpointpadding_p(const creal_T
  zcurrent_data[], const int32_T zcurrent_size[2], const creal_T zorig[21],
  creal_T *zleft, creal_T *zright)
{
  if ((zorig[0].re == zorig[20].re) && (zorig[0].im == zorig[20].im)) {
    *zleft = zcurrent_data[zcurrent_size[1] - 2];
    *zright = zcurrent_data[1];
  } else {
    zleft->re = (zcurrent_data[0].re - zcurrent_data[1].re) * 100.0 +
      zcurrent_data[0].re;
    zleft->im = (zcurrent_data[0].im - zcurrent_data[1].im) * 100.0 +
      zcurrent_data[0].im;
    zright->re = (zcurrent_data[zcurrent_size[1] - 1].re -
                  zcurrent_data[zcurrent_size[1] - 2].re) * 100.0 +
      zcurrent_data[zcurrent_size[1] - 1].re;
    zright->im = (zcurrent_data[zcurrent_size[1] - 1].im -
                  zcurrent_data[zcurrent_size[1] - 2].im) * 100.0 +
      zcurrent_data[zcurrent_size[1] - 1].im;
  }
}

void full_loopModelClass::full_loop_optimize(const creal_T zcurrent_data[],
  const int32_T zcurrent_size[2], const creal_T zorig[21], creal_T Zout_data[],
  int32_T Zout_size[2])
{
  full_loop_endpointpadding_p(zcurrent_data, zcurrent_size, zorig,
    &full_loop_B.z_data_fd[0], &full_loop_B.zright_a);
  full_loop_B.z_size_n[0] = 1;
  full_loop_B.z_size_n[1] = zcurrent_size[1] + 2;
  full_loop_B.loop_ub_mr = zcurrent_size[0] * zcurrent_size[1] - 1;
  if (0 <= full_loop_B.loop_ub_mr) {
    std::memcpy(&full_loop_B.z_data_fd[1], &zcurrent_data[0],
                (full_loop_B.loop_ub_mr + 1) * sizeof(creal_T));
  }

  full_loop_B.z_data_fd[full_loop_B.loop_ub_mr + 2] = full_loop_B.zright_a;
  full_loop_diff(full_loop_B.z_data_fd, full_loop_B.z_size_n,
                 full_loop_B.tmp_data_b, full_loop_B.tmp_size_ov);
  full_loop_B.d1_size[0] = 1;
  full_loop_B.d1_size[1] = full_loop_B.tmp_size_ov[1];
  full_loop_B.loop_ub_mr = full_loop_B.tmp_size_ov[0] * full_loop_B.tmp_size_ov
    [1];
  if (0 <= full_loop_B.loop_ub_mr - 1) {
    std::memcpy(&full_loop_B.d1_data_j[0], &full_loop_B.tmp_data_b[0],
                full_loop_B.loop_ub_mr * sizeof(creal_T));
  }

  full_loop_abs(full_loop_B.d1_data_j, full_loop_B.d1_size,
                full_loop_B.tmp_data_gu, full_loop_B.tmp_size_da);
  full_loop_B.loop_ub_mr = full_loop_B.tmp_size_da[0] * full_loop_B.tmp_size_da
    [1];
  if (0 <= full_loop_B.loop_ub_mr - 1) {
    std::memcpy(&full_loop_B.l1_data_h[0], &full_loop_B.tmp_data_gu[0],
                full_loop_B.loop_ub_mr * sizeof(real_T));
  }

  if (3 > full_loop_B.z_size_n[1]) {
    full_loop_B.d_e = 0;
    full_loop_B.loop_ub_mr = 0;
  } else {
    full_loop_B.d_e = 2;
    full_loop_B.loop_ub_mr = full_loop_B.z_size_n[1];
  }

  full_loop_B.d2_size_idx_1_tmp = full_loop_B.loop_ub_mr - full_loop_B.d_e;
  for (full_loop_B.loop_ub_mr = 0; full_loop_B.loop_ub_mr <
       full_loop_B.d2_size_idx_1_tmp; full_loop_B.loop_ub_mr++) {
    full_loop_B.d2_size_tmp = full_loop_B.d_e + full_loop_B.loop_ub_mr;
    full_loop_B.d2_data_i[full_loop_B.loop_ub_mr].re =
      full_loop_B.z_data_fd[full_loop_B.d2_size_tmp].re -
      full_loop_B.z_data_fd[full_loop_B.loop_ub_mr].re;
    full_loop_B.d2_data_i[full_loop_B.loop_ub_mr].im =
      full_loop_B.z_data_fd[full_loop_B.d2_size_tmp].im -
      full_loop_B.z_data_fd[full_loop_B.loop_ub_mr].im;
  }

  if (2 > full_loop_B.d2_size_idx_1_tmp - 1) {
    full_loop_B.d_e = 0;
    full_loop_B.loop_ub_mr = 0;
  } else {
    full_loop_B.d_e = 1;
    full_loop_B.loop_ub_mr = full_loop_B.d2_size_idx_1_tmp - 1;
  }

  full_loop_B.d2_size[0] = 1;
  full_loop_B.d2_size_tmp = full_loop_B.loop_ub_mr - full_loop_B.d_e;
  full_loop_B.d2_size[1] = full_loop_B.d2_size_tmp;
  for (full_loop_B.loop_ub_mr = 0; full_loop_B.loop_ub_mr <
       full_loop_B.d2_size_tmp; full_loop_B.loop_ub_mr++) {
    full_loop_B.d2_data_re_tmp = full_loop_B.d_e + full_loop_B.loop_ub_mr;
    full_loop_B.d2_data_n[full_loop_B.loop_ub_mr].re =
      full_loop_B.d2_data_i[full_loop_B.d2_data_re_tmp].re *
      full_loop_B.d1_data_j[full_loop_B.loop_ub_mr].re -
      -full_loop_B.d2_data_i[full_loop_B.d2_data_re_tmp].im *
      full_loop_B.d1_data_j[full_loop_B.loop_ub_mr].im;
    full_loop_B.d2_data_n[full_loop_B.loop_ub_mr].im =
      full_loop_B.d2_data_i[full_loop_B.d2_data_re_tmp].re *
      full_loop_B.d1_data_j[full_loop_B.loop_ub_mr].im +
      -full_loop_B.d2_data_i[full_loop_B.d2_data_re_tmp].im *
      full_loop_B.d1_data_j[full_loop_B.loop_ub_mr].re;
  }

  full_loop_angle(full_loop_B.d2_data_n, full_loop_B.d2_size,
                  full_loop_B.tmp_data_o, full_loop_B.z_size_n);
  full_loop_B.d2_size_tmp = full_loop_B.z_size_n[0] * full_loop_B.z_size_n[1];
  if (0 <= full_loop_B.d2_size_tmp - 1) {
    std::memcpy(&full_loop_B.alpha_data_a[0], &full_loop_B.tmp_data_o[0],
                full_loop_B.d2_size_tmp * sizeof(real_T));
  }

  if (4 > full_loop_B.tmp_size_ov[1]) {
    full_loop_B.d_e = 0;
    full_loop_B.loop_ub_mr = 0;
  } else {
    full_loop_B.d_e = 3;
    full_loop_B.loop_ub_mr = full_loop_B.tmp_size_ov[1];
  }

  if (2 > full_loop_B.d2_size_idx_1_tmp - 1) {
    full_loop_B.d2_data_re_tmp = 0;
  } else {
    full_loop_B.d2_data_re_tmp = 1;
  }

  full_loop_B.d1_size_h[0] = 1;
  full_loop_B.d1_size_tmp = full_loop_B.loop_ub_mr - full_loop_B.d_e;
  full_loop_B.d1_size_h[1] = full_loop_B.d1_size_tmp;
  for (full_loop_B.loop_ub_mr = 0; full_loop_B.loop_ub_mr <
       full_loop_B.d1_size_tmp; full_loop_B.loop_ub_mr++) {
    full_loop_B.d1_data_re_tmp = full_loop_B.d_e + full_loop_B.loop_ub_mr;
    full_loop_B.d2_size_tmp = full_loop_B.d2_data_re_tmp +
      full_loop_B.loop_ub_mr;
    full_loop_B.d2_data_n[full_loop_B.loop_ub_mr].re =
      full_loop_B.d2_data_i[full_loop_B.d2_size_tmp].re *
      full_loop_B.d1_data_j[full_loop_B.d1_data_re_tmp].re -
      full_loop_B.d2_data_i[full_loop_B.d2_size_tmp].im *
      -full_loop_B.d1_data_j[full_loop_B.d1_data_re_tmp].im;
    full_loop_B.d2_data_n[full_loop_B.loop_ub_mr].im =
      full_loop_B.d2_data_i[full_loop_B.d2_size_tmp].im *
      full_loop_B.d1_data_j[full_loop_B.d1_data_re_tmp].re +
      full_loop_B.d2_data_i[full_loop_B.d2_size_tmp].re *
      -full_loop_B.d1_data_j[full_loop_B.d1_data_re_tmp].im;
  }

  full_loop_angle(full_loop_B.d2_data_n, full_loop_B.d1_size_h,
                  full_loop_B.tmp_data_o, full_loop_B.z_size_n);
  full_loop_B.loop_ub_mr = full_loop_B.z_size_n[0] * full_loop_B.z_size_n[1];
  if (0 <= full_loop_B.loop_ub_mr - 1) {
    std::memcpy(&full_loop_B.beta_data_i[0], &full_loop_B.tmp_data_o[0],
                full_loop_B.loop_ub_mr * sizeof(real_T));
  }

  if (1.0 > static_cast<real_T>(zcurrent_size[1]) - 2.0) {
    full_loop_B.loop_ub_mr = 0;
  } else {
    full_loop_B.loop_ub_mr = zcurrent_size[1] - 2;
  }

  if (2 > full_loop_B.d2_size_idx_1_tmp - 1) {
    full_loop_B.d_e = 0;
    full_loop_B.d2_size_tmp = 0;
  } else {
    full_loop_B.d_e = 1;
    full_loop_B.d2_size_tmp = full_loop_B.d2_size_idx_1_tmp - 1;
  }

  if (1.0 > static_cast<real_T>(full_loop_B.tmp_size_da[1]) - 3.0) {
    full_loop_B.hb = 0;
  } else {
    full_loop_B.hb = full_loop_B.tmp_size_da[1] - 3;
  }

  if (2.0 > static_cast<real_T>(full_loop_B.tmp_size_da[1]) - 2.0) {
    full_loop_B.d2_size_idx_1_tmp = 0;
    full_loop_B.kb = 0;
  } else {
    full_loop_B.d2_size_idx_1_tmp = 1;
    full_loop_B.kb = full_loop_B.tmp_size_da[1] - 2;
  }

  if (3.0 > static_cast<real_T>(full_loop_B.tmp_size_da[1]) - 1.0) {
    full_loop_B.d2_data_re_tmp = 0;
  } else {
    full_loop_B.d2_data_re_tmp = 2;
  }

  if (4 > full_loop_B.tmp_size_da[1]) {
    full_loop_B.d1_size_tmp = 0;
    full_loop_B.d1_data_re_tmp = 0;
  } else {
    full_loop_B.d1_size_tmp = 3;
    full_loop_B.d1_data_re_tmp = full_loop_B.tmp_size_da[1];
  }

  full_loop_B.zcurrent_size[0] = 1;
  full_loop_B.zcurrent_size[1] = full_loop_B.loop_ub_mr;
  if (0 <= full_loop_B.loop_ub_mr - 1) {
    std::memcpy(&full_loop_B.zcurrent_data[0], &zcurrent_data[0],
                full_loop_B.loop_ub_mr * sizeof(creal_T));
  }

  full_loop_B.d2_size_tmp -= full_loop_B.d_e;
  for (full_loop_B.loop_ub_mr = 0; full_loop_B.loop_ub_mr <
       full_loop_B.d2_size_tmp; full_loop_B.loop_ub_mr++) {
    full_loop_B.d2_data_n[full_loop_B.loop_ub_mr] =
      full_loop_B.d2_data_i[full_loop_B.d_e + full_loop_B.loop_ub_mr];
  }

  full_loop_B.l1_size[0] = 1;
  full_loop_B.l1_size[1] = full_loop_B.hb;
  if (0 <= full_loop_B.hb - 1) {
    std::memcpy(&full_loop_B.l1_data_l[0], &full_loop_B.l1_data_h[0],
                full_loop_B.hb * sizeof(real_T));
  }

  full_loop_B.l1_size_h[0] = 1;
  full_loop_B.d2_size_tmp = full_loop_B.kb - full_loop_B.d2_size_idx_1_tmp;
  full_loop_B.l1_size_h[1] = full_loop_B.d2_size_tmp;
  for (full_loop_B.loop_ub_mr = 0; full_loop_B.loop_ub_mr <
       full_loop_B.d2_size_tmp; full_loop_B.loop_ub_mr++) {
    full_loop_B.l1_data_a[full_loop_B.loop_ub_mr] =
      full_loop_B.l1_data_h[full_loop_B.d2_size_idx_1_tmp +
      full_loop_B.loop_ub_mr] + full_loop_B.l1_data_h[full_loop_B.d2_data_re_tmp
      + full_loop_B.loop_ub_mr];
  }

  full_loop_B.l1_size_a[0] = 1;
  full_loop_B.d2_size_tmp = full_loop_B.d1_data_re_tmp - full_loop_B.d1_size_tmp;
  full_loop_B.l1_size_a[1] = full_loop_B.d2_size_tmp;
  for (full_loop_B.loop_ub_mr = 0; full_loop_B.loop_ub_mr <
       full_loop_B.d2_size_tmp; full_loop_B.loop_ub_mr++) {
    full_loop_B.l1_data_c[full_loop_B.loop_ub_mr] =
      full_loop_B.l1_data_h[full_loop_B.d1_size_tmp + full_loop_B.loop_ub_mr];
  }

  full_loop_midcurve(full_loop_B.zcurrent_data, full_loop_B.zcurrent_size,
                     full_loop_B.d2_data_n, full_loop_B.l1_data_l,
                     full_loop_B.l1_size, full_loop_B.l1_data_a,
                     full_loop_B.l1_size_h, full_loop_B.l1_data_c,
                     full_loop_B.l1_size_a, full_loop_B.alpha_data_a,
                     full_loop_B.beta_data_i, full_loop_B.tmp_data_g1,
                     full_loop_B.tmp_size_ov);
  Zout_size[0] = 1;
  Zout_size[1] = full_loop_B.tmp_size_ov[1] + 2;
  Zout_data[0] = zorig[0];
  full_loop_B.d2_size_tmp = full_loop_B.tmp_size_ov[0] *
    full_loop_B.tmp_size_ov[1];
  if (0 <= full_loop_B.d2_size_tmp - 1) {
    std::memcpy(&Zout_data[1], &full_loop_B.tmp_data_g1[0],
                full_loop_B.d2_size_tmp * sizeof(creal_T));
  }

  Zout_data[full_loop_B.d2_size_tmp + 1] = zorig[20];
  full_loop_B.ub_tmp = (static_cast<real_T>(zcurrent_size[1]) - 21.0) / 20.0 +
    1.0;
  if ((full_loop_B.ub_tmp == 0.0) || (((full_loop_B.ub_tmp > 0.0) && (1 >
         Zout_size[1])) || ((0.0 > full_loop_B.ub_tmp) && (Zout_size[1] > 1))))
  {
    full_loop_B.d2_size_idx_1_tmp = 1;
    full_loop_B.loop_ub_mr = 0;
  } else {
    full_loop_B.d2_size_idx_1_tmp = static_cast<int32_T>(full_loop_B.ub_tmp);
    full_loop_B.loop_ub_mr = Zout_size[1];
  }

  full_loop_B.d2_size_tmp = div_s32_floor(full_loop_B.loop_ub_mr - 1,
    full_loop_B.d2_size_idx_1_tmp);
  for (full_loop_B.loop_ub_mr = 0; full_loop_B.loop_ub_mr <=
       full_loop_B.d2_size_tmp; full_loop_B.loop_ub_mr++) {
    full_loop_B.ac_data[full_loop_B.loop_ub_mr] = full_loop_B.d2_size_idx_1_tmp *
      full_loop_B.loop_ub_mr;
  }

  for (full_loop_B.loop_ub_mr = 0; full_loop_B.loop_ub_mr <=
       full_loop_B.d2_size_tmp; full_loop_B.loop_ub_mr++) {
    Zout_data[full_loop_B.ac_data[full_loop_B.loop_ub_mr]] =
      zorig[full_loop_B.loop_ub_mr];
  }
}

void full_loopModelClass::full_loop_cloth(const creal_T z[21], real_T r[2561],
  real_T s[2561])
{
  std::memset(&full_loop_B.Zout[0], 0, 2561U * sizeof(creal_T));
  full_loop_B.m_ni = 21.0;
  std::memcpy(&full_loop_B.Zout[0], &z[0], 21U * sizeof(creal_T));
  full_loop_B.Zout_size_c3[0] = 1;
  full_loop_B.Zout_size_e[0] = 1;
  full_loop_B.Zout_size_f[0] = 1;
  for (full_loop_B.i_do = 0; full_loop_B.i_do < 7; full_loop_B.i_do++) {
    full_loop_B.mnew_i = 2.0 * full_loop_B.m_ni - 1.0;
    full_loop_insertCodegen(full_loop_B.Zout, full_loop_B.m_ni,
      full_loop_B.tmp_data_j, full_loop_B.tmp_size_n4);
    full_loop_B.loop_ub_g4 = full_loop_B.tmp_size_n4[1];
    if (0 <= full_loop_B.loop_ub_g4 - 1) {
      std::memcpy(&full_loop_B.Zout[0], &full_loop_B.tmp_data_j[0],
                  full_loop_B.loop_ub_g4 * sizeof(creal_T));
    }

    full_loop_B.e_tmp_j = static_cast<int32_T>(full_loop_B.mnew_i);
    full_loop_B.Zout_size_c3[1] = full_loop_B.e_tmp_j;
    if (0 <= full_loop_B.e_tmp_j - 1) {
      std::memcpy(&full_loop_B.Zout_data_o[0], &full_loop_B.Zout[0],
                  full_loop_B.e_tmp_j * sizeof(creal_T));
    }

    full_loop_optimize(full_loop_B.Zout_data_o, full_loop_B.Zout_size_c3, z,
                       full_loop_B.tmp_data_j, full_loop_B.tmp_size_n4);
    full_loop_B.loop_ub_g4 = full_loop_B.tmp_size_n4[1];
    if (0 <= full_loop_B.loop_ub_g4 - 1) {
      std::memcpy(&full_loop_B.Zout[0], &full_loop_B.tmp_data_j[0],
                  full_loop_B.loop_ub_g4 * sizeof(creal_T));
    }

    full_loop_B.Zout_size_e[1] = full_loop_B.e_tmp_j;
    if (0 <= full_loop_B.e_tmp_j - 1) {
      std::memcpy(&full_loop_B.Zout_data_o[0], &full_loop_B.Zout[0],
                  full_loop_B.e_tmp_j * sizeof(creal_T));
    }

    full_loop_optimize(full_loop_B.Zout_data_o, full_loop_B.Zout_size_e, z,
                       full_loop_B.tmp_data_j, full_loop_B.tmp_size_n4);
    full_loop_B.loop_ub_g4 = full_loop_B.tmp_size_n4[1];
    if (0 <= full_loop_B.loop_ub_g4 - 1) {
      std::memcpy(&full_loop_B.Zout[0], &full_loop_B.tmp_data_j[0],
                  full_loop_B.loop_ub_g4 * sizeof(creal_T));
    }

    full_loop_B.Zout_size_f[1] = full_loop_B.e_tmp_j;
    if (0 <= full_loop_B.e_tmp_j - 1) {
      std::memcpy(&full_loop_B.Zout_data_o[0], &full_loop_B.Zout[0],
                  full_loop_B.e_tmp_j * sizeof(creal_T));
    }

    full_loop_optimize(full_loop_B.Zout_data_o, full_loop_B.Zout_size_f, z,
                       full_loop_B.tmp_data_j, full_loop_B.tmp_size_n4);
    full_loop_B.loop_ub_g4 = full_loop_B.tmp_size_n4[1];
    if (0 <= full_loop_B.loop_ub_g4 - 1) {
      std::memcpy(&full_loop_B.Zout[0], &full_loop_B.tmp_data_j[0],
                  full_loop_B.loop_ub_g4 * sizeof(creal_T));
    }

    full_loop_B.m_ni = full_loop_B.mnew_i;
  }

  for (full_loop_B.i_do = 0; full_loop_B.i_do < 2561; full_loop_B.i_do++) {
    r[full_loop_B.i_do] = full_loop_B.Zout[full_loop_B.i_do].re;
    s[full_loop_B.i_do] = full_loop_B.Zout[full_loop_B.i_do].im;
  }
}

void full_loopModelClass::full_loop_packageCodegen(const real_T r[2561], const
  real_T s[2561], real_T u[2561], real_T v[2561])
{
  int32_T i;
  for (i = 0; i < 2561; i++) {
    u[i] = 0.0;
    v[i] = 0.0;
    u[i] = r[i];
    v[i] = s[i];
  }
}

void full_loopModelClass::full_loop_dclothoidwp(const real_T x[21], const real_T
  y[21], real_T u[2561], real_T v[2561])
{
  for (full_loop_B.i19 = 0; full_loop_B.i19 < 21; full_loop_B.i19++) {
    full_loop_B.x_k[full_loop_B.i19].re = x[full_loop_B.i19];
    full_loop_B.x_k[full_loop_B.i19].im = y[full_loop_B.i19];
  }

  full_loop_cloth(full_loop_B.x_k, full_loop_B.r, full_loop_B.s);
  full_loop_packageCodegen(full_loop_B.r, full_loop_B.s, u, v);
}

void full_loopModelClass::full_loop_power(const real_T a[20], real_T y[20])
{
  for (full_loop_B.b_k_g = 0; full_loop_B.b_k_g < 20; full_loop_B.b_k_g++) {
    y[full_loop_B.b_k_g] = full_loop_rt_powd_snf(a[full_loop_B.b_k_g], 2.0);
  }
}

void full_loopModelClass::full_loop_repmat(const real_T a[20], real_T b[500])
{
  for (full_loop_B.b_jtilecol_g = 0; full_loop_B.b_jtilecol_g < 25;
       full_loop_B.b_jtilecol_g++) {
    full_loop_B.ibcol_n = full_loop_B.b_jtilecol_g * 20 - 1;
    std::memcpy(&b[full_loop_B.ibcol_n + 1], &a[0], 20U * sizeof(real_T));
  }
}

void full_loopModelClass::full_loop_fetchAgrad(const real_T x[20], const real_T
  y[20], real_T a[20], real_T dadx[20], real_T dady[20])
{
  static const real_T tmp[351] = { -1.5361481088532109E-40,
    -5.1782003708968662E-38, 5.8080516979367073E-38, -6.2922109794702842E-36,
    1.7744129415359022E-35, -9.8266873453160865E-36, -3.0557011816989596E-34,
    1.9988681524430764E-33, -2.7007621230825949E-33, 9.6497076628562535E-34,
    -8.50146594503621E-33, 8.7613736854720049E-32, -2.8258679893784358E-31,
    2.3637604856716169E-31, -5.8556266604372106E-32, -1.2863962524996432E-31,
    2.229093841830142E-30, -1.1057059963507232E-29, 2.3139349101185755E-29,
    -1.2630223562649489E-29, 2.0068564650639364E-30, -1.1052377502159136E-30,
    3.0309726719642508E-29, -2.57153235020298E-28, 7.9357820762496212E-28,
    -1.1834423538462616E-27, 3.7518152500494656E-28, -9.5988758699827141E-30,
    -5.8444661902772888E-30, 2.2799302267031842E-28, -3.118708591261201E-27,
    1.6937953593997347E-26, -3.4234259338177584E-26, 3.675290577810477E-26,
    -1.6183294340108731E-27, -2.9209077909746285E-27, -2.0493494333051533E-29,
    1.0232091530758262E-27, -2.0119872415420161E-26, 1.8157191663212143E-25,
    -6.8278782273948665E-25, 7.9289707228553727E-25, -5.1713140278139824E-25,
    -3.5757401738269863E-25, 1.7191521549607673E-25, -5.001307006229815E-29,
    2.9234616420394369E-27, -7.3372627735809734E-26, 9.6978563886575261E-25,
    -6.3976458551757164E-24, 1.6073455072306433E-23, -7.37463587795066E-25,
    -7.0522343048774666E-24, 1.4805755563608624E-23, -5.1965352404273039E-24,
    -8.5391792173019132E-29, 5.4962692899068422E-27, -1.5546891778194411E-25,
    2.6049795261751296E-24, -2.6172058881327836E-23, 1.2985982037510549E-22,
    -1.423772303418446E-22, -5.8282903661876709E-22, 4.1133508360308628E-22,
    -1.742659308147939E-22, 8.07786256209318E-23, -9.7738126735700558E-29,
    6.6212355845436972E-27, -1.7707072436748613E-25, 2.8057133511879665E-24,
    -3.4869970759687543E-23, 3.0241871214865029E-22, -9.92012310209099E-22,
    -3.2149566866116185E-21, 1.8710249707031661E-20, -1.2453541845369618E-21,
    -7.5062472154050874E-21, 2.8499865852964518E-22, -6.9207112182904389E-29,
    4.4179830835754724E-27, -4.4762524882779791E-26, -2.450817653228083E-24,
    7.1914140604820392E-23, -7.2673875098954476E-22, 3.3571441047866719E-21,
    -1.5906878744538782E-20, 1.0715370660853569E-19, -2.1813900762258771E-19,
    -3.7882773476137619E-19, 4.4188357957185649E-19, -5.2046323054922296E-20,
    -2.8170935396816464E-29, 7.8914114794548443E-28, 1.528966070127476E-25,
    -1.1332880987718864E-23, 3.3104475572268851E-22, -4.9647512138578754E-21,
    3.9715384015216385E-20, -1.6290821269847189E-19, 3.36612516663913E-19,
    -3.36275918384194E-19, -2.8323208988729979E-18, 1.5348780107717589E-17,
    -1.2231243924447674E-17, 1.5460269152965008E-18, -1.0350259940425787E-29,
    -4.7414043171551787E-28, 1.9707672417753685E-25, -1.4495788889042659E-23,
    5.1378340796211685E-22, -1.0210774519786583E-20, 1.165542649503511E-19,
    -7.1421779330877591E-19, 1.6365283191176908E-18, 4.9170568130837211E-18,
    -4.4186234291063853E-17, 1.6247947613884891E-16, -3.4187835062780104E-16,
    2.2495563268135524E-16, -2.8304172442233909E-17, -9.54190907880087E-30,
    4.33416352213585E-28, 7.30606772876727E-26, -8.4789175470441986E-24,
    3.9746370968729408E-22, -1.0350198533651566E-20, 1.589371276512773E-19,
    -1.3721089740423357E-18, 4.7868869804965763E-18, 1.9699426816042335E-17,
    -2.7595647699194014E-16, 1.2612122765846683E-15, -3.3199758280144047E-15,
    5.1284109097493322E-15, -2.9773954125181772E-15, 3.6686222388116938E-16,
    -7.13761114432792E-30, 8.6070327678610011E-28, -2.5253411261423782E-26,
    -1.429985806399278E-24, 1.4200678258817658E-22, -5.2901273901739912E-21,
    1.0879148930261737E-19, -1.2468905412479112E-18, 5.651703115185149E-18,
    4.073824764700649E-17, -7.7193016891576893E-16, 5.1280294092344238E-15,
    -1.8830251965098877E-14, 4.2082102420983456E-14, -5.4816521831539046E-14,
    2.9056289127761095E-14, -3.5049036301087839E-15, -2.7032712394278119E-30,
    4.4439845217679321E-28, -2.8561533629781625E-26, 7.4263493149653183E-25,
    7.7648205291611823E-24, -1.1313407629960782E-21, 3.4992489982228452E-20,
    -5.11237062122324E-19, 1.9082838069139238E-18, 6.02161124473958E-17,
    -1.1855133738581856E-15, 1.0647602057665829E-14, -5.5915318620809614E-14,
    1.8096099090326831E-13, -3.6385985586845819E-13, 4.2410069501559273E-13,
    -2.106362282048389E-13, 2.4385529408308407E-14, -4.8547818044528891E-31,
    9.5570081279537094E-29, -7.8572054752482576E-27, 3.3174769183447452E-25,
    -6.2142341258768858E-24, -5.0991712996566211E-23, 5.1392990708290932E-21,
    -8.807706142947147E-20, -5.8182766640448854E-19, 5.1419279154935842E-17,
    -1.04407697522146E-15, 1.1898094238539857E-14, -8.5367937011271162E-14,
    3.9513126620957262E-13, -1.1748533341492665E-12, 2.1917257282808794E-12,
    -2.3566809884820566E-12, 1.0795020408261728E-12, -1.5837465906955864E-13,
    -2.7533507225420422E-32, 5.7619182837708977E-30, -4.6471657116787863E-28,
    1.4048422360791874E-26, 3.7650962241144584E-25, -4.9228435831327322E-23,
    1.9071729205179347E-21, -3.3490783882201909E-20, -7.018689437542322E-20,
    1.8324124104655822E-17, -4.7883976550407734E-16, 7.0487303907715931E-15,
    -6.735734123826801E-14, 4.3114382655453385E-13, -1.8436618496422663E-12,
    5.1655481921478335E-12, -9.1498502333527442E-12, 9.53768065186612E-12,
    -5.5096965823391316E-12, -1.9256688414961511E-12, 2.6993907913031997E-33,
    -8.3658508533748674E-31, 1.2360111759498158E-28, -1.1391057286564071E-26,
    7.1943116140837765E-25, -3.2278401611187206E-23, 1.0313736180462972E-21,
    -2.2595952680170383E-20, 2.9013328570466337E-19, -1.4189880636575127E-19,
    -8.2575877751974837E-17, 1.9535524420193836E-15, -2.60333162544509E-14,
    2.2905798368369833E-13, -1.3730942326110817E-12, 5.5797967300488639E-12,
    -1.5044456366394642E-11, 2.5612747661164289E-11, -1.9627816796196334E-11,
    -2.8036172295220303E-11, -1.9615478304946413E-10, 3.8934925377973957E-34,
    -1.2639609126235819E-31, 1.9287682878359229E-29, -1.8332237204928374E-27,
    1.2092531131064511E-25, -5.8236835135326278E-24, 2.0915581782354698E-22,
    -5.5964099612773872E-21, 1.0833579869797173E-19, -1.3736666335311385E-18,
    6.6209633655847283E-18, 1.4362053626673917E-16, -4.0159095765450877E-15,
    5.320276578988179E-14, -4.5399145021925304E-13, 2.6343951113716903E-12,
    -1.0426603808524378E-11, 2.7378813158203465E-11, -2.4213032965198892E-11,
    -6.43589148489966E-11, 8.7111108876109732E-11, -1.58880825805031E-8,
    1.2049379324305816E-35, -4.3610770108214582E-33, 7.4936434757448969E-31,
    -8.1105245364317889E-29, 6.1705088386370215E-27, -3.480752271664829E-25,
    1.4948191338667704E-23, -4.9368146563727049E-22, 1.2499110582545291E-20,
    -2.3793207120554828E-19, 3.2322327482741956E-18, -2.6498507726404211E-17,
    7.8731033015748051E-18, 3.2775331491296092E-15, -5.1807698267687295E-14,
    4.62732644627914E-13, -2.7239785524170987E-12, 1.0896716883650769E-11,
    -1.8645986337651637E-11, 2.5459617591435155E-12, -1.3347654837468073E-8,
    1.3161132276731047E-7, -1.3227534741608429E-6, -9.7984625010885519E-38,
    3.2900432333335651E-35, -4.4581754057254838E-33, 2.5824817729473294E-31,
    5.2049615357860253E-30, -2.1583876518311414E-27, 1.9476950757610683E-25,
    -1.0716316264212252E-23, 4.1440657240625748E-22, -1.1817624319451798E-20,
    2.5249339155046378E-19, -4.0233948389965105E-18, 4.64169135391771E-17,
    -3.5476759515651092E-16, 1.1999262837080123E-15, 8.516412269170767E-15,
    -1.527199343162684E-13, 1.1449867637138848E-12, -3.6599461401055181E-12,
    -4.6103940452468584E-11, -4.7424213964325014E-9, 1.4095535848735113E-8,
    1.1415162393763462E-5, -0.00011904761791914855, -7.7487127476207258E-39,
    3.1576790378728681E-36, -5.9250135047007422E-34, 6.7643789484475193E-32,
    -5.220570875188387E-30, 2.8506788574160792E-28, -1.1098370767710674E-26,
    2.9468645436878283E-25, -4.2328657438375513E-24, -3.3901276335768838E-23,
    3.8407990599986091E-21, -1.1933448342985106E-19, 2.3702576054378613E-18,
    -3.3709086299905129E-17, 3.5240422748635714E-16, -2.688297081936284E-15,
    1.4426938768292247E-14, -4.5785087028675909E-14, 1.6710103243486247E-14,
    -1.1024143067873009E-11, -3.3079062392811025E-10, 2.8376658214791753E-8,
    2.8265347449301076E-6, 3.9682541488440042E-5, -0.016666666666889381,
    -8.6841596356231729E-42, 3.1939131296905081E-39, -4.8490390875687847E-37,
    3.2729122440862841E-35, 5.3980586162289553E-34, -3.3686936226391223E-31,
    3.7197707807256541E-29, -2.5380412938111731E-27, 1.2494404817163045E-25,
    -4.6966036280739172E-24, 1.3852307187625331E-22, -3.2509821682467773E-21,
    6.1100085267801761E-20, -9.20594856358596E-19, 1.1081925404564449E-17,
    -1.0575868027372313E-16, 7.920139233623936E-16, -4.5514965597202215E-15,
    1.3296256931854534E-14, -3.345171633728989E-13, 1.7101904098836834E-11,
    2.4300392651460408E-9, 4.6155748216027864E-8, -1.5460729722609369E-5,
    -0.00238095238099261, 1.0000000000000047 };

  const real_T *c;
  for (full_loop_B.i_du = 0; full_loop_B.i_du < 20; full_loop_B.i_du++) {
    full_loop_B.u_p[full_loop_B.i_du] = x[full_loop_B.i_du] - y[full_loop_B.i_du];
    full_loop_B.v_l[full_loop_B.i_du] = x[full_loop_B.i_du] + y[full_loop_B.i_du];
  }

  c = &tmp[0];
  full_loop_B.n_a = 351;
  full_loop_power(full_loop_B.u_p, full_loop_B.dadr);
  full_loop_repmat(full_loop_B.dadr, full_loop_B.dv);
  for (full_loop_B.b_k_i = 0; full_loop_B.b_k_i < 20; full_loop_B.b_k_i++) {
    full_loop_B.x[full_loop_B.b_k_i] = 1.0;
  }

  std::memcpy(&full_loop_B.x[20], &full_loop_B.dv[0], 500U * sizeof(real_T));
  for (full_loop_B.b_k_i = 0; full_loop_B.b_k_i < 25; full_loop_B.b_k_i++) {
    full_loop_B.b_subsb_idx_1 = full_loop_B.b_k_i + 1;
    for (full_loop_B.i_du = 0; full_loop_B.i_du < 20; full_loop_B.i_du++) {
      full_loop_B.x_tmp_f = 20 * full_loop_B.b_subsb_idx_1 + full_loop_B.i_du;
      full_loop_B.x[full_loop_B.x_tmp_f] *= full_loop_B.x[20 * full_loop_B.b_k_i
        + full_loop_B.i_du];
    }
  }

  full_loop_power(full_loop_B.v_l, full_loop_B.dadr);
  full_loop_repmat(full_loop_B.dadr, full_loop_B.dv);
  for (full_loop_B.b_k_i = 0; full_loop_B.b_k_i < 20; full_loop_B.b_k_i++) {
    full_loop_B.x_p[full_loop_B.b_k_i] = 1.0;
  }

  std::memcpy(&full_loop_B.x_p[20], &full_loop_B.dv[0], 500U * sizeof(real_T));
  for (full_loop_B.b_k_i = 0; full_loop_B.b_k_i < 25; full_loop_B.b_k_i++) {
    full_loop_B.b_subsb_idx_1 = full_loop_B.b_k_i + 1;
    for (full_loop_B.i_du = 0; full_loop_B.i_du < 20; full_loop_B.i_du++) {
      full_loop_B.x_tmp_f = 20 * full_loop_B.b_subsb_idx_1 + full_loop_B.i_du;
      full_loop_B.x_p[full_loop_B.x_tmp_f] *= full_loop_B.x_p[20 *
        full_loop_B.b_k_i + full_loop_B.i_du];
    }
  }

  std::memset(&a[0], 0, 20U * sizeof(real_T));
  std::memset(&full_loop_B.dadr[0], 0, 20U * sizeof(real_T));
  std::memset(&dady[0], 0, 20U * sizeof(real_T));
  full_loop_B.i_c = 0.0;
  full_loop_B.j_g = 0.0;
  while (full_loop_B.n_a > 0) {
    full_loop_B.c_tmp_b = c[full_loop_B.n_a - 1];
    full_loop_B.b_subsb_idx_1 = static_cast<int32_T>(full_loop_B.i_c + 1.0);
    full_loop_B.x_tmp_f = static_cast<int32_T>(full_loop_B.j_g + 1.0);
    for (full_loop_B.b_k_i = 0; full_loop_B.b_k_i < 20; full_loop_B.b_k_i++) {
      a[full_loop_B.b_k_i] += full_loop_B.x[(full_loop_B.b_subsb_idx_1 - 1) * 20
        + full_loop_B.b_k_i] * full_loop_B.c_tmp_b * full_loop_B.x_p
        [(full_loop_B.x_tmp_f - 1) * 20 + full_loop_B.b_k_i];
    }

    if (full_loop_B.i_c > 0.0) {
      full_loop_B.i_iu = (full_loop_B.i_c + 1.0) * full_loop_B.c_tmp_b;
      full_loop_B.i_du = static_cast<int32_T>(full_loop_B.i_c);
      for (full_loop_B.b_k_i = 0; full_loop_B.b_k_i < 20; full_loop_B.b_k_i++) {
        full_loop_B.dadr[full_loop_B.b_k_i] += full_loop_B.x[(full_loop_B.i_du -
          1) * 20 + full_loop_B.b_k_i] * full_loop_B.i_iu * full_loop_B.x_p
          [(full_loop_B.x_tmp_f - 1) * 20 + full_loop_B.b_k_i];
      }
    }

    if (full_loop_B.j_g > 0.0) {
      full_loop_B.c_tmp_b *= full_loop_B.j_g + 1.0;
      full_loop_B.i_du = static_cast<int32_T>(full_loop_B.j_g);
      for (full_loop_B.b_k_i = 0; full_loop_B.b_k_i < 20; full_loop_B.b_k_i++) {
        dady[full_loop_B.b_k_i] += full_loop_B.x[(full_loop_B.b_subsb_idx_1 - 1)
          * 20 + full_loop_B.b_k_i] * full_loop_B.c_tmp_b * full_loop_B.x_p
          [(full_loop_B.i_du - 1) * 20 + full_loop_B.b_k_i];
      }
    }

    full_loop_B.j_g++;
    if (full_loop_B.i_c + full_loop_B.j_g > 25.0) {
      full_loop_B.i_c++;
      full_loop_B.j_g = 0.0;
    }

    full_loop_B.n_a--;
  }

  for (full_loop_B.i_du = 0; full_loop_B.i_du < 20; full_loop_B.i_du++) {
    full_loop_B.i_c = dady[full_loop_B.i_du] * full_loop_B.v_l[full_loop_B.i_du];
    full_loop_B.j_g = full_loop_B.dadr[full_loop_B.i_du] *
      full_loop_B.u_p[full_loop_B.i_du];
    dadx[full_loop_B.i_du] = (2.0 * full_loop_B.v_l[full_loop_B.i_du] *
      (full_loop_B.i_c + full_loop_B.j_g) + a[full_loop_B.i_du]) * 3.0;
    dady[full_loop_B.i_du] = (2.0 * full_loop_B.v_l[full_loop_B.i_du] *
      (full_loop_B.i_c - full_loop_B.j_g) + a[full_loop_B.i_du]) * 3.0;
    full_loop_B.dadr[full_loop_B.i_du] = full_loop_B.j_g;
    a[full_loop_B.i_du] *= 3.0 * full_loop_B.v_l[full_loop_B.i_du];
  }
}

void full_loopModelClass::full_loop_fresnelg1(const real_T a[20], const real_T
  d[20], const real_T c[20], creal_T z[20], creal_T dz[20])
{
  boolean_T exitg1;
  for (full_loop_B.i_pr = 0; full_loop_B.i_pr < 20; full_loop_B.i_pr++) {
    z[full_loop_B.i_pr].re = 0.0;
    z[full_loop_B.i_pr].im = 0.0;
    dz[full_loop_B.i_pr].re = 0.0;
    dz[full_loop_B.i_pr].im = 0.0;
    full_loop_B.d_n[full_loop_B.i_pr] = d[full_loop_B.i_pr] - a[full_loop_B.i_pr];
  }

  full_loop_power(full_loop_B.d_n, full_loop_B.x_h);
  for (full_loop_B.i_pr = 0; full_loop_B.i_pr < 20; full_loop_B.i_pr++) {
    full_loop_B.x_gy = full_loop_B.x_h[full_loop_B.i_pr] / (4.0 *
      a[full_loop_B.i_pr]);
    full_loop_B.criteria_b[full_loop_B.i_pr] = (std::abs(full_loop_B.x_gy) <
      628.31853071795865);
    full_loop_B.x_h[full_loop_B.i_pr] = full_loop_B.x_gy;
  }

  full_loop_B.idx_hu = 0;
  full_loop_B.b_ii_h = 1;
  exitg1 = false;
  while ((!exitg1) && (full_loop_B.b_ii_h - 1 < 20)) {
    if (full_loop_B.criteria_b[full_loop_B.b_ii_h - 1]) {
      full_loop_B.idx_hu++;
      full_loop_B.ii_data_in[full_loop_B.idx_hu - 1] = full_loop_B.b_ii_h;
      if (full_loop_B.idx_hu >= 20) {
        exitg1 = true;
      } else {
        full_loop_B.b_ii_h++;
      }
    } else {
      full_loop_B.b_ii_h++;
    }
  }

  if (1 > full_loop_B.idx_hu) {
    full_loop_B.idx_hu = 0;
  }

  for (full_loop_B.b_ii_h = 0; full_loop_B.b_ii_h < full_loop_B.idx_hu;
       full_loop_B.b_ii_h++) {
    full_loop_B.ilarge_data_n0[full_loop_B.b_ii_h] =
      full_loop_B.ii_data_in[full_loop_B.b_ii_h];
  }

  full_loop_B.i_pr = 0;
  full_loop_B.b_ii_h = 1;
  exitg1 = false;
  while ((!exitg1) && (full_loop_B.b_ii_h - 1 < 20)) {
    if (!full_loop_B.criteria_b[full_loop_B.b_ii_h - 1]) {
      full_loop_B.i_pr++;
      full_loop_B.ii_data_in[full_loop_B.i_pr - 1] = full_loop_B.b_ii_h;
      if (full_loop_B.i_pr >= 20) {
        exitg1 = true;
      } else {
        full_loop_B.b_ii_h++;
      }
    } else {
      full_loop_B.b_ii_h++;
    }
  }

  if (1 > full_loop_B.i_pr) {
    full_loop_B.i_pr = 0;
  }

  for (full_loop_B.b_ii_h = 0; full_loop_B.b_ii_h < full_loop_B.i_pr;
       full_loop_B.b_ii_h++) {
    full_loop_B.ismall_data_f[full_loop_B.b_ii_h] =
      full_loop_B.ii_data_in[full_loop_B.b_ii_h];
  }

  full_loop_B.idx_dl = 0;
  full_loop_B.b_ii_h = 1;
  exitg1 = false;
  while ((!exitg1) && (full_loop_B.b_ii_h - 1 < 20)) {
    full_loop_B.ii_b = full_loop_B.b_ii_h - 1;
    if ((d[full_loop_B.ii_b] == 0.0) && (a[full_loop_B.ii_b] == 0.0)) {
      full_loop_B.idx_dl++;
      full_loop_B.ii_data_in[full_loop_B.idx_dl - 1] = full_loop_B.ii_b + 1;
      if (full_loop_B.idx_dl >= 20) {
        exitg1 = true;
      } else {
        full_loop_B.b_ii_h++;
      }
    } else {
      full_loop_B.b_ii_h++;
    }
  }

  if (1 > full_loop_B.idx_dl) {
    full_loop_B.idx_dl = 0;
  }

  for (full_loop_B.b_ii_h = 0; full_loop_B.b_ii_h < full_loop_B.idx_dl;
       full_loop_B.b_ii_h++) {
    full_loop_B.izero_data_eu[full_loop_B.b_ii_h] =
      full_loop_B.ii_data_in[full_loop_B.b_ii_h];
  }

  if (full_loop_B.idx_hu != 0) {
    full_loop_B.a_size_lt = full_loop_B.idx_hu;
    full_loop_B.d_size_oy = full_loop_B.idx_hu;
    full_loop_B.c_size_dd = full_loop_B.idx_hu;
    for (full_loop_B.b_ii_h = 0; full_loop_B.b_ii_h < full_loop_B.idx_hu;
         full_loop_B.b_ii_h++) {
      full_loop_B.d_n[full_loop_B.b_ii_h] =
        a[full_loop_B.ilarge_data_n0[full_loop_B.b_ii_h] - 1];
      full_loop_B.x_h[full_loop_B.b_ii_h] =
        d[full_loop_B.ilarge_data_n0[full_loop_B.b_ii_h] - 1];
      full_loop_B.c_data_f[full_loop_B.b_ii_h] =
        c[full_loop_B.ilarge_data_n0[full_loop_B.b_ii_h] - 1];
    }

    full_loop_fresnelgLargea1(full_loop_B.d_n, &full_loop_B.a_size_lt,
      full_loop_B.x_h, &full_loop_B.d_size_oy, full_loop_B.c_data_f,
      &full_loop_B.c_size_dd, full_loop_B.q_data_p, &full_loop_B.q_size_c,
      full_loop_B.r_data_d, &full_loop_B.r_size_b);
    full_loop_B.idx_hu = full_loop_B.q_size_c;
    for (full_loop_B.b_ii_h = 0; full_loop_B.b_ii_h < full_loop_B.idx_hu;
         full_loop_B.b_ii_h++) {
      z[full_loop_B.ilarge_data_n0[full_loop_B.b_ii_h] - 1] =
        full_loop_B.q_data_p[full_loop_B.b_ii_h];
    }

    full_loop_B.idx_hu = full_loop_B.r_size_b;
    for (full_loop_B.b_ii_h = 0; full_loop_B.b_ii_h < full_loop_B.idx_hu;
         full_loop_B.b_ii_h++) {
      dz[full_loop_B.ilarge_data_n0[full_loop_B.b_ii_h] - 1] =
        full_loop_B.r_data_d[full_loop_B.b_ii_h];
    }
  }

  if (full_loop_B.i_pr != 0) {
    full_loop_B.a_size_m = full_loop_B.i_pr;
    full_loop_B.d_size_nr = full_loop_B.i_pr;
    full_loop_B.c_size_me = full_loop_B.i_pr;
    for (full_loop_B.b_ii_h = 0; full_loop_B.b_ii_h < full_loop_B.i_pr;
         full_loop_B.b_ii_h++) {
      full_loop_B.d_n[full_loop_B.b_ii_h] =
        a[full_loop_B.ismall_data_f[full_loop_B.b_ii_h] - 1];
      full_loop_B.x_h[full_loop_B.b_ii_h] =
        d[full_loop_B.ismall_data_f[full_loop_B.b_ii_h] - 1];
      full_loop_B.c_data_f[full_loop_B.b_ii_h] =
        c[full_loop_B.ismall_data_f[full_loop_B.b_ii_h] - 1];
    }

    full_loop_fresnelgSmalla1(full_loop_B.d_n, &full_loop_B.a_size_m,
      full_loop_B.x_h, &full_loop_B.d_size_nr, full_loop_B.c_data_f,
      &full_loop_B.c_size_me, full_loop_B.q_data_p, &full_loop_B.q_size_c,
      full_loop_B.r_data_d, &full_loop_B.r_size_b);
    full_loop_B.idx_hu = full_loop_B.q_size_c;
    for (full_loop_B.b_ii_h = 0; full_loop_B.b_ii_h < full_loop_B.idx_hu;
         full_loop_B.b_ii_h++) {
      z[full_loop_B.ismall_data_f[full_loop_B.b_ii_h] - 1] =
        full_loop_B.q_data_p[full_loop_B.b_ii_h];
    }

    full_loop_B.idx_hu = full_loop_B.r_size_b;
    for (full_loop_B.b_ii_h = 0; full_loop_B.b_ii_h < full_loop_B.idx_hu;
         full_loop_B.b_ii_h++) {
      dz[full_loop_B.ismall_data_f[full_loop_B.b_ii_h] - 1] =
        full_loop_B.r_data_d[full_loop_B.b_ii_h];
    }
  }

  if (full_loop_B.idx_dl != 0) {
    full_loop_B.q_size_c = full_loop_B.idx_dl;
    for (full_loop_B.b_ii_h = 0; full_loop_B.b_ii_h < full_loop_B.idx_dl;
         full_loop_B.b_ii_h++) {
      full_loop_B.x_gy = c[full_loop_B.izero_data_eu[full_loop_B.b_ii_h] - 1];
      full_loop_B.q_data_p[full_loop_B.b_ii_h].re = full_loop_B.x_gy * 0.0;
      full_loop_B.q_data_p[full_loop_B.b_ii_h].im = full_loop_B.x_gy;
      full_loop_B.ii_data_in[full_loop_B.b_ii_h] =
        full_loop_B.izero_data_eu[full_loop_B.b_ii_h];
    }

    full_loop_exp_p(full_loop_B.q_data_p, &full_loop_B.q_size_c);
    full_loop_B.idx_hu = full_loop_B.q_size_c;
    for (full_loop_B.b_ii_h = 0; full_loop_B.b_ii_h < full_loop_B.idx_hu;
         full_loop_B.b_ii_h++) {
      z[full_loop_B.izero_data_eu[full_loop_B.b_ii_h] - 1] =
        full_loop_B.q_data_p[full_loop_B.b_ii_h];
    }

    for (full_loop_B.b_ii_h = 0; full_loop_B.b_ii_h < full_loop_B.idx_dl;
         full_loop_B.b_ii_h++) {
      dz[full_loop_B.ii_data_in[full_loop_B.b_ii_h] - 1].re = 0.0;
      dz[full_loop_B.ii_data_in[full_loop_B.b_ii_h] - 1].im = 0.0;
    }
  }
}

void full_loopModelClass::full_loop_clothoidG1fit2wp(const creal_T z0[20], const
  real_T theta0[20], const creal_T z1[20], const real_T theta1[20], real_T k0[20],
  real_T k1[20], real_T l[20], real_T dk0_dtheta0[20], real_T dk0_dtheta1[20],
  real_T dk1_dtheta0[20], real_T dk1_dtheta1[20])
{
  for (full_loop_B.b_k_c = 0; full_loop_B.b_k_c < 20; full_loop_B.b_k_c++) {
    full_loop_B.z_dk.re = z1[full_loop_B.b_k_c].re - z0[full_loop_B.b_k_c].re;
    full_loop_B.z_dk.im = z1[full_loop_B.b_k_c].im - z0[full_loop_B.b_k_c].im;
    full_loop_B.phi_f = rt_atan2d_snf(full_loop_B.z_dk.im, full_loop_B.z_dk.re);
    full_loop_B.b_x_tmp = theta0[full_loop_B.b_k_c] - full_loop_B.phi_f;
    full_loop_B.b_x_n.re = full_loop_B.b_x_tmp * 0.0;
    if (full_loop_B.b_x_tmp == 0.0) {
      full_loop_B.a_re_b = std::exp(full_loop_B.b_x_n.re);
      full_loop_B.b_x_tmp = 0.0;
    } else if (rtIsInf(full_loop_B.b_x_tmp) && rtIsInf(full_loop_B.b_x_n.re) &&
               (full_loop_B.b_x_n.re < 0.0)) {
      full_loop_B.a_re_b = 0.0;
      full_loop_B.b_x_tmp = 0.0;
    } else {
      full_loop_B.r_p = std::exp(full_loop_B.b_x_n.re / 2.0);
      full_loop_B.a_re_b = full_loop_B.r_p * std::cos(full_loop_B.b_x_tmp) *
        full_loop_B.r_p;
      full_loop_B.b_x_tmp = full_loop_B.r_p * std::sin(full_loop_B.b_x_tmp) *
        full_loop_B.r_p;
    }

    full_loop_B.phi0[full_loop_B.b_k_c] = rt_atan2d_snf(full_loop_B.b_x_tmp,
      full_loop_B.a_re_b);
    full_loop_B.b_x_tmp = theta1[full_loop_B.b_k_c] - full_loop_B.phi_f;
    full_loop_B.b_x_n.re = full_loop_B.b_x_tmp * 0.0;
    full_loop_B.b_x_n.im = full_loop_B.b_x_tmp;
    full_loop_B.z_i[full_loop_B.b_k_c] = full_loop_B.z_dk;
    full_loop_B.b_x[full_loop_B.b_k_c] = full_loop_B.b_x_n;
  }

  for (full_loop_B.b_k_c = 0; full_loop_B.b_k_c < 20; full_loop_B.b_k_c++) {
    if (full_loop_B.b_x[full_loop_B.b_k_c].im == 0.0) {
      full_loop_B.a_re_b = std::exp(full_loop_B.b_x[full_loop_B.b_k_c].re);
      full_loop_B.b_x_tmp = 0.0;
    } else if (rtIsInf(full_loop_B.b_x[full_loop_B.b_k_c].im) && rtIsInf
               (full_loop_B.b_x[full_loop_B.b_k_c].re) &&
               (full_loop_B.b_x[full_loop_B.b_k_c].re < 0.0)) {
      full_loop_B.a_re_b = 0.0;
      full_loop_B.b_x_tmp = 0.0;
    } else {
      full_loop_B.r_p = std::exp(full_loop_B.b_x[full_loop_B.b_k_c].re / 2.0);
      full_loop_B.a_re_b = full_loop_B.r_p * std::cos
        (full_loop_B.b_x[full_loop_B.b_k_c].im) * full_loop_B.r_p;
      full_loop_B.b_x_tmp = full_loop_B.r_p * std::sin
        (full_loop_B.b_x[full_loop_B.b_k_c].im) * full_loop_B.r_p;
    }

    full_loop_B.b_x_g.re = full_loop_B.a_re_b;
    full_loop_B.b_x_g.im = full_loop_B.b_x_tmp;
    full_loop_B.phi_f = rt_atan2d_snf(full_loop_B.b_x_tmp, full_loop_B.a_re_b);
    k1[full_loop_B.b_k_c] = full_loop_B.phi_f -
      full_loop_B.phi0[full_loop_B.b_k_c];
    full_loop_B.b_x[full_loop_B.b_k_c] = full_loop_B.b_x_g;
    full_loop_B.phi1[full_loop_B.b_k_c] = full_loop_B.phi_f;
  }

  full_loop_fetchAgrad(full_loop_B.phi0, full_loop_B.phi1, full_loop_B.phi,
                       full_loop_B.da_dphi0, full_loop_B.da_dphi1);
  full_loop_fresnelg1(full_loop_B.phi, k1, full_loop_B.phi0, full_loop_B.b_x,
                      full_loop_B.df_da);
  for (full_loop_B.b_k_c = 0; full_loop_B.b_k_c < 20; full_loop_B.b_k_c++) {
    full_loop_B.a_re_b = full_loop_rt_hypotd_snf
      (full_loop_B.z_i[full_loop_B.b_k_c].re, full_loop_B.z_i[full_loop_B.b_k_c]
       .im);
    full_loop_B.phi_f = full_loop_B.a_re_b / full_loop_B.b_x[full_loop_B.b_k_c].
      re;
    full_loop_B.z_l.re = full_loop_B.b_x[full_loop_B.b_k_c].re *
      full_loop_B.b_x[full_loop_B.b_k_c].re - full_loop_B.b_x[full_loop_B.b_k_c]
      .im * full_loop_B.b_x[full_loop_B.b_k_c].im;
    full_loop_B.b_x_tmp = full_loop_B.b_x[full_loop_B.b_k_c].re *
      full_loop_B.b_x[full_loop_B.b_k_c].im;
    full_loop_B.z_l.im = full_loop_B.b_x_tmp + full_loop_B.b_x_tmp;
    if (full_loop_B.z_l.im == 0.0) {
      if (full_loop_B.df_da[full_loop_B.b_k_c].im == 0.0) {
        full_loop_B.b_x_tmp = full_loop_B.df_da[full_loop_B.b_k_c].re /
          full_loop_B.z_l.re;
      } else if (full_loop_B.df_da[full_loop_B.b_k_c].re == 0.0) {
        full_loop_B.b_x_tmp = 0.0;
      } else {
        full_loop_B.b_x_tmp = full_loop_B.df_da[full_loop_B.b_k_c].re /
          full_loop_B.z_l.re;
      }
    } else if (full_loop_B.z_l.re == 0.0) {
      if (full_loop_B.df_da[full_loop_B.b_k_c].re == 0.0) {
        full_loop_B.b_x_tmp = full_loop_B.df_da[full_loop_B.b_k_c].im /
          full_loop_B.z_l.im;
      } else if (full_loop_B.df_da[full_loop_B.b_k_c].im == 0.0) {
        full_loop_B.b_x_tmp = 0.0;
      } else {
        full_loop_B.b_x_tmp = full_loop_B.df_da[full_loop_B.b_k_c].im /
          full_loop_B.z_l.im;
      }
    } else {
      full_loop_B.b_x_tmp = std::abs(full_loop_B.z_l.re);
      full_loop_B.r_p = std::abs(full_loop_B.z_l.im);
      if (full_loop_B.b_x_tmp > full_loop_B.r_p) {
        full_loop_B.b_x_tmp = full_loop_B.z_l.im / full_loop_B.z_l.re;
        full_loop_B.b_x_tmp = (full_loop_B.b_x_tmp *
          full_loop_B.df_da[full_loop_B.b_k_c].im +
          full_loop_B.df_da[full_loop_B.b_k_c].re) / (full_loop_B.b_x_tmp *
          full_loop_B.z_l.im + full_loop_B.z_l.re);
      } else if (full_loop_B.r_p == full_loop_B.b_x_tmp) {
        full_loop_B.b_x_tmp = ((full_loop_B.z_l.re > 0.0 ? 0.5 : -0.5) *
          full_loop_B.df_da[full_loop_B.b_k_c].re + (full_loop_B.z_l.im > 0.0 ?
          0.5 : -0.5) * full_loop_B.df_da[full_loop_B.b_k_c].im) /
          full_loop_B.b_x_tmp;
      } else {
        full_loop_B.b_x_tmp = full_loop_B.z_l.re / full_loop_B.z_l.im;
        full_loop_B.b_x_tmp = (full_loop_B.b_x_tmp *
          full_loop_B.df_da[full_loop_B.b_k_c].re +
          full_loop_B.df_da[full_loop_B.b_k_c].im) / (full_loop_B.b_x_tmp *
          full_loop_B.z_l.re + full_loop_B.z_l.im);
      }
    }

    full_loop_B.a_re_b = -full_loop_B.a_re_b * full_loop_B.b_x_tmp;
    full_loop_B.b_x_tmp = full_loop_rt_powd_snf(full_loop_B.phi_f, 2.0);
    full_loop_B.r_p = k1[full_loop_B.b_k_c] - full_loop_B.phi[full_loop_B.b_k_c];
    full_loop_B.dk1_dtheta0 = -full_loop_B.a_re_b *
      full_loop_B.da_dphi0[full_loop_B.b_k_c];
    full_loop_B.dk0_dtheta0 = full_loop_B.dk1_dtheta0 / full_loop_B.b_x_tmp *
      full_loop_B.r_p + (-1.0 - full_loop_B.da_dphi0[full_loop_B.b_k_c]) /
      full_loop_B.phi_f;
    full_loop_B.a_re_b = -full_loop_B.a_re_b *
      full_loop_B.da_dphi1[full_loop_B.b_k_c];
    full_loop_B.dk0_dtheta1 = full_loop_B.a_re_b / full_loop_B.b_x_tmp *
      full_loop_B.r_p + (1.0 - full_loop_B.da_dphi1[full_loop_B.b_k_c]) /
      full_loop_B.phi_f;
    full_loop_B.k1_i = k1[full_loop_B.b_k_c] + full_loop_B.phi[full_loop_B.b_k_c];
    full_loop_B.dk1_dtheta0 = full_loop_B.dk1_dtheta0 / full_loop_B.b_x_tmp *
      full_loop_B.k1_i + (full_loop_B.da_dphi0[full_loop_B.b_k_c] + -1.0) /
      full_loop_B.phi_f;
    full_loop_B.a_re_b = full_loop_B.a_re_b / full_loop_B.b_x_tmp *
      full_loop_B.k1_i + (full_loop_B.da_dphi1[full_loop_B.b_k_c] + 1.0) /
      full_loop_B.phi_f;
    if (full_loop_B.phi_f == 0.0) {
      full_loop_B.dk0_dtheta0 = 0.0;
      full_loop_B.dk0_dtheta1 = 0.0;
      full_loop_B.dk1_dtheta0 = 0.0;
      full_loop_B.a_re_b = 0.0;
    }

    full_loop_B.r_p /= full_loop_B.phi_f;
    full_loop_B.k1_i /= full_loop_B.phi_f;
    if (full_loop_B.phi_f == 0.0) {
      full_loop_B.r_p = 0.0;
      full_loop_B.k1_i = 0.0;
    }

    full_loop_B.z_i[full_loop_B.b_k_c] = full_loop_B.z_l;
    l[full_loop_B.b_k_c] = full_loop_B.phi_f;
    dk1_dtheta1[full_loop_B.b_k_c] = full_loop_B.a_re_b;
    dk0_dtheta0[full_loop_B.b_k_c] = full_loop_B.dk0_dtheta0;
    k1[full_loop_B.b_k_c] = full_loop_B.k1_i;
    k0[full_loop_B.b_k_c] = full_loop_B.r_p;
    dk1_dtheta0[full_loop_B.b_k_c] = full_loop_B.dk1_dtheta0;
    dk0_dtheta1[full_loop_B.b_k_c] = full_loop_B.dk0_dtheta1;
  }
}

void full_loopModelClass::full_loop_mulJt(const real_T Jtri[60], const real_T x
  [20], real_T y[20])
{
  int32_T y_tmp;
  full_loop_B.iv5[19] = 0;
  full_loop_B.iv6[0] = 19;
  full_loop_B.iv7[0] = 19;
  for (y_tmp = 0; y_tmp < 19; y_tmp++) {
    full_loop_B.iv5[y_tmp] = static_cast<int8_T>(y_tmp + 1);
    full_loop_B.iv6[y_tmp + 1] = static_cast<int8_T>(y_tmp);
    full_loop_B.iv7[y_tmp + 1] = static_cast<int8_T>(y_tmp);
  }

  for (y_tmp = 0; y_tmp < 20; y_tmp++) {
    y[y_tmp] = (Jtri[y_tmp + 20] * x[y_tmp] + Jtri[y_tmp] *
                x[full_loop_B.iv5[y_tmp]]) + Jtri[full_loop_B.iv6[y_tmp] + 40] *
      x[full_loop_B.iv7[y_tmp]];
  }
}

boolean_T full_loopModelClass::full_loop_any_p(const boolean_T x[20])
{
  boolean_T y;
  int32_T b_k;
  boolean_T exitg1;
  y = false;
  b_k = 0;
  exitg1 = false;
  while ((!exitg1) && (b_k <= 19)) {
    if (!x[b_k]) {
      b_k++;
    } else {
      y = true;
      exitg1 = true;
    }
  }

  return y;
}

void full_loopModelClass::full_loop_sympentdisolve(const real_T d[20], const
  real_T e[20], const real_T f[20], const real_T b[100], real_T x[100])
{
  int32_T i;
  int32_T z_tmp;
  std::memset(&x[0], 0, 100U * sizeof(real_T));
  std::memset(&full_loop_B.alpha_e[0], 0, 20U * sizeof(real_T));
  std::memset(&full_loop_B.b_gamma_d[0], 0, 19U * sizeof(real_T));
  std::memset(&full_loop_B.delta_c[0], 0, 18U * sizeof(real_T));
  full_loop_B.alpha_e[0] = d[0];
  full_loop_B.b_gamma_d[0] = e[0] / d[0];
  full_loop_B.delta_c[0] = f[0] / d[0];
  full_loop_B.alpha_e[1] = d[1] - e[0] * full_loop_B.b_gamma_d[0];
  full_loop_B.b_gamma_d[1] = (e[1] - f[0] * full_loop_B.b_gamma_d[0]) /
    full_loop_B.alpha_e[1];
  full_loop_B.delta_c[1] = f[1] / full_loop_B.alpha_e[1];
  for (full_loop_B.b_k_e = 0; full_loop_B.b_k_e < 16; full_loop_B.b_k_e++) {
    full_loop_B.alpha_tmp_o = full_loop_B.b_gamma_d[full_loop_B.b_k_e + 1];
    full_loop_B.alpha_e[full_loop_B.b_k_e + 2] = (d[full_loop_B.b_k_e + 2] -
      f[full_loop_B.b_k_e] * full_loop_B.delta_c[full_loop_B.b_k_e]) -
      full_loop_B.alpha_tmp_o * full_loop_B.alpha_tmp_o *
      full_loop_B.alpha_e[full_loop_B.b_k_e + 1];
    full_loop_B.b_gamma_tmp_b = full_loop_B.alpha_e[full_loop_B.b_k_e + 2];
    full_loop_B.b_gamma_d[full_loop_B.b_k_e + 2] = (e[full_loop_B.b_k_e + 2] -
      f[full_loop_B.b_k_e + 1] * full_loop_B.alpha_tmp_o) /
      full_loop_B.b_gamma_tmp_b;
    full_loop_B.delta_c[full_loop_B.b_k_e + 2] = f[full_loop_B.b_k_e + 2] /
      full_loop_B.b_gamma_tmp_b;
  }

  full_loop_B.alpha_e[18] = (d[18] - f[16] * full_loop_B.delta_c[16]) -
    full_loop_B.b_gamma_d[17] * full_loop_B.b_gamma_d[17] * full_loop_B.alpha_e
    [17];
  full_loop_B.b_gamma_d[18] = (e[18] - f[17] * full_loop_B.b_gamma_d[17]) /
    full_loop_B.alpha_e[18];
  full_loop_B.alpha_e[19] = (d[19] - f[17] * full_loop_B.delta_c[17]) -
    full_loop_B.b_gamma_d[18] * full_loop_B.b_gamma_d[18] * full_loop_B.alpha_e
    [18];
  std::memset(&full_loop_B.z[0], 0, 100U * sizeof(real_T));
  for (full_loop_B.b_k_e = 0; full_loop_B.b_k_e < 5; full_loop_B.b_k_e++) {
    full_loop_B.z[20 * full_loop_B.b_k_e] = b[20 * full_loop_B.b_k_e];
    z_tmp = 20 * full_loop_B.b_k_e + 1;
    full_loop_B.z[z_tmp] = b[z_tmp] - full_loop_B.z[20 * full_loop_B.b_k_e] *
      full_loop_B.b_gamma_d[0];
  }

  for (full_loop_B.c_k = 0; full_loop_B.c_k < 18; full_loop_B.c_k++) {
    full_loop_B.alpha_tmp_o = full_loop_B.b_gamma_d[full_loop_B.c_k + 1];
    full_loop_B.b_k_e = full_loop_B.c_k + 2;
    z_tmp = full_loop_B.c_k + 1;
    for (full_loop_B.k_o = 0; full_loop_B.k_o < 5; full_loop_B.k_o++) {
      full_loop_B.b_d0[full_loop_B.k_o] = (b[(20 * full_loop_B.k_o +
        full_loop_B.c_k) + 2] - full_loop_B.z[(20 * full_loop_B.k_o +
        full_loop_B.b_k_e) - 1] * full_loop_B.alpha_tmp_o) - full_loop_B.z[(20 *
        full_loop_B.k_o + z_tmp) - 1] * full_loop_B.delta_c[full_loop_B.c_k];
    }

    for (full_loop_B.b_k_e = 0; full_loop_B.b_k_e < 5; full_loop_B.b_k_e++) {
      full_loop_B.z[(full_loop_B.c_k + 20 * full_loop_B.b_k_e) + 2] =
        full_loop_B.b_d0[full_loop_B.b_k_e];
    }
  }

  for (full_loop_B.b_k_e = 0; full_loop_B.b_k_e < 5; full_loop_B.b_k_e++) {
    for (full_loop_B.k_o = 0; full_loop_B.k_o < 20; full_loop_B.k_o++) {
      z_tmp = 20 * full_loop_B.b_k_e + full_loop_B.k_o;
      full_loop_B.c[z_tmp] = full_loop_B.z[z_tmp] /
        full_loop_B.alpha_e[full_loop_B.k_o];
    }

    full_loop_B.k_o = 20 * full_loop_B.b_k_e + 19;
    x[full_loop_B.k_o] = full_loop_B.c[full_loop_B.k_o];
    z_tmp = 20 * full_loop_B.b_k_e + 18;
    full_loop_B.b_d0[full_loop_B.b_k_e] = full_loop_B.c[z_tmp] -
      x[full_loop_B.k_o] * full_loop_B.b_gamma_d[18];
    x[z_tmp] = full_loop_B.b_d0[full_loop_B.b_k_e];
  }

  for (full_loop_B.c_k = 0; full_loop_B.c_k < 18; full_loop_B.c_k++) {
    full_loop_B.b_k_e = 18 - full_loop_B.c_k;
    full_loop_B.alpha_tmp_o = full_loop_B.b_gamma_d[17 - full_loop_B.c_k];
    z_tmp = 19 - full_loop_B.c_k;
    full_loop_B.b_gamma_tmp_b = full_loop_B.delta_c[17 - full_loop_B.c_k];
    full_loop_B.k_o = 20 - full_loop_B.c_k;
    full_loop_B.i9 = 18 - full_loop_B.c_k;
    for (i = 0; i < 5; i++) {
      full_loop_B.b_d0[i] = (full_loop_B.c[(20 * i + full_loop_B.b_k_e) - 1] -
        x[(20 * i + z_tmp) - 1] * full_loop_B.alpha_tmp_o) - x[(20 * i +
        full_loop_B.k_o) - 1] * full_loop_B.b_gamma_tmp_b;
    }

    for (full_loop_B.b_k_e = 0; full_loop_B.b_k_e < 5; full_loop_B.b_k_e++) {
      x[(full_loop_B.i9 + 20 * full_loop_B.b_k_e) - 1] =
        full_loop_B.b_d0[full_loop_B.b_k_e];
    }
  }
}

void full_loopModelClass::full_loop_cycsympentdisolve(const real_T d[20], const
  real_T e[20], const real_T f[20], const real_T b[20], real_T x[20])
{
  static const int8_T tmp[80] = { 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 };

  for (full_loop_B.i8 = 0; full_loop_B.i8 < 80; full_loop_B.i8++) {
    full_loop_B.dv3[full_loop_B.i8] = tmp[full_loop_B.i8];
  }

  std::memcpy(&full_loop_B.dv3[80], &b[0], 20U * sizeof(real_T));
  full_loop_sympentdisolve(d, e, f, full_loop_B.dv3, full_loop_B.zy);
  std::memset(&full_loop_B.v_c[0], 0, 80U * sizeof(real_T));
  full_loop_B.v_c[18] = f[18];
  full_loop_B.v_c[19] = e[19];
  full_loop_B.v_c[39] = f[19];
  full_loop_B.v_c[40] = f[18];
  full_loop_B.v_c[60] = e[19];
  full_loop_B.v_c[61] = f[19];
  for (full_loop_B.i8 = 0; full_loop_B.i8 < 16; full_loop_B.i8++) {
    full_loop_B.b_I_g[full_loop_B.i8] = 0;
  }

  full_loop_B.b_I_g[0] = 1;
  full_loop_B.b_I_g[5] = 1;
  full_loop_B.b_I_g[10] = 1;
  full_loop_B.b_I_g[15] = 1;
  for (full_loop_B.i8 = 0; full_loop_B.i8 < 20; full_loop_B.i8++) {
    full_loop_B.x_tmp_tmp = full_loop_B.i8 << 2;
    full_loop_B.x_tmp[full_loop_B.x_tmp_tmp] = full_loop_B.v_c[full_loop_B.i8];
    full_loop_B.x_tmp[full_loop_B.x_tmp_tmp + 1] =
      full_loop_B.v_c[full_loop_B.i8 + 20];
    full_loop_B.x_tmp[full_loop_B.x_tmp_tmp + 2] =
      full_loop_B.v_c[full_loop_B.i8 + 40];
    full_loop_B.x_tmp[full_loop_B.x_tmp_tmp + 3] =
      full_loop_B.v_c[full_loop_B.i8 + 60];
  }

  for (full_loop_B.i8 = 0; full_loop_B.i8 < 4; full_loop_B.i8++) {
    full_loop_B.dv26[full_loop_B.i8] = 0.0;
    for (full_loop_B.x_tmp_tmp = 0; full_loop_B.x_tmp_tmp < 20;
         full_loop_B.x_tmp_tmp++) {
      full_loop_B.dv26[full_loop_B.i8] += full_loop_B.x_tmp
        [(full_loop_B.x_tmp_tmp << 2) + full_loop_B.i8] *
        full_loop_B.zy[full_loop_B.x_tmp_tmp + 80];
    }

    for (full_loop_B.x_tmp_tmp = 0; full_loop_B.x_tmp_tmp < 4;
         full_loop_B.x_tmp_tmp++) {
      full_loop_B.d7 = 0.0;
      for (full_loop_B.b_I_tmp = 0; full_loop_B.b_I_tmp < 20;
           full_loop_B.b_I_tmp++) {
        full_loop_B.d7 += full_loop_B.x_tmp[(full_loop_B.b_I_tmp << 2) +
          full_loop_B.i8] * full_loop_B.zy[20 * full_loop_B.x_tmp_tmp +
          full_loop_B.b_I_tmp];
      }

      full_loop_B.b_I_tmp = (full_loop_B.x_tmp_tmp << 2) + full_loop_B.i8;
      full_loop_B.b_I[full_loop_B.b_I_tmp] = static_cast<real_T>
        (full_loop_B.b_I_g[full_loop_B.b_I_tmp]) + full_loop_B.d7;
    }
  }

  full_loop_mldivide_p4(full_loop_B.b_I, full_loop_B.dv26);
  for (full_loop_B.i8 = 0; full_loop_B.i8 < 20; full_loop_B.i8++) {
    x[full_loop_B.i8] = full_loop_B.zy[full_loop_B.i8 + 80] -
      (((full_loop_B.zy[full_loop_B.i8 + 20] * full_loop_B.dv26[1] +
         full_loop_B.zy[full_loop_B.i8] * full_loop_B.dv26[0]) +
        full_loop_B.zy[full_loop_B.i8 + 40] * full_loop_B.dv26[2]) +
       full_loop_B.zy[full_loop_B.i8 + 60] * full_loop_B.dv26[3]);
  }
}

void full_loopModelClass::full_loop_solveDampenedHessian(const real_T Jtri[60],
  real_T lambda, const real_T v[20], real_T dx[20])
{
  static const int8_T tmp[20] = { 19, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12,
    13, 14, 15, 16, 17, 18 };

  for (full_loop_B.b_k_nm = 0; full_loop_B.b_k_nm < 20; full_loop_B.b_k_nm++) {
    full_loop_B.d_l[full_loop_B.b_k_nm] = ((full_loop_rt_powd_snf
      (Jtri[full_loop_B.b_k_nm], 2.0) + full_loop_rt_powd_snf
      (Jtri[full_loop_B.b_k_nm + 20], 2.0)) + full_loop_rt_powd_snf
      (Jtri[tmp[full_loop_B.b_k_nm] + 40], 2.0)) * (lambda + 1.0);
  }

  for (full_loop_B.b_k_nm = 0; full_loop_B.b_k_nm < 19; full_loop_B.b_k_nm++) {
    full_loop_B.e_tmp_e = full_loop_B.b_k_nm + 1;
    full_loop_B.e_tmp[full_loop_B.b_k_nm] = static_cast<int8_T>
      (full_loop_B.e_tmp_e);
    full_loop_B.e_tmp_n[full_loop_B.b_k_nm] = static_cast<int8_T>
      (full_loop_B.e_tmp_e);
  }

  full_loop_B.e_tmp[19] = 0;
  for (full_loop_B.b_k_nm = 0; full_loop_B.b_k_nm < 20; full_loop_B.b_k_nm++) {
    full_loop_B.e_h[full_loop_B.b_k_nm] =
      Jtri[full_loop_B.e_tmp[full_loop_B.b_k_nm] + 20] * Jtri[full_loop_B.b_k_nm]
      + Jtri[full_loop_B.b_k_nm + 20] * Jtri[full_loop_B.b_k_nm + 40];
  }

  for (full_loop_B.b_k_nm = 0; full_loop_B.b_k_nm < 19; full_loop_B.b_k_nm++) {
    full_loop_B.e_tmp[full_loop_B.b_k_nm] =
      full_loop_B.e_tmp_n[full_loop_B.b_k_nm];
  }

  full_loop_B.e_tmp[19] = 0;
  for (full_loop_B.b_k_nm = 0; full_loop_B.b_k_nm < 20; full_loop_B.b_k_nm++) {
    full_loop_B.f_c[full_loop_B.b_k_nm] =
      Jtri[full_loop_B.e_tmp[full_loop_B.b_k_nm] + 40] * Jtri[full_loop_B.b_k_nm];
  }

  if ((Jtri[19] == 0.0) && (Jtri[59] == 0.0)) {
    std::memset(&dx[0], 0, 20U * sizeof(real_T));
    std::memset(&full_loop_B.alpha_g[0], 0, 20U * sizeof(real_T));
    std::memset(&full_loop_B.b_gamma[0], 0, 19U * sizeof(real_T));
    std::memset(&full_loop_B.delta[0], 0, 18U * sizeof(real_T));
    full_loop_B.alpha_g[0] = full_loop_B.d_l[0];
    full_loop_B.b_gamma[0] = full_loop_B.e_h[0] / full_loop_B.d_l[0];
    full_loop_B.delta[0] = full_loop_B.f_c[0] / full_loop_B.d_l[0];
    full_loop_B.alpha_g[1] = full_loop_B.d_l[1] - full_loop_B.e_h[0] *
      full_loop_B.b_gamma[0];
    full_loop_B.b_gamma[1] = (full_loop_B.e_h[1] - full_loop_B.f_c[0] *
      full_loop_B.b_gamma[0]) / full_loop_B.alpha_g[1];
    full_loop_B.delta[1] = full_loop_B.f_c[1] / full_loop_B.alpha_g[1];
    for (full_loop_B.b_k_nm = 0; full_loop_B.b_k_nm < 16; full_loop_B.b_k_nm++)
    {
      full_loop_B.alpha_tmp = full_loop_B.b_gamma[full_loop_B.b_k_nm + 1];
      full_loop_B.alpha_g[full_loop_B.b_k_nm + 2] =
        (full_loop_B.d_l[full_loop_B.b_k_nm + 2] -
         full_loop_B.f_c[full_loop_B.b_k_nm] *
         full_loop_B.delta[full_loop_B.b_k_nm]) - full_loop_B.alpha_tmp *
        full_loop_B.alpha_tmp * full_loop_B.alpha_g[full_loop_B.b_k_nm + 1];
      full_loop_B.b_gamma_tmp = full_loop_B.alpha_g[full_loop_B.b_k_nm + 2];
      full_loop_B.b_gamma[full_loop_B.b_k_nm + 2] =
        (full_loop_B.e_h[full_loop_B.b_k_nm + 2] -
         full_loop_B.f_c[full_loop_B.b_k_nm + 1] * full_loop_B.alpha_tmp) /
        full_loop_B.b_gamma_tmp;
      full_loop_B.delta[full_loop_B.b_k_nm + 2] =
        full_loop_B.f_c[full_loop_B.b_k_nm + 2] / full_loop_B.b_gamma_tmp;
    }

    full_loop_B.alpha_g[18] = (full_loop_B.d_l[18] - full_loop_B.f_c[16] *
      full_loop_B.delta[16]) - full_loop_B.b_gamma[17] * full_loop_B.b_gamma[17]
      * full_loop_B.alpha_g[17];
    full_loop_B.b_gamma[18] = (full_loop_B.e_h[18] - full_loop_B.f_c[17] *
      full_loop_B.b_gamma[17]) / full_loop_B.alpha_g[18];
    full_loop_B.alpha_g[19] = (full_loop_B.d_l[19] - full_loop_B.f_c[17] *
      full_loop_B.delta[17]) - full_loop_B.b_gamma[18] * full_loop_B.b_gamma[18]
      * full_loop_B.alpha_g[18];
    std::memset(&full_loop_B.d_l[0], 0, 20U * sizeof(real_T));
    full_loop_B.d_l[0] = v[0];
    full_loop_B.d_l[1] = v[1] - full_loop_B.b_gamma[0] * v[0];
    for (full_loop_B.b_k_nm = 0; full_loop_B.b_k_nm < 18; full_loop_B.b_k_nm++)
    {
      full_loop_B.d_l[full_loop_B.b_k_nm + 2] = (v[full_loop_B.b_k_nm + 2] -
        full_loop_B.b_gamma[full_loop_B.b_k_nm + 1] *
        full_loop_B.d_l[full_loop_B.b_k_nm + 1]) -
        full_loop_B.delta[full_loop_B.b_k_nm] *
        full_loop_B.d_l[full_loop_B.b_k_nm];
    }

    for (full_loop_B.b_k_nm = 0; full_loop_B.b_k_nm < 20; full_loop_B.b_k_nm++)
    {
      full_loop_B.e_h[full_loop_B.b_k_nm] = full_loop_B.d_l[full_loop_B.b_k_nm] /
        full_loop_B.alpha_g[full_loop_B.b_k_nm];
    }

    dx[19] = full_loop_B.e_h[19];
    dx[18] = full_loop_B.e_h[18] - full_loop_B.b_gamma[18] * full_loop_B.e_h[19];
    for (full_loop_B.b_k_nm = 0; full_loop_B.b_k_nm < 18; full_loop_B.b_k_nm++)
    {
      dx[17 - full_loop_B.b_k_nm] = (full_loop_B.e_h[17 - full_loop_B.b_k_nm] -
        full_loop_B.b_gamma[17 - full_loop_B.b_k_nm] * dx[18 -
        full_loop_B.b_k_nm]) - full_loop_B.delta[17 - full_loop_B.b_k_nm] * dx
        [19 - full_loop_B.b_k_nm];
    }
  } else {
    full_loop_cycsympentdisolve(full_loop_B.d_l, full_loop_B.e_h,
      full_loop_B.f_c, v, dx);
  }
}

void full_loopModelClass::full_loop_cyctridisolve_p4(const real_T a[20], real_T
  b[20], const real_T c[20], real_T d[20])
{
  int32_T b_j;
  full_loop_B.b_gamma_c = -b[0];
  b[0] -= -b[0];
  b[19] -= a[19] * c[19] / full_loop_B.b_gamma_c;
  std::memcpy(&full_loop_B.b_n[0], &b[0], 20U * sizeof(real_T));
  for (b_j = 0; b_j < 19; b_j++) {
    full_loop_B.mu_gn = a[b_j] / full_loop_B.b_n[b_j];
    full_loop_B.b_n[b_j + 1] -= full_loop_B.mu_gn * c[b_j];
    d[b_j + 1] -= full_loop_B.mu_gn * d[b_j];
  }

  d[19] /= full_loop_B.b_n[19];
  for (b_j = 0; b_j < 19; b_j++) {
    d[18 - b_j] = (d[18 - b_j] - c[18 - b_j] * d[19 - b_j]) / full_loop_B.b_n[18
      - b_j];
  }

  std::memset(&full_loop_B.z_g[0], 0, 20U * sizeof(real_T));
  full_loop_B.z_g[0] = full_loop_B.b_gamma_c;
  full_loop_B.z_g[19] = c[19];
  std::memset(&full_loop_B.z_g[1], 0, 18U * sizeof(real_T));
  std::memcpy(&full_loop_B.b_n[0], &b[0], 20U * sizeof(real_T));
  for (b_j = 0; b_j < 19; b_j++) {
    full_loop_B.mu_gn = a[b_j] / full_loop_B.b_n[b_j];
    full_loop_B.b_n[b_j + 1] -= full_loop_B.mu_gn * c[b_j];
    full_loop_B.z_g[b_j + 1] -= full_loop_B.mu_gn * full_loop_B.z_g[b_j];
  }

  full_loop_B.z_g[19] /= full_loop_B.b_n[19];
  for (b_j = 0; b_j < 19; b_j++) {
    full_loop_B.z_g[18 - b_j] = (full_loop_B.z_g[18 - b_j] - c[18 - b_j] *
      full_loop_B.z_g[19 - b_j]) / full_loop_B.b_n[18 - b_j];
  }

  full_loop_B.b_gamma_c = (a[19] * d[19] / full_loop_B.b_gamma_c + d[0]) / (a[19]
    * full_loop_B.z_g[19] / full_loop_B.b_gamma_c + (full_loop_B.z_g[0] + 1.0));
  for (b_j = 0; b_j < 20; b_j++) {
    d[b_j] -= full_loop_B.b_gamma_c * full_loop_B.z_g[b_j];
  }
}

void full_loopModelClass::full_loop_solveHessian_p4(const real_T Jtri[60],
  real_T v[20])
{
  int32_T b_j;
  if ((Jtri[19] == 0.0) && (Jtri[59] == 0.0)) {
    std::memcpy(&full_loop_B.Jtri_m[0], &Jtri[20], 20U * sizeof(real_T));
    for (b_j = 0; b_j < 19; b_j++) {
      full_loop_B.mu_g = Jtri[b_j + 40] / full_loop_B.Jtri_m[b_j];
      full_loop_B.Jtri_m[b_j + 1] -= full_loop_B.mu_g * Jtri[b_j];
      v[b_j + 1] -= full_loop_B.mu_g * v[b_j];
    }

    v[19] /= full_loop_B.Jtri_m[19];
    for (b_j = 0; b_j < 19; b_j++) {
      v[18 - b_j] = (v[18 - b_j] - Jtri[18 - b_j] * v[19 - b_j]) /
        full_loop_B.Jtri_m[18 - b_j];
    }

    std::memcpy(&full_loop_B.Jtri_m[0], &Jtri[20], 20U * sizeof(real_T));
    for (b_j = 0; b_j < 19; b_j++) {
      full_loop_B.mu_g = Jtri[b_j] / full_loop_B.Jtri_m[b_j];
      full_loop_B.Jtri_m[b_j + 1] -= Jtri[b_j + 40] * full_loop_B.mu_g;
      v[b_j + 1] -= full_loop_B.mu_g * v[b_j];
    }

    v[19] /= full_loop_B.Jtri_m[19];
    for (b_j = 0; b_j < 19; b_j++) {
      v[18 - b_j] = (v[18 - b_j] - Jtri[58 - b_j] * v[19 - b_j]) /
        full_loop_B.Jtri_m[18 - b_j];
    }
  } else {
    std::memcpy(&full_loop_B.Jtri_m[0], &(*(real_T (*)[20])&Jtri[20])[0], 20U *
                sizeof(real_T));
    full_loop_cyctridisolve_p4(&Jtri[40], full_loop_B.Jtri_m, &Jtri[0], v);
    std::memcpy(&full_loop_B.Jtri_m[0], &(*(real_T (*)[20])&Jtri[20])[0], 20U *
                sizeof(real_T));
    full_loop_cyctridisolve_p4(&Jtri[0], full_loop_B.Jtri_m, &Jtri[40], v);
  }
}

real_T full_loopModelClass::full_loop_norm_p(const real_T x[20])
{
  real_T y;
  real_T scale;
  real_T absxk;
  real_T t;
  int32_T b_k;
  y = 0.0;
  scale = 3.3121686421112381E-170;
  for (b_k = 0; b_k < 20; b_k++) {
    absxk = std::abs(x[b_k]);
    if (absxk > scale) {
      t = scale / absxk;
      y = y * t * t + 1.0;
      scale = absxk;
    } else {
      t = absxk / scale;
      y += t * t;
    }
  }

  return scale * std::sqrt(y);
}

void full_loopModelClass::full_loop_accumarray(const real_T val[58], real_T A
  [400])
{
  static const int8_T tmp[116] = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14,
    15, 16, 17, 18, 19, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16,
    17, 18, 19, 20, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18,
    19, 20, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
    1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 1, 2,
    3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19 };

  const int8_T *subs;
  subs = &tmp[0];
  for (full_loop_B.i20 = 0; full_loop_B.i20 < 400; full_loop_B.i20++) {
    full_loop_B.filled[full_loop_B.i20] = true;
    A[full_loop_B.i20] = 0.0;
  }

  for (full_loop_B.b_k_cr = 0; full_loop_B.b_k_cr < 58; full_loop_B.b_k_cr++) {
    full_loop_B.i20 = ((subs[full_loop_B.b_k_cr + 58] - 1) * 20 +
                       subs[full_loop_B.b_k_cr]) - 1;
    if (full_loop_B.filled[full_loop_B.i20]) {
      full_loop_B.filled[full_loop_B.i20] = false;
      A[full_loop_B.i20] = val[full_loop_B.b_k_cr];
    } else {
      A[full_loop_B.i20] += val[full_loop_B.b_k_cr];
    }
  }
}

real_T full_loopModelClass::full_loop_xzlangeM(const creal_T x[400])
{
  real_T y;
  real_T absxk;
  int32_T b_k;
  boolean_T exitg1;
  y = 0.0;
  b_k = 0;
  exitg1 = false;
  while ((!exitg1) && (b_k < 400)) {
    absxk = full_loop_rt_hypotd_snf(x[b_k].re, x[b_k].im);
    if (rtIsNaN(absxk)) {
      y = (rtNaN);
      exitg1 = true;
    } else {
      if (absxk > y) {
        y = absxk;
      }

      b_k++;
    }
  }

  return y;
}

void full_loopModelClass::full_loop_xzlascl(real_T cfrom, real_T cto, const
  creal_T A[400], creal_T b_A[400])
{
  boolean_T notdone;
  int32_T i;
  std::memcpy(&b_A[0], &A[0], 400U * sizeof(creal_T));
  full_loop_B.cfromc_d = cfrom;
  full_loop_B.ctoc_a = cto;
  notdone = true;
  while (notdone) {
    full_loop_B.cfrom1_k = full_loop_B.cfromc_d * 2.0041683600089728E-292;
    full_loop_B.cto1_c = full_loop_B.ctoc_a / 4.9896007738368E+291;
    if ((std::abs(full_loop_B.cfrom1_k) > std::abs(full_loop_B.ctoc_a)) &&
        (full_loop_B.ctoc_a != 0.0)) {
      full_loop_B.mul_j = 2.0041683600089728E-292;
      full_loop_B.cfromc_d = full_loop_B.cfrom1_k;
    } else if (std::abs(full_loop_B.cto1_c) > std::abs(full_loop_B.cfromc_d)) {
      full_loop_B.mul_j = 4.9896007738368E+291;
      full_loop_B.ctoc_a = full_loop_B.cto1_c;
    } else {
      full_loop_B.mul_j = full_loop_B.ctoc_a / full_loop_B.cfromc_d;
      notdone = false;
    }

    for (i = 0; i < 400; i++) {
      full_loop_B.b_A_e.re = full_loop_B.mul_j * b_A[i].re;
      full_loop_B.b_A_e.im = full_loop_B.mul_j * b_A[i].im;
      b_A[i] = full_loop_B.b_A_e;
    }
  }
}

void full_loopModelClass::full_loop_xzggbal(const creal_T A[400], creal_T b_A
  [400], int32_T *ilo, int32_T *ihi, int32_T rscale[20])
{
  boolean_T found;
  int32_T atmp_re_tmp_tmp;
  int32_T exitg1;
  int32_T exitg2;
  boolean_T exitg3;
  boolean_T exitg4;
  std::memcpy(&b_A[0], &A[0], 400U * sizeof(creal_T));
  for (full_loop_B.i_es = 0; full_loop_B.i_es < 20; full_loop_B.i_es++) {
    rscale[full_loop_B.i_es] = 1;
  }

  *ilo = 1;
  *ihi = 20;
  do {
    exitg2 = 0;
    full_loop_B.i_es = -1;
    full_loop_B.j_k = 0;
    found = false;
    full_loop_B.ii_n = *ihi;
    exitg3 = false;
    while ((!exitg3) && (full_loop_B.ii_n > 0)) {
      full_loop_B.nzcount_j = 0;
      full_loop_B.i_es = full_loop_B.ii_n - 1;
      full_loop_B.j_k = *ihi;
      full_loop_B.b_jj_b = 1;
      exitg4 = false;
      while ((!exitg4) && (full_loop_B.b_jj_b - 1 <= *ihi - 1)) {
        atmp_re_tmp_tmp = ((full_loop_B.b_jj_b - 1) * 20 + full_loop_B.ii_n) - 1;
        if ((b_A[atmp_re_tmp_tmp].re != 0.0) || (b_A[atmp_re_tmp_tmp].im != 0.0)
            || (full_loop_B.ii_n == full_loop_B.b_jj_b)) {
          if (full_loop_B.nzcount_j == 0) {
            full_loop_B.j_k = full_loop_B.b_jj_b;
            full_loop_B.nzcount_j = 1;
            full_loop_B.b_jj_b++;
          } else {
            full_loop_B.nzcount_j = 2;
            exitg4 = true;
          }
        } else {
          full_loop_B.b_jj_b++;
        }
      }

      if (full_loop_B.nzcount_j < 2) {
        found = true;
        exitg3 = true;
      } else {
        full_loop_B.ii_n--;
      }
    }

    if (!found) {
      exitg2 = 2;
    } else {
      if (full_loop_B.i_es + 1 != *ihi) {
        for (full_loop_B.nzcount_j = 1; full_loop_B.nzcount_j < 21;
             full_loop_B.nzcount_j++) {
          atmp_re_tmp_tmp = (full_loop_B.nzcount_j - 1) * 20;
          full_loop_B.ii_n = atmp_re_tmp_tmp + full_loop_B.i_es;
          full_loop_B.atmp_re_p = b_A[full_loop_B.ii_n].re;
          full_loop_B.atmp_im_f = b_A[full_loop_B.ii_n].im;
          atmp_re_tmp_tmp = (atmp_re_tmp_tmp + *ihi) - 1;
          b_A[full_loop_B.ii_n] = b_A[atmp_re_tmp_tmp];
          b_A[atmp_re_tmp_tmp].re = full_loop_B.atmp_re_p;
          b_A[atmp_re_tmp_tmp].im = full_loop_B.atmp_im_f;
        }
      }

      if (full_loop_B.j_k != *ihi) {
        for (full_loop_B.i_es = 0; full_loop_B.i_es < *ihi; full_loop_B.i_es++)
        {
          full_loop_B.ii_n = (full_loop_B.j_k - 1) * 20 + full_loop_B.i_es;
          full_loop_B.atmp_re_p = b_A[full_loop_B.ii_n].re;
          full_loop_B.atmp_im_f = b_A[full_loop_B.ii_n].im;
          atmp_re_tmp_tmp = (*ihi - 1) * 20 + full_loop_B.i_es;
          b_A[full_loop_B.ii_n] = b_A[atmp_re_tmp_tmp];
          b_A[atmp_re_tmp_tmp].re = full_loop_B.atmp_re_p;
          b_A[atmp_re_tmp_tmp].im = full_loop_B.atmp_im_f;
        }
      }

      rscale[*ihi - 1] = full_loop_B.j_k;
      (*ihi)--;
      if (*ihi == 1) {
        rscale[0] = 1;
        exitg2 = 1;
      }
    }
  } while (exitg2 == 0);

  if (exitg2 == 1) {
  } else {
    do {
      exitg1 = 0;
      full_loop_B.i_es = 0;
      full_loop_B.j_k = 0;
      found = false;
      full_loop_B.b_jj_b = *ilo;
      exitg3 = false;
      while ((!exitg3) && (full_loop_B.b_jj_b <= *ihi)) {
        full_loop_B.nzcount_j = 0;
        full_loop_B.i_es = *ihi;
        full_loop_B.j_k = full_loop_B.b_jj_b;
        full_loop_B.ii_n = *ilo;
        exitg4 = false;
        while ((!exitg4) && (full_loop_B.ii_n <= *ihi)) {
          atmp_re_tmp_tmp = ((full_loop_B.b_jj_b - 1) * 20 + full_loop_B.ii_n) -
            1;
          if ((b_A[atmp_re_tmp_tmp].re != 0.0) || (b_A[atmp_re_tmp_tmp].im !=
               0.0) || (full_loop_B.ii_n == full_loop_B.b_jj_b)) {
            if (full_loop_B.nzcount_j == 0) {
              full_loop_B.i_es = full_loop_B.ii_n;
              full_loop_B.nzcount_j = 1;
              full_loop_B.ii_n++;
            } else {
              full_loop_B.nzcount_j = 2;
              exitg4 = true;
            }
          } else {
            full_loop_B.ii_n++;
          }
        }

        if (full_loop_B.nzcount_j < 2) {
          found = true;
          exitg3 = true;
        } else {
          full_loop_B.b_jj_b++;
        }
      }

      if (!found) {
        exitg1 = 1;
      } else {
        if (full_loop_B.i_es != *ilo) {
          for (full_loop_B.nzcount_j = *ilo; full_loop_B.nzcount_j < 21;
               full_loop_B.nzcount_j++) {
            atmp_re_tmp_tmp = (full_loop_B.nzcount_j - 1) * 20;
            full_loop_B.ii_n = (atmp_re_tmp_tmp + full_loop_B.i_es) - 1;
            full_loop_B.atmp_re_p = b_A[full_loop_B.ii_n].re;
            full_loop_B.atmp_im_f = b_A[full_loop_B.ii_n].im;
            atmp_re_tmp_tmp = (atmp_re_tmp_tmp + *ilo) - 1;
            b_A[full_loop_B.ii_n] = b_A[atmp_re_tmp_tmp];
            b_A[atmp_re_tmp_tmp].re = full_loop_B.atmp_re_p;
            b_A[atmp_re_tmp_tmp].im = full_loop_B.atmp_im_f;
          }
        }

        if (full_loop_B.j_k != *ilo) {
          for (full_loop_B.i_es = 0; full_loop_B.i_es < *ihi; full_loop_B.i_es++)
          {
            full_loop_B.ii_n = (full_loop_B.j_k - 1) * 20 + full_loop_B.i_es;
            full_loop_B.atmp_re_p = b_A[full_loop_B.ii_n].re;
            full_loop_B.atmp_im_f = b_A[full_loop_B.ii_n].im;
            atmp_re_tmp_tmp = (*ilo - 1) * 20 + full_loop_B.i_es;
            b_A[full_loop_B.ii_n] = b_A[atmp_re_tmp_tmp];
            b_A[atmp_re_tmp_tmp].re = full_loop_B.atmp_re_p;
            b_A[atmp_re_tmp_tmp].im = full_loop_B.atmp_im_f;
          }
        }

        rscale[*ilo - 1] = full_loop_B.j_k;
        (*ilo)++;
        if (*ilo == *ihi) {
          rscale[*ilo - 1] = *ilo;
          exitg1 = 1;
        }
      }
    } while (exitg1 == 0);
  }
}

void full_loopModelClass::full_loop_xzgghrd(int32_T ilo, int32_T ihi, const
  creal_T A[400], creal_T b_A[400])
{
  int32_T stemp_re_tmp_tmp;
  std::memcpy(&b_A[0], &A[0], 400U * sizeof(creal_T));
  if (ihi >= ilo + 2) {
    full_loop_B.jcol_g = ilo - 1;
    while (full_loop_B.jcol_g + 1 < ihi - 1) {
      full_loop_B.jrow_m = ihi - 2;
      while (full_loop_B.jrow_m + 2 > full_loop_B.jcol_g + 2) {
        full_loop_xzlartg(b_A[full_loop_B.jrow_m + 20 * full_loop_B.jcol_g],
                          b_A[(full_loop_B.jrow_m + 20 * full_loop_B.jcol_g) + 1],
                          &full_loop_B.c_n, &full_loop_B.s_d,
                          &b_A[full_loop_B.jrow_m + 20 * full_loop_B.jcol_g]);
        full_loop_B.stemp_re_tmp_a = (full_loop_B.jrow_m + 20 *
          full_loop_B.jcol_g) + 1;
        b_A[full_loop_B.stemp_re_tmp_a].re = 0.0;
        b_A[full_loop_B.stemp_re_tmp_a].im = 0.0;
        for (full_loop_B.j_h = full_loop_B.jcol_g + 2; full_loop_B.j_h < 21;
             full_loop_B.j_h++) {
          stemp_re_tmp_tmp = (full_loop_B.j_h - 1) * 20 + full_loop_B.jrow_m;
          full_loop_B.stemp_re_tmp_a = stemp_re_tmp_tmp + 1;
          full_loop_B.stemp_re_o = (b_A[full_loop_B.stemp_re_tmp_a].re *
            full_loop_B.s_d.re - b_A[full_loop_B.stemp_re_tmp_a].im *
            full_loop_B.s_d.im) + b_A[stemp_re_tmp_tmp].re * full_loop_B.c_n;
          full_loop_B.stemp_im_o = (b_A[full_loop_B.stemp_re_tmp_a].im *
            full_loop_B.s_d.re + b_A[full_loop_B.stemp_re_tmp_a].re *
            full_loop_B.s_d.im) + b_A[stemp_re_tmp_tmp].im * full_loop_B.c_n;
          full_loop_B.d10 = b_A[stemp_re_tmp_tmp].re;
          b_A[full_loop_B.stemp_re_tmp_a].re = b_A[full_loop_B.stemp_re_tmp_a].
            re * full_loop_B.c_n - (b_A[stemp_re_tmp_tmp].re *
            full_loop_B.s_d.re + b_A[stemp_re_tmp_tmp].im * full_loop_B.s_d.im);
          b_A[full_loop_B.stemp_re_tmp_a].im = b_A[full_loop_B.stemp_re_tmp_a].
            im * full_loop_B.c_n - (b_A[stemp_re_tmp_tmp].im *
            full_loop_B.s_d.re - full_loop_B.s_d.im * full_loop_B.d10);
          b_A[stemp_re_tmp_tmp].re = full_loop_B.stemp_re_o;
          b_A[stemp_re_tmp_tmp].im = full_loop_B.stemp_im_o;
        }

        full_loop_B.s_d.re = -full_loop_B.s_d.re;
        full_loop_B.s_d.im = -full_loop_B.s_d.im;
        for (full_loop_B.j_h = 1; full_loop_B.j_h <= ihi; full_loop_B.j_h++) {
          full_loop_B.stemp_re_tmp_a = (20 * full_loop_B.jrow_m +
            full_loop_B.j_h) - 1;
          stemp_re_tmp_tmp = ((full_loop_B.jrow_m + 1) * 20 + full_loop_B.j_h) -
            1;
          full_loop_B.stemp_re_o = b_A[stemp_re_tmp_tmp].re * full_loop_B.c_n +
            (b_A[full_loop_B.stemp_re_tmp_a].re * full_loop_B.s_d.re -
             b_A[full_loop_B.stemp_re_tmp_a].im * full_loop_B.s_d.im);
          full_loop_B.stemp_im_o = b_A[stemp_re_tmp_tmp].im * full_loop_B.c_n +
            (b_A[full_loop_B.stemp_re_tmp_a].im * full_loop_B.s_d.re +
             b_A[full_loop_B.stemp_re_tmp_a].re * full_loop_B.s_d.im);
          full_loop_B.d10 = b_A[stemp_re_tmp_tmp].re;
          b_A[full_loop_B.stemp_re_tmp_a].re = b_A[full_loop_B.stemp_re_tmp_a].
            re * full_loop_B.c_n - (b_A[stemp_re_tmp_tmp].re *
            full_loop_B.s_d.re + b_A[stemp_re_tmp_tmp].im * full_loop_B.s_d.im);
          b_A[full_loop_B.stemp_re_tmp_a].im = b_A[full_loop_B.stemp_re_tmp_a].
            im * full_loop_B.c_n - (b_A[stemp_re_tmp_tmp].im *
            full_loop_B.s_d.re - full_loop_B.s_d.im * full_loop_B.d10);
          b_A[stemp_re_tmp_tmp].re = full_loop_B.stemp_re_o;
          b_A[stemp_re_tmp_tmp].im = full_loop_B.stemp_im_o;
        }

        full_loop_B.jrow_m--;
      }

      full_loop_B.jcol_g++;
    }
  }
}

real_T full_loopModelClass::full_loop_xzlanhs(const creal_T A[400], int32_T ilo,
  int32_T ihi)
{
  real_T f;
  boolean_T firstNonZero;
  f = 0.0;
  if (ilo <= ihi) {
    full_loop_B.scale_bh = 0.0;
    full_loop_B.sumsq = 0.0;
    firstNonZero = true;
    for (full_loop_B.j_ir = ilo; full_loop_B.j_ir <= ihi; full_loop_B.j_ir++) {
      full_loop_B.b_hl = full_loop_B.j_ir + 1;
      if (ihi < full_loop_B.j_ir + 1) {
        full_loop_B.b_hl = ihi;
      }

      for (full_loop_B.i_kq = ilo; full_loop_B.i_kq <= full_loop_B.b_hl;
           full_loop_B.i_kq++) {
        full_loop_B.reAij_tmp = ((full_loop_B.j_ir - 1) * 20 + full_loop_B.i_kq)
          - 1;
        if (A[full_loop_B.reAij_tmp].re != 0.0) {
          full_loop_B.temp1_n = std::abs(A[full_loop_B.reAij_tmp].re);
          if (firstNonZero) {
            full_loop_B.sumsq = 1.0;
            full_loop_B.scale_bh = full_loop_B.temp1_n;
            firstNonZero = false;
          } else if (full_loop_B.scale_bh < full_loop_B.temp1_n) {
            full_loop_B.temp2_dm = full_loop_B.scale_bh / full_loop_B.temp1_n;
            full_loop_B.sumsq = full_loop_B.sumsq * full_loop_B.temp2_dm *
              full_loop_B.temp2_dm + 1.0;
            full_loop_B.scale_bh = full_loop_B.temp1_n;
          } else {
            full_loop_B.temp2_dm = full_loop_B.temp1_n / full_loop_B.scale_bh;
            full_loop_B.sumsq += full_loop_B.temp2_dm * full_loop_B.temp2_dm;
          }
        }

        if (A[full_loop_B.reAij_tmp].im != 0.0) {
          full_loop_B.temp1_n = std::abs(A[full_loop_B.reAij_tmp].im);
          if (firstNonZero) {
            full_loop_B.sumsq = 1.0;
            full_loop_B.scale_bh = full_loop_B.temp1_n;
            firstNonZero = false;
          } else if (full_loop_B.scale_bh < full_loop_B.temp1_n) {
            full_loop_B.temp2_dm = full_loop_B.scale_bh / full_loop_B.temp1_n;
            full_loop_B.sumsq = full_loop_B.sumsq * full_loop_B.temp2_dm *
              full_loop_B.temp2_dm + 1.0;
            full_loop_B.scale_bh = full_loop_B.temp1_n;
          } else {
            full_loop_B.temp2_dm = full_loop_B.temp1_n / full_loop_B.scale_bh;
            full_loop_B.sumsq += full_loop_B.temp2_dm * full_loop_B.temp2_dm;
          }
        }
      }
    }

    f = full_loop_B.scale_bh * std::sqrt(full_loop_B.sumsq);
  }

  return f;
}

void full_loopModelClass::full_loop_xzhgeqz(const creal_T A[400], int32_T ilo,
  int32_T ihi, int32_T *info, creal_T alpha1[20], creal_T beta1[20])
{
  boolean_T failed;
  boolean_T goto60;
  boolean_T goto70;
  boolean_T goto90;
  boolean_T guard1 = false;
  boolean_T guard2 = false;
  boolean_T guard3 = false;
  int32_T exitg1;
  boolean_T exitg2;
  std::memcpy(&full_loop_B.b_A[0], &A[0], 400U * sizeof(creal_T));
  *info = 0;
  for (full_loop_B.i_my = 0; full_loop_B.i_my < 20; full_loop_B.i_my++) {
    alpha1[full_loop_B.i_my].re = 0.0;
    alpha1[full_loop_B.i_my].im = 0.0;
    beta1[full_loop_B.i_my].re = 1.0;
    beta1[full_loop_B.i_my].im = 0.0;
  }

  full_loop_B.eshift_re_o = 0.0;
  full_loop_B.eshift_im_d = 0.0;
  full_loop_B.ctemp_d.re = 0.0;
  full_loop_B.ctemp_d.im = 0.0;
  full_loop_B.anorm_o = full_loop_xzlanhs(A, ilo, ihi);
  full_loop_B.stemp_re_e = 2.2204460492503131E-16 * full_loop_B.anorm_o;
  full_loop_B.b_atol_k = 2.2250738585072014E-308;
  if (full_loop_B.stemp_re_e > 2.2250738585072014E-308) {
    full_loop_B.b_atol_k = full_loop_B.stemp_re_e;
  }

  full_loop_B.stemp_re_e = 2.2250738585072014E-308;
  if (full_loop_B.anorm_o > 2.2250738585072014E-308) {
    full_loop_B.stemp_re_e = full_loop_B.anorm_o;
  }

  full_loop_B.anorm_o = 1.0 / full_loop_B.stemp_re_e;
  failed = true;
  for (full_loop_B.ilast = ihi + 1; full_loop_B.ilast < 21; full_loop_B.ilast++)
  {
    alpha1[full_loop_B.ilast - 1] = A[((full_loop_B.ilast - 1) * 20 +
      full_loop_B.ilast) - 1];
  }

  guard1 = false;
  guard2 = false;
  if (ihi >= ilo) {
    full_loop_B.ifirst_o = ilo;
    full_loop_B.istart_e = ilo;
    full_loop_B.ilast = ihi - 1;
    full_loop_B.ilastm1_j = ihi - 2;
    full_loop_B.ilastm_l = ihi;
    full_loop_B.iiter_n = 0;
    goto60 = false;
    goto70 = false;
    goto90 = false;
    full_loop_B.jiter_c = 0;
    do {
      exitg1 = 0;
      if (full_loop_B.jiter_c <= ((ihi - ilo) + 1) * 30 - 1) {
        if (full_loop_B.ilast + 1 == ilo) {
          goto60 = true;
        } else {
          full_loop_B.jp1_e = 20 * full_loop_B.ilastm1_j + full_loop_B.ilast;
          if (std::abs(full_loop_B.b_A[full_loop_B.jp1_e].re) + std::abs
              (full_loop_B.b_A[full_loop_B.jp1_e].im) <= full_loop_B.b_atol_k) {
            full_loop_B.b_A[full_loop_B.jp1_e].re = 0.0;
            full_loop_B.b_A[full_loop_B.jp1_e].im = 0.0;
            goto60 = true;
          } else {
            full_loop_B.j_m = full_loop_B.ilastm1_j + 1;
            guard3 = false;
            exitg2 = false;
            while ((!exitg2) && (full_loop_B.j_m >= ilo)) {
              if (full_loop_B.j_m == ilo) {
                guard3 = true;
                exitg2 = true;
              } else {
                full_loop_B.jp1_e = ((full_loop_B.j_m - 2) * 20 +
                                     full_loop_B.j_m) - 1;
                if (std::abs(full_loop_B.b_A[full_loop_B.jp1_e].re) + std::abs
                    (full_loop_B.b_A[full_loop_B.jp1_e].im) <=
                    full_loop_B.b_atol_k) {
                  full_loop_B.b_A[full_loop_B.jp1_e].re = 0.0;
                  full_loop_B.b_A[full_loop_B.jp1_e].im = 0.0;
                  guard3 = true;
                  exitg2 = true;
                } else {
                  full_loop_B.j_m--;
                  guard3 = false;
                }
              }
            }

            if (guard3) {
              full_loop_B.ifirst_o = full_loop_B.j_m;
              goto70 = true;
            }
          }
        }

        if (goto60 || goto70) {
          if (goto60) {
            goto60 = false;
            alpha1[full_loop_B.ilast] = full_loop_B.b_A[20 * full_loop_B.ilast +
              full_loop_B.ilast];
            full_loop_B.ilast = full_loop_B.ilastm1_j;
            full_loop_B.ilastm1_j--;
            if (full_loop_B.ilast + 1 < ilo) {
              failed = false;
              guard2 = true;
              exitg1 = 1;
            } else {
              full_loop_B.iiter_n = 0;
              full_loop_B.eshift_re_o = 0.0;
              full_loop_B.eshift_im_d = 0.0;
              full_loop_B.ilastm_l = full_loop_B.ilast + 1;
              full_loop_B.jiter_c++;
            }
          } else {
            if (goto70) {
              goto70 = false;
              full_loop_B.iiter_n++;
              if (full_loop_mod_p(full_loop_B.iiter_n) != 0) {
                full_loop_B.j_m = 20 * full_loop_B.ilastm1_j +
                  full_loop_B.ilastm1_j;
                full_loop_B.tempr_f = full_loop_B.b_A[full_loop_B.j_m].re *
                  full_loop_B.anorm_o;
                full_loop_B.ai_a = full_loop_B.b_A[full_loop_B.j_m].im *
                  full_loop_B.anorm_o;
                if (full_loop_B.ai_a == 0.0) {
                  full_loop_B.ad11_i.re = full_loop_B.tempr_f /
                    0.22360679774997896;
                  full_loop_B.ad11_i.im = 0.0;
                } else if (full_loop_B.tempr_f == 0.0) {
                  full_loop_B.ad11_i.re = 0.0;
                  full_loop_B.ad11_i.im = full_loop_B.ai_a / 0.22360679774997896;
                } else {
                  full_loop_B.ad11_i.re = full_loop_B.tempr_f /
                    0.22360679774997896;
                  full_loop_B.ad11_i.im = full_loop_B.ai_a / 0.22360679774997896;
                }

                full_loop_B.j_m = 20 * full_loop_B.ilast + full_loop_B.ilast;
                full_loop_B.tempr_f = full_loop_B.b_A[full_loop_B.j_m].re *
                  full_loop_B.anorm_o;
                full_loop_B.ai_a = full_loop_B.b_A[full_loop_B.j_m].im *
                  full_loop_B.anorm_o;
                if (full_loop_B.ai_a == 0.0) {
                  full_loop_B.stemp_re_e = full_loop_B.tempr_f /
                    0.22360679774997896;
                  full_loop_B.stemp_im_n = 0.0;
                } else if (full_loop_B.tempr_f == 0.0) {
                  full_loop_B.stemp_re_e = 0.0;
                  full_loop_B.stemp_im_n = full_loop_B.ai_a /
                    0.22360679774997896;
                } else {
                  full_loop_B.stemp_re_e = full_loop_B.tempr_f /
                    0.22360679774997896;
                  full_loop_B.stemp_im_n = full_loop_B.ai_a /
                    0.22360679774997896;
                }

                full_loop_B.t1_g.re = (full_loop_B.ad11_i.re +
                  full_loop_B.stemp_re_e) * 0.5;
                full_loop_B.t1_g.im = (full_loop_B.ad11_i.im +
                  full_loop_B.stemp_im_n) * 0.5;
                full_loop_B.j_m = 20 * full_loop_B.ilast + full_loop_B.ilastm1_j;
                full_loop_B.tempr_f = full_loop_B.b_A[full_loop_B.j_m].re *
                  full_loop_B.anorm_o;
                full_loop_B.ai_a = full_loop_B.b_A[full_loop_B.j_m].im *
                  full_loop_B.anorm_o;
                if (full_loop_B.ai_a == 0.0) {
                  full_loop_B.temp_jw = full_loop_B.tempr_f /
                    0.22360679774997896;
                  full_loop_B.temp2_d = 0.0;
                } else if (full_loop_B.tempr_f == 0.0) {
                  full_loop_B.temp_jw = 0.0;
                  full_loop_B.temp2_d = full_loop_B.ai_a / 0.22360679774997896;
                } else {
                  full_loop_B.temp_jw = full_loop_B.tempr_f /
                    0.22360679774997896;
                  full_loop_B.temp2_d = full_loop_B.ai_a / 0.22360679774997896;
                }

                full_loop_B.j_m = 20 * full_loop_B.ilastm1_j + full_loop_B.ilast;
                full_loop_B.tempr_f = full_loop_B.b_A[full_loop_B.j_m].re *
                  full_loop_B.anorm_o;
                full_loop_B.ai_a = full_loop_B.b_A[full_loop_B.j_m].im *
                  full_loop_B.anorm_o;
                if (full_loop_B.ai_a == 0.0) {
                  full_loop_B.tempr_f /= 0.22360679774997896;
                  full_loop_B.ai_a = 0.0;
                } else if (full_loop_B.tempr_f == 0.0) {
                  full_loop_B.tempr_f = 0.0;
                  full_loop_B.ai_a /= 0.22360679774997896;
                } else {
                  full_loop_B.tempr_f /= 0.22360679774997896;
                  full_loop_B.ai_a /= 0.22360679774997896;
                }

                full_loop_B.t1_e.re = ((full_loop_B.t1_g.re *
                  full_loop_B.t1_g.re - full_loop_B.t1_g.im *
                  full_loop_B.t1_g.im) + (full_loop_B.temp_jw *
                  full_loop_B.tempr_f - full_loop_B.temp2_d * full_loop_B.ai_a))
                  - (full_loop_B.ad11_i.re * full_loop_B.stemp_re_e -
                     full_loop_B.ad11_i.im * full_loop_B.stemp_im_n);
                full_loop_B.t1_tmp_c = full_loop_B.t1_g.re * full_loop_B.t1_g.im;
                full_loop_B.t1_e.im = ((full_loop_B.t1_tmp_c +
                  full_loop_B.t1_tmp_c) + (full_loop_B.temp_jw *
                  full_loop_B.ai_a + full_loop_B.temp2_d * full_loop_B.tempr_f))
                  - (full_loop_B.ad11_i.re * full_loop_B.stemp_im_n +
                     full_loop_B.ad11_i.im * full_loop_B.stemp_re_e);
                full_loop_B.ad11_i = full_loop_sqrt_p(full_loop_B.t1_e);
                if ((full_loop_B.t1_g.re - full_loop_B.stemp_re_e) *
                    full_loop_B.ad11_i.re + (full_loop_B.t1_g.im -
                     full_loop_B.stemp_im_n) * full_loop_B.ad11_i.im <= 0.0) {
                  full_loop_B.stemp_re_e = full_loop_B.t1_g.re +
                    full_loop_B.ad11_i.re;
                  full_loop_B.stemp_im_n = full_loop_B.t1_g.im +
                    full_loop_B.ad11_i.im;
                } else {
                  full_loop_B.stemp_re_e = full_loop_B.t1_g.re -
                    full_loop_B.ad11_i.re;
                  full_loop_B.stemp_im_n = full_loop_B.t1_g.im -
                    full_loop_B.ad11_i.im;
                }
              } else {
                full_loop_B.j_m = 20 * full_loop_B.ilastm1_j + full_loop_B.ilast;
                full_loop_B.tempr_f = full_loop_B.b_A[full_loop_B.j_m].re *
                  full_loop_B.anorm_o;
                full_loop_B.ai_a = full_loop_B.b_A[full_loop_B.j_m].im *
                  full_loop_B.anorm_o;
                if (full_loop_B.ai_a == 0.0) {
                  full_loop_B.temp_jw = full_loop_B.tempr_f /
                    0.22360679774997896;
                  full_loop_B.temp2_d = 0.0;
                } else if (full_loop_B.tempr_f == 0.0) {
                  full_loop_B.temp_jw = 0.0;
                  full_loop_B.temp2_d = full_loop_B.ai_a / 0.22360679774997896;
                } else {
                  full_loop_B.temp_jw = full_loop_B.tempr_f /
                    0.22360679774997896;
                  full_loop_B.temp2_d = full_loop_B.ai_a / 0.22360679774997896;
                }

                full_loop_B.eshift_re_o += full_loop_B.temp_jw;
                full_loop_B.eshift_im_d += full_loop_B.temp2_d;
                full_loop_B.stemp_re_e = full_loop_B.eshift_re_o;
                full_loop_B.stemp_im_n = full_loop_B.eshift_im_d;
              }

              full_loop_B.j_m = full_loop_B.ilastm1_j;
              full_loop_B.jp1_e = full_loop_B.ilastm1_j + 1;
              exitg2 = false;
              while ((!exitg2) && (full_loop_B.j_m + 1 > full_loop_B.ifirst_o))
              {
                full_loop_B.istart_e = full_loop_B.j_m + 1;
                full_loop_B.ctemp_tmp_e = 20 * full_loop_B.j_m + full_loop_B.j_m;
                full_loop_B.ctemp_d.re = full_loop_B.b_A[full_loop_B.ctemp_tmp_e]
                  .re * full_loop_B.anorm_o - full_loop_B.stemp_re_e *
                  0.22360679774997896;
                full_loop_B.ctemp_d.im = full_loop_B.b_A[full_loop_B.ctemp_tmp_e]
                  .im * full_loop_B.anorm_o - full_loop_B.stemp_im_n *
                  0.22360679774997896;
                full_loop_B.temp_jw = std::abs(full_loop_B.ctemp_d.re) + std::
                  abs(full_loop_B.ctemp_d.im);
                full_loop_B.jp1_e += 20 * full_loop_B.j_m;
                full_loop_B.temp2_d = (std::abs
                  (full_loop_B.b_A[full_loop_B.jp1_e].re) + std::abs
                  (full_loop_B.b_A[full_loop_B.jp1_e].im)) * full_loop_B.anorm_o;
                full_loop_B.tempr_f = full_loop_B.temp_jw;
                if (full_loop_B.temp2_d > full_loop_B.temp_jw) {
                  full_loop_B.tempr_f = full_loop_B.temp2_d;
                }

                if ((full_loop_B.tempr_f < 1.0) && (full_loop_B.tempr_f != 0.0))
                {
                  full_loop_B.temp_jw /= full_loop_B.tempr_f;
                  full_loop_B.temp2_d /= full_loop_B.tempr_f;
                }

                full_loop_B.jp1_e = (full_loop_B.j_m - 1) * 20 + full_loop_B.j_m;
                if ((std::abs(full_loop_B.b_A[full_loop_B.jp1_e].re) + std::abs
                     (full_loop_B.b_A[full_loop_B.jp1_e].im)) *
                    full_loop_B.temp2_d <= full_loop_B.temp_jw *
                    full_loop_B.b_atol_k) {
                  goto90 = true;
                  exitg2 = true;
                } else {
                  full_loop_B.jp1_e = full_loop_B.j_m;
                  full_loop_B.j_m--;
                }
              }

              if (!goto90) {
                full_loop_B.istart_e = full_loop_B.ifirst_o;
                full_loop_B.ctemp_tmp_e = ((full_loop_B.ifirst_o - 1) * 20 +
                  full_loop_B.ifirst_o) - 1;
                full_loop_B.ctemp_d.re = full_loop_B.b_A[full_loop_B.ctemp_tmp_e]
                  .re * full_loop_B.anorm_o - full_loop_B.stemp_re_e *
                  0.22360679774997896;
                full_loop_B.ctemp_d.im = full_loop_B.b_A[full_loop_B.ctemp_tmp_e]
                  .im * full_loop_B.anorm_o - full_loop_B.stemp_im_n *
                  0.22360679774997896;
              }

              goto90 = false;
              full_loop_B.j_m = (full_loop_B.istart_e - 1) * 20 +
                full_loop_B.istart_e;
              full_loop_B.ascale_c.re = full_loop_B.b_A[full_loop_B.j_m].re *
                full_loop_B.anorm_o;
              full_loop_B.ascale_c.im = full_loop_B.b_A[full_loop_B.j_m].im *
                full_loop_B.anorm_o;
              full_loop_xzlartg_p(full_loop_B.ctemp_d, full_loop_B.ascale_c,
                                  &full_loop_B.temp_jw, &full_loop_B.t1_g);
              full_loop_B.j_m = full_loop_B.istart_e;
              full_loop_B.jp1_e = full_loop_B.istart_e - 2;
              while (full_loop_B.j_m < full_loop_B.ilast + 1) {
                if (full_loop_B.j_m > full_loop_B.istart_e) {
                  full_loop_xzlartg(full_loop_B.b_A[(full_loop_B.j_m + 20 *
                    full_loop_B.jp1_e) - 1], full_loop_B.b_A[full_loop_B.j_m +
                                    20 * full_loop_B.jp1_e],
                                    &full_loop_B.temp_jw, &full_loop_B.t1_g,
                                    &full_loop_B.b_A[(full_loop_B.j_m + 20 *
                    full_loop_B.jp1_e) - 1]);
                  full_loop_B.jp1_e = full_loop_B.j_m + 20 * full_loop_B.jp1_e;
                  full_loop_B.b_A[full_loop_B.jp1_e].re = 0.0;
                  full_loop_B.b_A[full_loop_B.jp1_e].im = 0.0;
                }

                for (full_loop_B.i_my = full_loop_B.j_m; full_loop_B.i_my <=
                     full_loop_B.ilastm_l; full_loop_B.i_my++) {
                  full_loop_B.jp1_e = (full_loop_B.i_my - 1) * 20 +
                    full_loop_B.j_m;
                  full_loop_B.ctemp_tmp_e = full_loop_B.jp1_e - 1;
                  full_loop_B.stemp_re_e =
                    full_loop_B.b_A[full_loop_B.ctemp_tmp_e].re *
                    full_loop_B.temp_jw + (full_loop_B.b_A[full_loop_B.jp1_e].re
                    * full_loop_B.t1_g.re - full_loop_B.b_A[full_loop_B.jp1_e].
                    im * full_loop_B.t1_g.im);
                  full_loop_B.stemp_im_n =
                    full_loop_B.b_A[full_loop_B.ctemp_tmp_e].im *
                    full_loop_B.temp_jw + (full_loop_B.b_A[full_loop_B.jp1_e].im
                    * full_loop_B.t1_g.re + full_loop_B.b_A[full_loop_B.jp1_e].
                    re * full_loop_B.t1_g.im);
                  full_loop_B.temp2_d = full_loop_B.b_A[full_loop_B.ctemp_tmp_e]
                    .re;
                  full_loop_B.b_A[full_loop_B.jp1_e].re =
                    full_loop_B.b_A[full_loop_B.jp1_e].re * full_loop_B.temp_jw
                    - (full_loop_B.b_A[full_loop_B.ctemp_tmp_e].re *
                       full_loop_B.t1_g.re +
                       full_loop_B.b_A[full_loop_B.ctemp_tmp_e].im *
                       full_loop_B.t1_g.im);
                  full_loop_B.b_A[full_loop_B.jp1_e].im =
                    full_loop_B.b_A[full_loop_B.jp1_e].im * full_loop_B.temp_jw
                    - (full_loop_B.b_A[full_loop_B.ctemp_tmp_e].im *
                       full_loop_B.t1_g.re - full_loop_B.t1_g.im *
                       full_loop_B.temp2_d);
                  full_loop_B.b_A[full_loop_B.ctemp_tmp_e].re =
                    full_loop_B.stemp_re_e;
                  full_loop_B.b_A[full_loop_B.ctemp_tmp_e].im =
                    full_loop_B.stemp_im_n;
                }

                full_loop_B.t1_g.re = -full_loop_B.t1_g.re;
                full_loop_B.t1_g.im = -full_loop_B.t1_g.im;
                full_loop_B.b_x_j = full_loop_B.j_m + 2;
                if (full_loop_B.ilast + 1 < full_loop_B.j_m + 2) {
                  full_loop_B.b_x_j = full_loop_B.ilast + 1;
                }

                for (full_loop_B.i_my = full_loop_B.ifirst_o; full_loop_B.i_my <=
                     full_loop_B.b_x_j; full_loop_B.i_my++) {
                  full_loop_B.jp1_e = ((full_loop_B.j_m - 1) * 20 +
                                       full_loop_B.i_my) - 1;
                  full_loop_B.ctemp_tmp_e = (20 * full_loop_B.j_m +
                    full_loop_B.i_my) - 1;
                  full_loop_B.stemp_re_e = (full_loop_B.b_A[full_loop_B.jp1_e].
                    re * full_loop_B.t1_g.re - full_loop_B.b_A[full_loop_B.jp1_e]
                    .im * full_loop_B.t1_g.im) +
                    full_loop_B.b_A[full_loop_B.ctemp_tmp_e].re *
                    full_loop_B.temp_jw;
                  full_loop_B.stemp_im_n = (full_loop_B.b_A[full_loop_B.jp1_e].
                    im * full_loop_B.t1_g.re + full_loop_B.b_A[full_loop_B.jp1_e]
                    .re * full_loop_B.t1_g.im) +
                    full_loop_B.b_A[full_loop_B.ctemp_tmp_e].im *
                    full_loop_B.temp_jw;
                  full_loop_B.temp2_d = full_loop_B.b_A[full_loop_B.ctemp_tmp_e]
                    .re;
                  full_loop_B.b_A[full_loop_B.jp1_e].re =
                    full_loop_B.b_A[full_loop_B.jp1_e].re * full_loop_B.temp_jw
                    - (full_loop_B.b_A[full_loop_B.ctemp_tmp_e].re *
                       full_loop_B.t1_g.re +
                       full_loop_B.b_A[full_loop_B.ctemp_tmp_e].im *
                       full_loop_B.t1_g.im);
                  full_loop_B.b_A[full_loop_B.jp1_e].im =
                    full_loop_B.b_A[full_loop_B.jp1_e].im * full_loop_B.temp_jw
                    - (full_loop_B.b_A[full_loop_B.ctemp_tmp_e].im *
                       full_loop_B.t1_g.re - full_loop_B.t1_g.im *
                       full_loop_B.temp2_d);
                  full_loop_B.b_A[full_loop_B.ctemp_tmp_e].re =
                    full_loop_B.stemp_re_e;
                  full_loop_B.b_A[full_loop_B.ctemp_tmp_e].im =
                    full_loop_B.stemp_im_n;
                }

                full_loop_B.jp1_e = full_loop_B.j_m - 1;
                full_loop_B.j_m++;
              }
            }

            full_loop_B.jiter_c++;
          }
        } else {
          for (full_loop_B.i_my = 0; full_loop_B.i_my < 20; full_loop_B.i_my++)
          {
            alpha1[full_loop_B.i_my].re = (rtNaN);
            alpha1[full_loop_B.i_my].im = 0.0;
            beta1[full_loop_B.i_my].re = (rtNaN);
            beta1[full_loop_B.i_my].im = 0.0;
          }

          *info = 1;
          exitg1 = 1;
        }
      } else {
        guard2 = true;
        exitg1 = 1;
      }
    } while (exitg1 == 0);
  } else {
    guard1 = true;
  }

  if (guard2) {
    if (failed) {
      *info = full_loop_B.ilast + 1;
      for (full_loop_B.ifirst_o = 0; full_loop_B.ifirst_o <= full_loop_B.ilast;
           full_loop_B.ifirst_o++) {
        alpha1[full_loop_B.ifirst_o].re = (rtNaN);
        alpha1[full_loop_B.ifirst_o].im = 0.0;
        beta1[full_loop_B.ifirst_o].re = (rtNaN);
        beta1[full_loop_B.ifirst_o].im = 0.0;
      }
    } else {
      guard1 = true;
    }
  }

  if (guard1) {
    full_loop_B.ilast = ilo - 2;
    for (full_loop_B.ifirst_o = 0; full_loop_B.ifirst_o <= full_loop_B.ilast;
         full_loop_B.ifirst_o++) {
      alpha1[full_loop_B.ifirst_o] = full_loop_B.b_A[20 * full_loop_B.ifirst_o +
        full_loop_B.ifirst_o];
    }
  }
}

void full_loopModelClass::full_loop_xzlascl_p43r(real_T cfrom, real_T cto,
  creal_T A[20])
{
  boolean_T notdone;
  int32_T i;
  full_loop_B.cfromc_j = cfrom;
  full_loop_B.ctoc_k = cto;
  notdone = true;
  while (notdone) {
    full_loop_B.cfrom1_kp = full_loop_B.cfromc_j * 2.0041683600089728E-292;
    full_loop_B.cto1_a = full_loop_B.ctoc_k / 4.9896007738368E+291;
    if ((std::abs(full_loop_B.cfrom1_kp) > std::abs(full_loop_B.ctoc_k)) &&
        (full_loop_B.ctoc_k != 0.0)) {
      full_loop_B.mul_k = 2.0041683600089728E-292;
      full_loop_B.cfromc_j = full_loop_B.cfrom1_kp;
    } else if (std::abs(full_loop_B.cto1_a) > std::abs(full_loop_B.cfromc_j)) {
      full_loop_B.mul_k = 4.9896007738368E+291;
      full_loop_B.ctoc_k = full_loop_B.cto1_a;
    } else {
      full_loop_B.mul_k = full_loop_B.ctoc_k / full_loop_B.cfromc_j;
      notdone = false;
    }

    for (i = 0; i < 20; i++) {
      A[i].re *= full_loop_B.mul_k;
      A[i].im *= full_loop_B.mul_k;
    }
  }
}

void full_loopModelClass::full_loop_xzgeev(const real_T A[400], int32_T *info,
  creal_T alpha1[20], creal_T beta1[20])
{
  boolean_T ilascl;
  for (full_loop_B.i_cfh = 0; full_loop_B.i_cfh < 400; full_loop_B.i_cfh++) {
    full_loop_B.b_At[full_loop_B.i_cfh].re = A[full_loop_B.i_cfh];
    full_loop_B.b_At[full_loop_B.i_cfh].im = 0.0;
    full_loop_B.At[full_loop_B.i_cfh].re = A[full_loop_B.i_cfh];
    full_loop_B.At[full_loop_B.i_cfh].im = 0.0;
  }

  *info = 0;
  full_loop_B.anrm_h = full_loop_xzlangeM(full_loop_B.At);
  if (!full_loop_isfinite_p(full_loop_B.anrm_h)) {
    for (full_loop_B.i_cfh = 0; full_loop_B.i_cfh < 20; full_loop_B.i_cfh++) {
      alpha1[full_loop_B.i_cfh].re = (rtNaN);
      alpha1[full_loop_B.i_cfh].im = 0.0;
      beta1[full_loop_B.i_cfh].re = (rtNaN);
      beta1[full_loop_B.i_cfh].im = 0.0;
    }
  } else {
    ilascl = false;
    full_loop_B.anrmto_d = full_loop_B.anrm_h;
    if ((full_loop_B.anrm_h > 0.0) && (full_loop_B.anrm_h <
         6.7178761075670888E-139)) {
      full_loop_B.anrmto_d = 6.7178761075670888E-139;
      ilascl = true;
      full_loop_xzlascl(full_loop_B.anrm_h, full_loop_B.anrmto_d, full_loop_B.At,
                        full_loop_B.b_At);
    } else {
      if (full_loop_B.anrm_h > 1.4885657073574029E+138) {
        full_loop_B.anrmto_d = 1.4885657073574029E+138;
        ilascl = true;
        full_loop_xzlascl(full_loop_B.anrm_h, full_loop_B.anrmto_d,
                          full_loop_B.At, full_loop_B.b_At);
      }
    }

    full_loop_xzggbal(full_loop_B.b_At, full_loop_B.At, &full_loop_B.i_cfh,
                      &full_loop_B.ihi, full_loop_B.rscale);
    full_loop_xzgghrd(full_loop_B.i_cfh, full_loop_B.ihi, full_loop_B.At,
                      full_loop_B.b_At);
    full_loop_xzhgeqz(full_loop_B.b_At, full_loop_B.i_cfh, full_loop_B.ihi, info,
                      alpha1, beta1);
    if ((*info == 0) && ilascl) {
      full_loop_xzlascl_p43r(full_loop_B.anrmto_d, full_loop_B.anrm_h, alpha1);
    }
  }
}

real_T full_loopModelClass::full_loop_xnrm2_p(int32_T n, const real_T x[400],
  int32_T ix0)
{
  real_T y;
  int32_T k;
  y = 0.0;
  if (n >= 1) {
    if (n == 1) {
      y = std::abs(x[ix0 - 1]);
    } else {
      full_loop_B.scale_d = 3.3121686421112381E-170;
      full_loop_B.kend = ix0 + n;
      for (k = ix0; k < full_loop_B.kend; k++) {
        full_loop_B.absxk_o = std::abs(x[k - 1]);
        if (full_loop_B.absxk_o > full_loop_B.scale_d) {
          full_loop_B.t_l = full_loop_B.scale_d / full_loop_B.absxk_o;
          y = y * full_loop_B.t_l * full_loop_B.t_l + 1.0;
          full_loop_B.scale_d = full_loop_B.absxk_o;
        } else {
          full_loop_B.t_l = full_loop_B.absxk_o / full_loop_B.scale_d;
          y += full_loop_B.t_l * full_loop_B.t_l;
        }
      }

      y = full_loop_B.scale_d * std::sqrt(y);
    }
  }

  return y;
}

void full_loopModelClass::full_loop_xzlarfg_p(int32_T n, real_T alpha1, const
  real_T x[400], int32_T ix0, real_T *b_alpha1, real_T b_x[400], real_T *tau)
{
  std::memcpy(&b_x[0], &x[0], 400U * sizeof(real_T));
  *b_alpha1 = alpha1;
  *tau = 0.0;
  if (n > 0) {
    full_loop_B.xnorm_e = full_loop_xnrm2_p(n - 1, x, ix0);
    if (full_loop_B.xnorm_e != 0.0) {
      full_loop_B.xnorm_e = full_loop_rt_hypotd_snf(alpha1, full_loop_B.xnorm_e);
      if (alpha1 >= 0.0) {
        full_loop_B.xnorm_e = -full_loop_B.xnorm_e;
      }

      if (std::abs(full_loop_B.xnorm_e) < 1.0020841800044864E-292) {
        full_loop_B.knt = -1;
        full_loop_B.b_tmp = ix0 + n;
        do {
          full_loop_B.knt++;
          for (full_loop_B.k_co = ix0; full_loop_B.k_co <= full_loop_B.b_tmp - 2;
               full_loop_B.k_co++) {
            b_x[full_loop_B.k_co - 1] *= 9.9792015476736E+291;
          }

          full_loop_B.xnorm_e *= 9.9792015476736E+291;
          *b_alpha1 *= 9.9792015476736E+291;
        } while (!(std::abs(full_loop_B.xnorm_e) >= 1.0020841800044864E-292));

        full_loop_B.xnorm_e = full_loop_rt_hypotd_snf(*b_alpha1,
          full_loop_xnrm2_p(n - 1, b_x, ix0));
        if (*b_alpha1 >= 0.0) {
          full_loop_B.xnorm_e = -full_loop_B.xnorm_e;
        }

        *tau = (full_loop_B.xnorm_e - *b_alpha1) / full_loop_B.xnorm_e;
        *b_alpha1 = 1.0 / (*b_alpha1 - full_loop_B.xnorm_e);
        for (full_loop_B.k_co = ix0; full_loop_B.k_co <= full_loop_B.b_tmp - 2;
             full_loop_B.k_co++) {
          b_x[full_loop_B.k_co - 1] *= *b_alpha1;
        }

        for (full_loop_B.k_co = 0; full_loop_B.k_co <= full_loop_B.knt;
             full_loop_B.k_co++) {
          full_loop_B.xnorm_e *= 1.0020841800044864E-292;
        }

        *b_alpha1 = full_loop_B.xnorm_e;
      } else {
        *tau = (full_loop_B.xnorm_e - alpha1) / full_loop_B.xnorm_e;
        *b_alpha1 = 1.0 / (alpha1 - full_loop_B.xnorm_e);
        full_loop_B.knt = ix0 + n;
        for (full_loop_B.k_co = ix0; full_loop_B.k_co <= full_loop_B.knt - 2;
             full_loop_B.k_co++) {
          b_x[full_loop_B.k_co - 1] *= *b_alpha1;
        }

        *b_alpha1 = full_loop_B.xnorm_e;
      }
    }
  }
}

void full_loopModelClass::full_loop_xzlarf_p43rio(int32_T n, int32_T iv0, real_T
  tau, const real_T C[400], int32_T ic0, real_T work[20], real_T b_C[400])
{
  int32_T jy;
  int32_T exitg1;
  boolean_T exitg2;
  std::memcpy(&b_C[0], &C[0], 400U * sizeof(real_T));
  if (tau != 0.0) {
    full_loop_B.lastv_f = n;
    full_loop_B.lastc_h = (iv0 + n) - 2;
    while ((full_loop_B.lastv_f > 0) && (C[full_loop_B.lastc_h] == 0.0)) {
      full_loop_B.lastv_f--;
      full_loop_B.lastc_h--;
    }

    full_loop_B.lastc_h = 20;
    exitg2 = false;
    while ((!exitg2) && (full_loop_B.lastc_h > 0)) {
      full_loop_B.rowleft = (ic0 + full_loop_B.lastc_h) - 1;
      full_loop_B.ia_b = full_loop_B.rowleft;
      do {
        exitg1 = 0;
        if (full_loop_B.ia_b <= (full_loop_B.lastv_f - 1) * 20 +
            full_loop_B.rowleft) {
          if (C[full_loop_B.ia_b - 1] != 0.0) {
            exitg1 = 1;
          } else {
            full_loop_B.ia_b += 20;
          }
        } else {
          full_loop_B.lastc_h--;
          exitg1 = 2;
        }
      } while (exitg1 == 0);

      if (exitg1 == 1) {
        exitg2 = true;
      }
    }
  } else {
    full_loop_B.lastv_f = 0;
    full_loop_B.lastc_h = 0;
  }

  if (full_loop_B.lastv_f > 0) {
    if (full_loop_B.lastc_h != 0) {
      if (0 <= full_loop_B.lastc_h - 1) {
        std::memset(&work[0], 0, full_loop_B.lastc_h * sizeof(real_T));
      }

      full_loop_B.rowleft = iv0 - 1;
      full_loop_B.jA_p = (full_loop_B.lastv_f - 1) * 20 + ic0;
      for (full_loop_B.iac_f = ic0; full_loop_B.iac_f <= full_loop_B.jA_p;
           full_loop_B.iac_f += 20) {
        jy = 0;
        full_loop_B.d_lt = full_loop_B.iac_f + full_loop_B.lastc_h;
        for (full_loop_B.ia_b = full_loop_B.iac_f; full_loop_B.ia_b <
             full_loop_B.d_lt; full_loop_B.ia_b++) {
          work[jy] += b_C[full_loop_B.ia_b - 1] * b_C[full_loop_B.rowleft];
          jy++;
        }

        full_loop_B.rowleft++;
      }
    }

    if (!(-tau == 0.0)) {
      full_loop_B.jA_p = ic0;
      jy = iv0 - 1;
      for (full_loop_B.ia_b = 0; full_loop_B.ia_b < full_loop_B.lastv_f;
           full_loop_B.ia_b++) {
        if (b_C[jy] != 0.0) {
          full_loop_B.temp_l = b_C[jy] * -tau;
          full_loop_B.rowleft = 0;
          full_loop_B.d_lt = (full_loop_B.lastc_h + full_loop_B.jA_p) - 1;
          for (full_loop_B.iac_f = full_loop_B.jA_p; full_loop_B.iac_f <=
               full_loop_B.d_lt; full_loop_B.iac_f++) {
            b_C[full_loop_B.iac_f - 1] += work[full_loop_B.rowleft] *
              full_loop_B.temp_l;
            full_loop_B.rowleft++;
          }
        }

        jy++;
        full_loop_B.jA_p += 20;
      }
    }
  }
}

void full_loopModelClass::full_loop_xzlarf_p43riob(int32_T m, int32_T n, int32_T
  iv0, real_T tau, const real_T C[400], int32_T ic0, real_T work[20], real_T
  b_C[400])
{
  int32_T jy;
  int32_T exitg1;
  boolean_T exitg2;
  std::memcpy(&b_C[0], &C[0], 400U * sizeof(real_T));
  if (tau != 0.0) {
    full_loop_B.lastv_n = m;
    full_loop_B.lastc_p = (iv0 + m) - 2;
    while ((full_loop_B.lastv_n > 0) && (C[full_loop_B.lastc_p] == 0.0)) {
      full_loop_B.lastv_n--;
      full_loop_B.lastc_p--;
    }

    full_loop_B.lastc_p = n;
    exitg2 = false;
    while ((!exitg2) && (full_loop_B.lastc_p > 0)) {
      full_loop_B.coltop = (full_loop_B.lastc_p - 1) * 20 + ic0;
      full_loop_B.ia_d = full_loop_B.coltop;
      do {
        exitg1 = 0;
        if (full_loop_B.ia_d <= (full_loop_B.coltop + full_loop_B.lastv_n) - 1)
        {
          if (C[full_loop_B.ia_d - 1] != 0.0) {
            exitg1 = 1;
          } else {
            full_loop_B.ia_d++;
          }
        } else {
          full_loop_B.lastc_p--;
          exitg1 = 2;
        }
      } while (exitg1 == 0);

      if (exitg1 == 1) {
        exitg2 = true;
      }
    }

    full_loop_B.lastc_p--;
  } else {
    full_loop_B.lastv_n = 0;
    full_loop_B.lastc_p = -1;
  }

  if (full_loop_B.lastv_n > 0) {
    if (full_loop_B.lastc_p + 1 != 0) {
      if (0 <= full_loop_B.lastc_p) {
        std::memset(&work[0], 0, (full_loop_B.lastc_p + 1) * sizeof(real_T));
      }

      full_loop_B.jA_m = 0;
      jy = 20 * full_loop_B.lastc_p + ic0;
      for (full_loop_B.iac_a3 = ic0; full_loop_B.iac_a3 <= jy;
           full_loop_B.iac_a3 += 20) {
        full_loop_B.coltop = iv0 - 1;
        full_loop_B.c_eb = 0.0;
        full_loop_B.d_ee = full_loop_B.iac_a3 + full_loop_B.lastv_n;
        for (full_loop_B.ia_d = full_loop_B.iac_a3; full_loop_B.ia_d <
             full_loop_B.d_ee; full_loop_B.ia_d++) {
          full_loop_B.c_eb += b_C[full_loop_B.ia_d - 1] * b_C[full_loop_B.coltop];
          full_loop_B.coltop++;
        }

        work[full_loop_B.jA_m] += full_loop_B.c_eb;
        full_loop_B.jA_m++;
      }
    }

    if (!(-tau == 0.0)) {
      full_loop_B.jA_m = ic0;
      jy = 0;
      for (full_loop_B.ia_d = 0; full_loop_B.ia_d <= full_loop_B.lastc_p;
           full_loop_B.ia_d++) {
        if (work[jy] != 0.0) {
          full_loop_B.c_eb = work[jy] * -tau;
          full_loop_B.coltop = iv0 - 1;
          full_loop_B.d_ee = (full_loop_B.lastv_n + full_loop_B.jA_m) - 1;
          for (full_loop_B.iac_a3 = full_loop_B.jA_m; full_loop_B.iac_a3 <=
               full_loop_B.d_ee; full_loop_B.iac_a3++) {
            b_C[full_loop_B.iac_a3 - 1] += b_C[full_loop_B.coltop] *
              full_loop_B.c_eb;
            full_loop_B.coltop++;
          }
        }

        jy++;
        full_loop_B.jA_m += 20;
      }
    }
  }
}

void full_loopModelClass::full_loop_xgehrd(const real_T a[400], real_T b_a[400])
{
  std::memcpy(&b_a[0], &a[0], 400U * sizeof(real_T));
  std::memset(&full_loop_B.work[0], 0, 20U * sizeof(real_T));
  for (full_loop_B.b_i_b = 0; full_loop_B.b_i_b < 19; full_loop_B.b_i_b++) {
    full_loop_B.im1n = full_loop_B.b_i_b * 20 + 2;
    full_loop_B.in = (full_loop_B.b_i_b + 1) * 20 + 1;
    full_loop_B.u0_e = full_loop_B.b_i_b + 3;
    if (full_loop_B.u0_e >= 20) {
      full_loop_B.u0_e = 20;
    }

    std::memcpy(&full_loop_B.b_a[0], &b_a[0], 400U * sizeof(real_T));
    full_loop_xzlarfg_p(19 - full_loop_B.b_i_b, b_a[(full_loop_B.b_i_b + 20 *
      full_loop_B.b_i_b) + 1], full_loop_B.b_a, full_loop_B.u0_e +
                        full_loop_B.b_i_b * 20, &full_loop_B.b_alpha1, b_a,
                        &full_loop_B.tau);
    full_loop_B.u0_e = (full_loop_B.b_i_b + 20 * full_loop_B.b_i_b) + 1;
    b_a[full_loop_B.u0_e] = 1.0;
    full_loop_xzlarf_p43rio(19 - full_loop_B.b_i_b, full_loop_B.b_i_b +
      full_loop_B.im1n, full_loop_B.tau, b_a, full_loop_B.in, full_loop_B.work,
      full_loop_B.b_a);
    full_loop_xzlarf_p43riob(19 - full_loop_B.b_i_b, 19 - full_loop_B.b_i_b,
      full_loop_B.b_i_b + full_loop_B.im1n, full_loop_B.tau, full_loop_B.b_a,
      (full_loop_B.b_i_b + full_loop_B.in) + 1, full_loop_B.work, b_a);
    b_a[full_loop_B.u0_e] = full_loop_B.b_alpha1;
  }
}

void full_loopModelClass::full_loop_xrot_p(int32_T n, const real_T x[400],
  int32_T ix0, int32_T iy0, real_T c, real_T s, real_T b_x[400])
{
  int32_T ix;
  int32_T iy;
  real_T temp;
  int32_T k;
  std::memcpy(&b_x[0], &x[0], 400U * sizeof(real_T));
  if (n >= 1) {
    ix = ix0 - 1;
    iy = iy0 - 1;
    for (k = 0; k < n; k++) {
      temp = c * b_x[ix] + s * b_x[iy];
      b_x[iy] = c * b_x[iy] - s * b_x[ix];
      b_x[ix] = temp;
      iy += 20;
      ix += 20;
    }
  }
}

void full_loopModelClass::full_loop_eml_dlahqr(const real_T h[400], real_T b_h
  [400], int32_T *info)
{
  boolean_T goto150;
  boolean_T exitg1;
  boolean_T exitg2;
  boolean_T exitg3;
  std::memcpy(&b_h[0], &h[0], 400U * sizeof(real_T));
  *info = 0;
  full_loop_B.v_p4[0] = 0.0;
  full_loop_B.v_p4[1] = 0.0;
  full_loop_B.v_p4[2] = 0.0;
  for (full_loop_B.L = 0; full_loop_B.L < 17; full_loop_B.L++) {
    full_loop_B.hoffset = full_loop_B.L + 20 * full_loop_B.L;
    b_h[full_loop_B.hoffset + 2] = 0.0;
    b_h[full_loop_B.hoffset + 3] = 0.0;
  }

  b_h[359] = 0.0;
  full_loop_B.i_m = 19;
  exitg1 = false;
  while ((!exitg1) && (full_loop_B.i_m + 1 >= 1)) {
    full_loop_B.L = 1;
    goto150 = false;
    full_loop_B.ix_i = 0;
    exitg2 = false;
    while ((!exitg2) && (full_loop_B.ix_i < 601)) {
      full_loop_B.k_nb = full_loop_B.i_m;
      exitg3 = false;
      while ((!exitg3) && (full_loop_B.k_nb + 1 > full_loop_B.L)) {
        full_loop_B.hoffset = (full_loop_B.k_nb - 1) * 20 + full_loop_B.k_nb;
        full_loop_B.ba = std::abs(b_h[full_loop_B.hoffset]);
        if (full_loop_B.ba <= 2.0041683600089728E-291) {
          exitg3 = true;
        } else {
          full_loop_B.m_e = 20 * full_loop_B.k_nb + full_loop_B.k_nb;
          full_loop_B.bb = std::abs(b_h[full_loop_B.m_e]);
          full_loop_B.tst_tmp = full_loop_B.hoffset - 1;
          full_loop_B.tst = std::abs(b_h[full_loop_B.tst_tmp]) + full_loop_B.bb;
          if (full_loop_B.tst == 0.0) {
            if (full_loop_B.k_nb - 1 >= 1) {
              full_loop_B.tst = std::abs(b_h[((full_loop_B.k_nb - 2) * 20 +
                full_loop_B.k_nb) - 1]);
            }

            if (full_loop_B.k_nb + 2 <= 20) {
              full_loop_B.tst += std::abs(b_h[(20 * full_loop_B.k_nb +
                full_loop_B.k_nb) + 1]);
            }
          }

          if (full_loop_B.ba <= 2.2204460492503131E-16 * full_loop_B.tst) {
            full_loop_B.tst = std::abs(b_h[full_loop_B.m_e - 1]);
            if (full_loop_B.ba > full_loop_B.tst) {
              full_loop_B.ab = full_loop_B.ba;
              full_loop_B.ba = full_loop_B.tst;
            } else {
              full_loop_B.ab = full_loop_B.tst;
            }

            full_loop_B.tst = std::abs(b_h[full_loop_B.tst_tmp] -
              b_h[full_loop_B.m_e]);
            if (full_loop_B.bb > full_loop_B.tst) {
              full_loop_B.aa = full_loop_B.bb;
              full_loop_B.bb = full_loop_B.tst;
            } else {
              full_loop_B.aa = full_loop_B.tst;
            }

            full_loop_B.tst = full_loop_B.aa + full_loop_B.ab;
            full_loop_B.bb = full_loop_B.aa / full_loop_B.tst * full_loop_B.bb *
              2.2204460492503131E-16;
            if ((2.0041683600089728E-291 > full_loop_B.bb) || rtIsNaN
                (full_loop_B.bb)) {
              full_loop_B.bb = 2.0041683600089728E-291;
            }

            if (full_loop_B.ab / full_loop_B.tst * full_loop_B.ba <=
                full_loop_B.bb) {
              exitg3 = true;
            } else {
              full_loop_B.k_nb--;
            }
          } else {
            full_loop_B.k_nb--;
          }
        }
      }

      full_loop_B.L = full_loop_B.k_nb + 1;
      if (full_loop_B.k_nb + 1 > 1) {
        b_h[full_loop_B.k_nb + 20 * (full_loop_B.k_nb - 1)] = 0.0;
      }

      if (full_loop_B.k_nb + 1 >= full_loop_B.i_m) {
        goto150 = true;
        exitg2 = true;
      } else {
        if (full_loop_B.ix_i == 10) {
          full_loop_B.tst_tmp = 20 * full_loop_B.k_nb + full_loop_B.k_nb;
          full_loop_B.tst = std::abs(b_h[((full_loop_B.k_nb + 1) * 20 +
            full_loop_B.k_nb) + 2]) + std::abs(b_h[full_loop_B.tst_tmp + 1]);
          full_loop_B.ab = b_h[full_loop_B.tst_tmp] + 0.75 * full_loop_B.tst;
          full_loop_B.h12 = -0.4375 * full_loop_B.tst;
          full_loop_B.aa = full_loop_B.tst;
          full_loop_B.ba = full_loop_B.ab;
        } else if (full_loop_B.ix_i == 20) {
          full_loop_B.tst = std::abs(b_h[((full_loop_B.i_m - 2) * 20 +
            full_loop_B.i_m) - 1]) + std::abs(b_h[(full_loop_B.i_m - 1) * 20 +
            full_loop_B.i_m]);
          full_loop_B.ab = b_h[20 * full_loop_B.i_m + full_loop_B.i_m] + 0.75 *
            full_loop_B.tst;
          full_loop_B.h12 = -0.4375 * full_loop_B.tst;
          full_loop_B.aa = full_loop_B.tst;
          full_loop_B.ba = full_loop_B.ab;
        } else {
          full_loop_B.m_e = (full_loop_B.i_m - 1) * 20 + full_loop_B.i_m;
          full_loop_B.ab = b_h[full_loop_B.m_e - 1];
          full_loop_B.aa = b_h[full_loop_B.m_e];
          full_loop_B.h12 = b_h[(20 * full_loop_B.i_m + full_loop_B.i_m) - 1];
          full_loop_B.ba = b_h[20 * full_loop_B.i_m + full_loop_B.i_m];
        }

        full_loop_B.tst = ((std::abs(full_loop_B.ab) + std::abs(full_loop_B.h12))
                           + std::abs(full_loop_B.aa)) + std::abs(full_loop_B.ba);
        if (full_loop_B.tst == 0.0) {
          full_loop_B.ab = 0.0;
          full_loop_B.ba = 0.0;
          full_loop_B.bb = 0.0;
          full_loop_B.aa = 0.0;
        } else {
          full_loop_B.ab /= full_loop_B.tst;
          full_loop_B.aa /= full_loop_B.tst;
          full_loop_B.h12 /= full_loop_B.tst;
          full_loop_B.ba /= full_loop_B.tst;
          full_loop_B.bb = (full_loop_B.ab + full_loop_B.ba) / 2.0;
          full_loop_B.ab = (full_loop_B.ab - full_loop_B.bb) * (full_loop_B.ba -
            full_loop_B.bb) - full_loop_B.h12 * full_loop_B.aa;
          full_loop_B.aa = std::sqrt(std::abs(full_loop_B.ab));
          if (full_loop_B.ab >= 0.0) {
            full_loop_B.ab = full_loop_B.bb * full_loop_B.tst;
            full_loop_B.bb = full_loop_B.ab;
            full_loop_B.ba = full_loop_B.aa * full_loop_B.tst;
            full_loop_B.aa = -full_loop_B.ba;
          } else {
            full_loop_B.ab = full_loop_B.bb + full_loop_B.aa;
            full_loop_B.bb -= full_loop_B.aa;
            if (std::abs(full_loop_B.ab - full_loop_B.ba) <= std::abs
                (full_loop_B.bb - full_loop_B.ba)) {
              full_loop_B.ab *= full_loop_B.tst;
              full_loop_B.bb = full_loop_B.ab;
            } else {
              full_loop_B.bb *= full_loop_B.tst;
              full_loop_B.ab = full_loop_B.bb;
            }

            full_loop_B.ba = 0.0;
            full_loop_B.aa = 0.0;
          }
        }

        full_loop_B.m_e = full_loop_B.i_m - 2;
        exitg3 = false;
        while ((!exitg3) && (full_loop_B.m_e + 1 >= full_loop_B.k_nb + 1)) {
          full_loop_B.tst_tmp = 20 * full_loop_B.m_e + full_loop_B.m_e;
          full_loop_B.hoffset = full_loop_B.tst_tmp + 1;
          full_loop_B.h12 = b_h[full_loop_B.tst_tmp] - full_loop_B.bb;
          full_loop_B.tst = (std::abs(full_loop_B.h12) + std::abs(full_loop_B.aa))
            + std::abs(b_h[full_loop_B.hoffset]);
          full_loop_B.h21s = b_h[full_loop_B.hoffset] / full_loop_B.tst;
          full_loop_B.hoffset = (full_loop_B.m_e + 1) * 20 + full_loop_B.m_e;
          full_loop_B.v_p4[0] = (full_loop_B.h12 / full_loop_B.tst *
            (b_h[full_loop_B.tst_tmp] - full_loop_B.ab) +
            b_h[full_loop_B.hoffset] * full_loop_B.h21s) - full_loop_B.aa /
            full_loop_B.tst * full_loop_B.ba;
          full_loop_B.nr = full_loop_B.hoffset + 1;
          full_loop_B.v_p4[1] = (((b_h[full_loop_B.nr] + b_h[full_loop_B.tst_tmp])
            - full_loop_B.ab) - full_loop_B.bb) * full_loop_B.h21s;
          full_loop_B.v_p4[2] = b_h[full_loop_B.hoffset + 2] * full_loop_B.h21s;
          full_loop_B.tst = (std::abs(full_loop_B.v_p4[0]) + std::abs
                             (full_loop_B.v_p4[1])) + std::abs(full_loop_B.v_p4
            [2]);
          full_loop_B.v_p4[0] /= full_loop_B.tst;
          full_loop_B.v_p4[1] /= full_loop_B.tst;
          full_loop_B.v_p4[2] /= full_loop_B.tst;
          if (full_loop_B.m_e + 1 == full_loop_B.k_nb + 1) {
            exitg3 = true;
          } else {
            full_loop_B.hoffset = (full_loop_B.m_e - 1) * 20 + full_loop_B.m_e;
            if (std::abs(b_h[full_loop_B.hoffset]) * (std::abs(full_loop_B.v_p4
                  [1]) + std::abs(full_loop_B.v_p4[2])) <= ((std::abs
                  (b_h[full_loop_B.hoffset - 1]) + std::abs
                  (b_h[full_loop_B.tst_tmp])) + std::abs(b_h[full_loop_B.nr])) *
                (2.2204460492503131E-16 * std::abs(full_loop_B.v_p4[0]))) {
              exitg3 = true;
            } else {
              full_loop_B.m_e--;
            }
          }
        }

        for (full_loop_B.tst_tmp = full_loop_B.m_e + 1; full_loop_B.tst_tmp <=
             full_loop_B.i_m; full_loop_B.tst_tmp++) {
          full_loop_B.nr = (full_loop_B.i_m - full_loop_B.tst_tmp) + 2;
          if (3 < full_loop_B.nr) {
            full_loop_B.nr = 3;
          }

          if (full_loop_B.tst_tmp > full_loop_B.m_e + 1) {
            full_loop_B.hoffset = ((full_loop_B.tst_tmp - 2) * 20 +
              full_loop_B.tst_tmp) - 2;
            for (full_loop_B.c_j_ce = 0; full_loop_B.c_j_ce < full_loop_B.nr;
                 full_loop_B.c_j_ce++) {
              full_loop_B.v_p4[full_loop_B.c_j_ce] = b_h[(full_loop_B.c_j_ce +
                full_loop_B.hoffset) + 1];
            }
          }

          full_loop_B.b_v[0] = full_loop_B.v_p4[0];
          full_loop_B.b_v[1] = full_loop_B.v_p4[1];
          full_loop_B.b_v[2] = full_loop_B.v_p4[2];
          full_loop_xzlarfg_p43r(full_loop_B.nr, full_loop_B.v_p4[0],
            full_loop_B.b_v, &full_loop_B.ba, &full_loop_B.tst);
          full_loop_B.v_p4[1] = full_loop_B.b_v[1];
          full_loop_B.v_p4[2] = full_loop_B.b_v[2];
          full_loop_B.v_p4[0] = full_loop_B.ba;
          if (full_loop_B.tst_tmp > full_loop_B.m_e + 1) {
            full_loop_B.hoffset = full_loop_B.tst_tmp + 20 *
              (full_loop_B.tst_tmp - 2);
            b_h[full_loop_B.hoffset - 1] = full_loop_B.ba;
            b_h[full_loop_B.hoffset] = 0.0;
            if (full_loop_B.tst_tmp < full_loop_B.i_m) {
              b_h[full_loop_B.hoffset + 1] = 0.0;
            }
          } else {
            if (full_loop_B.m_e + 1 > full_loop_B.k_nb + 1) {
              full_loop_B.hoffset = ((full_loop_B.tst_tmp - 2) * 20 +
                full_loop_B.tst_tmp) - 1;
              b_h[full_loop_B.hoffset] *= 1.0 - full_loop_B.tst;
            }
          }

          full_loop_B.ba = full_loop_B.b_v[1];
          full_loop_B.ab = full_loop_B.tst * full_loop_B.b_v[1];
          if (full_loop_B.nr == 3) {
            full_loop_B.aa = full_loop_B.b_v[2];
            full_loop_B.h12 = full_loop_B.tst * full_loop_B.b_v[2];
            for (full_loop_B.d_j_b = full_loop_B.tst_tmp; full_loop_B.d_j_b < 21;
                 full_loop_B.d_j_b++) {
              full_loop_B.hoffset = (full_loop_B.d_j_b - 1) * 20 +
                full_loop_B.tst_tmp;
              full_loop_B.nr = full_loop_B.hoffset - 1;
              full_loop_B.c_j_ce = full_loop_B.hoffset + 1;
              full_loop_B.bb = (b_h[full_loop_B.nr] + b_h[full_loop_B.hoffset] *
                                full_loop_B.ba) + b_h[full_loop_B.c_j_ce] *
                full_loop_B.aa;
              b_h[full_loop_B.nr] -= full_loop_B.bb * full_loop_B.tst;
              b_h[full_loop_B.hoffset] -= full_loop_B.bb * full_loop_B.ab;
              b_h[full_loop_B.c_j_ce] -= full_loop_B.bb * full_loop_B.h12;
            }

            full_loop_B.hoffset = full_loop_B.tst_tmp + 3;
            full_loop_B.nr = full_loop_B.i_m + 1;
            if (full_loop_B.hoffset < full_loop_B.nr) {
              full_loop_B.nr = full_loop_B.hoffset;
            }

            full_loop_B.d_j_b = full_loop_B.nr - 1;
            for (full_loop_B.e_j_p = 0; full_loop_B.e_j_p <= full_loop_B.d_j_b;
                 full_loop_B.e_j_p++) {
              full_loop_B.hoffset = (full_loop_B.tst_tmp - 1) * 20 +
                full_loop_B.e_j_p;
              full_loop_B.nr = 20 * full_loop_B.tst_tmp + full_loop_B.e_j_p;
              full_loop_B.c_j_ce = (full_loop_B.tst_tmp + 1) * 20 +
                full_loop_B.e_j_p;
              full_loop_B.bb = (b_h[full_loop_B.hoffset] + b_h[full_loop_B.nr] *
                                full_loop_B.ba) + b_h[full_loop_B.c_j_ce] *
                full_loop_B.aa;
              b_h[full_loop_B.hoffset] -= full_loop_B.bb * full_loop_B.tst;
              b_h[full_loop_B.nr] -= full_loop_B.bb * full_loop_B.ab;
              b_h[full_loop_B.c_j_ce] -= full_loop_B.bb * full_loop_B.h12;
            }
          } else {
            if (full_loop_B.nr == 2) {
              for (full_loop_B.c_j_ce = full_loop_B.tst_tmp; full_loop_B.c_j_ce <
                   21; full_loop_B.c_j_ce++) {
                full_loop_B.hoffset = (full_loop_B.c_j_ce - 1) * 20 +
                  full_loop_B.tst_tmp;
                full_loop_B.nr = full_loop_B.hoffset - 1;
                full_loop_B.bb = b_h[full_loop_B.nr] + b_h[full_loop_B.hoffset] *
                  full_loop_B.ba;
                b_h[full_loop_B.nr] -= full_loop_B.bb * full_loop_B.tst;
                b_h[full_loop_B.hoffset] -= full_loop_B.bb * full_loop_B.ab;
              }

              for (full_loop_B.c_j_ce = 0; full_loop_B.c_j_ce <= full_loop_B.i_m;
                   full_loop_B.c_j_ce++) {
                full_loop_B.hoffset = (full_loop_B.tst_tmp - 1) * 20 +
                  full_loop_B.c_j_ce;
                full_loop_B.nr = 20 * full_loop_B.tst_tmp + full_loop_B.c_j_ce;
                full_loop_B.bb = b_h[full_loop_B.hoffset] + b_h[full_loop_B.nr] *
                  full_loop_B.ba;
                b_h[full_loop_B.hoffset] -= full_loop_B.bb * full_loop_B.tst;
                b_h[full_loop_B.nr] -= full_loop_B.bb * full_loop_B.ab;
              }
            }
          }
        }

        full_loop_B.ix_i++;
      }
    }

    if (!goto150) {
      *info = full_loop_B.i_m + 1;
      exitg1 = true;
    } else {
      if ((full_loop_B.i_m + 1 != full_loop_B.L) && (full_loop_B.L ==
           full_loop_B.i_m)) {
        full_loop_xdlanv2(b_h[(full_loop_B.i_m + 20 * (full_loop_B.i_m - 1)) - 1],
                          b_h[(full_loop_B.i_m + 20 * full_loop_B.i_m) - 1],
                          b_h[full_loop_B.i_m + 20 * (full_loop_B.i_m - 1)],
                          b_h[full_loop_B.i_m + 20 * full_loop_B.i_m],
                          &full_loop_B.ab, &full_loop_B.bb, &full_loop_B.aa,
                          &full_loop_B.h12, &b_h[(full_loop_B.i_m + 20 *
          (full_loop_B.i_m - 1)) - 1], &full_loop_B.h21s, &full_loop_B.d_j,
                          &full_loop_B.e_eq, &full_loop_B.tst, &full_loop_B.ba);
        full_loop_B.hoffset = full_loop_B.i_m + 20 * full_loop_B.i_m;
        b_h[full_loop_B.hoffset - 1] = full_loop_B.h21s;
        full_loop_B.ix_i = 20 * (full_loop_B.i_m - 1);
        b_h[full_loop_B.i_m + full_loop_B.ix_i] = full_loop_B.d_j;
        b_h[full_loop_B.hoffset] = full_loop_B.e_eq;
        if (20 > full_loop_B.i_m + 1) {
          full_loop_B.hoffset = (full_loop_B.i_m + 1) * 20 + full_loop_B.i_m;
          std::memcpy(&full_loop_B.b_h[0], &b_h[0], 400U * sizeof(real_T));
          full_loop_xrot_p(19 - full_loop_B.i_m, full_loop_B.b_h,
                           full_loop_B.hoffset, full_loop_B.hoffset + 1,
                           full_loop_B.tst, full_loop_B.ba, b_h);
        }

        full_loop_B.m_e = full_loop_B.i_m - 2;
        if (full_loop_B.i_m - 1 >= 1) {
          full_loop_B.i_m *= 20;
          for (full_loop_B.k_nb = 0; full_loop_B.k_nb <= full_loop_B.m_e;
               full_loop_B.k_nb++) {
            full_loop_B.ab = full_loop_B.tst * b_h[full_loop_B.ix_i] +
              full_loop_B.ba * b_h[full_loop_B.i_m];
            b_h[full_loop_B.i_m] = full_loop_B.tst * b_h[full_loop_B.i_m] -
              full_loop_B.ba * b_h[full_loop_B.ix_i];
            b_h[full_loop_B.ix_i] = full_loop_B.ab;
            full_loop_B.i_m++;
            full_loop_B.ix_i++;
          }
        }
      }

      full_loop_B.i_m = full_loop_B.L - 2;
    }
  }
}

void full_loopModelClass::full_loop_xhseqr(const real_T h[400], real_T b_h[400],
  int32_T *info)
{
  full_loop_eml_dlahqr(h, b_h, info);
  full_loop_B.istart_h = 4;
  for (full_loop_B.b_j_c = 0; full_loop_B.b_j_c < 17; full_loop_B.b_j_c++) {
    if (full_loop_B.istart_h <= 20) {
      std::memset(&b_h[(full_loop_B.b_j_c * 20 + full_loop_B.istart_h) + -1], 0,
                  (21 - full_loop_B.istart_h) * sizeof(real_T));
    }

    full_loop_B.istart_h++;
  }
}

void full_loopModelClass::full_loop_schur(real_T A[400], real_T V[400])
{
  boolean_T p;
  p = true;
  for (full_loop_B.istart = 0; full_loop_B.istart < 400; full_loop_B.istart++) {
    if (p && ((!rtIsInf(A[full_loop_B.istart])) && (!rtIsNaN
          (A[full_loop_B.istart])))) {
    } else {
      p = false;
    }
  }

  if (!p) {
    for (full_loop_B.istart = 0; full_loop_B.istart < 400; full_loop_B.istart++)
    {
      V[full_loop_B.istart] = (rtNaN);
    }

    full_loop_B.istart = 2;
    for (full_loop_B.b_j_h = 0; full_loop_B.b_j_h < 19; full_loop_B.b_j_h++) {
      if (full_loop_B.istart <= 20) {
        std::memset(&V[(full_loop_B.b_j_h * 20 + full_loop_B.istart) + -1], 0,
                    (21 - full_loop_B.istart) * sizeof(real_T));
      }

      full_loop_B.istart++;
    }
  } else {
    std::memcpy(&full_loop_B.A_e[0], &A[0], 400U * sizeof(real_T));
    full_loop_xgehrd(full_loop_B.A_e, A);
    full_loop_xhseqr(A, V, &full_loop_B.istart);
  }
}

void full_loopModelClass::full_loop_eig(const real_T A[400], creal_T V[20])
{
  boolean_T p;
  int32_T exitg1;
  boolean_T exitg2;
  p = true;
  for (full_loop_B.i_kh = 0; full_loop_B.i_kh < 400; full_loop_B.i_kh++) {
    if (p && ((!rtIsInf(A[full_loop_B.i_kh])) && (!rtIsNaN(A[full_loop_B.i_kh]))))
    {
    } else {
      p = false;
    }
  }

  if (!p) {
    for (full_loop_B.i_kh = 0; full_loop_B.i_kh < 20; full_loop_B.i_kh++) {
      V[full_loop_B.i_kh].re = (rtNaN);
      V[full_loop_B.i_kh].im = 0.0;
    }
  } else {
    p = true;
    full_loop_B.i_kh = 0;
    exitg2 = false;
    while ((!exitg2) && (full_loop_B.i_kh < 20)) {
      full_loop_B.b_i_c = 0;
      do {
        exitg1 = 0;
        if (full_loop_B.b_i_c <= full_loop_B.i_kh) {
          if (!(A[20 * full_loop_B.i_kh + full_loop_B.b_i_c] == A[20 *
                full_loop_B.b_i_c + full_loop_B.i_kh])) {
            p = false;
            exitg1 = 1;
          } else {
            full_loop_B.b_i_c++;
          }
        } else {
          full_loop_B.i_kh++;
          exitg1 = 2;
        }
      } while (exitg1 == 0);

      if (exitg1 == 1) {
        exitg2 = true;
      }
    }

    if (p) {
      std::memcpy(&full_loop_B.A[0], &A[0], 400U * sizeof(real_T));
      full_loop_schur(full_loop_B.A, full_loop_B.T);
      for (full_loop_B.i_kh = 0; full_loop_B.i_kh < 20; full_loop_B.i_kh++) {
        V[full_loop_B.i_kh].re = full_loop_B.T[20 * full_loop_B.i_kh +
          full_loop_B.i_kh];
        V[full_loop_B.i_kh].im = 0.0;
      }
    } else {
      full_loop_xzgeev(A, &full_loop_B.i_kh, V, full_loop_B.beta1);
      for (full_loop_B.i_kh = 0; full_loop_B.i_kh < 20; full_loop_B.i_kh++) {
        if (full_loop_B.beta1[full_loop_B.i_kh].im == 0.0) {
          if (V[full_loop_B.i_kh].im == 0.0) {
            full_loop_B.bim_e = V[full_loop_B.i_kh].re /
              full_loop_B.beta1[full_loop_B.i_kh].re;
            full_loop_B.brm_e = 0.0;
          } else if (V[full_loop_B.i_kh].re == 0.0) {
            full_loop_B.bim_e = 0.0;
            full_loop_B.brm_e = V[full_loop_B.i_kh].im /
              full_loop_B.beta1[full_loop_B.i_kh].re;
          } else {
            full_loop_B.bim_e = V[full_loop_B.i_kh].re /
              full_loop_B.beta1[full_loop_B.i_kh].re;
            full_loop_B.brm_e = V[full_loop_B.i_kh].im /
              full_loop_B.beta1[full_loop_B.i_kh].re;
          }
        } else if (full_loop_B.beta1[full_loop_B.i_kh].re == 0.0) {
          if (V[full_loop_B.i_kh].re == 0.0) {
            full_loop_B.bim_e = V[full_loop_B.i_kh].im /
              full_loop_B.beta1[full_loop_B.i_kh].im;
            full_loop_B.brm_e = 0.0;
          } else if (V[full_loop_B.i_kh].im == 0.0) {
            full_loop_B.bim_e = 0.0;
            full_loop_B.brm_e = -(V[full_loop_B.i_kh].re /
                                  full_loop_B.beta1[full_loop_B.i_kh].im);
          } else {
            full_loop_B.bim_e = V[full_loop_B.i_kh].im /
              full_loop_B.beta1[full_loop_B.i_kh].im;
            full_loop_B.brm_e = -(V[full_loop_B.i_kh].re /
                                  full_loop_B.beta1[full_loop_B.i_kh].im);
          }
        } else {
          full_loop_B.brm_e = std::abs(full_loop_B.beta1[full_loop_B.i_kh].re);
          full_loop_B.bim_e = std::abs(full_loop_B.beta1[full_loop_B.i_kh].im);
          if (full_loop_B.brm_e > full_loop_B.bim_e) {
            full_loop_B.brm_e = full_loop_B.beta1[full_loop_B.i_kh].im /
              full_loop_B.beta1[full_loop_B.i_kh].re;
            full_loop_B.d_cf = full_loop_B.brm_e *
              full_loop_B.beta1[full_loop_B.i_kh].im +
              full_loop_B.beta1[full_loop_B.i_kh].re;
            full_loop_B.bim_e = (full_loop_B.brm_e * V[full_loop_B.i_kh].im +
                                 V[full_loop_B.i_kh].re) / full_loop_B.d_cf;
            full_loop_B.brm_e = (V[full_loop_B.i_kh].im - full_loop_B.brm_e *
                                 V[full_loop_B.i_kh].re) / full_loop_B.d_cf;
          } else if (full_loop_B.bim_e == full_loop_B.brm_e) {
            full_loop_B.d_cf = full_loop_B.beta1[full_loop_B.i_kh].re > 0.0 ?
              0.5 : -0.5;
            full_loop_B.sgnbi_l = full_loop_B.beta1[full_loop_B.i_kh].im > 0.0 ?
              0.5 : -0.5;
            full_loop_B.bim_e = (V[full_loop_B.i_kh].re * full_loop_B.d_cf +
                                 V[full_loop_B.i_kh].im * full_loop_B.sgnbi_l) /
              full_loop_B.brm_e;
            full_loop_B.brm_e = (V[full_loop_B.i_kh].im * full_loop_B.d_cf -
                                 V[full_loop_B.i_kh].re * full_loop_B.sgnbi_l) /
              full_loop_B.brm_e;
          } else {
            full_loop_B.brm_e = full_loop_B.beta1[full_loop_B.i_kh].re /
              full_loop_B.beta1[full_loop_B.i_kh].im;
            full_loop_B.d_cf = full_loop_B.brm_e *
              full_loop_B.beta1[full_loop_B.i_kh].re +
              full_loop_B.beta1[full_loop_B.i_kh].im;
            full_loop_B.bim_e = (full_loop_B.brm_e * V[full_loop_B.i_kh].re +
                                 V[full_loop_B.i_kh].im) / full_loop_B.d_cf;
            full_loop_B.brm_e = (full_loop_B.brm_e * V[full_loop_B.i_kh].im -
                                 V[full_loop_B.i_kh].re) / full_loop_B.d_cf;
          }
        }

        full_loop_B.V.re = full_loop_B.bim_e;
        full_loop_B.V.im = full_loop_B.brm_e;
        V[full_loop_B.i_kh] = full_loop_B.V;
      }
    }
  }
}

real_T full_loopModelClass::full_loop_leastEigvJtJ(const real_T Jtri[60])
{
  real_T lev;
  boolean_T exitg1;
  full_loop_B.bet = 0.0;
  for (full_loop_B.i_o3 = 0; full_loop_B.i_o3 < 20; full_loop_B.i_o3++) {
    full_loop_B.oldq[full_loop_B.i_o3] = 0.0;
    full_loop_B.q_j[full_loop_B.i_o3] = 0.22360679774997896;
  }

  for (full_loop_B.b_idx_p = 0; full_loop_B.b_idx_p < 20; full_loop_B.b_idx_p++)
  {
    std::memcpy(&full_loop_B.v_p[0], &full_loop_B.q_j[0], 20U * sizeof(real_T));
    full_loop_solveHessian_p4(Jtri, full_loop_B.v_p);
    full_loop_B.q_b1 = 0.0;
    for (full_loop_B.i_o3 = 0; full_loop_B.i_o3 < 20; full_loop_B.i_o3++) {
      full_loop_B.q_b1 += full_loop_B.q_j[full_loop_B.i_o3] *
        full_loop_B.v_p[full_loop_B.i_o3];
    }

    full_loop_B.alpha[full_loop_B.b_idx_p] = full_loop_B.q_b1;
    for (full_loop_B.i_o3 = 0; full_loop_B.i_o3 < 20; full_loop_B.i_o3++) {
      full_loop_B.v_p[full_loop_B.i_o3] = (full_loop_B.v_p[full_loop_B.i_o3] -
        full_loop_B.bet * full_loop_B.oldq[full_loop_B.i_o3]) -
        full_loop_B.alpha[full_loop_B.b_idx_p] *
        full_loop_B.q_j[full_loop_B.i_o3];
      full_loop_B.oldq[full_loop_B.i_o3] = full_loop_B.q_j[full_loop_B.i_o3];
    }

    full_loop_B.bet = full_loop_norm_p(full_loop_B.v_p);
    for (full_loop_B.i_o3 = 0; full_loop_B.i_o3 < 20; full_loop_B.i_o3++) {
      full_loop_B.q_j[full_loop_B.i_o3] = full_loop_B.v_p[full_loop_B.i_o3] /
        full_loop_B.bet;
    }

    full_loop_B.beta_l[full_loop_B.b_idx_p] = full_loop_B.bet;
  }

  std::memcpy(&full_loop_B.beta[0], &full_loop_B.beta_l[0], 19U * sizeof(real_T));
  std::memcpy(&full_loop_B.beta[19], &full_loop_B.alpha[0], 20U * sizeof(real_T));
  std::memcpy(&full_loop_B.beta[39], &full_loop_B.beta_l[0], 19U * sizeof(real_T));
  full_loop_accumarray(full_loop_B.beta, full_loop_B.dv2);
  full_loop_eig(full_loop_B.dv2, full_loop_B.x_o);
  for (full_loop_B.b_idx_p = 0; full_loop_B.b_idx_p < 20; full_loop_B.b_idx_p++)
  {
    full_loop_B.oldq[full_loop_B.b_idx_p] = full_loop_rt_hypotd_snf
      (full_loop_B.x_o[full_loop_B.b_idx_p].re,
       full_loop_B.x_o[full_loop_B.b_idx_p].im);
  }

  if (!rtIsNaN(full_loop_B.oldq[0])) {
    full_loop_B.b_idx_p = 1;
  } else {
    full_loop_B.b_idx_p = 0;
    full_loop_B.i_o3 = 2;
    exitg1 = false;
    while ((!exitg1) && (full_loop_B.i_o3 <= 20)) {
      if (!rtIsNaN(full_loop_B.oldq[full_loop_B.i_o3 - 1])) {
        full_loop_B.b_idx_p = full_loop_B.i_o3;
        exitg1 = true;
      } else {
        full_loop_B.i_o3++;
      }
    }
  }

  if (full_loop_B.b_idx_p == 0) {
    full_loop_B.bet = full_loop_B.oldq[0];
  } else {
    full_loop_B.bet = full_loop_B.oldq[full_loop_B.b_idx_p - 1];
    for (full_loop_B.i_o3 = full_loop_B.b_idx_p + 1; full_loop_B.i_o3 < 21;
         full_loop_B.i_o3++) {
      full_loop_B.q_b1 = full_loop_B.oldq[full_loop_B.i_o3 - 1];
      if (full_loop_B.bet > full_loop_B.q_b1) {
        full_loop_B.bet = full_loop_B.q_b1;
      }
    }
  }

  lev = 1.0 / full_loop_B.bet;
  return lev;
}

void full_loopModelClass::full_loop_fletcher(real_T S, real_T Snew, const real_T
  dx[20], const real_T v[20], const real_T Jtri[60], real_T lambda, real_T
  lambdac, real_T *b_lambda, real_T *b_lambdac)
{
  *b_lambdac = lambdac;
  *b_lambda = lambda;
  std::memcpy(&full_loop_B.lower[0], &Jtri[0], 20U * sizeof(real_T));
  std::memcpy(&full_loop_B.upper[0], &Jtri[40], 20U * sizeof(real_T));
  full_loop_B.z_tmp[19] = 0;
  full_loop_B.iv3[0] = 19;
  full_loop_B.iv4[0] = 19;
  for (full_loop_B.z_tmp_a = 0; full_loop_B.z_tmp_a < 19; full_loop_B.z_tmp_a++)
  {
    full_loop_B.z_tmp_k = full_loop_B.z_tmp_a + 1;
    full_loop_B.z_tmp[full_loop_B.z_tmp_a] = static_cast<int8_T>
      (full_loop_B.z_tmp_k);
    full_loop_B.iv3[full_loop_B.z_tmp_a + 1] = static_cast<int8_T>
      (full_loop_B.z_tmp_a);
    full_loop_B.iv4[full_loop_B.z_tmp_a + 1] = static_cast<int8_T>
      (full_loop_B.z_tmp_a);
    full_loop_B.z_tmp_b[full_loop_B.z_tmp_a] = static_cast<int8_T>
      (full_loop_B.z_tmp_a);
    full_loop_B.z_tmp_i[full_loop_B.z_tmp_a] = static_cast<int8_T>
      (full_loop_B.z_tmp_k);
  }

  for (full_loop_B.z_tmp_a = 0; full_loop_B.z_tmp_a < 20; full_loop_B.z_tmp_a++)
  {
    full_loop_B.z_n[full_loop_B.z_tmp_a] = (Jtri[full_loop_B.z_tmp_a + 20] *
      dx[full_loop_B.z_tmp_a] + full_loop_B.upper[full_loop_B.z_tmp_a] *
      dx[full_loop_B.z_tmp[full_loop_B.z_tmp_a]]) +
      full_loop_B.lower[full_loop_B.iv3[full_loop_B.z_tmp_a]] *
      dx[full_loop_B.iv4[full_loop_B.z_tmp_a]];
  }

  full_loop_B.z_tmp[19] = 0;
  full_loop_B.iv3[0] = 19;
  full_loop_B.iv4[0] = 19;
  for (full_loop_B.z_tmp_a = 0; full_loop_B.z_tmp_a < 19; full_loop_B.z_tmp_a++)
  {
    full_loop_B.z_tmp[full_loop_B.z_tmp_a] =
      full_loop_B.z_tmp_i[full_loop_B.z_tmp_a];
    full_loop_B.iv3[full_loop_B.z_tmp_a + 1] =
      full_loop_B.z_tmp_b[full_loop_B.z_tmp_a];
    full_loop_B.iv4[full_loop_B.z_tmp_a + 1] =
      full_loop_B.z_tmp_b[full_loop_B.z_tmp_a];
  }

  full_loop_B.R = 0.0;
  for (full_loop_B.z_tmp_a = 0; full_loop_B.z_tmp_a < 20; full_loop_B.z_tmp_a++)
  {
    full_loop_B.R += (2.0 * v[full_loop_B.z_tmp_a] - ((Jtri[full_loop_B.z_tmp_a
      + 20] * full_loop_B.z_n[full_loop_B.z_tmp_a] +
      full_loop_B.lower[full_loop_B.z_tmp_a] *
      full_loop_B.z_n[full_loop_B.z_tmp[full_loop_B.z_tmp_a]]) +
      full_loop_B.upper[full_loop_B.iv3[full_loop_B.z_tmp_a]] *
      full_loop_B.z_n[full_loop_B.iv4[full_loop_B.z_tmp_a]])) *
      dx[full_loop_B.z_tmp_a];
  }

  full_loop_B.R = (S - Snew) / full_loop_B.R;
  if (full_loop_B.R > 0.75) {
    *b_lambda = lambda / 2.0;
    if (*b_lambda < lambdac) {
      *b_lambda = 0.0;
    }
  } else {
    if (full_loop_B.R < 0.25) {
      full_loop_B.R = 0.0;
      for (full_loop_B.z_tmp_a = 0; full_loop_B.z_tmp_a < 20;
           full_loop_B.z_tmp_a++) {
        full_loop_B.R += dx[full_loop_B.z_tmp_a] * v[full_loop_B.z_tmp_a];
      }

      full_loop_B.R = (Snew - S) / full_loop_B.R + 2.0;
      if ((2.0 > full_loop_B.R) || rtIsNaN(full_loop_B.R)) {
        full_loop_B.R = 2.0;
      }

      if (!(full_loop_B.R < 10.0)) {
        full_loop_B.R = 10.0;
      }

      if (lambda == 0.0) {
        *b_lambdac = full_loop_leastEigvJtJ(Jtri);
        *b_lambda = *b_lambdac;
        full_loop_B.R /= 2.0;
      }

      *b_lambda *= full_loop_B.R;
    }
  }
}

void full_loopModelClass::full_loop_LMFsolve_p43ri(const d_cell_wrap_full_loop_T
  *FUN_tunableEnvironment, real_T x[20])
{
  static const int8_T tmp[20] = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14,
    15, 16, 17, 18, 19, 0 };

  static const int8_T tmp_0[20] = { 19, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12,
    13, 14, 15, 16, 17, 18 };

  boolean_T exitg1;
  for (full_loop_B.i_k = 0; full_loop_B.i_k < 21; full_loop_B.i_k++) {
    full_loop_B.hip_e[full_loop_B.i_k].re = FUN_tunableEnvironment->
      f1[full_loop_B.i_k];
    full_loop_B.hip_e[full_loop_B.i_k].im = FUN_tunableEnvironment->
      f1[full_loop_B.i_k + 21];
  }

  for (full_loop_B.i_k = 0; full_loop_B.i_k < 20; full_loop_B.i_k++) {
    full_loop_B.b_r[full_loop_B.i_k] = x[tmp[full_loop_B.i_k]];
  }

  full_loop_clothoidG1fit2wp(&full_loop_B.hip_e[0], x, &full_loop_B.hip_e[1],
    full_loop_B.b_r, full_loop_B.k0_h, full_loop_B.k1_d, full_loop_B.unusedU0_k,
    full_loop_B.dk0_dc0, full_loop_B.dk0_dc1, full_loop_B.dk1_dc0,
    full_loop_B.dk1_dc1);
  full_loop_B.b_r[0] = full_loop_B.k1_d[19] - full_loop_B.k0_h[0];
  for (full_loop_B.i_k = 0; full_loop_B.i_k < 19; full_loop_B.i_k++) {
    full_loop_B.b_r[full_loop_B.i_k + 1] = full_loop_B.k1_d[full_loop_B.i_k] -
      full_loop_B.k0_h[(full_loop_B.i_k + 2) - 1];
  }

  for (full_loop_B.i_k = 0; full_loop_B.i_k < 20; full_loop_B.i_k++) {
    full_loop_B.b_varargout_2[full_loop_B.i_k] =
      full_loop_B.dk1_dc0[full_loop_B.i_k];
    full_loop_B.b_varargout_2[full_loop_B.i_k + 20] =
      full_loop_B.dk1_dc1[tmp_0[full_loop_B.i_k]] -
      full_loop_B.dk0_dc0[full_loop_B.i_k];
    full_loop_B.b_varargout_2[full_loop_B.i_k + 40] =
      -full_loop_B.dk0_dc1[full_loop_B.i_k];
  }

  std::memcpy(&full_loop_B.Jtri[0], &full_loop_B.b_varargout_2[0], 60U * sizeof
              (real_T));
  full_loop_mulJt(full_loop_B.b_varargout_2, full_loop_B.b_r, full_loop_B.v_j);
  full_loop_B.S_g = 0.0;
  full_loop_B.lambda_i = 0.0;
  full_loop_B.lambdac_b = 0.75;
  full_loop_B.iter_b = 0;
  for (full_loop_B.i_k = 0; full_loop_B.i_k < 20; full_loop_B.i_k++) {
    full_loop_B.S_g += full_loop_B.b_r[full_loop_B.i_k] *
      full_loop_B.b_r[full_loop_B.i_k];
    full_loop_B.dx[full_loop_B.i_k] = 1.0E-7;
  }

  exitg1 = false;
  while ((!exitg1) && (full_loop_B.iter_b < 2000)) {
    for (full_loop_B.i_k = 0; full_loop_B.i_k < 20; full_loop_B.i_k++) {
      full_loop_B.k0_p[full_loop_B.i_k] = (std::abs
        (full_loop_B.dx[full_loop_B.i_k]) >= 1.0E-7);
    }

    if (full_loop_any_p(full_loop_B.k0_p)) {
      for (full_loop_B.i_k = 0; full_loop_B.i_k < 20; full_loop_B.i_k++) {
        full_loop_B.k0_p[full_loop_B.i_k] = (std::abs
          (full_loop_B.b_r[full_loop_B.i_k]) >= 1.0E-7);
      }

      if (full_loop_any_p(full_loop_B.k0_p)) {
        full_loop_B.iter_b++;
        full_loop_solveDampenedHessian(full_loop_B.Jtri, full_loop_B.lambda_i,
          full_loop_B.v_j, full_loop_B.dx);
        for (full_loop_B.i_k = 0; full_loop_B.i_k < 20; full_loop_B.i_k++) {
          full_loop_B.xnew[full_loop_B.i_k] = x[full_loop_B.i_k] -
            full_loop_B.dx[full_loop_B.i_k];
        }

        for (full_loop_B.i_k = 0; full_loop_B.i_k < 21; full_loop_B.i_k++) {
          full_loop_B.hip_e[full_loop_B.i_k].re = FUN_tunableEnvironment->
            f1[full_loop_B.i_k];
          full_loop_B.hip_e[full_loop_B.i_k].im = FUN_tunableEnvironment->
            f1[full_loop_B.i_k + 21];
        }

        for (full_loop_B.i_k = 0; full_loop_B.i_k < 20; full_loop_B.i_k++) {
          full_loop_B.xnew_j[full_loop_B.i_k] =
            full_loop_B.xnew[tmp[full_loop_B.i_k]];
        }

        full_loop_clothoidG1fit2wp(&full_loop_B.hip_e[0], full_loop_B.xnew,
          &full_loop_B.hip_e[1], full_loop_B.xnew_j, full_loop_B.k0_h,
          full_loop_B.k1_d, full_loop_B.unusedU0_k, full_loop_B.dk0_dc0,
          full_loop_B.dk0_dc1, full_loop_B.dk1_dc0, full_loop_B.dk1_dc1);
        full_loop_B.unusedU0_k[0] = full_loop_B.k1_d[19] - full_loop_B.k0_h[0];
        for (full_loop_B.i_k = 0; full_loop_B.i_k < 19; full_loop_B.i_k++) {
          full_loop_B.unusedU0_k[full_loop_B.i_k + 1] =
            full_loop_B.k1_d[full_loop_B.i_k] - full_loop_B.k0_h
            [(full_loop_B.i_k + 2) - 1];
        }

        full_loop_B.unusedU0_o = 0.0;
        for (full_loop_B.i_k = 0; full_loop_B.i_k < 20; full_loop_B.i_k++) {
          full_loop_B.b_varargout_2[full_loop_B.i_k] =
            full_loop_B.dk1_dc0[full_loop_B.i_k];
          full_loop_B.b_varargout_2[full_loop_B.i_k + 20] =
            full_loop_B.dk1_dc1[tmp_0[full_loop_B.i_k]] -
            full_loop_B.dk0_dc0[full_loop_B.i_k];
          full_loop_B.b_varargout_2[full_loop_B.i_k + 40] =
            -full_loop_B.dk0_dc1[full_loop_B.i_k];
          full_loop_B.unusedU0_o += full_loop_B.unusedU0_k[full_loop_B.i_k] *
            full_loop_B.unusedU0_k[full_loop_B.i_k];
        }

        full_loop_fletcher(full_loop_B.S_g, full_loop_B.unusedU0_o,
                           full_loop_B.dx, full_loop_B.v_j, full_loop_B.Jtri,
                           full_loop_B.lambda_i, full_loop_B.lambdac_b,
                           &full_loop_B.lambda_i, &full_loop_B.lambdac_b);
        if (full_loop_B.unusedU0_o < full_loop_B.S_g) {
          full_loop_B.S_g = full_loop_B.unusedU0_o;
          std::memcpy(&x[0], &full_loop_B.xnew[0], 20U * sizeof(real_T));
          std::memcpy(&full_loop_B.b_r[0], &full_loop_B.unusedU0_k[0], 20U *
                      sizeof(real_T));
          std::memcpy(&full_loop_B.Jtri[0], &full_loop_B.b_varargout_2[0], 60U *
                      sizeof(real_T));
          full_loop_B.iv[19] = 0;
          full_loop_B.iv1[0] = 19;
          full_loop_B.iv2[0] = 19;
          for (full_loop_B.i_k = 0; full_loop_B.i_k < 19; full_loop_B.i_k++) {
            full_loop_B.iv[full_loop_B.i_k] = static_cast<int8_T>
              (full_loop_B.i_k + 1);
            full_loop_B.iv1[full_loop_B.i_k + 1] = static_cast<int8_T>
              (full_loop_B.i_k);
            full_loop_B.iv2[full_loop_B.i_k + 1] = static_cast<int8_T>
              (full_loop_B.i_k);
          }

          for (full_loop_B.i_k = 0; full_loop_B.i_k < 20; full_loop_B.i_k++) {
            full_loop_B.v_j[full_loop_B.i_k] =
              (full_loop_B.b_varargout_2[full_loop_B.i_k + 20] *
               full_loop_B.unusedU0_k[full_loop_B.i_k] +
               full_loop_B.b_varargout_2[full_loop_B.i_k] *
               full_loop_B.unusedU0_k[full_loop_B.iv[full_loop_B.i_k]]) +
              full_loop_B.b_varargout_2[full_loop_B.iv1[full_loop_B.i_k] + 40] *
              full_loop_B.unusedU0_k[full_loop_B.iv2[full_loop_B.i_k]];
          }
        }
      } else {
        exitg1 = true;
      }
    } else {
      exitg1 = true;
    }
  }
}

void full_loopModelClass::full_loop_fitLoopCourse(const real_T waypoints[63],
  real_T course[21])
{
  full_loop_dclothoidwp(&waypoints[0], &waypoints[21], full_loop_B.u,
                        full_loop_B.v);
  std::memset(&course[0], 0, 21U * sizeof(real_T));
  course[0] = rt_atan2d_snf(full_loop_B.v[1] - full_loop_B.v[0], full_loop_B.u[1]
    - full_loop_B.u[0]);
  course[20] = rt_atan2d_snf(full_loop_B.v[2560] - full_loop_B.v[2559],
    full_loop_B.u[2560] - full_loop_B.u[2559]);
  for (full_loop_B.b_i_h = 0; full_loop_B.b_i_h < 19; full_loop_B.b_i_h++) {
    full_loop_B.course_tmp = (full_loop_B.b_i_h + 1) << 7;
    full_loop_B.course_tmp_a = full_loop_B.course_tmp - 1;
    course[full_loop_B.b_i_h + 1] = rt_atan2d_snf
      (full_loop_B.v[full_loop_B.course_tmp] -
       full_loop_B.v[full_loop_B.course_tmp_a],
       full_loop_B.u[full_loop_B.course_tmp] -
       full_loop_B.u[full_loop_B.course_tmp_a]);
  }

  std::memcpy(&full_loop_B.tunableEnvironment_j.f1[0], &waypoints[0], 63U *
              sizeof(real_T));
  std::memcpy(&full_loop_B.courselsq[0], &course[0], 20U * sizeof(real_T));
  full_loop_LMFsolve_p43ri(&full_loop_B.tunableEnvironment_j,
    full_loop_B.courselsq);
  std::memcpy(&course[0], &full_loop_B.courselsq[0], 20U * sizeof(real_T));
  course[20] = full_loop_B.courselsq[0];
}

void full_loopModelClass::full_loop_fitPartialCourseLoop(const real_T waypoints
  [63], real_T course[21])
{
  for (full_loop_B.i_cf = 0; full_loop_B.i_cf < 21; full_loop_B.i_cf++) {
    course[full_loop_B.i_cf] = (rtNaN);
  }

  course[0] = (rtNaN);
  full_loop_partitionCourse(course, full_loop_B.ibegin_data,
    &full_loop_B.ibegin_size, full_loop_B.iend_data, &full_loop_B.iend_size);
  if (full_loop_B.ibegin_size == 0) {
    full_loop_fitLoopCourse(waypoints, course);
  } else {
    full_loop_B.cdiff = full_loop_B.ibegin_data[full_loop_B.ibegin_size - 1];
    if (rtIsNaN(full_loop_B.cdiff)) {
      full_loop_B.i_cf = 1;
      full_loop_B.y_data_mz[0] = (rtNaN);
    } else if (20.0 < full_loop_B.cdiff) {
      full_loop_B.i_cf = 0;
    } else if (rtIsInf(full_loop_B.cdiff) && (full_loop_B.cdiff == 20.0)) {
      full_loop_B.i_cf = 1;
      full_loop_B.y_data_mz[0] = (rtNaN);
    } else if (std::floor(full_loop_B.cdiff) == full_loop_B.cdiff) {
      full_loop_B.ndbl_d = static_cast<int32_T>(std::floor(20.0 -
        full_loop_B.ibegin_data[full_loop_B.ibegin_size - 1]));
      full_loop_B.i_cf = full_loop_B.ndbl_d + 1;
      for (full_loop_B.n_i = 0; full_loop_B.n_i <= full_loop_B.ndbl_d;
           full_loop_B.n_i++) {
        full_loop_B.y_data_mz[full_loop_B.n_i] = full_loop_B.cdiff +
          static_cast<real_T>(full_loop_B.n_i);
      }
    } else {
      full_loop_B.ndbl = std::floor((20.0 - full_loop_B.cdiff) + 0.5);
      full_loop_B.apnd = full_loop_B.cdiff + full_loop_B.ndbl;
      full_loop_B.u0 = std::abs(full_loop_B.cdiff);
      if (!(full_loop_B.u0 > 20.0)) {
        full_loop_B.u0 = 20.0;
      }

      if (std::abs(full_loop_B.apnd - 20.0) < 4.4408920985006262E-16 *
          full_loop_B.u0) {
        full_loop_B.ndbl++;
        full_loop_B.apnd = 20.0;
      } else if (full_loop_B.apnd - 20.0 > 0.0) {
        full_loop_B.apnd = full_loop_B.cdiff + (full_loop_B.ndbl - 1.0);
      } else {
        full_loop_B.ndbl++;
      }

      if (full_loop_B.ndbl >= 0.0) {
        full_loop_B.ndbl_d = static_cast<int32_T>(full_loop_B.ndbl);
      } else {
        full_loop_B.ndbl_d = 0;
      }

      full_loop_B.n_i = full_loop_B.ndbl_d - 1;
      full_loop_B.i_cf = full_loop_B.n_i + 1;
      if (full_loop_B.n_i + 1 > 0) {
        full_loop_B.y_data_mz[0] = full_loop_B.cdiff;
        if (full_loop_B.n_i + 1 > 1) {
          full_loop_B.y_data_mz[full_loop_B.n_i] = full_loop_B.apnd;
          full_loop_B.nm1d2 = full_loop_B.n_i / 2;
          full_loop_B.ndbl_d = full_loop_B.nm1d2 - 2;
          for (full_loop_B.b_k = 0; full_loop_B.b_k <= full_loop_B.ndbl_d;
               full_loop_B.b_k++) {
            full_loop_B.k_l = full_loop_B.b_k + 1;
            full_loop_B.y_data_mz[full_loop_B.k_l] = full_loop_B.cdiff +
              static_cast<real_T>(full_loop_B.k_l);
            full_loop_B.y_data_mz[full_loop_B.n_i - full_loop_B.k_l] =
              full_loop_B.apnd - static_cast<real_T>(full_loop_B.k_l);
          }

          if (full_loop_B.nm1d2 << 1 == full_loop_B.n_i) {
            full_loop_B.y_data_mz[full_loop_B.nm1d2] = (full_loop_B.cdiff +
              full_loop_B.apnd) / 2.0;
          } else {
            full_loop_B.y_data_mz[full_loop_B.nm1d2] = full_loop_B.cdiff +
              static_cast<real_T>(full_loop_B.nm1d2);
            full_loop_B.y_data_mz[full_loop_B.nm1d2 + 1] = full_loop_B.apnd -
              static_cast<real_T>(full_loop_B.nm1d2);
          }
        }
      }
    }

    if (rtIsNaN(full_loop_B.iend_data[0])) {
      full_loop_B.y_size_idx_1 = 1;
      full_loop_B.y_data_jw[0] = (rtNaN);
    } else if (full_loop_B.iend_data[0] < 1.0) {
      full_loop_B.y_size_idx_1 = 0;
    } else if (rtIsInf(full_loop_B.iend_data[0]) && (1.0 ==
                full_loop_B.iend_data[0])) {
      full_loop_B.y_size_idx_1 = 1;
      full_loop_B.y_data_jw[0] = (rtNaN);
    } else {
      full_loop_B.ndbl_d = static_cast<int32_T>(std::floor
        (full_loop_B.iend_data[0] - 1.0));
      full_loop_B.y_size_idx_1 = full_loop_B.ndbl_d + 1;
      for (full_loop_B.n_i = 0; full_loop_B.n_i <= full_loop_B.ndbl_d;
           full_loop_B.n_i++) {
        full_loop_B.y_data_jw[full_loop_B.n_i] = static_cast<real_T>
          (full_loop_B.n_i) + 1.0;
      }
    }

    full_loop_B.ndbl_d = full_loop_B.i_cf + full_loop_B.y_size_idx_1;
    full_loop_B.nm1d2 = full_loop_B.y_size_idx_1 - 1;
    if (0 <= full_loop_B.i_cf - 1) {
      std::memcpy(&full_loop_B.range_data[0], &full_loop_B.y_data_mz[0],
                  full_loop_B.i_cf * sizeof(real_T));
    }

    for (full_loop_B.n_i = 0; full_loop_B.n_i <= full_loop_B.nm1d2;
         full_loop_B.n_i++) {
      full_loop_B.range_data[full_loop_B.n_i + full_loop_B.i_cf] =
        full_loop_B.y_data_jw[full_loop_B.n_i];
    }

    full_loop_B.nm1d2 = full_loop_B.ndbl_d - 1;
    for (full_loop_B.n_i = 0; full_loop_B.n_i <= full_loop_B.nm1d2;
         full_loop_B.n_i++) {
      full_loop_B.b_data_og[full_loop_B.n_i] = static_cast<int32_T>
        (full_loop_B.range_data[full_loop_B.n_i]);
    }

    full_loop_B.c_size_i = full_loop_B.ndbl_d;
    for (full_loop_B.n_i = 0; full_loop_B.n_i < full_loop_B.ndbl_d;
         full_loop_B.n_i++) {
      full_loop_B.c_data_c[full_loop_B.n_i] = (rtNaN);
    }

    full_loop_B.waypoints_size[0] = full_loop_B.ndbl_d;
    full_loop_B.waypoints_size[1] = 3;
    for (full_loop_B.n_i = 0; full_loop_B.n_i < 3; full_loop_B.n_i++) {
      for (full_loop_B.nm1d2 = 0; full_loop_B.nm1d2 < full_loop_B.ndbl_d;
           full_loop_B.nm1d2++) {
        full_loop_B.waypoints_data[full_loop_B.nm1d2 + full_loop_B.ndbl_d *
          full_loop_B.n_i] = waypoints[(21 * full_loop_B.n_i +
          static_cast<int32_T>(full_loop_B.range_data[full_loop_B.nm1d2])) - 1];
      }
    }

    full_loop_fitCourse_p(full_loop_B.waypoints_data, full_loop_B.waypoints_size,
                          full_loop_B.c_data_c, &full_loop_B.c_size_i);
    for (full_loop_B.n_i = 0; full_loop_B.n_i < full_loop_B.ndbl_d;
         full_loop_B.n_i++) {
      course[full_loop_B.b_data_og[full_loop_B.n_i] - 1] =
        full_loop_B.c_data_c[full_loop_B.n_i];
    }

    course[20] = course[0];
    if (2 > full_loop_B.iend_size) {
      full_loop_B.i_cf = 0;
    } else {
      full_loop_B.i_cf = 1;
    }

    if (1.0 > static_cast<real_T>(full_loop_B.ibegin_size) - 1.0) {
      full_loop_B.n_i = 0;
    } else {
      full_loop_B.n_i = full_loop_B.ibegin_size - 1;
    }

    full_loop_B.y_size_idx_1 = full_loop_B.n_i - 1;
    if (0 <= full_loop_B.y_size_idx_1) {
      full_loop_B.waypoints_size_m[1] = 3;
    }

    for (full_loop_B.b_i_d = 0; full_loop_B.b_i_d <= full_loop_B.y_size_idx_1;
         full_loop_B.b_i_d++) {
      full_loop_B.ndbl_d = full_loop_B.i_cf + full_loop_B.b_i_d;
      if (rtIsNaN(full_loop_B.ibegin_data[full_loop_B.b_i_d]) || rtIsNaN
          (full_loop_B.iend_data[full_loop_B.ndbl_d])) {
        full_loop_B.ndbl_d = 1;
        full_loop_B.range_data_i[0] = (rtNaN);
      } else if (full_loop_B.iend_data[full_loop_B.ndbl_d] <
                 full_loop_B.ibegin_data[full_loop_B.b_i_d]) {
        full_loop_B.ndbl_d = 0;
      } else if ((rtIsInf(full_loop_B.ibegin_data[full_loop_B.b_i_d]) || rtIsInf
                  (full_loop_B.iend_data[full_loop_B.ndbl_d])) &&
                 (full_loop_B.iend_data[full_loop_B.ndbl_d] ==
                  full_loop_B.ibegin_data[full_loop_B.b_i_d])) {
        full_loop_B.ndbl_d = 1;
        full_loop_B.range_data_i[0] = (rtNaN);
      } else if (std::floor(full_loop_B.ibegin_data[full_loop_B.b_i_d]) ==
                 full_loop_B.ibegin_data[full_loop_B.b_i_d]) {
        full_loop_B.nm1d2 = static_cast<int32_T>(std::floor
          (full_loop_B.iend_data[full_loop_B.ndbl_d] -
           full_loop_B.ibegin_data[full_loop_B.b_i_d]));
        full_loop_B.ndbl_d = full_loop_B.nm1d2 + 1;
        for (full_loop_B.n_i = 0; full_loop_B.n_i <= full_loop_B.nm1d2;
             full_loop_B.n_i++) {
          full_loop_B.range_data_i[full_loop_B.n_i] =
            full_loop_B.ibegin_data[full_loop_B.b_i_d] + static_cast<real_T>
            (full_loop_B.n_i);
        }
      } else {
        full_loop_B.ndbl = std::floor((full_loop_B.iend_data[full_loop_B.ndbl_d]
          - full_loop_B.ibegin_data[full_loop_B.b_i_d]) + 0.5);
        full_loop_B.apnd = full_loop_B.ibegin_data[full_loop_B.b_i_d] +
          full_loop_B.ndbl;
        full_loop_B.cdiff = full_loop_B.apnd -
          full_loop_B.iend_data[full_loop_B.ndbl_d];
        full_loop_B.u0 = std::abs(full_loop_B.ibegin_data[full_loop_B.b_i_d]);
        full_loop_B.u1 = std::abs(full_loop_B.iend_data[full_loop_B.ndbl_d]);
        if ((full_loop_B.u0 > full_loop_B.u1) || rtIsNaN(full_loop_B.u1)) {
          full_loop_B.u1 = full_loop_B.u0;
        }

        if (std::abs(full_loop_B.cdiff) < 4.4408920985006262E-16 *
            full_loop_B.u1) {
          full_loop_B.ndbl++;
          full_loop_B.apnd = full_loop_B.iend_data[full_loop_B.ndbl_d];
        } else if (full_loop_B.cdiff > 0.0) {
          full_loop_B.apnd = (full_loop_B.ndbl - 1.0) +
            full_loop_B.ibegin_data[full_loop_B.b_i_d];
        } else {
          full_loop_B.ndbl++;
        }

        if (full_loop_B.ndbl >= 0.0) {
          full_loop_B.ndbl_d = static_cast<int32_T>(full_loop_B.ndbl);
        } else {
          full_loop_B.ndbl_d = 0;
        }

        full_loop_B.n_i = full_loop_B.ndbl_d - 1;
        full_loop_B.ndbl_d = full_loop_B.n_i + 1;
        if (full_loop_B.n_i + 1 > 0) {
          full_loop_B.range_data_i[0] =
            full_loop_B.ibegin_data[full_loop_B.b_i_d];
          if (full_loop_B.n_i + 1 > 1) {
            full_loop_B.range_data_i[full_loop_B.n_i] = full_loop_B.apnd;
            full_loop_B.nm1d2 = full_loop_B.n_i / 2;
            full_loop_B.c_nk = full_loop_B.nm1d2 - 2;
            for (full_loop_B.b_k = 0; full_loop_B.b_k <= full_loop_B.c_nk;
                 full_loop_B.b_k++) {
              full_loop_B.k_l = full_loop_B.b_k + 1;
              full_loop_B.range_data_i[full_loop_B.k_l] =
                full_loop_B.ibegin_data[full_loop_B.b_i_d] + static_cast<real_T>
                (full_loop_B.k_l);
              full_loop_B.range_data_i[full_loop_B.n_i - full_loop_B.k_l] =
                full_loop_B.apnd - static_cast<real_T>(full_loop_B.k_l);
            }

            if (full_loop_B.nm1d2 << 1 == full_loop_B.n_i) {
              full_loop_B.range_data_i[full_loop_B.nm1d2] =
                (full_loop_B.ibegin_data[full_loop_B.b_i_d] + full_loop_B.apnd) /
                2.0;
            } else {
              full_loop_B.range_data_i[full_loop_B.nm1d2] =
                full_loop_B.ibegin_data[full_loop_B.b_i_d] + static_cast<real_T>
                (full_loop_B.nm1d2);
              full_loop_B.range_data_i[full_loop_B.nm1d2 + 1] = full_loop_B.apnd
                - static_cast<real_T>(full_loop_B.nm1d2);
            }
          }
        }
      }

      full_loop_B.nm1d2 = full_loop_B.ndbl_d - 1;
      for (full_loop_B.n_i = 0; full_loop_B.n_i <= full_loop_B.nm1d2;
           full_loop_B.n_i++) {
        full_loop_B.d_data_da[full_loop_B.n_i] = static_cast<int32_T>
          (full_loop_B.range_data_i[full_loop_B.n_i]);
      }

      full_loop_B.c_size_i = full_loop_B.ndbl_d;
      for (full_loop_B.n_i = 0; full_loop_B.n_i < full_loop_B.ndbl_d;
           full_loop_B.n_i++) {
        full_loop_B.c_data_c[full_loop_B.n_i] = course[static_cast<int32_T>
          (full_loop_B.range_data_i[full_loop_B.n_i]) - 1];
      }

      full_loop_B.waypoints_size_m[0] = full_loop_B.ndbl_d;
      for (full_loop_B.n_i = 0; full_loop_B.n_i < 3; full_loop_B.n_i++) {
        for (full_loop_B.nm1d2 = 0; full_loop_B.nm1d2 < full_loop_B.ndbl_d;
             full_loop_B.nm1d2++) {
          full_loop_B.waypoints_data_i[full_loop_B.nm1d2 + full_loop_B.ndbl_d *
            full_loop_B.n_i] = waypoints[(21 * full_loop_B.n_i +
            static_cast<int32_T>(full_loop_B.range_data_i[full_loop_B.nm1d2])) -
            1];
        }
      }

      full_loop_fitCourse_p(full_loop_B.waypoints_data_i,
                            full_loop_B.waypoints_size_m, full_loop_B.c_data_c,
                            &full_loop_B.c_size_i);
      full_loop_B.nm1d2 = full_loop_B.c_size_i;
      if (0 <= full_loop_B.nm1d2 - 1) {
        std::memcpy(&full_loop_B.e_data_j[0], &full_loop_B.c_data_c[0],
                    full_loop_B.nm1d2 * sizeof(real_T));
      }

      for (full_loop_B.n_i = 0; full_loop_B.n_i < full_loop_B.ndbl_d;
           full_loop_B.n_i++) {
        course[full_loop_B.d_data_da[full_loop_B.n_i] - 1] =
          full_loop_B.e_data_j[full_loop_B.n_i];
      }
    }
  }
}

void full_loopModelClass::full_clothoidG2fitMissingCourse(const real_T
  waypoints[63], real_T course[21])
{
  full_loop_B.waypoints[0] = waypoints[0];
  full_loop_B.waypoints_e[0] = waypoints[20];
  full_loop_B.waypoints[1] = waypoints[21];
  full_loop_B.waypoints_e[1] = waypoints[41];
  if (full_loop_isequal_p43ri(full_loop_B.waypoints, full_loop_B.waypoints_e)) {
    full_loop_fitPartialCourseLoop(waypoints, course);
  } else {
    full_loop_fitPartialCourse(waypoints, course);
  }
}

void full_loopModelClass::full_loop_fetchA(const real_T x[20], const real_T y[20],
  real_T a[20])
{
  static const real_T tmp[351] = { -1.5361481088532109E-40,
    -5.1782003708968662E-38, 5.8080516979367073E-38, -6.2922109794702842E-36,
    1.7744129415359022E-35, -9.8266873453160865E-36, -3.0557011816989596E-34,
    1.9988681524430764E-33, -2.7007621230825949E-33, 9.6497076628562535E-34,
    -8.50146594503621E-33, 8.7613736854720049E-32, -2.8258679893784358E-31,
    2.3637604856716169E-31, -5.8556266604372106E-32, -1.2863962524996432E-31,
    2.229093841830142E-30, -1.1057059963507232E-29, 2.3139349101185755E-29,
    -1.2630223562649489E-29, 2.0068564650639364E-30, -1.1052377502159136E-30,
    3.0309726719642508E-29, -2.57153235020298E-28, 7.9357820762496212E-28,
    -1.1834423538462616E-27, 3.7518152500494656E-28, -9.5988758699827141E-30,
    -5.8444661902772888E-30, 2.2799302267031842E-28, -3.118708591261201E-27,
    1.6937953593997347E-26, -3.4234259338177584E-26, 3.675290577810477E-26,
    -1.6183294340108731E-27, -2.9209077909746285E-27, -2.0493494333051533E-29,
    1.0232091530758262E-27, -2.0119872415420161E-26, 1.8157191663212143E-25,
    -6.8278782273948665E-25, 7.9289707228553727E-25, -5.1713140278139824E-25,
    -3.5757401738269863E-25, 1.7191521549607673E-25, -5.001307006229815E-29,
    2.9234616420394369E-27, -7.3372627735809734E-26, 9.6978563886575261E-25,
    -6.3976458551757164E-24, 1.6073455072306433E-23, -7.37463587795066E-25,
    -7.0522343048774666E-24, 1.4805755563608624E-23, -5.1965352404273039E-24,
    -8.5391792173019132E-29, 5.4962692899068422E-27, -1.5546891778194411E-25,
    2.6049795261751296E-24, -2.6172058881327836E-23, 1.2985982037510549E-22,
    -1.423772303418446E-22, -5.8282903661876709E-22, 4.1133508360308628E-22,
    -1.742659308147939E-22, 8.07786256209318E-23, -9.7738126735700558E-29,
    6.6212355845436972E-27, -1.7707072436748613E-25, 2.8057133511879665E-24,
    -3.4869970759687543E-23, 3.0241871214865029E-22, -9.92012310209099E-22,
    -3.2149566866116185E-21, 1.8710249707031661E-20, -1.2453541845369618E-21,
    -7.5062472154050874E-21, 2.8499865852964518E-22, -6.9207112182904389E-29,
    4.4179830835754724E-27, -4.4762524882779791E-26, -2.450817653228083E-24,
    7.1914140604820392E-23, -7.2673875098954476E-22, 3.3571441047866719E-21,
    -1.5906878744538782E-20, 1.0715370660853569E-19, -2.1813900762258771E-19,
    -3.7882773476137619E-19, 4.4188357957185649E-19, -5.2046323054922296E-20,
    -2.8170935396816464E-29, 7.8914114794548443E-28, 1.528966070127476E-25,
    -1.1332880987718864E-23, 3.3104475572268851E-22, -4.9647512138578754E-21,
    3.9715384015216385E-20, -1.6290821269847189E-19, 3.36612516663913E-19,
    -3.36275918384194E-19, -2.8323208988729979E-18, 1.5348780107717589E-17,
    -1.2231243924447674E-17, 1.5460269152965008E-18, -1.0350259940425787E-29,
    -4.7414043171551787E-28, 1.9707672417753685E-25, -1.4495788889042659E-23,
    5.1378340796211685E-22, -1.0210774519786583E-20, 1.165542649503511E-19,
    -7.1421779330877591E-19, 1.6365283191176908E-18, 4.9170568130837211E-18,
    -4.4186234291063853E-17, 1.6247947613884891E-16, -3.4187835062780104E-16,
    2.2495563268135524E-16, -2.8304172442233909E-17, -9.54190907880087E-30,
    4.33416352213585E-28, 7.30606772876727E-26, -8.4789175470441986E-24,
    3.9746370968729408E-22, -1.0350198533651566E-20, 1.589371276512773E-19,
    -1.3721089740423357E-18, 4.7868869804965763E-18, 1.9699426816042335E-17,
    -2.7595647699194014E-16, 1.2612122765846683E-15, -3.3199758280144047E-15,
    5.1284109097493322E-15, -2.9773954125181772E-15, 3.6686222388116938E-16,
    -7.13761114432792E-30, 8.6070327678610011E-28, -2.5253411261423782E-26,
    -1.429985806399278E-24, 1.4200678258817658E-22, -5.2901273901739912E-21,
    1.0879148930261737E-19, -1.2468905412479112E-18, 5.651703115185149E-18,
    4.073824764700649E-17, -7.7193016891576893E-16, 5.1280294092344238E-15,
    -1.8830251965098877E-14, 4.2082102420983456E-14, -5.4816521831539046E-14,
    2.9056289127761095E-14, -3.5049036301087839E-15, -2.7032712394278119E-30,
    4.4439845217679321E-28, -2.8561533629781625E-26, 7.4263493149653183E-25,
    7.7648205291611823E-24, -1.1313407629960782E-21, 3.4992489982228452E-20,
    -5.11237062122324E-19, 1.9082838069139238E-18, 6.02161124473958E-17,
    -1.1855133738581856E-15, 1.0647602057665829E-14, -5.5915318620809614E-14,
    1.8096099090326831E-13, -3.6385985586845819E-13, 4.2410069501559273E-13,
    -2.106362282048389E-13, 2.4385529408308407E-14, -4.8547818044528891E-31,
    9.5570081279537094E-29, -7.8572054752482576E-27, 3.3174769183447452E-25,
    -6.2142341258768858E-24, -5.0991712996566211E-23, 5.1392990708290932E-21,
    -8.807706142947147E-20, -5.8182766640448854E-19, 5.1419279154935842E-17,
    -1.04407697522146E-15, 1.1898094238539857E-14, -8.5367937011271162E-14,
    3.9513126620957262E-13, -1.1748533341492665E-12, 2.1917257282808794E-12,
    -2.3566809884820566E-12, 1.0795020408261728E-12, -1.5837465906955864E-13,
    -2.7533507225420422E-32, 5.7619182837708977E-30, -4.6471657116787863E-28,
    1.4048422360791874E-26, 3.7650962241144584E-25, -4.9228435831327322E-23,
    1.9071729205179347E-21, -3.3490783882201909E-20, -7.018689437542322E-20,
    1.8324124104655822E-17, -4.7883976550407734E-16, 7.0487303907715931E-15,
    -6.735734123826801E-14, 4.3114382655453385E-13, -1.8436618496422663E-12,
    5.1655481921478335E-12, -9.1498502333527442E-12, 9.53768065186612E-12,
    -5.5096965823391316E-12, -1.9256688414961511E-12, 2.6993907913031997E-33,
    -8.3658508533748674E-31, 1.2360111759498158E-28, -1.1391057286564071E-26,
    7.1943116140837765E-25, -3.2278401611187206E-23, 1.0313736180462972E-21,
    -2.2595952680170383E-20, 2.9013328570466337E-19, -1.4189880636575127E-19,
    -8.2575877751974837E-17, 1.9535524420193836E-15, -2.60333162544509E-14,
    2.2905798368369833E-13, -1.3730942326110817E-12, 5.5797967300488639E-12,
    -1.5044456366394642E-11, 2.5612747661164289E-11, -1.9627816796196334E-11,
    -2.8036172295220303E-11, -1.9615478304946413E-10, 3.8934925377973957E-34,
    -1.2639609126235819E-31, 1.9287682878359229E-29, -1.8332237204928374E-27,
    1.2092531131064511E-25, -5.8236835135326278E-24, 2.0915581782354698E-22,
    -5.5964099612773872E-21, 1.0833579869797173E-19, -1.3736666335311385E-18,
    6.6209633655847283E-18, 1.4362053626673917E-16, -4.0159095765450877E-15,
    5.320276578988179E-14, -4.5399145021925304E-13, 2.6343951113716903E-12,
    -1.0426603808524378E-11, 2.7378813158203465E-11, -2.4213032965198892E-11,
    -6.43589148489966E-11, 8.7111108876109732E-11, -1.58880825805031E-8,
    1.2049379324305816E-35, -4.3610770108214582E-33, 7.4936434757448969E-31,
    -8.1105245364317889E-29, 6.1705088386370215E-27, -3.480752271664829E-25,
    1.4948191338667704E-23, -4.9368146563727049E-22, 1.2499110582545291E-20,
    -2.3793207120554828E-19, 3.2322327482741956E-18, -2.6498507726404211E-17,
    7.8731033015748051E-18, 3.2775331491296092E-15, -5.1807698267687295E-14,
    4.62732644627914E-13, -2.7239785524170987E-12, 1.0896716883650769E-11,
    -1.8645986337651637E-11, 2.5459617591435155E-12, -1.3347654837468073E-8,
    1.3161132276731047E-7, -1.3227534741608429E-6, -9.7984625010885519E-38,
    3.2900432333335651E-35, -4.4581754057254838E-33, 2.5824817729473294E-31,
    5.2049615357860253E-30, -2.1583876518311414E-27, 1.9476950757610683E-25,
    -1.0716316264212252E-23, 4.1440657240625748E-22, -1.1817624319451798E-20,
    2.5249339155046378E-19, -4.0233948389965105E-18, 4.64169135391771E-17,
    -3.5476759515651092E-16, 1.1999262837080123E-15, 8.516412269170767E-15,
    -1.527199343162684E-13, 1.1449867637138848E-12, -3.6599461401055181E-12,
    -4.6103940452468584E-11, -4.7424213964325014E-9, 1.4095535848735113E-8,
    1.1415162393763462E-5, -0.00011904761791914855, -7.7487127476207258E-39,
    3.1576790378728681E-36, -5.9250135047007422E-34, 6.7643789484475193E-32,
    -5.220570875188387E-30, 2.8506788574160792E-28, -1.1098370767710674E-26,
    2.9468645436878283E-25, -4.2328657438375513E-24, -3.3901276335768838E-23,
    3.8407990599986091E-21, -1.1933448342985106E-19, 2.3702576054378613E-18,
    -3.3709086299905129E-17, 3.5240422748635714E-16, -2.688297081936284E-15,
    1.4426938768292247E-14, -4.5785087028675909E-14, 1.6710103243486247E-14,
    -1.1024143067873009E-11, -3.3079062392811025E-10, 2.8376658214791753E-8,
    2.8265347449301076E-6, 3.9682541488440042E-5, -0.016666666666889381,
    -8.6841596356231729E-42, 3.1939131296905081E-39, -4.8490390875687847E-37,
    3.2729122440862841E-35, 5.3980586162289553E-34, -3.3686936226391223E-31,
    3.7197707807256541E-29, -2.5380412938111731E-27, 1.2494404817163045E-25,
    -4.6966036280739172E-24, 1.3852307187625331E-22, -3.2509821682467773E-21,
    6.1100085267801761E-20, -9.20594856358596E-19, 1.1081925404564449E-17,
    -1.0575868027372313E-16, 7.920139233623936E-16, -4.5514965597202215E-15,
    1.3296256931854534E-14, -3.345171633728989E-13, 1.7101904098836834E-11,
    2.4300392651460408E-9, 4.6155748216027864E-8, -1.5460729722609369E-5,
    -0.00238095238099261, 1.0000000000000047 };

  const real_T *c;
  for (full_loop_B.i_kn = 0; full_loop_B.i_kn < 20; full_loop_B.i_kn++) {
    full_loop_B.v_f[full_loop_B.i_kn] = x[full_loop_B.i_kn] + y[full_loop_B.i_kn];
  }

  c = &tmp[0];
  full_loop_B.n_dd = 351;
  for (full_loop_B.b_subsb_idx_1_k = 0; full_loop_B.b_subsb_idx_1_k < 20;
       full_loop_B.b_subsb_idx_1_k++) {
    full_loop_B.x_i4[full_loop_B.b_subsb_idx_1_k] =
      x[full_loop_B.b_subsb_idx_1_k] - y[full_loop_B.b_subsb_idx_1_k];
  }

  full_loop_power(full_loop_B.x_i4, full_loop_B.dv19);
  full_loop_repmat(full_loop_B.dv19, full_loop_B.dv1);
  for (full_loop_B.b_subsb_idx_1_k = 0; full_loop_B.b_subsb_idx_1_k < 20;
       full_loop_B.b_subsb_idx_1_k++) {
    full_loop_B.x_p4[full_loop_B.b_subsb_idx_1_k] = 1.0;
  }

  std::memcpy(&full_loop_B.x_p4[20], &full_loop_B.dv1[0], 500U * sizeof(real_T));
  for (full_loop_B.i_kn = 0; full_loop_B.i_kn < 25; full_loop_B.i_kn++) {
    full_loop_B.b_subsb_idx_1_k = full_loop_B.i_kn + 1;
    for (full_loop_B.b_k_cm = 0; full_loop_B.b_k_cm < 20; full_loop_B.b_k_cm++)
    {
      full_loop_B.x_tmp_fw = 20 * full_loop_B.b_subsb_idx_1_k +
        full_loop_B.b_k_cm;
      full_loop_B.x_p4[full_loop_B.x_tmp_fw] *= full_loop_B.x_p4[20 *
        full_loop_B.i_kn + full_loop_B.b_k_cm];
    }
  }

  full_loop_power(full_loop_B.v_f, full_loop_B.dv19);
  full_loop_repmat(full_loop_B.dv19, full_loop_B.dv1);
  for (full_loop_B.b_subsb_idx_1_k = 0; full_loop_B.b_subsb_idx_1_k < 20;
       full_loop_B.b_subsb_idx_1_k++) {
    full_loop_B.x_a[full_loop_B.b_subsb_idx_1_k] = 1.0;
  }

  std::memcpy(&full_loop_B.x_a[20], &full_loop_B.dv1[0], 500U * sizeof(real_T));
  for (full_loop_B.i_kn = 0; full_loop_B.i_kn < 25; full_loop_B.i_kn++) {
    full_loop_B.b_subsb_idx_1_k = full_loop_B.i_kn + 1;
    for (full_loop_B.b_k_cm = 0; full_loop_B.b_k_cm < 20; full_loop_B.b_k_cm++)
    {
      full_loop_B.x_tmp_fw = 20 * full_loop_B.b_subsb_idx_1_k +
        full_loop_B.b_k_cm;
      full_loop_B.x_a[full_loop_B.x_tmp_fw] *= full_loop_B.x_a[20 *
        full_loop_B.i_kn + full_loop_B.b_k_cm];
    }
  }

  std::memset(&a[0], 0, 20U * sizeof(real_T));
  full_loop_B.i_g = 0.0;
  full_loop_B.j_il = 0.0;
  while (full_loop_B.n_dd > 0) {
    full_loop_B.c_ih = c[full_loop_B.n_dd - 1];
    full_loop_B.i_kn = static_cast<int32_T>(full_loop_B.i_g + 1.0);
    full_loop_B.b_k_cm = static_cast<int32_T>(full_loop_B.j_il + 1.0);
    for (full_loop_B.b_subsb_idx_1_k = 0; full_loop_B.b_subsb_idx_1_k < 20;
         full_loop_B.b_subsb_idx_1_k++) {
      a[full_loop_B.b_subsb_idx_1_k] += full_loop_B.x_p4[(full_loop_B.i_kn - 1) *
        20 + full_loop_B.b_subsb_idx_1_k] * full_loop_B.c_ih * full_loop_B.x_a
        [(full_loop_B.b_k_cm - 1) * 20 + full_loop_B.b_subsb_idx_1_k];
    }

    full_loop_B.j_il++;
    if (full_loop_B.i_g + full_loop_B.j_il > 25.0) {
      full_loop_B.i_g++;
      full_loop_B.j_il = 0.0;
    }

    full_loop_B.n_dd--;
  }

  for (full_loop_B.b_subsb_idx_1_k = 0; full_loop_B.b_subsb_idx_1_k < 20;
       full_loop_B.b_subsb_idx_1_k++) {
    a[full_loop_B.b_subsb_idx_1_k] *= 3.0 *
      full_loop_B.v_f[full_loop_B.b_subsb_idx_1_k];
  }
}

void full_loopModelClass::full_loop_fresnelg1_p4(const real_T a[20], const
  real_T d[20], const real_T c[20], creal_T z[20])
{
  boolean_T exitg1;
  for (full_loop_B.i_kb = 0; full_loop_B.i_kb < 20; full_loop_B.i_kb++) {
    z[full_loop_B.i_kb].re = 0.0;
    z[full_loop_B.i_kb].im = 0.0;
    full_loop_B.d_b[full_loop_B.i_kb] = d[full_loop_B.i_kb] - a[full_loop_B.i_kb];
  }

  full_loop_power(full_loop_B.d_b, full_loop_B.x_k3);
  for (full_loop_B.i_kb = 0; full_loop_B.i_kb < 20; full_loop_B.i_kb++) {
    full_loop_B.x_d = full_loop_B.x_k3[full_loop_B.i_kb] / (4.0 *
      a[full_loop_B.i_kb]);
    full_loop_B.criteria[full_loop_B.i_kb] = (std::abs(full_loop_B.x_d) <
      628.31853071795865);
    full_loop_B.x_k3[full_loop_B.i_kb] = full_loop_B.x_d;
  }

  full_loop_B.idx_dt = 0;
  full_loop_B.b_ii = 1;
  exitg1 = false;
  while ((!exitg1) && (full_loop_B.b_ii - 1 < 20)) {
    if (full_loop_B.criteria[full_loop_B.b_ii - 1]) {
      full_loop_B.idx_dt++;
      full_loop_B.ii_data_j[full_loop_B.idx_dt - 1] = full_loop_B.b_ii;
      if (full_loop_B.idx_dt >= 20) {
        exitg1 = true;
      } else {
        full_loop_B.b_ii++;
      }
    } else {
      full_loop_B.b_ii++;
    }
  }

  if (1 > full_loop_B.idx_dt) {
    full_loop_B.idx_dt = 0;
  }

  for (full_loop_B.b_ii = 0; full_loop_B.b_ii < full_loop_B.idx_dt;
       full_loop_B.b_ii++) {
    full_loop_B.ilarge_data_n[full_loop_B.b_ii] =
      full_loop_B.ii_data_j[full_loop_B.b_ii];
  }

  full_loop_B.i_kb = 0;
  full_loop_B.b_ii = 1;
  exitg1 = false;
  while ((!exitg1) && (full_loop_B.b_ii - 1 < 20)) {
    if (!full_loop_B.criteria[full_loop_B.b_ii - 1]) {
      full_loop_B.i_kb++;
      full_loop_B.ii_data_j[full_loop_B.i_kb - 1] = full_loop_B.b_ii;
      if (full_loop_B.i_kb >= 20) {
        exitg1 = true;
      } else {
        full_loop_B.b_ii++;
      }
    } else {
      full_loop_B.b_ii++;
    }
  }

  if (1 > full_loop_B.i_kb) {
    full_loop_B.i_kb = 0;
  }

  for (full_loop_B.b_ii = 0; full_loop_B.b_ii < full_loop_B.i_kb;
       full_loop_B.b_ii++) {
    full_loop_B.ismall_data_b[full_loop_B.b_ii] =
      full_loop_B.ii_data_j[full_loop_B.b_ii];
  }

  full_loop_B.idx_i = 0;
  full_loop_B.b_ii = 1;
  exitg1 = false;
  while ((!exitg1) && (full_loop_B.b_ii - 1 < 20)) {
    full_loop_B.ii_e = full_loop_B.b_ii - 1;
    if ((d[full_loop_B.ii_e] == 0.0) && (a[full_loop_B.ii_e] == 0.0)) {
      full_loop_B.idx_i++;
      full_loop_B.ii_data_j[full_loop_B.idx_i - 1] = full_loop_B.ii_e + 1;
      if (full_loop_B.idx_i >= 20) {
        exitg1 = true;
      } else {
        full_loop_B.b_ii++;
      }
    } else {
      full_loop_B.b_ii++;
    }
  }

  if (1 > full_loop_B.idx_i) {
    full_loop_B.idx_i = 0;
  }

  for (full_loop_B.b_ii = 0; full_loop_B.b_ii < full_loop_B.idx_i;
       full_loop_B.b_ii++) {
    full_loop_B.izero_data_b[full_loop_B.b_ii] =
      full_loop_B.ii_data_j[full_loop_B.b_ii];
  }

  if (full_loop_B.idx_dt != 0) {
    full_loop_B.a_size_j3 = full_loop_B.idx_dt;
    full_loop_B.d_size_c = full_loop_B.idx_dt;
    full_loop_B.c_size_b2 = full_loop_B.idx_dt;
    for (full_loop_B.b_ii = 0; full_loop_B.b_ii < full_loop_B.idx_dt;
         full_loop_B.b_ii++) {
      full_loop_B.d_b[full_loop_B.b_ii] =
        a[full_loop_B.ilarge_data_n[full_loop_B.b_ii] - 1];
      full_loop_B.x_k3[full_loop_B.b_ii] =
        d[full_loop_B.ilarge_data_n[full_loop_B.b_ii] - 1];
      full_loop_B.c_data_da[full_loop_B.b_ii] =
        c[full_loop_B.ilarge_data_n[full_loop_B.b_ii] - 1];
    }

    full_loop_fresnelgLargea1(full_loop_B.d_b, &full_loop_B.a_size_j3,
      full_loop_B.x_k3, &full_loop_B.d_size_c, full_loop_B.c_data_da,
      &full_loop_B.c_size_b2, full_loop_B.p_data, &full_loop_B.p_size,
      full_loop_B.q_data, &full_loop_B.q_size_p);
    full_loop_B.idx_dt = full_loop_B.p_size;
    for (full_loop_B.b_ii = 0; full_loop_B.b_ii < full_loop_B.idx_dt;
         full_loop_B.b_ii++) {
      z[full_loop_B.ilarge_data_n[full_loop_B.b_ii] - 1] =
        full_loop_B.p_data[full_loop_B.b_ii];
    }
  }

  if (full_loop_B.i_kb != 0) {
    full_loop_B.a_size_lv = full_loop_B.i_kb;
    full_loop_B.d_size_n = full_loop_B.i_kb;
    full_loop_B.c_size_al = full_loop_B.i_kb;
    for (full_loop_B.b_ii = 0; full_loop_B.b_ii < full_loop_B.i_kb;
         full_loop_B.b_ii++) {
      full_loop_B.d_b[full_loop_B.b_ii] =
        a[full_loop_B.ismall_data_b[full_loop_B.b_ii] - 1];
      full_loop_B.x_k3[full_loop_B.b_ii] =
        d[full_loop_B.ismall_data_b[full_loop_B.b_ii] - 1];
      full_loop_B.c_data_da[full_loop_B.b_ii] =
        c[full_loop_B.ismall_data_b[full_loop_B.b_ii] - 1];
    }

    full_loop_fresnelgSmalla1(full_loop_B.d_b, &full_loop_B.a_size_lv,
      full_loop_B.x_k3, &full_loop_B.d_size_n, full_loop_B.c_data_da,
      &full_loop_B.c_size_al, full_loop_B.p_data, &full_loop_B.p_size,
      full_loop_B.q_data, &full_loop_B.q_size_p);
    full_loop_B.idx_dt = full_loop_B.p_size;
    for (full_loop_B.b_ii = 0; full_loop_B.b_ii < full_loop_B.idx_dt;
         full_loop_B.b_ii++) {
      z[full_loop_B.ismall_data_b[full_loop_B.b_ii] - 1] =
        full_loop_B.p_data[full_loop_B.b_ii];
    }
  }

  if (full_loop_B.idx_i != 0) {
    full_loop_B.p_size = full_loop_B.idx_i;
    for (full_loop_B.b_ii = 0; full_loop_B.b_ii < full_loop_B.idx_i;
         full_loop_B.b_ii++) {
      full_loop_B.x_d = c[full_loop_B.izero_data_b[full_loop_B.b_ii] - 1];
      full_loop_B.p_data[full_loop_B.b_ii].re = full_loop_B.x_d * 0.0;
      full_loop_B.p_data[full_loop_B.b_ii].im = full_loop_B.x_d;
    }

    full_loop_exp_p(full_loop_B.p_data, &full_loop_B.p_size);
    full_loop_B.idx_dt = full_loop_B.p_size;
    for (full_loop_B.b_ii = 0; full_loop_B.b_ii < full_loop_B.idx_dt;
         full_loop_B.b_ii++) {
      z[full_loop_B.izero_data_b[full_loop_B.b_ii] - 1] =
        full_loop_B.p_data[full_loop_B.b_ii];
    }
  }
}

void full_loopModelClass::full_loop_clothoidG1fit2wp_p4(const creal_T z0[20],
  const real_T theta0[20], const creal_T z1[20], const real_T theta1[20], real_T
  k0[20], real_T k1[20], real_T l[20])
{
  for (full_loop_B.b_k_k = 0; full_loop_B.b_k_k < 20; full_loop_B.b_k_k++) {
    full_loop_B.z_p.re = z1[full_loop_B.b_k_k].re - z0[full_loop_B.b_k_k].re;
    full_loop_B.z_p.im = z1[full_loop_B.b_k_k].im - z0[full_loop_B.b_k_k].im;
    full_loop_B.phi_d = rt_atan2d_snf(full_loop_B.z_p.im, full_loop_B.z_p.re);
    full_loop_B.f_tmp = theta0[full_loop_B.b_k_k] - full_loop_B.phi_d;
    full_loop_B.f_k.re = full_loop_B.f_tmp * 0.0;
    if (full_loop_B.f_tmp == 0.0) {
      full_loop_B.a_re_o = std::exp(full_loop_B.f_k.re);
      full_loop_B.f_tmp = 0.0;
    } else if (rtIsInf(full_loop_B.f_tmp) && rtIsInf(full_loop_B.f_k.re) &&
               (full_loop_B.f_k.re < 0.0)) {
      full_loop_B.a_re_o = 0.0;
      full_loop_B.f_tmp = 0.0;
    } else {
      full_loop_B.r_n = std::exp(full_loop_B.f_k.re / 2.0);
      full_loop_B.a_re_o = full_loop_B.r_n * std::cos(full_loop_B.f_tmp) *
        full_loop_B.r_n;
      full_loop_B.f_tmp = full_loop_B.r_n * std::sin(full_loop_B.f_tmp) *
        full_loop_B.r_n;
    }

    full_loop_B.phi0_i[full_loop_B.b_k_k] = rt_atan2d_snf(full_loop_B.f_tmp,
      full_loop_B.a_re_o);
    full_loop_B.f_tmp = theta1[full_loop_B.b_k_k] - full_loop_B.phi_d;
    full_loop_B.f_k.re = full_loop_B.f_tmp * 0.0;
    full_loop_B.f_k.im = full_loop_B.f_tmp;
    full_loop_B.z_e[full_loop_B.b_k_k] = full_loop_B.z_p;
    full_loop_B.f[full_loop_B.b_k_k] = full_loop_B.f_k;
  }

  for (full_loop_B.b_k_k = 0; full_loop_B.b_k_k < 20; full_loop_B.b_k_k++) {
    if (full_loop_B.f[full_loop_B.b_k_k].im == 0.0) {
      full_loop_B.a_re_o = std::exp(full_loop_B.f[full_loop_B.b_k_k].re);
      full_loop_B.f_tmp = 0.0;
    } else if (rtIsInf(full_loop_B.f[full_loop_B.b_k_k].im) && rtIsInf
               (full_loop_B.f[full_loop_B.b_k_k].re) &&
               (full_loop_B.f[full_loop_B.b_k_k].re < 0.0)) {
      full_loop_B.a_re_o = 0.0;
      full_loop_B.f_tmp = 0.0;
    } else {
      full_loop_B.r_n = std::exp(full_loop_B.f[full_loop_B.b_k_k].re / 2.0);
      full_loop_B.a_re_o = full_loop_B.r_n * std::cos
        (full_loop_B.f[full_loop_B.b_k_k].im) * full_loop_B.r_n;
      full_loop_B.f_tmp = full_loop_B.r_n * std::sin
        (full_loop_B.f[full_loop_B.b_k_k].im) * full_loop_B.r_n;
    }

    full_loop_B.f_l.re = full_loop_B.a_re_o;
    full_loop_B.f_l.im = full_loop_B.f_tmp;
    full_loop_B.phi_d = rt_atan2d_snf(full_loop_B.f_tmp, full_loop_B.a_re_o);
    k1[full_loop_B.b_k_k] = full_loop_B.phi_d -
      full_loop_B.phi0_i[full_loop_B.b_k_k];
    full_loop_B.f[full_loop_B.b_k_k] = full_loop_B.f_l;
    full_loop_B.phi1_n[full_loop_B.b_k_k] = full_loop_B.phi_d;
  }

  full_loop_fetchA(full_loop_B.phi0_i, full_loop_B.phi1_n, full_loop_B.phi_a);
  full_loop_fresnelg1_p4(full_loop_B.phi_a, k1, full_loop_B.phi0_i,
    full_loop_B.f);
  for (full_loop_B.b_k_k = 0; full_loop_B.b_k_k < 20; full_loop_B.b_k_k++) {
    full_loop_B.phi_d = full_loop_rt_hypotd_snf
      (full_loop_B.z_e[full_loop_B.b_k_k].re, full_loop_B.z_e[full_loop_B.b_k_k]
       .im) / full_loop_B.f[full_loop_B.b_k_k].re;
    k0[full_loop_B.b_k_k] = (k1[full_loop_B.b_k_k] -
      full_loop_B.phi_a[full_loop_B.b_k_k]) / full_loop_B.phi_d;
    full_loop_B.a_re_o = (k1[full_loop_B.b_k_k] +
                          full_loop_B.phi_a[full_loop_B.b_k_k]) /
      full_loop_B.phi_d;
    if (full_loop_B.phi_d == 0.0) {
      k0[full_loop_B.b_k_k] = 0.0;
      full_loop_B.a_re_o = 0.0;
    }

    l[full_loop_B.b_k_k] = full_loop_B.phi_d;
    k1[full_loop_B.b_k_k] = full_loop_B.a_re_o;
  }
}

void full_loopModelClass::full_loop_pchip(const real_T x[21], const real_T y[21],
  real_T v_breaks[21], real_T v_coefs[80])
{
  int32_T k;
  int32_T b_k;
  for (b_k = 0; b_k < 20; b_k++) {
    full_loop_B.w1 = x[b_k + 1] - x[b_k];
    full_loop_B.del[b_k] = (y[b_k + 1] - y[b_k]) / full_loop_B.w1;
    full_loop_B.h_a[b_k] = full_loop_B.w1;
  }

  for (b_k = 0; b_k < 19; b_k++) {
    k = b_k + 1;
    full_loop_B.w1 = full_loop_B.h_a[k - 1];
    full_loop_B.hs = full_loop_B.w1 + full_loop_B.h_a[k];
    full_loop_B.hs3 = 3.0 * full_loop_B.hs;
    full_loop_B.w1 = (full_loop_B.w1 + full_loop_B.hs) / full_loop_B.hs3;
    full_loop_B.hs = (full_loop_B.h_a[k] + full_loop_B.hs) / full_loop_B.hs3;
    full_loop_B.slopes[k] = 0.0;
    full_loop_B.hs3 = full_loop_B.del[k - 1];
    if (full_loop_B.hs3 < 0.0) {
      if (full_loop_B.del[k] <= full_loop_B.hs3) {
        full_loop_B.slopes[k] = full_loop_B.hs3 / (full_loop_B.hs3 /
          full_loop_B.del[k] * full_loop_B.w1 + full_loop_B.hs);
      } else {
        if (full_loop_B.del[k] < 0.0) {
          full_loop_B.slopes[k] = full_loop_B.del[k] / (full_loop_B.del[k] /
            full_loop_B.hs3 * full_loop_B.hs + full_loop_B.w1);
        }
      }
    } else {
      if (full_loop_B.hs3 > 0.0) {
        if (full_loop_B.del[k] >= full_loop_B.hs3) {
          full_loop_B.slopes[k] = full_loop_B.del[k - 1] / (full_loop_B.del[k -
            1] / full_loop_B.del[k] * full_loop_B.w1 + full_loop_B.hs);
        } else {
          if (full_loop_B.del[k] > 0.0) {
            full_loop_B.slopes[k] = full_loop_B.del[k] / (full_loop_B.del[k] /
              full_loop_B.del[k - 1] * full_loop_B.hs + full_loop_B.w1);
          }
        }
      }
    }
  }

  full_loop_B.w1 = ((2.0 * full_loop_B.h_a[0] + full_loop_B.h_a[1]) *
                    full_loop_B.del[0] - full_loop_B.h_a[0] * full_loop_B.del[1])
    / (full_loop_B.h_a[0] + full_loop_B.h_a[1]);
  if (full_loop_B.del[0] < 0.0) {
    full_loop_B.hs = -1.0;
  } else if (full_loop_B.del[0] > 0.0) {
    full_loop_B.hs = 1.0;
  } else if (full_loop_B.del[0] == 0.0) {
    full_loop_B.hs = 0.0;
  } else {
    full_loop_B.hs = (rtNaN);
  }

  if (full_loop_B.w1 < 0.0) {
    full_loop_B.hs3 = -1.0;
  } else if (full_loop_B.w1 > 0.0) {
    full_loop_B.hs3 = 1.0;
  } else if (full_loop_B.w1 == 0.0) {
    full_loop_B.hs3 = 0.0;
  } else {
    full_loop_B.hs3 = (rtNaN);
  }

  if (full_loop_B.hs3 != full_loop_B.hs) {
    full_loop_B.w1 = 0.0;
  } else {
    if (full_loop_B.del[1] < 0.0) {
      full_loop_B.hs3 = -1.0;
    } else if (full_loop_B.del[1] > 0.0) {
      full_loop_B.hs3 = 1.0;
    } else if (full_loop_B.del[1] == 0.0) {
      full_loop_B.hs3 = 0.0;
    } else {
      full_loop_B.hs3 = (rtNaN);
    }

    if ((full_loop_B.hs != full_loop_B.hs3) && (std::abs(full_loop_B.w1) > std::
         abs(3.0 * full_loop_B.del[0]))) {
      full_loop_B.w1 = 3.0 * full_loop_B.del[0];
    }
  }

  full_loop_B.slopes[0] = full_loop_B.w1;
  full_loop_B.w1 = ((2.0 * full_loop_B.h_a[19] + full_loop_B.h_a[18]) *
                    full_loop_B.del[19] - full_loop_B.h_a[19] * full_loop_B.del
                    [18]) / (full_loop_B.h_a[19] + full_loop_B.h_a[18]);
  if (full_loop_B.del[19] < 0.0) {
    full_loop_B.hs = -1.0;
  } else if (full_loop_B.del[19] > 0.0) {
    full_loop_B.hs = 1.0;
  } else if (full_loop_B.del[19] == 0.0) {
    full_loop_B.hs = 0.0;
  } else {
    full_loop_B.hs = (rtNaN);
  }

  if (full_loop_B.w1 < 0.0) {
    full_loop_B.hs3 = -1.0;
  } else if (full_loop_B.w1 > 0.0) {
    full_loop_B.hs3 = 1.0;
  } else if (full_loop_B.w1 == 0.0) {
    full_loop_B.hs3 = 0.0;
  } else {
    full_loop_B.hs3 = (rtNaN);
  }

  if (full_loop_B.hs3 != full_loop_B.hs) {
    full_loop_B.w1 = 0.0;
  } else {
    if (full_loop_B.del[18] < 0.0) {
      full_loop_B.hs3 = -1.0;
    } else if (full_loop_B.del[18] > 0.0) {
      full_loop_B.hs3 = 1.0;
    } else if (full_loop_B.del[18] == 0.0) {
      full_loop_B.hs3 = 0.0;
    } else {
      full_loop_B.hs3 = (rtNaN);
    }

    if ((full_loop_B.hs != full_loop_B.hs3) && (std::abs(full_loop_B.w1) > std::
         abs(3.0 * full_loop_B.del[19]))) {
      full_loop_B.w1 = 3.0 * full_loop_B.del[19];
    }
  }

  full_loop_B.slopes[20] = full_loop_B.w1;
  for (b_k = 0; b_k < 20; b_k++) {
    full_loop_B.w1 = (full_loop_B.del[b_k] - full_loop_B.slopes[b_k]) /
      full_loop_B.h_a[b_k];
    full_loop_B.hs = (full_loop_B.slopes[b_k + 1] - full_loop_B.del[b_k]) /
      full_loop_B.h_a[b_k];
    v_coefs[b_k] = (full_loop_B.hs - full_loop_B.w1) / full_loop_B.h_a[b_k];
    v_coefs[b_k + 20] = 2.0 * full_loop_B.w1 - full_loop_B.hs;
    v_coefs[b_k + 40] = full_loop_B.slopes[b_k];
    v_coefs[b_k + 60] = y[b_k];
  }

  std::memcpy(&v_breaks[0], &x[0], 21U * sizeof(real_T));
}

void full_loopModelClass::full_loop_repmat_p43(real_T b[80])
{
  int32_T b_itilerow;
  int8_T a[4];
  a[0] = 0;
  a[1] = 3;
  a[2] = 2;
  a[3] = 1;
  for (full_loop_B.b_jcol = 0; full_loop_B.b_jcol < 4; full_loop_B.b_jcol++) {
    full_loop_B.ibmat_h = full_loop_B.b_jcol * 20;
    for (b_itilerow = 0; b_itilerow < 20; b_itilerow++) {
      b[full_loop_B.ibmat_h + b_itilerow] = a[full_loop_B.b_jcol];
    }
  }
}

void full_loopModelClass::full_loop_circshift(const real_T a[80], real_T b_a[80])
{
  real_T unusedU0;
  int32_T b_j;
  std::memcpy(&b_a[0], &a[0], 80U * sizeof(real_T));
  for (b_j = 0; b_j < 20; b_j++) {
    unusedU0 = b_a[b_j + 60];
    b_a[b_j + 60] = b_a[b_j + 40];
    b_a[b_j + 40] = b_a[b_j + 20];
    b_a[b_j + 20] = b_a[b_j];
    b_a[b_j] = unusedU0;
  }
}

void full_loopModelClass::full_loop_derivpp(const real_T pp_breaks[21], const
  real_T pp_coefs[80], real_T dpp_breaks[21], real_T dpp_coefs[80])
{
  std::memcpy(&dpp_breaks[0], &pp_breaks[0], 21U * sizeof(real_T));
  full_loop_repmat_p43(dpp_coefs);
  full_loop_circshift(pp_coefs, full_loop_B.dv4);
  for (full_loop_B.i18 = 0; full_loop_B.i18 < 80; full_loop_B.i18++) {
    dpp_coefs[full_loop_B.i18] *= full_loop_B.dv4[full_loop_B.i18];
  }
}

void full_loopModelClass::waypointTrajectory_setupPositio
  (waypointTrajectory_full_loop_T *obj)
{
  std::memcpy(&full_loop_B.t_p[0], &obj->TimeOfArrival[0], 21U * sizeof(real_T));
  full_clothoidG2fitMissingCourse(obj->Waypoints, full_loop_B.course);
  for (full_loop_B.i_e = 0; full_loop_B.i_e < 21; full_loop_B.i_e++) {
    full_loop_B.hip[full_loop_B.i_e].re = obj->Waypoints[full_loop_B.i_e];
    full_loop_B.hip[full_loop_B.i_e].im = obj->Waypoints[full_loop_B.i_e + 21];
  }

  full_loop_clothoidG1fit2wp_p4(&full_loop_B.hip[0], &full_loop_B.course[0],
    &full_loop_B.hip[1], &full_loop_B.course[1], full_loop_B.k0, full_loop_B.k1,
    full_loop_B.hl);
  std::memcpy(&full_loop_B.x_c[0], &full_loop_B.hl[0], 20U * sizeof(real_T));
  for (full_loop_B.i_e = 0; full_loop_B.i_e < 19; full_loop_B.i_e++) {
    full_loop_B.x_c[full_loop_B.i_e + 1] += full_loop_B.x_c[full_loop_B.i_e];
  }

  full_loop_B.hcd[0] = 0.0;
  std::memcpy(&full_loop_B.hcd[1], &full_loop_B.x_c[0], 20U * sizeof(real_T));
  full_loop_pchip(obj->TimeOfArrival, full_loop_B.hcd, full_loop_B.hpp_breaks,
                  full_loop_B.hpp_coefs);
  full_loop_derivpp(full_loop_B.hpp_breaks, full_loop_B.hpp_coefs,
                    full_loop_B.hspp_breaks, full_loop_B.hspp_coefs);
  full_loop_derivpp(full_loop_B.hspp_breaks, full_loop_B.hspp_coefs,
                    full_loop_B.happ_breaks, full_loop_B.happ_coefs);
  full_loop_pchip(obj->TimeOfArrival, &obj->Waypoints[42],
                  full_loop_B.vpp_breaks, full_loop_B.vpp_coefs);
  full_loop_derivpp(full_loop_B.vpp_breaks, full_loop_B.vpp_coefs,
                    full_loop_B.vspp_breaks, full_loop_B.vspp_coefs);
  full_loop_derivpp(full_loop_B.vspp_breaks, full_loop_B.vspp_coefs,
                    full_loop_B.vapp_breaks, full_loop_B.vapp_coefs);
  std::memcpy(&obj->HorizontalCumulativeDistance[0], &full_loop_B.hcd[0], 21U *
              sizeof(real_T));
  std::memcpy(&obj->HorizontalDistancePiecewisePolynomial.breaks[0],
              &full_loop_B.hpp_breaks[0], 21U * sizeof(real_T));
  std::memcpy(&obj->HorizontalDistancePiecewisePolynomial.coefs[0],
              &full_loop_B.hpp_coefs[0], 80U * sizeof(real_T));
  std::memcpy(&obj->HorizontalSpeedPiecewisePolynomial.breaks[0],
              &full_loop_B.hspp_breaks[0], 21U * sizeof(real_T));
  std::memcpy(&obj->HorizontalSpeedPiecewisePolynomial.coefs[0],
              &full_loop_B.hspp_coefs[0], 80U * sizeof(real_T));
  std::memcpy(&obj->HorizontalAccelerationPiecewisePolynomial.breaks[0],
              &full_loop_B.happ_breaks[0], 21U * sizeof(real_T));
  std::memcpy(&obj->HorizontalAccelerationPiecewisePolynomial.coefs[0],
              &full_loop_B.happ_coefs[0], 80U * sizeof(real_T));
  full_loop_derivpp(full_loop_B.happ_breaks, full_loop_B.happ_coefs,
                    obj->HorizontalJerkPiecewisePolynomial.breaks,
                    obj->HorizontalJerkPiecewisePolynomial.coefs);
  std::memcpy(&obj->HorizontalCurvatureInitial[0], &full_loop_B.k0[0], 20U *
              sizeof(real_T));
  std::memcpy(&obj->HorizontalCurvatureFinal[0], &full_loop_B.k1[0], 20U *
              sizeof(real_T));
  std::memcpy(&obj->HorizontalInitialPosition[0], &full_loop_B.hip[0], 21U *
              sizeof(creal_T));
  std::memcpy(&obj->HorizontalPiecewiseLength[0], &full_loop_B.hl[0], 20U *
              sizeof(real_T));
  std::memcpy(&obj->VerticalDistancePiecewisePolynomial.breaks[0],
              &full_loop_B.vpp_breaks[0], 21U * sizeof(real_T));
  std::memcpy(&obj->VerticalDistancePiecewisePolynomial.coefs[0],
              &full_loop_B.vpp_coefs[0], 80U * sizeof(real_T));
  std::memcpy(&obj->VerticalSpeedPiecewisePolynomial.breaks[0],
              &full_loop_B.vspp_breaks[0], 21U * sizeof(real_T));
  std::memcpy(&obj->VerticalSpeedPiecewisePolynomial.coefs[0],
              &full_loop_B.vspp_coefs[0], 80U * sizeof(real_T));
  std::memcpy(&obj->VerticalAccelerationPiecewisePolynomial.breaks[0],
              &full_loop_B.vapp_breaks[0], 21U * sizeof(real_T));
  std::memcpy(&obj->VerticalAccelerationPiecewisePolynomial.coefs[0],
              &full_loop_B.vapp_coefs[0], 80U * sizeof(real_T));
  full_loop_derivpp(full_loop_B.vapp_breaks, full_loop_B.vapp_coefs,
                    obj->VerticalJerkPiecewisePolynomial.breaks,
                    obj->VerticalJerkPiecewisePolynomial.coefs);
  for (full_loop_B.i_e = 0; full_loop_B.i_e < 21; full_loop_B.i_e++) {
    obj->Course[full_loop_B.i_e] = 57.295779513082323 *
      full_loop_B.course[full_loop_B.i_e];
  }

  obj->PathDuration = full_loop_B.t_p[20];
}

void full_loopModelClass::ful_quaternioncg_parenReference(const real_T obj_a[21],
  const real_T obj_b[21], const real_T obj_c[21], const real_T obj_d[21], const
  real_T varargin_1[20], real_T o_a[20], real_T o_b[20], real_T o_c[20], real_T
  o_d[20])
{
  int32_T i;
  int32_T o_a_tmp;
  for (i = 0; i < 20; i++) {
    o_a_tmp = static_cast<int32_T>(varargin_1[i]) - 1;
    o_a[i] = obj_a[o_a_tmp];
    o_b[i] = obj_b[o_a_tmp];
    o_c[i] = obj_c[o_a_tmp];
    o_d[i] = obj_d[o_a_tmp];
  }
}

void full_loopModelClass::full_loop_quaternioncg_times(const real_T x_a[20],
  const real_T x_b[20], const real_T x_c[20], const real_T x_d[20], const real_T
  y_a[20], const real_T y_b[20], const real_T y_c[20], const real_T y_d[20],
  real_T o_a[20], real_T o_b[20], real_T o_c[20], real_T o_d[20])
{
  int32_T i;
  for (i = 0; i < 20; i++) {
    o_a[i] = ((x_a[i] * y_a[i] - x_b[i] * y_b[i]) - x_c[i] * y_c[i]) - x_d[i] *
      y_d[i];
    o_b[i] = ((x_a[i] * y_b[i] + x_b[i] * y_a[i]) + x_c[i] * y_d[i]) - x_d[i] *
      y_c[i];
    o_c[i] = ((x_a[i] * y_c[i] - x_b[i] * y_d[i]) + x_c[i] * y_a[i]) + x_d[i] *
      y_b[i];
    o_d[i] = ((x_a[i] * y_d[i] + x_b[i] * y_c[i]) - x_c[i] * y_b[i]) + x_d[i] *
      y_a[i];
  }
}

void full_loopModelClass::f_quaternioncg_parenReference_p(const real_T obj_a[20],
  const real_T obj_b[20], const real_T obj_c[20], const real_T obj_d[20], const
  boolean_T varargin_1[20], real_T o_a_data[], int32_T *o_a_size, real_T
  o_b_data[], int32_T *o_b_size, real_T o_c_data[], int32_T *o_c_size, real_T
  o_d_data[], int32_T *o_d_size)
{
  int32_T partialTrueCount;
  full_loop_B.trueCount = 0;
  partialTrueCount = 0;
  for (full_loop_B.e_i_c = 0; full_loop_B.e_i_c < 20; full_loop_B.e_i_c++) {
    if (varargin_1[full_loop_B.e_i_c]) {
      full_loop_B.trueCount++;
      full_loop_B.b_data_k1[partialTrueCount] = static_cast<int8_T>
        (full_loop_B.e_i_c + 1);
      partialTrueCount++;
    }
  }

  *o_a_size = full_loop_B.trueCount;
  *o_b_size = full_loop_B.trueCount;
  *o_c_size = full_loop_B.trueCount;
  *o_d_size = full_loop_B.trueCount;
  for (partialTrueCount = 0; partialTrueCount < full_loop_B.trueCount;
       partialTrueCount++) {
    full_loop_B.e_i_c = full_loop_B.b_data_k1[partialTrueCount] - 1;
    o_a_data[partialTrueCount] = obj_a[full_loop_B.e_i_c];
    o_b_data[partialTrueCount] = obj_b[full_loop_B.e_i_c];
    o_c_data[partialTrueCount] = obj_c[full_loop_B.e_i_c];
    o_d_data[partialTrueCount] = obj_d[full_loop_B.e_i_c];
  }
}

void full_loopModelClass::full_loop_quaternionBase_rotvec(const real_T q_a[20],
  const real_T q_b[20], const real_T q_c[20], const real_T q_d[20], real_T rv[60])
{
  int32_T b_k;
  for (b_k = 0; b_k < 20; b_k++) {
    full_loop_B.n_p = std::sqrt(((q_a[b_k] * q_a[b_k] + q_b[b_k] * q_b[b_k]) +
      q_c[b_k] * q_c[b_k]) + q_d[b_k] * q_d[b_k]);
    full_loop_B.m[b_k] = q_a[b_k] / full_loop_B.n_p;
    full_loop_B.m[b_k + 20] = q_b[b_k] / full_loop_B.n_p;
    full_loop_B.m[b_k + 40] = q_c[b_k] / full_loop_B.n_p;
    full_loop_B.m[b_k + 60] = q_d[b_k] / full_loop_B.n_p;
    full_loop_B.n_b[b_k] = 2.0 * std::acos(full_loop_B.m[b_k]);
  }

  for (b_k = 0; b_k < 60; b_k++) {
    full_loop_B.b_z1[b_k] = full_loop_rt_powd_snf(full_loop_B.m[(b_k / 20 + 1) *
      20 + b_k % 20], 2.0);
  }

  std::memcpy(&full_loop_B.mag[0], &full_loop_B.b_z1[0], 20U * sizeof(real_T));
  for (b_k = 0; b_k < 2; b_k++) {
    full_loop_B.xoffset = (b_k + 1) * 20 - 1;
    for (full_loop_B.c_j_c = 0; full_loop_B.c_j_c < 20; full_loop_B.c_j_c++) {
      full_loop_B.mag[full_loop_B.c_j_c] += full_loop_B.b_z1
        [(full_loop_B.xoffset + full_loop_B.c_j_c) + 1];
    }
  }

  for (b_k = 0; b_k < 20; b_k++) {
    full_loop_B.mag[b_k] = std::sqrt(full_loop_B.mag[b_k]);
  }

  std::memset(&rv[0], 0, 60U * sizeof(real_T));
  for (b_k = 0; b_k < 20; b_k++) {
    if (full_loop_B.mag[b_k] > 2.2204460492503131E-15) {
      rv[b_k] = full_loop_B.m[b_k + 20] * full_loop_B.n_b[b_k] /
        full_loop_B.mag[b_k];
      rv[b_k + 20] = full_loop_B.m[b_k + 40] * full_loop_B.n_b[b_k] /
        full_loop_B.mag[b_k];
      rv[b_k + 40] = full_loop_B.m[b_k + 60] * full_loop_B.n_b[b_k] /
        full_loop_B.mag[b_k];
    }
  }
}

void full_loopModelClass::full_loop_getang(const real_T qi_a[20], const real_T
  qi_b[20], const real_T qi_c[20], const real_T qi_d[20], const real_T qf_a[20],
  const real_T qf_b[20], const real_T qf_c[20], const real_T qf_d[20], real_T
  dtheta[20], real_T e[60])
{
  boolean_T idx;
  boolean_T exitg1;
  for (full_loop_B.b_j_m = 0; full_loop_B.b_j_m < 20; full_loop_B.b_j_m++) {
    full_loop_B.izero_data_e[full_loop_B.b_j_m] = -qi_b[full_loop_B.b_j_m];
    full_loop_B.qi_c[full_loop_B.b_j_m] = -qi_c[full_loop_B.b_j_m];
    full_loop_B.qi_d[full_loop_B.b_j_m] = -qi_d[full_loop_B.b_j_m];
  }

  full_loop_quaternioncg_times(qi_a, full_loop_B.izero_data_e, full_loop_B.qi_c,
    full_loop_B.qi_d, qf_a, qf_b, qf_c, qf_d, full_loop_B.deltaQuat_a,
    full_loop_B.deltaQuat_b, full_loop_B.deltaQuat_c, full_loop_B.deltaQuat_d);
  full_loop_B.b_j_m = 0;
  for (full_loop_B.b_k_fr = 0; full_loop_B.b_k_fr < 20; full_loop_B.b_k_fr++) {
    full_loop_B.scale_c = std::sqrt(((full_loop_B.deltaQuat_a[full_loop_B.b_k_fr]
      * full_loop_B.deltaQuat_a[full_loop_B.b_k_fr] +
      full_loop_B.deltaQuat_b[full_loop_B.b_k_fr] *
      full_loop_B.deltaQuat_b[full_loop_B.b_k_fr]) +
      full_loop_B.deltaQuat_c[full_loop_B.b_k_fr] *
      full_loop_B.deltaQuat_c[full_loop_B.b_k_fr]) +
      full_loop_B.deltaQuat_d[full_loop_B.b_k_fr] *
      full_loop_B.deltaQuat_d[full_loop_B.b_k_fr]);
    full_loop_B.absxk_j = full_loop_B.deltaQuat_a[full_loop_B.b_k_fr] /
      full_loop_B.scale_c;
    idx = (full_loop_B.absxk_j < 0.0);
    if (idx) {
      full_loop_B.ii_data_i[full_loop_B.b_j_m] = full_loop_B.b_k_fr + 1;
      full_loop_B.b_j_m++;
    }

    full_loop_B.deltaQuat_a[full_loop_B.b_k_fr] = full_loop_B.absxk_j;
    full_loop_B.deltaQuat_b[full_loop_B.b_k_fr] /= full_loop_B.scale_c;
    full_loop_B.deltaQuat_c[full_loop_B.b_k_fr] /= full_loop_B.scale_c;
    full_loop_B.deltaQuat_d[full_loop_B.b_k_fr] /= full_loop_B.scale_c;
    full_loop_B.idx[full_loop_B.b_k_fr] = idx;
  }

  f_quaternioncg_parenReference_p(full_loop_B.deltaQuat_a,
    full_loop_B.deltaQuat_b, full_loop_B.deltaQuat_c, full_loop_B.deltaQuat_d,
    full_loop_B.idx, full_loop_B.izero_data_e, &full_loop_B.izero_size,
    full_loop_B.qi_c, &full_loop_B.obj_b_size, full_loop_B.qi_d,
    &full_loop_B.obj_c_size, full_loop_B.obj_d_data, &full_loop_B.obj_d_size);
  full_loop_B.b_k_fr = full_loop_B.izero_size;
  for (full_loop_B.b_j_m = 0; full_loop_B.b_j_m < full_loop_B.b_k_fr;
       full_loop_B.b_j_m++) {
    full_loop_B.deltaQuat_a[full_loop_B.ii_data_i[full_loop_B.b_j_m] - 1] =
      -full_loop_B.izero_data_e[full_loop_B.b_j_m];
  }

  full_loop_B.b_j_m = 0;
  for (full_loop_B.b_k_fr = 0; full_loop_B.b_k_fr < 20; full_loop_B.b_k_fr++) {
    if (full_loop_B.idx[full_loop_B.b_k_fr]) {
      full_loop_B.c_data_ap[full_loop_B.b_j_m] = static_cast<int8_T>
        (full_loop_B.b_k_fr + 1);
      full_loop_B.b_j_m++;
    }
  }

  full_loop_B.b_k_fr = full_loop_B.obj_b_size;
  for (full_loop_B.b_j_m = 0; full_loop_B.b_j_m < full_loop_B.b_k_fr;
       full_loop_B.b_j_m++) {
    full_loop_B.deltaQuat_b[full_loop_B.c_data_ap[full_loop_B.b_j_m] - 1] =
      -full_loop_B.qi_c[full_loop_B.b_j_m];
  }

  full_loop_B.b_j_m = 0;
  for (full_loop_B.b_k_fr = 0; full_loop_B.b_k_fr < 20; full_loop_B.b_k_fr++) {
    if (full_loop_B.idx[full_loop_B.b_k_fr]) {
      full_loop_B.d_data_fm[full_loop_B.b_j_m] = static_cast<int8_T>
        (full_loop_B.b_k_fr + 1);
      full_loop_B.b_j_m++;
    }
  }

  full_loop_B.b_k_fr = full_loop_B.obj_c_size;
  for (full_loop_B.b_j_m = 0; full_loop_B.b_j_m < full_loop_B.b_k_fr;
       full_loop_B.b_j_m++) {
    full_loop_B.deltaQuat_c[full_loop_B.d_data_fm[full_loop_B.b_j_m] - 1] =
      -full_loop_B.qi_d[full_loop_B.b_j_m];
  }

  full_loop_B.b_j_m = 0;
  for (full_loop_B.b_k_fr = 0; full_loop_B.b_k_fr < 20; full_loop_B.b_k_fr++) {
    if (full_loop_B.idx[full_loop_B.b_k_fr]) {
      full_loop_B.e_data_g[full_loop_B.b_j_m] = static_cast<int8_T>
        (full_loop_B.b_k_fr + 1);
      full_loop_B.b_j_m++;
    }
  }

  full_loop_B.b_k_fr = full_loop_B.obj_d_size;
  for (full_loop_B.b_j_m = 0; full_loop_B.b_j_m < full_loop_B.b_k_fr;
       full_loop_B.b_j_m++) {
    full_loop_B.deltaQuat_d[full_loop_B.e_data_g[full_loop_B.b_j_m] - 1] =
      -full_loop_B.obj_d_data[full_loop_B.b_j_m];
  }

  full_loop_quaternionBase_rotvec(full_loop_B.deltaQuat_a,
    full_loop_B.deltaQuat_b, full_loop_B.deltaQuat_c, full_loop_B.deltaQuat_d,
    full_loop_B.rv);
  for (full_loop_B.b_j_m = 0; full_loop_B.b_j_m < 20; full_loop_B.b_j_m++) {
    dtheta[full_loop_B.b_j_m] = 0.0;
    full_loop_B.scale_c = 3.3121686421112381E-170;
    full_loop_B.absxk_j = std::abs(full_loop_B.rv[full_loop_B.b_j_m]);
    if (full_loop_B.absxk_j > 3.3121686421112381E-170) {
      full_loop_B.yv = 1.0;
      full_loop_B.scale_c = full_loop_B.absxk_j;
    } else {
      full_loop_B.t_e = full_loop_B.absxk_j / 3.3121686421112381E-170;
      full_loop_B.yv = full_loop_B.t_e * full_loop_B.t_e;
    }

    full_loop_B.absxk_j = std::abs(full_loop_B.rv[full_loop_B.b_j_m + 20]);
    if (full_loop_B.absxk_j > full_loop_B.scale_c) {
      full_loop_B.t_e = full_loop_B.scale_c / full_loop_B.absxk_j;
      full_loop_B.yv = full_loop_B.yv * full_loop_B.t_e * full_loop_B.t_e + 1.0;
      full_loop_B.scale_c = full_loop_B.absxk_j;
    } else {
      full_loop_B.t_e = full_loop_B.absxk_j / full_loop_B.scale_c;
      full_loop_B.yv += full_loop_B.t_e * full_loop_B.t_e;
    }

    full_loop_B.absxk_j = std::abs(full_loop_B.rv[full_loop_B.b_j_m + 40]);
    if (full_loop_B.absxk_j > full_loop_B.scale_c) {
      full_loop_B.t_e = full_loop_B.scale_c / full_loop_B.absxk_j;
      full_loop_B.yv = full_loop_B.yv * full_loop_B.t_e * full_loop_B.t_e + 1.0;
      full_loop_B.scale_c = full_loop_B.absxk_j;
    } else {
      full_loop_B.t_e = full_loop_B.absxk_j / full_loop_B.scale_c;
      full_loop_B.yv += full_loop_B.t_e * full_loop_B.t_e;
    }

    dtheta[full_loop_B.b_j_m] = full_loop_B.scale_c * std::sqrt(full_loop_B.yv);
  }

  for (full_loop_B.b_j_m = 0; full_loop_B.b_j_m < 3; full_loop_B.b_j_m++) {
    for (full_loop_B.b_k_fr = 0; full_loop_B.b_k_fr < 20; full_loop_B.b_k_fr++)
    {
      full_loop_B.e_tmp_g = 20 * full_loop_B.b_j_m + full_loop_B.b_k_fr;
      e[full_loop_B.e_tmp_g] = full_loop_B.rv[full_loop_B.e_tmp_g] /
        dtheta[full_loop_B.b_k_fr];
    }
  }

  full_loop_B.b_k_fr = 0;
  full_loop_B.b_j_m = 1;
  exitg1 = false;
  while ((!exitg1) && (full_loop_B.b_j_m - 1 < 20)) {
    if (dtheta[full_loop_B.b_j_m - 1] <= 0.0) {
      full_loop_B.b_k_fr++;
      full_loop_B.ii_data_i[full_loop_B.b_k_fr - 1] = full_loop_B.b_j_m;
      if (full_loop_B.b_k_fr >= 20) {
        exitg1 = true;
      } else {
        full_loop_B.b_j_m++;
      }
    } else {
      full_loop_B.b_j_m++;
    }
  }

  if (1 > full_loop_B.b_k_fr) {
    full_loop_B.b_k_fr = 0;
  }

  for (full_loop_B.b_j_m = 0; full_loop_B.b_j_m < full_loop_B.b_k_fr;
       full_loop_B.b_j_m++) {
    full_loop_B.izero_data_e[full_loop_B.b_j_m] =
      full_loop_B.ii_data_i[full_loop_B.b_j_m];
  }

  for (full_loop_B.b_j_m = 0; full_loop_B.b_j_m < 3; full_loop_B.b_j_m++) {
    for (full_loop_B.e_tmp_g = 0; full_loop_B.e_tmp_g < full_loop_B.b_k_fr;
         full_loop_B.e_tmp_g++) {
      e[(static_cast<int32_T>(full_loop_B.izero_data_e[full_loop_B.e_tmp_g]) +
         20 * full_loop_B.b_j_m) - 1] = 0.0;
    }
  }
}

void full_loopModelClass::full_loop_bd(const real_T e[3], real_T dtheta, const
  real_T xin[3], real_T xout[3])
{
  int32_T b_k;
  if (dtheta > 1.0E-6) {
    full_loop_B.b1_b = std::sin(dtheta) / dtheta;
    full_loop_B.b2_n = (std::cos(dtheta) - 1.0) / dtheta;
    full_loop_B.b0_b = 0.0;
    for (b_k = 0; b_k < 3; b_k++) {
      full_loop_B.b0_b += xin[b_k] * e[b_k];
    }

    full_loop_B.temp2_idx_0_d = e[1] * xin[2] - e[2] * xin[1];
    full_loop_B.temp2_idx_1_k = e[2] * xin[0] - e[0] * xin[2];
    full_loop_B.temp2_idx_2_j = e[0] * xin[1] - e[1] * xin[0];
    xout[0] = ((full_loop_B.temp2_idx_1_k * e[2] - full_loop_B.temp2_idx_2_j *
                e[1]) * full_loop_B.b1_b + full_loop_B.b0_b * e[0]) +
      full_loop_B.b2_n * full_loop_B.temp2_idx_0_d;
    xout[1] = ((full_loop_B.temp2_idx_2_j * e[0] - full_loop_B.temp2_idx_0_d *
                e[2]) * full_loop_B.b1_b + full_loop_B.b0_b * e[1]) +
      full_loop_B.b2_n * full_loop_B.temp2_idx_1_k;
    xout[2] = ((full_loop_B.temp2_idx_0_d * e[1] - full_loop_B.temp2_idx_1_k *
                e[0]) * full_loop_B.b1_b + full_loop_B.b0_b * e[2]) +
      full_loop_B.b2_n * full_loop_B.temp2_idx_2_j;
  } else {
    xout[0] = xin[0];
    xout[1] = xin[1];
    xout[2] = xin[2];
  }
}

void full_loopModelClass::full_loop_bd_p(const real_T e[3], real_T dtheta, const
  real_T xin[3], real_T xout[3])
{
  int32_T b_k;
  if (dtheta > 1.0E-6) {
    full_loop_B.b1 = 0.5 * dtheta * std::sin(dtheta) / (1.0 - std::cos(dtheta));
    full_loop_B.b2 = 0.5 * dtheta;
    full_loop_B.b0 = 0.0;
    for (b_k = 0; b_k < 3; b_k++) {
      full_loop_B.b0 += xin[b_k] * e[b_k];
    }

    full_loop_B.temp2_idx_0_j = e[1] * xin[2] - e[2] * xin[1];
    full_loop_B.temp2_idx_1_n = e[2] * xin[0] - e[0] * xin[2];
    full_loop_B.temp2_idx_2_p = e[0] * xin[1] - e[1] * xin[0];
    xout[0] = ((full_loop_B.temp2_idx_1_n * e[2] - full_loop_B.temp2_idx_2_p *
                e[1]) * full_loop_B.b1 + full_loop_B.b0 * e[0]) + full_loop_B.b2
      * full_loop_B.temp2_idx_0_j;
    xout[1] = ((full_loop_B.temp2_idx_2_p * e[0] - full_loop_B.temp2_idx_0_j *
                e[2]) * full_loop_B.b1 + full_loop_B.b0 * e[1]) + full_loop_B.b2
      * full_loop_B.temp2_idx_1_n;
    xout[2] = ((full_loop_B.temp2_idx_0_j * e[1] - full_loop_B.temp2_idx_1_n *
                e[0]) * full_loop_B.b1 + full_loop_B.b0 * e[2]) + full_loop_B.b2
      * full_loop_B.temp2_idx_2_p;
  } else {
    xout[0] = xin[0];
    xout[1] = xin[1];
    xout[2] = xin[2];
  }
}

real_T full_loopModelClass::full_loop_xnrm2_p43rio(int32_T n, const real_T x[57],
  int32_T ix0)
{
  real_T y;
  int32_T k;
  y = 0.0;
  if (n >= 1) {
    if (n == 1) {
      y = std::abs(x[ix0 - 1]);
    } else {
      full_loop_B.scale_l = 3.3121686421112381E-170;
      full_loop_B.kend_m = ix0 + n;
      for (k = ix0; k < full_loop_B.kend_m; k++) {
        full_loop_B.absxk_f = std::abs(x[k - 1]);
        if (full_loop_B.absxk_f > full_loop_B.scale_l) {
          full_loop_B.t_h = full_loop_B.scale_l / full_loop_B.absxk_f;
          y = y * full_loop_B.t_h * full_loop_B.t_h + 1.0;
          full_loop_B.scale_l = full_loop_B.absxk_f;
        } else {
          full_loop_B.t_h = full_loop_B.absxk_f / full_loop_B.scale_l;
          y += full_loop_B.t_h * full_loop_B.t_h;
        }
      }

      y = full_loop_B.scale_l * std::sqrt(y);
    }
  }

  return y;
}

real_T full_loopModelClass::full_loop_xdotc(int32_T n, const real_T x[57],
  int32_T ix0, const real_T y[57], int32_T iy0)
{
  real_T d;
  int32_T ix;
  int32_T iy;
  int32_T k;
  d = 0.0;
  if (n >= 1) {
    ix = ix0 - 1;
    iy = iy0 - 1;
    for (k = 0; k < n; k++) {
      d += x[ix] * y[iy];
      ix++;
      iy++;
    }
  }

  return d;
}

void full_loopModelClass::full_loop_xaxpy_p(int32_T n, real_T a, int32_T ix0,
  const real_T y[57], int32_T iy0, real_T b_y[57])
{
  int32_T ix;
  int32_T iy;
  int32_T k;
  std::memcpy(&b_y[0], &y[0], 57U * sizeof(real_T));
  if ((n < 1) || (a == 0.0)) {
  } else {
    ix = ix0;
    iy = iy0 - 1;
    for (k = 0; k < n; k++) {
      b_y[iy] += b_y[ix - 1] * a;
      ix++;
      iy++;
    }
  }
}

real_T full_loopModelClass::full_loop_xnrm2_p43riob(int32_T n, const real_T x[3],
  int32_T ix0)
{
  real_T y;
  int32_T k;
  y = 0.0;
  if (n >= 1) {
    if (n == 1) {
      y = std::abs(x[ix0 - 1]);
    } else {
      full_loop_B.scale_e = 3.3121686421112381E-170;
      full_loop_B.kend_i = ix0 + n;
      for (k = ix0; k < full_loop_B.kend_i; k++) {
        full_loop_B.absxk_hv = std::abs(x[k - 1]);
        if (full_loop_B.absxk_hv > full_loop_B.scale_e) {
          full_loop_B.t_g = full_loop_B.scale_e / full_loop_B.absxk_hv;
          y = y * full_loop_B.t_g * full_loop_B.t_g + 1.0;
          full_loop_B.scale_e = full_loop_B.absxk_hv;
        } else {
          full_loop_B.t_g = full_loop_B.absxk_hv / full_loop_B.scale_e;
          y += full_loop_B.t_g * full_loop_B.t_g;
        }
      }

      y = full_loop_B.scale_e * std::sqrt(y);
    }
  }

  return y;
}

void full_loopModelClass::full_loop_xrotg_p(real_T a, real_T b, real_T *b_a,
  real_T *b_b, real_T *c, real_T *s)
{
  full_loop_B.roe = b;
  full_loop_B.absa = std::abs(a);
  full_loop_B.absb = std::abs(b);
  if (full_loop_B.absa > full_loop_B.absb) {
    full_loop_B.roe = a;
  }

  full_loop_B.scale_g = full_loop_B.absa + full_loop_B.absb;
  if (full_loop_B.scale_g == 0.0) {
    *s = 0.0;
    *c = 1.0;
    *b_a = 0.0;
    *b_b = 0.0;
  } else {
    full_loop_B.ads = full_loop_B.absa / full_loop_B.scale_g;
    full_loop_B.bds = full_loop_B.absb / full_loop_B.scale_g;
    *b_a = std::sqrt(full_loop_B.ads * full_loop_B.ads + full_loop_B.bds *
                     full_loop_B.bds) * full_loop_B.scale_g;
    if (full_loop_B.roe < 0.0) {
      *b_a = -*b_a;
    }

    *c = a / *b_a;
    *s = b / *b_a;
    if (full_loop_B.absa > full_loop_B.absb) {
      *b_b = *s;
    } else if (*c != 0.0) {
      *b_b = 1.0 / *c;
    } else {
      *b_b = 1.0;
    }
  }
}

void full_loopModelClass::full_loop_svd(const real_T A[57], real_T U[3])
{
  boolean_T apply_transform;
  boolean_T exitg1;
  std::memcpy(&full_loop_B.A_h[0], &A[0], 57U * sizeof(real_T));
  full_loop_B.s_i[0] = 0.0;
  full_loop_B.e_j[0] = 0.0;
  full_loop_B.s_i[1] = 0.0;
  full_loop_B.e_j[1] = 0.0;
  full_loop_B.s_i[2] = 0.0;
  full_loop_B.e_j[2] = 0.0;
  std::memset(&full_loop_B.work_k[0], 0, 19U * sizeof(real_T));
  for (full_loop_B.m_az = 0; full_loop_B.m_az < 3; full_loop_B.m_az++) {
    full_loop_B.ix_nt = full_loop_B.m_az + 1;
    full_loop_B.qp1 = full_loop_B.ix_nt + 1;
    full_loop_B.qq = (full_loop_B.ix_nt - 1) * 19 + full_loop_B.ix_nt;
    apply_transform = false;
    full_loop_B.nrm = full_loop_xnrm2_p43rio(20 - full_loop_B.ix_nt,
      full_loop_B.A_h, full_loop_B.qq);
    if (full_loop_B.nrm > 0.0) {
      apply_transform = true;
      if (full_loop_B.A_h[full_loop_B.qq - 1] < 0.0) {
        full_loop_B.s_i[full_loop_B.ix_nt - 1] = -full_loop_B.nrm;
      } else {
        full_loop_B.s_i[full_loop_B.ix_nt - 1] = full_loop_B.nrm;
      }

      full_loop_B.nrm = full_loop_B.s_i[full_loop_B.ix_nt - 1];
      if (std::abs(full_loop_B.nrm) >= 1.0020841800044864E-292) {
        full_loop_B.rt = 1.0 / full_loop_B.nrm;
        full_loop_B.qjj = full_loop_B.qq - full_loop_B.ix_nt;
        for (full_loop_B.qs = full_loop_B.qq; full_loop_B.qs <= full_loop_B.qjj
             + 19; full_loop_B.qs++) {
          full_loop_B.A_h[full_loop_B.qs - 1] *= full_loop_B.rt;
        }
      } else {
        full_loop_B.qjj = full_loop_B.qq - full_loop_B.ix_nt;
        for (full_loop_B.qs = full_loop_B.qq; full_loop_B.qs <= full_loop_B.qjj
             + 19; full_loop_B.qs++) {
          full_loop_B.A_h[full_loop_B.qs - 1] /= full_loop_B.nrm;
        }
      }

      full_loop_B.A_h[full_loop_B.qq - 1]++;
      full_loop_B.s_i[full_loop_B.ix_nt - 1] = -full_loop_B.nrm;
    } else {
      full_loop_B.s_i[full_loop_B.ix_nt - 1] = 0.0;
    }

    for (full_loop_B.qs = full_loop_B.qp1; full_loop_B.qs < 4; full_loop_B.qs++)
    {
      full_loop_B.qjj = (full_loop_B.qs - 1) * 19 + full_loop_B.ix_nt;
      if (apply_transform) {
        std::memcpy(&full_loop_B.A_n[0], &full_loop_B.A_h[0], 57U * sizeof
                    (real_T));
        full_loop_xaxpy_p(20 - full_loop_B.ix_nt, -(full_loop_xdotc(20 -
          full_loop_B.ix_nt, full_loop_B.A_h, full_loop_B.qq, full_loop_B.A_h,
          full_loop_B.qjj) / full_loop_B.A_h[((full_loop_B.ix_nt - 1) * 19 +
          full_loop_B.ix_nt) - 1]), full_loop_B.qq, full_loop_B.A_n,
                          full_loop_B.qjj, full_loop_B.A_h);
      }

      full_loop_B.e_j[full_loop_B.qs - 1] = full_loop_B.A_h[full_loop_B.qjj - 1];
    }

    if (full_loop_B.ix_nt <= 1) {
      full_loop_B.nrm = full_loop_xnrm2_p43riob(2, full_loop_B.e_j, 2);
      if (full_loop_B.nrm == 0.0) {
        full_loop_B.e_j[0] = 0.0;
      } else {
        if (full_loop_B.e_j[1] < 0.0) {
          full_loop_B.e_j[0] = -full_loop_B.nrm;
        } else {
          full_loop_B.e_j[0] = full_loop_B.nrm;
        }

        full_loop_B.rt = full_loop_B.e_j[0];
        if (std::abs(full_loop_B.e_j[0]) >= 1.0020841800044864E-292) {
          full_loop_B.rt = 1.0 / full_loop_B.e_j[0];
          for (full_loop_B.qs = full_loop_B.qp1; full_loop_B.qs < 4;
               full_loop_B.qs++) {
            full_loop_B.e_j[full_loop_B.qs - 1] *= full_loop_B.rt;
          }
        } else {
          for (full_loop_B.qs = full_loop_B.qp1; full_loop_B.qs < 4;
               full_loop_B.qs++) {
            full_loop_B.e_j[full_loop_B.qs - 1] /= full_loop_B.rt;
          }
        }

        full_loop_B.e_j[1]++;
        full_loop_B.e_j[0] = -full_loop_B.e_j[0];
        for (full_loop_B.ix_nt = full_loop_B.qp1; full_loop_B.ix_nt < 20;
             full_loop_B.ix_nt++) {
          full_loop_B.work_k[full_loop_B.ix_nt - 1] = 0.0;
        }

        for (full_loop_B.qjj = full_loop_B.qp1; full_loop_B.qjj < 4;
             full_loop_B.qjj++) {
          full_loop_B.nrm = full_loop_B.e_j[full_loop_B.qjj - 1];
          if (!(full_loop_B.nrm == 0.0)) {
            full_loop_B.ix_nt = (full_loop_B.qjj - 1) * 19 + 1;
            full_loop_B.qq = 1;
            for (full_loop_B.qs = 0; full_loop_B.qs < 18; full_loop_B.qs++) {
              full_loop_B.work_k[full_loop_B.qq] += full_loop_B.nrm *
                full_loop_B.A_h[full_loop_B.ix_nt];
              full_loop_B.ix_nt++;
              full_loop_B.qq++;
            }
          }
        }

        for (full_loop_B.qjj = full_loop_B.qp1; full_loop_B.qjj < 4;
             full_loop_B.qjj++) {
          full_loop_B.nrm = -full_loop_B.e_j[full_loop_B.qjj - 1] /
            full_loop_B.e_j[1];
          if (!(full_loop_B.nrm == 0.0)) {
            full_loop_B.ix_nt = 1;
            full_loop_B.qq = (full_loop_B.qjj - 1) * 19 + 1;
            for (full_loop_B.qs = 0; full_loop_B.qs < 18; full_loop_B.qs++) {
              full_loop_B.A_h[full_loop_B.qq] += full_loop_B.nrm *
                full_loop_B.work_k[full_loop_B.ix_nt];
              full_loop_B.ix_nt++;
              full_loop_B.qq++;
            }
          }
        }
      }
    }
  }

  full_loop_B.m_az = 1;
  full_loop_B.e_j[1] = full_loop_B.A_h[39];
  full_loop_B.e_j[2] = 0.0;
  if (full_loop_B.s_i[0] != 0.0) {
    full_loop_B.rt = std::abs(full_loop_B.s_i[0]);
    full_loop_B.nrm = full_loop_B.s_i[0] / full_loop_B.rt;
    full_loop_B.s_i[0] = full_loop_B.rt;
    full_loop_B.e_j[0] /= full_loop_B.nrm;
  }

  if (full_loop_B.e_j[0] != 0.0) {
    full_loop_B.rt = std::abs(full_loop_B.e_j[0]);
    full_loop_B.nrm = full_loop_B.rt / full_loop_B.e_j[0];
    full_loop_B.e_j[0] = full_loop_B.rt;
    full_loop_B.s_i[1] *= full_loop_B.nrm;
  }

  if (full_loop_B.s_i[1] != 0.0) {
    full_loop_B.rt = std::abs(full_loop_B.s_i[1]);
    full_loop_B.nrm = full_loop_B.s_i[1] / full_loop_B.rt;
    full_loop_B.s_i[1] = full_loop_B.rt;
    full_loop_B.e_j[1] = full_loop_B.A_h[39] / full_loop_B.nrm;
  }

  if (full_loop_B.e_j[1] != 0.0) {
    full_loop_B.rt = std::abs(full_loop_B.e_j[1]);
    full_loop_B.nrm = full_loop_B.rt / full_loop_B.e_j[1];
    full_loop_B.e_j[1] = full_loop_B.rt;
    full_loop_B.s_i[2] *= full_loop_B.nrm;
  }

  if (full_loop_B.s_i[2] != 0.0) {
    full_loop_B.s_i[2] = std::abs(full_loop_B.s_i[2]);
  }

  full_loop_B.qp1 = 0;
  if ((full_loop_B.s_i[0] > full_loop_B.e_j[0]) || rtIsNaN(full_loop_B.e_j[0]))
  {
    full_loop_B.nrm = full_loop_B.s_i[0];
  } else {
    full_loop_B.nrm = full_loop_B.e_j[0];
  }

  if ((full_loop_B.s_i[1] > full_loop_B.e_j[1]) || rtIsNaN(full_loop_B.e_j[1]))
  {
    full_loop_B.rt = full_loop_B.s_i[1];
  } else {
    full_loop_B.rt = full_loop_B.e_j[1];
  }

  if ((!(full_loop_B.nrm > full_loop_B.rt)) && (!rtIsNaN(full_loop_B.rt))) {
    full_loop_B.nrm = full_loop_B.rt;
  }

  if (full_loop_B.s_i[2] > 0.0) {
    full_loop_B.rt = full_loop_B.s_i[2];
  } else {
    full_loop_B.rt = 0.0;
  }

  if ((!(full_loop_B.nrm > full_loop_B.rt)) && (!rtIsNaN(full_loop_B.rt))) {
    full_loop_B.nrm = full_loop_B.rt;
  }

  while ((full_loop_B.m_az + 2 > 0) && (!(full_loop_B.qp1 >= 75))) {
    full_loop_B.ix_nt = full_loop_B.m_az + 1;
    full_loop_B.qs = full_loop_B.m_az;
    exitg1 = false;
    while ((!exitg1) && (full_loop_B.qs + 1 > -1)) {
      full_loop_B.ix_nt = full_loop_B.qs + 1;
      if (full_loop_B.qs + 1 == 0) {
        exitg1 = true;
      } else {
        full_loop_B.rt = std::abs(full_loop_B.e_j[full_loop_B.qs]);
        if ((full_loop_B.rt <= (std::abs(full_loop_B.s_i[full_loop_B.qs + 1]) +
                                std::abs(full_loop_B.s_i[full_loop_B.qs])) *
             2.2204460492503131E-16) || (full_loop_B.rt <=
             1.0020841800044864E-292) || ((full_loop_B.qp1 > 20) &&
             (full_loop_B.rt <= 2.2204460492503131E-16 * full_loop_B.nrm))) {
          full_loop_B.e_j[full_loop_B.qs] = 0.0;
          exitg1 = true;
        } else {
          full_loop_B.qs--;
        }
      }
    }

    if (full_loop_B.m_az + 1 == full_loop_B.ix_nt) {
      full_loop_B.qq = 4;
    } else {
      full_loop_B.qs = full_loop_B.m_az + 2;
      full_loop_B.qq = full_loop_B.m_az + 2;
      exitg1 = false;
      while ((!exitg1) && (full_loop_B.qq >= full_loop_B.ix_nt)) {
        full_loop_B.qs = full_loop_B.qq;
        if (full_loop_B.qq == full_loop_B.ix_nt) {
          exitg1 = true;
        } else {
          full_loop_B.rt = 0.0;
          if (full_loop_B.qq < full_loop_B.m_az + 2) {
            full_loop_B.rt = std::abs(full_loop_B.e_j[full_loop_B.qq - 1]);
          }

          if (full_loop_B.qq > full_loop_B.ix_nt + 1) {
            full_loop_B.rt += std::abs(full_loop_B.e_j[full_loop_B.qq - 2]);
          }

          full_loop_B.ztest = std::abs(full_loop_B.s_i[full_loop_B.qq - 1]);
          if ((full_loop_B.ztest <= 2.2204460492503131E-16 * full_loop_B.rt) ||
              (full_loop_B.ztest <= 1.0020841800044864E-292)) {
            full_loop_B.s_i[full_loop_B.qq - 1] = 0.0;
            exitg1 = true;
          } else {
            full_loop_B.qq--;
          }
        }
      }

      if (full_loop_B.qs == full_loop_B.ix_nt) {
        full_loop_B.qq = 3;
      } else if (full_loop_B.m_az + 2 == full_loop_B.qs) {
        full_loop_B.qq = 1;
      } else {
        full_loop_B.qq = 2;
        full_loop_B.ix_nt = full_loop_B.qs;
      }
    }

    switch (full_loop_B.qq) {
     case 1:
      full_loop_B.rt = full_loop_B.e_j[full_loop_B.m_az];
      full_loop_B.e_j[full_loop_B.m_az] = 0.0;
      for (full_loop_B.qs = full_loop_B.m_az + 1; full_loop_B.qs >=
           full_loop_B.ix_nt + 1; full_loop_B.qs--) {
        full_loop_xrotg_p(full_loop_B.s_i[full_loop_B.qs - 1], full_loop_B.rt,
                          &full_loop_B.s_i[full_loop_B.qs - 1], &full_loop_B.rt,
                          &full_loop_B.sqds, &full_loop_B.smm1);
        if (full_loop_B.qs > full_loop_B.ix_nt + 1) {
          full_loop_B.ztest = full_loop_B.e_j[full_loop_B.qs - 2];
          full_loop_B.rt = full_loop_B.ztest * -full_loop_B.smm1;
          full_loop_B.e_j[full_loop_B.qs - 2] = full_loop_B.ztest *
            full_loop_B.sqds;
        }
      }
      break;

     case 2:
      full_loop_B.rt = full_loop_B.e_j[full_loop_B.ix_nt - 1];
      full_loop_B.e_j[full_loop_B.ix_nt - 1] = 0.0;
      for (full_loop_B.qs = full_loop_B.ix_nt + 1; full_loop_B.qs <=
           full_loop_B.m_az + 2; full_loop_B.qs++) {
        full_loop_xrotg_p(full_loop_B.s_i[full_loop_B.qs - 1], full_loop_B.rt,
                          &full_loop_B.s_i[full_loop_B.qs - 1],
                          &full_loop_B.ztest, &full_loop_B.sqds,
                          &full_loop_B.smm1);
        full_loop_B.ztest = full_loop_B.e_j[full_loop_B.qs - 1];
        full_loop_B.rt = full_loop_B.ztest * -full_loop_B.smm1;
        full_loop_B.e_j[full_loop_B.qs - 1] = full_loop_B.ztest *
          full_loop_B.sqds;
      }
      break;

     case 3:
      full_loop_B.rt = full_loop_B.s_i[full_loop_B.m_az + 1];
      full_loop_B.ztest = std::abs(full_loop_B.rt);
      full_loop_B.sqds = std::abs(full_loop_B.s_i[full_loop_B.m_az]);
      if ((full_loop_B.ztest > full_loop_B.sqds) || rtIsNaN(full_loop_B.sqds)) {
        full_loop_B.sqds = full_loop_B.ztest;
      }

      full_loop_B.ztest = std::abs(full_loop_B.e_j[full_loop_B.m_az]);
      if ((full_loop_B.sqds > full_loop_B.ztest) || rtIsNaN(full_loop_B.ztest))
      {
        full_loop_B.ztest = full_loop_B.sqds;
      }

      full_loop_B.sqds = std::abs(full_loop_B.s_i[full_loop_B.ix_nt]);
      if ((full_loop_B.ztest > full_loop_B.sqds) || rtIsNaN(full_loop_B.sqds)) {
        full_loop_B.sqds = full_loop_B.ztest;
      }

      full_loop_B.ztest = std::abs(full_loop_B.e_j[full_loop_B.ix_nt]);
      if ((full_loop_B.sqds > full_loop_B.ztest) || rtIsNaN(full_loop_B.ztest))
      {
        full_loop_B.ztest = full_loop_B.sqds;
      }

      full_loop_B.rt /= full_loop_B.ztest;
      full_loop_B.smm1 = full_loop_B.s_i[full_loop_B.m_az] / full_loop_B.ztest;
      full_loop_B.emm1 = full_loop_B.e_j[full_loop_B.m_az] / full_loop_B.ztest;
      full_loop_B.sqds = full_loop_B.s_i[full_loop_B.ix_nt] / full_loop_B.ztest;
      full_loop_B.smm1 = ((full_loop_B.smm1 + full_loop_B.rt) *
                          (full_loop_B.smm1 - full_loop_B.rt) + full_loop_B.emm1
                          * full_loop_B.emm1) / 2.0;
      full_loop_B.emm1 *= full_loop_B.rt;
      full_loop_B.emm1 *= full_loop_B.emm1;
      if ((full_loop_B.smm1 != 0.0) || (full_loop_B.emm1 != 0.0)) {
        full_loop_B.shift = std::sqrt(full_loop_B.smm1 * full_loop_B.smm1 +
          full_loop_B.emm1);
        if (full_loop_B.smm1 < 0.0) {
          full_loop_B.shift = -full_loop_B.shift;
        }

        full_loop_B.shift = full_loop_B.emm1 / (full_loop_B.smm1 +
          full_loop_B.shift);
      } else {
        full_loop_B.shift = 0.0;
      }

      full_loop_B.rt = (full_loop_B.sqds + full_loop_B.rt) * (full_loop_B.sqds -
        full_loop_B.rt) + full_loop_B.shift;
      full_loop_B.sqds *= full_loop_B.e_j[full_loop_B.ix_nt] / full_loop_B.ztest;
      for (full_loop_B.qs = full_loop_B.ix_nt + 1; full_loop_B.qs <=
           full_loop_B.m_az + 1; full_loop_B.qs++) {
        full_loop_xrotg_p(full_loop_B.rt, full_loop_B.sqds, &full_loop_B.ztest,
                          &full_loop_B.shift, &full_loop_B.smm1,
                          &full_loop_B.emm1);
        if (full_loop_B.qs > full_loop_B.ix_nt + 1) {
          full_loop_B.e_j[full_loop_B.qs - 2] = full_loop_B.ztest;
        }

        full_loop_B.ztest = full_loop_B.e_j[full_loop_B.qs - 1];
        full_loop_B.rt = full_loop_B.s_i[full_loop_B.qs - 1];
        full_loop_B.e_j[full_loop_B.qs - 1] = full_loop_B.ztest *
          full_loop_B.smm1 - full_loop_B.rt * full_loop_B.emm1;
        full_loop_B.sqds = full_loop_B.emm1 * full_loop_B.s_i[full_loop_B.qs];
        full_loop_B.s_i[full_loop_B.qs] *= full_loop_B.smm1;
        full_loop_xrotg_p(full_loop_B.rt * full_loop_B.smm1 + full_loop_B.ztest *
                          full_loop_B.emm1, full_loop_B.sqds,
                          &full_loop_B.s_i[full_loop_B.qs - 1],
                          &full_loop_B.unusedU2, &full_loop_B.shift,
                          &full_loop_B.d_sn);
        full_loop_B.rt = full_loop_B.e_j[full_loop_B.qs - 1] * full_loop_B.shift
          + full_loop_B.d_sn * full_loop_B.s_i[full_loop_B.qs];
        full_loop_B.s_i[full_loop_B.qs] = full_loop_B.e_j[full_loop_B.qs - 1] *
          -full_loop_B.d_sn + full_loop_B.shift * full_loop_B.s_i[full_loop_B.qs];
        full_loop_B.sqds = full_loop_B.d_sn * full_loop_B.e_j[full_loop_B.qs];
        full_loop_B.e_j[full_loop_B.qs] *= full_loop_B.shift;
      }

      full_loop_B.e_j[full_loop_B.m_az] = full_loop_B.rt;
      full_loop_B.qp1++;
      break;

     default:
      if (full_loop_B.s_i[full_loop_B.ix_nt] < 0.0) {
        full_loop_B.s_i[full_loop_B.ix_nt] = -full_loop_B.s_i[full_loop_B.ix_nt];
      }

      full_loop_B.qp1 = full_loop_B.ix_nt + 1;
      while ((full_loop_B.ix_nt + 1 < 3) && (full_loop_B.s_i[full_loop_B.ix_nt] <
              full_loop_B.s_i[full_loop_B.qp1])) {
        full_loop_B.rt = full_loop_B.s_i[full_loop_B.ix_nt];
        full_loop_B.s_i[full_loop_B.ix_nt] = full_loop_B.s_i[full_loop_B.qp1];
        full_loop_B.s_i[full_loop_B.qp1] = full_loop_B.rt;
        full_loop_B.ix_nt = full_loop_B.qp1;
        full_loop_B.qp1++;
      }

      full_loop_B.qp1 = 0;
      full_loop_B.m_az--;
      break;
    }
  }

  U[0] = full_loop_B.s_i[0];
  U[1] = full_loop_B.s_i[1];
  U[2] = full_loop_B.s_i[2];
}

void full_loopModelClass::full_loop_quaternionC2fit(const real_T y_a[21], const
  real_T y_b[21], const real_T y_c[21], const real_T y_d[21], const real_T x[21],
  real_T h[20], real_T dtheta[20], real_T e[60], real_T w[63])
{
  boolean_T flag;
  full_loop_B.ixLead = 1;
  full_loop_B.iyLead = 0;
  full_loop_B.work_o = x[0];
  for (full_loop_B.m_o = 0; full_loop_B.m_o < 20; full_loop_B.m_o++) {
    full_loop_B.tmp2 = full_loop_B.work_o;
    full_loop_B.work_o = x[full_loop_B.ixLead];
    h[full_loop_B.iyLead] = x[full_loop_B.ixLead] - full_loop_B.tmp2;
    full_loop_B.ixLead++;
    full_loop_B.iyLead++;
    full_loop_B.dv18[full_loop_B.m_o] = static_cast<real_T>(full_loop_B.m_o) +
      1.0;
  }

  ful_quaternioncg_parenReference(y_a, y_b, y_c, y_d, full_loop_B.dv18,
    full_loop_B.assign_temp_a_n, full_loop_B.assign_temp_b_f,
    full_loop_B.assign_temp_c_n, full_loop_B.assign_temp_d);
  full_loop_getang(full_loop_B.assign_temp_a_n, full_loop_B.assign_temp_b_f,
                   full_loop_B.assign_temp_c_n, full_loop_B.assign_temp_d, &y_a
                   [1], &y_b[1], &y_c[1], &y_d[1], dtheta, e);
  full_loop_B.wi[0] = 0.0;
  full_loop_B.wf[0] = 0.0;
  full_loop_B.wi[1] = 0.0;
  full_loop_B.wf[1] = 0.0;
  full_loop_B.wi[2] = 0.0;
  full_loop_B.wf[2] = 0.0;
  full_loop_B.work_o = 0.0;
  flag = true;
  std::memset(&full_loop_B.a_e[0], 0, 21U * sizeof(real_T));
  std::memset(&full_loop_B.b_i[0], 0, 21U * sizeof(real_T));
  std::memset(&full_loop_B.c_g[0], 0, 21U * sizeof(real_T));
  std::memset(&w[0], 0, 63U * sizeof(real_T));
  std::memset(&full_loop_B.wprev[0], 0, 63U * sizeof(real_T));
  full_loop_B.b_e[0] = e[0];
  full_loop_B.b_e[1] = e[20];
  full_loop_B.b_e[2] = e[40];
  full_loop_B.b_e_b[0] = e[19];
  full_loop_B.b_e_b[1] = e[39];
  full_loop_B.b_e_b[2] = e[59];
  while (flag) {
    for (full_loop_B.ixLead = 0; full_loop_B.ixLead < 3; full_loop_B.ixLead++) {
      std::memcpy(&full_loop_B.wprev[full_loop_B.ixLead * 21 + 1],
                  &w[full_loop_B.ixLead * 21 + 1], 19U * sizeof(real_T));
    }

    for (full_loop_B.iyLead = 0; full_loop_B.iyLead < 19; full_loop_B.iyLead++)
    {
      full_loop_B.a_e[full_loop_B.iyLead + 1] = 2.0 / h[full_loop_B.iyLead];
      full_loop_B.tmp2 = h[full_loop_B.iyLead + 1];
      full_loop_B.b_i[full_loop_B.iyLead + 1] = 4.0 / full_loop_B.tmp2 + 4.0 /
        h[full_loop_B.iyLead];
      full_loop_B.c_g[full_loop_B.iyLead + 1] = 2.0 / full_loop_B.tmp2;
      if (dtheta[full_loop_B.iyLead] > 1.0E-6) {
        full_loop_B.ca = std::cos(dtheta[full_loop_B.iyLead]);
        full_loop_B.sa = std::sin(dtheta[full_loop_B.iyLead]);
        full_loop_B.absx = e[full_loop_B.iyLead + 40];
        full_loop_B.temp2_idx_1 = full_loop_B.wprev[full_loop_B.iyLead + 43];
        full_loop_B.temp2_idx_2 = full_loop_B.wprev[full_loop_B.iyLead + 22];
        full_loop_B.temp2_idx_0_tmp = e[full_loop_B.iyLead + 20];
        full_loop_B.temp2_idx_0 = full_loop_B.temp2_idx_0_tmp *
          full_loop_B.temp2_idx_1 - full_loop_B.absx * full_loop_B.temp2_idx_2;
        full_loop_B.windote = full_loop_B.wprev[full_loop_B.iyLead + 1];
        full_loop_B.temp2_idx_1 = full_loop_B.absx * full_loop_B.windote -
          e[full_loop_B.iyLead] * full_loop_B.temp2_idx_1;
        full_loop_B.temp2_idx_2 = e[full_loop_B.iyLead] *
          full_loop_B.temp2_idx_2 - full_loop_B.temp2_idx_0_tmp *
          full_loop_B.windote;
        full_loop_B.windote = 0.0;
        full_loop_B.magsq = 0.0;
        for (full_loop_B.ixLead = 0; full_loop_B.ixLead < 3; full_loop_B.ixLead
             ++) {
          full_loop_B.m_o = (21 * full_loop_B.ixLead + full_loop_B.iyLead) + 1;
          full_loop_B.windote += full_loop_B.wprev[full_loop_B.m_o] *
            e[full_loop_B.iyLead + 20 * full_loop_B.ixLead];
          full_loop_B.magsq += full_loop_B.wprev[full_loop_B.m_o] *
            full_loop_B.wprev[full_loop_B.m_o];
        }

        full_loop_B.magsq = (full_loop_B.magsq - full_loop_B.windote *
                             full_loop_B.windote) * 0.5 *
          (dtheta[full_loop_B.iyLead] - full_loop_B.sa) / (1.0 - full_loop_B.ca);
        full_loop_B.ca = (dtheta[full_loop_B.iyLead] * full_loop_B.sa - (1.0 -
          full_loop_B.ca) * 2.0) * full_loop_B.windote / ((1.0 - full_loop_B.ca)
          * dtheta[full_loop_B.iyLead]);
        full_loop_B.ixLead = full_loop_B.iyLead + 1;
        full_loop_B.temp1[0] = (full_loop_B.absx * full_loop_B.temp2_idx_1 -
          full_loop_B.temp2_idx_0_tmp * full_loop_B.temp2_idx_2) *
          full_loop_B.ca + e[full_loop_B.ixLead - 1] * full_loop_B.magsq;
        full_loop_B.temp1[1] = (e[full_loop_B.iyLead] * full_loop_B.temp2_idx_2
          - full_loop_B.absx * full_loop_B.temp2_idx_0) * full_loop_B.ca +
          e[full_loop_B.ixLead + 19] * full_loop_B.magsq;
        full_loop_B.temp1[2] = (full_loop_B.temp2_idx_0_tmp *
          full_loop_B.temp2_idx_0 - e[full_loop_B.iyLead] *
          full_loop_B.temp2_idx_1) * full_loop_B.ca + e[full_loop_B.ixLead + 39]
          * full_loop_B.magsq;
      } else {
        full_loop_B.temp1[0] = 0.0;
        full_loop_B.temp1[1] = 0.0;
        full_loop_B.temp1[2] = 0.0;
      }

      full_loop_B.ixLead = full_loop_B.iyLead + 1;
      full_loop_B.absx = h[full_loop_B.iyLead] * h[full_loop_B.iyLead];
      full_loop_B.temp2_idx_0_tmp = dtheta[full_loop_B.iyLead + 1];
      full_loop_B.tmp2 *= full_loop_B.tmp2;
      w[full_loop_B.iyLead + 1] = (e[full_loop_B.ixLead - 1] *
        dtheta[full_loop_B.iyLead] / full_loop_B.absx + e[full_loop_B.iyLead + 1]
        * full_loop_B.temp2_idx_0_tmp / full_loop_B.tmp2) * 6.0 -
        full_loop_B.temp1[0];
      w[full_loop_B.iyLead + 22] = (e[full_loop_B.ixLead + 19] *
        dtheta[full_loop_B.iyLead] / full_loop_B.absx + e[full_loop_B.iyLead +
        21] * full_loop_B.temp2_idx_0_tmp / full_loop_B.tmp2) * 6.0 -
        full_loop_B.temp1[1];
      w[full_loop_B.iyLead + 43] = (e[full_loop_B.ixLead + 39] *
        dtheta[full_loop_B.iyLead] / full_loop_B.absx + e[full_loop_B.iyLead +
        41] * full_loop_B.temp2_idx_0_tmp / full_loop_B.tmp2) * 6.0 -
        full_loop_B.temp1[2];
    }

    full_loop_bd(full_loop_B.b_e, dtheta[0], full_loop_B.wi, full_loop_B.temp1);
    w[1] -= full_loop_B.a_e[1] * full_loop_B.temp1[0];
    w[22] -= full_loop_B.a_e[1] * full_loop_B.temp1[1];
    w[43] -= full_loop_B.a_e[1] * full_loop_B.temp1[2];
    full_loop_bd_p(full_loop_B.b_e_b, dtheta[19], full_loop_B.wf,
                   full_loop_B.temp1);
    w[19] -= full_loop_B.c_g[19] * full_loop_B.temp1[0];
    w[40] -= full_loop_B.c_g[19] * full_loop_B.temp1[1];
    w[61] -= full_loop_B.c_g[19] * full_loop_B.temp1[2];
    for (full_loop_B.m_o = 0; full_loop_B.m_o < 19; full_loop_B.m_o++) {
      full_loop_B.tmp2 = full_loop_B.a_e[full_loop_B.m_o + 2];
      full_loop_B.b_i[full_loop_B.m_o + 2] -= full_loop_B.c_g[full_loop_B.m_o +
        1] * full_loop_B.tmp2 / full_loop_B.b_i[full_loop_B.m_o + 1];
      full_loop_B.b_e_e[0] = e[full_loop_B.m_o + 1];
      full_loop_B.w_n[0] = w[full_loop_B.m_o + 1];
      full_loop_B.b_e_e[1] = e[full_loop_B.m_o + 21];
      full_loop_B.w_n[1] = w[full_loop_B.m_o + 22];
      full_loop_B.b_e_e[2] = e[full_loop_B.m_o + 41];
      full_loop_B.w_n[2] = w[full_loop_B.m_o + 43];
      full_loop_bd(full_loop_B.b_e_e, dtheta[full_loop_B.m_o + 1],
                   full_loop_B.w_n, full_loop_B.temp1);
      full_loop_B.ixLead = full_loop_B.m_o + 3;
      full_loop_B.absx = full_loop_B.b_i[full_loop_B.m_o + 1];
      full_loop_B.iyLead = full_loop_B.m_o + 3;
      full_loop_B.temp2_idx_0_tmp = w[full_loop_B.ixLead + 20] -
        full_loop_B.temp1[1] * full_loop_B.tmp2 / full_loop_B.absx;
      full_loop_B.temp2_idx_0 = w[full_loop_B.ixLead + 41] - full_loop_B.temp1[2]
        * full_loop_B.tmp2 / full_loop_B.absx;
      w[full_loop_B.iyLead - 1] = w[full_loop_B.ixLead - 1] - full_loop_B.temp1
        [0] * full_loop_B.tmp2 / full_loop_B.absx;
      w[full_loop_B.iyLead + 20] = full_loop_B.temp2_idx_0_tmp;
      w[full_loop_B.iyLead + 41] = full_loop_B.temp2_idx_0;
    }

    w[19] /= full_loop_B.b_i[19];
    w[40] /= full_loop_B.b_i[19];
    w[61] /= full_loop_B.b_i[19];
    for (full_loop_B.m_o = 0; full_loop_B.m_o < 18; full_loop_B.m_o++) {
      full_loop_B.ixLead = 19 - full_loop_B.m_o;
      full_loop_B.iyLead = 20 - full_loop_B.m_o;
      full_loop_B.b_e_e[0] = e[full_loop_B.ixLead - 1];
      full_loop_B.w_n[0] = w[full_loop_B.iyLead - 1];
      full_loop_B.b_e_e[1] = e[full_loop_B.ixLead + 19];
      full_loop_B.w_n[1] = w[full_loop_B.iyLead + 20];
      full_loop_B.b_e_e[2] = e[full_loop_B.ixLead + 39];
      full_loop_B.w_n[2] = w[full_loop_B.iyLead + 41];
      full_loop_bd_p(full_loop_B.b_e_e, dtheta[18 - full_loop_B.m_o],
                     full_loop_B.w_n, full_loop_B.temp1);
      full_loop_B.ixLead = 19 - full_loop_B.m_o;
      full_loop_B.tmp2 = full_loop_B.c_g[18 - full_loop_B.m_o];
      full_loop_B.absx = full_loop_B.b_i[18 - full_loop_B.m_o];
      full_loop_B.iyLead = 19 - full_loop_B.m_o;
      full_loop_B.temp2_idx_0_tmp = (w[full_loop_B.ixLead + 20] -
        full_loop_B.tmp2 * full_loop_B.temp1[1]) / full_loop_B.absx;
      full_loop_B.temp2_idx_0 = (w[full_loop_B.ixLead + 41] - full_loop_B.tmp2 *
        full_loop_B.temp1[2]) / full_loop_B.absx;
      w[full_loop_B.iyLead - 1] = (w[full_loop_B.ixLead - 1] - full_loop_B.tmp2 *
        full_loop_B.temp1[0]) / full_loop_B.absx;
      w[full_loop_B.iyLead + 20] = full_loop_B.temp2_idx_0_tmp;
      w[full_loop_B.iyLead + 41] = full_loop_B.temp2_idx_0;
    }

    for (full_loop_B.ixLead = 0; full_loop_B.ixLead < 3; full_loop_B.ixLead++) {
      for (full_loop_B.iyLead = 0; full_loop_B.iyLead < 19; full_loop_B.iyLead++)
      {
        full_loop_B.x_i[full_loop_B.iyLead + 19 * full_loop_B.ixLead] = w[(21 *
          full_loop_B.ixLead + full_loop_B.iyLead) + 1] - full_loop_B.wprev
          [((full_loop_B.iyLead + 2) + 21 * full_loop_B.ixLead) - 1];
      }
    }

    full_loop_B.tmp2 = 0.0;
    for (full_loop_B.ixLead = 0; full_loop_B.ixLead < 3; full_loop_B.ixLead++) {
      for (full_loop_B.iyLead = 0; full_loop_B.iyLead < 19; full_loop_B.iyLead++)
      {
        full_loop_B.absx = std::abs(full_loop_B.x_i[19 * full_loop_B.ixLead +
          full_loop_B.iyLead]);
        if (rtIsNaN(full_loop_B.absx) || (full_loop_B.absx > full_loop_B.tmp2))
        {
          full_loop_B.tmp2 = full_loop_B.absx;
        }
      }
    }

    if ((!rtIsInf(full_loop_B.tmp2)) && (!rtIsNaN(full_loop_B.tmp2))) {
      full_loop_svd(full_loop_B.x_i, full_loop_B.temp1);
      full_loop_B.tmp2 = full_loop_B.temp1[0];
    }

    full_loop_B.work_o++;
    if ((full_loop_B.work_o < 10.0) && (full_loop_B.tmp2 > 1.0E-9)) {
    } else {
      flag = false;
    }
  }

  w[0] = 0.0;
  w[20] = 0.0;
  w[21] = 0.0;
  w[41] = 0.0;
  w[42] = 0.0;
  w[62] = 0.0;
}

int32_T full_loopModelClass::full_loop_bsearch(const real_T x[21], real_T xi)
{
  int32_T n;
  int32_T mid_i;
  n = 1;
  full_loop_B.low_ip1 = 1;
  full_loop_B.high_i = 21;
  while (full_loop_B.high_i > full_loop_B.low_ip1 + 1) {
    mid_i = (n + full_loop_B.high_i) >> 1;
    if (xi >= x[mid_i - 1]) {
      n = mid_i;
      full_loop_B.low_ip1 = mid_i;
    } else {
      full_loop_B.high_i = mid_i;
    }
  }

  return n;
}

real_T rt_remd_snf(real_T u0, real_T u1)
{
  real_T y;
  real_T u1_0;
  if (rtIsNaN(u0) || rtIsNaN(u1) || rtIsInf(u0)) {
    y = (rtNaN);
  } else if (rtIsInf(u1)) {
    y = u0;
  } else {
    if (u1 < 0.0) {
      u1_0 = std::ceil(u1);
    } else {
      u1_0 = std::floor(u1);
    }

    if ((u1 != 0.0) && (u1 != u1_0)) {
      u1_0 = std::abs(u0 / u1);
      if (!(std::abs(u1_0 - std::floor(u1_0 + 0.5)) > DBL_EPSILON * u1_0)) {
        y = 0.0 * u0;
      } else {
        y = std::fmod(u0, u1);
      }
    } else {
      y = std::fmod(u0, u1);
    }
  }

  return y;
}

void full_loopModelClass::waypointTrajectory_setupWaypoin
  (waypointTrajectory_full_loop_T *obj)
{
  int8_T n;
  char_T b[3];
  b[0] = 'N';
  b[1] = 'E';
  b[2] = 'D';
  full_loop_B.ret = memcmp(&obj->ReferenceFrame[0], &b[0], 3);
  for (full_loop_B.b_ix = 0; full_loop_B.b_ix < 21; full_loop_B.b_ix++) {
    if (rtIsNaN(obj->TimeOfArrival[full_loop_B.b_ix])) {
      full_loop_B.gndspeed[full_loop_B.b_ix] = obj->
        TimeOfArrival[full_loop_B.b_ix];
    } else {
      full_loop_B.ip_l = full_loop_bsearch
        (obj->HorizontalSpeedPiecewisePolynomial.breaks, obj->
         TimeOfArrival[full_loop_B.b_ix]) - 1;
      full_loop_B.xloc_h = obj->TimeOfArrival[full_loop_B.b_ix] -
        obj->HorizontalSpeedPiecewisePolynomial.breaks[full_loop_B.ip_l];
      full_loop_B.gndspeed[full_loop_B.b_ix] = ((full_loop_B.xloc_h *
        obj->HorizontalSpeedPiecewisePolynomial.coefs[full_loop_B.ip_l] +
        obj->HorizontalSpeedPiecewisePolynomial.coefs[full_loop_B.ip_l + 20]) *
        full_loop_B.xloc_h + obj->
        HorizontalSpeedPiecewisePolynomial.coefs[full_loop_B.ip_l + 40]) *
        full_loop_B.xloc_h + obj->
        HorizontalSpeedPiecewisePolynomial.coefs[full_loop_B.ip_l + 60];
    }

    if (rtIsNaN(obj->TimeOfArrival[full_loop_B.b_ix])) {
      full_loop_B.xloc_h = obj->TimeOfArrival[full_loop_B.b_ix];
    } else {
      full_loop_B.ip_l = full_loop_bsearch
        (obj->VerticalSpeedPiecewisePolynomial.breaks, obj->
         TimeOfArrival[full_loop_B.b_ix]) - 1;
      full_loop_B.xloc_h = obj->TimeOfArrival[full_loop_B.b_ix] -
        obj->VerticalSpeedPiecewisePolynomial.breaks[full_loop_B.ip_l];
      full_loop_B.xloc_h = ((full_loop_B.xloc_h *
        obj->VerticalSpeedPiecewisePolynomial.coefs[full_loop_B.ip_l] +
        obj->VerticalSpeedPiecewisePolynomial.coefs[full_loop_B.ip_l + 20]) *
                            full_loop_B.xloc_h +
                            obj->
                            VerticalSpeedPiecewisePolynomial.coefs[full_loop_B.ip_l
                            + 40]) * full_loop_B.xloc_h +
        obj->VerticalSpeedPiecewisePolynomial.coefs[full_loop_B.ip_l + 60];
    }

    if (full_loop_B.ret == 0) {
      full_loop_B.xloc_h = -full_loop_B.xloc_h;
    }

    if (rtIsInf(obj->Course[full_loop_B.b_ix]) || rtIsNaN(obj->
         Course[full_loop_B.b_ix])) {
      full_loop_B.b_x_i1 = (rtNaN);
    } else {
      full_loop_B.b_x_i1 = rt_remd_snf(obj->Course[full_loop_B.b_ix], 360.0);
      full_loop_B.absx_c = std::abs(full_loop_B.b_x_i1);
      if (full_loop_B.absx_c > 180.0) {
        if (full_loop_B.b_x_i1 > 0.0) {
          full_loop_B.b_x_i1 -= 360.0;
        } else {
          full_loop_B.b_x_i1 += 360.0;
        }

        full_loop_B.absx_c = std::abs(full_loop_B.b_x_i1);
      }

      if (full_loop_B.absx_c <= 45.0) {
        full_loop_B.b_x_i1 *= 0.017453292519943295;
        full_loop_B.b_x_i1 = std::cos(full_loop_B.b_x_i1);
      } else {
        if (full_loop_B.absx_c <= 135.0) {
          if (full_loop_B.b_x_i1 > 0.0) {
            full_loop_B.b_x_i1 = (full_loop_B.b_x_i1 - 90.0) *
              0.017453292519943295;
            n = 1;
          } else {
            full_loop_B.b_x_i1 = (full_loop_B.b_x_i1 + 90.0) *
              0.017453292519943295;
            n = -1;
          }
        } else if (full_loop_B.b_x_i1 > 0.0) {
          full_loop_B.b_x_i1 = (full_loop_B.b_x_i1 - 180.0) *
            0.017453292519943295;
          n = 2;
        } else {
          full_loop_B.b_x_i1 = (full_loop_B.b_x_i1 + 180.0) *
            0.017453292519943295;
          n = -2;
        }

        if (n == 1) {
          full_loop_B.b_x_i1 = -std::sin(full_loop_B.b_x_i1);
        } else if (n == -1) {
          full_loop_B.b_x_i1 = std::sin(full_loop_B.b_x_i1);
        } else {
          full_loop_B.b_x_i1 = -std::cos(full_loop_B.b_x_i1);
        }
      }
    }

    full_loop_B.b_x_p[full_loop_B.b_ix] = obj->Course[full_loop_B.b_ix];
    full_loop_B.rate[full_loop_B.b_ix] = full_loop_B.xloc_h;
    full_loop_B.b_x_k[full_loop_B.b_ix] = full_loop_B.b_x_i1;
  }

  for (full_loop_B.b_ix = 0; full_loop_B.b_ix < 21; full_loop_B.b_ix++) {
    if (rtIsInf(full_loop_B.b_x_p[full_loop_B.b_ix]) || rtIsNaN
        (full_loop_B.b_x_p[full_loop_B.b_ix])) {
      full_loop_B.xloc_h = (rtNaN);
    } else {
      full_loop_B.b_x_i1 = rt_remd_snf(full_loop_B.b_x_p[full_loop_B.b_ix],
        360.0);
      full_loop_B.absx_c = std::abs(full_loop_B.b_x_i1);
      if (full_loop_B.absx_c > 180.0) {
        if (full_loop_B.b_x_i1 > 0.0) {
          full_loop_B.b_x_i1 -= 360.0;
        } else {
          full_loop_B.b_x_i1 += 360.0;
        }

        full_loop_B.absx_c = std::abs(full_loop_B.b_x_i1);
      }

      if (full_loop_B.absx_c <= 45.0) {
        full_loop_B.b_x_i1 *= 0.017453292519943295;
        full_loop_B.xloc_h = std::sin(full_loop_B.b_x_i1);
      } else {
        if (full_loop_B.absx_c <= 135.0) {
          if (full_loop_B.b_x_i1 > 0.0) {
            full_loop_B.b_x_i1 = (full_loop_B.b_x_i1 - 90.0) *
              0.017453292519943295;
            n = 1;
          } else {
            full_loop_B.b_x_i1 = (full_loop_B.b_x_i1 + 90.0) *
              0.017453292519943295;
            n = -1;
          }
        } else if (full_loop_B.b_x_i1 > 0.0) {
          full_loop_B.b_x_i1 = (full_loop_B.b_x_i1 - 180.0) *
            0.017453292519943295;
          n = 2;
        } else {
          full_loop_B.b_x_i1 = (full_loop_B.b_x_i1 + 180.0) *
            0.017453292519943295;
          n = -2;
        }

        if (n == 1) {
          full_loop_B.xloc_h = std::cos(full_loop_B.b_x_i1);
        } else if (n == -1) {
          full_loop_B.xloc_h = -std::cos(full_loop_B.b_x_i1);
        } else {
          full_loop_B.xloc_h = -std::sin(full_loop_B.b_x_i1);
        }
      }
    }

    obj->Velocities[full_loop_B.b_ix] = full_loop_B.b_x_k[full_loop_B.b_ix] *
      full_loop_B.gndspeed[full_loop_B.b_ix];
    obj->Velocities[full_loop_B.b_ix + 21] = full_loop_B.xloc_h *
      full_loop_B.gndspeed[full_loop_B.b_ix];
    obj->Velocities[full_loop_B.b_ix + 42] = full_loop_B.rate[full_loop_B.b_ix];
    full_loop_B.b_x_p[full_loop_B.b_ix] = full_loop_B.xloc_h;
  }
}

real_T full_loopModelClass::full_loop_mapElementsToBins(real_T x, const real_T
  edges[21], boolean_T right)
{
  real_T bins;
  int32_T b;
  bins = (rtNaN);
  if ((x >= edges[0]) && (x <= edges[20])) {
    bins = std::ceil((x - edges[0]) / (edges[1] - edges[0]));
    if (right) {
      if ((bins >= 1.0) && (bins < 21.0) && (x > edges[static_cast<int32_T>(bins)
           - 1]) && (x <= edges[static_cast<int32_T>(bins)])) {
      } else {
        b = full_loop_bsearch(edges, x);
        while ((b > 1) && (x <= edges[b - 1])) {
          b--;
        }

        bins = b;
      }
    } else if ((bins >= 1.0) && (bins < 21.0) && (x >= edges[static_cast<int32_T>
                (bins) - 1]) && (x < edges[static_cast<int32_T>(bins)])) {
    } else {
      bins = full_loop_bsearch(edges, x);
    }
  }

  return bins;
}

void full_loopModelClass::full_loop_sqrt_p4(const real_T x_data[], const int32_T
  x_size[2], real_T b_x_data[], int32_T b_x_size[2])
{
  int32_T b_k;
  int32_T loop_ub_tmp;
  b_x_size[0] = x_size[0];
  b_x_size[1] = x_size[1];
  loop_ub_tmp = x_size[0] * x_size[1] - 1;
  if (0 <= loop_ub_tmp) {
    std::memcpy(&b_x_data[0], &x_data[0], (loop_ub_tmp + 1) * sizeof(real_T));
  }

  for (b_k = 0; b_k <= loop_ub_tmp; b_k++) {
    b_x_data[b_k] = std::sqrt(b_x_data[b_k]);
  }
}

void full_loopModelClass::full_loop_abs_p43(const real_T x_data[], const int32_T
  x_size[2], real_T y_data[], int32_T y_size[2])
{
  full_loop_B.nx_kr = x_size[0] * x_size[1] - 1;
  y_size[0] = x_size[0];
  y_size[1] = x_size[1];
  for (full_loop_B.b_k_cz = 0; full_loop_B.b_k_cz <= full_loop_B.nx_kr;
       full_loop_B.b_k_cz++) {
    y_data[full_loop_B.b_k_cz] = std::abs(x_data[full_loop_B.b_k_cz]);
  }
}

void full_loopModelClass::full_loop_fresnel_p(const real_T x_data[], const
  int32_T x_size[2], creal_T z_data[], int32_T z_size[2])
{
  static const real_T tmp[10] = { 0.42154355504367752, 0.1434079197807589,
    0.011522095507358577, 0.000345017939782574, 4.6361374928786735E-6,
    3.0556898379025758E-8, 1.0230451416490724E-10, 1.7201074326816183E-13,
    1.3428327623306275E-16, 3.763297112699879E-20 };

  static const real_T tmp_0[11] = { 0.50444207364338323, 0.19710283352552341,
    0.018764858409257526, 0.00068407938091539307, 1.1513882611188428E-5,
    9.8285244368842225E-8, 4.4534441586175015E-10, 1.0826804113902088E-12,
    1.375554606332618E-15, 8.3635443563067741E-19, 1.8695871016278324E-22 };

  static const real_T tmp_1[11] = { 1.0, 0.75158639835337893,
    0.11688892585919138, 0.0064405152650885865, 0.00015593440916415301,
    1.8462756734893055E-6, 1.1269922476399903E-8, 3.6014002958937136E-11,
    5.8875453362157839E-14, 4.5200143407412973E-17, 1.2544323709001127E-20 };

  static const real_T tmp_2[12] = { 1.0, 1.4749575992512833, 0.33774898912002,
    0.025360374142033879, 0.00081467910718430615, 1.2754507566772912E-5,
    1.0431458965757199E-7, 4.6068072814652043E-10, 1.1027321506624028E-12,
    1.3879653125957886E-15, 8.3915881628311874E-19, 1.8695871016278324E-22 };

  static const real_T tmp_3[6] = { -2991.8191940101983, 708840.04525773856,
    -6.2974148620586254E+7, 2.5489088057337637E+9, -4.429795180596978E+10,
    3.1801629787656781E+11 };

  static const real_T tmp_4[7] = { 1.0, 281.37626888999432, 45584.781080653258,
    5.1734388877009638E+6, 4.1932024589811122E+8, 2.2441179564534092E+10,
    6.0736638949008459E+11 };

  static const real_T tmp_5[6] = { -4.9884311457357354E-8, 9.5042806282985963E-6,
    -0.00064519143568396507, 0.018884331939670384, -0.20552590095501388, 1.0 };

  static const real_T tmp_6[7] = { 3.99982968972496E-12, 9.1543921577465745E-10,
    1.2500186247959882E-7, 1.2226278902417902E-5, 0.00086802954294178428,
    0.041214209072219982, 1.0 };

  const real_T *fn;
  const real_T *gn;
  const real_T *fd;
  const real_T *gd;
  boolean_T exitg1;
  for (full_loop_B.i_g1 = 0; full_loop_B.i_g1 < 6; full_loop_B.i_g1++) {
    full_loop_B.sn_b[full_loop_B.i_g1] = tmp_3[full_loop_B.i_g1];
  }

  fn = &tmp[0];
  gn = &tmp_0[0];
  for (full_loop_B.i_g1 = 0; full_loop_B.i_g1 < 7; full_loop_B.i_g1++) {
    full_loop_B.sd_i[full_loop_B.i_g1] = tmp_4[full_loop_B.i_g1];
  }

  for (full_loop_B.i_g1 = 0; full_loop_B.i_g1 < 6; full_loop_B.i_g1++) {
    full_loop_B.cn_g[full_loop_B.i_g1] = tmp_5[full_loop_B.i_g1];
  }

  for (full_loop_B.i_g1 = 0; full_loop_B.i_g1 < 7; full_loop_B.i_g1++) {
    full_loop_B.cd_g[full_loop_B.i_g1] = tmp_6[full_loop_B.i_g1];
  }

  fd = &tmp_1[0];
  gd = &tmp_2[0];
  z_size[0] = x_size[0];
  z_size[1] = x_size[1];
  full_loop_B.i_g1 = x_size[0] * x_size[1] - 1;
  for (full_loop_B.b_ii_k = 0; full_loop_B.b_ii_k <= full_loop_B.i_g1;
       full_loop_B.b_ii_k++) {
    z_data[full_loop_B.b_ii_k].re = (rtNaN);
    z_data[full_loop_B.b_ii_k].im = 0.0;
  }

  full_loop_abs_p43(x_data, x_size, &full_loop_B.xabs_data_p,
                    full_loop_B.xabs_size);
  full_loop_B.nx_k = full_loop_B.xabs_size[0] * full_loop_B.xabs_size[1];
  full_loop_B.loop_ub_tmp_m = full_loop_B.nx_k - 1;
  for (full_loop_B.b_ii_k = 0; full_loop_B.b_ii_k <= full_loop_B.loop_ub_tmp_m;
       full_loop_B.b_ii_k++) {
    full_loop_B.x_tmp_data = full_loop_B.xabs_data_p * full_loop_B.xabs_data_p;
  }

  for (full_loop_B.b_ii_k = 0; full_loop_B.b_ii_k <= full_loop_B.loop_ub_tmp_m;
       full_loop_B.b_ii_k++) {
    full_loop_B.x_data_e = (full_loop_B.x_tmp_data < 2.5625);
  }

  full_loop_B.idx_jc = 0;
  full_loop_B.ii_size_idx_0_h = full_loop_B.nx_k;
  full_loop_B.b_ii_k = 1;
  exitg1 = false;
  while ((!exitg1) && (full_loop_B.b_ii_k - 1 <= full_loop_B.nx_k - 1)) {
    if (full_loop_B.x_data_e) {
      full_loop_B.idx_jc++;
      full_loop_B.ii_data_g = full_loop_B.b_ii_k;
      if (full_loop_B.idx_jc >= full_loop_B.nx_k) {
        exitg1 = true;
      } else {
        full_loop_B.b_ii_k++;
      }
    } else {
      full_loop_B.b_ii_k++;
    }
  }

  if (full_loop_B.nx_k == 1) {
    if (full_loop_B.idx_jc == 0) {
      full_loop_B.ii_size_idx_0_h = 0;
    }
  } else {
    if (1 > full_loop_B.idx_jc) {
      full_loop_B.idx_jc = 0;
    }

    full_loop_B.ii_size_idx_0_h = full_loop_B.idx_jc;
  }

  for (full_loop_B.b_ii_k = 0; full_loop_B.b_ii_k < full_loop_B.ii_size_idx_0_h;
       full_loop_B.b_ii_k++) {
    full_loop_B.x4_data_j = full_loop_B.x_tmp_data;
    full_loop_B.x4_data_j *= full_loop_B.x4_data_j;
    full_loop_B.r_ea = full_loop_B.xabs_data_p;
    z_data[full_loop_B.ii_data_g - 1].re = (((((full_loop_B.cn_g[0] *
      full_loop_B.x4_data_j + full_loop_B.cn_g[1]) * full_loop_B.x4_data_j +
      full_loop_B.cn_g[2]) * full_loop_B.x4_data_j + full_loop_B.cn_g[3]) *
      full_loop_B.x4_data_j + full_loop_B.cn_g[4]) * full_loop_B.x4_data_j +
      full_loop_B.cn_g[5]) / ((((((full_loop_B.cd_g[0] * full_loop_B.x4_data_j +
      full_loop_B.cd_g[1]) * full_loop_B.x4_data_j + full_loop_B.cd_g[2]) *
      full_loop_B.x4_data_j + full_loop_B.cd_g[3]) * full_loop_B.x4_data_j +
      full_loop_B.cd_g[4]) * full_loop_B.x4_data_j + full_loop_B.cd_g[5]) *
      full_loop_B.x4_data_j + full_loop_B.cd_g[6]) * full_loop_B.r_ea;
    z_data[full_loop_B.ii_data_g - 1].im = (((((full_loop_B.sn_b[0] *
      full_loop_B.x4_data_j + full_loop_B.sn_b[1]) * full_loop_B.x4_data_j +
      full_loop_B.sn_b[2]) * full_loop_B.x4_data_j + full_loop_B.sn_b[3]) *
      full_loop_B.x4_data_j + full_loop_B.sn_b[4]) * full_loop_B.x4_data_j +
      full_loop_B.sn_b[5]) * (full_loop_B.r_ea * full_loop_B.r_ea) /
      ((((((full_loop_B.sd_i[0] * full_loop_B.x4_data_j + full_loop_B.sd_i[1]) *
           full_loop_B.x4_data_j + full_loop_B.sd_i[2]) * full_loop_B.x4_data_j
          + full_loop_B.sd_i[3]) * full_loop_B.x4_data_j + full_loop_B.sd_i[4]) *
        full_loop_B.x4_data_j + full_loop_B.sd_i[5]) * full_loop_B.x4_data_j +
       full_loop_B.sd_i[6]) * full_loop_B.r_ea;
  }

  for (full_loop_B.b_ii_k = 0; full_loop_B.b_ii_k <= full_loop_B.loop_ub_tmp_m;
       full_loop_B.b_ii_k++) {
    full_loop_B.x_data_e = ((2.5625 <= full_loop_B.x_tmp_data) &&
      (full_loop_B.x_tmp_data <= 1.367076676E+9));
  }

  full_loop_B.idx_jc = 0;
  full_loop_B.ii_size_idx_0_h = full_loop_B.nx_k;
  full_loop_B.b_ii_k = 1;
  exitg1 = false;
  while ((!exitg1) && (full_loop_B.b_ii_k - 1 <= full_loop_B.nx_k - 1)) {
    if (full_loop_B.x_data_e) {
      full_loop_B.idx_jc++;
      full_loop_B.ii_data_g = full_loop_B.b_ii_k;
      if (full_loop_B.idx_jc >= full_loop_B.nx_k) {
        exitg1 = true;
      } else {
        full_loop_B.b_ii_k++;
      }
    } else {
      full_loop_B.b_ii_k++;
    }
  }

  if (full_loop_B.nx_k == 1) {
    if (full_loop_B.idx_jc == 0) {
      full_loop_B.ii_size_idx_0_h = 0;
    }
  } else {
    if (1 > full_loop_B.idx_jc) {
      full_loop_B.idx_jc = 0;
    }

    full_loop_B.ii_size_idx_0_h = full_loop_B.idx_jc;
  }

  for (full_loop_B.b_ii_k = 0; full_loop_B.b_ii_k < full_loop_B.ii_size_idx_0_h;
       full_loop_B.b_ii_k++) {
    full_loop_B.x4_data_j = full_loop_B.x_tmp_data;
    full_loop_B.r_ea = 1.0 / (full_loop_B.x4_data_j * 3.1415926535897931);
    full_loop_B.x4_data_l = full_loop_B.r_ea * full_loop_B.r_ea;
    full_loop_B.x_data_m[full_loop_B.b_ii_k].re = full_loop_B.x4_data_j * 0.0;
    full_loop_B.x_data_m[full_loop_B.b_ii_k].im = full_loop_B.x4_data_j *
      1.5707963267948966;
    full_loop_B.ismall_data_o = full_loop_B.ii_data_g;
    full_loop_B.z_data_l[full_loop_B.b_ii_k] = full_loop_B.r_ea;
  }

  full_loop_B.nx_k = full_loop_B.ii_size_idx_0_h - 1;
  for (full_loop_B.b_ii_k = 0; full_loop_B.b_ii_k <= full_loop_B.nx_k;
       full_loop_B.b_ii_k++) {
    if (full_loop_B.x_data_m[full_loop_B.b_ii_k].im == 0.0) {
      full_loop_B.x4_data_j = std::exp(full_loop_B.x_data_m[full_loop_B.b_ii_k].
        re);
      full_loop_B.r_ea = 0.0;
    } else if (rtIsInf(full_loop_B.x_data_m[full_loop_B.b_ii_k].im) && rtIsInf
               (full_loop_B.x_data_m[full_loop_B.b_ii_k].re) &&
               (full_loop_B.x_data_m[full_loop_B.b_ii_k].re < 0.0)) {
      full_loop_B.x4_data_j = 0.0;
      full_loop_B.r_ea = 0.0;
    } else {
      full_loop_B.r_ea = std::exp(full_loop_B.x_data_m[full_loop_B.b_ii_k].re /
        2.0);
      full_loop_B.x4_data_j = full_loop_B.r_ea * std::cos
        (full_loop_B.x_data_m[full_loop_B.b_ii_k].im) * full_loop_B.r_ea;
      full_loop_B.r_ea *= full_loop_B.r_ea * std::sin
        (full_loop_B.x_data_m[full_loop_B.b_ii_k].im);
    }

    full_loop_B.x_data_dd.re = full_loop_B.x4_data_j;
    full_loop_B.x_data_dd.im = full_loop_B.r_ea;
    full_loop_B.x_data_m[full_loop_B.b_ii_k] = full_loop_B.x_data_dd;
  }

  for (full_loop_B.b_ii_k = 0; full_loop_B.b_ii_k < full_loop_B.ii_size_idx_0_h;
       full_loop_B.b_ii_k++) {
    full_loop_B.r_ea = (((((((((fn[0] * full_loop_B.x4_data_l + fn[1]) *
      full_loop_B.x4_data_l + fn[2]) * full_loop_B.x4_data_l + fn[3]) *
      full_loop_B.x4_data_l + fn[4]) * full_loop_B.x4_data_l + fn[5]) *
      full_loop_B.x4_data_l + fn[6]) * full_loop_B.x4_data_l + fn[7]) *
                         full_loop_B.x4_data_l + fn[8]) * full_loop_B.x4_data_l
                        + fn[9]) * full_loop_B.x4_data_l / ((((((((((fd[0] *
      full_loop_B.x4_data_l + fd[1]) * full_loop_B.x4_data_l + fd[2]) *
      full_loop_B.x4_data_l + fd[3]) * full_loop_B.x4_data_l + fd[4]) *
      full_loop_B.x4_data_l + fd[5]) * full_loop_B.x4_data_l + fd[6]) *
      full_loop_B.x4_data_l + fd[7]) * full_loop_B.x4_data_l + fd[8]) *
      full_loop_B.x4_data_l + fd[9]) * full_loop_B.x4_data_l + fd[10]) - 1.0;
    full_loop_B.x4_data_im_p = ((((((((((gn[0] * full_loop_B.x4_data_l + gn[1]) *
      full_loop_B.x4_data_l + gn[2]) * full_loop_B.x4_data_l + gn[3]) *
      full_loop_B.x4_data_l + gn[4]) * full_loop_B.x4_data_l + gn[5]) *
      full_loop_B.x4_data_l + gn[6]) * full_loop_B.x4_data_l + gn[7]) *
      full_loop_B.x4_data_l + gn[8]) * full_loop_B.x4_data_l + gn[9]) *
      full_loop_B.x4_data_l + gn[10]) * full_loop_B.z_data_l[full_loop_B.b_ii_k]
      / (((((((((((gd[0] * full_loop_B.x4_data_l + gd[1]) *
                  full_loop_B.x4_data_l + gd[2]) * full_loop_B.x4_data_l + gd[3])
                * full_loop_B.x4_data_l + gd[4]) * full_loop_B.x4_data_l + gd[5])
              * full_loop_B.x4_data_l + gd[6]) * full_loop_B.x4_data_l + gd[7]) *
            full_loop_B.x4_data_l + gd[8]) * full_loop_B.x4_data_l + gd[9]) *
          full_loop_B.x4_data_l + gd[10]) * full_loop_B.x4_data_l + gd[11]);
    full_loop_B.x4_data_j = 0.0 * full_loop_B.r_ea - full_loop_B.x4_data_im_p;
    full_loop_B.r_ea += 0.0 * full_loop_B.x4_data_im_p;
    full_loop_B.x4_data_im_p = full_loop_B.x4_data_j *
      full_loop_B.x_data_m[full_loop_B.b_ii_k].re - full_loop_B.r_ea *
      full_loop_B.x_data_m[full_loop_B.b_ii_k].im;
    full_loop_B.r_ea = full_loop_B.x4_data_j *
      full_loop_B.x_data_m[full_loop_B.b_ii_k].im + full_loop_B.r_ea *
      full_loop_B.x_data_m[full_loop_B.b_ii_k].re;
    full_loop_B.br_e = full_loop_B.xabs_data_p * 3.1415926535897931;
    if (full_loop_B.r_ea == 0.0) {
      full_loop_B.x4_data_j = full_loop_B.x4_data_im_p / full_loop_B.br_e;
      full_loop_B.r_ea = 0.0;
    } else if (full_loop_B.x4_data_im_p == 0.0) {
      full_loop_B.x4_data_j = 0.0;
      full_loop_B.r_ea /= full_loop_B.br_e;
    } else {
      full_loop_B.x4_data_j = full_loop_B.x4_data_im_p / full_loop_B.br_e;
      full_loop_B.r_ea /= full_loop_B.br_e;
    }

    z_data[full_loop_B.ismall_data_o - 1].re = 0.5 + full_loop_B.x4_data_j;
    z_data[full_loop_B.ismall_data_o - 1].im = 0.5 + full_loop_B.r_ea;
  }

  full_loop_B.ii_size_idx_0_h = 0;
  full_loop_B.nx_k = 0;
  for (full_loop_B.b_ii_k = 0; full_loop_B.b_ii_k <= full_loop_B.loop_ub_tmp_m;
       full_loop_B.b_ii_k++) {
    if (full_loop_B.xabs_data_p * full_loop_B.xabs_data_p > 1.367076676E+9) {
      full_loop_B.ii_size_idx_0_h++;
      full_loop_B.bd_data_k = full_loop_B.b_ii_k + 1;
      full_loop_B.nx_k++;
    }
  }

  full_loop_B.loop_ub_tmp_m = full_loop_B.ii_size_idx_0_h - 1;
  for (full_loop_B.b_ii_k = 0; full_loop_B.b_ii_k <= full_loop_B.loop_ub_tmp_m;
       full_loop_B.b_ii_k++) {
    z_data[full_loop_B.bd_data_k - 1].re = 0.5;
    z_data[full_loop_B.bd_data_k - 1].im = 0.5;
  }

  full_loop_B.loop_ub_tmp_m = 0;
  full_loop_B.ii_size_idx_0_h = 0;
  for (full_loop_B.b_ii_k = 0; full_loop_B.b_ii_k <= full_loop_B.i_g1;
       full_loop_B.b_ii_k++) {
    if (x_data[full_loop_B.b_ii_k] < 0.0) {
      full_loop_B.loop_ub_tmp_m++;
      full_loop_B.ed_data = full_loop_B.b_ii_k + 1;
      full_loop_B.ii_size_idx_0_h++;
    }
  }

  for (full_loop_B.b_ii_k = 0; full_loop_B.b_ii_k < full_loop_B.loop_ub_tmp_m;
       full_loop_B.b_ii_k++) {
    full_loop_B.z_data_o.re = -z_data[full_loop_B.ed_data - 1].re;
    full_loop_B.z_data_o.im = -z_data[full_loop_B.ed_data - 1].im;
  }

  for (full_loop_B.b_ii_k = 0; full_loop_B.b_ii_k < full_loop_B.loop_ub_tmp_m;
       full_loop_B.b_ii_k++) {
    z_data[full_loop_B.ed_data - 1] = full_loop_B.z_data_o;
  }
}

void full_loopModelClass::full_loop_power_p43ri(const real_T a_data[], const
  int32_T a_size[2], real_T y_data[], int32_T y_size[2])
{
  real_T b_z1_data;
  int32_T b_k;
  int32_T loop_ub_tmp;
  loop_ub_tmp = a_size[0] * a_size[1] - 1;
  if (0 <= loop_ub_tmp) {
    std::memcpy(&b_z1_data, &y_data[0], (loop_ub_tmp + 1) * sizeof(real_T));
  }

  for (b_k = 0; b_k <= loop_ub_tmp; b_k++) {
    b_z1_data = full_loop_rt_powd_snf(a_data[b_k], 2.0);
  }

  y_size[0] = a_size[0];
  y_size[1] = a_size[1];
  if (0 <= loop_ub_tmp) {
    std::memcpy(&y_data[0], &b_z1_data, (loop_ub_tmp + 1) * sizeof(real_T));
  }
}

void full_loopModelClass::full_loop_repmat_p43r(const creal_T a_data[], const
  int32_T a_size[2], creal_T b_data[], int32_T b_size[2])
{
  int32_T b_jcol;
  int32_T iacol_tmp;
  b_size[0] = a_size[0];
  b_size[1] = a_size[1] * 5;
  full_loop_B.nrows_l = a_size[0];
  full_loop_B.ncols = a_size[1];
  for (full_loop_B.b_jtilecol_n = 0; full_loop_B.b_jtilecol_n < 5;
       full_loop_B.b_jtilecol_n++) {
    full_loop_B.ibtile = full_loop_B.nrows_l * full_loop_B.ncols *
      full_loop_B.b_jtilecol_n;
    for (b_jcol = 0; b_jcol < full_loop_B.ncols; b_jcol++) {
      iacol_tmp = b_jcol * full_loop_B.nrows_l;
      full_loop_B.iacol = iacol_tmp - 1;
      full_loop_B.ibcol_m = (iacol_tmp + full_loop_B.ibtile) - 1;
      for (iacol_tmp = 0; iacol_tmp < full_loop_B.nrows_l; iacol_tmp++) {
        full_loop_B.k_gk = iacol_tmp + 1;
        b_data[full_loop_B.ibcol_m + full_loop_B.k_gk] =
          a_data[full_loop_B.iacol + full_loop_B.k_gk];
      }
    }
  }
}

void full_loopModelClass::full_loop_bsxfun_p(const creal_T a_data[], const
  int32_T a_size[2], creal_T c_data[], int32_T c_size[2])
{
  int32_T ar_tmp;
  int32_T tmp;
  full_loop_B.csz_idx_0 = a_size[0];
  c_size[0] = a_size[0];
  c_size[1] = 5;
  if (a_size[0] != 0) {
    full_loop_B.acoef_p = (a_size[1] != 1);
    full_loop_B.acoef_d = (a_size[0] != 1);
    for (full_loop_B.k_dc = 0; full_loop_B.k_dc < 5; full_loop_B.k_dc++) {
      full_loop_B.ia_h = full_loop_B.acoef_p * full_loop_B.k_dc;
      for (full_loop_B.k_d2 = 0; full_loop_B.k_d2 < full_loop_B.csz_idx_0;
           full_loop_B.k_d2++) {
        ar_tmp = full_loop_B.acoef_d * full_loop_B.k_d2 + a_size[0] *
          full_loop_B.ia_h;
        full_loop_B.br_j = full_loop_B.k_dc + 1;
        if (a_data[ar_tmp].im == 0.0) {
          tmp = full_loop_B.k_d2 + full_loop_B.csz_idx_0 * full_loop_B.k_dc;
          c_data[tmp].re = a_data[ar_tmp].re / static_cast<real_T>
            (full_loop_B.br_j);
          c_data[tmp].im = 0.0;
        } else if (a_data[ar_tmp].re == 0.0) {
          tmp = full_loop_B.k_d2 + full_loop_B.csz_idx_0 * full_loop_B.k_dc;
          c_data[tmp].re = 0.0;
          c_data[tmp].im = a_data[ar_tmp].im / static_cast<real_T>
            (full_loop_B.br_j);
        } else {
          tmp = full_loop_B.k_d2 + full_loop_B.csz_idx_0 * full_loop_B.k_dc;
          c_data[tmp].re = a_data[ar_tmp].re / static_cast<real_T>
            (full_loop_B.br_j);
          c_data[tmp].im = a_data[ar_tmp].im / static_cast<real_T>
            (full_loop_B.br_j);
        }
      }
    }
  }
}

void full_loopModelClass::full_loop_fresnelgzero(const real_T x_data[], const
  int32_T x_size[2], const real_T dk_data[], const int32_T dk_size[2], const
  real_T k_data[], const int32_T k_size[2], const real_T theta_data[], const
  int32_T theta_size[2], creal_T z_data[], int32_T *z_size)
{
  full_loop_power_p43ri(x_data, x_size, &full_loop_B.tmp_data_ol,
                        full_loop_B.tmp_size_k);
  full_loop_B.a_size[0] = dk_size[0];
  full_loop_B.a_size[1] = dk_size[1];
  full_loop_B.loop_ub_eg = dk_size[0] * dk_size[1];
  for (full_loop_B.b_k_f4 = 0; full_loop_B.b_k_f4 < full_loop_B.loop_ub_eg;
       full_loop_B.b_k_f4++) {
    full_loop_B.a_data_i.re = dk_data[full_loop_B.b_k_f4] * 0.0 *
      full_loop_B.tmp_data_ol;
    full_loop_B.a_data_i.im = dk_data[full_loop_B.b_k_f4] * 0.5 *
      full_loop_B.tmp_data_ol;
  }

  full_loop_repmat_p43r(&full_loop_B.a_data_i, full_loop_B.a_size,
                        full_loop_B.tmp_data_ko, full_loop_B.tmp_size_k);
  full_loop_bsxfun_p(full_loop_B.tmp_data_ko, full_loop_B.tmp_size_k,
                     full_loop_B.b_A_data_a, full_loop_B.a_size);
  full_loop_B.x_size_idx_0 = full_loop_B.a_size[0];
  full_loop_B.loop_ub_tmp_k = full_loop_B.a_size[0] * full_loop_B.a_size[1] - 1;
  if (0 <= full_loop_B.loop_ub_tmp_k) {
    std::memcpy(&full_loop_B.x_data_fd[0], &full_loop_B.b_A_data_a[0],
                (full_loop_B.loop_ub_tmp_k + 1) * sizeof(creal_T));
  }

  if (full_loop_B.a_size[0] != 0) {
    full_loop_B.loop_ub_eg = full_loop_B.a_size[0] - 1;
    for (full_loop_B.b_k_f4 = 0; full_loop_B.b_k_f4 <= full_loop_B.loop_ub_eg;
         full_loop_B.b_k_f4++) {
      full_loop_B.b_subsb_idx_0 = full_loop_B.b_k_f4 + 1;
      full_loop_B.im_tmp_k = (full_loop_B.b_subsb_idx_0 +
        full_loop_B.x_size_idx_0) - 1;
      full_loop_B.im = full_loop_B.x_data_fd[full_loop_B.im_tmp_k].im *
        full_loop_B.x_data_fd[full_loop_B.b_k_f4].re +
        full_loop_B.x_data_fd[full_loop_B.im_tmp_k].re *
        full_loop_B.x_data_fd[full_loop_B.b_k_f4].im;
      full_loop_B.x_data_fd[full_loop_B.im_tmp_k].re =
        full_loop_B.x_data_fd[full_loop_B.im_tmp_k].re *
        full_loop_B.x_data_fd[full_loop_B.b_k_f4].re -
        full_loop_B.x_data_fd[full_loop_B.im_tmp_k].im *
        full_loop_B.x_data_fd[full_loop_B.b_k_f4].im;
      full_loop_B.x_data_fd[(full_loop_B.b_subsb_idx_0 +
        full_loop_B.x_size_idx_0) - 1].im = full_loop_B.im;
    }

    full_loop_B.loop_ub_eg = full_loop_B.a_size[0] - 1;
    for (full_loop_B.b_k_f4 = 0; full_loop_B.b_k_f4 <= full_loop_B.loop_ub_eg;
         full_loop_B.b_k_f4++) {
      full_loop_B.b_subsb_idx_0 = full_loop_B.b_k_f4 + 1;
      full_loop_B.im_tmp_tmp = full_loop_B.x_size_idx_0 << 1;
      full_loop_B.im_tmp_k = (full_loop_B.im_tmp_tmp + full_loop_B.b_subsb_idx_0)
        - 1;
      full_loop_B.im_tmp_f = full_loop_B.b_k_f4 + full_loop_B.x_size_idx_0;
      full_loop_B.im = full_loop_B.x_data_fd[full_loop_B.im_tmp_k].im *
        full_loop_B.x_data_fd[full_loop_B.im_tmp_f].re +
        full_loop_B.x_data_fd[full_loop_B.im_tmp_k].re *
        full_loop_B.x_data_fd[full_loop_B.im_tmp_f].im;
      full_loop_B.x_data_fd[full_loop_B.im_tmp_k].re =
        full_loop_B.x_data_fd[full_loop_B.im_tmp_k].re *
        full_loop_B.x_data_fd[full_loop_B.im_tmp_f].re -
        full_loop_B.x_data_fd[full_loop_B.im_tmp_k].im *
        full_loop_B.x_data_fd[full_loop_B.im_tmp_f].im;
      full_loop_B.x_data_fd[(full_loop_B.b_subsb_idx_0 + full_loop_B.im_tmp_tmp)
        - 1].im = full_loop_B.im;
    }

    full_loop_B.loop_ub_eg = full_loop_B.a_size[0] - 1;
    for (full_loop_B.b_k_f4 = 0; full_loop_B.b_k_f4 <= full_loop_B.loop_ub_eg;
         full_loop_B.b_k_f4++) {
      full_loop_B.b_subsb_idx_0 = full_loop_B.b_k_f4 + 1;
      full_loop_B.im_tmp_k = (full_loop_B.x_size_idx_0 * 3 +
        full_loop_B.b_subsb_idx_0) - 1;
      full_loop_B.im_tmp_f = (full_loop_B.x_size_idx_0 << 1) +
        full_loop_B.b_k_f4;
      full_loop_B.im = full_loop_B.x_data_fd[full_loop_B.im_tmp_k].im *
        full_loop_B.x_data_fd[full_loop_B.im_tmp_f].re +
        full_loop_B.x_data_fd[full_loop_B.im_tmp_k].re *
        full_loop_B.x_data_fd[full_loop_B.im_tmp_f].im;
      full_loop_B.x_data_fd[full_loop_B.im_tmp_k].re =
        full_loop_B.x_data_fd[full_loop_B.im_tmp_k].re *
        full_loop_B.x_data_fd[full_loop_B.im_tmp_f].re -
        full_loop_B.x_data_fd[full_loop_B.im_tmp_k].im *
        full_loop_B.x_data_fd[full_loop_B.im_tmp_f].im;
      full_loop_B.x_data_fd[(full_loop_B.b_subsb_idx_0 +
        full_loop_B.x_size_idx_0 * 3) - 1].im = full_loop_B.im;
    }

    full_loop_B.loop_ub_eg = full_loop_B.a_size[0] - 1;
    for (full_loop_B.b_k_f4 = 0; full_loop_B.b_k_f4 <= full_loop_B.loop_ub_eg;
         full_loop_B.b_k_f4++) {
      full_loop_B.im_tmp_k = (full_loop_B.x_size_idx_0 << 2) +
        full_loop_B.b_k_f4;
      full_loop_B.im_tmp_f = full_loop_B.x_size_idx_0 * 3 + full_loop_B.b_k_f4;
      full_loop_B.im = full_loop_B.x_data_fd[full_loop_B.im_tmp_k].im *
        full_loop_B.x_data_fd[full_loop_B.im_tmp_f].re +
        full_loop_B.x_data_fd[full_loop_B.im_tmp_k].re *
        full_loop_B.x_data_fd[full_loop_B.im_tmp_f].im;
      full_loop_B.x_data_fd[full_loop_B.im_tmp_k].re =
        full_loop_B.x_data_fd[full_loop_B.im_tmp_k].re *
        full_loop_B.x_data_fd[full_loop_B.im_tmp_f].re -
        full_loop_B.x_data_fd[full_loop_B.im_tmp_k].im *
        full_loop_B.x_data_fd[full_loop_B.im_tmp_f].im;
      full_loop_B.x_data_fd[full_loop_B.im_tmp_k].im = full_loop_B.im;
    }
  }

  full_loop_B.a_size_j[0] = k_size[0];
  full_loop_B.a_size_j[1] = k_size[1];
  full_loop_B.loop_ub_eg = k_size[0] * k_size[1];
  for (full_loop_B.b_k_f4 = 0; full_loop_B.b_k_f4 < full_loop_B.loop_ub_eg;
       full_loop_B.b_k_f4++) {
    full_loop_B.a_data_i.re = k_data[full_loop_B.b_k_f4] * 0.0 *
      x_data[full_loop_B.b_k_f4];
    full_loop_B.a_data_i.im = x_data[full_loop_B.b_k_f4] *
      k_data[full_loop_B.b_k_f4];
  }

  full_loop_repmat_p43r(&full_loop_B.a_data_i, full_loop_B.a_size_j,
                        full_loop_B.tmp_data_ko, full_loop_B.tmp_size_k);
  full_loop_bsxfun_p(full_loop_B.tmp_data_ko, full_loop_B.tmp_size_k,
                     full_loop_B.b_A_data_a, full_loop_B.a_size);
  full_loop_B.loop_ub_tmp_k = full_loop_B.a_size[0];
  full_loop_B.loop_ub_eg = full_loop_B.a_size[0] * full_loop_B.a_size[1] - 1;
  if (0 <= full_loop_B.loop_ub_eg) {
    std::memcpy(&full_loop_B.tmp_data_ko[0], &full_loop_B.b_A_data_a[0],
                (full_loop_B.loop_ub_eg + 1) * sizeof(creal_T));
  }

  if (full_loop_B.a_size[0] != 0) {
    full_loop_B.loop_ub_eg = full_loop_B.a_size[0] - 1;
    for (full_loop_B.b_k_f4 = 0; full_loop_B.b_k_f4 <= full_loop_B.loop_ub_eg;
         full_loop_B.b_k_f4++) {
      full_loop_B.b_subsb_idx_0 = full_loop_B.b_k_f4 + 1;
      full_loop_B.im_tmp_k = (full_loop_B.b_subsb_idx_0 +
        full_loop_B.loop_ub_tmp_k) - 1;
      full_loop_B.im = full_loop_B.tmp_data_ko[full_loop_B.im_tmp_k].im *
        full_loop_B.tmp_data_ko[full_loop_B.b_k_f4].re +
        full_loop_B.tmp_data_ko[full_loop_B.im_tmp_k].re *
        full_loop_B.tmp_data_ko[full_loop_B.b_k_f4].im;
      full_loop_B.tmp_data_ko[full_loop_B.im_tmp_k].re =
        full_loop_B.tmp_data_ko[full_loop_B.im_tmp_k].re *
        full_loop_B.tmp_data_ko[full_loop_B.b_k_f4].re -
        full_loop_B.tmp_data_ko[full_loop_B.im_tmp_k].im *
        full_loop_B.tmp_data_ko[full_loop_B.b_k_f4].im;
      full_loop_B.tmp_data_ko[(full_loop_B.b_subsb_idx_0 +
        full_loop_B.loop_ub_tmp_k) - 1].im = full_loop_B.im;
    }

    full_loop_B.loop_ub_eg = full_loop_B.a_size[0] - 1;
    for (full_loop_B.b_k_f4 = 0; full_loop_B.b_k_f4 <= full_loop_B.loop_ub_eg;
         full_loop_B.b_k_f4++) {
      full_loop_B.b_subsb_idx_0 = full_loop_B.b_k_f4 + 1;
      full_loop_B.im_tmp_tmp = full_loop_B.loop_ub_tmp_k << 1;
      full_loop_B.im_tmp_k = (full_loop_B.im_tmp_tmp + full_loop_B.b_subsb_idx_0)
        - 1;
      full_loop_B.im_tmp_f = full_loop_B.b_k_f4 + full_loop_B.loop_ub_tmp_k;
      full_loop_B.im = full_loop_B.tmp_data_ko[full_loop_B.im_tmp_k].im *
        full_loop_B.tmp_data_ko[full_loop_B.im_tmp_f].re +
        full_loop_B.tmp_data_ko[full_loop_B.im_tmp_k].re *
        full_loop_B.tmp_data_ko[full_loop_B.im_tmp_f].im;
      full_loop_B.tmp_data_ko[full_loop_B.im_tmp_k].re =
        full_loop_B.tmp_data_ko[full_loop_B.im_tmp_k].re *
        full_loop_B.tmp_data_ko[full_loop_B.im_tmp_f].re -
        full_loop_B.tmp_data_ko[full_loop_B.im_tmp_k].im *
        full_loop_B.tmp_data_ko[full_loop_B.im_tmp_f].im;
      full_loop_B.tmp_data_ko[(full_loop_B.b_subsb_idx_0 +
        full_loop_B.im_tmp_tmp) - 1].im = full_loop_B.im;
    }

    full_loop_B.loop_ub_eg = full_loop_B.a_size[0] - 1;
    for (full_loop_B.b_k_f4 = 0; full_loop_B.b_k_f4 <= full_loop_B.loop_ub_eg;
         full_loop_B.b_k_f4++) {
      full_loop_B.b_subsb_idx_0 = full_loop_B.b_k_f4 + 1;
      full_loop_B.im_tmp_k = (full_loop_B.loop_ub_tmp_k * 3 +
        full_loop_B.b_subsb_idx_0) - 1;
      full_loop_B.im_tmp_f = (full_loop_B.loop_ub_tmp_k << 1) +
        full_loop_B.b_k_f4;
      full_loop_B.im = full_loop_B.tmp_data_ko[full_loop_B.im_tmp_k].im *
        full_loop_B.tmp_data_ko[full_loop_B.im_tmp_f].re +
        full_loop_B.tmp_data_ko[full_loop_B.im_tmp_k].re *
        full_loop_B.tmp_data_ko[full_loop_B.im_tmp_f].im;
      full_loop_B.tmp_data_ko[full_loop_B.im_tmp_k].re =
        full_loop_B.tmp_data_ko[full_loop_B.im_tmp_k].re *
        full_loop_B.tmp_data_ko[full_loop_B.im_tmp_f].re -
        full_loop_B.tmp_data_ko[full_loop_B.im_tmp_k].im *
        full_loop_B.tmp_data_ko[full_loop_B.im_tmp_f].im;
      full_loop_B.tmp_data_ko[(full_loop_B.b_subsb_idx_0 +
        full_loop_B.loop_ub_tmp_k * 3) - 1].im = full_loop_B.im;
    }

    full_loop_B.loop_ub_eg = full_loop_B.a_size[0] - 1;
    for (full_loop_B.b_k_f4 = 0; full_loop_B.b_k_f4 <= full_loop_B.loop_ub_eg;
         full_loop_B.b_k_f4++) {
      full_loop_B.im_tmp_k = (full_loop_B.loop_ub_tmp_k << 2) +
        full_loop_B.b_k_f4;
      full_loop_B.im_tmp_f = full_loop_B.loop_ub_tmp_k * 3 + full_loop_B.b_k_f4;
      full_loop_B.im = full_loop_B.tmp_data_ko[full_loop_B.im_tmp_k].im *
        full_loop_B.tmp_data_ko[full_loop_B.im_tmp_f].re +
        full_loop_B.tmp_data_ko[full_loop_B.im_tmp_k].re *
        full_loop_B.tmp_data_ko[full_loop_B.im_tmp_f].im;
      full_loop_B.tmp_data_ko[full_loop_B.im_tmp_k].re =
        full_loop_B.tmp_data_ko[full_loop_B.im_tmp_k].re *
        full_loop_B.tmp_data_ko[full_loop_B.im_tmp_f].re -
        full_loop_B.tmp_data_ko[full_loop_B.im_tmp_k].im *
        full_loop_B.tmp_data_ko[full_loop_B.im_tmp_f].im;
      full_loop_B.tmp_data_ko[full_loop_B.im_tmp_k].im = full_loop_B.im;
    }
  }

  if ((x_size[0] == 0) || (x_size[1] == 0)) {
    full_loop_B.loop_ub_eg = 0;
  } else if (x_size[0] > x_size[1]) {
    full_loop_B.loop_ub_eg = x_size[0];
  } else {
    full_loop_B.loop_ub_eg = x_size[1];
  }

  *z_size = full_loop_B.loop_ub_eg;
  for (full_loop_B.b_k_f4 = 0; full_loop_B.b_k_f4 < full_loop_B.loop_ub_eg;
       full_loop_B.b_k_f4++) {
    z_data[full_loop_B.b_k_f4].re = 1.0;
    z_data[full_loop_B.b_k_f4].im = 0.0;
  }

  for (full_loop_B.b_subsb_idx_0 = 0; full_loop_B.b_subsb_idx_0 < 5;
       full_loop_B.b_subsb_idx_0++) {
    full_loop_B.loop_ub_eg = *z_size;
    full_loop_B.im_tmp_k = ((full_loop_B.b_subsb_idx_0 + 1) << 1) + 1;
    for (full_loop_B.b_k_f4 = 0; full_loop_B.b_k_f4 < full_loop_B.loop_ub_eg;
         full_loop_B.b_k_f4++) {
      full_loop_B.im_tmp_tmp = full_loop_B.x_size_idx_0 *
        full_loop_B.b_subsb_idx_0 + full_loop_B.b_k_f4;
      if (full_loop_B.x_data_fd[full_loop_B.im_tmp_tmp].im == 0.0) {
        full_loop_B.im = full_loop_B.x_data_fd[full_loop_B.im_tmp_tmp].re /
          static_cast<real_T>(full_loop_B.im_tmp_k);
        full_loop_B.r_na = 0.0;
      } else if (full_loop_B.x_data_fd[full_loop_B.im_tmp_tmp].re == 0.0) {
        full_loop_B.im = 0.0;
        full_loop_B.r_na = full_loop_B.x_data_fd[full_loop_B.im_tmp_tmp].im /
          static_cast<real_T>(full_loop_B.im_tmp_k);
      } else {
        full_loop_B.im = full_loop_B.x_data_fd[full_loop_B.im_tmp_tmp].re /
          static_cast<real_T>(full_loop_B.im_tmp_k);
        full_loop_B.r_na = full_loop_B.x_data_fd[full_loop_B.im_tmp_tmp].im /
          static_cast<real_T>(full_loop_B.im_tmp_k);
      }

      full_loop_B.z_data_ew.re = z_data[full_loop_B.b_k_f4].re + full_loop_B.im;
      full_loop_B.z_data_ew.im = z_data[full_loop_B.b_k_f4].im +
        full_loop_B.r_na;
      z_data[full_loop_B.b_k_f4] = full_loop_B.z_data_ew;
    }
  }

  for (full_loop_B.b_subsb_idx_0 = 0; full_loop_B.b_subsb_idx_0 < 5;
       full_loop_B.b_subsb_idx_0++) {
    full_loop_B.loop_ub_eg = *z_size;
    full_loop_B.im_tmp_k = full_loop_B.b_subsb_idx_0 + 2;
    for (full_loop_B.b_k_f4 = 0; full_loop_B.b_k_f4 < full_loop_B.loop_ub_eg;
         full_loop_B.b_k_f4++) {
      full_loop_B.im_tmp_tmp = full_loop_B.loop_ub_tmp_k *
        full_loop_B.b_subsb_idx_0 + full_loop_B.b_k_f4;
      if (full_loop_B.tmp_data_ko[full_loop_B.im_tmp_tmp].im == 0.0) {
        full_loop_B.im = full_loop_B.tmp_data_ko[full_loop_B.im_tmp_tmp].re /
          static_cast<real_T>(full_loop_B.im_tmp_k);
        full_loop_B.r_na = 0.0;
      } else if (full_loop_B.tmp_data_ko[full_loop_B.im_tmp_tmp].re == 0.0) {
        full_loop_B.im = 0.0;
        full_loop_B.r_na = full_loop_B.tmp_data_ko[full_loop_B.im_tmp_tmp].im /
          static_cast<real_T>(full_loop_B.im_tmp_k);
      } else {
        full_loop_B.im = full_loop_B.tmp_data_ko[full_loop_B.im_tmp_tmp].re /
          static_cast<real_T>(full_loop_B.im_tmp_k);
        full_loop_B.r_na = full_loop_B.tmp_data_ko[full_loop_B.im_tmp_tmp].im /
          static_cast<real_T>(full_loop_B.im_tmp_k);
      }

      full_loop_B.z_data_ft.re = z_data[full_loop_B.b_k_f4].re + full_loop_B.im;
      full_loop_B.z_data_ft.im = z_data[full_loop_B.b_k_f4].im +
        full_loop_B.r_na;
      z_data[full_loop_B.b_k_f4] = full_loop_B.z_data_ft;
    }
  }

  for (full_loop_B.b_subsb_idx_0 = 0; full_loop_B.b_subsb_idx_0 < 3;
       full_loop_B.b_subsb_idx_0++) {
    full_loop_B.loop_ub_eg = *z_size;
    full_loop_B.im_tmp_k = full_loop_B.b_subsb_idx_0 + 4;
    for (full_loop_B.b_k_f4 = 0; full_loop_B.b_k_f4 < full_loop_B.loop_ub_eg;
         full_loop_B.b_k_f4++) {
      full_loop_B.im_tmp_tmp = full_loop_B.loop_ub_tmp_k *
        full_loop_B.b_subsb_idx_0 + full_loop_B.b_k_f4;
      full_loop_B.im = full_loop_B.tmp_data_ko[full_loop_B.im_tmp_tmp].re *
        full_loop_B.x_data_fd[full_loop_B.b_k_f4].re -
        full_loop_B.tmp_data_ko[full_loop_B.im_tmp_tmp].im *
        full_loop_B.x_data_fd[full_loop_B.b_k_f4].im;
      full_loop_B.r_na = full_loop_B.tmp_data_ko[full_loop_B.im_tmp_tmp].im *
        full_loop_B.x_data_fd[full_loop_B.b_k_f4].re +
        full_loop_B.tmp_data_ko[full_loop_B.im_tmp_tmp].re *
        full_loop_B.x_data_fd[full_loop_B.b_k_f4].im;
      if (full_loop_B.r_na == 0.0) {
        full_loop_B.im /= static_cast<real_T>(full_loop_B.im_tmp_k);
        full_loop_B.r_na = 0.0;
      } else if (full_loop_B.im == 0.0) {
        full_loop_B.im = 0.0;
        full_loop_B.r_na /= static_cast<real_T>(full_loop_B.im_tmp_k);
      } else {
        full_loop_B.im /= static_cast<real_T>(full_loop_B.im_tmp_k);
        full_loop_B.r_na /= static_cast<real_T>(full_loop_B.im_tmp_k);
      }

      full_loop_B.z_data_k.re = z_data[full_loop_B.b_k_f4].re + full_loop_B.im;
      full_loop_B.z_data_k.im = z_data[full_loop_B.b_k_f4].im + full_loop_B.r_na;
      z_data[full_loop_B.b_k_f4] = full_loop_B.z_data_k;
    }
  }

  for (full_loop_B.b_subsb_idx_0 = 0; full_loop_B.b_subsb_idx_0 < 1;
       full_loop_B.b_subsb_idx_0++) {
    full_loop_B.loop_ub_eg = *z_size;
    for (full_loop_B.b_k_f4 = 0; full_loop_B.b_k_f4 < full_loop_B.loop_ub_eg;
         full_loop_B.b_k_f4++) {
      full_loop_B.im_tmp_tmp = full_loop_B.b_k_f4 + full_loop_B.x_size_idx_0;
      full_loop_B.im = full_loop_B.x_data_fd[full_loop_B.im_tmp_tmp].re *
        full_loop_B.tmp_data_ko[full_loop_B.b_k_f4].re -
        full_loop_B.x_data_fd[full_loop_B.im_tmp_tmp].im *
        full_loop_B.tmp_data_ko[full_loop_B.b_k_f4].im;
      full_loop_B.r_na = full_loop_B.x_data_fd[full_loop_B.im_tmp_tmp].re *
        full_loop_B.tmp_data_ko[full_loop_B.b_k_f4].im +
        full_loop_B.x_data_fd[full_loop_B.im_tmp_tmp].im *
        full_loop_B.tmp_data_ko[full_loop_B.b_k_f4].re;
      if (full_loop_B.r_na == 0.0) {
        full_loop_B.im /= 6.0;
        full_loop_B.r_na = 0.0;
      } else if (full_loop_B.im == 0.0) {
        full_loop_B.im = 0.0;
        full_loop_B.r_na /= 6.0;
      } else {
        full_loop_B.im /= 6.0;
        full_loop_B.r_na /= 6.0;
      }

      full_loop_B.z_data_ne.re = z_data[full_loop_B.b_k_f4].re + full_loop_B.im;
      full_loop_B.z_data_ne.im = z_data[full_loop_B.b_k_f4].im +
        full_loop_B.r_na;
      z_data[full_loop_B.b_k_f4] = full_loop_B.z_data_ne;
    }
  }

  full_loop_B.loop_ub_tmp_k = theta_size[0] * theta_size[1] - 1;
  for (full_loop_B.b_k_f4 = 0; full_loop_B.b_k_f4 <= full_loop_B.loop_ub_tmp_k;
       full_loop_B.b_k_f4++) {
    full_loop_B.a_data_i.re = theta_data[full_loop_B.b_k_f4] * 0.0;
    full_loop_B.a_data_i.im = theta_data[full_loop_B.b_k_f4];
  }

  if (0 <= full_loop_B.loop_ub_tmp_k) {
    std::memcpy(&full_loop_B.q_data_k, &full_loop_B.a_data_i,
                (full_loop_B.loop_ub_tmp_k + 1) * sizeof(creal_T));
  }

  for (full_loop_B.b_k_f4 = 0; full_loop_B.b_k_f4 <= full_loop_B.loop_ub_tmp_k;
       full_loop_B.b_k_f4++) {
    if (full_loop_B.q_data_k.im == 0.0) {
      full_loop_B.im = std::exp(full_loop_B.q_data_k.re);
      full_loop_B.r_na = 0.0;
    } else if (rtIsInf(full_loop_B.q_data_k.im) && rtIsInf
               (full_loop_B.q_data_k.re) && (full_loop_B.q_data_k.re < 0.0)) {
      full_loop_B.im = 0.0;
      full_loop_B.r_na = 0.0;
    } else {
      full_loop_B.r_na = std::exp(full_loop_B.q_data_k.re / 2.0);
      full_loop_B.im = full_loop_B.r_na * std::cos(full_loop_B.q_data_k.im) *
        full_loop_B.r_na;
      full_loop_B.r_na *= full_loop_B.r_na * std::sin(full_loop_B.q_data_k.im);
    }

    full_loop_B.q_data_i.re = full_loop_B.im;
    full_loop_B.q_data_i.im = full_loop_B.r_na;
    full_loop_B.q_data_k = full_loop_B.q_data_i;
  }

  full_loop_B.loop_ub_eg = *z_size;
  for (full_loop_B.b_k_f4 = 0; full_loop_B.b_k_f4 < full_loop_B.loop_ub_eg;
       full_loop_B.b_k_f4++) {
    full_loop_B.im = x_data[full_loop_B.b_k_f4] * z_data[full_loop_B.b_k_f4].re;
    full_loop_B.r_na = x_data[full_loop_B.b_k_f4] * z_data[full_loop_B.b_k_f4].
      im;
    full_loop_B.z_data_i.re = full_loop_B.im * full_loop_B.q_data_k.re -
      full_loop_B.r_na * full_loop_B.q_data_k.im;
    full_loop_B.z_data_i.im = full_loop_B.im * full_loop_B.q_data_k.im +
      full_loop_B.r_na * full_loop_B.q_data_k.re;
    z_data[full_loop_B.b_k_f4] = full_loop_B.z_data_i;
  }
}

creal_T full_loopModelClass::full_loop_fresnelg2(real_T x, real_T dk, real_T k,
  real_T theta)
{
  creal_T z;
  full_loop_B.thresh_tmp = k * k;
  full_loop_B.thresh = dk / full_loop_B.thresh_tmp;
  if (full_loop_B.thresh > 1.0E-6) {
    full_loop_B.igt_size_idx_0 = 1;
    full_loop_B.igt_size_idx_1 = 1;
  } else {
    full_loop_B.igt_size_idx_0 = 0;
    full_loop_B.igt_size_idx_1 = 0;
  }

  if (full_loop_B.thresh < -1.0E-6) {
    full_loop_B.ilt_size_idx_0 = 1;
    full_loop_B.ilt_size_idx_1 = 1;
  } else {
    full_loop_B.ilt_size_idx_0 = 0;
    full_loop_B.ilt_size_idx_1 = 0;
  }

  if ((-1.0E-6 <= full_loop_B.thresh) && (full_loop_B.thresh <= 1.0E-6)) {
    full_loop_B.ism_size_idx_0 = 1;
    full_loop_B.ism_size_idx_1 = 1;
  } else {
    full_loop_B.ism_size_idx_0 = 0;
    full_loop_B.ism_size_idx_1 = 0;
  }

  if ((x * x * std::abs(dk) < 0.001) && (std::abs(k * x) < 0.001)) {
    full_loop_B.ii_size_idx_0_l = 1;
    full_loop_B.ii_size_idx_1 = 1;
  } else {
    full_loop_B.ii_size_idx_0_l = 0;
    full_loop_B.ii_size_idx_1 = 0;
  }

  z.re = 0.0;
  z.im = 0.0;
  if ((full_loop_B.igt_size_idx_0 != 0) && (full_loop_B.igt_size_idx_1 != 0)) {
    full_loop_B.thresh_tmp = theta - full_loop_B.thresh_tmp / (2.0 * dk);
    full_loop_B.nhikx_data.re = full_loop_B.thresh_tmp * 0.0;
    full_loop_B.nhikx_data.im = full_loop_B.thresh_tmp;
    full_loop_B.hidkxx_data = full_loop_B.nhikx_data;
    full_loop_B.t_data_c = z;
    full_loop_B.tmp_size_n[0] = 1;
    full_loop_B.tmp_size_n[1] = 1;
    full_loop_B.dk_size_c[0] = 1;
    full_loop_B.dk_size_c[1] = 1;
    full_loop_B.tmp_size_ik[0] = 1;
    full_loop_B.tmp_size_ik[1] = 1;
    full_loop_B.tmp_data_bu = 3.1415926535897931 / dk;
    full_loop_B.dk_data = dk / 3.1415926535897931;
    full_loop_B.tmp_data_i3 = 3.1415926535897931 * dk;
    for (full_loop_B.igt_size_idx_0 = 0; full_loop_B.igt_size_idx_0 < 1;
         full_loop_B.igt_size_idx_0++) {
      if (full_loop_B.hidkxx_data.im == 0.0) {
        full_loop_B.thresh_tmp = std::exp(full_loop_B.hidkxx_data.re);
        full_loop_B.thresh = 0.0;
      } else if (rtIsInf(full_loop_B.hidkxx_data.im) && rtIsInf
                 (full_loop_B.hidkxx_data.re) && (full_loop_B.hidkxx_data.re <
                  0.0)) {
        full_loop_B.thresh_tmp = 0.0;
        full_loop_B.thresh = 0.0;
      } else {
        full_loop_B.thresh = std::exp(full_loop_B.hidkxx_data.re / 2.0);
        full_loop_B.thresh_tmp = full_loop_B.thresh * std::cos
          (full_loop_B.hidkxx_data.im) * full_loop_B.thresh;
        full_loop_B.thresh *= full_loop_B.thresh * std::sin
          (full_loop_B.hidkxx_data.im);
      }

      full_loop_B.hidkxx_data.re = full_loop_B.thresh_tmp;
      full_loop_B.hidkxx_data.im = full_loop_B.thresh;
    }

    full_loop_sqrt_p4(&full_loop_B.tmp_data_bu, full_loop_B.tmp_size_n,
                      &full_loop_B.tmp_data_px, full_loop_B.tmp_size_f);
    full_loop_sqrt_p4(&full_loop_B.dk_data, full_loop_B.dk_size_c,
                      &full_loop_B.tmp_data_bu, full_loop_B.tmp_size_n);
    full_loop_sqrt_p4(&full_loop_B.tmp_data_i3, full_loop_B.tmp_size_ik,
                      &full_loop_B.dk_data, full_loop_B.dk_size_c);
    full_loop_B.tmp_size_m[0] = full_loop_B.tmp_size_n[0];
    full_loop_B.tmp_size_m[1] = full_loop_B.tmp_size_n[1];
    full_loop_B.igt_size_idx_1 = full_loop_B.tmp_size_n[0] *
      full_loop_B.tmp_size_n[1];
    for (full_loop_B.igt_size_idx_0 = 0; full_loop_B.igt_size_idx_0 <
         full_loop_B.igt_size_idx_1; full_loop_B.igt_size_idx_0++) {
      full_loop_B.tmp_data_i3 = full_loop_B.tmp_data_bu * x + k /
        full_loop_B.dk_data;
    }

    full_loop_fresnel_p(&full_loop_B.tmp_data_i3, full_loop_B.tmp_size_m,
                        &full_loop_B.nhikx_data, full_loop_B.tmp_size_n);
    full_loop_B.tmp_size_ms[0] = 1;
    full_loop_B.tmp_size_ms[1] = 1;
    full_loop_B.tmp_data_i3 = 3.1415926535897931 * dk;
    full_loop_sqrt_p4(&full_loop_B.tmp_data_i3, full_loop_B.tmp_size_ms,
                      &full_loop_B.tmp_data_bu, full_loop_B.tmp_size_n);
    full_loop_B.k_size_e[0] = 1;
    full_loop_B.k_size_e[1] = 1;
    full_loop_B.tmp_data_bu = k / full_loop_B.tmp_data_bu;
    full_loop_fresnel_p(&full_loop_B.tmp_data_bu, full_loop_B.k_size_e,
                        &full_loop_B.nikx_data, full_loop_B.tmp_size_m);
    full_loop_B.igt_size_idx_1 = full_loop_B.tmp_size_f[0] *
      full_loop_B.tmp_size_f[1];
    for (full_loop_B.igt_size_idx_0 = 0; full_loop_B.igt_size_idx_0 <
         full_loop_B.igt_size_idx_1; full_loop_B.igt_size_idx_0++) {
      full_loop_B.thresh_tmp = full_loop_B.tmp_data_px *
        full_loop_B.hidkxx_data.re;
      full_loop_B.thresh = full_loop_B.tmp_data_px * full_loop_B.hidkxx_data.im;
      full_loop_B.nhikx_data_re = full_loop_B.nhikx_data.re -
        full_loop_B.nikx_data.re;
      full_loop_B.nhikx_data_im = full_loop_B.nhikx_data.im -
        full_loop_B.nikx_data.im;
      full_loop_B.t_data_c.re = full_loop_B.thresh_tmp *
        full_loop_B.nhikx_data_re - full_loop_B.thresh *
        full_loop_B.nhikx_data_im;
      full_loop_B.t_data_c.im = full_loop_B.thresh_tmp *
        full_loop_B.nhikx_data_im + full_loop_B.thresh *
        full_loop_B.nhikx_data_re;
    }

    z = full_loop_B.t_data_c;
  }

  if ((full_loop_B.ilt_size_idx_0 != 0) && (full_loop_B.ilt_size_idx_1 != 0)) {
    full_loop_B.thresh_tmp = theta - k * k / (2.0 * dk);
    full_loop_B.nhikx_data.re = full_loop_B.thresh_tmp * -0.0;
    full_loop_B.nhikx_data.im = -full_loop_B.thresh_tmp;
    full_loop_B.hidkxx_data = full_loop_B.nhikx_data;
    full_loop_B.t_data_c = z;
    full_loop_B.tmp_size_c[0] = 1;
    full_loop_B.tmp_size_c[1] = 1;
    full_loop_B.dk_size_h[0] = 1;
    full_loop_B.dk_size_h[1] = 1;
    full_loop_B.tmp_size_o[0] = 1;
    full_loop_B.tmp_size_o[1] = 1;
    full_loop_B.tmp_data_bu = -3.1415926535897931 / dk;
    full_loop_B.dk_data = -dk / 3.1415926535897931;
    full_loop_B.tmp_data_i3 = -3.1415926535897931 * dk;
    for (full_loop_B.igt_size_idx_0 = 0; full_loop_B.igt_size_idx_0 < 1;
         full_loop_B.igt_size_idx_0++) {
      if (full_loop_B.hidkxx_data.im == 0.0) {
        full_loop_B.thresh_tmp = std::exp(full_loop_B.hidkxx_data.re);
        full_loop_B.thresh = 0.0;
      } else if (rtIsInf(full_loop_B.hidkxx_data.im) && rtIsInf
                 (full_loop_B.hidkxx_data.re) && (full_loop_B.hidkxx_data.re <
                  0.0)) {
        full_loop_B.thresh_tmp = 0.0;
        full_loop_B.thresh = 0.0;
      } else {
        full_loop_B.thresh = std::exp(full_loop_B.hidkxx_data.re / 2.0);
        full_loop_B.thresh_tmp = full_loop_B.thresh * std::cos
          (full_loop_B.hidkxx_data.im) * full_loop_B.thresh;
        full_loop_B.thresh *= full_loop_B.thresh * std::sin
          (full_loop_B.hidkxx_data.im);
      }

      full_loop_B.hidkxx_data.re = full_loop_B.thresh_tmp;
      full_loop_B.hidkxx_data.im = full_loop_B.thresh;
    }

    full_loop_sqrt_p4(&full_loop_B.tmp_data_bu, full_loop_B.tmp_size_c,
                      &full_loop_B.tmp_data_px, full_loop_B.tmp_size_f);
    full_loop_sqrt_p4(&full_loop_B.dk_data, full_loop_B.dk_size_h,
                      &full_loop_B.tmp_data_bu, full_loop_B.tmp_size_n);
    full_loop_sqrt_p4(&full_loop_B.tmp_data_i3, full_loop_B.tmp_size_o,
                      &full_loop_B.dk_data, full_loop_B.dk_size_c);
    full_loop_B.tmp_size_e[0] = full_loop_B.tmp_size_n[0];
    full_loop_B.tmp_size_e[1] = full_loop_B.tmp_size_n[1];
    full_loop_B.igt_size_idx_1 = full_loop_B.tmp_size_n[0] *
      full_loop_B.tmp_size_n[1];
    for (full_loop_B.igt_size_idx_0 = 0; full_loop_B.igt_size_idx_0 <
         full_loop_B.igt_size_idx_1; full_loop_B.igt_size_idx_0++) {
      full_loop_B.tmp_data_i3 = full_loop_B.tmp_data_bu * x - k /
        full_loop_B.dk_data;
    }

    full_loop_fresnel_p(&full_loop_B.tmp_data_i3, full_loop_B.tmp_size_e,
                        &full_loop_B.nhikx_data, full_loop_B.tmp_size_n);
    full_loop_B.tmp_size_il[0] = 1;
    full_loop_B.tmp_size_il[1] = 1;
    full_loop_B.tmp_data_i3 = -3.1415926535897931 * dk;
    full_loop_sqrt_p4(&full_loop_B.tmp_data_i3, full_loop_B.tmp_size_il,
                      &full_loop_B.tmp_data_bu, full_loop_B.tmp_size_n);
    full_loop_B.k_size_f[0] = 1;
    full_loop_B.k_size_f[1] = 1;
    full_loop_B.tmp_data_bu = -k / full_loop_B.tmp_data_bu;
    full_loop_fresnel_p(&full_loop_B.tmp_data_bu, full_loop_B.k_size_f,
                        &full_loop_B.nikx_data, full_loop_B.tmp_size_m);
    full_loop_B.igt_size_idx_1 = full_loop_B.tmp_size_f[0] *
      full_loop_B.tmp_size_f[1];
    for (full_loop_B.igt_size_idx_0 = 0; full_loop_B.igt_size_idx_0 <
         full_loop_B.igt_size_idx_1; full_loop_B.igt_size_idx_0++) {
      full_loop_B.thresh_tmp = full_loop_B.tmp_data_px *
        full_loop_B.hidkxx_data.re;
      full_loop_B.thresh = full_loop_B.tmp_data_px * full_loop_B.hidkxx_data.im;
      full_loop_B.nhikx_data_re = full_loop_B.nhikx_data.re -
        full_loop_B.nikx_data.re;
      full_loop_B.nhikx_data_im = full_loop_B.nhikx_data.im -
        full_loop_B.nikx_data.im;
      full_loop_B.t_data_c.re = full_loop_B.thresh_tmp *
        full_loop_B.nhikx_data_re - full_loop_B.thresh *
        full_loop_B.nhikx_data_im;
      full_loop_B.t_data_c.im = -(full_loop_B.thresh_tmp *
        full_loop_B.nhikx_data_im + full_loop_B.thresh *
        full_loop_B.nhikx_data_re);
    }

    z = full_loop_B.t_data_c;
  }

  if ((full_loop_B.ism_size_idx_0 != 0) && (full_loop_B.ism_size_idx_1 != 0)) {
    full_loop_B.nikx_data.re = k * -0.0 * x;
    full_loop_B.nikx_data.im = x * -k;
    full_loop_B.k_size_c[0] = 1;
    full_loop_B.k_size_c[1] = 1;
    if (full_loop_B.nikx_data.im == 0.0) {
      full_loop_B.nhikx_data.re = full_loop_B.nikx_data.re / 2.0;
      full_loop_B.nhikx_data.im = 0.0;
    } else if (full_loop_B.nikx_data.re == 0.0) {
      full_loop_B.nhikx_data.re = 0.0;
      full_loop_B.nhikx_data.im = full_loop_B.nikx_data.im / 2.0;
    } else {
      full_loop_B.nhikx_data.re = (rtNaN);
      full_loop_B.nhikx_data.im = full_loop_B.nikx_data.im / 2.0;
    }

    full_loop_B.tmp_data_bu = k;
    full_loop_power_p43ri(&full_loop_B.tmp_data_bu, full_loop_B.k_size_c,
                          &full_loop_B.tmp_data_px, full_loop_B.tmp_size_f);
    full_loop_B.thresh = 0.5 * dk;
    if (full_loop_B.thresh == 0.0) {
      full_loop_B.thresh_tmp = 0.0 * dk / full_loop_B.tmp_data_px;
      full_loop_B.thresh = 0.0;
    } else if (0.0 * dk == 0.0) {
      full_loop_B.thresh_tmp = 0.0;
      full_loop_B.thresh /= full_loop_B.tmp_data_px;
    } else {
      full_loop_B.thresh_tmp = (rtNaN);
      full_loop_B.thresh /= full_loop_B.tmp_data_px;
    }

    full_loop_B.y_data[0].re = -2.0 * full_loop_B.thresh_tmp;
    full_loop_B.y_data[0].im = -2.0 * full_loop_B.thresh;
    full_loop_B.x_size_g[0] = 1;
    full_loop_B.x_size_g[1] = 1;
    full_loop_B.tmp_data_i3 = x;
    full_loop_power_p43ri(&full_loop_B.tmp_data_i3, full_loop_B.x_size_g,
                          &full_loop_B.tmp_data_px, full_loop_B.tmp_size_f);
    full_loop_B.hidkxx_data.re = dk * 0.0 * full_loop_B.tmp_data_px;
    full_loop_B.hidkxx_data.im = dk * 0.5 * full_loop_B.tmp_data_px;
    full_loop_B.t_data_c.re = -full_loop_B.nikx_data.re;
    full_loop_B.t_data_c.im = -full_loop_B.nikx_data.im;
    full_loop_B.e_data_b = full_loop_B.t_data_c;
    for (full_loop_B.igt_size_idx_0 = 0; full_loop_B.igt_size_idx_0 < 1;
         full_loop_B.igt_size_idx_0++) {
      if (full_loop_B.e_data_b.im == 0.0) {
        full_loop_B.thresh_tmp = std::exp(full_loop_B.e_data_b.re);
        full_loop_B.thresh = 0.0;
      } else if (rtIsInf(full_loop_B.e_data_b.im) && rtIsInf
                 (full_loop_B.e_data_b.re) && (full_loop_B.e_data_b.re < 0.0)) {
        full_loop_B.thresh_tmp = 0.0;
        full_loop_B.thresh = 0.0;
      } else {
        full_loop_B.thresh = std::exp(full_loop_B.e_data_b.re / 2.0);
        full_loop_B.thresh_tmp = full_loop_B.thresh * std::cos
          (full_loop_B.e_data_b.im) * full_loop_B.thresh;
        full_loop_B.thresh *= full_loop_B.thresh * std::sin
          (full_loop_B.e_data_b.im);
      }

      full_loop_B.e_data_b.re = full_loop_B.thresh_tmp;
      full_loop_B.e_data_b.im = full_loop_B.thresh;
    }

    if (full_loop_B.nikx_data.im == 0.0) {
      if (0.0 - full_loop_B.e_data_b.im == 0.0) {
        full_loop_B.t_data_c.re = (1.0 - full_loop_B.e_data_b.re) /
          full_loop_B.nikx_data.re;
        full_loop_B.t_data_c.im = 0.0;
      } else if (1.0 - full_loop_B.e_data_b.re == 0.0) {
        full_loop_B.t_data_c.re = 0.0;
        full_loop_B.t_data_c.im = (0.0 - full_loop_B.e_data_b.im) /
          full_loop_B.nikx_data.re;
      } else {
        full_loop_B.t_data_c.re = (1.0 - full_loop_B.e_data_b.re) /
          full_loop_B.nikx_data.re;
        full_loop_B.t_data_c.im = (0.0 - full_loop_B.e_data_b.im) /
          full_loop_B.nikx_data.re;
      }
    } else if (full_loop_B.nikx_data.re == 0.0) {
      if (1.0 - full_loop_B.e_data_b.re == 0.0) {
        full_loop_B.t_data_c.re = (0.0 - full_loop_B.e_data_b.im) /
          full_loop_B.nikx_data.im;
        full_loop_B.t_data_c.im = 0.0;
      } else if (0.0 - full_loop_B.e_data_b.im == 0.0) {
        full_loop_B.t_data_c.re = 0.0;
        full_loop_B.t_data_c.im = -((1.0 - full_loop_B.e_data_b.re) /
          full_loop_B.nikx_data.im);
      } else {
        full_loop_B.t_data_c.re = (0.0 - full_loop_B.e_data_b.im) /
          full_loop_B.nikx_data.im;
        full_loop_B.t_data_c.im = -((1.0 - full_loop_B.e_data_b.re) /
          full_loop_B.nikx_data.im);
      }
    } else {
      full_loop_B.t_data_c.re = (rtNaN);
      full_loop_B.t_data_c.im = (rtNaN);
    }

    full_loop_B.nikx_data.re = -full_loop_B.e_data_b.re;
    full_loop_B.nikx_data.im = -full_loop_B.e_data_b.im;
    full_loop_B.e_data_b = full_loop_B.t_data_c;
    for (full_loop_B.ilt_size_idx_0 = 0; full_loop_B.ilt_size_idx_0 < 20;
         full_loop_B.ilt_size_idx_0++) {
      full_loop_B.igt_size_idx_0 = ((full_loop_B.ilt_size_idx_0 + 1) << 1) - 1;
      full_loop_B.thresh_tmp = static_cast<real_T>(full_loop_B.ilt_size_idx_0 +
        1) + full_loop_B.nhikx_data.re;
      for (full_loop_B.ilt_size_idx_1 = 0; full_loop_B.ilt_size_idx_1 < 1;
           full_loop_B.ilt_size_idx_1++) {
        full_loop_B.thresh = (full_loop_B.nikx_data.re * full_loop_B.thresh_tmp
                              - full_loop_B.nikx_data.im *
                              full_loop_B.nhikx_data.im) + static_cast<real_T>
          (full_loop_B.igt_size_idx_0) * full_loop_B.t_data_c.re;
        full_loop_B.nhikx_data_re = (full_loop_B.nikx_data.re *
          full_loop_B.nhikx_data.im + full_loop_B.nikx_data.im *
          full_loop_B.thresh_tmp) + static_cast<real_T>
          (full_loop_B.igt_size_idx_0) * full_loop_B.t_data_c.im;
        full_loop_B.t_data_c.re = full_loop_B.y_data[0].re * full_loop_B.thresh
          - full_loop_B.y_data[0].im * full_loop_B.nhikx_data_re;
        full_loop_B.t_data_c.im = full_loop_B.y_data[0].re *
          full_loop_B.nhikx_data_re + full_loop_B.y_data[0].im *
          full_loop_B.thresh;
      }

      full_loop_B.ilt_size_idx_1 = full_loop_B.ilt_size_idx_0 + 2;
      for (full_loop_B.igt_size_idx_0 = 0; full_loop_B.igt_size_idx_0 < 1;
           full_loop_B.igt_size_idx_0++) {
        full_loop_B.e_data_fb.re = full_loop_B.e_data_b.re +
          full_loop_B.t_data_c.re;
        full_loop_B.e_data_fb.im = full_loop_B.e_data_b.im +
          full_loop_B.t_data_c.im;
        full_loop_B.thresh_tmp = full_loop_B.nikx_data.re *
          full_loop_B.hidkxx_data.re - full_loop_B.nikx_data.im *
          full_loop_B.hidkxx_data.im;
        full_loop_B.thresh = full_loop_B.nikx_data.re *
          full_loop_B.hidkxx_data.im + full_loop_B.nikx_data.im *
          full_loop_B.hidkxx_data.re;
        if (full_loop_B.thresh == 0.0) {
          full_loop_B.nikx_data.re = full_loop_B.thresh_tmp / static_cast<real_T>
            (full_loop_B.ilt_size_idx_1);
          full_loop_B.nikx_data.im = 0.0;
        } else if (full_loop_B.thresh_tmp == 0.0) {
          full_loop_B.nikx_data.re = 0.0;
          full_loop_B.nikx_data.im = full_loop_B.thresh / static_cast<real_T>
            (full_loop_B.ilt_size_idx_1);
        } else {
          full_loop_B.nikx_data.re = full_loop_B.thresh_tmp / static_cast<real_T>
            (full_loop_B.ilt_size_idx_1);
          full_loop_B.nikx_data.im = full_loop_B.thresh / static_cast<real_T>
            (full_loop_B.ilt_size_idx_1);
        }

        full_loop_B.e_data_b = full_loop_B.e_data_fb;
      }
    }

    full_loop_B.nhikx_data.re = theta * 0.0;
    full_loop_B.nhikx_data.im = theta;
    full_loop_B.hidkxx_data = full_loop_B.nhikx_data;
    for (full_loop_B.igt_size_idx_0 = 0; full_loop_B.igt_size_idx_0 < 1;
         full_loop_B.igt_size_idx_0++) {
      if (full_loop_B.hidkxx_data.im == 0.0) {
        full_loop_B.thresh_tmp = std::exp(full_loop_B.hidkxx_data.re);
        full_loop_B.thresh = 0.0;
      } else if (rtIsInf(full_loop_B.hidkxx_data.im) && rtIsInf
                 (full_loop_B.hidkxx_data.re) && (full_loop_B.hidkxx_data.re <
                  0.0)) {
        full_loop_B.thresh_tmp = 0.0;
        full_loop_B.thresh = 0.0;
      } else {
        full_loop_B.thresh = std::exp(full_loop_B.hidkxx_data.re / 2.0);
        full_loop_B.thresh_tmp = full_loop_B.thresh * std::cos
          (full_loop_B.hidkxx_data.im) * full_loop_B.thresh;
        full_loop_B.thresh *= full_loop_B.thresh * std::sin
          (full_loop_B.hidkxx_data.im);
      }

      full_loop_B.hidkxx_data.re = full_loop_B.thresh_tmp;
      full_loop_B.hidkxx_data.im = full_loop_B.thresh;
    }

    full_loop_B.thresh_tmp = x * full_loop_B.e_data_b.re;
    full_loop_B.thresh = x * full_loop_B.e_data_b.im;
    full_loop_B.nc.re = full_loop_B.thresh_tmp * full_loop_B.hidkxx_data.re -
      full_loop_B.thresh * full_loop_B.hidkxx_data.im;
    full_loop_B.nc.im = full_loop_B.thresh_tmp * full_loop_B.hidkxx_data.im +
      full_loop_B.thresh * full_loop_B.hidkxx_data.re;
    z = full_loop_B.nc;
  }

  if ((full_loop_B.ii_size_idx_0_l != 0) && (full_loop_B.ii_size_idx_1 != 0)) {
    full_loop_B.x_size[0] = 1;
    full_loop_B.x_size[1] = 1;
    full_loop_B.dk_size[0] = 1;
    full_loop_B.dk_size[1] = 1;
    full_loop_B.k_size_i[0] = 1;
    full_loop_B.k_size_i[1] = 1;
    full_loop_B.theta_size[0] = 1;
    full_loop_B.theta_size[1] = 1;
    full_loop_B.tmp_data_i3 = x;
    full_loop_B.dk_data = dk;
    full_loop_B.tmp_data_bu = k;
    full_loop_B.tmp_data_px = theta;
    full_loop_fresnelgzero(&full_loop_B.tmp_data_i3, full_loop_B.x_size,
      &full_loop_B.dk_data, full_loop_B.dk_size, &full_loop_B.tmp_data_bu,
      full_loop_B.k_size_i, &full_loop_B.tmp_data_px, full_loop_B.theta_size,
      &full_loop_B.nhikx_data, &full_loop_B.tmp_size_la);
    z = full_loop_B.nhikx_data;
  }

  return z;
}

void full_loopModelClass::full_loop_getPositionalState(const real_T hcd[21],
  const creal_T hip[21], const real_T hl[20], const real_T k0[20], const real_T
  k1[20], const real_T course[21], const real_T hpp_breaks[21], const real_T
  hpp_coefs[80], const real_T hspp_breaks[21], const real_T hspp_coefs[80],
  const real_T happ_breaks[21], const real_T happ_coefs[80], const real_T
  hjpp_breaks[21], const real_T hjpp_coefs[80], creal_T *position, creal_T
  *velocity, creal_T *acceleration, creal_T *jerk)
{
  full_loop_B.ip = full_loop_bsearch(hpp_breaks, 0.0) - 1;
  full_loop_B.ip_g = full_loop_bsearch(hspp_breaks, 0.0) - 1;
  full_loop_B.ip_f = full_loop_bsearch(happ_breaks, 0.0) - 1;
  full_loop_B.ip_gg = full_loop_bsearch(hjpp_breaks, 0.0) - 1;
  full_loop_B.l_0 = (((0.0 - hpp_breaks[full_loop_B.ip]) *
                      hpp_coefs[full_loop_B.ip] + hpp_coefs[full_loop_B.ip + 20])
                     * (0.0 - hpp_breaks[full_loop_B.ip]) +
                     hpp_coefs[full_loop_B.ip + 40]) * (0.0 -
    hpp_breaks[full_loop_B.ip]) + hpp_coefs[full_loop_B.ip + 60];
  full_loop_B.l_1 = (((0.0 - hspp_breaks[full_loop_B.ip_g]) *
                      hspp_coefs[full_loop_B.ip_g] + hspp_coefs[full_loop_B.ip_g
                      + 20]) * (0.0 - hspp_breaks[full_loop_B.ip_g]) +
                     hspp_coefs[full_loop_B.ip_g + 40]) * (0.0 -
    hspp_breaks[full_loop_B.ip_g]) + hspp_coefs[full_loop_B.ip_g + 60];
  full_loop_B.l_2 = (((0.0 - happ_breaks[full_loop_B.ip_f]) *
                      happ_coefs[full_loop_B.ip_f] + happ_coefs[full_loop_B.ip_f
                      + 20]) * (0.0 - happ_breaks[full_loop_B.ip_f]) +
                     happ_coefs[full_loop_B.ip_f + 40]) * (0.0 -
    happ_breaks[full_loop_B.ip_f]) + happ_coefs[full_loop_B.ip_f + 60];
  full_loop_B.l_3 = (((0.0 - hjpp_breaks[full_loop_B.ip_gg]) *
                      hjpp_coefs[full_loop_B.ip_gg] +
                      hjpp_coefs[full_loop_B.ip_gg + 20]) * (0.0 -
    hjpp_breaks[full_loop_B.ip_gg]) + hjpp_coefs[full_loop_B.ip_gg + 40]) * (0.0
    - hjpp_breaks[full_loop_B.ip_gg]) + hjpp_coefs[full_loop_B.ip_gg + 60];
  full_loop_B.b_f = full_loop_B.l_0;
  full_loop_B.ip = 0;
  if (full_loop_B.l_0 > hcd[20]) {
    for (full_loop_B.ip_g = 0; full_loop_B.ip_g < 1; full_loop_B.ip_g++) {
      full_loop_B.ip++;
    }
  }

  if (0 <= full_loop_B.ip - 1) {
    full_loop_B.b_f = hcd[20];
  }

  full_loop_B.c_j = full_loop_B.b_f;
  full_loop_B.ip = 0;
  if (full_loop_B.b_f < hcd[0]) {
    for (full_loop_B.ip_g = 0; full_loop_B.ip_g < 1; full_loop_B.ip_g++) {
      full_loop_B.ip++;
    }
  }

  if (0 <= full_loop_B.ip - 1) {
    full_loop_B.c_j = hcd[0];
  }

  full_loop_B.ip = static_cast<int32_T>(full_loop_mapElementsToBins
    (full_loop_B.c_j, hcd, false)) - 1;
  full_loop_B.l_0 = (k1[full_loop_B.ip] - k0[full_loop_B.ip]) /
    hl[full_loop_B.ip];
  full_loop_B.d_g = full_loop_B.l_0;
  full_loop_B.ip_g = 0;
  if (rtIsNaN(full_loop_B.l_0)) {
    for (full_loop_B.ip_f = 0; full_loop_B.ip_f < 1; full_loop_B.ip_f++) {
      full_loop_B.ip_g++;
    }
  }

  if (0 <= full_loop_B.ip_g - 1) {
    full_loop_B.d_g = 0.0;
  }

  full_loop_B.l_l = full_loop_B.c_j - hcd[full_loop_B.ip];
  full_loop_B.f_1_im_tmp = (full_loop_B.d_g / 2.0 * full_loop_B.l_l +
    k0[full_loop_B.ip]) * full_loop_B.l_l + course[full_loop_B.ip];
  if (full_loop_B.f_1_im_tmp == 0.0) {
    full_loop_B.l_0 = std::exp(((full_loop_B.d_g / 2.0 * full_loop_B.l_l +
      k0[full_loop_B.ip]) * full_loop_B.l_l + course[full_loop_B.ip]) * 0.0);
    full_loop_B.f_1_im = 0.0;
    full_loop_B.y_re = std::exp(((full_loop_B.d_g / 2.0 * full_loop_B.l_l +
      k0[full_loop_B.ip]) * full_loop_B.l_l + course[full_loop_B.ip]) * 0.0);
    full_loop_B.r_l = 0.0;
  } else {
    full_loop_B.r_l = std::exp(full_loop_B.f_1_im_tmp * 0.0 / 2.0);
    full_loop_B.l_0 = full_loop_B.r_l * std::cos(full_loop_B.f_1_im_tmp) *
      full_loop_B.r_l;
    full_loop_B.f_1_im = full_loop_B.r_l * std::sin(full_loop_B.f_1_im_tmp) *
      full_loop_B.r_l;
    full_loop_B.r_l = std::exp(((full_loop_B.d_g / 2.0 * full_loop_B.l_l +
      k0[full_loop_B.ip]) * full_loop_B.l_l + course[full_loop_B.ip]) * 0.0 /
      2.0);
    full_loop_B.y_re = full_loop_B.r_l * std::cos(full_loop_B.f_1_im_tmp) *
      full_loop_B.r_l;
    full_loop_B.r_l *= full_loop_B.r_l * std::sin(full_loop_B.f_1_im_tmp);
  }

  full_loop_B.re_k = full_loop_B.d_g * 0.0 * full_loop_B.l_l + k0[full_loop_B.ip]
    * 0.0;
  full_loop_B.im_tmp = full_loop_B.d_g * full_loop_B.l_l + k0[full_loop_B.ip];
  full_loop_B.f_2_re = full_loop_B.y_re * full_loop_B.re_k - full_loop_B.r_l *
    full_loop_B.im_tmp;
  full_loop_B.f_2_im = full_loop_B.y_re * full_loop_B.im_tmp + full_loop_B.r_l *
    full_loop_B.re_k;
  if (full_loop_B.f_1_im_tmp == 0.0) {
    full_loop_B.y_re = std::exp(((full_loop_B.d_g / 2.0 * full_loop_B.l_l +
      k0[full_loop_B.ip]) * full_loop_B.l_l + course[full_loop_B.ip]) * 0.0);
    full_loop_B.r_l = 0.0;
  } else {
    full_loop_B.r_l = std::exp(((full_loop_B.d_g / 2.0 * full_loop_B.l_l +
      k0[full_loop_B.ip]) * full_loop_B.l_l + course[full_loop_B.ip]) * 0.0 /
      2.0);
    full_loop_B.y_re = full_loop_B.r_l * std::cos(full_loop_B.f_1_im_tmp) *
      full_loop_B.r_l;
    full_loop_B.r_l *= full_loop_B.r_l * std::sin(full_loop_B.f_1_im_tmp);
  }

  full_loop_B.dc = full_loop_fresnelg2(full_loop_B.l_l, full_loop_B.d_g,
    k0[full_loop_B.ip], course[full_loop_B.ip]);
  position->re = hip[full_loop_B.ip].re + full_loop_B.dc.re;
  position->im = hip[full_loop_B.ip].im + full_loop_B.dc.im;
  velocity->re = full_loop_B.l_1 * full_loop_B.l_0;
  velocity->im = full_loop_B.l_1 * full_loop_B.f_1_im;
  full_loop_B.l_l = full_loop_B.l_1 * full_loop_B.l_1;
  acceleration->re = full_loop_B.l_l * full_loop_B.f_2_re + full_loop_B.l_0 *
    full_loop_B.l_2;
  acceleration->im = full_loop_B.l_l * full_loop_B.f_2_im + full_loop_B.f_1_im *
    full_loop_B.l_2;
  full_loop_B.re_k = 0.0 * full_loop_B.d_g - full_loop_B.im_tmp *
    full_loop_B.im_tmp;
  full_loop_B.im_tmp = full_loop_rt_powd_snf(full_loop_B.l_1, 3.0);
  jerk->re = (3.0 * full_loop_B.f_2_re * full_loop_B.l_1 * full_loop_B.l_2 +
              full_loop_B.l_0 * full_loop_B.l_3) + (full_loop_B.y_re *
    full_loop_B.re_k - full_loop_B.r_l * full_loop_B.d_g) * full_loop_B.im_tmp;
  jerk->im = (3.0 * full_loop_B.f_2_im * full_loop_B.l_1 * full_loop_B.l_2 +
              full_loop_B.f_1_im * full_loop_B.l_3) + (full_loop_B.y_re *
    full_loop_B.d_g + full_loop_B.r_l * full_loop_B.re_k) * full_loop_B.im_tmp;
}

real_T full_loopModelClass::full_loop_ppval(const real_T pp_breaks[21], const
  real_T pp_coefs[80], real_T x)
{
  real_T v;
  int32_T ip;
  real_T xloc;
  if (rtIsNaN(x)) {
    v = x;
  } else {
    ip = full_loop_bsearch(pp_breaks, x) - 1;
    xloc = x - pp_breaks[ip];
    v = ((xloc * pp_coefs[ip] + pp_coefs[ip + 20]) * xloc + pp_coefs[ip + 40]) *
      xloc + pp_coefs[ip + 60];
  }

  return v;
}

void full_loopModelClass::waypointTrajectory_fetchPositio(const
  waypointTrajectory_full_loop_T *obj, real_T position[3], real_T velocity[3],
  real_T acceleration[3], real_T jerk[3])
{
  for (full_loop_B.i11 = 0; full_loop_B.i11 < 21; full_loop_B.i11++) {
    full_loop_B.dv16[full_loop_B.i11] = 0.017453292519943295 * obj->
      Course[full_loop_B.i11];
  }

  full_loop_getPositionalState(obj->HorizontalCumulativeDistance,
    obj->HorizontalInitialPosition, obj->HorizontalPiecewiseLength,
    obj->HorizontalCurvatureInitial, obj->HorizontalCurvatureFinal,
    full_loop_B.dv16, obj->HorizontalDistancePiecewisePolynomial.breaks,
    obj->HorizontalDistancePiecewisePolynomial.coefs,
    obj->HorizontalSpeedPiecewisePolynomial.breaks,
    obj->HorizontalSpeedPiecewisePolynomial.coefs,
    obj->HorizontalAccelerationPiecewisePolynomial.breaks,
    obj->HorizontalAccelerationPiecewisePolynomial.coefs,
    obj->HorizontalJerkPiecewisePolynomial.breaks,
    obj->HorizontalJerkPiecewisePolynomial.coefs, &full_loop_B.ph,
    &full_loop_B.vh, &full_loop_B.ah, &full_loop_B.jh);
  position[0] = full_loop_B.ph.re;
  position[1] = full_loop_B.ph.im;
  position[2] = full_loop_ppval(obj->VerticalDistancePiecewisePolynomial.breaks,
    obj->VerticalDistancePiecewisePolynomial.coefs, 0.0);
  velocity[0] = full_loop_B.vh.re;
  velocity[1] = full_loop_B.vh.im;
  velocity[2] = full_loop_ppval(obj->VerticalSpeedPiecewisePolynomial.breaks,
    obj->VerticalSpeedPiecewisePolynomial.coefs, 0.0);
  acceleration[0] = full_loop_B.ah.re;
  acceleration[1] = full_loop_B.ah.im;
  acceleration[2] = full_loop_ppval
    (obj->VerticalAccelerationPiecewisePolynomial.breaks,
     obj->VerticalAccelerationPiecewisePolynomial.coefs, 0.0);
  jerk[0] = full_loop_B.jh.re;
  jerk[1] = full_loop_B.jh.im;
  jerk[2] = full_loop_ppval(obj->VerticalJerkPiecewisePolynomial.breaks,
    obj->VerticalJerkPiecewisePolynomial.coefs, 0.0);
}

void full_loopModelClass::full_waypointTrajectory_setPose
  (waypointTrajectory_full_loop_T *obj)
{
  if ((obj->TimeOfArrival[0] <= 0.0) && (0.0 <= obj->TimeOfArrival[20])) {
    waypointTrajectory_fetchPositio(obj, full_loop_B.position,
      full_loop_B.velocity, full_loop_B.acceleration, full_loop_B.jerk);
  } else {
    if (0.0 > obj->TimeOfArrival[20]) {
      obj->IsDoneStatus = true;
    }
  }
}

waypointTrajectory_full_loop_T *full_loopModelClass::
  waypointTrajectory_waypointTraj(waypointTrajectory_full_loop_T *obj, const
  real_T varargin_1[63], const real_T varargin_2[21], real_T varargin_4, const
  real_T varargin_8_a[21], const real_T varargin_8_b[21], const real_T
  varargin_8_c[21], const real_T varargin_8_d[21])
{
  waypointTrajectory_full_loop_T *b_obj;
  obj->ReferenceFrame[0] = 'N';
  obj->ReferenceFrame[1] = 'E';
  obj->ReferenceFrame[2] = 'D';
  obj->isInitialized = 0;
  b_obj = obj;
  waypointTrajectory_setPropertie(obj, varargin_1, varargin_2, varargin_4,
    varargin_8_a, varargin_8_b, varargin_8_c, varargin_8_d);
  waypointTrajectory_setupPositio(obj);
  for (full_loop_B.i_a = 0; full_loop_B.i_a < 21; full_loop_B.i_a++) {
    full_loop_B.q_a[full_loop_B.i_a] = obj->Quaternions.a[full_loop_B.i_a];
  }

  for (full_loop_B.i_a = 0; full_loop_B.i_a < 21; full_loop_B.i_a++) {
    full_loop_B.q_b[full_loop_B.i_a] = obj->Quaternions.b[full_loop_B.i_a];
  }

  for (full_loop_B.i_a = 0; full_loop_B.i_a < 21; full_loop_B.i_a++) {
    full_loop_B.q_c[full_loop_B.i_a] = obj->Quaternions.c[full_loop_B.i_a];
  }

  for (full_loop_B.i_a = 0; full_loop_B.i_a < 21; full_loop_B.i_a++) {
    full_loop_B.q_d[full_loop_B.i_a] = obj->Quaternions.d[full_loop_B.i_a];
  }

  for (full_loop_B.i_a = 0; full_loop_B.i_a < 21; full_loop_B.i_a++) {
    full_loop_B.t[full_loop_B.i_a] = obj->TimeOfArrival[full_loop_B.i_a];
  }

  full_loop_quaternionC2fit(full_loop_B.q_a, full_loop_B.q_b, full_loop_B.q_c,
    full_loop_B.q_d, full_loop_B.t, full_loop_B.h_f, full_loop_B.dtheta,
    full_loop_B.e, full_loop_B.w);
  for (full_loop_B.i_a = 0; full_loop_B.i_a < 20; full_loop_B.i_a++) {
    obj->SegmentTimes[full_loop_B.i_a] = full_loop_B.h_f[full_loop_B.i_a];
  }

  for (full_loop_B.i_a = 0; full_loop_B.i_a < 20; full_loop_B.i_a++) {
    obj->RadianSlewAngles[full_loop_B.i_a] = full_loop_B.dtheta[full_loop_B.i_a];
  }

  for (full_loop_B.i_a = 0; full_loop_B.i_a < 60; full_loop_B.i_a++) {
    obj->AxesOfRotation[full_loop_B.i_a] = full_loop_B.e[full_loop_B.i_a];
  }

  for (full_loop_B.i_a = 0; full_loop_B.i_a < 63; full_loop_B.i_a++) {
    obj->RadianAngularVelocities[full_loop_B.i_a] =
      full_loop_B.w[full_loop_B.i_a];
  }

  waypointTrajectory_setupWaypoin(obj);
  obj->CurrentTime = 0.0;
  full_waypointTrajectory_setPose(obj);
  obj->IsDoneStatus = false;
  return b_obj;
}

void full_loopModelClass::full_loop_getPositionalState_p(const real_T hcd[21],
  const creal_T hip[21], const real_T hl[20], const real_T k0[20], const real_T
  k1[20], const real_T course[21], const real_T hpp_breaks[21], const real_T
  hpp_coefs[80], const real_T hspp_breaks[21], const real_T hspp_coefs[80],
  const real_T happ_breaks[21], const real_T happ_coefs[80], const real_T
  hjpp_breaks[21], const real_T hjpp_coefs[80], real_T t, creal_T *position,
  creal_T *velocity, creal_T *acceleration, creal_T *jerk)
{
  if (rtIsNaN(t)) {
    full_loop_B.l_0_m = t;
    full_loop_B.l_1_i = t;
    full_loop_B.l_2_i = t;
    full_loop_B.xloc = t;
  } else {
    full_loop_B.ip_n = full_loop_bsearch(hpp_breaks, t) - 1;
    full_loop_B.xloc = t - hpp_breaks[full_loop_B.ip_n];
    full_loop_B.l_0_m = ((full_loop_B.xloc * hpp_coefs[full_loop_B.ip_n] +
                          hpp_coefs[full_loop_B.ip_n + 20]) * full_loop_B.xloc +
                         hpp_coefs[full_loop_B.ip_n + 40]) * full_loop_B.xloc +
      hpp_coefs[full_loop_B.ip_n + 60];
    full_loop_B.ip_n = full_loop_bsearch(hspp_breaks, t) - 1;
    full_loop_B.xloc = t - hspp_breaks[full_loop_B.ip_n];
    full_loop_B.l_1_i = ((full_loop_B.xloc * hspp_coefs[full_loop_B.ip_n] +
                          hspp_coefs[full_loop_B.ip_n + 20]) * full_loop_B.xloc
                         + hspp_coefs[full_loop_B.ip_n + 40]) * full_loop_B.xloc
      + hspp_coefs[full_loop_B.ip_n + 60];
    full_loop_B.ip_n = full_loop_bsearch(happ_breaks, t) - 1;
    full_loop_B.xloc = t - happ_breaks[full_loop_B.ip_n];
    full_loop_B.l_2_i = ((full_loop_B.xloc * happ_coefs[full_loop_B.ip_n] +
                          happ_coefs[full_loop_B.ip_n + 20]) * full_loop_B.xloc
                         + happ_coefs[full_loop_B.ip_n + 40]) * full_loop_B.xloc
      + happ_coefs[full_loop_B.ip_n + 60];
    full_loop_B.ip_n = full_loop_bsearch(hjpp_breaks, t) - 1;
    full_loop_B.xloc = t - hjpp_breaks[full_loop_B.ip_n];
    full_loop_B.xloc = ((full_loop_B.xloc * hjpp_coefs[full_loop_B.ip_n] +
                         hjpp_coefs[full_loop_B.ip_n + 20]) * full_loop_B.xloc +
                        hjpp_coefs[full_loop_B.ip_n + 40]) * full_loop_B.xloc +
      hjpp_coefs[full_loop_B.ip_n + 60];
  }

  full_loop_B.b_au = full_loop_B.l_0_m;
  full_loop_B.ip_n = 0;
  if (full_loop_B.l_0_m > hcd[20]) {
    for (full_loop_B.i_p5 = 0; full_loop_B.i_p5 < 1; full_loop_B.i_p5++) {
      full_loop_B.ip_n++;
    }
  }

  if (0 <= full_loop_B.ip_n - 1) {
    full_loop_B.b_au = hcd[20];
  }

  full_loop_B.c_m = full_loop_B.b_au;
  full_loop_B.ip_n = 0;
  if (full_loop_B.b_au < hcd[0]) {
    for (full_loop_B.i_p5 = 0; full_loop_B.i_p5 < 1; full_loop_B.i_p5++) {
      full_loop_B.ip_n++;
    }
  }

  if (0 <= full_loop_B.ip_n - 1) {
    full_loop_B.c_m = hcd[0];
  }

  full_loop_B.ip_n = static_cast<int32_T>(full_loop_mapElementsToBins
    (full_loop_B.c_m, hcd, false)) - 1;
  full_loop_B.l_0_m = (k1[full_loop_B.ip_n] - k0[full_loop_B.ip_n]) /
    hl[full_loop_B.ip_n];
  full_loop_B.d_cec = full_loop_B.l_0_m;
  full_loop_B.i_p5 = 0;
  if (rtIsNaN(full_loop_B.l_0_m)) {
    for (full_loop_B.e_i = 0; full_loop_B.e_i < 1; full_loop_B.e_i++) {
      full_loop_B.i_p5++;
    }
  }

  if (0 <= full_loop_B.i_p5 - 1) {
    full_loop_B.d_cec = 0.0;
  }

  full_loop_B.l_k = full_loop_B.c_m - hcd[full_loop_B.ip_n];
  full_loop_B.f_1_im_tmp_k = (full_loop_B.d_cec / 2.0 * full_loop_B.l_k +
    k0[full_loop_B.ip_n]) * full_loop_B.l_k + course[full_loop_B.ip_n];
  if (full_loop_B.f_1_im_tmp_k == 0.0) {
    full_loop_B.l_0_m = std::exp(((full_loop_B.d_cec / 2.0 * full_loop_B.l_k +
      k0[full_loop_B.ip_n]) * full_loop_B.l_k + course[full_loop_B.ip_n]) * 0.0);
    full_loop_B.f_1_im_n = 0.0;
    full_loop_B.y_re_p = std::exp(((full_loop_B.d_cec / 2.0 * full_loop_B.l_k +
      k0[full_loop_B.ip_n]) * full_loop_B.l_k + course[full_loop_B.ip_n]) * 0.0);
    full_loop_B.r_b = 0.0;
  } else {
    full_loop_B.r_b = std::exp(full_loop_B.f_1_im_tmp_k * 0.0 / 2.0);
    full_loop_B.l_0_m = full_loop_B.r_b * std::cos(full_loop_B.f_1_im_tmp_k) *
      full_loop_B.r_b;
    full_loop_B.f_1_im_n = full_loop_B.r_b * std::sin(full_loop_B.f_1_im_tmp_k) *
      full_loop_B.r_b;
    full_loop_B.r_b = std::exp(((full_loop_B.d_cec / 2.0 * full_loop_B.l_k +
      k0[full_loop_B.ip_n]) * full_loop_B.l_k + course[full_loop_B.ip_n]) * 0.0 /
      2.0);
    full_loop_B.y_re_p = full_loop_B.r_b * std::cos(full_loop_B.f_1_im_tmp_k) *
      full_loop_B.r_b;
    full_loop_B.r_b *= full_loop_B.r_b * std::sin(full_loop_B.f_1_im_tmp_k);
  }

  full_loop_B.re_f = full_loop_B.d_cec * 0.0 * full_loop_B.l_k +
    k0[full_loop_B.ip_n] * 0.0;
  full_loop_B.im_tmp_e = full_loop_B.d_cec * full_loop_B.l_k +
    k0[full_loop_B.ip_n];
  full_loop_B.f_2_re_k = full_loop_B.y_re_p * full_loop_B.re_f - full_loop_B.r_b
    * full_loop_B.im_tmp_e;
  full_loop_B.f_2_im_l = full_loop_B.y_re_p * full_loop_B.im_tmp_e +
    full_loop_B.r_b * full_loop_B.re_f;
  if (full_loop_B.f_1_im_tmp_k == 0.0) {
    full_loop_B.y_re_p = std::exp(((full_loop_B.d_cec / 2.0 * full_loop_B.l_k +
      k0[full_loop_B.ip_n]) * full_loop_B.l_k + course[full_loop_B.ip_n]) * 0.0);
    full_loop_B.r_b = 0.0;
  } else {
    full_loop_B.r_b = std::exp(((full_loop_B.d_cec / 2.0 * full_loop_B.l_k +
      k0[full_loop_B.ip_n]) * full_loop_B.l_k + course[full_loop_B.ip_n]) * 0.0 /
      2.0);
    full_loop_B.y_re_p = full_loop_B.r_b * std::cos(full_loop_B.f_1_im_tmp_k) *
      full_loop_B.r_b;
    full_loop_B.r_b *= full_loop_B.r_b * std::sin(full_loop_B.f_1_im_tmp_k);
  }

  full_loop_B.dc1 = full_loop_fresnelg2(full_loop_B.l_k, full_loop_B.d_cec,
    k0[full_loop_B.ip_n], course[full_loop_B.ip_n]);
  position->re = hip[full_loop_B.ip_n].re + full_loop_B.dc1.re;
  position->im = hip[full_loop_B.ip_n].im + full_loop_B.dc1.im;
  velocity->re = full_loop_B.l_1_i * full_loop_B.l_0_m;
  velocity->im = full_loop_B.l_1_i * full_loop_B.f_1_im_n;
  full_loop_B.l_k = full_loop_B.l_1_i * full_loop_B.l_1_i;
  acceleration->re = full_loop_B.l_k * full_loop_B.f_2_re_k + full_loop_B.l_0_m *
    full_loop_B.l_2_i;
  acceleration->im = full_loop_B.l_k * full_loop_B.f_2_im_l +
    full_loop_B.f_1_im_n * full_loop_B.l_2_i;
  full_loop_B.re_f = 0.0 * full_loop_B.d_cec - full_loop_B.im_tmp_e *
    full_loop_B.im_tmp_e;
  full_loop_B.im_tmp_e = full_loop_rt_powd_snf(full_loop_B.l_1_i, 3.0);
  jerk->re = (3.0 * full_loop_B.f_2_re_k * full_loop_B.l_1_i * full_loop_B.l_2_i
              + full_loop_B.l_0_m * full_loop_B.xloc) + (full_loop_B.y_re_p *
    full_loop_B.re_f - full_loop_B.r_b * full_loop_B.d_cec) *
    full_loop_B.im_tmp_e;
  jerk->im = (3.0 * full_loop_B.f_2_im_l * full_loop_B.l_1_i * full_loop_B.l_2_i
              + full_loop_B.f_1_im_n * full_loop_B.xloc) + (full_loop_B.y_re_p *
    full_loop_B.d_cec + full_loop_B.r_b * full_loop_B.re_f) *
    full_loop_B.im_tmp_e;
}

void full_loopModelClass::waypointTrajectory_fetchPosit_p(const
  waypointTrajectory_full_loop_T *obj, real_T simulationTime, real_T position[3],
  real_T velocity[3], real_T acceleration[3], real_T jerk[3])
{
  for (full_loop_B.i16 = 0; full_loop_B.i16 < 21; full_loop_B.i16++) {
    full_loop_B.dv17[full_loop_B.i16] = 0.017453292519943295 * obj->
      Course[full_loop_B.i16];
  }

  full_loop_getPositionalState_p(obj->HorizontalCumulativeDistance,
    obj->HorizontalInitialPosition, obj->HorizontalPiecewiseLength,
    obj->HorizontalCurvatureInitial, obj->HorizontalCurvatureFinal,
    full_loop_B.dv17, obj->HorizontalDistancePiecewisePolynomial.breaks,
    obj->HorizontalDistancePiecewisePolynomial.coefs,
    obj->HorizontalSpeedPiecewisePolynomial.breaks,
    obj->HorizontalSpeedPiecewisePolynomial.coefs,
    obj->HorizontalAccelerationPiecewisePolynomial.breaks,
    obj->HorizontalAccelerationPiecewisePolynomial.coefs,
    obj->HorizontalJerkPiecewisePolynomial.breaks,
    obj->HorizontalJerkPiecewisePolynomial.coefs, simulationTime,
    &full_loop_B.ph_k, &full_loop_B.vh_f, &full_loop_B.ah_p, &full_loop_B.jh_k);
  position[0] = full_loop_B.ph_k.re;
  position[1] = full_loop_B.ph_k.im;
  position[2] = full_loop_ppval(obj->VerticalDistancePiecewisePolynomial.breaks,
    obj->VerticalDistancePiecewisePolynomial.coefs, simulationTime);
  velocity[0] = full_loop_B.vh_f.re;
  velocity[1] = full_loop_B.vh_f.im;
  velocity[2] = full_loop_ppval(obj->VerticalSpeedPiecewisePolynomial.breaks,
    obj->VerticalSpeedPiecewisePolynomial.coefs, simulationTime);
  acceleration[0] = full_loop_B.ah_p.re;
  acceleration[1] = full_loop_B.ah_p.im;
  acceleration[2] = full_loop_ppval
    (obj->VerticalAccelerationPiecewisePolynomial.breaks,
     obj->VerticalAccelerationPiecewisePolynomial.coefs, simulationTime);
  jerk[0] = full_loop_B.jh_k.re;
  jerk[1] = full_loop_B.jh_k.im;
  jerk[2] = full_loop_ppval(obj->VerticalJerkPiecewisePolynomial.breaks,
    obj->VerticalJerkPiecewisePolynomial.coefs, simulationTime);
}

void full_loopModelClass::full_loop_cross(const real_T a_data[], const int32_T
  a_size[2], const real_T b_data[], real_T c_data[], int32_T c_size[2])
{
  int32_T iStart;
  int32_T i1;
  c_size[0] = a_size[0];
  c_size[1] = 3;
  if (a_size[0] != 0) {
    full_loop_B.stride = a_size[0];
    full_loop_B.iNext = a_size[0] * 3;
    for (iStart = 1; full_loop_B.iNext < 0 ? iStart >= 1 : iStart <= 1; iStart +=
         full_loop_B.iNext) {
      full_loop_B.iEnd = 1 + full_loop_B.stride;
      for (i1 = 1; i1 < full_loop_B.iEnd; i1++) {
        full_loop_B.i2_a = (i1 + full_loop_B.stride) - 1;
        full_loop_B.i3_b = full_loop_B.i2_a + full_loop_B.stride;
        c_data[i1 - 1] = a_data[full_loop_B.i2_a] * b_data[full_loop_B.i3_b] -
          a_data[full_loop_B.i3_b] * b_data[full_loop_B.i2_a];
        full_loop_B.c_data_tmp = a_data[i1 - 1];
        full_loop_B.c_data_tmp_m = b_data[i1 - 1];
        c_data[full_loop_B.i2_a] = full_loop_B.c_data_tmp_m *
          a_data[full_loop_B.i3_b] - full_loop_B.c_data_tmp *
          b_data[full_loop_B.i3_b];
        c_data[full_loop_B.i3_b] = full_loop_B.c_data_tmp *
          b_data[full_loop_B.i2_a] - full_loop_B.c_data_tmp_m *
          a_data[full_loop_B.i2_a];
      }
    }
  }
}

void full_loopModelClass::full_loop_dot(const real_T a_data[], const int32_T
  a_size[2], const real_T b_data[], real_T c_data[], int32_T *c_size)
{
  int32_T ix;
  int32_T iy;
  *c_size = a_size[0];
  full_loop_B.vstride = a_size[0];
  full_loop_B.ic_e = -1;
  full_loop_B.i1_f = 0;
  for (full_loop_B.j_mz = 0; full_loop_B.j_mz < full_loop_B.vstride;
       full_loop_B.j_mz++) {
    full_loop_B.ic_e++;
    full_loop_B.i1_f++;
    ix = full_loop_B.i1_f - 1;
    iy = full_loop_B.i1_f - 1;
    full_loop_B.c_b = a_data[ix] * b_data[iy];
    ix += full_loop_B.vstride;
    iy += full_loop_B.vstride;
    full_loop_B.c_b += a_data[ix] * b_data[iy];
    ix += full_loop_B.vstride;
    iy += full_loop_B.vstride;
    c_data[full_loop_B.ic_e] = a_data[ix] * b_data[iy] + full_loop_B.c_b;
  }
}

void full_loopModelClass::full_loop_bsxmul(const real_T x_data[], const int32_T *
  x_size, const real_T y_data[], const int32_T y_size[2], real_T z_data[],
  int32_T z_size[2])
{
  int32_T k;
  int32_T acoef;
  int32_T bcoef;
  int32_T k_0;
  int32_T csz_idx_0;
  if (y_size[0] == 1) {
    csz_idx_0 = *x_size;
  } else if (*x_size == 1) {
    csz_idx_0 = y_size[0];
  } else if (*x_size == y_size[0]) {
    csz_idx_0 = *x_size;
  } else if (y_size[0] < *x_size) {
    csz_idx_0 = y_size[0];
  } else {
    csz_idx_0 = *x_size;
  }

  z_size[0] = csz_idx_0;
  z_size[1] = 3;
  if (csz_idx_0 != 0) {
    acoef = (*x_size != 1);
    bcoef = (y_size[0] != 1);
    for (k = 0; k < 3; k++) {
      for (k_0 = 0; k_0 < csz_idx_0; k_0++) {
        z_data[k_0 + csz_idx_0 * k] = y_data[bcoef * k_0 + y_size[0] * k] *
          x_data[acoef * k_0];
      }
    }
  }
}

void full_loopModelClass::full_loop_bsxmul_p(const real_T x_data[], const
  int32_T x_size[2], const real_T y_data[], const int32_T y_size[2], real_T
  z_data[], int32_T z_size[2])
{
  int32_T acoef;
  int32_T ia;
  int32_T k;
  int32_T acoef_0;
  int32_T bcoef;
  int32_T k_0;
  int32_T csz_idx_0;
  if (y_size[0] == 1) {
    csz_idx_0 = x_size[0];
  } else if (x_size[0] == 1) {
    csz_idx_0 = y_size[0];
  } else if (x_size[0] == y_size[0]) {
    csz_idx_0 = x_size[0];
  } else if (y_size[0] < x_size[0]) {
    csz_idx_0 = y_size[0];
  } else {
    csz_idx_0 = x_size[0];
  }

  z_size[0] = csz_idx_0;
  z_size[1] = 3;
  if (csz_idx_0 != 0) {
    acoef = (x_size[1] != 1);
    acoef_0 = (x_size[0] != 1);
    bcoef = (y_size[0] != 1);
    for (k = 0; k < 3; k++) {
      ia = acoef * k;
      for (k_0 = 0; k_0 < csz_idx_0; k_0++) {
        z_data[k_0 + csz_idx_0 * k] = x_data[acoef_0 * k_0 + x_size[0] * ia] *
          y_data[bcoef * k_0 + y_size[0] * k];
      }
    }
  }
}

void full_loopModelClass::full_loop_slew3_init(real_T dt, real_T dtheta, const
  real_T e[3], const real_T wi[3], const real_T wf[3], real_T aa[9], real_T bb[9],
  real_T cc[6], real_T dd[3])
{
  if (dtheta > 1.0E-6) {
    full_loop_B.ii_size_idx_0_p = 1;
    full_loop_B.ii_size_idx_1_m = 1;
  } else {
    full_loop_B.ii_size_idx_0_p = 0;
    full_loop_B.ii_size_idx_1_m = 0;
  }

  full_loop_B.bvec[0] = wf[0];
  full_loop_B.bvec[1] = wf[1];
  full_loop_B.bvec[2] = wf[2];
  if ((full_loop_B.ii_size_idx_0_p != 0) && (full_loop_B.ii_size_idx_1_m != 0))
  {
    full_loop_B.e_size_k[0] = 1;
    full_loop_B.e_size_k[1] = 3;
    full_loop_B.e_size_g[0] = 1;
    full_loop_B.e_size_g[1] = 3;
    full_loop_B.e_size_h[0] = 1;
    full_loop_B.e_size_h[1] = 3;
    for (full_loop_B.ii_size_idx_0_p = 0; full_loop_B.ii_size_idx_0_p < 3;
         full_loop_B.ii_size_idx_0_p++) {
      full_loop_B.e_data_my[full_loop_B.ii_size_idx_0_p] =
        e[full_loop_B.ii_size_idx_0_p];
      full_loop_B.wf_data[full_loop_B.ii_size_idx_0_p] =
        wf[full_loop_B.ii_size_idx_0_p];
      full_loop_B.e_data_fi[full_loop_B.ii_size_idx_0_p] =
        e[full_loop_B.ii_size_idx_0_p];
      full_loop_B.wf_data_n[full_loop_B.ii_size_idx_0_p] =
        wf[full_loop_B.ii_size_idx_0_p];
      full_loop_B.e_data_o[full_loop_B.ii_size_idx_0_p] =
        e[full_loop_B.ii_size_idx_0_p];
      full_loop_B.e_data_en[full_loop_B.ii_size_idx_0_p] =
        e[full_loop_B.ii_size_idx_0_p];
    }

    full_loop_cross(full_loop_B.e_data_my, full_loop_B.e_size_k,
                    full_loop_B.wf_data, full_loop_B.bvec2_data,
                    full_loop_B.bvec2_size);
    full_loop_dot(full_loop_B.e_data_fi, full_loop_B.e_size_g,
                  full_loop_B.wf_data_n, &full_loop_B.tmp_data_lo,
                  &full_loop_B.tmp_size_ir);
    full_loop_bsxmul(&full_loop_B.tmp_data_lo, &full_loop_B.tmp_size_ir,
                     full_loop_B.e_data_o, full_loop_B.e_size_h,
                     full_loop_B.e_data_my, full_loop_B.e_size_k);
    full_loop_cross(full_loop_B.bvec2_data, full_loop_B.bvec2_size,
                    full_loop_B.e_data_en, full_loop_B.e_data_o,
                    full_loop_B.e_size_h);
    full_loop_B.tmp_size_ld[0] = 1;
    full_loop_B.tmp_size_ld[1] = 1;
    full_loop_B.tmp_size_o0[0] = 1;
    full_loop_B.tmp_size_o0[1] = 1;
    full_loop_B.tmp_data_lo = 0.5 * std::sin(dtheta) * dtheta / (1.0 - std::cos
      (dtheta));
    full_loop_B.tmp_data_jkk = 0.5 * dtheta;
    full_loop_bsxmul_p(&full_loop_B.tmp_data_lo, full_loop_B.tmp_size_ld,
                       full_loop_B.e_data_o, full_loop_B.e_size_h,
                       full_loop_B.e_data_en, full_loop_B.e_size_g);
    full_loop_bsxmul_p(&full_loop_B.tmp_data_jkk, full_loop_B.tmp_size_o0,
                       full_loop_B.bvec2_data, full_loop_B.bvec2_size,
                       full_loop_B.e_data_o, full_loop_B.e_size_h);
    full_loop_B.loop_ub_ah = full_loop_B.e_size_k[0];
    for (full_loop_B.ii_size_idx_0_p = 0; full_loop_B.ii_size_idx_0_p < 3;
         full_loop_B.ii_size_idx_0_p++) {
      for (full_loop_B.ii_size_idx_1_m = 0; full_loop_B.ii_size_idx_1_m <
           full_loop_B.loop_ub_ah; full_loop_B.ii_size_idx_1_m++) {
        full_loop_B.bvec[full_loop_B.ii_size_idx_0_p] =
          (full_loop_B.e_data_my[full_loop_B.e_size_k[0] *
           full_loop_B.ii_size_idx_0_p + full_loop_B.ii_size_idx_1_m] +
           full_loop_B.e_data_en[full_loop_B.e_size_g[0] *
           full_loop_B.ii_size_idx_0_p + full_loop_B.ii_size_idx_1_m]) +
          full_loop_B.e_data_o[full_loop_B.e_size_h[0] *
          full_loop_B.ii_size_idx_0_p + full_loop_B.ii_size_idx_1_m];
      }
    }
  }

  bb[0] = wi[0];
  aa[6] = e[0] * dtheta;
  bb[6] = full_loop_B.bvec[0];
  aa[0] = wi[0] * dt;
  full_loop_B.aa_tmp = full_loop_B.bvec[0] * dt;
  aa[3] = full_loop_B.aa_tmp - 3.0 * aa[6];
  bb[3] = ((full_loop_B.aa_tmp - 3.0 * aa[6]) * 2.0 + 2.0 * aa[0]) / dt;
  cc[0] = ((2.0 * aa[0] + 2.0 * aa[3]) / dt + 2.0 * wi[0]) / dt;
  cc[3] = (2.0 * full_loop_B.bvec[0] + bb[3]) / dt;
  dd[0] = (cc[0] + cc[3]) / dt;
  bb[1] = wi[1];
  aa[7] = e[1] * dtheta;
  bb[7] = full_loop_B.bvec[1];
  aa[1] = wi[1] * dt;
  full_loop_B.aa_tmp = full_loop_B.bvec[1] * dt;
  aa[4] = full_loop_B.aa_tmp - 3.0 * aa[7];
  bb[4] = ((full_loop_B.aa_tmp - 3.0 * aa[7]) * 2.0 + 2.0 * aa[1]) / dt;
  cc[1] = ((2.0 * aa[1] + 2.0 * aa[4]) / dt + 2.0 * wi[1]) / dt;
  cc[4] = (2.0 * full_loop_B.bvec[1] + bb[4]) / dt;
  dd[1] = (cc[1] + cc[4]) / dt;
  bb[2] = wi[2];
  aa[8] = e[2] * dtheta;
  bb[8] = full_loop_B.bvec[2];
  aa[2] = wi[2] * dt;
  full_loop_B.aa_tmp = full_loop_B.bvec[2] * dt;
  aa[5] = full_loop_B.aa_tmp - 3.0 * aa[8];
  bb[5] = ((full_loop_B.aa_tmp - 3.0 * aa[8]) * 2.0 + 2.0 * aa[2]) / dt;
  cc[2] = ((2.0 * aa[2] + 2.0 * aa[5]) / dt + 2.0 * wi[2]) / dt;
  cc[5] = (2.0 * full_loop_B.bvec[2] + bb[5]) / dt;
  dd[2] = (cc[2] + cc[5]) / dt;
  if (dt <= 0.0) {
    full_loop_B.ii_size_idx_0_p = 1;
    full_loop_B.ii_size_idx_1_m = 1;
  } else {
    full_loop_B.ii_size_idx_0_p = 0;
    full_loop_B.ii_size_idx_1_m = 0;
  }

  full_loop_B.loop_ub_ah = full_loop_B.ii_size_idx_0_p *
    full_loop_B.ii_size_idx_1_m;
  for (full_loop_B.ii_size_idx_0_p = 0; full_loop_B.ii_size_idx_0_p < 3;
       full_loop_B.ii_size_idx_0_p++) {
    for (full_loop_B.ii_size_idx_1_m = 0; full_loop_B.ii_size_idx_1_m < 3;
         full_loop_B.ii_size_idx_1_m++) {
      if (0 <= full_loop_B.loop_ub_ah - 1) {
        full_loop_B.aa_tmp_b = full_loop_B.ii_size_idx_1_m + 3 *
          full_loop_B.ii_size_idx_0_p;
        aa[full_loop_B.aa_tmp_b] = 0.0;
        bb[full_loop_B.aa_tmp_b] = 0.0;
      }
    }

    if (0 <= full_loop_B.loop_ub_ah - 1) {
      dd[full_loop_B.ii_size_idx_0_p] = 0.0;
    }

    for (full_loop_B.ii_size_idx_1_m = 0; full_loop_B.ii_size_idx_1_m <
         full_loop_B.loop_ub_ah; full_loop_B.ii_size_idx_1_m++) {
      cc[full_loop_B.ii_size_idx_0_p] = 0.0;
      cc[full_loop_B.ii_size_idx_0_p + 3] = 0.0;
    }
  }
}

void full_loopModelClass::full_loop_bsxmul_p4(const real_T x[3], real_T y,
  real_T z[3])
{
  z[0] = x[0] * y;
  z[1] = x[1] * y;
  z[2] = x[2] * y;
}

void full_loopModelClass::full_loop_bsxmul_p43(real_T x, const real_T y[3],
  real_T z[3])
{
  z[0] = x * y[0];
  z[1] = x * y[1];
  z[2] = x * y[2];
}

void full_loopModelClass::full_loop_bsxdiv(const real_T x_data[], const int32_T
  x_size[2], const real_T y_data[], const int32_T y_size[2], real_T z_data[],
  int32_T z_size[2])
{
  int32_T bcoef;
  int32_T ib;
  int32_T k;
  int32_T acoef;
  int32_T bcoef_0;
  int32_T k_0;
  int32_T csz_idx_0;
  if (y_size[0] == 1) {
    csz_idx_0 = x_size[0];
  } else if (x_size[0] == 1) {
    csz_idx_0 = y_size[0];
  } else if (x_size[0] == y_size[0]) {
    csz_idx_0 = x_size[0];
  } else if (y_size[0] < x_size[0]) {
    csz_idx_0 = y_size[0];
  } else {
    csz_idx_0 = x_size[0];
  }

  z_size[0] = csz_idx_0;
  z_size[1] = 3;
  if (csz_idx_0 != 0) {
    bcoef = (y_size[1] != 1);
    acoef = (x_size[0] != 1);
    bcoef_0 = (y_size[0] != 1);
    for (k = 0; k < 3; k++) {
      ib = bcoef * k;
      for (k_0 = 0; k_0 < csz_idx_0; k_0++) {
        z_data[k_0 + csz_idx_0 * k] = x_data[acoef * k_0 + x_size[0] * k] /
          y_data[bcoef_0 * k_0 + y_size[0] * ib];
      }
    }
  }
}

void full_loopModelClass::full_loop_sum(const real_T x_data[], const int32_T
  x_size[2], real_T y_data[], int32_T *y_size)
{
  int32_T vstride;
  int32_T xoffset;
  int32_T b_j;
  if (x_size[0] == 0) {
    *y_size = 0;
  } else {
    vstride = x_size[0] - 1;
    *y_size = x_size[0];
    xoffset = ((vstride + 1) << 1) - 1;
    for (b_j = 0; b_j <= vstride; b_j++) {
      y_data[b_j] = x_data[(xoffset + b_j) + 1] + (x_data[(vstride + b_j) + 1] +
        x_data[b_j]);
    }
  }
}

void full_loopModelClass::full_loop_slew3(real_T t, real_T dt, real_T qi_a,
  real_T qi_b, real_T qi_c, real_T qi_d, const real_T a[9], const real_T b[9],
  const real_T c[6], const real_T d[3], real_T *q_a, real_T *q_b, real_T *q_c,
  real_T *q_d, real_T angVel[3], real_T angAcc[3], real_T angJerk[3])
{
  *q_a = 0.0;
  *q_b = 0.0;
  *q_c = 0.0;
  *q_d = 0.0;
  angVel[0] = 0.0;
  angAcc[0] = 0.0;
  angJerk[0] = 0.0;
  angVel[1] = 0.0;
  angAcc[1] = 0.0;
  angJerk[1] = 0.0;
  angVel[2] = 0.0;
  angAcc[2] = 0.0;
  angJerk[2] = 0.0;
  if (!(dt <= 0.0)) {
    full_loop_B.x_ad = t / dt;
    full_loop_B.x2 = (full_loop_B.x_ad - 1.0) * (full_loop_B.x_ad - 1.0);
    full_loop_bsxmul_p4(&a[6], full_loop_B.x_ad, full_loop_B.th1_data);
    full_loop_bsxmul_p43(full_loop_B.x_ad - 1.0, &a[3], full_loop_B.qimag);
    full_loop_B.th3_data[0] = full_loop_B.th1_data[0] + full_loop_B.qimag[0];
    full_loop_B.th3_data[1] = full_loop_B.th1_data[1] + full_loop_B.qimag[1];
    full_loop_B.th3_data[2] = full_loop_B.th1_data[2] + full_loop_B.qimag[2];
    full_loop_bsxmul_p4(full_loop_B.th3_data, full_loop_B.x_ad,
                        full_loop_B.th1_data);
    full_loop_bsxmul_p43(full_loop_B.x2, &a[0], full_loop_B.qimag);
    full_loop_B.th3_data[0] = full_loop_B.th1_data[0] + full_loop_B.qimag[0];
    full_loop_B.th3_data[1] = full_loop_B.th1_data[1] + full_loop_B.qimag[1];
    full_loop_B.th3_data[2] = full_loop_B.th1_data[2] + full_loop_B.qimag[2];
    full_loop_bsxmul_p4(full_loop_B.th3_data, full_loop_B.x_ad, full_loop_B.th0);
    full_loop_bsxmul_p4(&b[6], full_loop_B.x_ad, full_loop_B.th1_data);
    full_loop_bsxmul_p43(full_loop_B.x_ad - 1.0, &b[3], full_loop_B.qimag);
    full_loop_B.th3_data[0] = full_loop_B.th1_data[0] + full_loop_B.qimag[0];
    full_loop_B.th3_data[1] = full_loop_B.th1_data[1] + full_loop_B.qimag[1];
    full_loop_B.th3_data[2] = full_loop_B.th1_data[2] + full_loop_B.qimag[2];
    full_loop_bsxmul_p4(full_loop_B.th3_data, full_loop_B.x_ad, full_loop_B.th1);
    full_loop_bsxmul_p43(full_loop_B.x2, &b[0], full_loop_B.th1_data);
    full_loop_B.th1[0] += full_loop_B.th1_data[0];
    full_loop_B.th1[1] += full_loop_B.th1_data[1];
    full_loop_B.x2 = full_loop_B.th1[2] + full_loop_B.th1_data[2];
    full_loop_B.th1[2] = full_loop_B.x2;
    full_loop_bsxmul_p4(&c[3], full_loop_B.x_ad, full_loop_B.th2);
    full_loop_bsxmul_p43(full_loop_B.x_ad - 1.0, &c[0], full_loop_B.th1_data);
    full_loop_B.scale_b = 1.0;
    full_loop_B.absxk_b = 0.0;
    full_loop_B.t_m = 0.0;
    full_loop_B.b_qd = 0.0;
    full_loop_B.th2[0] += full_loop_B.th1_data[0];
    full_loop_B.th2[1] += full_loop_B.th1_data[1];
    full_loop_B.x_ad = full_loop_B.th2[2] + full_loop_B.th1_data[2];
    full_loop_B.th2[2] = full_loop_B.x_ad;
    full_loop_B.theta = std::sqrt((full_loop_rt_powd_snf(full_loop_B.th0[0], 2.0)
      + full_loop_rt_powd_snf(full_loop_B.th0[1], 2.0)) + full_loop_rt_powd_snf
      (full_loop_B.th0[2], 2.0));
    full_loop_B.st = std::sin(full_loop_B.theta / 2.0);
    if (full_loop_B.theta != 0.0) {
      full_loop_B.scale_b = std::cos(full_loop_B.theta / 2.0);
      full_loop_B.absxk_b = full_loop_B.th0[0] / full_loop_B.theta *
        full_loop_B.st;
      full_loop_B.t_m = full_loop_B.th0[1] / full_loop_B.theta * full_loop_B.st;
      full_loop_B.b_qd = full_loop_B.th0[2] / full_loop_B.theta * full_loop_B.st;
    }

    *q_a = ((qi_a * full_loop_B.scale_b - qi_b * full_loop_B.absxk_b) - qi_c *
            full_loop_B.t_m) - qi_d * full_loop_B.b_qd;
    *q_b = ((qi_a * full_loop_B.absxk_b + qi_b * full_loop_B.scale_b) + qi_c *
            full_loop_B.b_qd) - qi_d * full_loop_B.t_m;
    *q_c = ((qi_a * full_loop_B.t_m - qi_b * full_loop_B.b_qd) + qi_c *
            full_loop_B.scale_b) + qi_d * full_loop_B.absxk_b;
    *q_d = ((qi_a * full_loop_B.b_qd + qi_b * full_loop_B.t_m) - qi_c *
            full_loop_B.absxk_b) + qi_d * full_loop_B.scale_b;
    full_loop_B.scale_b = 3.3121686421112381E-170;
    full_loop_B.absxk_b = std::abs(full_loop_B.th0[0]);
    if (full_loop_B.absxk_b > 3.3121686421112381E-170) {
      full_loop_B.b_qd = 1.0;
      full_loop_B.scale_b = full_loop_B.absxk_b;
    } else {
      full_loop_B.t_m = full_loop_B.absxk_b / 3.3121686421112381E-170;
      full_loop_B.b_qd = full_loop_B.t_m * full_loop_B.t_m;
    }

    full_loop_B.absxk_b = std::abs(full_loop_B.th0[1]);
    if (full_loop_B.absxk_b > full_loop_B.scale_b) {
      full_loop_B.t_m = full_loop_B.scale_b / full_loop_B.absxk_b;
      full_loop_B.b_qd = full_loop_B.b_qd * full_loop_B.t_m * full_loop_B.t_m +
        1.0;
      full_loop_B.scale_b = full_loop_B.absxk_b;
    } else {
      full_loop_B.t_m = full_loop_B.absxk_b / full_loop_B.scale_b;
      full_loop_B.b_qd += full_loop_B.t_m * full_loop_B.t_m;
    }

    full_loop_B.absxk_b = std::abs(full_loop_B.th0[2]);
    if (full_loop_B.absxk_b > full_loop_B.scale_b) {
      full_loop_B.t_m = full_loop_B.scale_b / full_loop_B.absxk_b;
      full_loop_B.b_qd = full_loop_B.b_qd * full_loop_B.t_m * full_loop_B.t_m +
        1.0;
      full_loop_B.scale_b = full_loop_B.absxk_b;
    } else {
      full_loop_B.t_m = full_loop_B.absxk_b / full_loop_B.scale_b;
      full_loop_B.b_qd += full_loop_B.t_m * full_loop_B.t_m;
    }

    full_loop_B.b_qd = full_loop_B.scale_b * std::sqrt(full_loop_B.b_qd);
    full_loop_B.qimag[0] = full_loop_B.th0[0] / full_loop_B.b_qd;
    full_loop_B.qimag[1] = full_loop_B.th0[1] / full_loop_B.b_qd;
    full_loop_B.qimag[2] = full_loop_B.th0[2] / full_loop_B.b_qd;
    if (full_loop_B.b_qd <= 0.0) {
      full_loop_B.ii_size_idx_0_b = 1;
      full_loop_B.ii_size_idx_1_h = 1;
    } else {
      full_loop_B.ii_size_idx_0_b = 0;
      full_loop_B.ii_size_idx_1_h = 0;
    }

    if ((full_loop_B.ii_size_idx_0_b == 0) || (full_loop_B.ii_size_idx_1_h == 0))
    {
      full_loop_B.ii_size_idx_1_h = 0;
    } else {
      full_loop_B.ii_size_idx_1_h = 1;
    }

    for (full_loop_B.ii_size_idx_0_b = 0; full_loop_B.ii_size_idx_0_b < 3;
         full_loop_B.ii_size_idx_0_b++) {
      if (0 <= full_loop_B.ii_size_idx_1_h - 1) {
        full_loop_B.qimag[full_loop_B.ii_size_idx_0_b] = 0.0;
      }

      angVel[full_loop_B.ii_size_idx_0_b] =
        full_loop_B.th1[full_loop_B.ii_size_idx_0_b];
      angAcc[full_loop_B.ii_size_idx_0_b] =
        full_loop_B.th2[full_loop_B.ii_size_idx_0_b];
    }

    angJerk[0] = d[0] - (full_loop_B.th1[1] * full_loop_B.x_ad - full_loop_B.x2 *
                         full_loop_B.th2[1]) * 0.5;
    angJerk[1] = d[1] - (full_loop_B.x2 * full_loop_B.th2[0] - full_loop_B.th1[0]
                         * full_loop_B.x_ad) * 0.5;
    angJerk[2] = d[2] - (full_loop_B.th1[0] * full_loop_B.th2[1] -
                         full_loop_B.th1[1] * full_loop_B.th2[0]) * 0.5;
    if (full_loop_B.b_qd > 1.0E-6) {
      full_loop_B.ii_size_idx_0_b = 1;
      full_loop_B.ii_size_idx_1_h = 1;
    } else {
      full_loop_B.ii_size_idx_0_b = 0;
      full_loop_B.ii_size_idx_1_h = 0;
    }

    if ((full_loop_B.ii_size_idx_0_b != 0) && (full_loop_B.ii_size_idx_1_h != 0))
    {
      full_loop_B.ang_size[0] = 1;
      full_loop_B.ang_size[1] = 1;
      full_loop_B.ang_data = full_loop_B.b_qd;
      full_loop_B.th1_size[0] = 1;
      full_loop_B.th1_size[1] = 3;
      full_loop_B.u_size[0] = 1;
      full_loop_B.u_size[1] = 3;
      for (full_loop_B.ii_size_idx_0_b = 0; full_loop_B.ii_size_idx_0_b < 3;
           full_loop_B.ii_size_idx_0_b++) {
        full_loop_B.th1_data[full_loop_B.ii_size_idx_0_b] =
          full_loop_B.th1[full_loop_B.ii_size_idx_0_b];
        full_loop_B.th0[full_loop_B.ii_size_idx_0_b] =
          full_loop_B.th2[full_loop_B.ii_size_idx_0_b];
        full_loop_B.th3_data[full_loop_B.ii_size_idx_0_b] =
          d[full_loop_B.ii_size_idx_0_b];
        full_loop_B.u_data_c[full_loop_B.ii_size_idx_0_b] =
          full_loop_B.qimag[full_loop_B.ii_size_idx_0_b];
      }

      full_loop_B.ca_data = full_loop_B.b_qd;
      full_loop_B.sa_size[0] = 1;
      full_loop_B.sa_size[1] = 1;
      full_loop_B.sa_data = full_loop_B.b_qd;
      for (full_loop_B.ii_size_idx_0_b = 0; full_loop_B.ii_size_idx_0_b < 1;
           full_loop_B.ii_size_idx_0_b++) {
        full_loop_B.ca_data = std::cos(full_loop_B.ca_data);
      }

      for (full_loop_B.ii_size_idx_0_b = 0; full_loop_B.ii_size_idx_0_b < 1;
           full_loop_B.ii_size_idx_0_b++) {
        full_loop_B.sa_data = std::sin(full_loop_B.sa_data);
      }

      full_loop_cross(full_loop_B.u_data_c, full_loop_B.u_size,
                      full_loop_B.th1_data, full_loop_B.tmp_data_gr,
                      full_loop_B.tmp_size_hw);
      full_loop_bsxdiv(full_loop_B.tmp_data_gr, full_loop_B.tmp_size_hw,
                       &full_loop_B.ang_data, full_loop_B.ang_size,
                       full_loop_B.w_data, full_loop_B.w_size);
      full_loop_cross(full_loop_B.w_data, full_loop_B.w_size,
                      full_loop_B.u_data_c, full_loop_B.udot_data,
                      full_loop_B.udot_size);
      full_loop_dot(full_loop_B.u_data_c, full_loop_B.u_size,
                    full_loop_B.th1_data, &full_loop_B.thd1_tmp_data,
                    &full_loop_B.thd1_tmp_size);
      full_loop_bsxmul(&full_loop_B.thd1_tmp_data, &full_loop_B.thd1_tmp_size,
                       full_loop_B.u_data_c, full_loop_B.u_size,
                       full_loop_B.qimag, full_loop_B.e_tmp_size);
      full_loop_bsxmul_p(&full_loop_B.sa_data, full_loop_B.sa_size,
                         full_loop_B.udot_data, full_loop_B.udot_size,
                         full_loop_B.th1, full_loop_B.e_size);
      full_loop_B.tmp_size_nw[0] = 1;
      full_loop_B.tmp_size_nw[1] = 1;
      full_loop_B.tmp_data_mc = 1.0 - full_loop_B.ca_data;
      full_loop_bsxmul_p(&full_loop_B.tmp_data_mc, full_loop_B.tmp_size_nw,
                         full_loop_B.w_data, full_loop_B.w_size,
                         full_loop_B.tmp_data_gr, full_loop_B.tmp_size_hw);
      full_loop_B.e_size[0] = full_loop_B.e_tmp_size[0];
      full_loop_B.e_size[1] = 3;
      full_loop_B.loop_ub_tmp_bk = full_loop_B.e_tmp_size[0] *
        full_loop_B.e_tmp_size[1] - 1;
      for (full_loop_B.ii_size_idx_0_b = 0; full_loop_B.ii_size_idx_0_b <=
           full_loop_B.loop_ub_tmp_bk; full_loop_B.ii_size_idx_0_b++) {
        full_loop_B.th1[full_loop_B.ii_size_idx_0_b] =
          (full_loop_B.qimag[full_loop_B.ii_size_idx_0_b] +
           full_loop_B.th1[full_loop_B.ii_size_idx_0_b]) -
          full_loop_B.tmp_data_gr[full_loop_B.ii_size_idx_0_b];
      }

      full_loop_dot(full_loop_B.u_data_c, full_loop_B.u_size, full_loop_B.th0,
                    &full_loop_B.thd2_tmp_data, &full_loop_B.thd2_tmp_size);
      full_loop_dot(full_loop_B.udot_data, full_loop_B.udot_size,
                    full_loop_B.th1_data, &full_loop_B.thd2_data,
                    &full_loop_B.thd2_size);
      full_loop_B.ii_size_idx_1_h = full_loop_B.thd2_size;
      for (full_loop_B.ii_size_idx_0_b = 0; full_loop_B.ii_size_idx_0_b <
           full_loop_B.ii_size_idx_1_h; full_loop_B.ii_size_idx_0_b++) {
        full_loop_B.thd2_data += full_loop_B.thd2_tmp_data;
      }

      full_loop_cross(full_loop_B.u_data_c, full_loop_B.u_size, full_loop_B.th0,
                      full_loop_B.tmp_data_gr, full_loop_B.tmp_size_hw);
      full_loop_B.tmp_size_a = full_loop_B.thd1_tmp_size;
      full_loop_B.ii_size_idx_1_h = full_loop_B.thd1_tmp_size;
      for (full_loop_B.ii_size_idx_0_b = 0; full_loop_B.ii_size_idx_0_b <
           full_loop_B.ii_size_idx_1_h; full_loop_B.ii_size_idx_0_b++) {
        full_loop_B.tmp_data_mc = 2.0 * full_loop_B.thd1_tmp_data;
      }

      full_loop_bsxmul(&full_loop_B.tmp_data_mc, &full_loop_B.tmp_size_a,
                       full_loop_B.w_data, full_loop_B.w_size,
                       full_loop_B.tmp_data_c5, full_loop_B.tmp_size_nw);
      full_loop_B.tmp_size_b[0] = full_loop_B.tmp_size_hw[0];
      full_loop_B.tmp_size_b[1] = 3;
      full_loop_B.ii_size_idx_1_h = full_loop_B.tmp_size_hw[0] *
        full_loop_B.tmp_size_hw[1];
      for (full_loop_B.ii_size_idx_0_b = 0; full_loop_B.ii_size_idx_0_b <
           full_loop_B.ii_size_idx_1_h; full_loop_B.ii_size_idx_0_b++) {
        full_loop_B.tmp_data_e[full_loop_B.ii_size_idx_0_b] =
          full_loop_B.tmp_data_gr[full_loop_B.ii_size_idx_0_b] -
          full_loop_B.tmp_data_c5[full_loop_B.ii_size_idx_0_b];
      }

      full_loop_bsxdiv(full_loop_B.tmp_data_e, full_loop_B.tmp_size_b,
                       &full_loop_B.ang_data, full_loop_B.ang_size,
                       full_loop_B.th2, full_loop_B.wd1_size);
      full_loop_cross(full_loop_B.th2, full_loop_B.wd1_size,
                      full_loop_B.u_data_c, full_loop_B.wd1xu_data,
                      full_loop_B.wd1xu_size);
      for (full_loop_B.ii_size_idx_0_b = 0; full_loop_B.ii_size_idx_0_b <=
           full_loop_B.loop_ub_tmp_bk; full_loop_B.ii_size_idx_0_b++) {
        full_loop_B.temp0_data[full_loop_B.ii_size_idx_0_b] =
          full_loop_B.qimag[full_loop_B.ii_size_idx_0_b] -
          full_loop_B.w_data[full_loop_B.ii_size_idx_0_b];
      }

      full_loop_bsxmul(&full_loop_B.thd2_data, &full_loop_B.thd2_size,
                       full_loop_B.u_data_c, full_loop_B.u_size,
                       full_loop_B.qimag, full_loop_B.e_tmp_size);
      full_loop_bsxmul(&full_loop_B.thd1_tmp_data, &full_loop_B.thd1_tmp_size,
                       full_loop_B.udot_data, full_loop_B.udot_size,
                       full_loop_B.f_tmp_data, full_loop_B.tmp_size_hw);
      full_loop_bsxmul_p(&full_loop_B.sa_data, full_loop_B.sa_size,
                         full_loop_B.wd1xu_data, full_loop_B.wd1xu_size,
                         full_loop_B.f_data_l, full_loop_B.f_size_p);
      full_loop_B.tmp_size_mt[0] = 1;
      full_loop_B.tmp_size_mt[1] = 1;
      full_loop_B.tmp_data_mc = 1.0 - full_loop_B.ca_data;
      full_loop_bsxmul_p(&full_loop_B.tmp_data_mc, full_loop_B.tmp_size_mt,
                         full_loop_B.th2, full_loop_B.wd1_size,
                         full_loop_B.tmp_data_gr, full_loop_B.tmp_size_hw);
      full_loop_cross(full_loop_B.th1, full_loop_B.e_size,
                      full_loop_B.temp0_data, full_loop_B.tmp_data_c5,
                      full_loop_B.tmp_size_nw);
      full_loop_B.f_size_p[0] = full_loop_B.e_tmp_size[0];
      full_loop_B.f_size_p[1] = 3;
      full_loop_B.ii_size_idx_1_h = full_loop_B.e_tmp_size[0] *
        full_loop_B.e_tmp_size[1] - 1;
      for (full_loop_B.ii_size_idx_0_b = 0; full_loop_B.ii_size_idx_0_b <=
           full_loop_B.ii_size_idx_1_h; full_loop_B.ii_size_idx_0_b++) {
        full_loop_B.f_data_l[full_loop_B.ii_size_idx_0_b] =
          (((full_loop_B.qimag[full_loop_B.ii_size_idx_0_b] +
             full_loop_B.f_data_l[full_loop_B.ii_size_idx_0_b]) -
            full_loop_B.tmp_data_gr[full_loop_B.ii_size_idx_0_b]) +
           full_loop_B.f_tmp_data[full_loop_B.ii_size_idx_0_b]) +
          full_loop_B.tmp_data_c5[full_loop_B.ii_size_idx_0_b];
      }

      full_loop_B.w_size_k[0] = full_loop_B.w_size[0];
      full_loop_B.w_size_k[1] = 3;
      full_loop_B.ii_size_idx_1_h = full_loop_B.w_size[0] * full_loop_B.w_size[1];
      for (full_loop_B.ii_size_idx_0_b = 0; full_loop_B.ii_size_idx_0_b <
           full_loop_B.ii_size_idx_1_h; full_loop_B.ii_size_idx_0_b++) {
        full_loop_B.tmp_data_gr[full_loop_B.ii_size_idx_0_b] =
          full_loop_B.w_data[full_loop_B.ii_size_idx_0_b] *
          full_loop_B.w_data[full_loop_B.ii_size_idx_0_b];
      }

      full_loop_sum(full_loop_B.tmp_data_gr, full_loop_B.w_size_k,
                    &full_loop_B.w2_data, &full_loop_B.w2_size);
      full_loop_cross(full_loop_B.th1_data, full_loop_B.th1_size,
                      full_loop_B.th0, full_loop_B.tmp_data_gr,
                      full_loop_B.tmp_size_hw);
      full_loop_bsxdiv(full_loop_B.tmp_data_gr, full_loop_B.tmp_size_hw,
                       &full_loop_B.ang_data, full_loop_B.ang_size,
                       full_loop_B.tmp_data_c5, full_loop_B.tmp_size_nw);
      full_loop_cross(full_loop_B.u_data_c, full_loop_B.u_size,
                      full_loop_B.th3_data, full_loop_B.tmp_data_gr,
                      full_loop_B.tmp_size_hw);
      full_loop_B.th1_size_b[0] = 1;
      full_loop_B.th1_size_b[1] = 3;
      for (full_loop_B.ii_size_idx_0_b = 0; full_loop_B.ii_size_idx_0_b < 3;
           full_loop_B.ii_size_idx_0_b++) {
        full_loop_B.tmp_data_e[full_loop_B.ii_size_idx_0_b] =
          full_loop_B.th1_data[full_loop_B.ii_size_idx_0_b] *
          full_loop_B.th1_data[full_loop_B.ii_size_idx_0_b];
      }

      full_loop_sum(full_loop_B.tmp_data_e, full_loop_B.th1_size_b,
                    &full_loop_B.tmp_data_mc, &full_loop_B.tmp_size_a);
      full_loop_B.tmp_size_al = full_loop_B.tmp_size_a;
      full_loop_B.ii_size_idx_1_h = full_loop_B.tmp_size_a;
      for (full_loop_B.ii_size_idx_0_b = 0; full_loop_B.ii_size_idx_0_b <
           full_loop_B.ii_size_idx_1_h; full_loop_B.ii_size_idx_0_b++) {
        full_loop_B.tmp_data_kw = (full_loop_B.tmp_data_mc / full_loop_B.b_qd +
          full_loop_B.thd2_tmp_data) * 2.0;
      }

      full_loop_bsxmul(&full_loop_B.tmp_data_kw, &full_loop_B.tmp_size_al,
                       full_loop_B.w_data, full_loop_B.w_size,
                       full_loop_B.tmp_data_e, full_loop_B.tmp_size_b);
      full_loop_B.tmp_size_ac = full_loop_B.thd1_tmp_size;
      full_loop_B.ii_size_idx_1_h = full_loop_B.thd1_tmp_size;
      for (full_loop_B.ii_size_idx_0_b = 0; full_loop_B.ii_size_idx_0_b <
           full_loop_B.ii_size_idx_1_h; full_loop_B.ii_size_idx_0_b++) {
        full_loop_B.tmp_data_mc = 4.0 * full_loop_B.thd1_tmp_data;
      }

      full_loop_bsxmul(&full_loop_B.tmp_data_mc, &full_loop_B.tmp_size_ac,
                       full_loop_B.th2, full_loop_B.wd1_size,
                       full_loop_B.tmp_data_ly, full_loop_B.tmp_size_mt);
      full_loop_B.tmp_size_l[0] = full_loop_B.tmp_size_nw[0];
      full_loop_B.tmp_size_l[1] = 3;
      full_loop_B.ii_size_idx_1_h = full_loop_B.tmp_size_nw[0] *
        full_loop_B.tmp_size_nw[1];
      for (full_loop_B.ii_size_idx_0_b = 0; full_loop_B.ii_size_idx_0_b <
           full_loop_B.ii_size_idx_1_h; full_loop_B.ii_size_idx_0_b++) {
        full_loop_B.tmp_data_dt[full_loop_B.ii_size_idx_0_b] =
          ((full_loop_B.tmp_data_c5[full_loop_B.ii_size_idx_0_b] +
            full_loop_B.tmp_data_gr[full_loop_B.ii_size_idx_0_b]) -
           full_loop_B.tmp_data_e[full_loop_B.ii_size_idx_0_b]) -
          full_loop_B.tmp_data_ly[full_loop_B.ii_size_idx_0_b];
      }

      full_loop_bsxdiv(full_loop_B.tmp_data_dt, full_loop_B.tmp_size_l,
                       &full_loop_B.ang_data, full_loop_B.ang_size,
                       full_loop_B.wd2_data, full_loop_B.w_size_k);
      full_loop_B.ii_size_idx_1_h = full_loop_B.e_size[0];
      full_loop_B.loop_ub_tmp_bk = full_loop_B.e_tmp_size[0];
      for (full_loop_B.ii_size_idx_0_b = 0; full_loop_B.ii_size_idx_0_b < 3;
           full_loop_B.ii_size_idx_0_b++) {
        for (full_loop_B.i17 = 0; full_loop_B.i17 < full_loop_B.ii_size_idx_1_h;
             full_loop_B.i17++) {
          angVel[full_loop_B.ii_size_idx_0_b] =
            full_loop_B.th1[full_loop_B.e_size[0] * full_loop_B.ii_size_idx_0_b
            + full_loop_B.i17];
        }

        for (full_loop_B.i17 = 0; full_loop_B.i17 < full_loop_B.loop_ub_tmp_bk;
             full_loop_B.i17++) {
          angAcc[full_loop_B.ii_size_idx_0_b] =
            full_loop_B.f_data_l[full_loop_B.f_size_p[0] *
            full_loop_B.ii_size_idx_0_b + full_loop_B.i17];
        }
      }

      full_loop_dot(full_loop_B.wd1xu_data, full_loop_B.wd1xu_size,
                    full_loop_B.th1_data, &full_loop_B.tmp_data_mc,
                    &full_loop_B.tmp_size_a);
      full_loop_dot(full_loop_B.udot_data, full_loop_B.udot_size,
                    full_loop_B.th0, &full_loop_B.thd2_tmp_data,
                    &full_loop_B.thd2_tmp_size);
      full_loop_dot(full_loop_B.u_data_c, full_loop_B.u_size,
                    full_loop_B.th3_data, &full_loop_B.tmp_data_kw,
                    &full_loop_B.tmp_size_al);
      full_loop_B.tmp_size_ldr = full_loop_B.tmp_size_a;
      full_loop_B.ii_size_idx_1_h = full_loop_B.tmp_size_a;
      for (full_loop_B.ii_size_idx_0_b = 0; full_loop_B.ii_size_idx_0_b <
           full_loop_B.ii_size_idx_1_h; full_loop_B.ii_size_idx_0_b++) {
        full_loop_B.ang_data = ((full_loop_B.tmp_data_mc - full_loop_B.w2_data *
          full_loop_B.thd1_tmp_data) + 2.0 * full_loop_B.thd2_tmp_data) +
          full_loop_B.tmp_data_kw;
      }

      full_loop_bsxmul(&full_loop_B.ang_data, &full_loop_B.tmp_size_ldr,
                       full_loop_B.u_data_c, full_loop_B.u_size,
                       full_loop_B.tmp_data_gr, full_loop_B.tmp_size_hw);
      full_loop_cross(full_loop_B.wd2_data, full_loop_B.w_size_k,
                      full_loop_B.u_data_c, full_loop_B.tmp_data_c5,
                      full_loop_B.tmp_size_nw);
      full_loop_bsxmul_p(&full_loop_B.sa_data, full_loop_B.sa_size,
                         full_loop_B.tmp_data_c5, full_loop_B.tmp_size_nw,
                         full_loop_B.tmp_data_e, full_loop_B.tmp_size_b);
      full_loop_B.tmp_size_g[0] = 1;
      full_loop_B.tmp_size_g[1] = 1;
      full_loop_B.tmp_data_mc = 1.0 - full_loop_B.ca_data;
      full_loop_bsxmul_p(&full_loop_B.tmp_data_mc, full_loop_B.tmp_size_g,
                         full_loop_B.wd2_data, full_loop_B.w_size_k,
                         full_loop_B.tmp_data_c5, full_loop_B.tmp_size_nw);
      full_loop_B.tmp_size_i4 = full_loop_B.thd2_size;
      full_loop_B.ii_size_idx_1_h = full_loop_B.thd2_size;
      for (full_loop_B.ii_size_idx_0_b = 0; full_loop_B.ii_size_idx_0_b <
           full_loop_B.ii_size_idx_1_h; full_loop_B.ii_size_idx_0_b++) {
        full_loop_B.tmp_data_mc = 2.0 * full_loop_B.thd2_data;
      }

      full_loop_bsxmul(&full_loop_B.tmp_data_mc, &full_loop_B.tmp_size_i4,
                       full_loop_B.udot_data, full_loop_B.udot_size,
                       full_loop_B.tmp_data_ly, full_loop_B.tmp_size_mt);
      full_loop_B.tmp_size_g2[0] = 1;
      full_loop_B.tmp_size_g2[1] = 1;
      full_loop_B.tmp_data_mc = full_loop_B.ca_data + 1.0;
      full_loop_bsxmul_p(&full_loop_B.tmp_data_mc, full_loop_B.tmp_size_g2,
                         full_loop_B.wd1xu_data, full_loop_B.wd1xu_size,
                         full_loop_B.th3_data, full_loop_B.ang_size);
      full_loop_bsxmul(&full_loop_B.w2_data, &full_loop_B.w2_size,
                       full_loop_B.u_data_c, full_loop_B.u_size,
                       full_loop_B.th1_data, full_loop_B.th1_size);
      full_loop_bsxmul_p(&full_loop_B.sa_data, full_loop_B.sa_size,
                         full_loop_B.th2, full_loop_B.wd1_size, full_loop_B.th0,
                         full_loop_B.wd1xu_size);
      full_loop_B.th3_size[0] = full_loop_B.ang_size[0];
      full_loop_B.th3_size[1] = 3;
      full_loop_B.ii_size_idx_1_h = full_loop_B.ang_size[0] *
        full_loop_B.ang_size[1];
      for (full_loop_B.ii_size_idx_0_b = 0; full_loop_B.ii_size_idx_0_b <
           full_loop_B.ii_size_idx_1_h; full_loop_B.ii_size_idx_0_b++) {
        full_loop_B.udot_data[full_loop_B.ii_size_idx_0_b] =
          (full_loop_B.th3_data[full_loop_B.ii_size_idx_0_b] -
           full_loop_B.th1_data[full_loop_B.ii_size_idx_0_b]) -
          full_loop_B.th0[full_loop_B.ii_size_idx_0_b];
      }

      full_loop_bsxmul(&full_loop_B.thd1_tmp_data, &full_loop_B.thd1_tmp_size,
                       full_loop_B.udot_data, full_loop_B.th3_size,
                       full_loop_B.th3_data, full_loop_B.ang_size);
      full_loop_dot(full_loop_B.w_data, full_loop_B.w_size, full_loop_B.th2,
                    &full_loop_B.tmp_data_mc, &full_loop_B.tmp_size_a);
      full_loop_B.tmp_size_na = full_loop_B.tmp_size_a;
      full_loop_B.ii_size_idx_1_h = full_loop_B.tmp_size_a;
      for (full_loop_B.ii_size_idx_0_b = 0; full_loop_B.ii_size_idx_0_b <
           full_loop_B.ii_size_idx_1_h; full_loop_B.ii_size_idx_0_b++) {
        full_loop_B.tmp_data_kw = full_loop_B.tmp_data_mc * full_loop_B.sa_data;
      }

      full_loop_bsxmul(&full_loop_B.tmp_data_kw, &full_loop_B.tmp_size_na,
                       full_loop_B.u_data_c, full_loop_B.u_size,
                       full_loop_B.th1_data, full_loop_B.th1_size);
      full_loop_B.ii_size_idx_1_h = full_loop_B.e_tmp_size[0] *
        full_loop_B.e_tmp_size[1];
      for (full_loop_B.ii_size_idx_0_b = 0; full_loop_B.ii_size_idx_0_b <
           full_loop_B.ii_size_idx_1_h; full_loop_B.ii_size_idx_0_b++) {
        full_loop_B.u_data_c[full_loop_B.ii_size_idx_0_b] =
          (full_loop_B.qimag[full_loop_B.ii_size_idx_0_b] +
           full_loop_B.f_tmp_data[full_loop_B.ii_size_idx_0_b]) -
          full_loop_B.th2[full_loop_B.ii_size_idx_0_b];
      }

      full_loop_cross(full_loop_B.th1, full_loop_B.e_size, full_loop_B.u_data_c,
                      full_loop_B.th0, full_loop_B.wd1xu_size);
      full_loop_cross(full_loop_B.f_data_l, full_loop_B.f_size_p,
                      full_loop_B.temp0_data, full_loop_B.wd2_data,
                      full_loop_B.w_size_k);
      full_loop_B.ii_size_idx_1_h = full_loop_B.tmp_size_hw[0];
      for (full_loop_B.ii_size_idx_0_b = 0; full_loop_B.ii_size_idx_0_b < 3;
           full_loop_B.ii_size_idx_0_b++) {
        for (full_loop_B.i17 = 0; full_loop_B.i17 < full_loop_B.ii_size_idx_1_h;
             full_loop_B.i17++) {
          angJerk[full_loop_B.ii_size_idx_0_b] =
            ((((((full_loop_B.tmp_data_gr[full_loop_B.tmp_size_hw[0] *
                  full_loop_B.ii_size_idx_0_b + full_loop_B.i17] +
                  full_loop_B.tmp_data_e[full_loop_B.tmp_size_b[0] *
                  full_loop_B.ii_size_idx_0_b + full_loop_B.i17]) -
                 full_loop_B.tmp_data_c5[full_loop_B.tmp_size_nw[0] *
                 full_loop_B.ii_size_idx_0_b + full_loop_B.i17]) +
                full_loop_B.tmp_data_ly[full_loop_B.tmp_size_mt[0] *
                full_loop_B.ii_size_idx_0_b + full_loop_B.i17]) +
               full_loop_B.th3_data[full_loop_B.ang_size[0] *
               full_loop_B.ii_size_idx_0_b + full_loop_B.i17]) -
              full_loop_B.th1_data[full_loop_B.th1_size[0] *
              full_loop_B.ii_size_idx_0_b + full_loop_B.i17]) +
             full_loop_B.th0[full_loop_B.wd1xu_size[0] *
             full_loop_B.ii_size_idx_0_b + full_loop_B.i17]) +
            full_loop_B.wd2_data[full_loop_B.w_size_k[0] *
            full_loop_B.ii_size_idx_0_b + full_loop_B.i17];
        }
      }
    }
  }
}

void full_loopModelClass::full_loop_quaternionBase_rotmat(real_T q_a, real_T q_b,
  real_T q_c, real_T q_d, real_T r[9])
{
  real_T n;
  n = std::sqrt(((q_a * q_a + q_b * q_b) + q_c * q_c) + q_d * q_d);
  q_a /= n;
  q_b /= n;
  q_c /= n;
  q_d /= n;
  n = q_a * q_b * 2.0;
  full_loop_B.ac2 = q_a * q_c * 2.0;
  full_loop_B.ad2 = q_a * q_d * 2.0;
  full_loop_B.bc2 = q_b * q_c * 2.0;
  full_loop_B.bd2 = q_b * q_d * 2.0;
  full_loop_B.cd2 = q_c * q_d * 2.0;
  full_loop_B.aasq = q_a * q_a * 2.0 - 1.0;
  r[0] = q_b * q_b * 2.0 + full_loop_B.aasq;
  r[3] = full_loop_B.bc2 + full_loop_B.ad2;
  r[6] = full_loop_B.bd2 - full_loop_B.ac2;
  r[1] = full_loop_B.bc2 - full_loop_B.ad2;
  r[4] = q_c * q_c * 2.0 + full_loop_B.aasq;
  r[7] = full_loop_B.cd2 + n;
  r[2] = full_loop_B.bd2 + full_loop_B.ac2;
  r[5] = full_loop_B.cd2 - n;
  r[8] = q_d * q_d * 2.0 + full_loop_B.aasq;
}

void full_loopModelClass::fu_TrajectoryGenerator_stepImpl
  (TrajectoryGenerator_full_loop_T *b_this, const real_T wpts[160], real_T
   wpt_count, real_T pose[13000], real_T b_new[2])
{
  real_T *h;
  real_T *dtheta;
  real_T *e;
  real_T *w;

  //  Implement algorithm. Calculate y as a function of input u and
  //  discrete states.
  //  Initialiser les tableau
  for (full_loop_B.c_i_i = 0; full_loop_B.c_i_i < 8; full_loop_B.c_i_i++) {
    full_loop_B.List[21 * full_loop_B.c_i_i] = wpts[20 * full_loop_B.c_i_i];
    std::memcpy(&full_loop_B.List[full_loop_B.c_i_i * 21 + 1],
                &wpts[full_loop_B.c_i_i * 20], 20U * sizeof(real_T));
  }

  //  Remplire les tablau avec le dernier waypoint
  full_loop_B.b_aw = static_cast<int32_T>((1.0 - wpt_count) + 21.0) - 1;
  for (full_loop_B.b_i_o = 0; full_loop_B.b_i_o <= full_loop_B.b_aw;
       full_loop_B.b_i_o++) {
    full_loop_B.wpt_count = static_cast<int32_T>(wpt_count);
    full_loop_B.wpt_count_e = static_cast<int32_T>(wpt_count +
      static_cast<real_T>(full_loop_B.b_i_o));
    for (full_loop_B.c_i_i = 0; full_loop_B.c_i_i < 8; full_loop_B.c_i_i++) {
      full_loop_B.List_p[full_loop_B.c_i_i] = full_loop_B.List[(21 *
        full_loop_B.c_i_i + full_loop_B.wpt_count) - 1];
    }

    for (full_loop_B.c_i_i = 0; full_loop_B.c_i_i < 8; full_loop_B.c_i_i++) {
      full_loop_B.List[(full_loop_B.wpt_count_e + 21 * full_loop_B.c_i_i) - 1] =
        full_loop_B.List_p[full_loop_B.c_i_i];
    }
  }

  //  wpts(1:wpt_count-1,1:3);
  //  Gestion des vitesses et des accélérations.
  //  Génération d'un vecteur de temps
  std::memset(&full_loop_B.tpts[0], 0, 21U * sizeof(real_T));
  full_loop_B.b_i_o = static_cast<int32_T>(wpt_count + -1.0) - 1;
  for (full_loop_B.c_i_i = 0; full_loop_B.c_i_i <= full_loop_B.b_i_o;
       full_loop_B.c_i_i++) {
    full_loop_B.maxTime = b_this->Ts;
    for (full_loop_B.b_aw = 0; full_loop_B.b_aw < 7; full_loop_B.b_aw++) {
      full_loop_B.dist = std::abs(full_loop_B.List[(21 * full_loop_B.b_aw +
        full_loop_B.c_i_i) + 1] - full_loop_B.List[(static_cast<int32_T>((
        static_cast<real_T>(full_loop_B.c_i_i) + 2.0) - 1.0) + 21 *
        full_loop_B.b_aw) - 1]);
      if (full_loop_B.dist > 0.0) {
        full_loop_B.dist = b_this->avanceRapide[full_loop_B.b_aw] /
          b_this->accRapide[full_loop_B.b_aw] * 2.0 + full_loop_B.dist /
          b_this->avanceRapide[full_loop_B.b_aw];
      } else {
        full_loop_B.dist = 0.0;
      }

      if (full_loop_B.dist > full_loop_B.maxTime) {
        full_loop_B.maxTime = full_loop_B.dist;
      }
    }

    full_loop_B.tpts[full_loop_B.c_i_i + 1] = full_loop_B.tpts
      [static_cast<int32_T>((static_cast<real_T>(full_loop_B.c_i_i) + 2.0) - 1.0)
      - 1] + full_loop_B.maxTime;
  }

  full_loop_B.b_aw = static_cast<int32_T>((1.0 - (wpt_count + 1.0)) + 21.0) - 1;
  for (full_loop_B.c_i_i = 0; full_loop_B.c_i_i <= full_loop_B.b_aw;
       full_loop_B.c_i_i++) {
    full_loop_B.maxTime = (wpt_count + 1.0) + static_cast<real_T>
      (full_loop_B.c_i_i);
    full_loop_B.tpts[static_cast<int32_T>(full_loop_B.maxTime) - 1] =
      full_loop_B.tpts[static_cast<int32_T>(full_loop_B.maxTime - 1.0) - 1] +
      b_this->Ts;
  }

  full__quaternioncg_quaternioncg(&full_loop_B.List[63],
    full_loop_B.assign_temp_a, full_loop_B.assign_temp_b,
    full_loop_B.assign_temp_c, full_loop_B.x_ie);
  waypointTrajectory_waypointTraj(&full_loop_B.trajectory, &full_loop_B.List[0],
    full_loop_B.tpts, 1.0 / b_this->Ts, full_loop_B.assign_temp_a,
    full_loop_B.assign_temp_b, full_loop_B.assign_temp_c, full_loop_B.x_ie);
  for (full_loop_B.c_i_i = 0; full_loop_B.c_i_i < 13000; full_loop_B.c_i_i++) {
    pose[full_loop_B.c_i_i] = 999.0;
  }

  //  while ~isDone(trajectory)
  full_loop_B.nbpts = 1U;
  full_loop_B.wpt_count = static_cast<int32_T>(std::floor(full_loop_B.tpts[
    static_cast<int32_T>(wpt_count) - 1] / b_this->Ts)) - 1;
  for (full_loop_B.b_i_o = 0; full_loop_B.b_i_o <= full_loop_B.wpt_count;
       full_loop_B.b_i_o++) {
    if (full_loop_B.trajectory.isInitialized != 1) {
      full_loop_B.trajectory.isInitialized = 1;
      full_loop_B.trajectory.CurrentTime = 0.0;
      full_waypointTrajectory_setPose(&full_loop_B.trajectory);
      full_loop_B.trajectory.IsDoneStatus = false;
      full_loop_B.trajectory.CurrentTime = 0.0;
      full_waypointTrajectory_setPose(&full_loop_B.trajectory);
      full_loop_B.trajectory.IsDoneStatus = false;
    }

    full_loop_B.maxTime = full_loop_B.trajectory.CurrentTime;
    full_loop_B.dist = 1.0 / full_loop_B.trajectory.SampleRate;
    full_loop_B.b_varargout_1[0] = 0.0;
    full_loop_B.b_varargout_3[0] = 0.0;
    full_loop_B.b_varargout_1[1] = 0.0;
    full_loop_B.b_varargout_3[1] = 0.0;
    full_loop_B.b_varargout_1[2] = 0.0;
    full_loop_B.b_varargout_3[2] = 0.0;
    full_loop_B.flag = (full_loop_B.trajectory.isInitialized == 1);
    if (!full_loop_B.flag) {
      full_loop_B.trajectory.isInitialized = 1;
      full_loop_B.trajectory.CurrentTime = 0.0;
      full_waypointTrajectory_setPose(&full_loop_B.trajectory);
      full_loop_B.trajectory.IsDoneStatus = false;
      full_loop_B.trajectory.CurrentTime = 0.0;
      full_waypointTrajectory_setPose(&full_loop_B.trajectory);
      full_loop_B.trajectory.IsDoneStatus = false;
    }

    full_loop_B.flag = full_loop_B.trajectory.IsDoneStatus;
    if (!full_loop_B.flag) {
      full_loop_B.maxTime += full_loop_B.dist;
      if ((full_loop_B.trajectory.TimeOfArrival[0] <= full_loop_B.maxTime) &&
          (full_loop_B.maxTime <= full_loop_B.trajectory.TimeOfArrival[20])) {
        waypointTrajectory_fetchPosit_p(&full_loop_B.trajectory,
          full_loop_B.maxTime, &full_loop_B.b_varargout_1[0],
          &full_loop_B.b_varargout_3[0], full_loop_B.b_acceleration,
          full_loop_B.b_varargout_5);
        std::memcpy(&full_loop_B.tpts[0], &full_loop_B.trajectory.Quaternions.a
                    [0], 21U * sizeof(real_T));
        std::memcpy(&full_loop_B.assign_temp_a[0],
                    &full_loop_B.trajectory.Quaternions.b[0], 21U * sizeof
                    (real_T));
        std::memcpy(&full_loop_B.assign_temp_b[0],
                    &full_loop_B.trajectory.Quaternions.c[0], 21U * sizeof
                    (real_T));
        std::memcpy(&full_loop_B.assign_temp_c[0],
                    &full_loop_B.trajectory.Quaternions.d[0], 21U * sizeof
                    (real_T));
        h = &full_loop_B.trajectory.SegmentTimes[0];
        dtheta = &full_loop_B.trajectory.RadianSlewAngles[0];
        e = &full_loop_B.trajectory.AxesOfRotation[0];
        w = &full_loop_B.trajectory.RadianAngularVelocities[0];
        std::memcpy(&full_loop_B.x_ie[0], &full_loop_B.trajectory.TimeOfArrival
                    [0], 21U * sizeof(real_T));
        full_loop_B.b_p = full_loop_mapElementsToBins(full_loop_B.maxTime,
          full_loop_B.x_ie, false);
        full_loop_B.c_i_i = static_cast<int32_T>(full_loop_B.b_p);
        full_loop_B.b_aw = static_cast<int32_T>(full_loop_B.b_p + 1.0);
        full_loop_B.b_acceleration[0] = e[full_loop_B.c_i_i - 1];
        full_loop_B.b_acceleration[1] = e[full_loop_B.c_i_i + 19];
        full_loop_B.b_acceleration[2] = e[full_loop_B.c_i_i + 39];
        full_loop_B.w_m[0] = w[full_loop_B.c_i_i - 1];
        full_loop_B.w_m[1] = w[full_loop_B.c_i_i + 20];
        full_loop_B.w_m[2] = w[full_loop_B.c_i_i + 41];
        full_loop_B.w_f[0] = w[full_loop_B.b_aw - 1];
        full_loop_B.w_f[1] = w[full_loop_B.b_aw + 20];
        full_loop_B.w_f[2] = w[full_loop_B.b_aw + 41];
        full_loop_slew3_init(h[static_cast<int32_T>(full_loop_B.b_p) - 1],
                             dtheta[static_cast<int32_T>(full_loop_B.b_p) - 1],
                             full_loop_B.b_acceleration, full_loop_B.w_m,
                             full_loop_B.w_f, full_loop_B.A_j, full_loop_B.B,
                             full_loop_B.C_a, full_loop_B.b_varargout_5);
        full_loop_slew3(full_loop_B.maxTime - full_loop_B.x_ie
                        [static_cast<int32_T>(full_loop_B.b_p) - 1], h[
                        static_cast<int32_T>(full_loop_B.b_p) - 1],
                        full_loop_B.tpts[static_cast<int32_T>(full_loop_B.b_p) -
                        1], full_loop_B.assign_temp_a[static_cast<int32_T>
                        (full_loop_B.b_p) - 1], full_loop_B.assign_temp_b[
                        static_cast<int32_T>(full_loop_B.b_p) - 1],
                        full_loop_B.assign_temp_c[static_cast<int32_T>
                        (full_loop_B.b_p) - 1], full_loop_B.A_j, full_loop_B.B,
                        full_loop_B.C_a, full_loop_B.b_varargout_5,
                        &full_loop_B.b_q_a, &full_loop_B.b_q_b,
                        &full_loop_B.b_q_c, &full_loop_B.b_q_d,
                        full_loop_B.b_acceleration, full_loop_B.w_m,
                        full_loop_B.w_f);
        full_loop_quaternionBase_rotmat(full_loop_B.b_q_a, full_loop_B.b_q_b,
          full_loop_B.b_q_c, full_loop_B.b_q_d, full_loop_B.A_j);
        pose[full_loop_B.b_i_o + 3000] = full_loop_B.b_q_a;
        for (full_loop_B.c_i_i = 0; full_loop_B.c_i_i < 3; full_loop_B.c_i_i++)
        {
          full_loop_B.b_varargout_5[full_loop_B.c_i_i] = full_loop_B.A_j[3 *
            full_loop_B.c_i_i + 2] * full_loop_B.b_acceleration[2] +
            (full_loop_B.A_j[3 * full_loop_B.c_i_i + 1] *
             full_loop_B.b_acceleration[1] + full_loop_B.A_j[3 *
             full_loop_B.c_i_i] * full_loop_B.b_acceleration[0]);
        }
      } else {
        pose[full_loop_B.b_i_o + 3000] = (rtNaN);
        full_loop_B.b_q_b = (rtNaN);
        full_loop_B.b_q_c = (rtNaN);
        full_loop_B.b_q_d = (rtNaN);
        full_loop_B.b_varargout_1[0] = (rtNaN);
        full_loop_B.b_varargout_3[0] = (rtNaN);
        full_loop_B.b_varargout_5[0] = (rtNaN);
        full_loop_B.b_varargout_1[1] = (rtNaN);
        full_loop_B.b_varargout_3[1] = (rtNaN);
        full_loop_B.b_varargout_5[1] = (rtNaN);
        full_loop_B.b_varargout_1[2] = (rtNaN);
        full_loop_B.b_varargout_3[2] = (rtNaN);
        full_loop_B.b_varargout_5[2] = (rtNaN);
        if (full_loop_B.maxTime > full_loop_B.trajectory.TimeOfArrival[20]) {
          full_loop_B.trajectory.IsDoneStatus = true;
        }
      }

      full_loop_B.flag = (full_loop_B.trajectory.isInitialized == 1);
      if (!full_loop_B.flag) {
        full_loop_B.trajectory.isInitialized = 1;
        full_loop_B.trajectory.CurrentTime = 0.0;
        full_waypointTrajectory_setPose(&full_loop_B.trajectory);
        full_loop_B.trajectory.IsDoneStatus = false;
        full_loop_B.trajectory.CurrentTime = 0.0;
        full_waypointTrajectory_setPose(&full_loop_B.trajectory);
        full_loop_B.trajectory.IsDoneStatus = false;
      }

      full_loop_B.flag = full_loop_B.trajectory.IsDoneStatus;
      if (!full_loop_B.flag) {
        full_loop_B.trajectory.CurrentTime = full_loop_B.maxTime;
        if (full_loop_B.maxTime + full_loop_B.dist >
            full_loop_B.trajectory.PathDuration) {
          full_loop_B.trajectory.IsDoneStatus = true;
        }
      }
    } else {
      pose[full_loop_B.b_i_o + 3000] = (rtNaN);
      full_loop_B.b_q_b = (rtNaN);
      full_loop_B.b_q_c = (rtNaN);
      full_loop_B.b_q_d = (rtNaN);
      full_loop_B.b_varargout_1[0] = (rtNaN);
      full_loop_B.b_varargout_3[0] = (rtNaN);
      full_loop_B.b_varargout_5[0] = (rtNaN);
      full_loop_B.b_varargout_1[1] = (rtNaN);
      full_loop_B.b_varargout_3[1] = (rtNaN);
      full_loop_B.b_varargout_5[1] = (rtNaN);
      full_loop_B.b_varargout_1[2] = (rtNaN);
      full_loop_B.b_varargout_3[2] = (rtNaN);
      full_loop_B.b_varargout_5[2] = (rtNaN);
    }

    // , bufferVelocity, bufferAcc, bufferAngRate
    pose[full_loop_B.b_i_o + 4000] = full_loop_B.b_q_b;
    pose[full_loop_B.b_i_o + 5000] = full_loop_B.b_q_c;
    pose[full_loop_B.b_i_o + 6000] = full_loop_B.b_q_d;
    pose[full_loop_B.b_i_o] = full_loop_B.b_varargout_1[0];
    pose[full_loop_B.b_i_o + 7000] = full_loop_B.b_varargout_3[0];
    pose[full_loop_B.b_i_o + 10000] = full_loop_B.b_varargout_5[0];
    pose[full_loop_B.b_i_o + 1000] = full_loop_B.b_varargout_1[1];
    pose[full_loop_B.b_i_o + 8000] = full_loop_B.b_varargout_3[1];
    pose[full_loop_B.b_i_o + 11000] = full_loop_B.b_varargout_5[1];
    pose[full_loop_B.b_i_o + 2000] = full_loop_B.b_varargout_1[2];
    pose[full_loop_B.b_i_o + 9000] = full_loop_B.b_varargout_3[2];
    pose[full_loop_B.b_i_o + 12000] = full_loop_B.b_varargout_5[2];
    full_loop_B.nbpts = full_loop_B.b_i_o + 1U;
  }

  b_this->computeCount++;
  b_new[0] = b_this->computeCount;
  b_new[1] = full_loop_B.nbpts;
}

void full_loopModelClass::full_loop_SystemCore_step
  (TrajectoryGenerator_full_loop_T *obj, const real_T varargin_1[160], real_T
   varargin_2, real_T varargout_1[13000], real_T varargout_2[2])
{
  fu_TrajectoryGenerator_stepImpl(obj, varargin_1, varargin_2, varargout_1,
    varargout_2);
}

void full_loopModelClass::f_TrajectoryManager_BufferReset
  (TrajectoryManager_full_loop_T *b_this, uint8_T reset, const real_T
   mesuredPose[7])
{
  int32_T i;

  //  Fonction Qui reset le buffer
  if (reset == 1) {
    for (i = 0; i < 78013; i++) {
      b_this->poseBuffer[i] = b_this->dummy;
    }

    for (i = 0; i < 7; i++) {
      b_this->poseBuffer[6001 * i] = mesuredPose[i];
    }

    b_this->poseBuffer[42007] = 0.0;
    b_this->poseBuffer[48008] = 0.0;
    b_this->poseBuffer[54009] = 0.0;
    b_this->poseBuffer[60010] = 0.0;
    b_this->poseBuffer[66011] = 0.0;
    b_this->poseBuffer[72012] = 0.0;
  }
}

void full_loopModelClass::full_loop_string_disp(void)
{
  printf("%s\n", "Problem");
  fflush(stdout);
}

void full_loopModelClass::TrajectoryManager_processNewPos
  (TrajectoryManager_full_loop_T *b_this, const real_T pose[13000], real_T count,
   real_T b_new)
{
  int32_T c;
  int32_T g;
  int32_T i;
  int32_T i_0;
  real_T tmp;

  //  Fonction qui traites les nouveau poses.
  //  Insertion des nouveaux points.
  if (b_new > b_this->generationNumber) {
    tmp = count + b_this->bufferCount;
    if (tmp < 6001.0) {
      if (1.0 > count + 1.0) {
        c = -1;
      } else {
        c = static_cast<int32_T>(count + 1.0) - 1;
      }

      if (b_this->bufferCount > tmp) {
        g = 0;
      } else {
        g = static_cast<int32_T>(b_this->bufferCount) - 1;
      }

      for (i_0 = 0; i_0 < 13; i_0++) {
        for (i = 0; i <= c; i++) {
          b_this->poseBuffer[(g + i) + 6001 * i_0] = pose[1000 * i_0 + i];
        }
      }

      b_this->bufferCount += count;
      b_this->generationNumber++;
    } else {
      full_loop_string_disp();
    }
  }
}

boolean_T full_loopModelClass::full_loop_ifWhileCond(const boolean_T x[13])
{
  boolean_T y;
  int32_T b_k;
  boolean_T exitg1;
  y = true;
  b_k = 0;
  exitg1 = false;
  while ((!exitg1) && (b_k < 13)) {
    if (!x[b_k]) {
      y = false;
      exitg1 = true;
    } else {
      b_k++;
    }
  }

  return y;
}

void full_loopModelClass::TrajectoryManager_SendCurrentPo
  (TrajectoryManager_full_loop_T *b_this, real_T currPose[52])
{
  int32_T b_index;
  boolean_T isempty;
  int32_T b_i;
  int32_T c;
  int32_T b_index_0;
  int32_T b_index_1;
  int32_T i;
  boolean_T exitg1;

  //  Fonction qui retourne la pose actuelle
  //  Vérification des prédictions.
  b_index = 2;
  isempty = false;
  b_i = 0;
  exitg1 = false;
  while ((!exitg1) && (b_i < 3)) {
    b_index = b_i + 2;
    for (i = 0; i < 13; i++) {
      full_loop_B.b_this_n[i] = (b_this->poseBuffer[(6001 * i + b_i) + 1] ==
        b_this->emptyArray[i]);
    }

    if (full_loop_ifWhileCond(full_loop_B.b_this_n)) {
      isempty = true;
      exitg1 = true;
    } else {
      b_i++;
    }
  }

  std::memset(&currPose[0], 0, 52U * sizeof(real_T));
  for (i = 0; i < 13; i++) {
    if (0 <= b_index - 1) {
      std::memcpy(&currPose[i << 2], &b_this->poseBuffer[i * 6001], b_index *
                  sizeof(real_T));
    }
  }

  if (isempty) {
    c = 4 - b_index;
    for (b_i = 0; b_i <= c; b_i++) {
      b_index_0 = b_index - 1;
      b_index_1 = b_index + b_i;
      for (i = 0; i < 13; i++) {
        full_loop_B.currPose[i] = currPose[((i << 2) + b_index_0) - 1];
      }

      for (i = 0; i < 13; i++) {
        currPose[(b_index_1 + (i << 2)) - 1] = full_loop_B.currPose[i];
      }
    }
  }

  //  Ne pas supprimer le point si c'est le dernier.
  for (i = 0; i < 13; i++) {
    full_loop_B.b_this_n[i] = !(b_this->poseBuffer[6001 * i + 1] ==
      b_this->emptyArray[i]);
  }

  if (full_loop_ifWhileCond(full_loop_B.b_this_n)) {
    for (i = 0; i < 13; i++) {
      for (b_index = 0; b_index < 6000; b_index++) {
        full_loop_B.b_this[b_index + 6001 * i] = b_this->poseBuffer[((b_index +
          2) + 6001 * i) - 1];
      }

      full_loop_B.b_this[6001 * i + 6000] = b_this->emptyArray[i];
    }

    std::memcpy(&b_this->poseBuffer[0], &full_loop_B.b_this[0], 78013U * sizeof
                (real_T));
    b_this->bufferCount--;
    b_this->done = false;
  } else {
    b_this->done = true;
  }
}

real_T full_loopModelClass::full_loop_norm(const real_T x[3])
{
  real_T y;
  real_T scale;
  real_T absxk;
  real_T t;
  scale = 3.3121686421112381E-170;
  absxk = std::abs(x[0]);
  if (absxk > 3.3121686421112381E-170) {
    y = 1.0;
    scale = absxk;
  } else {
    t = absxk / 3.3121686421112381E-170;
    y = t * t;
  }

  absxk = std::abs(x[1]);
  if (absxk > scale) {
    t = scale / absxk;
    y = y * t * t + 1.0;
    scale = absxk;
  } else {
    t = absxk / scale;
    y += t * t;
  }

  absxk = std::abs(x[2]);
  if (absxk > scale) {
    t = scale / absxk;
    y = y * t * t + 1.0;
    scale = absxk;
  } else {
    t = absxk / scale;
    y += t * t;
  }

  return scale * std::sqrt(y);
}

boolean_T full_loopModelClass::full_loop_isequal(const real_T varargin_1[29],
  const real_T varargin_2[29])
{
  boolean_T p;
  boolean_T p_0;
  int32_T b_k;
  boolean_T exitg1;
  p = false;
  p_0 = true;
  b_k = 0;
  exitg1 = false;
  while ((!exitg1) && (b_k < 29)) {
    if (!(varargin_1[b_k] == varargin_2[b_k])) {
      p_0 = false;
      exitg1 = true;
    } else {
      b_k++;
    }
  }

  if (p_0) {
    p = true;
  }

  return p;
}

boolean_T full_loopModelClass::full_loop_isequal_p(const real_T varargin_1[8],
  const real_T varargin_2[8])
{
  boolean_T p;
  boolean_T p_0;
  int32_T b_k;
  boolean_T exitg1;
  p = false;
  p_0 = true;
  b_k = 0;
  exitg1 = false;
  while ((!exitg1) && (b_k < 8)) {
    if (!(varargin_1[b_k] == varargin_2[b_k])) {
      p_0 = false;
      exitg1 = true;
    } else {
      b_k++;
    }
  }

  if (p_0) {
    p = true;
  }

  return p;
}

// Function for MATLAB Function: '<S60>/NLMPC'
void full_loopModelClass::full_loop_znlmpc_setDecisions(const real_T X[52],
  const real_T Umv[32], real_T e, real_T z[69])
{
  int32_T i;
  int32_T i_0;
  static const int8_T a[512] = { 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0 };

  for (i_0 = 0; i_0 < 4; i_0++) {
    for (i = 0; i < 13; i++) {
      full_loop_B.X_c[i + 13 * i_0] = X[(i << 2) + i_0];
    }

    for (i = 0; i < 8; i++) {
      full_loop_B.Umv_o[i + (i_0 << 3)] = Umv[(i << 2) + i_0];
    }
  }

  for (i_0 = 0; i_0 < 16; i_0++) {
    full_loop_B.a_ed[i_0] = 0.0;
    for (i = 0; i < 32; i++) {
      full_loop_B.a_ed[i_0] += static_cast<real_T>(a[(i << 4) + i_0]) *
        full_loop_B.Umv_o[i];
    }
  }

  std::memcpy(&z[0], &full_loop_B.X_c[0], 52U * sizeof(real_T));
  std::memcpy(&z[52], &full_loop_B.a_ed[0], sizeof(real_T) << 4U);
  z[68] = e;
}

// Function for MATLAB Function: '<S60>/NLMPC'
void full_loopModelClass::full__structConstructorHelper_o(const
  cell_wrap_9_full_loop_T *varargin_2, const cell_wrap_10_full_loop_T
  *varargin_4, const cell_wrap_11_full_loop_T *varargin_6, const
  cell_wrap_11_full_loop_T *varargin_10, const cell_wrap_13_full_loop_T
  *varargin_12, const cell_wrap_13_full_loop_T *varargin_14, const
  cell_wrap_11_full_loop_T *varargin_18, const cell_wrap_11_full_loop_T
  *varargin_20, const cell_wrap_11_full_loop_T *varargin_22, const
  cell_wrap_11_full_loop_T *varargin_24, const cell_wrap_13_full_loop_T
  *varargin_26, const cell_wrap_13_full_loop_T *varargin_28, const
  cell_wrap_13_full_loop_T *varargin_30, const cell_wrap_13_full_loop_T
  *varargin_32, const cell_wrap_13_full_loop_T *varargin_34,
  s_A0rUWcsbMx3S06V1NlippE_full_T *s)
{
  std::memcpy(&s->x[0], &varargin_2->f1[0], 13U * sizeof(real_T));
  std::memcpy(&s->lastMV[0], &varargin_4->f1[0], sizeof(real_T) << 3U);
  std::memcpy(&s->ref[0], &varargin_6->f1[0], 52U * sizeof(real_T));
  std::memcpy(&s->OutputWeights[0], &varargin_10->f1[0], 52U * sizeof(real_T));
  std::memcpy(&s->MVWeights[0], &varargin_12->f1[0], sizeof(real_T) << 5U);
  std::memcpy(&s->MVRateWeights[0], &varargin_14->f1[0], sizeof(real_T) << 5U);
  s->ECRWeight = 100000.0;
  std::memcpy(&s->OutputMin[0], &varargin_18->f1[0], 52U * sizeof(real_T));
  std::memcpy(&s->OutputMax[0], &varargin_20->f1[0], 52U * sizeof(real_T));
  std::memcpy(&s->StateMin[0], &varargin_22->f1[0], 52U * sizeof(real_T));
  std::memcpy(&s->StateMax[0], &varargin_24->f1[0], 52U * sizeof(real_T));
  std::memcpy(&s->MVMin[0], &varargin_26->f1[0], sizeof(real_T) << 5U);
  std::memcpy(&s->MVMax[0], &varargin_28->f1[0], sizeof(real_T) << 5U);
  std::memcpy(&s->MVRateMin[0], &varargin_30->f1[0], sizeof(real_T) << 5U);
  std::memcpy(&s->MVRateMax[0], &varargin_32->f1[0], sizeof(real_T) << 5U);
  std::memcpy(&s->MVScaledTarget[0], &varargin_34->f1[0], sizeof(real_T) << 5U);
}

// Function for MATLAB Function: '<S60>/NLMPC'
void full_loopModelClass::full_lo_structConstructorHelper(const real_T
  varargin_2[13], const real_T varargin_4[8], const real_T varargin_6[52], const
  real_T varargin_10[52], const real_T varargin_12[32], const real_T
  varargin_14[32], const real_T varargin_18[52], const real_T varargin_20[52],
  const real_T varargin_22[52], const real_T varargin_24[52], const real_T
  varargin_26[32], const real_T varargin_28[32], const real_T varargin_30[32],
  const real_T varargin_32[32], const real_T varargin_34[32],
  s_A0rUWcsbMx3S06V1NlippE_full_T *s)
{
  std::memcpy(&full_loop_B.b_d.f1[0], &varargin_2[0], 13U * sizeof(real_T));
  std::memcpy(&full_loop_B.c_l.f1[0], &varargin_4[0], sizeof(real_T) << 3U);
  std::memcpy(&full_loop_B.d.f1[0], &varargin_6[0], 52U * sizeof(real_T));
  std::memcpy(&full_loop_B.e_o.f1[0], &varargin_10[0], 52U * sizeof(real_T));
  std::memcpy(&full_loop_B.f_d.f1[0], &varargin_12[0], sizeof(real_T) << 5U);
  std::memcpy(&full_loop_B.g.f1[0], &varargin_14[0], sizeof(real_T) << 5U);
  std::memcpy(&full_loop_B.h.f1[0], &varargin_18[0], 52U * sizeof(real_T));
  std::memcpy(&full_loop_B.i.f1[0], &varargin_20[0], 52U * sizeof(real_T));
  std::memcpy(&full_loop_B.j.f1[0], &varargin_22[0], 52U * sizeof(real_T));
  std::memcpy(&full_loop_B.k.f1[0], &varargin_24[0], 52U * sizeof(real_T));
  std::memcpy(&full_loop_B.l.f1[0], &varargin_26[0], sizeof(real_T) << 5U);
  std::memcpy(&full_loop_B.m_n.f1[0], &varargin_28[0], sizeof(real_T) << 5U);
  std::memcpy(&full_loop_B.n.f1[0], &varargin_30[0], sizeof(real_T) << 5U);
  std::memcpy(&full_loop_B.o.f1[0], &varargin_32[0], sizeof(real_T) << 5U);
  std::memcpy(&full_loop_B.p.f1[0], &varargin_34[0], sizeof(real_T) << 5U);
  full_loop_B.b_j = full_loop_B.b_d;
  full_loop_B.c_o = full_loop_B.c_l;
  full_loop_B.d_c = full_loop_B.d;
  full_loop_B.e_b = full_loop_B.e_o;
  full_loop_B.f_j = full_loop_B.f_d;
  full_loop_B.g_a = full_loop_B.g;
  full_loop_B.h_e = full_loop_B.h;
  full_loop_B.i_d = full_loop_B.i;
  full_loop_B.j_i = full_loop_B.j;
  full_loop_B.k_g = full_loop_B.k;
  full_loop_B.l_h = full_loop_B.l;
  full_loop_B.m_i = full_loop_B.m_n;
  full_loop_B.n_d = full_loop_B.n;
  full_loop_B.o_b = full_loop_B.o;
  full_loop_B.p_h = full_loop_B.p;
  full__structConstructorHelper_o(&full_loop_B.b_j, &full_loop_B.c_o,
    &full_loop_B.d_c, &full_loop_B.e_b, &full_loop_B.f_j, &full_loop_B.g_a,
    &full_loop_B.h_e, &full_loop_B.i_d, &full_loop_B.j_i, &full_loop_B.k_g,
    &full_loop_B.l_h, &full_loop_B.m_i, &full_loop_B.n_d, &full_loop_B.o_b,
    &full_loop_B.p_h, s);
}

// Function for MATLAB Function: '<S60>/NLMPC'
void full_loopModelClass::full_znlmpc_generateRuntimeData(const real_T x[13],
  const real_T lastMV[8], const real_T ref0[52], const real_T OutputWeights0[13],
  const real_T MVWeights0[8], const real_T MVRateWeights0[8], const real_T
  MVMin0[8], const real_T MVMax0[8], const real_T X0[39], const real_T MV0[24],
  real_T Slack0, s_A0rUWcsbMx3S06V1NlippE_full_T *runtimedata,
  sACkMJ1zT2VJOHR6eMwwEPC_full__T *userdata, real_T z0[69])
{
  int32_T i;
  int32_T X0_tmp;
  int32_T X0_tmp_0;
  for (i = 0; i < 13; i++) {
    X0_tmp = i << 2;
    full_loop_B.X0[X0_tmp] = X0[3 * i];
    full_loop_B.X0[X0_tmp + 1] = X0[3 * i + 1];
    X0_tmp_0 = 3 * i + 2;
    full_loop_B.X0[X0_tmp + 2] = X0[X0_tmp_0];
    full_loop_B.X0[X0_tmp + 3] = X0[X0_tmp_0];
  }

  for (i = 0; i < 8; i++) {
    X0_tmp = i << 2;
    full_loop_B.MV0[X0_tmp] = MV0[3 * i];
    full_loop_B.MV0[X0_tmp + 1] = MV0[3 * i + 1];
    X0_tmp_0 = 3 * i + 2;
    full_loop_B.MV0[X0_tmp + 2] = MV0[X0_tmp_0];
    full_loop_B.MV0[X0_tmp + 3] = MV0[X0_tmp_0];
  }

  full_loop_znlmpc_setDecisions(full_loop_B.X0, full_loop_B.MV0, Slack0, z0);
  userdata->Ts = 0.25;
  std::memcpy(&userdata->CurrentStates[0], &x[0], 13U * sizeof(real_T));
  std::memcpy(&userdata->LastMV[0], &lastMV[0], sizeof(real_T) << 3U);
  std::memcpy(&userdata->References[0], &ref0[0], 52U * sizeof(real_T));
  std::memset(&userdata->MVTarget[0], 0, sizeof(real_T) << 5U);
  userdata->PredictionHorizon = 4.0;
  userdata->NumOfStates = 13.0;
  userdata->NumOfOutputs = 13.0;
  userdata->NumOfInputs = 8.0;
  for (i = 0; i < 8; i++) {
    userdata->MVIndex[i] = static_cast<real_T>(i) + 1.0;
  }

  for (i = 0; i < 13; i++) {
    X0_tmp = i << 2;
    full_loop_B.X0[X0_tmp] = OutputWeights0[i];
    full_loop_B.X0[X0_tmp + 1] = OutputWeights0[i];
    full_loop_B.X0[X0_tmp + 2] = OutputWeights0[i];
    full_loop_B.X0[X0_tmp + 3] = OutputWeights0[i];
  }

  for (i = 0; i < 8; i++) {
    X0_tmp = i << 2;
    full_loop_B.MV0[X0_tmp] = MVWeights0[i];
    full_loop_B.MVRateWeights0[X0_tmp] = MVRateWeights0[i];
    X0_tmp_0 = X0_tmp + 1;
    full_loop_B.MV0[X0_tmp_0] = MVWeights0[i];
    full_loop_B.MVRateWeights0[X0_tmp_0] = MVRateWeights0[i];
    X0_tmp_0 = X0_tmp + 2;
    full_loop_B.MV0[X0_tmp_0] = MVWeights0[i];
    full_loop_B.MVRateWeights0[X0_tmp_0] = MVRateWeights0[i];
    X0_tmp += 3;
    full_loop_B.MV0[X0_tmp] = MVWeights0[i];
    full_loop_B.MVRateWeights0[X0_tmp] = MVRateWeights0[i];
  }

  for (i = 0; i < 52; i++) {
    full_loop_B.dv6[i] = (rtMinusInf);
    full_loop_B.dv7[i] = (rtInf);
    full_loop_B.dv8[i] = (rtMinusInf);
    full_loop_B.dv9[i] = (rtInf);
  }

  for (i = 0; i < 8; i++) {
    X0_tmp = i << 2;
    full_loop_B.MVMin0[X0_tmp] = MVMin0[i];
    full_loop_B.MVMax0[X0_tmp] = MVMax0[i];
    X0_tmp_0 = X0_tmp + 1;
    full_loop_B.MVMin0[X0_tmp_0] = MVMin0[i];
    full_loop_B.MVMax0[X0_tmp_0] = MVMax0[i];
    X0_tmp_0 = X0_tmp + 2;
    full_loop_B.MVMin0[X0_tmp_0] = MVMin0[i];
    full_loop_B.MVMax0[X0_tmp_0] = MVMax0[i];
    X0_tmp += 3;
    full_loop_B.MVMin0[X0_tmp] = MVMin0[i];
    full_loop_B.MVMax0[X0_tmp] = MVMax0[i];
  }

  for (i = 0; i < 32; i++) {
    full_loop_B.dv12[i] = (rtMinusInf);
    full_loop_B.dv13[i] = (rtInf);
    full_loop_B.dv14[i] = 0.0;
  }

  full_lo_structConstructorHelper(x, lastMV, ref0, full_loop_B.X0,
    full_loop_B.MV0, full_loop_B.MVRateWeights0, full_loop_B.dv6,
    full_loop_B.dv7, full_loop_B.dv8, full_loop_B.dv9, full_loop_B.MVMin0,
    full_loop_B.MVMax0, full_loop_B.dv12, full_loop_B.dv13, full_loop_B.dv14,
    runtimedata);
}

// Function for MATLAB Function: '<S60>/NLMPC'
void full_loopModelClass::full_loop_znlmpc_getZBounds(const
  s_A0rUWcsbMx3S06V1NlippE_full_T *runtimedata, real_T zLB[69], real_T zUB[69])
{
  int32_T i;
  int32_T i_0;
  for (i_0 = 0; i_0 < 4; i_0++) {
    for (i = 0; i < 13; i++) {
      full_loop_B.runtimedata_h[i + 13 * i_0] = runtimedata->StateMin[(i << 2) +
        i_0];
    }
  }

  std::memcpy(&zLB[0], &full_loop_B.runtimedata_h[0], 52U * sizeof(real_T));
  for (i_0 = 0; i_0 < 16; i_0++) {
    zLB[i_0 + 52] = (rtMinusInf);
  }

  zLB[68] = 0.0;
  for (i_0 = 0; i_0 < 4; i_0++) {
    for (i = 0; i < 13; i++) {
      full_loop_B.runtimedata_h[i + 13 * i_0] = runtimedata->StateMax[(i << 2) +
        i_0];
    }
  }

  std::memcpy(&zUB[0], &full_loop_B.runtimedata_h[0], 52U * sizeof(real_T));
  for (i_0 = 0; i_0 < 16; i_0++) {
    zUB[i_0 + 52] = (rtInf);
  }

  zUB[68] = (rtInf);
}

// Function for MATLAB Function: '<S60>/NLMPC'
void full_loopModelClass::full_loop_diag(real_T d[64])
{
  int32_T j;
  std::memset(&d[0], 0, sizeof(real_T) << 6U);
  for (j = 0; j < 8; j++) {
    d[j + (j << 3)] = 1.0;
  }
}

// Function for MATLAB Function: '<S60>/NLMPC'
void full_loopModelClass::full_loop_isfinite_m(const real_T x[8], boolean_T b[8])
{
  int32_T i;
  for (i = 0; i < 8; i++) {
    b[i] = ((!rtIsInf(x[i])) && (!rtIsNaN(x[i])));
  }
}

// Function for MATLAB Function: '<S60>/NLMPC'
void full_loopModelClass::full_loop_znlmpc_getUBounds(const
  s_A0rUWcsbMx3S06V1NlippE_full_T *runtimedata, real_T A_data[], int32_T A_size
  [2], real_T Bu_data[], int32_T *Bu_size)
{
  int32_T idx;
  int32_T b_ii;
  int32_T coffset;
  int32_T boffset;
  int32_T aoffset;
  int32_T bkj;
  int32_T c_i;
  int32_T d_i;
  int32_T y_data_tmp;
  static const int8_T c[512] = { 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 1 };

  boolean_T exitg1;
  std::memset(&full_loop_B.Au[0], 0, sizeof(real_T) << 12U);
  std::memset(&full_loop_B.b_Bu[0], 0, sizeof(real_T) << 7U);
  std::memset(&full_loop_B.icf[0], 0, sizeof(boolean_T) << 7U);
  for (b_ii = 0; b_ii < 8; b_ii++) {
    full_loop_B.ic_c[b_ii] = static_cast<real_T>(b_ii) + 1.0;
  }

  full_loop_diag(full_loop_B.As);
  for (idx = 0; idx < 4; idx++) {
    for (b_ii = 0; b_ii < 8; b_ii++) {
      full_loop_B.runtimedata_o[b_ii] = runtimedata->MVRateMin[(b_ii << 2) + idx];
    }

    full_loop_isfinite_m(full_loop_B.runtimedata_o, full_loop_B.bv3);
    for (b_ii = 0; b_ii < 8; b_ii++) {
      full_loop_B.icf[static_cast<int32_T>(full_loop_B.ic_c[b_ii]) - 1] =
        full_loop_B.bv3[b_ii];
      full_loop_B.runtimedata_o[b_ii] = runtimedata->MVRateMax[(b_ii << 2) + idx];
    }

    full_loop_isfinite_m(full_loop_B.runtimedata_o, full_loop_B.bv3);
    for (b_ii = 0; b_ii < 8; b_ii++) {
      full_loop_B.icf[static_cast<int32_T>(full_loop_B.ic_c[b_ii] + 8.0) - 1] =
        full_loop_B.bv3[b_ii];
      full_loop_B.runtimedata_o[b_ii] = runtimedata->MVMin[(b_ii << 2) + idx];
    }

    full_loop_isfinite_m(full_loop_B.runtimedata_o, full_loop_B.bv3);
    for (b_ii = 0; b_ii < 8; b_ii++) {
      full_loop_B.icf[static_cast<int32_T>(full_loop_B.ic_c[b_ii] + 16.0) - 1] =
        full_loop_B.bv3[b_ii];
      full_loop_B.runtimedata_o[b_ii] = runtimedata->MVMax[(b_ii << 2) + idx];
    }

    full_loop_isfinite_m(full_loop_B.runtimedata_o, full_loop_B.bv3);
    for (b_ii = 0; b_ii < 8; b_ii++) {
      full_loop_B.icf[static_cast<int32_T>(full_loop_B.ic_c[b_ii] + 24.0) - 1] =
        full_loop_B.bv3[b_ii];
      for (coffset = 0; coffset < 8; coffset++) {
        full_loop_B.Au[((static_cast<int32_T>(full_loop_B.ic_c[coffset]) + (b_ii
          << 7)) + (idx << 10)) - 1] = -full_loop_B.As[(b_ii << 3) + coffset];
      }
    }

    for (b_ii = 0; b_ii < 8; b_ii++) {
      for (coffset = 0; coffset < 8; coffset++) {
        full_loop_B.Au[((static_cast<int32_T>(full_loop_B.ic_c[coffset] + 8.0) +
                         (b_ii << 7)) + (idx << 10)) - 1] = full_loop_B.As[(b_ii
          << 3) + coffset];
      }
    }

    for (b_ii = 0; b_ii < 8; b_ii++) {
      for (coffset = 0; coffset < 8; coffset++) {
        full_loop_B.Au[((static_cast<int32_T>(full_loop_B.ic_c[coffset] + 16.0)
                         + (b_ii << 7)) + (idx << 10)) - 1] = -full_loop_B.As
          [(b_ii << 3) + coffset];
      }
    }

    for (b_ii = 0; b_ii < 8; b_ii++) {
      for (coffset = 0; coffset < 8; coffset++) {
        full_loop_B.Au[((static_cast<int32_T>(full_loop_B.ic_c[coffset] + 24.0)
                         + (b_ii << 7)) + (idx << 10)) - 1] = full_loop_B.As
          [(b_ii << 3) + coffset];
      }

      full_loop_B.b_Bu[static_cast<int32_T>(full_loop_B.ic_c[b_ii]) - 1] =
        -runtimedata->MVRateMin[(b_ii << 2) + idx];
    }

    for (b_ii = 0; b_ii < 8; b_ii++) {
      full_loop_B.b_Bu[static_cast<int32_T>(full_loop_B.ic_c[b_ii] + 8.0) - 1] =
        runtimedata->MVRateMax[(b_ii << 2) + idx];
    }

    for (b_ii = 0; b_ii < 8; b_ii++) {
      full_loop_B.b_Bu[static_cast<int32_T>(full_loop_B.ic_c[b_ii] + 16.0) - 1] =
        -runtimedata->MVMin[(b_ii << 2) + idx];
    }

    for (b_ii = 0; b_ii < 8; b_ii++) {
      full_loop_B.b_Bu[static_cast<int32_T>(full_loop_B.ic_c[b_ii] + 24.0) - 1] =
        runtimedata->MVMax[(b_ii << 2) + idx];
    }

    if (idx + 1 == 1) {
      for (b_ii = 0; b_ii < 8; b_ii++) {
        full_loop_B.runtimedata_o[b_ii] = full_loop_B.b_Bu[static_cast<int32_T>
          (full_loop_B.ic_c[b_ii]) - 1] - runtimedata->lastMV[b_ii];
      }

      for (b_ii = 0; b_ii < 8; b_ii++) {
        full_loop_B.b_Bu[static_cast<int32_T>(full_loop_B.ic_c[b_ii]) - 1] =
          full_loop_B.runtimedata_o[b_ii];
      }

      for (b_ii = 0; b_ii < 8; b_ii++) {
        full_loop_B.runtimedata_o[b_ii] = full_loop_B.b_Bu[static_cast<int32_T>
          (full_loop_B.ic_c[b_ii] + 8.0) - 1] + runtimedata->lastMV[b_ii];
      }

      for (b_ii = 0; b_ii < 8; b_ii++) {
        full_loop_B.b_Bu[static_cast<int32_T>(full_loop_B.ic_c[b_ii] + 8.0) - 1]
          = full_loop_B.runtimedata_o[b_ii];
      }
    } else {
      for (b_ii = 0; b_ii < 8; b_ii++) {
        for (coffset = 0; coffset < 8; coffset++) {
          full_loop_B.Au[((static_cast<int32_T>(full_loop_B.ic_c[coffset]) +
                           (b_ii << 7)) + ((idx - 1) << 10)) - 1] =
            full_loop_B.As[(b_ii << 3) + coffset];
        }
      }

      for (b_ii = 0; b_ii < 8; b_ii++) {
        for (coffset = 0; coffset < 8; coffset++) {
          full_loop_B.Au[((static_cast<int32_T>(full_loop_B.ic_c[coffset] + 8.0)
                           + (b_ii << 7)) + ((idx - 1) << 10)) - 1] =
            -full_loop_B.As[(b_ii << 3) + coffset];
        }
      }
    }

    for (b_ii = 0; b_ii < 8; b_ii++) {
      full_loop_B.ic_c[b_ii] += 32.0;
    }
  }

  idx = 0;
  b_ii = 0;
  exitg1 = false;
  while ((!exitg1) && (b_ii < 128)) {
    if (full_loop_B.icf[b_ii]) {
      idx++;
      full_loop_B.ii_data_m[idx - 1] = static_cast<uint8_T>(b_ii + 1);
      if (idx >= 128) {
        exitg1 = true;
      } else {
        b_ii++;
      }
    } else {
      b_ii++;
    }
  }

  if (1 > idx) {
    idx = 0;
  }

  if (idx > 0) {
    *Bu_size = idx;
    for (b_ii = 0; b_ii < idx; b_ii++) {
      Bu_data[b_ii] = full_loop_B.b_Bu[full_loop_B.ii_data_m[b_ii] - 1];
    }

    for (b_ii = 0; b_ii < 8; b_ii++) {
      for (coffset = 0; coffset < idx; coffset++) {
        full_loop_B.Auf_data[coffset + idx * b_ii] = full_loop_B.Au[((b_ii << 7)
          + full_loop_B.ii_data_m[coffset]) - 1];
      }

      for (coffset = 0; coffset < idx; coffset++) {
        full_loop_B.Auf_data[(coffset + idx * b_ii) + (idx << 3)] =
          full_loop_B.Au[((b_ii << 7) + full_loop_B.ii_data_m[coffset]) + 1023];
      }

      for (coffset = 0; coffset < idx; coffset++) {
        full_loop_B.Auf_data[(coffset + idx * b_ii) + (idx << 4)] =
          full_loop_B.Au[((b_ii << 7) + full_loop_B.ii_data_m[coffset]) + 2047];
      }

      for (coffset = 0; coffset < idx; coffset++) {
        full_loop_B.Auf_data[(coffset + idx * b_ii) + (idx << 3) * 3] =
          full_loop_B.Au[((b_ii << 7) + full_loop_B.ii_data_m[coffset]) + 3071];
      }
    }

    for (b_ii = 0; b_ii < 16; b_ii++) {
      coffset = b_ii * idx;
      boffset = b_ii << 5;
      for (c_i = 0; c_i < idx; c_i++) {
        full_loop_B.y_data_o[coffset + c_i] = 0.0;
      }

      for (c_i = 0; c_i < 32; c_i++) {
        aoffset = c_i * idx;
        bkj = c[boffset + c_i];
        for (d_i = 1; d_i - 1 < idx; d_i++) {
          y_data_tmp = (coffset + d_i) - 1;
          full_loop_B.y_data_o[y_data_tmp] += full_loop_B.Auf_data[(aoffset +
            d_i) - 1] * static_cast<real_T>(bkj);
        }
      }
    }

    A_size[0] = idx;
    A_size[1] = 69;
    b_ii = idx * 52;
    if (0 <= b_ii - 1) {
      std::memset(&A_data[0], 0, b_ii * sizeof(real_T));
    }

    coffset = idx << 4;
    for (b_ii = 0; b_ii < coffset; b_ii++) {
      A_data[b_ii + idx * 52] = full_loop_B.y_data_o[b_ii];
    }

    if (0 <= idx - 1) {
      std::memset(&A_data[idx * 52 + coffset], 0, ((((idx + idx * 52) + coffset)
        - idx * 52) - coffset) * sizeof(real_T));
    }
  } else {
    *Bu_size = 0;
    A_size[0] = 0;
    A_size[1] = 85;
  }
}

// Function for MATLAB Function: '<S60>/NLMPC'
void full_loopModelClass::full_loop_znlmpc_getDecisions(const real_T z[69],
  real_T X[52], real_T Umv[32], real_T *e)
{
  int32_T i;
  int32_T Umv_tmp;
  static const int8_T a[512] = { 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 1 };

  for (i = 0; i < 32; i++) {
    full_loop_B.a_n[i] = 0.0;
    for (Umv_tmp = 0; Umv_tmp < 16; Umv_tmp++) {
      full_loop_B.a_n[i] += static_cast<real_T>(a[(Umv_tmp << 5) + i]) *
        z[Umv_tmp + 52];
    }
  }

  for (i = 0; i < 8; i++) {
    Umv_tmp = i << 2;
    Umv[Umv_tmp] = full_loop_B.a_n[i];
    Umv[Umv_tmp + 1] = full_loop_B.a_n[i + 8];
    Umv[Umv_tmp + 2] = full_loop_B.a_n[i + 16];
    Umv[Umv_tmp + 3] = full_loop_B.a_n[i + 24];
  }

  *e = z[68];
  std::memcpy(&full_loop_B.z_d[0], &z[0], 52U * sizeof(real_T));
  for (i = 0; i < 13; i++) {
    Umv_tmp = i << 2;
    X[Umv_tmp] = full_loop_B.z_d[i];
    X[Umv_tmp + 1] = full_loop_B.z_d[i + 13];
    X[Umv_tmp + 2] = full_loop_B.z_d[i + 26];
    X[Umv_tmp + 3] = full_loop_B.z_d[i + 39];
  }
}

// Function for MATLAB Function: '<S60>/NLMPC'
void full_loopModelClass::full_loop_znlmpc_getXUe(const real_T z[69], const
  real_T x[13], real_T X[65], real_T U[40], real_T *e)
{
  int32_T i;
  int32_T X_tmp;
  std::memset(&X[0], 0, 65U * sizeof(real_T));
  std::memset(&full_loop_B.Umv[0], 0, 40U * sizeof(real_T));
  full_loop_znlmpc_getDecisions(z, full_loop_B.b, full_loop_B.c_p, e);
  for (i = 0; i < 13; i++) {
    X_tmp = i << 2;
    X[5 * i + 1] = full_loop_B.b[X_tmp];
    X[5 * i + 2] = full_loop_B.b[X_tmp + 1];
    X[5 * i + 3] = full_loop_B.b[X_tmp + 2];
    X[5 * i + 4] = full_loop_B.b[X_tmp + 3];
  }

  for (i = 0; i < 8; i++) {
    X_tmp = i << 2;
    full_loop_B.Umv[5 * i] = full_loop_B.c_p[X_tmp];
    full_loop_B.Umv[5 * i + 1] = full_loop_B.c_p[X_tmp + 1];
    full_loop_B.Umv[5 * i + 2] = full_loop_B.c_p[X_tmp + 2];
    full_loop_B.Umv[5 * i + 3] = full_loop_B.c_p[X_tmp + 3];
  }

  for (i = 0; i < 13; i++) {
    X[5 * i] = x[i];
  }

  for (X_tmp = 0; X_tmp < 8; X_tmp++) {
    full_loop_B.Umv[5 * X_tmp + 4] = full_loop_B.Umv[5 * X_tmp + 3];
    for (i = 0; i < 5; i++) {
      U[i + 5 * X_tmp] = full_loop_B.Umv[5 * X_tmp + i];
    }
  }
}

// Function for MATLAB Function: '<S60>/NLMPC'
void full_loopModelClass::full_loop_eye(real_T b_I[169])
{
  int32_T k;
  std::memset(&b_I[0], 0, 169U * sizeof(real_T));
  for (k = 0; k < 13; k++) {
    b_I[k + 13 * k] = 1.0;
  }
}

// Function for MATLAB Function: '<S60>/NLMPC'
void full_loopModelClass::full_loop_AUVQuatJacobianMatrix(const real_T in1[13],
  real_T Anqv[169], real_T Bnqv[104])
{
  static const real_T tmp[104] = { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.019307656682116234, -0.014237162715082121, -7.2584457474773715E-5,
    0.062663201067254926, 0.019027052107507252, -0.17234977581502, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.01929573375564168, 0.01451676465807273,
    9.6096969584296907E-5, -0.060563498078781364, 0.019606237399041809,
    -0.17335578354483538, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.019976484825705527, -0.014526180326342229, -6.8975162643882123E-5,
    0.060009070583935814, 0.019004574184890054, 0.17629055822142609, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.01996456189923097, 0.014227747046812615,
    9.9706264415188513E-5, -0.063217628562100475, 0.0195837594764246,
    0.17528455049161071, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -0.001827658480130064, -0.0035177113541306742, -0.019674446043184569,
    -0.26801378237038109, 0.1059865723986993, 0.00062201547474137432, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, -0.001820757985983108, 0.0034794839220347071,
    0.019822798417882322, 0.26510017838343369, 0.10544707069616829,
    -0.00063438909522841322, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.001862462071995808, 0.0036693918966183279, -0.020568381500651611,
    0.27957028217008012, -0.1080065349719949, -0.000649068248438291, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.001785954394117357, -0.0036311644645223612,
    0.020420029125953861, -0.27665667818313278, -0.1034271081228726,
    0.00066144186892532939 };

  std::memcpy(&Bnqv[0], &tmp[0], 104U * sizeof(real_T));
  full_loop_B.t2 = std::abs(in1[10]);
  full_loop_B.t3 = std::abs(in1[11]);
  full_loop_B.t4 = std::abs(in1[12]);
  full_loop_B.t5 = std::abs(in1[7]);
  full_loop_B.t6 = std::abs(in1[8]);
  full_loop_B.t7 = std::abs(in1[9]);
  if (in1[10] < 0.0) {
    full_loop_B.t8 = -1.0;
  } else if (in1[10] > 0.0) {
    full_loop_B.t8 = 1.0;
  } else if (in1[10] == 0.0) {
    full_loop_B.t8 = 0.0;
  } else {
    full_loop_B.t8 = (rtNaN);
  }

  if (in1[11] < 0.0) {
    full_loop_B.t9 = -1.0;
  } else if (in1[11] > 0.0) {
    full_loop_B.t9 = 1.0;
  } else if (in1[11] == 0.0) {
    full_loop_B.t9 = 0.0;
  } else {
    full_loop_B.t9 = (rtNaN);
  }

  if (in1[12] < 0.0) {
    full_loop_B.t10 = -1.0;
  } else if (in1[12] > 0.0) {
    full_loop_B.t10 = 1.0;
  } else if (in1[12] == 0.0) {
    full_loop_B.t10 = 0.0;
  } else {
    full_loop_B.t10 = (rtNaN);
  }

  if (in1[7] < 0.0) {
    full_loop_B.t11 = -1.0;
  } else if (in1[7] > 0.0) {
    full_loop_B.t11 = 1.0;
  } else if (in1[7] == 0.0) {
    full_loop_B.t11 = 0.0;
  } else {
    full_loop_B.t11 = (rtNaN);
  }

  if (in1[8] < 0.0) {
    full_loop_B.t12 = -1.0;
  } else if (in1[8] > 0.0) {
    full_loop_B.t12 = 1.0;
  } else if (in1[8] == 0.0) {
    full_loop_B.t12 = 0.0;
  } else {
    full_loop_B.t12 = (rtNaN);
  }

  if (in1[9] < 0.0) {
    full_loop_B.t13 = -1.0;
  } else if (in1[9] > 0.0) {
    full_loop_B.t13 = 1.0;
  } else if (in1[9] == 0.0) {
    full_loop_B.t13 = 0.0;
  } else {
    full_loop_B.t13 = (rtNaN);
  }

  full_loop_B.t17 = in1[4] * in1[5] * 2.0;
  full_loop_B.t18 = in1[4] * in1[6] * 2.0;
  full_loop_B.t19 = in1[5] * in1[6] * 2.0;
  full_loop_B.t20 = in1[4] * in1[3] * 2.0;
  full_loop_B.t21 = in1[5] * in1[3] * 2.0;
  full_loop_B.t22 = in1[6] * in1[3] * 2.0;
  full_loop_B.t23 = in1[4] * in1[7] * 2.0;
  full_loop_B.t24_tmp = in1[5] * in1[7];
  full_loop_B.t24 = full_loop_B.t24_tmp * 2.0;
  full_loop_B.t25_tmp = in1[6] * in1[7];
  full_loop_B.t25 = full_loop_B.t25_tmp * 2.0;
  full_loop_B.t26 = in1[3] * in1[7] * 2.0;
  full_loop_B.t27_tmp = in1[4] * in1[8];
  full_loop_B.t27 = full_loop_B.t27_tmp * 2.0;
  full_loop_B.t28 = in1[5] * in1[8] * 2.0;
  full_loop_B.t29_tmp = in1[6] * in1[8];
  full_loop_B.t29 = full_loop_B.t29_tmp * 2.0;
  full_loop_B.t30 = in1[3] * in1[8] * 2.0;
  full_loop_B.t31_tmp = in1[4] * in1[9];
  full_loop_B.t31 = full_loop_B.t31_tmp * 2.0;
  full_loop_B.t32_tmp = in1[5] * in1[9];
  full_loop_B.t32 = full_loop_B.t32_tmp * 2.0;
  full_loop_B.t33 = in1[6] * in1[9] * 2.0;
  full_loop_B.t34 = in1[3] * in1[9] * 2.0;
  full_loop_B.t39 = in1[4] / 2.0;
  full_loop_B.t40 = in1[5] / 2.0;
  full_loop_B.t41 = in1[6] / 2.0;
  full_loop_B.t42 = in1[3] / 2.0;
  full_loop_B.t43 = in1[10] / 2.0;
  full_loop_B.t44 = in1[11] / 2.0;
  full_loop_B.t45 = in1[12] / 2.0;
  full_loop_B.t55 = in1[12] * 1.0922800089221219E-5;
  full_loop_B.t56 = in1[11] * 0.00010100559482294321;
  full_loop_B.t57 = in1[7] * 0.0049007481307932269;
  full_loop_B.t60 = in1[7] * 0.0058622547357425883;
  full_loop_B.t61 = in1[8] * 0.0073946367444845153;
  full_loop_B.t63 = in1[8] * 0.011341033026417339;
  full_loop_B.t64 = in1[9] * 0.070902010831603177;
  full_loop_B.t69 = in1[9] * 0.14416989785306361;
  full_loop_B.t59 = -(in1[10] * 9.70555559505794E-5);
  full_loop_B.t46 = -(in1[4] * in1[4] * 2.0);
  full_loop_B.t47 = -(in1[5] * in1[5] * 2.0);
  full_loop_B.t48 = -(in1[6] * in1[6] * 2.0);
  std::memset(&Anqv[0], 0, 39U * sizeof(real_T));
  Anqv[39] = -full_loop_B.t29 + full_loop_B.t32;
  Anqv[40] = full_loop_B.t25 - full_loop_B.t31;
  Anqv[41] = -full_loop_B.t24 + full_loop_B.t27;
  Anqv[42] = 0.0;
  Anqv[43] = full_loop_B.t43;
  Anqv[44] = full_loop_B.t44;
  Anqv[45] = full_loop_B.t45;
  Anqv[46] = in1[4] * -0.01045342560949904 + in1[5] * 2.5113583253251051;
  Anqv[47] = in1[4] * -3.169690916335036 + in1[5] * 0.00838846728463838;
  Anqv[48] = in1[4] * 0.1997752778025354 - in1[5] * 0.035009023783539713;
  Anqv[49] = in1[4] * -145.94175899422879 + in1[5] * 0.68189563025282618;
  Anqv[50] = in1[4] * 0.68575814418325065 - in1[5] * 49.906640492239639;
  Anqv[51] = in1[4] * 0.71959977371277994 + in1[5] * 0.76855397519720636;
  Anqv[52] = full_loop_B.t28 + full_loop_B.t33;
  Anqv[53] = (full_loop_B.t24 - full_loop_B.t34) - full_loop_B.t27_tmp * 4.0;
  Anqv[54] = (full_loop_B.t25 + full_loop_B.t30) - full_loop_B.t31_tmp * 4.0;
  Anqv[55] = -full_loop_B.t43;
  Anqv[56] = 0.0;
  Anqv[57] = -full_loop_B.t45;
  Anqv[58] = full_loop_B.t44;
  Anqv[59] = (in1[4] * -0.01460054962599578 - in1[6] * 2.5113583253251051) -
    in1[3] * 0.01045342560949904;
  Anqv[60] = (in1[4] * -0.0636319175455211 - in1[6] * 0.00838846728463838) -
    in1[3] * 3.169690916335036;
  Anqv[61] = (in1[4] * 2.3559407301452371 + in1[6] * 0.035009023783539713) +
    in1[3] * 0.1997752778025354;
  Anqv[62] = (in1[4] * -4.8480987100183652 - in1[6] * 0.68189563025282618) -
    in1[3] * 145.94175899422879;
  Anqv[63] = (in1[4] * 0.84740000135117655 + in1[6] * 49.906640492239639) + in1
    [3] * 0.68575814418325065;
  Anqv[64] = (in1[4] * 0.01134898278333862 - in1[6] * 0.76855397519720636) +
    in1[3] * 0.71959977371277994;
  Anqv[65] = (full_loop_B.t27 + full_loop_B.t34) - full_loop_B.t24_tmp * 4.0;
  Anqv[66] = full_loop_B.t23 + full_loop_B.t33;
  Anqv[67] = (-full_loop_B.t26 + full_loop_B.t29) - full_loop_B.t32_tmp * 4.0;
  Anqv[68] = -full_loop_B.t44;
  Anqv[69] = full_loop_B.t45;
  Anqv[70] = 0.0;
  Anqv[71] = -full_loop_B.t43;
  Anqv[72] = (in1[5] * -0.01460054962599578 - in1[6] * 0.01045342560949904) +
    in1[3] * 2.5113583253251051;
  Anqv[73] = (in1[5] * -0.0636319175455211 - in1[6] * 3.169690916335036) + in1[3]
    * 0.00838846728463838;
  Anqv[74] = (in1[5] * 2.3559407301452371 + in1[6] * 0.1997752778025354) - in1[3]
    * 0.035009023783539713;
  Anqv[75] = (in1[5] * -4.8480987100183652 - in1[6] * 145.94175899422879) + in1
    [3] * 0.68189563025282618;
  Anqv[76] = (in1[5] * 0.84740000135117655 + in1[6] * 0.68575814418325065) -
    in1[3] * 49.906640492239639;
  Anqv[77] = (in1[5] * 0.01134898278333862 + in1[6] * 0.71959977371277994) +
    in1[3] * 0.76855397519720636;
  Anqv[78] = (-full_loop_B.t30 + full_loop_B.t31) - full_loop_B.t25_tmp * 4.0;
  Anqv[79] = (full_loop_B.t26 + full_loop_B.t32) - full_loop_B.t29_tmp * 4.0;
  Anqv[80] = full_loop_B.t23 + full_loop_B.t28;
  Anqv[81] = -full_loop_B.t45;
  Anqv[82] = -full_loop_B.t44;
  Anqv[83] = full_loop_B.t43;
  Anqv[84] = 0.0;
  Anqv[85] = in1[4] * -2.5113583253251051 - in1[5] * 0.01045342560949904;
  Anqv[86] = in1[4] * -0.00838846728463838 - in1[5] * 3.169690916335036;
  Anqv[87] = in1[4] * 0.035009023783539713 + in1[5] * 0.1997752778025354;
  Anqv[88] = in1[4] * -0.68189563025282618 - in1[5] * 145.94175899422879;
  Anqv[89] = in1[4] * 49.906640492239639 + in1[5] * 0.68575814418325065;
  Anqv[90] = in1[4] * -0.76855397519720636 + in1[5] * 0.71959977371277994;
  Anqv[91] = (full_loop_B.t47 + full_loop_B.t48) + 1.0;
  Anqv[92] = full_loop_B.t17 + full_loop_B.t22;
  Anqv[93] = full_loop_B.t18 - full_loop_B.t21;
  Anqv[94] = 0.0;
  Anqv[95] = 0.0;
  Anqv[96] = 0.0;
  Anqv[97] = 0.0;
  full_loop_B.t11 *= in1[7];
  Anqv[98] = (((((full_loop_B.t5 * -1.990578323420453 + full_loop_B.t55) +
                 full_loop_B.t56) - full_loop_B.t63) - full_loop_B.t69) -
              full_loop_B.t11 * 1.990578323420453) - 1.2785688835494411;
  Anqv[99] = (((((in1[11] * 0.0004402012147519747 - in1[12] *
                  0.75724234497451592) - full_loop_B.t5 * 6.8627094480288683E-5)
                + in1[8] * 0.0049007481307932269) - in1[9] *
               0.0015105854914452569) - full_loop_B.t11 * 6.8627094480288683E-5)
    - 4.4079887004964212E-5;
  Anqv[100] = (((((in1[11] * 0.71224215229625887 - in1[12] *
                   0.00034314565880139532) + full_loop_B.t5 *
                  0.0004946913651497388) - in1[8] * 6.12012701193308E-5) + in1[9]
                * 0.0058622547357425883) + full_loop_B.t11 *
               0.0004946913651497388) + 0.00031774534013523121;
  Anqv[101] = (((((in1[11] * 0.0335388123399054 + in1[12] * 0.25067825307747249)
                  - full_loop_B.t5 * 0.0091879609572818044) + in1[8] *
                 0.04500495643949308) - in1[9] * 0.11513323467426891) -
               full_loop_B.t11 * 0.0091879609572818044) - 0.0059015216055712744;
  Anqv[102] = (((((in1[11] * -0.0058622547357425883 - in1[12] *
                   0.0011775316293251711) + full_loop_B.t5 * 0.70609557527431532)
                 + in1[8] * 0.000381148528527585) + in1[9] * 8.3549581060197564)
               + full_loop_B.t11 * 0.70609557527431532) + 0.45353243363285239;
  Anqv[103] = (((((in1[11] * -7.8511479775082639E-5 - in1[12] *
                   0.0049007481307932269) - full_loop_B.t5 *
                  0.071254819153566434) - in1[8] * 5.91174516285982) - in1[9] *
                0.00048895284248919773) - full_loop_B.t11 * 0.071254819153566434)
    - 0.045767701527135322;
  Anqv[104] = full_loop_B.t17 - full_loop_B.t22;
  Anqv[105] = (full_loop_B.t46 + full_loop_B.t48) + 1.0;
  Anqv[106] = full_loop_B.t19 + full_loop_B.t20;
  Anqv[107] = 0.0;
  Anqv[108] = 0.0;
  Anqv[109] = 0.0;
  Anqv[110] = 0.0;
  full_loop_B.t11 = full_loop_B.t12 * in1[8];
  Anqv[111] = (((((in1[10] * -2.2269711738944568E-5 + in1[12] * 1.31682368681518)
                  - full_loop_B.t6 * 8.8178973249601687E-5) - in1[7] *
                 0.011341033026417339) - in1[9] * 0.00041361797759580533) -
               full_loop_B.t11 * 8.8178973249601687E-5) - 5.8773182673285611E-5;
  Anqv[112] = (((((full_loop_B.t6 * -1.959764949809168 + full_loop_B.t55) +
                  full_loop_B.t57) + full_loop_B.t59) - full_loop_B.t64) -
               full_loop_B.t11 * 1.959764949809168) - 1.3062254996528539;
  Anqv[113] = (((((in1[10] * -0.93655515488805574 - in1[12] *
                   7.8735883083998583E-5) + full_loop_B.t6 *
                  0.0027701900264589172) - in1[7] * 6.12012701193308E-5) + in1[9]
                * 0.0073946367444845153) + full_loop_B.t11 *
               0.0027701900264589172) + 0.0018463912479897151;
  Anqv[114] = (((((in1[10] * -0.0073946367444845153 + in1[12] *
                   0.001462370824875648) - full_loop_B.t6 * 2.0237073636629521)
                 + in1[7] * 0.04500495643949308) - in1[9] * 5.40200052056518) -
               full_loop_B.t11 * 2.0237073636629521) - 1.348844494085478;
  Anqv[115] = (((((in1[10] * 0.001292509819224349 - in1[12] * 0.1123833213545158)
                  + full_loop_B.t6 * 0.0095061274759837971) + in1[7] *
                 0.000381148528527585) + in1[9] * 0.025384573520533589) +
               full_loop_B.t11 * 0.0095061274759837971) + 0.00633603846894485;
  Anqv[116] = (((((in1[10] * 1.7310209655751831E-5 + in1[12] *
                   0.011341033026417339) + full_loop_B.t6 * 0.039563384370157662)
                 - in1[7] * 5.91174516285982) + in1[9] * 0.01272923306978129) +
               full_loop_B.t11 * 0.039563384370157662) + 0.026369846813465731;
  Anqv[117] = full_loop_B.t18 + full_loop_B.t21;
  Anqv[118] = full_loop_B.t19 - full_loop_B.t20;
  Anqv[119] = (full_loop_B.t46 + full_loop_B.t47) + 1.0;
  Anqv[120] = 0.0;
  Anqv[121] = 0.0;
  Anqv[122] = 0.0;
  Anqv[123] = 0.0;
  full_loop_B.t11 = full_loop_B.t13 * in1[9];
  Anqv[124] = (((((in1[10] * 3.0894123472212582E-6 - in1[11] *
                   1.4064343179668819) + full_loop_B.t7 * 0.00077780703874312778)
                 - in1[7] * 0.14416989785306361) - in1[8] *
                0.00041361797759580533) + full_loop_B.t11 *
               0.00077780703874312778) + 0.00049427052909924857;
  Anqv[125] = (((((in1[10] * 1.068661743389252 - in1[11] * 1.401221243644248E-5)
                  + full_loop_B.t7 * 0.0033898280971222769) - in1[7] *
                 0.0015105854914452569) - in1[8] * 0.070902010831603177) +
               full_loop_B.t11 * 0.0033898280971222769) + 0.0021541231226546681;
  Anqv[126] = (((((full_loop_B.t7 * -2.2159176408978749 + full_loop_B.t56) +
                  full_loop_B.t59) + full_loop_B.t60) + full_loop_B.t61) -
               full_loop_B.t11 * 2.2159176408978749) - 1.4081420329864931;
  Anqv[127] = (((((in1[10] * 0.070902010831603177 - in1[11] *
                   0.0018759888024714531) + full_loop_B.t7 * 0.25827009241212612)
                 - in1[7] * 0.11513323467426891) - in1[8] * 5.40200052056518) +
               full_loop_B.t11 * 0.25827009241212612) + 0.1641220622448131;
  Anqv[128] = (((((in1[10] * -0.00033305386212008608 + in1[11] *
                   0.14416989785306361) - full_loop_B.t7 * 0.045143073553090891)
                 + in1[7] * 8.3549581060197564) + in1[8] * 0.025384573520533589)
               - full_loop_B.t11 * 0.045143073553090891) - 0.028686923284094119;
  Anqv[129] = (((((in1[10] * -0.0013861309977498261 - in1[11] *
                   0.014548738667449169) - full_loop_B.t7 *
                  0.00060458810918587679) - in1[7] * 0.00048895284248919773) +
                in1[8] * 0.01272923306978129) - full_loop_B.t11 *
               0.00060458810918587679) - 0.00038419565487257928;
  Anqv[130] = 0.0;
  Anqv[131] = 0.0;
  Anqv[132] = 0.0;
  Anqv[133] = -full_loop_B.t39;
  Anqv[134] = full_loop_B.t42;
  Anqv[135] = full_loop_B.t41;
  Anqv[136] = -full_loop_B.t40;
  full_loop_B.t11 = in1[10] * full_loop_B.t8;
  Anqv[137] = ((((((in1[10] * -0.0001053978888789998 - in1[11] *
                    0.003069789205440997) - in1[12] * 0.030406267988950179) -
                  full_loop_B.t2 * 0.0031911803997214379) - in1[8] *
                 2.2269711738944568E-5) + in1[9] * 3.0894123472212582E-6) -
               full_loop_B.t11 * 0.0031911803997214379) - 0.0013114492456825051;
  Anqv[138] = ((((((in1[10] * 0.0029249998785138079 - in1[11] *
                    0.00033200609289206408) + in1[12] * 4.316311004342921E-5) -
                  full_loop_B.t2 * 0.54702919003137584) - in1[8] *
                 9.70555559505794E-5) + in1[9] * 1.068661743389252) -
               full_loop_B.t11 * 0.54702919003137584) - 0.22480741568091309;
  Anqv[139] = ((((((in1[10] * 0.024585171586454711 + in1[11] *
                    4.2863761157887232E-6) - in1[12] * 0.0001669230300418725) +
                  full_loop_B.t2 * 0.0570517267629961) - in1[8] *
                 0.93655515488805574) - in1[9] * 9.70555559505794E-5) +
               full_loop_B.t11 * 0.0570517267629961) + 0.02344600889211616;
  Anqv[140] = ((((((in1[10] * 0.00018750092988838209 - in1[11] *
                    0.0030513360226523309) + in1[12] * 0.0032796756199750892) -
                  full_loop_B.t2 * 41.677971254331268) - full_loop_B.t61) +
                full_loop_B.t64) - full_loop_B.t11 * 41.677971254331268) -
    17.128001904198548;
  Anqv[141] = ((((((in1[10] * 0.0051596467120543742 + in1[11] *
                    0.00017469105599010761) + in1[12] * 0.76210192584475489) +
                  full_loop_B.t2 * 0.19584920835616049) + in1[8] *
                 0.001292509819224349) - in1[9] * 0.00033305386212008608) +
               full_loop_B.t11 * 0.19584920835616049) + 0.080486297981970226;
  Anqv[142] = ((((((in1[10] * -0.0085358622877109453 - in1[11] *
                    0.5995466428355859) - in1[12] * 0.00016808087397733091) +
                  full_loop_B.t2 * 0.098209655469733537) + in1[8] *
                 1.7310209655751831E-5) - in1[9] * 0.0013861309977498261) +
               full_loop_B.t11 * 0.098209655469733537) + 0.040360293825997311;
  Anqv[143] = 0.0;
  Anqv[144] = 0.0;
  Anqv[145] = 0.0;
  Anqv[146] = -full_loop_B.t40;
  Anqv[147] = -full_loop_B.t41;
  Anqv[148] = full_loop_B.t42;
  Anqv[149] = full_loop_B.t39;
  full_loop_B.t11 = in1[11] * full_loop_B.t9;
  Anqv[150] = ((((((in1[10] * -0.003069789205440997 + in1[11] *
                    0.001937123669020868) + in1[12] * 6.312175622547442E-5) +
                  full_loop_B.t3 * 0.1468517863106126) + in1[7] *
                 0.00010100559482294321) - in1[9] * 1.4064343179668819) +
               full_loop_B.t11 * 0.1468517863106126) + 0.070549489676221488;
  Anqv[151] = ((((((in1[10] * -0.00033200609289206408 + in1[11] *
                    3.8504591609984912E-7) - in1[12] * 0.016980579719733459) +
                  full_loop_B.t3 * 0.0015386858220550271) + in1[7] *
                 0.0004402012147519747) - in1[9] * 1.401221243644248E-5) +
               full_loop_B.t11 * 0.0015386858220550271) + 0.00073920448804356588;
  Anqv[152] = ((((((in1[10] * 4.2863761157887232E-6 + in1[11] *
                    0.0245810790679022) - in1[12] * 0.0009667721231418631) -
                  full_loop_B.t3 * 0.005971306025541123) + in1[7] *
                 0.71224215229625887) + in1[9] * 0.00010100559482294321) -
               full_loop_B.t11 * 0.005971306025541123) - 0.002868692328409412;
  Anqv[153] = ((((((in1[10] * -0.0030513360226523309 + in1[11] *
                    0.00050435744430186134) - in1[12] * 0.29374464900371622) +
                  full_loop_B.t3 * 0.1172749750635692) + in1[7] *
                 0.0335388123399054) - in1[9] * 0.0018759888024714531) +
               full_loop_B.t11 * 0.1172749750635692) + 0.056340408587379161;
  Anqv[154] = ((((((in1[10] * 0.00017469105599010761 - in1[11] *
                    0.00020010052926847791) - in1[12] * 0.0033192413521117071) -
                  full_loop_B.t3 * 8.5103793558196035) - full_loop_B.t60) +
                full_loop_B.t69) - full_loop_B.t11 * 8.5103793558196035) -
    4.088495860950478;
  Anqv[155] = ((((((in1[10] * -0.5995466428355859 + in1[11] *
                    0.0085503075140538533) + in1[12] * 0.003049425362274922) +
                  full_loop_B.t3 * 0.00049804847898534061) - in1[7] *
                 7.8511479775082639E-5) - in1[9] * 0.014548738667449169) +
               full_loop_B.t11 * 0.00049804847898534061) +
    0.00023926890444569851;
  Anqv[156] = 0.0;
  Anqv[157] = 0.0;
  Anqv[158] = 0.0;
  Anqv[159] = -full_loop_B.t41;
  Anqv[160] = full_loop_B.t40;
  Anqv[161] = -full_loop_B.t39;
  Anqv[162] = full_loop_B.t42;
  full_loop_B.t11 = in1[12] * full_loop_B.t10;
  Anqv[163] = ((((((in1[10] * -0.030406267988950179 + in1[11] *
                    6.312175622547442E-5) + in1[12] * 0.002009717103722533) -
                  full_loop_B.t4 * 0.011388590753604211) + in1[7] *
                 1.0922800089221219E-5) + in1[8] * 1.31682368681518) -
               full_loop_B.t11 * 0.011388590753604211) - 0.015255900509045109;
  Anqv[164] = ((((((in1[10] * 4.316311004342921E-5 - in1[11] *
                    0.016980579719733459) + in1[12] * 0.0029123735478590292) +
                  full_loop_B.t4 * 0.0049212990314098553) - in1[7] *
                 0.75724234497451592) + in1[8] * 1.0922800089221219E-5) +
               full_loop_B.t11 * 0.0049212990314098553) + 0.0065924617033664319;
  Anqv[165] = ((((((in1[10] * -0.0001669230300418725 - in1[11] *
                    0.0009667721231418631) - in1[12] * 3.2477450109352809E-6) -
                  full_loop_B.t4 * 6.14579128167857E-5) - in1[7] *
                 0.00034314565880139532) - in1[8] * 7.8735883083998583E-5) -
               full_loop_B.t11 * 6.14579128167857E-5) - 8.2327640329838415E-5;
  Anqv[166] = ((((((in1[10] * 0.0032796756199750892 - in1[11] *
                    0.29374464900371622) - in1[12] * 0.0002994218971291498) +
                  full_loop_B.t4 * 0.045193681173423442) + in1[7] *
                 0.25067825307747249) + in1[8] * 0.001462370824875648) +
               full_loop_B.t11 * 0.045193681173423442) + 0.060540440738995963;
  Anqv[167] = ((((((in1[10] * 0.76210192584475489 - in1[11] *
                    0.0033192413521117071) - in1[12] * 0.0053551400555601168) +
                  full_loop_B.t4 * 0.00038274684480928231) - in1[7] *
                 0.0011775316293251711) - in1[8] * 0.1123833213545158) +
               full_loop_B.t11 * 0.00038274684480928231) + 0.0005127190809550683;
  Anqv[168] = ((((((in1[10] * -0.00016808087397733091 + in1[11] *
                    0.003049425362274922) + in1[12] * 1.7720131958175581E-5) -
                  full_loop_B.t4 * 5.9365355997625819) - full_loop_B.t57) +
                full_loop_B.t63) - full_loop_B.t11 * 5.9365355997625819) -
    7.9524498191069073;
}

// Function for MATLAB Function: '<S60>/NLMPC'
void full_loopModelClass::full_loop_AUVQuatSimFcn(const real_T in1[13], const
  real_T in2[8], real_T out1[13])
{
  real_T out1_tmp;
  real_T out1_tmp_0;
  full_loop_B.t8_k = in1[4] * in1[4];
  full_loop_B.t9_g = in1[5] * in1[5];
  full_loop_B.t11_p = in1[4] * in1[5] * 2.0;
  full_loop_B.t12_tmp = in1[4] * in1[6];
  full_loop_B.t12_f = full_loop_B.t12_tmp * 2.0;
  full_loop_B.t13_tmp = in1[5] * in1[6];
  full_loop_B.t13_m = full_loop_B.t13_tmp * 2.0;
  full_loop_B.t14_tmp = in1[4] * in1[3];
  full_loop_B.t14 = full_loop_B.t14_tmp * 2.0;
  full_loop_B.t15_tmp = in1[5] * in1[3];
  full_loop_B.t15 = full_loop_B.t15_tmp * 2.0;
  full_loop_B.t16 = in1[6] * in1[3] * 2.0;
  full_loop_B.t24_m = in1[11] / 500.0;
  full_loop_B.t26_l = in1[10] / 1000.0;
  full_loop_B.t28_j = in1[12] * 0.018;
  full_loop_B.t41_m = in1[8] * 46.5656;
  full_loop_B.t43_j = in1[7] * 35.4148;
  full_loop_B.t45_i = in1[9] * 49.7195;
  full_loop_B.t17_a = full_loop_B.t8_k * 2.0;
  full_loop_B.t18_h = full_loop_B.t9_g * 2.0;
  full_loop_B.t19_d = in1[6] * in1[6] * 2.0;
  full_loop_B.t52 = full_loop_B.t24_m + full_loop_B.t28_j;
  full_loop_B.t24_m += full_loop_B.t26_l;
  full_loop_B.t55_i = full_loop_B.t26_l + full_loop_B.t28_j;
  full_loop_B.t62 = (in1[11] / 125.0 + in1[12] / 250.0) + in1[10] * 0.592;
  full_loop_B.t63_h = in1[12] * 0.03395 + full_loop_B.t41_m;
  full_loop_B.t26_l = in1[11] * 0.6111 + full_loop_B.t43_j;
  full_loop_B.t28_j = in1[10] * 0.0679 + full_loop_B.t45_i;
  full_loop_B.t41_m = in1[10] * 0.6111 + -full_loop_B.t41_m;
  full_loop_B.t43_j = in1[12] * 0.0679 + -full_loop_B.t43_j;
  full_loop_B.t45_i = in1[11] * 0.03395 + -full_loop_B.t45_i;
  full_loop_B.t69_d = (in1[10] / 250.0 + -(in1[11] / 1000.0)) + in1[12] * 1.8864;
  full_loop_B.t70 = (in1[10] / 125.0 + -(in1[12] / 1000.0)) + in1[11] * 1.7228;
  out1[0] = (((full_loop_B.t18_h + full_loop_B.t19_d) - 1.0) * -in1[7] +
             (full_loop_B.t12_f + full_loop_B.t15) * in1[9]) +
    (full_loop_B.t11_p - full_loop_B.t16) * in1[8];
  out1[1] = ((full_loop_B.t11_p + full_loop_B.t16) * in1[7] -
             ((full_loop_B.t17_a + full_loop_B.t19_d) - 1.0) * in1[8]) +
    (full_loop_B.t13_m - full_loop_B.t14) * in1[9];
  out1[2] = ((full_loop_B.t13_m + full_loop_B.t14) * in1[8] -
             ((full_loop_B.t17_a + full_loop_B.t18_h) - 1.0) * in1[9]) +
    (full_loop_B.t12_f - full_loop_B.t15) * in1[7];
  out1[3] = (in1[4] * in1[10] * -0.5 - in1[5] * in1[11] / 2.0) - in1[6] * in1[12]
    / 2.0;
  out1[4] = (in1[3] * in1[10] / 2.0 - in1[6] * in1[11] / 2.0) + in1[5] * in1[12]
    / 2.0;
  out1[5] = (in1[6] * in1[10] / 2.0 + in1[3] * in1[11] / 2.0) - in1[4] * in1[12]
    / 2.0;
  out1[6] = (in1[5] * in1[10] * -0.5 + in1[4] * in1[11] / 2.0) + in1[3] * in1[12]
    / 2.0;
  full_loop_B.t11_p = in1[10] * full_loop_B.t52;
  full_loop_B.t12_f = (std::abs(in1[10]) * 24.333236 + 10.0) * in1[10];
  full_loop_B.t13_m = in1[10] * full_loop_B.t41_m;
  full_loop_B.t14 = in1[10] * full_loop_B.t28_j;
  full_loop_B.t15 = in1[10] * full_loop_B.t69_d;
  full_loop_B.t16 = in1[10] * full_loop_B.t70;
  full_loop_B.t17_a = (std::abs(in1[11]) * 14.5708 + 7.0) * in1[11];
  full_loop_B.t18_h = in1[11] * full_loop_B.t55_i;
  full_loop_B.t19_d = in1[11] * full_loop_B.t62;
  full_loop_B.out1_tmp = in1[11] * full_loop_B.t26_l;
  full_loop_B.out1_tmp_l = in1[11] * full_loop_B.t45_i;
  full_loop_B.t69_d *= in1[11];
  full_loop_B.out1_tmp_f = in1[12] * full_loop_B.t24_m;
  full_loop_B.out1_tmp_lt = (std::abs(in1[12]) * 11.19756 + 15.0) * in1[12];
  full_loop_B.t62 *= in1[12];
  full_loop_B.out1_tmp_l3 = in1[12] * full_loop_B.t63_h;
  full_loop_B.out1_tmp_f4 = in1[12] * full_loop_B.t43_j;
  full_loop_B.t70 *= in1[12];
  full_loop_B.t52 *= in1[7];
  full_loop_B.out1_tmp_g = (std::abs(in1[7]) * 70.0596 + 45.0) * in1[7];
  full_loop_B.t63_h *= in1[7];
  full_loop_B.t45_i *= in1[7];
  full_loop_B.t55_i *= in1[8];
  out1_tmp = (std::abs(in1[8]) * 90.0196 + 60.0) * in1[8];
  full_loop_B.t28_j *= in1[8];
  full_loop_B.t43_j *= in1[8];
  full_loop_B.t24_m *= in1[9];
  out1_tmp_0 = (std::abs(in1[9]) * 110.155248 + 70.0) * in1[9];
  full_loop_B.t41_m *= in1[9];
  full_loop_B.t26_l *= in1[9];
  out1[7] = (((((((((((((((((((((((((((((((((((((((((((((((in2[0] *
    -0.0003322565616540353 + in2[1] * 1.9244079100769068E-21) + in2[2] *
    0.00033657158193525657) + in2[3] * 0.0003351332418415161) - in2[4] *
    0.001827658480130064) - in2[5] * 0.001820757985983108) + in2[6] *
    0.001862462071995808) + in2[7] * 0.001785954394117357) - full_loop_B.t8_k *
    0.00730027481299789) - full_loop_B.t9_g * 0.00730027481299789) + in2[0] *
    1.4142135623730951 * 0.013887515836585439) + in2[1] * 1.4142135623730951 *
    0.0136441441865844) + in2[2] * 1.4142135623730951 * 0.013887515836585439) +
    in2[3] * 1.4142135623730951 * 0.013880102114457629) - full_loop_B.t12_tmp *
    2.5113583253251051) - full_loop_B.t13_tmp * 0.01045342560949904) -
    full_loop_B.t14_tmp * 0.01045342560949904) + full_loop_B.t15_tmp *
    2.5113583253251051) - full_loop_B.t11_p * 0.96460919103341125) -
    full_loop_B.t12_f * 0.0001311449245682505) - full_loop_B.t13_m *
    7.0610075585606938E-6) + full_loop_B.t14 * 9.7955304455476024E-7) -
    full_loop_B.t15 * 0.0100784985251745) - full_loop_B.t16 *
    0.00101706003393634) + full_loop_B.t17_a * 0.0100784985251745) -
    full_loop_B.t18_h * 3.3255825862634111E-5) + full_loop_B.t19_d *
    0.00101706003393634) - full_loop_B.out1_tmp * 7.0610075585606938E-6) +
    full_loop_B.out1_tmp_l * 0.028412641856654239) - full_loop_B.t69_d *
    0.0001311449245682505) + full_loop_B.out1_tmp_f * 0.00023972120661313559) -
    full_loop_B.out1_tmp_lt * 0.00101706003393634) + full_loop_B.t62 *
    0.0100784985251745) + full_loop_B.out1_tmp_l3 * 0.028412641856654239) +
    full_loop_B.out1_tmp_f4 * 9.7955304455476024E-7) + full_loop_B.t70 *
    0.0001311449245682505) + full_loop_B.t52 * 0.0044523701890921046) -
                       full_loop_B.out1_tmp_g * 0.028412641856654239) -
                      full_loop_B.t63_h * 0.00101706003393634) +
                     full_loop_B.t45_i * 0.0100784985251745) - full_loop_B.t55_i
                    * 0.34216502492967421) - out1_tmp * 9.7955304455476024E-7) -
                  full_loop_B.t28_j * 0.0001311449245682505) - full_loop_B.t43_j
                 * 0.00101706003393634) + full_loop_B.t24_m *
                0.034529188152138762) + out1_tmp_0 * 7.0610075585606938E-6) -
              full_loop_B.t41_m * 0.0001311449245682505) + full_loop_B.t26_l *
             0.0100784985251745) + 0.0036501374064989451;
  out1[8] = (((((((((((((((((((((((((((((((((((((((((((((((in2[0] *
    0.00014357649075502109 + in2[1] * 8.3869284783593086E-21) - in2[2] *
    0.0001454411205050863) - in2[3] * 0.00014481957725506449) - in2[4] *
    0.0035177113541306742) + in2[5] * 0.0034794839220347071) + in2[6] *
    0.0036693918966183279) - in2[7] * 0.0036311644645223612) - full_loop_B.t8_k *
    0.031815958772760548) - full_loop_B.t9_g * 0.031815958772760548) - in2[0] *
    1.4142135623730951 * 0.010168718210922689) + in2[1] * 1.4142135623730951 *
    0.01026490273061244) - in2[2] * 1.4142135623730951 * 0.010168718210922689) +
    in2[3] * 1.4142135623730951 * 0.0101629393229337) - full_loop_B.t12_tmp *
    0.00838846728463838) - full_loop_B.t13_tmp * 3.169690916335036) -
    full_loop_B.t14_tmp * 3.169690916335036) + full_loop_B.t15_tmp *
    0.00838846728463838) - full_loop_B.t11_p * 3.3255825862634111E-5) -
    full_loop_B.t12_f * 0.022480741568091309) - full_loop_B.t13_m *
    3.0773187466495261E-5) + full_loop_B.t14 * 0.021770424994214239) -
    full_loop_B.t15 * 0.0001056006411490808) + full_loop_B.t16 *
    0.00043949744689109537) + full_loop_B.t17_a * 0.0001056006411490808) -
    full_loop_B.t18_h * 0.73910592855357338) - full_loop_B.t19_d *
    0.00043949744689109537) - full_loop_B.out1_tmp * 3.0773187466495261E-5) +
    full_loop_B.out1_tmp_l * 9.7955304455476024E-7) - full_loop_B.t69_d *
    0.022480741568091309) + full_loop_B.out1_tmp_f * 0.0010447497144875141) +
    full_loop_B.out1_tmp_lt * 0.00043949744689109537) + full_loop_B.t62 *
    0.0001056006411490808) + full_loop_B.out1_tmp_l3 * 9.7955304455476024E-7) +
    full_loop_B.out1_tmp_f4 * 0.021770424994214239) + full_loop_B.t70 *
    0.022480741568091309) + full_loop_B.t52 * 0.76322117623669983) -
                       full_loop_B.out1_tmp_g * 9.7955304455476024E-7) +
                      full_loop_B.t63_h * 0.00043949744689109537) +
                     full_loop_B.t45_i * 0.0001056006411490808) -
                    full_loop_B.t55_i * 0.0035851417670112952) - out1_tmp *
                   0.021770424994214239) - full_loop_B.t28_j *
                  0.022480741568091309) + full_loop_B.t43_j *
                 0.00043949744689109537) - full_loop_B.t24_m *
                0.01492093832195269) + out1_tmp_0 * 3.0773187466495261E-5) -
              full_loop_B.t41_m * 0.022480741568091309) + full_loop_B.t26_l *
             0.0001056006411490808) + 0.015907979386380281;
  out1[9] = (((((((((((((((((((((((((((((((((((((((((((((((in2[0] *
    -1.79300452890001E-6 - in2[1] * 5.4825030165754691E-18) + in2[2] *
    1.8162903019915721E-6) + in2[3] * 1.808528377624063E-6) - in2[4] *
    0.019674446043184569) + in2[5] * 0.019822798417882322) - in2[6] *
    0.020568381500651611) + in2[7] * 0.020420029125953861) + full_loop_B.t8_k *
    1.177970365072619) + full_loop_B.t9_g * 1.177970365072619) - in2[0] *
    1.4142135623730951 * 5.0057116428075682E-5) + in2[1] * 1.4142135623730951 *
    6.7950818844537625E-5) - in2[2] * 1.4142135623730951 * 5.0057116428075682E-5)
    + in2[3] * 1.4142135623730951 * 6.9224153014972465E-5) + full_loop_B.t12_tmp
    * 0.035009023783539713) + full_loop_B.t13_tmp * 0.1997752778025354) +
    full_loop_B.t14_tmp * 0.1997752778025354) - full_loop_B.t15_tmp *
    0.035009023783539713) + full_loop_B.t11_p * 0.00023972120661313559) +
    full_loop_B.t12_f * 0.0023446008892116159) + full_loop_B.t13_m *
    0.020116314756949891) - full_loop_B.t14 * 3.0773187466495261E-5) +
    full_loop_B.t15 * 0.00040981318977277321) - full_loop_B.t16 *
    5.4885093553225614E-6) - full_loop_B.t17_a * 0.00040981318977277321) +
    full_loop_B.t18_h * 0.0010447497144875141) + full_loop_B.t19_d *
    5.4885093553225614E-6) + full_loop_B.out1_tmp * 0.020116314756949891) -
    full_loop_B.out1_tmp_l * 7.0610075585606938E-6) + full_loop_B.t69_d *
    0.0023446008892116159) - full_loop_B.out1_tmp_f * 0.68294888599844894) -
    full_loop_B.out1_tmp_lt * 5.4885093553225614E-6) - full_loop_B.t62 *
    0.00040981318977277321) - full_loop_B.out1_tmp_l3 * 7.0610075585606938E-6) -
    full_loop_B.out1_tmp_f4 * 3.0773187466495261E-5) - full_loop_B.t70 *
    0.0023446008892116159) - full_loop_B.t52 * 0.079599200188734356) +
                       full_loop_B.out1_tmp_g * 7.0610075585606938E-6) -
                      full_loop_B.t63_h * 5.4885093553225614E-6) -
                     full_loop_B.t45_i * 0.00040981318977277321) +
                    full_loop_B.t55_i * 0.01391315779278565) + out1_tmp *
                   3.0773187466495261E-5) + full_loop_B.t28_j *
                  0.0023446008892116159) - full_loop_B.t43_j *
                 5.4885093553225614E-6) + full_loop_B.t24_m *
                0.0001863348926132009) - out1_tmp_0 * 0.020116314756949891) +
              full_loop_B.t41_m * 0.0023446008892116159) - full_loop_B.t26_l *
             0.00040981318977277321) - 0.58898518253630927;
  out1[10] = (((((((((((((((((((((((((((((((((((((((((((((((in2[0] *
    0.001318503530423044 + in2[1] * 6.3899782853254686E-19) - in2[2] *
    0.00133562695289607) - in2[3] * 0.001329919145405061) - in2[4] *
    0.26801378237038109) + in2[5] * 0.26510017838343369) + in2[6] *
    0.27957028217008012) - in2[7] * 0.27665667818313278) - full_loop_B.t8_k *
    2.4240493550091831) - full_loop_B.t9_g * 2.4240493550091831) + in2[0] *
    1.4142135623730951 * 0.043377251618131517) - in2[1] * 1.4142135623730951 *
    0.04282486018388474) + in2[2] * 1.4142135623730951 * 0.043377251618131517) -
    in2[3] * 1.4142135623730951 * 0.043761219000647882) - full_loop_B.t12_tmp *
    0.68189563025282618) - full_loop_B.t13_tmp * 145.94175899422879) -
    full_loop_B.t14_tmp * 145.94175899422879) + full_loop_B.t15_tmp *
    0.68189563025282618) - full_loop_B.t11_p * 0.0044523701890921046) -
    full_loop_B.t12_f * 1.7128001904198551) - full_loop_B.t13_m *
    0.0023446008892116159) + full_loop_B.t14 * 0.022480741568091309) -
    full_loop_B.t15 * 0.0080486297981970222) + full_loop_B.t16 *
    0.0040360293825997314) + full_loop_B.t17_a * 0.0080486297981970222) -
    full_loop_B.t18_h * 0.76322117623669983) - full_loop_B.t19_d *
    0.0040360293825997314) - full_loop_B.out1_tmp * 0.0023446008892116159) +
    full_loop_B.out1_tmp_l * 0.0001311449245682505) - full_loop_B.t69_d *
    1.7128001904198551) + full_loop_B.out1_tmp_f * 0.079599200188734356) +
    full_loop_B.out1_tmp_lt * 0.0040360293825997314) + full_loop_B.t62 *
    0.0080486297981970222) + full_loop_B.out1_tmp_l3 * 0.0001311449245682505) +
    full_loop_B.out1_tmp_f4 * 0.022480741568091309) + full_loop_B.t70 *
    1.7128001904198551) + full_loop_B.t52 * 58.149566464754074) -
                        full_loop_B.out1_tmp_g * 0.0001311449245682505) +
                       full_loop_B.t63_h * 0.0040360293825997314) +
                      full_loop_B.t45_i * 0.0080486297981970222) -
                     full_loop_B.t55_i * 0.27325098164878892) - out1_tmp *
                    0.022480741568091309) - full_loop_B.t28_j *
                   1.7128001904198551) + full_loop_B.t43_j *
                  0.0040360293825997314) - full_loop_B.t24_m *
                 0.1370231975392609) + out1_tmp_0 * 0.0023446008892116159) -
               full_loop_B.t41_m * 1.7128001904198551) + full_loop_B.t26_l *
              0.0080486297981970222) + 1.2120246775045911;
  out1[11] = (((((((((((((((((((((((((((((((((((((((((((((((in2[0] *
    1.116645188080143E-5 - in2[1] * 1.116905395599563E-19) - in2[2] *
    1.131147073639648E-5) - in2[3] * 1.1263131117864871E-5) + in2[4] *
    0.1059865723986993) + in2[5] * 0.10544707069616829) - in2[6] *
    0.1080065349719949) - in2[7] * 0.1034271081228726) + full_loop_B.t8_k *
    0.42370000067558827) + full_loop_B.t9_g * 0.42370000067558827) + in2[0] *
    1.4142135623730951 * 0.01344626169736146) + in2[1] * 1.4142135623730951 *
    0.01386370341841576) + in2[2] * 1.4142135623730951 * 0.01344626169736146) +
    in2[3] * 1.4142135623730951 * 0.013855773363296979) + full_loop_B.t12_tmp *
    49.906640492239639) + full_loop_B.t13_tmp * 0.68575814418325065) +
    full_loop_B.t14_tmp * 0.68575814418325065) - full_loop_B.t15_tmp *
    49.906640492239639) + full_loop_B.t11_p * 0.34216502492967421) +
    full_loop_B.t12_f * 0.0080486297981970222) + full_loop_B.t13_m *
    0.00040981318977277321) - full_loop_B.t14 * 0.0001056006411490808) +
    full_loop_B.t15 * 0.58407083727863973) + full_loop_B.t16 *
    3.4181272063671217E-5) - full_loop_B.t17_a * 0.58407083727863973) +
    full_loop_B.t18_h * 0.0035851417670112952) - full_loop_B.t19_d *
    3.4181272063671217E-5) + full_loop_B.out1_tmp * 0.00040981318977277321) -
    full_loop_B.out1_tmp_l * 0.0100784985251745) + full_loop_B.t69_d *
    0.0080486297981970222) - full_loop_B.out1_tmp_f * 0.01391315779278565) +
    full_loop_B.out1_tmp_lt * 3.4181272063671217E-5) - full_loop_B.t62 *
    0.58407083727863973) - full_loop_B.out1_tmp_l3 * 0.0100784985251745) -
    full_loop_B.out1_tmp_f4 * 0.0001056006411490808) - full_loop_B.t70 *
    0.0080486297981970222) - full_loop_B.t52 * 0.27325098164878892) +
                        full_loop_B.out1_tmp_g * 0.0100784985251745) +
                       full_loop_B.t63_h * 3.4181272063671217E-5) -
                      full_loop_B.t45_i * 0.58407083727863973) +
                     full_loop_B.t55_i * 19.829204925609819) + out1_tmp *
                    0.0001056006411490808) + full_loop_B.t28_j *
                   0.0080486297981970222) + full_loop_B.t43_j *
                  3.4181272063671217E-5) - full_loop_B.t24_m *
                 0.0011604541865616381) - out1_tmp_0 * 0.00040981318977277321) +
               full_loop_B.t41_m * 0.0080486297981970222) - full_loop_B.t26_l *
              0.58407083727863973) - 0.21185000033779419;
  out1[12] = (((((((((((((((((((((((((((((((((((((((((((((((in2[0] *
    -0.17319552077939579 - in2[1] * 1.4958390470929921E-21) + in2[2] *
    0.1754448132570503) + in2[3] * 0.17469504909783209) + in2[4] *
    0.00062201547474137432) - in2[5] * 0.00063438909522841322) - in2[6] *
    0.000649068248438291) + in2[7] * 0.00066144186892532939) + full_loop_B.t8_k *
    0.0056744913916693084) + full_loop_B.t9_g * 0.0056744913916693084) + in2[0] *
    1.4142135623730951 * 0.000598031999464489) - in2[1] * 1.4142135623730951 *
    0.1225810501024604) + in2[2] * 1.4142135623730951 * 0.000598031999464489) +
    in2[3] * 1.4142135623730951 * 0.00041684043305977638) - full_loop_B.t12_tmp *
    0.76855397519720636) + full_loop_B.t13_tmp * 0.71959977371277994) +
    full_loop_B.t14_tmp * 0.71959977371277994) + full_loop_B.t15_tmp *
    0.76855397519720636) - full_loop_B.t11_p * 0.034529188152138762) +
    full_loop_B.t12_f * 0.0040360293825997314) + full_loop_B.t13_m *
    5.4885093553225614E-6) - full_loop_B.t14 * 0.00043949744689109537) -
    full_loop_B.t15 * 3.4181272063671217E-5) - full_loop_B.t16 *
    0.53016332127379384) + full_loop_B.t17_a * 3.4181272063671217E-5) +
    full_loop_B.t18_h * 0.01492093832195269) + full_loop_B.t19_d *
    0.53016332127379384) + full_loop_B.out1_tmp * 5.4885093553225614E-6) +
    full_loop_B.out1_tmp_l * 0.00101706003393634) + full_loop_B.t69_d *
    0.0040360293825997314) - full_loop_B.out1_tmp_f * 0.0001863348926132009) -
    full_loop_B.out1_tmp_lt * 0.53016332127379384) + full_loop_B.t62 *
    3.4181272063671217E-5) + full_loop_B.out1_tmp_l3 * 0.00101706003393634) -
    full_loop_B.out1_tmp_f4 * 0.00043949744689109537) - full_loop_B.t70 *
    0.0040360293825997314) - full_loop_B.t52 * 0.1370231975392609) -
                        full_loop_B.out1_tmp_g * 0.00101706003393634) -
                       full_loop_B.t63_h * 0.53016332127379384) +
                      full_loop_B.t45_i * 3.4181272063671217E-5) -
                     full_loop_B.t55_i * 0.0011604541865616381) + out1_tmp *
                    0.00043949744689109537) + full_loop_B.t28_j *
                   0.0040360293825997314) - full_loop_B.t43_j *
                  0.53016332127379384) + full_loop_B.t24_m * 17.9990447572453) -
                out1_tmp_0 * 5.4885093553225614E-6) + full_loop_B.t41_m *
               0.0040360293825997314) + full_loop_B.t26_l *
              3.4181272063671217E-5) - 0.0028372456958346542;
}

// Function for MATLAB Function: '<S60>/NLMPC'
void full_loopModelClass::full_loop_stateEvolution(const real_T X[65], const
  real_T U[40], real_T c[52], real_T J[3588])
{
  int32_T i;
  int32_T i_0;
  int32_T i_1;
  int32_T c_tmp;
  int32_T a_tmp;
  static const int8_T Iz2u[512] = { 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 1 };

  static const real_T a[169] = { 0.125, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.125, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.125, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.125, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.125, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.125, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.125, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.125, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.125, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.125, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.125, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.125, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.125 };

  static const int8_T b[169] = { 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 };

  std::memset(&full_loop_B.Jx_m[0], 0, 2704U * sizeof(real_T));
  std::memset(&full_loop_B.Jmv[0], 0, 1664U * sizeof(real_T));
  std::memset(&c[0], 0, 52U * sizeof(real_T));
  for (i_0 = 0; i_0 < 13; i_0++) {
    full_loop_B.ic_n[i_0] = static_cast<real_T>(i_0) + 1.0;
  }

  full_loop_eye(full_loop_B.Ix);
  for (i = 0; i < 4; i++) {
    for (i_0 = 0; i_0 < 13; i_0++) {
      full_loop_B.X_ce[i_0] = X[5 * i_0 + i];
    }

    full_loop_AUVQuatJacobianMatrix(full_loop_B.X_ce, full_loop_B.Ak,
      full_loop_B.Bk);
    for (i_0 = 0; i_0 < 13; i_0++) {
      full_loop_B.X_ce[i_0] = X[(5 * i_0 + i) + 1];
    }

    full_loop_AUVQuatJacobianMatrix(full_loop_B.X_ce, full_loop_B.Ak1,
      full_loop_B.Bk1);
    for (i_0 = 0; i_0 < 13; i_0++) {
      full_loop_B.X_ce[i_0] = X[5 * i_0 + i];
    }

    for (i_0 = 0; i_0 < 8; i_0++) {
      full_loop_B.U_om[i_0] = U[5 * i_0 + i];
    }

    full_loop_AUVQuatSimFcn(full_loop_B.X_ce, full_loop_B.U_om, full_loop_B.dv23);
    for (i_0 = 0; i_0 < 13; i_0++) {
      full_loop_B.X_ce[i_0] = X[(5 * i_0 + i) + 1];
    }

    for (i_0 = 0; i_0 < 8; i_0++) {
      full_loop_B.U_om[i_0] = U[5 * i_0 + i];
    }

    full_loop_AUVQuatSimFcn(full_loop_B.X_ce, full_loop_B.U_om, full_loop_B.dv24);
    for (i_0 = 0; i_0 < 13; i_0++) {
      c_tmp = 5 * i_0 + i;
      c[static_cast<int32_T>(full_loop_B.ic_n[i_0]) - 1] = (X[c_tmp] +
        (full_loop_B.dv23[i_0] + full_loop_B.dv24[i_0]) * 0.125) - X[c_tmp + 1];
    }

    if (i + 1 > 1) {
      for (i_0 = 0; i_0 < 13; i_0++) {
        for (c_tmp = 0; c_tmp < 13; c_tmp++) {
          a_tmp = i_0 + 13 * c_tmp;
          full_loop_B.a[a_tmp] = 0.0;
          for (i_1 = 0; i_1 < 13; i_1++) {
            full_loop_B.a[a_tmp] += a[13 * i_1 + i_0] * full_loop_B.Ak[13 *
              c_tmp + i_1];
          }
        }

        for (c_tmp = 0; c_tmp < 13; c_tmp++) {
          full_loop_B.d6 = 0.0;
          for (i_1 = 0; i_1 < 13; i_1++) {
            full_loop_B.d6 += full_loop_B.a[13 * i_1 + i_0] * static_cast<real_T>
              (b[13 * c_tmp + i_1]);
          }

          full_loop_B.Jx_m[((static_cast<int32_T>(full_loop_B.ic_n[i_0]) + 52 *
                             c_tmp) + 676 * (i - 1)) - 1] = full_loop_B.Ix[13 *
            c_tmp + i_0] + full_loop_B.d6;
        }
      }
    }

    for (i_0 = 0; i_0 < 13; i_0++) {
      for (c_tmp = 0; c_tmp < 13; c_tmp++) {
        a_tmp = i_0 + 13 * c_tmp;
        full_loop_B.a[a_tmp] = 0.0;
        for (i_1 = 0; i_1 < 13; i_1++) {
          full_loop_B.a[a_tmp] += a[13 * i_1 + i_0] * full_loop_B.Ak1[13 * c_tmp
            + i_1];
        }
      }

      for (c_tmp = 0; c_tmp < 13; c_tmp++) {
        full_loop_B.d6 = 0.0;
        for (i_1 = 0; i_1 < 13; i_1++) {
          full_loop_B.d6 += full_loop_B.a[13 * i_1 + i_0] * static_cast<real_T>
            (b[13 * c_tmp + i_1]);
        }

        full_loop_B.Jx_m[((static_cast<int32_T>(full_loop_B.ic_n[i_0]) + 52 *
                           c_tmp) + 676 * i) - 1] = -full_loop_B.Ix[13 * c_tmp +
          i_0] + full_loop_B.d6;
      }
    }

    for (i_0 = 0; i_0 < 104; i_0++) {
      full_loop_B.Bk_b[i_0] = full_loop_B.Bk[i_0] + full_loop_B.Bk1[i_0];
    }

    for (i_0 = 0; i_0 < 13; i_0++) {
      for (c_tmp = 0; c_tmp < 8; c_tmp++) {
        full_loop_B.Jmv[((static_cast<int32_T>(full_loop_B.ic_n[i_0]) + 52 *
                          c_tmp) + 416 * i) - 1] = 0.0;
        for (i_1 = 0; i_1 < 13; i_1++) {
          a_tmp = ((52 * c_tmp + static_cast<int32_T>(full_loop_B.ic_n[i_0])) +
                   416 * i) - 1;
          full_loop_B.Jmv[a_tmp] += a[13 * i_1 + i_0] * full_loop_B.Bk_b[13 *
            c_tmp + i_1];
        }
      }
    }

    for (i_0 = 0; i_0 < 13; i_0++) {
      full_loop_B.ic_n[i_0] += 13.0;
    }
  }

  for (i_0 = 0; i_0 < 16; i_0++) {
    for (c_tmp = 0; c_tmp < 52; c_tmp++) {
      a_tmp = i_0 + (c_tmp << 4);
      full_loop_B.Jmv_p[a_tmp] = 0.0;
      for (i_1 = 0; i_1 < 32; i_1++) {
        full_loop_B.Jmv_p[a_tmp] += full_loop_B.Jmv[52 * i_1 + c_tmp] *
          static_cast<real_T>(Iz2u[(i_0 << 5) + i_1]);
      }
    }
  }

  for (i_0 = 0; i_0 < 52; i_0++) {
    for (c_tmp = 0; c_tmp < 52; c_tmp++) {
      J[c_tmp + 69 * i_0] = full_loop_B.Jx_m[52 * c_tmp + i_0];
    }

    std::memcpy(&J[i_0 * 69 + 52], &full_loop_B.Jmv_p[i_0 << 4], sizeof(real_T) <<
                4U);
    J[69 * i_0 + 68] = 0.0;
  }
}

// Function for MATLAB Function: '<S60>/NLMPC'
void full_loopModelClass::full_loop_all(const boolean_T x[52], boolean_T y[13])
{
  int32_T i2;
  int32_T iy;
  int32_T i;
  int32_T ix;
  boolean_T exitg1;
  for (i2 = 0; i2 < 13; i2++) {
    y[i2] = true;
  }

  i2 = 1;
  iy = -1;
  for (i = 0; i < 13; i++) {
    ix = i2;
    i2 += 4;
    iy++;
    exitg1 = false;
    while ((!exitg1) && (ix <= i2 - 1)) {
      if (!x[ix - 1]) {
        y[iy] = false;
        exitg1 = true;
      } else {
        ix++;
      }
    }
  }
}

// Function for MATLAB Function: '<S60>/NLMPC'
boolean_T full_loopModelClass::full_loop_all_l(const boolean_T x[13])
{
  boolean_T y;
  int32_T k;
  boolean_T exitg1;
  y = true;
  k = 0;
  exitg1 = false;
  while ((!exitg1) && (k < 13)) {
    if (!x[k]) {
      y = false;
      exitg1 = true;
    } else {
      k++;
    }
  }

  return y;
}

// Function for MATLAB Function: '<S60>/NLMPC'
void full_loopModelClass::full_loop_isfinite_mo(const real_T x[13], boolean_T b
  [13])
{
  int32_T i;
  for (i = 0; i < 13; i++) {
    b[i] = ((!rtIsInf(x[i])) && (!rtIsNaN(x[i])));
  }
}

// Function for MATLAB Function: '<S60>/NLMPC'
boolean_T full_loopModelClass::full_loop_any(const boolean_T x[26])
{
  boolean_T y;
  int32_T k;
  boolean_T exitg1;
  y = false;
  k = 0;
  exitg1 = false;
  while ((!exitg1) && (k <= 25)) {
    if (!x[k]) {
      k++;
    } else {
      y = true;
      exitg1 = true;
    }
  }

  return y;
}

// Function for MATLAB Function: '<S60>/NLMPC'
void full_loopModelClass::full_loop_znlmpc_reformJacobian(const real_T Jx_data[],
  const int32_T Jx_size[3], const real_T Jmv_data[], const real_T Je_data[],
  const int32_T *Je_size, real_T Jc_data[], int32_T Jc_size[2])
{
  int32_T m;
  int32_T coffset;
  int32_T boffset;
  int32_T aoffset;
  int32_T bkj;
  int32_T j;
  int32_T i;
  int32_T b_i;
  int32_T y_data_tmp;
  static const int8_T c[512] = { 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 1 };

  if (Jx_size[0] == 0) {
    Jc_size[0] = 0;
    Jc_size[1] = 0;
  } else {
    m = Jx_size[0];
    for (j = 0; j < 16; j++) {
      coffset = j * m;
      boffset = j << 5;
      for (i = 0; i < m; i++) {
        full_loop_B.y_data_o2[coffset + i] = 0.0;
      }

      for (i = 0; i < 32; i++) {
        aoffset = i * Jx_size[0];
        bkj = c[boffset + i];
        for (b_i = 1; b_i - 1 < m; b_i++) {
          y_data_tmp = (coffset + b_i) - 1;
          full_loop_B.y_data_o2[y_data_tmp] += Jmv_data[(aoffset + b_i) - 1] *
            static_cast<real_T>(bkj);
        }
      }
    }

    m = Jx_size[0];
    for (j = 0; j < m; j++) {
      for (i = 0; i < 52; i++) {
        full_loop_B.varargin_1_data[i + 52 * j] = Jx_data[m * i + j];
      }
    }

    if (0 <= *Je_size - 1) {
      std::memcpy(&full_loop_B.Je_data[0], &Je_data[0], *Je_size * sizeof(real_T));
    }

    if (Jx_size[0] == 0) {
      coffset = 1;
    } else {
      coffset = (static_cast<int8_T>(*Je_size) != 0);
    }

    i = coffset * Jx_size[0];
    for (j = 0; j < i; j++) {
      full_loop_B.reshapes[2].f1.data[j] = full_loop_B.Je_data[j];
    }

    Jc_size[0] = coffset + 68;
    Jc_size[1] = Jx_size[0];
    for (j = 0; j < m; j++) {
      for (i = 0; i < 52; i++) {
        Jc_data[i + Jc_size[0] * j] = full_loop_B.varargin_1_data[52 * j + i];
      }
    }

    for (j = 0; j < m; j++) {
      for (i = 0; i < 16; i++) {
        Jc_data[(i + Jc_size[0] * j) + 52] = full_loop_B.y_data_o2[Jx_size[0] *
          i + j];
      }
    }

    i = Jx_size[0];
    for (j = 0; j < i; j++) {
      if (0 <= coffset - 1) {
        Jc_data[Jc_size[0] * j + 68] = full_loop_B.reshapes[2].f1.data[coffset *
          j];
      }
    }
  }
}

// Function for MATLAB Function: '<S60>/NLMPC'
void full_loopModelClass::full_loop_outputBounds(const real_T
  runtimedata_OutputMin[52], const real_T runtimedata_OutputMax[52], const
  real_T X[65], real_T e, real_T c_data[], int32_T c_size[2], real_T Jc_data[],
  int32_T Jc_size[2])
{
  for (full_loop_B.partialTrueCount = 0; full_loop_B.partialTrueCount < 52;
       full_loop_B.partialTrueCount++) {
    full_loop_B.bv[full_loop_B.partialTrueCount] = rtIsInf
      (runtimedata_OutputMin[full_loop_B.partialTrueCount]);
  }

  full_loop_all(full_loop_B.bv, full_loop_B.bv1);
  for (full_loop_B.partialTrueCount = 0; full_loop_B.partialTrueCount < 52;
       full_loop_B.partialTrueCount++) {
    full_loop_B.bv[full_loop_B.partialTrueCount] = rtIsInf
      (runtimedata_OutputMax[full_loop_B.partialTrueCount]);
  }

  full_loop_all(full_loop_B.bv, full_loop_B.bv2);
  if (full_loop_all_l(full_loop_B.bv1) && full_loop_all_l(full_loop_B.bv2)) {
    c_size[0] = 0;
    c_size[1] = 0;
    Jc_size[0] = 0;
    Jc_size[1] = 0;
  } else {
    for (full_loop_B.i_de = 0; full_loop_B.i_de < 104; full_loop_B.i_de++) {
      full_loop_B.b_c[full_loop_B.i_de] = 0.0;
      full_loop_B.icf_p[full_loop_B.i_de] = true;
    }

    std::memset(&full_loop_B.Jx[0], 0, 5408U * sizeof(real_T));
    std::memset(&full_loop_B.Je[0], 0, 104U * sizeof(int8_T));
    for (full_loop_B.partialTrueCount = 0; full_loop_B.partialTrueCount < 13;
         full_loop_B.partialTrueCount++) {
      full_loop_B.ic_nh[full_loop_B.partialTrueCount] = static_cast<real_T>
        (full_loop_B.partialTrueCount) + 1.0;
    }

    for (full_loop_B.i_de = 0; full_loop_B.i_de < 4; full_loop_B.i_de++) {
      for (full_loop_B.partialTrueCount = 0; full_loop_B.partialTrueCount < 13;
           full_loop_B.partialTrueCount++) {
        full_loop_B.runtimedata_OutputMin[full_loop_B.partialTrueCount] =
          runtimedata_OutputMin[(full_loop_B.partialTrueCount << 2) +
          full_loop_B.i_de];
      }

      full_loop_isfinite_mo(full_loop_B.runtimedata_OutputMin, full_loop_B.bv1);
      for (full_loop_B.partialTrueCount = 0; full_loop_B.partialTrueCount < 13;
           full_loop_B.partialTrueCount++) {
        full_loop_B.icf_p[static_cast<int32_T>
          (full_loop_B.ic_nh[full_loop_B.partialTrueCount]) - 1] =
          full_loop_B.bv1[full_loop_B.partialTrueCount];
        full_loop_B.runtimedata_OutputMin[full_loop_B.partialTrueCount] =
          runtimedata_OutputMax[(full_loop_B.partialTrueCount << 2) +
          full_loop_B.i_de];
      }

      full_loop_isfinite_mo(full_loop_B.runtimedata_OutputMin, full_loop_B.bv1);
      for (full_loop_B.partialTrueCount = 0; full_loop_B.partialTrueCount < 13;
           full_loop_B.partialTrueCount++) {
        full_loop_B.icf_tmp = static_cast<int32_T>
          (full_loop_B.ic_nh[full_loop_B.partialTrueCount] + 13.0) - 1;
        full_loop_B.icf_p[full_loop_B.icf_tmp] =
          full_loop_B.bv1[full_loop_B.partialTrueCount];
        full_loop_B.ic[full_loop_B.partialTrueCount] = static_cast<int32_T>
          (full_loop_B.ic_nh[full_loop_B.partialTrueCount]) - 1;
        full_loop_B.ic[full_loop_B.partialTrueCount + 13] = full_loop_B.icf_tmp;
      }

      for (full_loop_B.partialTrueCount = 0; full_loop_B.partialTrueCount < 26;
           full_loop_B.partialTrueCount++) {
        full_loop_B.icf_h[full_loop_B.partialTrueCount] =
          full_loop_B.icf_p[full_loop_B.ic[full_loop_B.partialTrueCount]];
      }

      if (full_loop_any(full_loop_B.icf_h)) {
        full_loop_eye(full_loop_B.Ck);
        for (full_loop_B.partialTrueCount = 0; full_loop_B.partialTrueCount < 13;
             full_loop_B.partialTrueCount++) {
          full_loop_B.b_c[static_cast<int32_T>
            (full_loop_B.ic_nh[full_loop_B.partialTrueCount]) - 1] =
            (runtimedata_OutputMin[(full_loop_B.partialTrueCount << 2) +
             full_loop_B.i_de] - e) - X[(5 * full_loop_B.partialTrueCount +
            full_loop_B.i_de) + 1];
        }

        for (full_loop_B.partialTrueCount = 0; full_loop_B.partialTrueCount < 13;
             full_loop_B.partialTrueCount++) {
          full_loop_B.b_c[static_cast<int32_T>
            (full_loop_B.ic_nh[full_loop_B.partialTrueCount] + 13.0) - 1] = (X
            [(5 * full_loop_B.partialTrueCount + full_loop_B.i_de) + 1] -
            runtimedata_OutputMax[(full_loop_B.partialTrueCount << 2) +
            full_loop_B.i_de]) - e;
          for (full_loop_B.icf_tmp = 0; full_loop_B.icf_tmp < 13;
               full_loop_B.icf_tmp++) {
            full_loop_B.Jx[((static_cast<int32_T>
                             (full_loop_B.ic_nh[full_loop_B.icf_tmp]) + 104 *
                             full_loop_B.partialTrueCount) + 1352 *
                            full_loop_B.i_de) - 1] = -full_loop_B.Ck[13 *
              full_loop_B.partialTrueCount + full_loop_B.icf_tmp];
          }
        }

        for (full_loop_B.partialTrueCount = 0; full_loop_B.partialTrueCount < 13;
             full_loop_B.partialTrueCount++) {
          for (full_loop_B.icf_tmp = 0; full_loop_B.icf_tmp < 13;
               full_loop_B.icf_tmp++) {
            full_loop_B.Jx[((static_cast<int32_T>
                             (full_loop_B.ic_nh[full_loop_B.icf_tmp] + 13.0) +
                             104 * full_loop_B.partialTrueCount) + 1352 *
                            full_loop_B.i_de) - 1] = full_loop_B.Ck[13 *
              full_loop_B.partialTrueCount + full_loop_B.icf_tmp];
          }

          full_loop_B.Je[static_cast<int32_T>
            (full_loop_B.ic_nh[full_loop_B.partialTrueCount]) - 1] = -1;
        }

        for (full_loop_B.partialTrueCount = 0; full_loop_B.partialTrueCount < 13;
             full_loop_B.partialTrueCount++) {
          full_loop_B.Je[static_cast<int32_T>
            (full_loop_B.ic_nh[full_loop_B.partialTrueCount] + 13.0) - 1] = -1;
        }
      }

      for (full_loop_B.partialTrueCount = 0; full_loop_B.partialTrueCount < 13;
           full_loop_B.partialTrueCount++) {
        full_loop_B.ic_nh[full_loop_B.partialTrueCount] += 26.0;
      }
    }

    full_loop_B.i_de = 0;
    full_loop_B.partialTrueCount = 0;
    for (full_loop_B.icf_tmp = 0; full_loop_B.icf_tmp < 104; full_loop_B.icf_tmp
         ++) {
      if (full_loop_B.icf_p[full_loop_B.icf_tmp]) {
        full_loop_B.i_de++;
        full_loop_B.b_data_b[full_loop_B.partialTrueCount] = static_cast<int8_T>
          (full_loop_B.icf_tmp + 1);
        full_loop_B.partialTrueCount++;
      }
    }

    c_size[0] = full_loop_B.i_de;
    c_size[1] = 1;
    for (full_loop_B.partialTrueCount = 0; full_loop_B.partialTrueCount <
         full_loop_B.i_de; full_loop_B.partialTrueCount++) {
      c_data[full_loop_B.partialTrueCount] =
        full_loop_B.b_c[full_loop_B.b_data_b[full_loop_B.partialTrueCount] - 1];
    }

    full_loop_B.i_de = 0;
    full_loop_B.partialTrueCount = 0;
    for (full_loop_B.icf_tmp = 0; full_loop_B.icf_tmp < 104; full_loop_B.icf_tmp
         ++) {
      if (full_loop_B.icf_p[full_loop_B.icf_tmp]) {
        full_loop_B.i_de++;
        full_loop_B.d_data_p[full_loop_B.partialTrueCount] = static_cast<int8_T>
          (full_loop_B.icf_tmp + 1);
        full_loop_B.partialTrueCount++;
      }
    }

    full_loop_B.Jx_size[0] = full_loop_B.i_de;
    full_loop_B.Jx_size[1] = 13;
    full_loop_B.Jx_size[2] = 4;
    for (full_loop_B.partialTrueCount = 0; full_loop_B.partialTrueCount < 4;
         full_loop_B.partialTrueCount++) {
      for (full_loop_B.icf_tmp = 0; full_loop_B.icf_tmp < 13;
           full_loop_B.icf_tmp++) {
        for (full_loop_B.i7 = 0; full_loop_B.i7 < full_loop_B.i_de;
             full_loop_B.i7++) {
          full_loop_B.Jx_data[(full_loop_B.i7 + full_loop_B.i_de *
                               full_loop_B.icf_tmp) + full_loop_B.i_de * 13 *
            full_loop_B.partialTrueCount] = full_loop_B.Jx[((104 *
            full_loop_B.icf_tmp + full_loop_B.d_data_p[full_loop_B.i7]) + 1352 *
            full_loop_B.partialTrueCount) - 1];
        }
      }

      for (full_loop_B.icf_tmp = 0; full_loop_B.icf_tmp < 8; full_loop_B.icf_tmp
           ++) {
        for (full_loop_B.i7 = 0; full_loop_B.i7 < full_loop_B.i_de;
             full_loop_B.i7++) {
          full_loop_B.tmp_data_c[(full_loop_B.i7 + full_loop_B.i_de *
            full_loop_B.icf_tmp) + (full_loop_B.i_de << 3) *
            full_loop_B.partialTrueCount] = 0.0;
        }
      }
    }

    full_loop_B.Je_size = full_loop_B.i_de;
    for (full_loop_B.partialTrueCount = 0; full_loop_B.partialTrueCount <
         full_loop_B.i_de; full_loop_B.partialTrueCount++) {
      full_loop_B.b_c[full_loop_B.partialTrueCount] =
        full_loop_B.Je[full_loop_B.d_data_p[full_loop_B.partialTrueCount] - 1];
    }

    full_loop_znlmpc_reformJacobian(full_loop_B.Jx_data, full_loop_B.Jx_size,
      full_loop_B.tmp_data_c, full_loop_B.b_c, &full_loop_B.Je_size, Jc_data,
      Jc_size);
  }
}

// Function for MATLAB Function: '<S60>/NLMPC'
void full_loopModelClass::full_loop___anon_fcn(const real_T runtimedata_x[13],
  const real_T runtimedata_OutputMin[52], const real_T runtimedata_OutputMax[52],
  const real_T z[69], real_T varargout_1_data[], int32_T varargout_1_size[2],
  real_T varargout_2[52], real_T varargout_3_data[], int32_T varargout_3_size[2],
  real_T varargout_4[3588])
{
  full_loop_znlmpc_getXUe(z, runtimedata_x, full_loop_B.X_l, full_loop_B.U_o,
    &full_loop_B.e_l);
  full_loop_stateEvolution(full_loop_B.X_l, full_loop_B.U_o, varargout_2,
    varargout_4);
  full_loop_outputBounds(runtimedata_OutputMin, runtimedata_OutputMax,
    full_loop_B.X_l, full_loop_B.e_l, full_loop_B.c_data_n, full_loop_B.c_size_c,
    full_loop_B.Jc_data, full_loop_B.Jc_size_a);
  full_loop_B.result_c = ((full_loop_B.c_size_c[0] != 0) &&
    (full_loop_B.c_size_c[1] != 0));
  if ((full_loop_B.Jc_size_a[0] != 0) && (full_loop_B.Jc_size_a[1] != 0)) {
    full_loop_B.c_result = full_loop_B.Jc_size_a[0];
  } else {
    full_loop_B.c_result = 0;
  }

  if (full_loop_B.result_c == 0) {
    full_loop_B.result_idx_0 = full_loop_B.c_size_c[0];
  } else if ((full_loop_B.c_size_c[0] != 0) && (full_loop_B.c_size_c[1] != 0)) {
    full_loop_B.result_idx_0 = full_loop_B.c_size_c[0];
  } else {
    full_loop_B.result_idx_0 = 0;
  }

  varargout_1_size[0] = full_loop_B.result_idx_0;
  varargout_1_size[1] = full_loop_B.result_c;
  if ((0 <= full_loop_B.result_c - 1) && (0 <= full_loop_B.result_idx_0 - 1)) {
    std::memcpy(&varargout_1_data[0], &full_loop_B.c_data_n[0],
                full_loop_B.result_idx_0 * sizeof(real_T));
  }

  varargout_3_size[0] = full_loop_B.c_result;
  if (full_loop_B.c_result == 0) {
    varargout_3_size[1] = full_loop_B.Jc_size_a[1];
    full_loop_B.result_c = full_loop_B.Jc_size_a[1];
  } else if ((full_loop_B.Jc_size_a[0] != 0) && (full_loop_B.Jc_size_a[1] != 0))
  {
    varargout_3_size[1] = full_loop_B.Jc_size_a[1];
    full_loop_B.result_c = full_loop_B.Jc_size_a[1];
  } else {
    varargout_3_size[1] = 0;
    full_loop_B.result_c = 0;
  }

  full_loop_B.c_result = full_loop_B.c_result * full_loop_B.result_c - 1;
  if (0 <= full_loop_B.c_result) {
    std::memcpy(&varargout_3_data[0], &full_loop_B.Jc_data[0],
                (full_loop_B.c_result + 1) * sizeof(real_T));
  }
}

// Function for MATLAB Function: '<S60>/NLMPC'
int32_T full_loopModelClass::full_loop_checkNonlinearInputs(const real_T x0[69],
  const real_T nonlcon_tunableEnvironment_f1_x[13], const real_T
  nonlcon_tunableEnvironment_f1_O[52], const real_T
  nonlcon_tunableEnvironment_f1_0[52])
{
  int32_T mNonlinIneq;
  full_loop___anon_fcn(nonlcon_tunableEnvironment_f1_x,
                       nonlcon_tunableEnvironment_f1_O,
                       nonlcon_tunableEnvironment_f1_0, x0,
                       full_loop_B.varargout_1_data_i,
                       full_loop_B.varargout_1_size_a, full_loop_B.varargout_2_j,
                       full_loop_B.varargout_3_data,
                       full_loop_B.varargout_3_size_p, full_loop_B.varargout_4);
  mNonlinIneq = full_loop_B.varargout_1_size_a[0] *
    full_loop_B.varargout_1_size_a[1];
  return mNonlinIneq;
}

// Function for MATLAB Function: '<S60>/NLMPC'
void full_loopModelClass::full_loop_factoryConstruct(int32_T nVarMax, int32_T
  mConstrMax, int32_T mIneq, int32_T mNonlinIneq,
  s_ZxHOyfVSozxr6pSGbgUCkF_full_T *obj)
{
  obj->nVarMax = nVarMax;
  obj->mNonlinIneq = mNonlinIneq;
  obj->mNonlinEq = 52;
  obj->mIneq = mIneq;
  obj->mEq = 52;
  obj->iNonIneq0 = (mIneq - mNonlinIneq) + 1;
  obj->iNonEq0 = 1;
  obj->sqpFval = 0.0;
  obj->sqpFval_old = 0.0;
  obj->cIneq.size = mIneq;
  obj->cIneq_old.size = mIneq;
  obj->grad.size = nVarMax;
  obj->grad_old.size = nVarMax;
  obj->FunctionEvaluations = 0;
  obj->sqpIterations = 0;
  obj->sqpExitFlag = 0;
  obj->lambdasqp.size = mConstrMax;
  if (0 <= mConstrMax - 1) {
    std::memset(&obj->lambdasqp.data[0], 0, mConstrMax * sizeof(real_T));
  }

  obj->lambdasqp_old.size = mConstrMax;
  obj->steplength = 1.0;
  obj->delta_x.size = nVarMax;
  if (0 <= nVarMax - 1) {
    std::memset(&obj->delta_x.data[0], 0, nVarMax * sizeof(real_T));
  }

  obj->socDirection.size = nVarMax;
  obj->lambda_old.size = mConstrMax;
  obj->workingset_old.size = mConstrMax;
  if (mNonlinIneq > 0) {
    obj->JacCineqTrans_old.size[0] = nVarMax;
    obj->JacCineqTrans_old.size[1] = mNonlinIneq;
  } else {
    obj->JacCineqTrans_old.size[0] = 0;
    obj->JacCineqTrans_old.size[1] = 0;
  }

  obj->JacCeqTrans_old.size[0] = nVarMax;
  obj->JacCeqTrans_old.size[1] = 52;
  obj->gradLag.size = nVarMax;
  obj->delta_gradLag.size = nVarMax;
  obj->xstar.size = nVarMax;
  obj->fstar = 0.0;
  obj->firstorderopt = 0.0;
  obj->lambda.size = mConstrMax;
  if (0 <= mConstrMax - 1) {
    std::memset(&obj->lambda.data[0], 0, mConstrMax * sizeof(real_T));
  }

  obj->state = 0;
  obj->maxConstr = 0.0;
  obj->iterations = 0;
  obj->searchDir.size = nVarMax;
}

// Function for MATLAB Function: '<S60>/NLMPC'
void full_loopModelClass::full_loop_xcopy(const real_T x[69], real_T y[69])
{
  std::memcpy(&y[0], &x[0], 69U * sizeof(real_T));
}

// Function for MATLAB Function: '<S60>/NLMPC'
void full_loopModelClass::full_loop_factoryConstruct_c(const
  s_A0rUWcsbMx3S06V1NlippE_full_T *objfun_tunableEnvironment_f1, const
  sACkMJ1zT2VJOHR6eMwwEPC_full__T *objfun_tunableEnvironment_f2, const
  s_A0rUWcsbMx3S06V1NlippE_full_T *nonlcon_tunableEnvironment_f1, const
  sACkMJ1zT2VJOHR6eMwwEPC_full__T *nonlcon_tunableEnvironment_f2, int32_T mCineq,
  s_siHoaqeHIV5TpidUajpsGD_full_T *obj)
{
  obj->objfun.tunableEnvironment.f1 = *objfun_tunableEnvironment_f1;
  obj->objfun.tunableEnvironment.f2 = *objfun_tunableEnvironment_f2;
  obj->nonlcon.tunableEnvironment.f1 = *nonlcon_tunableEnvironment_f1;
  obj->nonlcon.tunableEnvironment.f2 = *nonlcon_tunableEnvironment_f2;
  obj->nVar = 69;
  obj->mCineq = mCineq;
  obj->mCeq = 52;
  obj->NonFiniteSupport = true;
  obj->SpecifyObjectiveGradient = true;
  obj->SpecifyConstraintGradient = true;
  obj->ScaleProblem = false;
}

// Function for MATLAB Function: '<S60>/NLMPC'
void full_loopModelClass::full_loop_compressBounds(int32_T indexLB[69], const
  real_T lb[69], int32_T *mLB, int32_T *mUB, int32_T *mFixed)
{
  int32_T idx;
  *mLB = 0;
  *mUB = 0;
  *mFixed = 0;
  for (idx = 0; idx < 69; idx++) {
    if ((!rtIsInf(lb[idx])) && (!rtIsNaN(lb[idx]))) {
      (*mLB)++;
      indexLB[*mLB - 1] = idx + 1;
    }
  }
}

// Function for MATLAB Function: '<S60>/NLMPC'
void full_loopModelClass::full_lo_factoryConstruct_cntp2b(int32_T mIneq, int32_T
  mLinIneq, const real_T Aineq_data[], const int32_T Aineq_size[2], int32_T mLB,
  const int32_T indexLB[69], int32_T mUB, const int32_T indexUB[69], int32_T
  mFixed, const int32_T indexFixed[69], int32_T nVarMax, int32_T mConstrMax,
  s_Mspqy2ajbjhxqxIYYuZUwC_full_T *obj)
{
  int32_T d_k;
  int32_T e_k;
  int32_T obj_tmp[5];
  int32_T i;
  e_k = mIneq + mLB;
  d_k = ((e_k + mUB) + mFixed) + 52;
  obj->mConstr = d_k;
  obj->mConstrOrig = d_k;
  obj->mConstrMax = mConstrMax;
  obj->nVar = 69;
  obj->nVarOrig = 69;
  obj->nVarMax = nVarMax;
  obj->ldA = nVarMax;
  if (mIneq > 0) {
    obj->Aineq.size[0] = nVarMax;
    obj->Aineq.size[1] = mIneq;
    obj->bineq.size[0] = mIneq;
    obj->bineq.size[1] = 1;
  } else {
    obj->Aineq.size[0] = 0;
    obj->Aineq.size[1] = 0;
    obj->bineq.size[0] = 0;
    obj->bineq.size[1] = 0;
  }

  obj->Aeq.size[0] = nVarMax;
  obj->Aeq.size[1] = 52;
  obj->lb.size = nVarMax;
  obj->ub.size = nVarMax;
  obj->indexLB.size = nVarMax;
  obj->indexUB.size = nVarMax;
  obj->indexFixed.size = nVarMax;
  obj->mEqRemoved = 0;
  obj->ATwset.size[0] = nVarMax;
  obj->ATwset.size[1] = mConstrMax;
  obj->bwset.size = mConstrMax;
  obj->nActiveConstr = 0;
  obj->maxConstrWorkspace.size = mConstrMax;
  obj_tmp[0] = mFixed;
  obj_tmp[1] = 52;
  obj_tmp[2] = mIneq;
  obj_tmp[3] = mLB;
  obj_tmp[4] = mUB;
  for (i = 0; i < 5; i++) {
    obj->sizes[i] = obj_tmp[i];
    obj->sizesNormal[i] = obj_tmp[i];
  }

  obj->sizesPhaseOne[0] = mFixed;
  obj->sizesPhaseOne[1] = 52;
  obj->sizesPhaseOne[2] = mIneq;
  obj->sizesPhaseOne[3] = mLB + 1;
  obj->sizesPhaseOne[4] = mUB;
  obj->sizesRegularized[0] = mFixed;
  obj->sizesRegularized[1] = 52;
  obj->sizesRegularized[2] = mIneq;
  d_k = e_k + 104;
  obj->sizesRegularized[3] = d_k;
  obj->sizesRegularized[4] = mUB;
  obj->sizesRegPhaseOne[0] = mFixed;
  obj->sizesRegPhaseOne[1] = 52;
  obj->sizesRegPhaseOne[2] = mIneq;
  e_k += 105;
  obj->sizesRegPhaseOne[3] = e_k;
  obj->sizesRegPhaseOne[4] = mUB;
  full_loop_B.x_tmp_b[0] = 1;
  full_loop_B.x_tmp_b[1] = mFixed;
  full_loop_B.x_tmp_b[2] = 52;
  full_loop_B.x_tmp_b[3] = mIneq;
  full_loop_B.x_tmp_b[4] = mLB;
  full_loop_B.x_tmp_b[5] = mUB;
  for (i = 0; i < 6; i++) {
    full_loop_B.x_g[i] = full_loop_B.x_tmp_b[i];
  }

  for (i = 0; i < 5; i++) {
    full_loop_B.x_g[i + 1] += full_loop_B.x_g[i];
  }

  for (i = 0; i < 6; i++) {
    obj->isActiveIdx[i] = full_loop_B.x_g[i];
    full_loop_B.x_g[i] = full_loop_B.x_tmp_b[i];
  }

  for (i = 0; i < 5; i++) {
    full_loop_B.x_g[i + 1] += full_loop_B.x_g[i];
  }

  for (i = 0; i < 6; i++) {
    obj->isActiveIdxNormal[i] = full_loop_B.x_g[i];
  }

  full_loop_B.x_g[0] = 1;
  full_loop_B.x_g[1] = mFixed;
  full_loop_B.x_g[2] = 52;
  full_loop_B.x_g[3] = mIneq;
  full_loop_B.x_g[4] = mLB + 1;
  full_loop_B.x_g[5] = mUB;
  for (i = 0; i < 5; i++) {
    full_loop_B.x_g[i + 1] += full_loop_B.x_g[i];
  }

  for (i = 0; i < 6; i++) {
    obj->isActiveIdxPhaseOne[i] = full_loop_B.x_g[i];
  }

  full_loop_B.x_g[0] = 1;
  full_loop_B.x_g[1] = mFixed;
  full_loop_B.x_g[2] = 52;
  full_loop_B.x_g[3] = mIneq;
  full_loop_B.x_g[4] = d_k;
  full_loop_B.x_g[5] = mUB;
  for (d_k = 0; d_k < 5; d_k++) {
    full_loop_B.x_g[d_k + 1] += full_loop_B.x_g[d_k];
  }

  for (i = 0; i < 6; i++) {
    obj->isActiveIdxRegularized[i] = full_loop_B.x_g[i];
  }

  full_loop_B.x_g[0] = 1;
  full_loop_B.x_g[1] = mFixed;
  full_loop_B.x_g[2] = 52;
  full_loop_B.x_g[3] = mIneq;
  full_loop_B.x_g[4] = e_k;
  full_loop_B.x_g[5] = mUB;
  for (e_k = 0; e_k < 5; e_k++) {
    full_loop_B.x_g[e_k + 1] += full_loop_B.x_g[e_k];
  }

  for (i = 0; i < 6; i++) {
    obj->isActiveIdxRegPhaseOne[i] = full_loop_B.x_g[i];
  }

  obj->isActiveConstr.size = mConstrMax;
  obj->Wid.size = mConstrMax;
  obj->Wlocalidx.size = mConstrMax;
  for (i = 0; i < 5; i++) {
    obj->nWConstr[i] = 0;
  }

  obj->probType = 3;
  obj->SLACK0 = 1.0E-5;
  if (mIneq > 0) {
    for (d_k = 0; d_k < mLinIneq; d_k++) {
      for (e_k = 0; e_k < 69; e_k++) {
        obj->Aineq.data[e_k + obj->Aineq.size[0] * d_k] = Aineq_data[Aineq_size
          [0] * e_k + d_k];
      }
    }
  }

  for (e_k = 0; e_k < mLB; e_k++) {
    obj->indexLB.data[e_k] = indexLB[e_k];
  }

  for (e_k = 0; e_k < mUB; e_k++) {
    obj->indexUB.data[e_k] = indexUB[e_k];
  }

  for (e_k = 0; e_k < mFixed; e_k++) {
    obj->indexFixed.data[e_k] = indexFixed[e_k];
  }
}

// Function for MATLAB Function: '<S60>/NLMPC'
void full_loopModelClass::full_loop_quadraticObjective(const real_T
  runtimedata_lastMV[8], const real_T runtimedata_ref[52], const real_T
  runtimedata_OutputWeights[52], const real_T runtimedata_MVWeights[32], const
  real_T runtimedata_MVRateWeights[32], const real_T runtimedata_MVScaledTarget
  [32], const real_T X[65], const real_T U[40], real_T e, real_T *f, real_T gfx
  [52], real_T gfu[32], real_T *gfe)
{
  int32_T i;
  int32_T i_0;
  real_T wtYerr;
  real_T wtYerr_0;
  real_T duk;
  int32_T runtimedata_OutputWeights_tmp;
  static const int8_T b[169] = { 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 };

  std::memset(&gfx[0], 0, 52U * sizeof(real_T));
  std::memset(&gfu[0], 0, sizeof(real_T) << 5U);
  *f = 0.0;
  for (i_0 = 0; i_0 < 13; i_0++) {
    full_loop_B.ix[i_0] = static_cast<real_T>(i_0) + 1.0;
  }

  for (i_0 = 0; i_0 < 8; i_0++) {
    full_loop_B.iu[i_0] = static_cast<real_T>(i_0) + 1.0;
  }

  for (i = 0; i < 4; i++) {
    wtYerr = 0.0;
    for (i_0 = 0; i_0 < 13; i_0++) {
      runtimedata_OutputWeights_tmp = (i_0 << 2) + i;
      wtYerr_0 = (X[(5 * i_0 + i) + 1] -
                  runtimedata_ref[runtimedata_OutputWeights_tmp]) *
        runtimedata_OutputWeights[runtimedata_OutputWeights_tmp];
      wtYerr += wtYerr_0 * wtYerr_0;
      full_loop_B.wtYerr[i_0] =
        runtimedata_OutputWeights[runtimedata_OutputWeights_tmp] * wtYerr_0;
    }

    *f += wtYerr;
    for (i_0 = 0; i_0 < 13; i_0++) {
      full_loop_B.gfx_tmp[i_0] = static_cast<int32_T>(full_loop_B.ix[i_0]);
    }

    for (i_0 = 0; i_0 < 13; i_0++) {
      wtYerr = 0.0;
      for (runtimedata_OutputWeights_tmp = 0; runtimedata_OutputWeights_tmp < 13;
           runtimedata_OutputWeights_tmp++) {
        wtYerr += static_cast<real_T>(b[13 * runtimedata_OutputWeights_tmp + i_0])
          * full_loop_B.wtYerr[runtimedata_OutputWeights_tmp];
      }

      full_loop_B.gfx[i_0] = gfx[full_loop_B.gfx_tmp[i_0] - 1] + wtYerr;
    }

    for (i_0 = 0; i_0 < 13; i_0++) {
      gfx[full_loop_B.gfx_tmp[i_0] - 1] = full_loop_B.gfx[i_0];
      full_loop_B.ix[i_0] += 13.0;
    }

    for (i_0 = 0; i_0 < 8; i_0++) {
      full_loop_B.umvk[i_0] = U[5 * i_0 + i];
    }

    if (i + 1 == 1) {
      for (i_0 = 0; i_0 < 8; i_0++) {
        full_loop_B.duk[i_0] = full_loop_B.umvk[i_0] - runtimedata_lastMV[i_0];
      }
    } else {
      for (i_0 = 0; i_0 < 8; i_0++) {
        full_loop_B.duk[i_0] = full_loop_B.umvk[i_0] - U[(5 * i_0 + i) - 1];
      }
    }

    wtYerr = 0.0;
    for (i_0 = 0; i_0 < 8; i_0++) {
      runtimedata_OutputWeights_tmp = (i_0 << 2) + i;
      wtYerr_0 = (full_loop_B.umvk[i_0] -
                  runtimedata_MVScaledTarget[runtimedata_OutputWeights_tmp]) *
        runtimedata_MVWeights[runtimedata_OutputWeights_tmp];
      wtYerr += wtYerr_0 * wtYerr_0;
      full_loop_B.umvk[i_0] = wtYerr_0;
    }

    *f += wtYerr;
    for (i_0 = 0; i_0 < 8; i_0++) {
      full_loop_B.gfu_tmp[i_0] = static_cast<int32_T>(full_loop_B.iu[i_0]);
    }

    for (i_0 = 0; i_0 < 8; i_0++) {
      full_loop_B.gfu[i_0] = runtimedata_MVWeights[(i_0 << 2) + i] *
        full_loop_B.umvk[i_0] + gfu[full_loop_B.gfu_tmp[i_0] - 1];
    }

    wtYerr = 0.0;
    for (i_0 = 0; i_0 < 8; i_0++) {
      wtYerr_0 = runtimedata_MVRateWeights[(i_0 << 2) + i];
      gfu[full_loop_B.gfu_tmp[i_0] - 1] = full_loop_B.gfu[i_0];
      duk = wtYerr_0 * full_loop_B.duk[i_0];
      wtYerr += duk * duk;
      full_loop_B.umvk[i_0] = wtYerr_0 * duk;
      full_loop_B.duk[i_0] = duk;
    }

    *f += wtYerr;
    for (i_0 = 0; i_0 < 8; i_0++) {
      full_loop_B.gfu[i_0] = gfu[static_cast<int32_T>(full_loop_B.iu[i_0]) - 1]
        + full_loop_B.umvk[i_0];
    }

    for (i_0 = 0; i_0 < 8; i_0++) {
      gfu[static_cast<int32_T>(full_loop_B.iu[i_0]) - 1] = full_loop_B.gfu[i_0];
    }

    if (i + 1 > 1) {
      for (i_0 = 0; i_0 < 8; i_0++) {
        full_loop_B.gfu_tmp[i_0] = static_cast<int32_T>(full_loop_B.iu[i_0] -
          8.0);
      }

      for (i_0 = 0; i_0 < 8; i_0++) {
        full_loop_B.gfu[i_0] = gfu[full_loop_B.gfu_tmp[i_0] - 1] -
          full_loop_B.umvk[i_0];
      }

      for (i_0 = 0; i_0 < 8; i_0++) {
        gfu[full_loop_B.gfu_tmp[i_0] - 1] = full_loop_B.gfu[i_0];
      }
    }

    for (i_0 = 0; i_0 < 8; i_0++) {
      full_loop_B.iu[i_0] += 8.0;
    }
  }

  for (i_0 = 0; i_0 < 52; i_0++) {
    gfx[i_0] *= 2.0;
  }

  for (i_0 = 0; i_0 < 32; i_0++) {
    gfu[i_0] *= 2.0;
  }

  *f += 100000.0 * e * e;
  *gfe = 200000.0 * e;
}

// Function for MATLAB Function: '<S60>/NLMPC'
void full_loopModelClass::full_loop___anon_fcn_b(const real_T runtimedata_x[13],
  const real_T runtimedata_lastMV[8], const real_T runtimedata_ref[52], const
  real_T runtimedata_OutputWeights[52], const real_T runtimedata_MVWeights[32],
  const real_T runtimedata_MVRateWeights[32], const real_T
  runtimedata_MVScaledTarget[32], const real_T z[69], real_T *varargout_1,
  real_T varargout_2[69])
{
  int32_T i;
  int32_T i_0;
  static const int8_T b[512] = { 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 1 };

  full_loop_znlmpc_getXUe(z, runtimedata_x, full_loop_B.X_f, full_loop_B.U_hn,
    &full_loop_B.e_c);
  full_loop_quadraticObjective(runtimedata_lastMV, runtimedata_ref,
    runtimedata_OutputWeights, runtimedata_MVWeights, runtimedata_MVRateWeights,
    runtimedata_MVScaledTarget, full_loop_B.X_f, full_loop_B.U_hn,
    full_loop_B.e_c, varargout_1, full_loop_B.gfX, full_loop_B.gfU,
    &full_loop_B.gfE);
  for (i = 0; i < 16; i++) {
    full_loop_B.e_c = 0.0;
    for (i_0 = 0; i_0 < 32; i_0++) {
      full_loop_B.e_c += static_cast<real_T>(b[(i_0 << 4) + i]) *
        full_loop_B.gfU[i_0];
    }

    full_loop_B.b_ie[i] = full_loop_B.e_c;
  }

  std::memcpy(&varargout_2[0], &full_loop_B.gfX[0], 52U * sizeof(real_T));
  std::memcpy(&varargout_2[52], &full_loop_B.b_ie[0], sizeof(real_T) << 4U);
  varargout_2[68] = full_loop_B.gfE;
}

// Function for MATLAB Function: '<S60>/NLMPC'
void full_loopModelClass::computeObjectiveAndUserGradient(const real_T
  obj_objfun_tunableEnvironment_f[13], const real_T
  obj_objfun_tunableEnvironment_0[8], const real_T
  obj_objfun_tunableEnvironment_1[52], const real_T
  obj_objfun_tunableEnvironment_2[52], const real_T
  obj_objfun_tunableEnvironment_3[32], const real_T
  obj_objfun_tunableEnvironment_4[32], const real_T
  obj_objfun_tunableEnvironment_5[32], const real_T x[69], real_T
  grad_workspace_data[], real_T *fval, int32_T *status)
{
  boolean_T allFinite;
  int32_T idx_current;
  full_loop___anon_fcn_b(obj_objfun_tunableEnvironment_f,
    obj_objfun_tunableEnvironment_0, obj_objfun_tunableEnvironment_1,
    obj_objfun_tunableEnvironment_2, obj_objfun_tunableEnvironment_3,
    obj_objfun_tunableEnvironment_4, obj_objfun_tunableEnvironment_5, x, fval,
    full_loop_B.varargout_2);
  std::memcpy(&grad_workspace_data[0], &full_loop_B.varargout_2[0], 69U * sizeof
              (real_T));
  *status = 1;
  if (rtIsInf(*fval) || rtIsNaN(*fval)) {
    if (rtIsNaN(*fval)) {
      *status = -6;
    } else if (*fval < 0.0) {
      *status = -4;
    } else {
      *status = -5;
    }
  } else {
    allFinite = true;
    idx_current = 0;
    while (allFinite && (idx_current + 1 <= 69)) {
      allFinite = ((!rtIsInf(grad_workspace_data[idx_current])) && (!rtIsNaN
        (grad_workspace_data[idx_current])));
      idx_current++;
    }

    if (!allFinite) {
      idx_current--;
      if (rtIsNaN(grad_workspace_data[idx_current])) {
        *status = -6;
      } else if (grad_workspace_data[idx_current] < 0.0) {
        *status = -4;
      } else {
        *status = -5;
      }
    }
  }
}

// Function for MATLAB Function: '<S60>/NLMPC'
void full_loopModelClass::full_loop_xcopy_gpr(const real_T x[52], real_T y[52])
{
  std::memcpy(&y[0], &x[0], 52U * sizeof(real_T));
}

// Function for MATLAB Function: '<S60>/NLMPC'
void full_loopModelClass::full_loop_xcopy_gp(int32_T n, const real_T x_data[],
  real_T y_data[], int32_T iy0)
{
  int32_T b_k;
  for (b_k = -1; b_k < n - 1; b_k++) {
    y_data[iy0 + b_k] = x_data[b_k + 1];
  }
}

// Function for MATLAB Function: '<S60>/NLMPC'
int32_T full_loopModelClass::full_loop_checkVectorNonFinite(int32_T N, const
  real_T vec_data[], int32_T iv0)
{
  int32_T status;
  boolean_T allFinite;
  int32_T idx_current;
  int32_T idx_end;
  real_T allFinite_tmp;
  status = 1;
  allFinite = true;
  idx_current = iv0;
  idx_end = (iv0 + N) - 1;
  while (allFinite && (idx_current <= idx_end)) {
    allFinite_tmp = vec_data[idx_current - 1];
    allFinite = ((!rtIsInf(allFinite_tmp)) && (!rtIsNaN(allFinite_tmp)));
    idx_current++;
  }

  if (!allFinite) {
    idx_current -= 2;
    if (rtIsNaN(vec_data[idx_current])) {
      status = -3;
    } else if (vec_data[idx_current] < 0.0) {
      status = -1;
    } else {
      status = -2;
    }
  }

  return status;
}

// Function for MATLAB Function: '<S60>/NLMPC'
int32_T full_loopModelClass::full_loo_checkVectorNonFinite_e(const real_T vec[52])
{
  int32_T status;
  boolean_T allFinite;
  int32_T idx_current;
  status = 1;
  allFinite = true;
  idx_current = 0;
  while (allFinite && (idx_current + 1 <= 52)) {
    allFinite = ((!rtIsInf(vec[idx_current])) && (!rtIsNaN(vec[idx_current])));
    idx_current++;
  }

  if (!allFinite) {
    idx_current--;
    if (rtIsNaN(vec[idx_current])) {
      status = -3;
    } else if (vec[idx_current] < 0.0) {
      status = -1;
    } else {
      status = -2;
    }
  }

  return status;
}

// Function for MATLAB Function: '<S60>/NLMPC'
int32_T full_loopModelClass::full_loop_checkMatrixNonFinite(int32_T ncols, const
  real_T mat_data[], const int32_T mat_size[2], int32_T col0)
{
  int32_T status;
  boolean_T allFinite;
  int32_T row;
  int32_T col;
  int32_T col_end;
  real_T x;
  status = 1;
  allFinite = true;
  row = -1;
  col = col0;
  col_end = (col0 + ncols) - 1;
  while (allFinite && (col <= col_end)) {
    row = -1;
    while (allFinite && (row + 2 <= 69)) {
      x = mat_data[((col - 1) * mat_size[0] + row) + 1];
      allFinite = ((!rtIsInf(x)) && (!rtIsNaN(x)));
      row++;
    }

    col++;
  }

  if (!allFinite) {
    col -= 2;
    row += mat_size[0] * col;
    if (rtIsNaN(mat_data[row])) {
      status = -3;
    } else if (mat_data[row] < 0.0) {
      status = -1;
    } else {
      status = -2;
    }
  }

  return status;
}

// Function for MATLAB Function: '<S60>/NLMPC'
int32_T full_loopModelClass::full_loo_checkMatrixNonFinite_n(const real_T
  mat_data[], const int32_T mat_size[2])
{
  int32_T status;
  boolean_T allFinite;
  int32_T row;
  int32_T col;
  real_T x;
  status = 1;
  allFinite = true;
  row = -1;
  col = -1;
  while (allFinite && (col + 2 <= 52)) {
    row = -1;
    while (allFinite && (row + 2 <= 69)) {
      x = mat_data[((col + 1) * mat_size[0] + row) + 1];
      allFinite = ((!rtIsInf(x)) && (!rtIsNaN(x)));
      row++;
    }

    col++;
  }

  if (!allFinite) {
    row += mat_size[0] * col;
    if (rtIsNaN(mat_data[row])) {
      status = -3;
    } else if (mat_data[row] < 0.0) {
      status = -1;
    } else {
      status = -2;
    }
  }

  return status;
}

// Function for MATLAB Function: '<S60>/NLMPC'
int32_T full_loopModelClass::computeConstraintsAndUserJacobi(const real_T
  obj_nonlcon_tunableEnvironment_[13], const real_T
  obj_nonlcon_tunableEnvironmen_0[52], const real_T
  obj_nonlcon_tunableEnvironmen_1[52], int32_T obj_mCineq, const real_T x[69],
  real_T Cineq_workspace_data[], int32_T ineq0, real_T Ceq_workspace[52], real_T
  JacIneqTrans_workspace_data[], const int32_T JacIneqTrans_workspace_size[2],
  int32_T iJI_col, real_T JacEqTrans_workspace_data[], const int32_T
  JacEqTrans_workspace_size[2])
{
  int32_T status;
  if (obj_mCineq > 0) {
    full_loop___anon_fcn(obj_nonlcon_tunableEnvironment_,
                         obj_nonlcon_tunableEnvironmen_0,
                         obj_nonlcon_tunableEnvironmen_1, x,
                         full_loop_B.varargout_1_data_c,
                         full_loop_B.varargout_1_size_g,
                         full_loop_B.varargout_2_p,
                         full_loop_B.varargout_3_data_j,
                         full_loop_B.varargout_3_size, full_loop_B.varargout_4_m);
    full_loop_xcopy_gp(obj_mCineq, full_loop_B.varargout_1_data_c,
                       Cineq_workspace_data, ineq0);
    full_loop_xcopy_gpr(full_loop_B.varargout_2_p, Ceq_workspace);
    full_loop_B.c_idx_row = 0;
    while (full_loop_B.c_idx_row <= full_loop_B.varargout_3_size[0] - 1) {
      full_loop_B.c_idx_col = 0;
      while (full_loop_B.c_idx_col <= full_loop_B.varargout_3_size[1] - 1) {
        JacIneqTrans_workspace_data[full_loop_B.c_idx_row +
          JacIneqTrans_workspace_size[0] * ((iJI_col + full_loop_B.c_idx_col) -
          1)] = full_loop_B.varargout_3_data_j[full_loop_B.varargout_3_size[0] *
          full_loop_B.c_idx_col + full_loop_B.c_idx_row];
        full_loop_B.c_idx_col++;
      }

      full_loop_B.c_idx_row++;
    }

    for (full_loop_B.c_idx_row = 0; full_loop_B.c_idx_row < 69;
         full_loop_B.c_idx_row++) {
      for (full_loop_B.c_idx_col = 0; full_loop_B.c_idx_col < 52;
           full_loop_B.c_idx_col++) {
        JacEqTrans_workspace_data[full_loop_B.c_idx_row +
          JacEqTrans_workspace_size[0] * full_loop_B.c_idx_col] =
          full_loop_B.varargout_4_m[69 * full_loop_B.c_idx_col +
          full_loop_B.c_idx_row];
      }
    }
  } else {
    full_loop___anon_fcn(obj_nonlcon_tunableEnvironment_,
                         obj_nonlcon_tunableEnvironmen_0,
                         obj_nonlcon_tunableEnvironmen_1, x,
                         full_loop_B.varargout_1_data_c,
                         full_loop_B.varargout_1_size_g,
                         full_loop_B.varargout_2_p,
                         full_loop_B.varargout_3_data_j,
                         full_loop_B.varargout_3_size, full_loop_B.varargout_4_m);
    full_loop_xcopy_gpr(full_loop_B.varargout_2_p, Ceq_workspace);
    for (full_loop_B.c_idx_row = 0; full_loop_B.c_idx_row < 69;
         full_loop_B.c_idx_row++) {
      for (full_loop_B.c_idx_col = 0; full_loop_B.c_idx_col < 52;
           full_loop_B.c_idx_col++) {
        JacEqTrans_workspace_data[full_loop_B.c_idx_row +
          JacEqTrans_workspace_size[0] * full_loop_B.c_idx_col] =
          full_loop_B.varargout_4_m[69 * full_loop_B.c_idx_col +
          full_loop_B.c_idx_row];
      }
    }
  }

  status = full_loop_checkVectorNonFinite(obj_mCineq, Cineq_workspace_data,
    ineq0);
  if (status == 1) {
    status = full_loo_checkVectorNonFinite_e(Ceq_workspace);
    if (status == 1) {
      status = full_loop_checkMatrixNonFinite(obj_mCineq,
        JacIneqTrans_workspace_data, JacIneqTrans_workspace_size, iJI_col);
      if (status == 1) {
        status = full_loo_checkMatrixNonFinite_n(JacEqTrans_workspace_data,
          JacEqTrans_workspace_size);
      }
    }
  }

  return status;
}

// Function for MATLAB Function: '<S60>/NLMPC'
void full_loopModelClass::evalObjAndConstrAndDerivatives(const real_T
  obj_objfun_tunableEnvironment_f[13], const real_T
  obj_objfun_tunableEnvironment_0[8], const real_T
  obj_objfun_tunableEnvironment_1[52], const real_T
  obj_objfun_tunableEnvironment_2[52], const real_T
  obj_objfun_tunableEnvironment_3[32], const real_T
  obj_objfun_tunableEnvironment_4[32], const real_T
  obj_objfun_tunableEnvironment_5[32], const real_T
  obj_nonlcon_tunableEnvironment_[13], const real_T
  obj_nonlcon_tunableEnvironmen_0[52], const real_T
  obj_nonlcon_tunableEnvironmen_1[52], int32_T obj_mCineq, const real_T x[69],
  real_T grad_workspace_data[], real_T Cineq_workspace_data[], int32_T ineq0,
  real_T Ceq_workspace[52], real_T JacIneqTrans_workspace_data[], const int32_T
  JacIneqTrans_workspace_size[2], int32_T iJI_col, real_T
  JacEqTrans_workspace_data[], const int32_T JacEqTrans_workspace_size[2],
  real_T *fval, int32_T *status)
{
  computeObjectiveAndUserGradient(obj_objfun_tunableEnvironment_f,
    obj_objfun_tunableEnvironment_0, obj_objfun_tunableEnvironment_1,
    obj_objfun_tunableEnvironment_2, obj_objfun_tunableEnvironment_3,
    obj_objfun_tunableEnvironment_4, obj_objfun_tunableEnvironment_5, x,
    grad_workspace_data, fval, status);
  if (*status == 1) {
    *status = computeConstraintsAndUserJacobi(obj_nonlcon_tunableEnvironment_,
      obj_nonlcon_tunableEnvironmen_0, obj_nonlcon_tunableEnvironmen_1,
      obj_mCineq, x, Cineq_workspace_data, ineq0, Ceq_workspace,
      JacIneqTrans_workspace_data, JacIneqTrans_workspace_size, iJI_col,
      JacEqTrans_workspace_data, JacEqTrans_workspace_size);
  }
}

// Function for MATLAB Function: '<S60>/NLMPC'
void full_loopModelClass::full_loo_computeLinearResiduals(const real_T x[69],
  real_T workspaceIneq_data[], const int32_T *workspaceIneq_size, int32_T
  mLinIneq, const real_T AineqT_data[], const real_T bineq_data[], int32_T ldAi)
{
  int32_T ix;
  real_T c;
  int32_T iac;
  int32_T ia;
  int32_T loop_ub;
  int32_T y_size_idx_0;
  if (mLinIneq > 0) {
    if (0 <= *workspaceIneq_size - 1) {
      std::memcpy(&full_loop_B.y_data_e[0], &workspaceIneq_data[0],
                  *workspaceIneq_size * sizeof(real_T));
    }

    for (loop_ub = 0; loop_ub < mLinIneq; loop_ub++) {
      full_loop_B.y_data_e[loop_ub] = bineq_data[loop_ub];
    }

    if (0 <= *workspaceIneq_size - 1) {
      std::memcpy(&workspaceIneq_data[0], &full_loop_B.y_data_e[0],
                  *workspaceIneq_size * sizeof(real_T));
    }

    for (y_size_idx_0 = 0; y_size_idx_0 < mLinIneq; y_size_idx_0++) {
      workspaceIneq_data[y_size_idx_0] = -workspaceIneq_data[y_size_idx_0];
    }

    y_size_idx_0 = 0;
    loop_ub = (mLinIneq - 1) * ldAi + 1;
    iac = 1;
    while (((ldAi > 0) && (iac <= loop_ub)) || ((ldAi < 0) && (iac >= loop_ub)))
    {
      ix = 0;
      c = 0.0;
      for (ia = iac; ia <= iac + 68; ia++) {
        c += AineqT_data[ia - 1] * x[ix];
        ix++;
      }

      workspaceIneq_data[y_size_idx_0] += c;
      y_size_idx_0++;
      iac += ldAi;
    }
  }
}

// Function for MATLAB Function: '<S60>/NLMPC'
void full_loopModelClass::full_l_updateWorkingSetForNewQP(const real_T xk[69],
  s_Mspqy2ajbjhxqxIYYuZUwC_full_T *WorkingSet, int32_T mIneq, const real_T
  cIneq_data[], const real_T cEq[52], int32_T mLB, const real_T lb[69], int32_T
  mUB, int32_T mFixed)
{
  int32_T iw0;
  int32_T iEq0;
  int32_T b_idx;
  iw0 = WorkingSet->ldA * mFixed;
  iEq0 = 0;
  for (b_idx = 0; b_idx < 52; b_idx++) {
    WorkingSet->beq[b_idx] = -cEq[b_idx];
    WorkingSet->bwset.data[mFixed + b_idx] = WorkingSet->beq[b_idx];
    std::memcpy(&WorkingSet->ATwset.data[iw0], &WorkingSet->Aeq.data[iEq0], 69U *
                sizeof(real_T));
    iw0 += WorkingSet->ldA;
    iEq0 += WorkingSet->ldA;
  }

  for (b_idx = 0; b_idx < mIneq; b_idx++) {
    WorkingSet->bineq.data[b_idx] = -cIneq_data[b_idx];
  }

  for (b_idx = 0; b_idx < mLB; b_idx++) {
    WorkingSet->lb.data[WorkingSet->indexLB.data[b_idx] - 1] = -lb
      [WorkingSet->indexLB.data[b_idx] - 1] + xk[WorkingSet->indexLB.data[b_idx]
      - 1];
  }

  for (b_idx = 0; b_idx < mUB; b_idx++) {
    WorkingSet->ub.data[WorkingSet->indexUB.data[b_idx] - 1] = (rtInf) -
      xk[WorkingSet->indexUB.data[b_idx] - 1];
  }

  for (b_idx = 0; b_idx < mFixed; b_idx++) {
    WorkingSet->ub.data[WorkingSet->indexFixed.data[b_idx] - 1] = (rtInf) -
      xk[WorkingSet->indexFixed.data[b_idx] - 1];
    WorkingSet->bwset.data[b_idx] = (rtInf) - xk[WorkingSet->
      indexFixed.data[b_idx] - 1];
  }
}

// Function for MATLAB Function: '<S60>/NLMPC'
void full_loopModelClass::full_lo_modifyOverheadPhaseOne_
  (s_Mspqy2ajbjhxqxIYYuZUwC_full_T *obj)
{
  int32_T idx;
  for (idx = 0; idx < obj->sizes[0]; idx++) {
    obj->ATwset.data[(obj->nVar + obj->ATwset.size[0] * idx) - 1] = 0.0;
  }

  for (idx = 0; idx < 52; idx++) {
    obj->Aeq.data[(obj->nVar + obj->Aeq.size[0] * idx) - 1] = 0.0;
    obj->ATwset.data[(obj->nVar + obj->ATwset.size[0] * ((obj->isActiveIdx[1] +
      idx) - 1)) - 1] = 0.0;
  }

  for (idx = 0; idx < obj->sizes[2]; idx++) {
    obj->Aineq.data[(obj->nVar + obj->Aineq.size[0] * idx) - 1] = -1.0;
  }

  obj->indexLB.data[obj->sizes[3] - 1] = obj->nVar;
  obj->lb.data[obj->nVar - 1] = 1.0E-5;
  for (idx = obj->isActiveIdx[2]; idx <= obj->nActiveConstr; idx++) {
    obj->ATwset.data[(obj->nVar + obj->ATwset.size[0] * (idx - 1)) - 1] = -1.0;
  }
}

// Function for MATLAB Function: '<S60>/NLMPC'
void full_loopModelClass::full_modifyOverheadRegularized_
  (s_Mspqy2ajbjhxqxIYYuZUwC_full_T *obj)
{
  int32_T mIneq;
  int32_T offsetEq1;
  int32_T offsetEq2;
  int32_T idxGlobalColStart;
  int32_T b_idx_col;
  int32_T d_idx_row;
  int32_T e_idx_row;
  mIneq = obj->sizes[2] + 69;
  offsetEq1 = obj->sizes[2];
  offsetEq2 = obj->sizes[2];
  for (b_idx_col = 0; b_idx_col < obj->sizes[0]; b_idx_col++) {
    for (idxGlobalColStart = 70; idxGlobalColStart <= obj->nVar;
         idxGlobalColStart++) {
      obj->ATwset.data[(idxGlobalColStart + obj->ATwset.size[0] * b_idx_col) - 1]
        = 0.0;
    }
  }

  for (b_idx_col = 0; b_idx_col <= mIneq - 70; b_idx_col++) {
    for (idxGlobalColStart = 70; idxGlobalColStart <= b_idx_col + 69;
         idxGlobalColStart++) {
      obj->Aineq.data[(idxGlobalColStart + obj->Aineq.size[0] * b_idx_col) - 1] =
        0.0;
    }

    obj->Aineq.data[(b_idx_col + obj->Aineq.size[0] * b_idx_col) + 69] = -1.0;
    for (idxGlobalColStart = b_idx_col + 70; idxGlobalColStart < obj->nVar;
         idxGlobalColStart++) {
      obj->Aineq.data[idxGlobalColStart + obj->Aineq.size[0] * b_idx_col] = 0.0;
    }
  }

  idxGlobalColStart = obj->isActiveIdx[1] - 1;
  for (b_idx_col = 0; b_idx_col < 52; b_idx_col++) {
    for (d_idx_row = 69; d_idx_row < mIneq; d_idx_row++) {
      obj->Aeq.data[d_idx_row + obj->Aeq.size[0] * b_idx_col] = 0.0;
      obj->ATwset.data[d_idx_row + obj->ATwset.size[0] * (idxGlobalColStart +
        b_idx_col)] = 0.0;
    }

    d_idx_row = mIneq + b_idx_col;
    for (e_idx_row = offsetEq1 + 69; e_idx_row < d_idx_row; e_idx_row++) {
      obj->Aeq.data[e_idx_row + obj->Aeq.size[0] * b_idx_col] = 0.0;
      obj->ATwset.data[e_idx_row + obj->ATwset.size[0] * (idxGlobalColStart +
        b_idx_col)] = 0.0;
    }

    obj->Aeq.data[d_idx_row + obj->Aeq.size[0] * b_idx_col] = -1.0;
    obj->ATwset.data[d_idx_row + obj->ATwset.size[0] * (idxGlobalColStart +
      b_idx_col)] = -1.0;
    for (e_idx_row = (offsetEq1 + b_idx_col) + 70; e_idx_row < mIneq + 52;
         e_idx_row++) {
      obj->Aeq.data[e_idx_row + obj->Aeq.size[0] * b_idx_col] = 0.0;
      obj->ATwset.data[e_idx_row + obj->ATwset.size[0] * (idxGlobalColStart +
        b_idx_col)] = 0.0;
    }

    d_idx_row += 52;
    for (e_idx_row = offsetEq2 + 121; e_idx_row < d_idx_row; e_idx_row++) {
      obj->Aeq.data[e_idx_row + obj->Aeq.size[0] * b_idx_col] = 0.0;
      obj->ATwset.data[e_idx_row + obj->ATwset.size[0] * (idxGlobalColStart +
        b_idx_col)] = 0.0;
    }

    obj->Aeq.data[((mIneq + b_idx_col) + obj->Aeq.size[0] * b_idx_col) + 52] =
      1.0;
    obj->ATwset.data[((mIneq + b_idx_col) + obj->ATwset.size[0] *
                      (idxGlobalColStart + b_idx_col)) + 52] = 1.0;
    for (d_idx_row = (offsetEq2 + b_idx_col) + 122; d_idx_row < obj->nVar;
         d_idx_row++) {
      obj->Aeq.data[d_idx_row + obj->Aeq.size[0] * b_idx_col] = 0.0;
      obj->ATwset.data[d_idx_row + obj->ATwset.size[0] * (idxGlobalColStart +
        b_idx_col)] = 0.0;
    }
  }

  offsetEq1 = 69;
  for (offsetEq2 = obj->sizesNormal[3]; offsetEq2 < obj->sizesRegularized[3];
       offsetEq2++) {
    offsetEq1++;
    obj->indexLB.data[offsetEq2] = offsetEq1;
  }

  for (offsetEq1 = 70; offsetEq1 <= mIneq + 104; offsetEq1++) {
    obj->lb.data[offsetEq1 - 1] = 0.0;
  }

  for (mIneq = obj->isActiveIdx[2] - 1; mIneq < obj->nActiveConstr; mIneq++) {
    if (obj->Wid.data[mIneq] == 3) {
      for (offsetEq1 = 70; offsetEq1 <= obj->Wlocalidx.data[mIneq] + 68;
           offsetEq1++) {
        obj->ATwset.data[(offsetEq1 + obj->ATwset.size[0] * mIneq) - 1] = 0.0;
      }

      obj->ATwset.data[(obj->Wlocalidx.data[mIneq] + obj->ATwset.size[0] * mIneq)
        + 68] = -1.0;
      for (offsetEq1 = obj->Wlocalidx.data[mIneq] + 69; offsetEq1 < obj->nVar;
           offsetEq1++) {
        obj->ATwset.data[offsetEq1 + obj->ATwset.size[0] * mIneq] = 0.0;
      }
    } else {
      for (offsetEq1 = 70; offsetEq1 <= obj->nVar; offsetEq1++) {
        obj->ATwset.data[(offsetEq1 + obj->ATwset.size[0] * mIneq) - 1] = 0.0;
      }
    }
  }
}

// Function for MATLAB Function: '<S60>/NLMPC'
void full_loopModelClass::full_loop_setProblemType
  (s_Mspqy2ajbjhxqxIYYuZUwC_full_T *obj, int32_T PROBLEM_TYPE)
{
  int32_T i;
  switch (PROBLEM_TYPE) {
   case 3:
    obj->nVar = 69;
    obj->mConstr = obj->mConstrOrig;
    for (i = 0; i < 5; i++) {
      obj->sizes[i] = obj->sizesNormal[i];
    }

    for (i = 0; i < 6; i++) {
      obj->isActiveIdx[i] = obj->isActiveIdxNormal[i];
    }
    break;

   case 1:
    obj->nVar = 70;
    obj->mConstr = obj->mConstrOrig + 1;
    for (i = 0; i < 5; i++) {
      obj->sizes[i] = obj->sizesPhaseOne[i];
    }

    for (i = 0; i < 6; i++) {
      obj->isActiveIdx[i] = obj->isActiveIdxPhaseOne[i];
    }

    full_lo_modifyOverheadPhaseOne_(obj);
    break;

   case 2:
    obj->nVar = obj->nVarMax - 1;
    obj->mConstr = obj->mConstrMax - 1;
    for (i = 0; i < 5; i++) {
      obj->sizes[i] = obj->sizesRegularized[i];
    }

    for (i = 0; i < 6; i++) {
      obj->isActiveIdx[i] = obj->isActiveIdxRegularized[i];
    }

    if (obj->probType != 4) {
      full_modifyOverheadRegularized_(obj);
    }
    break;

   default:
    obj->nVar = obj->nVarMax;
    obj->mConstr = obj->mConstrMax;
    for (i = 0; i < 5; i++) {
      obj->sizes[i] = obj->sizesRegPhaseOne[i];
    }

    for (i = 0; i < 6; i++) {
      obj->isActiveIdx[i] = obj->isActiveIdxRegPhaseOne[i];
    }

    full_lo_modifyOverheadPhaseOne_(obj);
    break;
  }

  obj->probType = PROBLEM_TYPE;
}

// Function for MATLAB Function: '<S60>/NLMPC'
void full_loopModelClass::full_loop_initActiveSet
  (s_Mspqy2ajbjhxqxIYYuZUwC_full_T *obj)
{
  int32_T nWFixed;
  int32_T idx_global;
  int32_T iAeq0;
  int32_T iATw0;
  int32_T b_idx_local;
  int32_T c_i;
  full_loop_setProblemType(obj, 3);
  for (nWFixed = obj->isActiveIdx[2]; nWFixed <= obj->mConstrMax; nWFixed++) {
    obj->isActiveConstr.data[nWFixed - 1] = false;
  }

  obj->nWConstr[0] = obj->sizes[0];
  obj->nWConstr[1] = 52;
  obj->nWConstr[2] = 0;
  obj->nWConstr[3] = 0;
  obj->nWConstr[4] = 0;
  obj->nActiveConstr = obj->nWConstr[0] + 52;
  nWFixed = obj->sizes[0];
  for (b_idx_local = 0; b_idx_local < nWFixed; b_idx_local++) {
    obj->Wid.data[b_idx_local] = 1;
    obj->Wlocalidx.data[b_idx_local] = b_idx_local + 1;
    obj->isActiveConstr.data[b_idx_local] = true;
    for (idx_global = 0; idx_global <= obj->indexFixed.data[b_idx_local] - 2;
         idx_global++) {
      obj->ATwset.data[idx_global + obj->ATwset.size[0] * b_idx_local] = 0.0;
    }

    obj->ATwset.data[(obj->indexFixed.data[b_idx_local] + obj->ATwset.size[0] *
                      b_idx_local) - 1] = 1.0;
    for (idx_global = obj->indexFixed.data[b_idx_local]; idx_global < obj->nVar;
         idx_global++) {
      obj->ATwset.data[idx_global + obj->ATwset.size[0] * b_idx_local] = 0.0;
    }

    obj->bwset.data[b_idx_local] = obj->ub.data[obj->indexFixed.data[b_idx_local]
      - 1];
  }

  for (b_idx_local = 0; b_idx_local < 52; b_idx_local++) {
    idx_global = nWFixed + b_idx_local;
    obj->Wid.data[idx_global] = 2;
    obj->Wlocalidx.data[idx_global] = b_idx_local + 1;
    obj->isActiveConstr.data[idx_global] = true;
    iAeq0 = obj->ldA * b_idx_local;
    iATw0 = obj->ldA * idx_global;
    for (c_i = 0; c_i < obj->nVar; c_i++) {
      obj->ATwset.data[iATw0 + c_i] = obj->Aeq.data[iAeq0 + c_i];
    }

    obj->bwset.data[idx_global] = obj->beq[b_idx_local];
  }
}

// Function for MATLAB Function: '<S60>/NLMPC'
void full_loopModelClass::full_l_factoryConstruct_cntp2b1(real_T fval, const
  real_T Cineq_workspace_data[], int32_T mNonlinIneq, const real_T
  Ceq_workspace[52], s6ICcRyulWOFjNCN0ll7VsE_full__T *obj)
{
  real_T normResid;
  int32_T k;
  obj->penaltyParam = 1.0;
  obj->threshold = 0.0001;
  obj->nPenaltyDecreases = 0;
  obj->linearizedConstrViol = 0.0;
  obj->initFval = fval;
  normResid = 0.0;
  for (k = 0; k < 52; k++) {
    normResid += std::abs(Ceq_workspace[k]);
  }

  obj->initConstrViolationEq = normResid;
  normResid = 0.0;
  for (k = 0; k < mNonlinIneq; k++) {
    if (Cineq_workspace_data[k] > 0.0) {
      normResid += Cineq_workspace_data[k];
    }
  }

  obj->initConstrViolationIneq = normResid;
  obj->phi = 0.0;
  obj->phiPrimePlus = 0.0;
  obj->phiFullStep = 0.0;
  obj->feasRelativeFactor = 0.0;
  obj->nlpPrimalFeasError = 0.0;
  obj->nlpDualFeasError = 0.0;
  obj->nlpComplError = 0.0;
  obj->firstOrderOpt = 0.0;
  obj->hasObjective = true;
}

// Function for MATLAB Function: '<S60>/NLMPC'
void full_loopModelClass::full_loop_factoryConstruct_cn(const
  s_A0rUWcsbMx3S06V1NlippE_full_T *objfun_tunableEnvironment_f1, const
  sACkMJ1zT2VJOHR6eMwwEPC_full__T *objfun_tunableEnvironment_f2, const
  s_A0rUWcsbMx3S06V1NlippE_full_T *nonlin_tunableEnvironment_f1, const
  sACkMJ1zT2VJOHR6eMwwEPC_full__T *nonlin_tunableEnvironment_f2, int32_T mCineq,
  const real_T lb[69], s_CWBQhEwNbz3J2I47jPePeB_full_T *obj)
{
  boolean_T d;
  int32_T idx;
  obj->objfun.tunableEnvironment.f1 = *objfun_tunableEnvironment_f1;
  obj->objfun.tunableEnvironment.f2 = *objfun_tunableEnvironment_f2;
  obj->nonlin.tunableEnvironment.f1 = *nonlin_tunableEnvironment_f1;
  obj->nonlin.tunableEnvironment.f2 = *nonlin_tunableEnvironment_f2;
  obj->f_1 = 0.0;
  obj->cIneq_1.size = mCineq;
  obj->f_2 = 0.0;
  obj->cIneq_2.size = mCineq;
  obj->nVar = 69;
  obj->mIneq = mCineq;
  obj->mEq = 52;
  obj->numEvals = 0;
  obj->SpecifyObjectiveGradient = true;
  obj->SpecifyConstraintGradient = true;
  obj->FiniteDifferenceType = 0;
  std::memcpy(&full_loop_B.c_i[0], &obj->hasUB[0], 69U * sizeof(boolean_T));
  std::memcpy(&full_loop_B.b_i0[0], &obj->hasLB[0], 69U * sizeof(boolean_T));
  d = false;
  idx = 0;
  while ((!d) && (idx + 1 <= 69)) {
    full_loop_B.b_i0[idx] = ((!rtIsInf(lb[idx])) && (!rtIsNaN(lb[idx])));
    full_loop_B.c_i[idx] = false;
    if (full_loop_B.b_i0[idx]) {
      d = true;
    }

    idx++;
  }

  while (idx + 1 <= 69) {
    full_loop_B.b_i0[idx] = ((!rtIsInf(lb[idx])) && (!rtIsNaN(lb[idx])));
    full_loop_B.c_i[idx] = false;
    idx++;
  }

  std::memcpy(&obj->hasLB[0], &full_loop_B.b_i0[0], 69U * sizeof(boolean_T));
  std::memcpy(&obj->hasUB[0], &full_loop_B.c_i[0], 69U * sizeof(boolean_T));
  obj->hasBounds = d;
}

// Function for MATLAB Function: '<S60>/NLMPC'
void full_loopModelClass::full_loop_factoryConstruct_cnt(int32_T maxRows,
  int32_T maxCols, s_3RW6EhlAOINzvAvYfuaanB_full_T *obj)
{
  int32_T loop_ub;
  obj->ldq = maxRows;
  obj->QR.size[0] = maxRows;
  obj->QR.size[1] = maxCols;
  obj->Q.size[0] = maxRows;
  obj->Q.size[1] = maxRows;
  loop_ub = maxRows * maxRows - 1;
  if (0 <= loop_ub) {
    std::memset(&obj->Q.data[0], 0, (loop_ub + 1) * sizeof(real_T));
  }

  obj->jpvt.size = maxCols;
  if (0 <= maxCols - 1) {
    std::memset(&obj->jpvt.data[0], 0, maxCols * sizeof(int32_T));
  }

  obj->mrows = 0;
  obj->ncols = 0;
  if (maxRows < maxCols) {
    obj->tau.size = maxRows;
  } else {
    obj->tau.size = maxCols;
  }

  obj->minRowCol = 0;
  obj->usedPivoting = false;
}

// Function for MATLAB Function: '<S60>/NLMPC'
void full_loopModelClass::full_loop_factoryConstruct_cntp(int32_T MaxDims,
  int32_T obj_FMat_size[2], int32_T *obj_ldm, int32_T *obj_ndims, int32_T
  *obj_info)
{
  obj_FMat_size[0] = MaxDims;
  obj_FMat_size[1] = MaxDims;
  *obj_ldm = MaxDims;
  *obj_ndims = 0;
  *obj_info = 0;
}

// Function for MATLAB Function: '<S60>/NLMPC'
void full_loopModelClass::full_loo_factoryConstruct_cntp2(int32_T MaxVars,
  s_BtE36YuCWnavoi0lGdvGZF_full_T *obj)
{
  obj->grad.size = MaxVars;
  obj->Hx.size = MaxVars - 1;
  obj->hasLinear = false;
  obj->nvar = 0;
  obj->maxVar = MaxVars;
  obj->beta = 0.0;
  obj->rho = 0.0;
  obj->objtype = 3;
  obj->prev_objtype = 3;
  obj->prev_nvar = 0;
  obj->prev_hasLinear = false;
  obj->gammaScalar = 0.0;
}

// Function for MATLAB Function: '<S60>/NLMPC'
void full_loopModelClass::full_loop_setQuadratic(s_BtE36YuCWnavoi0lGdvGZF_full_T
  *obj, int32_T NumVars)
{
  obj->hasLinear = true;
  obj->nvar = NumVars;
  obj->objtype = 3;
}

// Function for MATLAB Function: '<S60>/NLMPC'
void full_loopModelClass::full_loop_computeGradLag(real_T workspace_data[],
  int32_T ldA, int32_T nVar, const real_T grad_data[], int32_T mIneq, const
  real_T AineqTrans_data[], const real_T AeqTrans_data[], const int32_T
  finiteFixed_data[], int32_T mFixed, const int32_T finiteLB_data[], int32_T mLB,
  const int32_T finiteUB_data[], int32_T mUB, const real_T lambda_data[])
{
  int32_T ix;
  int32_T iac;
  int32_T b_iy;
  int32_T c;
  int32_T b_ia;
  int32_T b_c;
  for (ix = 0; ix < nVar; ix++) {
    workspace_data[ix] = grad_data[ix];
  }

  for (ix = 0; ix < mFixed; ix++) {
    workspace_data[finiteFixed_data[ix] - 1] += lambda_data[ix];
  }

  ix = mFixed;
  b_c = ldA * 51 + 1;
  iac = 1;
  while (((ldA > 0) && (iac <= b_c)) || ((ldA < 0) && (iac >= b_c))) {
    b_iy = 0;
    c = (iac + nVar) - 1;
    for (b_ia = iac; b_ia <= c; b_ia++) {
      workspace_data[b_iy] += AeqTrans_data[b_ia - 1] * lambda_data[ix];
      b_iy++;
    }

    ix++;
    iac += ldA;
  }

  if (mIneq != 0) {
    ix = mFixed + 52;
    b_c = (mIneq - 1) * ldA + 1;
    iac = 1;
    while (((ldA > 0) && (iac <= b_c)) || ((ldA < 0) && (iac >= b_c))) {
      b_iy = 0;
      c = (iac + nVar) - 1;
      for (b_ia = iac; b_ia <= c; b_ia++) {
        workspace_data[b_iy] += AineqTrans_data[b_ia - 1] * lambda_data[ix];
        b_iy++;
      }

      ix++;
      iac += ldA;
    }
  }

  ix = (mFixed + mIneq) + 52;
  for (b_c = 0; b_c < mLB; b_c++) {
    workspace_data[finiteLB_data[b_c] - 1] -= lambda_data[ix];
    ix++;
  }

  for (b_c = 0; b_c < mUB; b_c++) {
    workspace_data[finiteUB_data[b_c] - 1] += lambda_data[ix];
    ix++;
  }
}

// Function for MATLAB Function: '<S60>/NLMPC'
real_T full_loopModelClass::full_loo_computePrimalFeasError(const real_T x[69],
  int32_T mLinIneq, int32_T mNonlinIneq, const real_T cIneq_data[], const real_T
  cEq[52], const int32_T finiteLB_data[], int32_T mLB, const real_T lb[69],
  const int32_T finiteUB_data[], int32_T mUB)
{
  real_T feasError;
  int32_T mIneq;
  int32_T b_idx;
  real_T u1;
  feasError = 0.0;
  mIneq = mNonlinIneq + mLinIneq;
  for (b_idx = 0; b_idx < 52; b_idx++) {
    u1 = std::abs(cEq[b_idx]);
    if ((!(feasError > u1)) && (!rtIsNaN(u1))) {
      feasError = u1;
    }
  }

  for (b_idx = 0; b_idx < mIneq; b_idx++) {
    if ((!(feasError > cIneq_data[b_idx])) && (!rtIsNaN(cIneq_data[b_idx]))) {
      feasError = cIneq_data[b_idx];
    }
  }

  for (b_idx = 0; b_idx < mLB; b_idx++) {
    u1 = lb[finiteLB_data[b_idx] - 1] - x[finiteLB_data[b_idx] - 1];
    if ((!(feasError > u1)) && (!rtIsNaN(u1))) {
      feasError = u1;
    }
  }

  for (b_idx = 0; b_idx < mUB; b_idx++) {
    u1 = x[finiteUB_data[b_idx] - 1] - (rtInf);
    if ((!(feasError > u1)) && (!rtIsNaN(u1))) {
      feasError = u1;
    }
  }

  return feasError;
}

// Function for MATLAB Function: '<S60>/NLMPC'
void full_loopModelClass::full_loop_computeDualFeasError(int32_T nVar, const
  real_T gradLag_data[], boolean_T *gradOK, real_T *val)
{
  int32_T b_idx;
  real_T u1;
  boolean_T exitg1;
  *gradOK = true;
  *val = 0.0;
  b_idx = 0;
  exitg1 = false;
  while ((!exitg1) && (b_idx <= nVar - 1)) {
    *gradOK = ((!rtIsInf(gradLag_data[b_idx])) && (!rtIsNaN(gradLag_data[b_idx])));
    if (!*gradOK) {
      exitg1 = true;
    } else {
      u1 = std::abs(gradLag_data[b_idx]);
      if ((!(*val > u1)) && (!rtIsNaN(u1))) {
        *val = u1;
      }

      b_idx++;
    }
  }
}

// Function for MATLAB Function: '<S60>/NLMPC'
int32_T full_loopModelClass::full_loop_ixamax(int32_T n, const real_T x_data[])
{
  int32_T idxmax;
  int32_T ix;
  real_T smax;
  int32_T k;
  real_T y;
  if (n < 1) {
    idxmax = 0;
  } else {
    idxmax = 1;
    if (n > 1) {
      ix = 0;
      smax = std::abs(x_data[0]);
      for (k = 2; k <= n; k++) {
        ix++;
        y = std::abs(x_data[ix]);
        if (y > smax) {
          idxmax = k;
          smax = y;
        }
      }
    }
  }

  return idxmax;
}

// Function for MATLAB Function: '<S60>/NLMPC'
void full_loopModelClass::full_loop_test_exit(s6ICcRyulWOFjNCN0ll7VsE_full__T
  *MeritFunction, const s_Mspqy2ajbjhxqxIYYuZUwC_full_T *WorkingSet,
  s_ZxHOyfVSozxr6pSGbgUCkF_full_T *TrialState, const real_T lb[69], boolean_T
  *Flags_gradOK, boolean_T *Flags_fevalOK, boolean_T *Flags_done, boolean_T
  *Flags_stepAccepted, boolean_T *Flags_failedLineSearch, int32_T
  *Flags_stepType)
{
  int32_T mLambda;
  real_T optimRelativeFactor;
  boolean_T isFeasible;
  real_T c;
  int32_T b_k;
  *Flags_fevalOK = true;
  *Flags_stepAccepted = false;
  *Flags_failedLineSearch = false;
  *Flags_stepType = 1;
  mLambda = (((WorkingSet->sizes[0] + WorkingSet->sizes[2]) + WorkingSet->sizes
              [3]) + WorkingSet->sizes[4]) + 51;
  full_loop_computeGradLag(TrialState->gradLag.data, WorkingSet->ldA,
    WorkingSet->nVar, TrialState->grad.data, WorkingSet->sizes[2],
    WorkingSet->Aineq.data, WorkingSet->Aeq.data, WorkingSet->indexFixed.data,
    WorkingSet->sizes[0], WorkingSet->indexLB.data, WorkingSet->sizes[3],
    WorkingSet->indexUB.data, WorkingSet->sizes[4], TrialState->lambdasqp.data);
  optimRelativeFactor = std::abs(TrialState->grad.data[full_loop_ixamax
    (WorkingSet->nVar, TrialState->grad.data) - 1]);
  if ((1.0 > optimRelativeFactor) || rtIsNaN(optimRelativeFactor)) {
    optimRelativeFactor = 1.0;
  }

  if (rtIsInf(optimRelativeFactor)) {
    optimRelativeFactor = 1.0;
  }

  MeritFunction->nlpPrimalFeasError = full_loo_computePrimalFeasError
    (TrialState->xstarsqp, WorkingSet->sizes[2] - TrialState->mNonlinIneq,
     TrialState->mNonlinIneq, TrialState->cIneq.data, TrialState->cEq,
     WorkingSet->indexLB.data, WorkingSet->sizes[3], lb,
     WorkingSet->indexUB.data, WorkingSet->sizes[4]);
  if ((1.0 > MeritFunction->nlpPrimalFeasError) || rtIsNaN
      (MeritFunction->nlpPrimalFeasError)) {
    MeritFunction->feasRelativeFactor = 1.0;
  } else {
    MeritFunction->feasRelativeFactor = MeritFunction->nlpPrimalFeasError;
  }

  if ((1.0 > MeritFunction->nlpPrimalFeasError) || rtIsNaN
      (MeritFunction->nlpPrimalFeasError)) {
    c = 1.0;
  } else {
    c = MeritFunction->nlpPrimalFeasError;
  }

  isFeasible = (MeritFunction->nlpPrimalFeasError <= 0.02 * c);
  full_loop_computeDualFeasError(WorkingSet->nVar, TrialState->gradLag.data,
    Flags_gradOK, &c);
  MeritFunction->nlpDualFeasError = c;
  if (!*Flags_gradOK) {
    *Flags_done = true;
    if (isFeasible) {
      TrialState->sqpExitFlag = 2;
    } else {
      TrialState->sqpExitFlag = -2;
    }
  } else {
    MeritFunction->nlpComplError = 0.0;
    if (c > 0.0) {
      MeritFunction->firstOrderOpt = c;
    } else {
      MeritFunction->firstOrderOpt = 0.0;
    }

    for (b_k = 0; b_k <= mLambda; b_k++) {
      TrialState->lambdasqp_old.data[b_k] = TrialState->lambdasqp.data[b_k];
    }

    if (isFeasible && (c <= 0.02 * optimRelativeFactor)) {
      *Flags_done = true;
      TrialState->sqpExitFlag = 1;
    } else {
      *Flags_done = false;
      if (isFeasible && (TrialState->sqpFval < -1.0E+20)) {
        *Flags_done = true;
        TrialState->sqpExitFlag = -3;
      }
    }
  }
}

// Function for MATLAB Function: '<S60>/NLMPC'
void full_loopModelClass::full_loop_saveJacobian(s_ZxHOyfVSozxr6pSGbgUCkF_full_T
  *obj, int32_T nVar, int32_T mIneq, const real_T JacCineqTrans_data[], int32_T
  ineqCol0, const real_T JacCeqTrans_data[], int32_T ldJ)
{
  int32_T iCol;
  int32_T iCol_old;
  int32_T b;
  int32_T idx_col;
  int32_T k;
  iCol = (ineqCol0 - 1) * ldJ;
  iCol_old = -1;
  b = mIneq - ineqCol0;
  for (idx_col = 0; idx_col <= b; idx_col++) {
    for (k = 1; k - 1 < nVar; k++) {
      obj->JacCineqTrans_old.data[iCol_old + k] = JacCineqTrans_data[(iCol + k)
        - 1];
    }

    iCol += ldJ;
    iCol_old += ldJ;
  }

  iCol = -1;
  iCol_old = -1;
  for (b = 0; b < 52; b++) {
    for (idx_col = 1; idx_col - 1 < nVar; idx_col++) {
      obj->JacCeqTrans_old.data[iCol_old + idx_col] = JacCeqTrans_data[iCol +
        idx_col];
    }

    iCol += ldJ;
    iCol_old += ldJ;
  }
}

// Function for MATLAB Function: '<S60>/NLMPC'
void full_loopModelClass::full_loop_saveState(s_ZxHOyfVSozxr6pSGbgUCkF_full_T
  *obj)
{
  int32_T k;
  int32_T loop_ub;
  obj->sqpFval_old = obj->sqpFval;
  for (k = 0; k < 69; k++) {
    obj->xstarsqp_old[k] = obj->xstarsqp[k];
    obj->grad_old.data[k] = obj->grad.data[k];
  }

  k = obj->cIneq_old.size;
  if (0 <= obj->cIneq_old.size - 1) {
    std::memcpy(&full_loop_B.y_data_h[0], &obj->cIneq_old.data[0],
                obj->cIneq_old.size * sizeof(real_T));
  }

  for (loop_ub = 0; loop_ub < obj->mIneq; loop_ub++) {
    full_loop_B.y_data_h[loop_ub] = obj->cIneq.data[loop_ub];
  }

  if (0 <= k - 1) {
    std::memcpy(&obj->cIneq_old.data[0], &full_loop_B.y_data_h[0], k * sizeof
                (real_T));
  }

  std::memcpy(&obj->cEq_old[0], &obj->cEq[0], 52U * sizeof(real_T));
}

// Function for MATLAB Function: '<S60>/NLMPC'
void full_loopModelClass::full_loop_revertSolution
  (s_ZxHOyfVSozxr6pSGbgUCkF_full_T *obj)
{
  int32_T loop_ub;
  int32_T y_size_idx_0;
  obj->sqpFval = obj->sqpFval_old;
  std::memcpy(&obj->xstarsqp[0], &obj->xstarsqp_old[0], 69U * sizeof(real_T));
  y_size_idx_0 = obj->cIneq.size;
  if (0 <= obj->cIneq.size - 1) {
    std::memcpy(&full_loop_B.y_data_k[0], &obj->cIneq.data[0], obj->cIneq.size *
                sizeof(real_T));
  }

  for (loop_ub = 0; loop_ub < obj->mIneq; loop_ub++) {
    full_loop_B.y_data_k[loop_ub] = obj->cIneq_old.data[loop_ub];
  }

  if (0 <= y_size_idx_0 - 1) {
    std::memcpy(&obj->cIneq.data[0], &full_loop_B.y_data_k[0], y_size_idx_0 *
                sizeof(real_T));
  }

  std::memcpy(&obj->cEq[0], &obj->cEq_old[0], 52U * sizeof(real_T));
}

// Function for MATLAB Function: '<S60>/NLMPC'
boolean_T full_loopModelClass::full_loop_isfinite(real_T x)
{
  return (!rtIsInf(x)) && (!rtIsNaN(x));
}

// Function for MATLAB Function: '<S60>/NLMPC'
real_T full_loopModelClass::full_loop_computeComplError(const int32_T
  *fscales_lineq_constraint_size, const int32_T *fscales_cineq_constraint_size,
  const real_T xCurrent[69], int32_T mIneq, const real_T cIneq_data[], const
  int32_T finiteLB_data[], int32_T mLB, const real_T lb[69], const int32_T
  finiteUB_data[], int32_T mUB, const real_T lambda_data[], int32_T iL0)
{
  real_T nlpComplError;
  int32_T mLinIneq;
  int32_T iLineq0;
  int32_T lbOffset;
  real_T lbDelta;
  real_T lbLambda;
  real_T ubLambda;
  int32_T c_idx;
  int32_T u0_tmp;
  nlpComplError = 0.0;
  mLinIneq = *fscales_lineq_constraint_size - 1;
  if ((mIneq + mLB) + mUB > 0) {
    for (iLineq0 = 0; iLineq0 <= mLinIneq; iLineq0++) {
      ubLambda = std::abs(cIneq_data[iLineq0]);
      lbOffset = (iL0 + iLineq0) - 1;
      if ((!(ubLambda < lambda_data[lbOffset])) && (!rtIsNaN
           (lambda_data[lbOffset]))) {
        ubLambda = lambda_data[lbOffset];
      }

      lbDelta = std::abs(lambda_data[lbOffset] * cIneq_data[iLineq0]);
      if ((lbDelta < ubLambda) || rtIsNaN(ubLambda)) {
        ubLambda = lbDelta;
      }

      if ((!(nlpComplError > ubLambda)) && (!rtIsNaN(ubLambda))) {
        nlpComplError = ubLambda;
      }
    }

    iLineq0 = (iL0 + *fscales_lineq_constraint_size) - 2;
    for (c_idx = 1; c_idx - 1 < *fscales_cineq_constraint_size; c_idx++) {
      u0_tmp = mLinIneq + c_idx;
      ubLambda = std::abs(cIneq_data[u0_tmp]);
      lbOffset = iLineq0 + c_idx;
      if ((!(ubLambda < lambda_data[lbOffset])) && (!rtIsNaN
           (lambda_data[lbOffset]))) {
        ubLambda = lambda_data[lbOffset];
      }

      lbDelta = std::abs(cIneq_data[u0_tmp] * lambda_data[lbOffset]);
      if ((lbDelta < ubLambda) || rtIsNaN(ubLambda)) {
        ubLambda = lbDelta;
      }

      if ((!(nlpComplError > ubLambda)) && (!rtIsNaN(ubLambda))) {
        nlpComplError = ubLambda;
      }
    }

    lbOffset = (iL0 + mIneq) - 1;
    mLinIneq = lbOffset + mLB;
    for (iLineq0 = 0; iLineq0 < mLB; iLineq0++) {
      lbDelta = xCurrent[finiteLB_data[iLineq0] - 1] - lb[finiteLB_data[iLineq0]
        - 1];
      lbLambda = lambda_data[lbOffset + iLineq0];
      ubLambda = std::abs(lbDelta);
      if ((!(ubLambda < lbLambda)) && (!rtIsNaN(lbLambda))) {
        ubLambda = lbLambda;
      }

      lbDelta = std::abs(lbDelta * lbLambda);
      if ((lbDelta < ubLambda) || rtIsNaN(ubLambda)) {
        ubLambda = lbDelta;
      }

      if ((!(nlpComplError > ubLambda)) && (!rtIsNaN(ubLambda))) {
        nlpComplError = ubLambda;
      }
    }

    for (lbOffset = 0; lbOffset < mUB; lbOffset++) {
      ubLambda = lambda_data[mLinIneq + lbOffset];
      if (rtIsNaN(ubLambda)) {
        lbDelta = (rtInf) - xCurrent[finiteUB_data[lbOffset] - 1];
      } else {
        lbDelta = ubLambda;
      }

      ubLambda = std::abs(((rtInf) - xCurrent[finiteUB_data[lbOffset] - 1]) *
                          ubLambda);
      if ((ubLambda < lbDelta) || rtIsNaN(lbDelta)) {
        lbDelta = ubLambda;
      }

      if ((!(nlpComplError > lbDelta)) && (!rtIsNaN(lbDelta))) {
        nlpComplError = lbDelta;
      }
    }
  }

  return nlpComplError;
}

// Function for MATLAB Function: '<S60>/NLMPC'
void full_loopModelClass::full_loop_xcopy_gprn(int32_T n, const real_T x_data[],
  real_T y_data[])
{
  int32_T b_k;
  for (b_k = 0; b_k < n; b_k++) {
    y_data[b_k] = x_data[b_k];
  }
}

// Function for MATLAB Function: '<S60>/NLMPC'
void full_loopModelClass::full_loop_computeGradLag_a(real_T workspace_data[],
  int32_T ldA, int32_T nVar, const real_T grad_data[], int32_T mIneq, const
  real_T AineqTrans_data[], const real_T AeqTrans_data[], const int32_T
  finiteFixed_data[], int32_T mFixed, const int32_T finiteLB_data[], int32_T mLB,
  const int32_T finiteUB_data[], int32_T mUB, const real_T lambda_data[])
{
  int32_T ix;
  int32_T iac;
  int32_T b_iy;
  int32_T c;
  int32_T b_ia;
  int32_T b_c;
  for (ix = 0; ix < nVar; ix++) {
    workspace_data[ix] = grad_data[ix];
  }

  for (ix = 0; ix < mFixed; ix++) {
    workspace_data[finiteFixed_data[ix] - 1] += lambda_data[ix];
  }

  ix = mFixed;
  b_c = ldA * 51 + 1;
  iac = 1;
  while (((ldA > 0) && (iac <= b_c)) || ((ldA < 0) && (iac >= b_c))) {
    b_iy = 0;
    c = (iac + nVar) - 1;
    for (b_ia = iac; b_ia <= c; b_ia++) {
      workspace_data[b_iy] += AeqTrans_data[b_ia - 1] * lambda_data[ix];
      b_iy++;
    }

    ix++;
    iac += ldA;
  }

  if (mIneq != 0) {
    ix = mFixed + 52;
    b_c = (mIneq - 1) * ldA + 1;
    iac = 1;
    while (((ldA > 0) && (iac <= b_c)) || ((ldA < 0) && (iac >= b_c))) {
      b_iy = 0;
      c = (iac + nVar) - 1;
      for (b_ia = iac; b_ia <= c; b_ia++) {
        workspace_data[b_iy] += AineqTrans_data[b_ia - 1] * lambda_data[ix];
        b_iy++;
      }

      ix++;
      iac += ldA;
    }
  }

  ix = (mFixed + mIneq) + 52;
  for (b_c = 0; b_c < mLB; b_c++) {
    workspace_data[finiteLB_data[b_c] - 1] -= lambda_data[ix];
    ix++;
  }

  for (b_c = 0; b_c < mUB; b_c++) {
    workspace_data[finiteUB_data[b_c] - 1] += lambda_data[ix];
    ix++;
  }
}

// Function for MATLAB Function: '<S60>/NLMPC'
void full_loopModelClass::full_loo_computeDualFeasError_m(int32_T nVar, const
  real_T gradLag_data[], boolean_T *gradOK, real_T *val)
{
  int32_T b_idx;
  real_T u1;
  boolean_T exitg1;
  *gradOK = true;
  *val = 0.0;
  b_idx = 0;
  exitg1 = false;
  while ((!exitg1) && (b_idx <= nVar - 1)) {
    *gradOK = ((!rtIsInf(gradLag_data[b_idx])) && (!rtIsNaN(gradLag_data[b_idx])));
    if (!*gradOK) {
      exitg1 = true;
    } else {
      u1 = std::abs(gradLag_data[b_idx]);
      if ((!(*val > u1)) && (!rtIsNaN(u1))) {
        *val = u1;
      }

      b_idx++;
    }
  }
}

// Function for MATLAB Function: '<S60>/NLMPC'
boolean_T full_loopModelClass::full_loop_isDeltaXTooSmall(const real_T xCurrent
  [69], const real_T delta_x_data[], int32_T nVar)
{
  boolean_T tf;
  int32_T b_idx;
  real_T u1;
  boolean_T exitg1;
  tf = true;
  b_idx = 0;
  exitg1 = false;
  while ((!exitg1) && (b_idx <= nVar - 1)) {
    u1 = std::abs(xCurrent[b_idx]);
    if ((1.0 > u1) || rtIsNaN(u1)) {
      u1 = 1.0;
    }

    if (0.1 * u1 <= std::abs(delta_x_data[b_idx])) {
      tf = false;
      exitg1 = true;
    } else {
      b_idx++;
    }
  }

  return tf;
}

// Function for MATLAB Function: '<S60>/NLMPC'
void full_loopModelClass::full_updateWorkingSetForNewQP_h(const real_T xk[69],
  s_Mspqy2ajbjhxqxIYYuZUwC_full_T *WorkingSet, int32_T mIneq, int32_T
  mNonlinIneq, const real_T cIneq_data[], const real_T cEq[52], int32_T mLB,
  const real_T lb[69], int32_T mUB, int32_T mFixed)
{
  int32_T nVar;
  int32_T iw0;
  int32_T iEq0;
  int32_T b_idx;
  int32_T i;
  nVar = WorkingSet->nVar - 1;
  iw0 = WorkingSet->ldA * mFixed;
  iEq0 = 0;
  for (b_idx = 0; b_idx < 52; b_idx++) {
    WorkingSet->beq[b_idx] = -cEq[b_idx];
    WorkingSet->bwset.data[mFixed + b_idx] = WorkingSet->beq[b_idx];
    for (i = 0; i <= nVar; i++) {
      WorkingSet->ATwset.data[iw0 + i] = WorkingSet->Aeq.data[iEq0 + i];
    }

    iw0 += WorkingSet->ldA;
    iEq0 += WorkingSet->ldA;
  }

  for (iw0 = 0; iw0 < mIneq; iw0++) {
    WorkingSet->bineq.data[iw0] = -cIneq_data[iw0];
  }

  for (iw0 = 0; iw0 < mLB; iw0++) {
    WorkingSet->lb.data[WorkingSet->indexLB.data[iw0] - 1] = -lb
      [WorkingSet->indexLB.data[iw0] - 1] + xk[WorkingSet->indexLB.data[iw0] - 1];
  }

  for (iw0 = 0; iw0 < mUB; iw0++) {
    WorkingSet->ub.data[WorkingSet->indexUB.data[iw0] - 1] = (rtInf) -
      xk[WorkingSet->indexUB.data[iw0] - 1];
  }

  for (iw0 = 0; iw0 < mFixed; iw0++) {
    WorkingSet->ub.data[WorkingSet->indexFixed.data[iw0] - 1] = (rtInf) -
      xk[WorkingSet->indexFixed.data[iw0] - 1];
    WorkingSet->bwset.data[iw0] = (rtInf) - xk[WorkingSet->indexFixed.data[iw0]
      - 1];
  }

  if (WorkingSet->nActiveConstr > mFixed + 52) {
    for (b_idx = mFixed + 52; b_idx < WorkingSet->nActiveConstr; b_idx++) {
      switch (WorkingSet->Wid.data[b_idx]) {
       case 4:
        WorkingSet->bwset.data[b_idx] = WorkingSet->lb.data
          [WorkingSet->Wlocalidx.data[b_idx] - 1];
        break;

       case 5:
        WorkingSet->bwset.data[b_idx] = WorkingSet->ub.data
          [WorkingSet->Wlocalidx.data[b_idx] - 1];
        break;

       default:
        WorkingSet->bwset.data[b_idx] = WorkingSet->bineq.data
          [WorkingSet->Wlocalidx.data[b_idx] - 1];
        if (WorkingSet->Wlocalidx.data[b_idx] >= mNonlinIneq) {
          iw0 = WorkingSet->ldA * b_idx;
          iEq0 = (WorkingSet->Wlocalidx.data[b_idx] - 1) * WorkingSet->ldA;
          for (i = 1; i - 1 <= nVar; i++) {
            WorkingSet->ATwset.data[(iw0 + i) - 1] = WorkingSet->Aineq.data
              [(iEq0 + i) - 1];
          }
        }
        break;
      }
    }
  }
}

// Function for MATLAB Function: '<S60>/NLMPC'
real_T full_loopModelClass::full_loop_xnrm2(int32_T n, const real_T x_data[],
  int32_T ix0)
{
  real_T y;
  int32_T kend;
  int32_T k;
  y = 0.0;
  if (n >= 1) {
    if (n == 1) {
      y = std::abs(x_data[ix0 - 1]);
    } else {
      full_loop_B.scale_p = 3.3121686421112381E-170;
      kend = (ix0 + n) - 1;
      for (k = ix0; k <= kend; k++) {
        full_loop_B.absxk_d = std::abs(x_data[k - 1]);
        if (full_loop_B.absxk_d > full_loop_B.scale_p) {
          full_loop_B.t_pq = full_loop_B.scale_p / full_loop_B.absxk_d;
          y = y * full_loop_B.t_pq * full_loop_B.t_pq + 1.0;
          full_loop_B.scale_p = full_loop_B.absxk_d;
        } else {
          full_loop_B.t_pq = full_loop_B.absxk_d / full_loop_B.scale_p;
          y += full_loop_B.t_pq * full_loop_B.t_pq;
        }
      }

      y = full_loop_B.scale_p * std::sqrt(y);
    }
  }

  return y;
}

// Function for MATLAB Function: '<S60>/NLMPC'
real_T full_loopModelClass::full_loop_xzlarfg(int32_T n, real_T *alpha1, real_T
  x_data[], int32_T ix0)
{
  real_T tau;
  int32_T knt;
  int32_T b_k;
  int32_T c_k;
  tau = 0.0;
  if (n > 0) {
    full_loop_B.xnorm = full_loop_xnrm2(n - 1, x_data, ix0);
    if (full_loop_B.xnorm != 0.0) {
      full_loop_B.xnorm = full_loop_rt_hypotd_snf(*alpha1, full_loop_B.xnorm);
      if (*alpha1 >= 0.0) {
        full_loop_B.xnorm = -full_loop_B.xnorm;
      }

      if (std::abs(full_loop_B.xnorm) < 1.0020841800044864E-292) {
        knt = -1;
        b_k = (ix0 + n) - 2;
        do {
          knt++;
          for (c_k = ix0; c_k <= b_k; c_k++) {
            x_data[c_k - 1] *= 9.9792015476736E+291;
          }

          full_loop_B.xnorm *= 9.9792015476736E+291;
          *alpha1 *= 9.9792015476736E+291;
        } while (!(std::abs(full_loop_B.xnorm) >= 1.0020841800044864E-292));

        full_loop_B.xnorm = full_loop_rt_hypotd_snf(*alpha1, full_loop_xnrm2(n -
          1, x_data, ix0));
        if (*alpha1 >= 0.0) {
          full_loop_B.xnorm = -full_loop_B.xnorm;
        }

        tau = (full_loop_B.xnorm - *alpha1) / full_loop_B.xnorm;
        *alpha1 = 1.0 / (*alpha1 - full_loop_B.xnorm);
        for (c_k = ix0; c_k <= b_k; c_k++) {
          x_data[c_k - 1] *= *alpha1;
        }

        for (b_k = 0; b_k <= knt; b_k++) {
          full_loop_B.xnorm *= 1.0020841800044864E-292;
        }

        *alpha1 = full_loop_B.xnorm;
      } else {
        tau = (full_loop_B.xnorm - *alpha1) / full_loop_B.xnorm;
        *alpha1 = 1.0 / (*alpha1 - full_loop_B.xnorm);
        knt = (ix0 + n) - 2;
        for (b_k = ix0; b_k <= knt; b_k++) {
          x_data[b_k - 1] *= *alpha1;
        }

        *alpha1 = full_loop_B.xnorm;
      }
    }
  }

  return tau;
}

// Function for MATLAB Function: '<S60>/NLMPC'
int32_T full_loopModelClass::full_loop_ilazlc(int32_T m, int32_T n, const real_T
  A_data[], int32_T ia0, int32_T lda)
{
  int32_T j;
  int32_T coltop;
  int32_T ia;
  int32_T exitg1;
  boolean_T exitg2;
  j = n;
  exitg2 = false;
  while ((!exitg2) && (j > 0)) {
    coltop = (j - 1) * lda + ia0;
    ia = coltop;
    do {
      exitg1 = 0;
      if (ia <= (coltop + m) - 1) {
        if (A_data[ia - 1] != 0.0) {
          exitg1 = 1;
        } else {
          ia++;
        }
      } else {
        j--;
        exitg1 = 2;
      }
    } while (exitg1 == 0);

    if (exitg1 == 1) {
      exitg2 = true;
    }
  }

  return j;
}

// Function for MATLAB Function: '<S60>/NLMPC'
void full_loopModelClass::full_loop_xgemv(int32_T m, int32_T n, const real_T
  A_data[], int32_T ia0, int32_T lda, const real_T x_data[], int32_T ix0, real_T
  y_data[])
{
  int32_T ix;
  int32_T b_iy;
  int32_T b;
  int32_T iac;
  int32_T d;
  int32_T ia;
  if (n != 0) {
    for (b_iy = 0; b_iy < n; b_iy++) {
      y_data[b_iy] = 0.0;
    }

    b_iy = 0;
    b = (n - 1) * lda + ia0;
    iac = ia0;
    while (((lda > 0) && (iac <= b)) || ((lda < 0) && (iac >= b))) {
      ix = ix0;
      full_loop_B.c_pn = 0.0;
      d = (iac + m) - 1;
      for (ia = iac; ia <= d; ia++) {
        full_loop_B.c_pn += A_data[ia - 1] * x_data[ix - 1];
        ix++;
      }

      y_data[b_iy] += full_loop_B.c_pn;
      b_iy++;
      iac += lda;
    }
  }
}

// Function for MATLAB Function: '<S60>/NLMPC'
void full_loopModelClass::full_loop_xgerc(int32_T m, int32_T n, real_T alpha1,
  int32_T ix0, const real_T y_data[], real_T A_data[], int32_T ia0, int32_T lda)
{
  int32_T jA;
  int32_T jy;
  int32_T ix;
  int32_T j;
  int32_T b;
  int32_T ijA;
  if (!(alpha1 == 0.0)) {
    jA = ia0 - 1;
    jy = 0;
    for (j = 0; j < n; j++) {
      if (y_data[jy] != 0.0) {
        full_loop_B.temp = y_data[jy] * alpha1;
        ix = ix0;
        b = m + jA;
        for (ijA = jA; ijA < b; ijA++) {
          A_data[ijA] += A_data[ix - 1] * full_loop_B.temp;
          ix++;
        }
      }

      jy++;
      jA += lda;
    }
  }
}

// Function for MATLAB Function: '<S60>/NLMPC'
void full_loopModelClass::full_loop_xzlarf(int32_T m, int32_T n, int32_T iv0,
  real_T tau, real_T C_data[], int32_T ic0, int32_T ldc, real_T work_data[])
{
  int32_T lastv;
  int32_T lastc;
  if (tau != 0.0) {
    lastv = m;
    lastc = iv0 + m;
    while ((lastv > 0) && (C_data[lastc - 2] == 0.0)) {
      lastv--;
      lastc--;
    }

    lastc = full_loop_ilazlc(lastv, n, C_data, ic0, ldc);
  } else {
    lastv = 0;
    lastc = 0;
  }

  if (lastv > 0) {
    full_loop_xgemv(lastv, lastc, C_data, ic0, ldc, C_data, iv0, work_data);
    full_loop_xgerc(lastv, lastc, -tau, iv0, work_data, C_data, ic0, ldc);
  }
}

// Function for MATLAB Function: '<S60>/NLMPC'
void full_loopModelClass::full_loop_qrf(real_T A_data[], const int32_T A_size[2],
  int32_T m, int32_T n, int32_T nfxd, real_T tau_data[])
{
  full_loop_B.lda = A_size[0];
  full_loop_B.loop_ub_p = A_size[1];
  if (0 <= full_loop_B.loop_ub_p - 1) {
    std::memset(&full_loop_B.work_data[0], 0, full_loop_B.loop_ub_p * sizeof
                (real_T));
  }

  full_loop_B.loop_ub_p = 0;
  while (full_loop_B.loop_ub_p <= nfxd - 1) {
    full_loop_B.ii_k = full_loop_B.loop_ub_p * full_loop_B.lda +
      full_loop_B.loop_ub_p;
    full_loop_B.mmi_p = m - full_loop_B.loop_ub_p;
    if (full_loop_B.loop_ub_p + 1 < m) {
      full_loop_B.b_atmp_k = A_data[full_loop_B.ii_k];
      tau_data[full_loop_B.loop_ub_p] = full_loop_xzlarfg(full_loop_B.mmi_p,
        &full_loop_B.b_atmp_k, A_data, full_loop_B.ii_k + 2);
      A_data[full_loop_B.ii_k] = full_loop_B.b_atmp_k;
    } else {
      tau_data[full_loop_B.loop_ub_p] = 0.0;
    }

    if (full_loop_B.loop_ub_p + 1 < n) {
      full_loop_B.b_atmp_k = A_data[full_loop_B.ii_k];
      A_data[full_loop_B.ii_k] = 1.0;
      full_loop_xzlarf(full_loop_B.mmi_p, (n - full_loop_B.loop_ub_p) - 1,
                       full_loop_B.ii_k + 1, tau_data[full_loop_B.loop_ub_p],
                       A_data, (full_loop_B.ii_k + full_loop_B.lda) + 1,
                       full_loop_B.lda, full_loop_B.work_data);
      A_data[full_loop_B.ii_k] = full_loop_B.b_atmp_k;
    }

    full_loop_B.loop_ub_p++;
  }
}

// Function for MATLAB Function: '<S60>/NLMPC'
int32_T full_loopModelClass::full_loop_ixamax_l(int32_T n, const real_T x_data[],
  int32_T ix0)
{
  int32_T idxmax;
  int32_T ix;
  real_T smax;
  int32_T k;
  real_T y;
  if (n < 1) {
    idxmax = 0;
  } else {
    idxmax = 1;
    if (n > 1) {
      ix = ix0;
      smax = std::abs(x_data[ix0 - 1]);
      for (k = 2; k <= n; k++) {
        ix++;
        y = std::abs(x_data[ix - 1]);
        if (y > smax) {
          idxmax = k;
          smax = y;
        }
      }
    }
  }

  return idxmax;
}

// Function for MATLAB Function: '<S60>/NLMPC'
void full_loopModelClass::full_loop_xswap(int32_T n, real_T x_data[], int32_T
  ix0, int32_T iy0)
{
  int32_T ix;
  int32_T iy;
  real_T temp;
  int32_T k;
  ix = ix0 - 1;
  iy = iy0 - 1;
  for (k = 0; k < n; k++) {
    temp = x_data[ix];
    x_data[ix] = x_data[iy];
    x_data[iy] = temp;
    ix++;
    iy++;
  }
}

// Function for MATLAB Function: '<S60>/NLMPC'
void full_loopModelClass::full_loop_qrpf(real_T A_data[], const int32_T A_size[2],
  int32_T m, int32_T n, int32_T nfxd, real_T tau_data[], int32_T jpvt_data[])
{
  full_loop_B.ma_c = A_size[0];
  if (m < n) {
    full_loop_B.minmn_c = m;
  } else {
    full_loop_B.minmn_c = n;
  }

  full_loop_B.loop_ub_h4 = A_size[1];
  if (0 <= full_loop_B.loop_ub_h4 - 1) {
    std::memset(&full_loop_B.work_data_h[0], 0, full_loop_B.loop_ub_h4 * sizeof
                (real_T));
  }

  full_loop_B.loop_ub_h4 = A_size[1];
  if (0 <= full_loop_B.loop_ub_h4 - 1) {
    std::memset(&full_loop_B.vn1_data[0], 0, full_loop_B.loop_ub_h4 * sizeof
                (real_T));
  }

  full_loop_B.loop_ub_h4 = A_size[1];
  if (0 <= full_loop_B.loop_ub_h4 - 1) {
    std::memset(&full_loop_B.vn2_data[0], 0, full_loop_B.loop_ub_h4 * sizeof
                (real_T));
  }

  full_loop_B.loop_ub_h4 = nfxd;
  while (full_loop_B.loop_ub_h4 + 1 <= n) {
    full_loop_B.vn1_data[full_loop_B.loop_ub_h4] = full_loop_xnrm2(m - nfxd,
      A_data, (full_loop_B.loop_ub_h4 * full_loop_B.ma_c + nfxd) + 1);
    full_loop_B.vn2_data[full_loop_B.loop_ub_h4] =
      full_loop_B.vn1_data[full_loop_B.loop_ub_h4];
    full_loop_B.loop_ub_h4++;
  }

  full_loop_B.loop_ub_h4 = nfxd;
  while (full_loop_B.loop_ub_h4 + 1 <= full_loop_B.minmn_c) {
    full_loop_B.ii = full_loop_B.loop_ub_h4 * full_loop_B.ma_c +
      full_loop_B.loop_ub_h4;
    full_loop_B.nmi = n - full_loop_B.loop_ub_h4;
    full_loop_B.mmi = m - full_loop_B.loop_ub_h4;
    full_loop_B.pvt = (full_loop_ixamax_l(full_loop_B.nmi, full_loop_B.vn1_data,
      full_loop_B.loop_ub_h4 + 1) + full_loop_B.loop_ub_h4) - 1;
    if (full_loop_B.pvt + 1 != full_loop_B.loop_ub_h4 + 1) {
      full_loop_xswap(m, A_data, full_loop_B.pvt * full_loop_B.ma_c + 1,
                      full_loop_B.loop_ub_h4 * full_loop_B.ma_c + 1);
      full_loop_B.itemp = jpvt_data[full_loop_B.pvt];
      jpvt_data[full_loop_B.pvt] = jpvt_data[full_loop_B.loop_ub_h4];
      jpvt_data[full_loop_B.loop_ub_h4] = full_loop_B.itemp;
      full_loop_B.vn1_data[full_loop_B.pvt] =
        full_loop_B.vn1_data[full_loop_B.loop_ub_h4];
      full_loop_B.vn2_data[full_loop_B.pvt] =
        full_loop_B.vn2_data[full_loop_B.loop_ub_h4];
    }

    if (full_loop_B.loop_ub_h4 + 1 < m) {
      full_loop_B.b_atmp = A_data[full_loop_B.ii];
      tau_data[full_loop_B.loop_ub_h4] = full_loop_xzlarfg(full_loop_B.mmi,
        &full_loop_B.b_atmp, A_data, full_loop_B.ii + 2);
      A_data[full_loop_B.ii] = full_loop_B.b_atmp;
    } else {
      tau_data[full_loop_B.loop_ub_h4] = 0.0;
    }

    if (full_loop_B.loop_ub_h4 + 1 < n) {
      full_loop_B.b_atmp = A_data[full_loop_B.ii];
      A_data[full_loop_B.ii] = 1.0;
      full_loop_xzlarf(full_loop_B.mmi, full_loop_B.nmi - 1, full_loop_B.ii + 1,
                       tau_data[full_loop_B.loop_ub_h4], A_data, (full_loop_B.ii
        + full_loop_B.ma_c) + 1, full_loop_B.ma_c, full_loop_B.work_data_h);
      A_data[full_loop_B.ii] = full_loop_B.b_atmp;
    }

    full_loop_B.ii = full_loop_B.loop_ub_h4 + 1;
    while (full_loop_B.ii + 1 <= n) {
      full_loop_B.nmi = full_loop_B.ii * full_loop_B.ma_c +
        full_loop_B.loop_ub_h4;
      if (full_loop_B.vn1_data[full_loop_B.ii] != 0.0) {
        full_loop_B.b_atmp = std::abs(A_data[full_loop_B.nmi]) /
          full_loop_B.vn1_data[full_loop_B.ii];
        full_loop_B.b_atmp = 1.0 - full_loop_B.b_atmp * full_loop_B.b_atmp;
        if (full_loop_B.b_atmp < 0.0) {
          full_loop_B.b_atmp = 0.0;
        }

        full_loop_B.temp2 = full_loop_B.vn1_data[full_loop_B.ii] /
          full_loop_B.vn2_data[full_loop_B.ii];
        full_loop_B.temp2 = full_loop_B.temp2 * full_loop_B.temp2 *
          full_loop_B.b_atmp;
        if (full_loop_B.temp2 <= 1.4901161193847656E-8) {
          if (full_loop_B.loop_ub_h4 + 1 < m) {
            full_loop_B.vn1_data[full_loop_B.ii] = full_loop_xnrm2
              (full_loop_B.mmi - 1, A_data, full_loop_B.nmi + 2);
            full_loop_B.vn2_data[full_loop_B.ii] =
              full_loop_B.vn1_data[full_loop_B.ii];
          } else {
            full_loop_B.vn1_data[full_loop_B.ii] = 0.0;
            full_loop_B.vn2_data[full_loop_B.ii] = 0.0;
          }
        } else {
          full_loop_B.vn1_data[full_loop_B.ii] *= std::sqrt(full_loop_B.b_atmp);
        }
      }

      full_loop_B.ii++;
    }

    full_loop_B.loop_ub_h4++;
  }
}

// Function for MATLAB Function: '<S60>/NLMPC'
void full_loopModelClass::full_loop_xgeqp3(real_T A_data[], const int32_T
  A_size[2], int32_T m, int32_T n, int32_T jpvt_data[], real_T tau_data[],
  int32_T *tau_size)
{
  full_loop_B.ma = A_size[0];
  if (A_size[0] < A_size[1]) {
    full_loop_B.minmana = A_size[0];
  } else {
    full_loop_B.minmana = A_size[1];
  }

  if (m < n) {
    full_loop_B.minmn = m;
  } else {
    full_loop_B.minmn = n;
  }

  *tau_size = full_loop_B.minmana;
  if (0 <= full_loop_B.minmana - 1) {
    std::memset(&tau_data[0], 0, full_loop_B.minmana * sizeof(real_T));
  }

  if (full_loop_B.minmn < 1) {
    full_loop_B.ma = 0;
    while (full_loop_B.ma <= n - 1) {
      jpvt_data[full_loop_B.ma] = full_loop_B.ma + 1;
      full_loop_B.ma++;
    }
  } else {
    full_loop_B.minmana = -1;
    full_loop_B.c_j_j = 0;
    while (full_loop_B.c_j_j <= n - 1) {
      if (jpvt_data[full_loop_B.c_j_j] != 0) {
        full_loop_B.minmana++;
        if (full_loop_B.c_j_j + 1 != full_loop_B.minmana + 1) {
          full_loop_xswap(m, A_data, full_loop_B.c_j_j * full_loop_B.ma + 1,
                          full_loop_B.minmana * full_loop_B.ma + 1);
          jpvt_data[full_loop_B.c_j_j] = jpvt_data[full_loop_B.minmana];
          jpvt_data[full_loop_B.minmana] = full_loop_B.c_j_j + 1;
        } else {
          jpvt_data[full_loop_B.c_j_j] = full_loop_B.c_j_j + 1;
        }
      } else {
        jpvt_data[full_loop_B.c_j_j] = full_loop_B.c_j_j + 1;
      }

      full_loop_B.c_j_j++;
    }

    full_loop_B.minmana++;
    if (full_loop_B.minmana >= full_loop_B.minmn) {
      full_loop_B.minmana = full_loop_B.minmn;
    }

    full_loop_qrf(A_data, A_size, m, n, full_loop_B.minmana, tau_data);
    if (full_loop_B.minmana < full_loop_B.minmn) {
      full_loop_qrpf(A_data, A_size, m, n, full_loop_B.minmana, tau_data,
                     jpvt_data);
    }
  }
}

// Function for MATLAB Function: '<S60>/NLMPC'
void full_loopModelClass::full_loop_xcopy_gprnb(int32_T n, const real_T x_data[],
  int32_T ix0, real_T y_data[], int32_T iy0)
{
  int32_T b_k;
  for (b_k = -1; b_k < n - 1; b_k++) {
    y_data[iy0 + b_k] = x_data[ix0 + b_k];
  }
}

// Function for MATLAB Function: '<S60>/NLMPC'
void full_loopModelClass::full_loop_factorQRE(s_3RW6EhlAOINzvAvYfuaanB_full_T
  *obj, const real_T A_data[], const int32_T A_size[2], int32_T mrows, int32_T
  ncols)
{
  boolean_T guard1 = false;
  guard1 = false;
  if ((A_size[0] != 0) && (A_size[1] != 0) && (mrows * ncols > 0)) {
    full_loop_B.b_idx_l = 0;
    while (full_loop_B.b_idx_l <= ncols - 1) {
      full_loop_xcopy_gprnb(mrows, A_data, A_size[0] * full_loop_B.b_idx_l + 1,
                            obj->QR.data, obj->ldq * full_loop_B.b_idx_l + 1);
      full_loop_B.b_idx_l++;
    }

    guard1 = true;
  } else if (mrows * ncols == 0) {
    obj->mrows = mrows;
    obj->ncols = ncols;
    obj->minRowCol = 0;
  } else {
    guard1 = true;
  }

  if (guard1) {
    obj->usedPivoting = true;
    obj->mrows = mrows;
    obj->ncols = ncols;
    if (mrows < ncols) {
      obj->minRowCol = mrows;
    } else {
      obj->minRowCol = ncols;
    }

    full_loop_B.b_size_h[0] = obj->QR.size[0];
    full_loop_B.b_size_h[1] = obj->QR.size[1];
    full_loop_B.b_idx_l = obj->QR.size[0] * obj->QR.size[1] - 1;
    if (0 <= full_loop_B.b_idx_l) {
      std::memcpy(&full_loop_B.b_data[0], &obj->QR.data[0], (full_loop_B.b_idx_l
        + 1) * sizeof(real_T));
    }

    full_loop_B.d_size_jx = obj->jpvt.size;
    full_loop_B.b_idx_l = obj->jpvt.size;
    if (0 <= full_loop_B.b_idx_l - 1) {
      std::memcpy(&full_loop_B.d_data_d[0], &obj->jpvt.data[0],
                  full_loop_B.b_idx_l * sizeof(int32_T));
    }

    full_loop_xgeqp3(full_loop_B.b_data, full_loop_B.b_size_h, mrows, ncols,
                     full_loop_B.d_data_d, full_loop_B.c_data_o,
                     &full_loop_B.c_size_j);
    obj->QR.size[0] = full_loop_B.b_size_h[0];
    obj->QR.size[1] = full_loop_B.b_size_h[1];
    full_loop_B.b_idx_l = full_loop_B.b_size_h[0] * full_loop_B.b_size_h[1] - 1;
    if (0 <= full_loop_B.b_idx_l) {
      std::memcpy(&obj->QR.data[0], &full_loop_B.b_data[0], (full_loop_B.b_idx_l
        + 1) * sizeof(real_T));
    }

    obj->tau.size = full_loop_B.c_size_j;
    full_loop_B.b_idx_l = full_loop_B.c_size_j;
    if (0 <= full_loop_B.b_idx_l - 1) {
      std::memcpy(&obj->tau.data[0], &full_loop_B.c_data_o[0],
                  full_loop_B.b_idx_l * sizeof(real_T));
    }

    obj->jpvt.size = full_loop_B.d_size_jx;
    full_loop_B.b_idx_l = full_loop_B.d_size_jx;
    if (0 <= full_loop_B.b_idx_l - 1) {
      std::memcpy(&obj->jpvt.data[0], &full_loop_B.d_data_d[0],
                  full_loop_B.b_idx_l * sizeof(int32_T));
    }
  }
}

// Function for MATLAB Function: '<S60>/NLMPC'
void full_loopModelClass::full_loop_xscal(int32_T n, real_T a, real_T x_data[],
  int32_T ix0)
{
  int32_T b;
  int32_T k;
  b = (ix0 + n) - 1;
  for (k = ix0; k <= b; k++) {
    x_data[k - 1] *= a;
  }
}

// Function for MATLAB Function: '<S60>/NLMPC'
void full_loopModelClass::full_loop_xorgqr(int32_T m, int32_T n, int32_T k,
  real_T A_data[], const int32_T A_size[2], int32_T lda, const real_T tau_data[])
{
  int16_T b_idx_0;
  if (n >= 1) {
    full_loop_B.itau = k;
    while (full_loop_B.itau <= n - 1) {
      full_loop_B.i_gu = full_loop_B.itau * lda;
      full_loop_B.iaii = 0;
      while (full_loop_B.iaii <= m - 1) {
        A_data[full_loop_B.i_gu + full_loop_B.iaii] = 0.0;
        full_loop_B.iaii++;
      }

      A_data[full_loop_B.i_gu + full_loop_B.itau] = 1.0;
      full_loop_B.itau++;
    }

    full_loop_B.itau = k - 1;
    b_idx_0 = static_cast<int16_T>(A_size[1]);
    full_loop_B.i_gu = b_idx_0;
    if (0 <= full_loop_B.i_gu - 1) {
      std::memset(&full_loop_B.work_data_l[0], 0, full_loop_B.i_gu * sizeof
                  (real_T));
    }

    full_loop_B.i_gu = k;
    while (full_loop_B.i_gu >= 1) {
      full_loop_B.iaii = (full_loop_B.i_gu - 1) * lda + full_loop_B.i_gu;
      if (full_loop_B.i_gu < n) {
        A_data[full_loop_B.iaii - 1] = 1.0;
        full_loop_xzlarf((m - full_loop_B.i_gu) + 1, n - full_loop_B.i_gu,
                         full_loop_B.iaii, tau_data[full_loop_B.itau], A_data,
                         full_loop_B.iaii + lda, lda, full_loop_B.work_data_l);
      }

      if (full_loop_B.i_gu < m) {
        full_loop_xscal(m - full_loop_B.i_gu, -tau_data[full_loop_B.itau],
                        A_data, full_loop_B.iaii + 1);
      }

      A_data[full_loop_B.iaii - 1] = 1.0 - tau_data[full_loop_B.itau];
      full_loop_B.b_j_o = 0;
      while (full_loop_B.b_j_o <= full_loop_B.i_gu - 2) {
        A_data[(full_loop_B.iaii - full_loop_B.b_j_o) - 2] = 0.0;
        full_loop_B.b_j_o++;
      }

      full_loop_B.itau--;
      full_loop_B.i_gu--;
    }
  }
}

// Function for MATLAB Function: '<S60>/NLMPC'
void full_loopModelClass::full_loop_computeQ_(s_3RW6EhlAOINzvAvYfuaanB_full_T
  *obj, int32_T nrows)
{
  full_loop_B.idx_a = 0;
  while (full_loop_B.idx_a <= obj->minRowCol - 1) {
    full_loop_B.iQR0 = obj->ldq * full_loop_B.idx_a + full_loop_B.idx_a;
    full_loop_B.n_j = obj->mrows - full_loop_B.idx_a;
    full_loop_B.k_a = 1;
    while (full_loop_B.k_a - 1 <= full_loop_B.n_j - 2) {
      full_loop_B.i21 = full_loop_B.iQR0 + full_loop_B.k_a;
      obj->Q.data[full_loop_B.i21] = obj->QR.data[full_loop_B.i21];
      full_loop_B.k_a++;
    }

    full_loop_B.idx_a++;
  }

  full_loop_xorgqr(obj->mrows, nrows, obj->minRowCol, obj->Q.data, obj->Q.size,
                   obj->ldq, obj->tau.data);
}

// Function for MATLAB Function: '<S60>/NLMPC'
void full_loopModelClass::full_loop_xgemv_j(int32_T m, int32_T n, const real_T
  A_data[], int32_T lda, const real_T x_data[], real_T y_data[])
{
  int32_T ix;
  real_T c;
  int32_T b_iy;
  int32_T iac;
  int32_T b;
  int32_T ia;
  int32_T b_c;
  if (m != 0) {
    for (b_iy = 0; b_iy < n; b_iy++) {
      y_data[b_iy] = 0.0;
    }

    b_iy = 0;
    b_c = (n - 1) * lda + 1;
    iac = 1;
    while (((lda > 0) && (iac <= b_c)) || ((lda < 0) && (iac >= b_c))) {
      ix = 0;
      c = 0.0;
      b = (iac + m) - 1;
      for (ia = iac; ia <= b; ia++) {
        c += A_data[ia - 1] * x_data[ix];
        ix++;
      }

      y_data[b_iy] += c;
      b_iy++;
      iac += lda;
    }
  }
}

// Function for MATLAB Function: '<S60>/NLMPC'
void full_loopModelClass::full_loop_xtrsv(int32_T n, const real_T A_data[],
  int32_T lda, real_T x_data[])
{
  int32_T jjA;
  int32_T ix;
  int32_T j;
  int32_T i;
  if (n != 0) {
    for (j = n - 1; j + 1 > 0; j--) {
      jjA = j * lda + j;
      x_data[j] /= A_data[jjA];
      for (i = 1; i - 1 < j; i++) {
        ix = j - i;
        x_data[ix] -= A_data[jjA - i] * x_data[j];
      }
    }
  }
}

// Function for MATLAB Function: '<S60>/NLMPC'
void full_loopModelClass::full_loop_computeLambdaLSQ(int32_T nVar, int32_T
  mConstr, s_3RW6EhlAOINzvAvYfuaanB_full_T *QRManager, const real_T ATwset_data[],
  const int32_T ATwset_size[2], const real_T grad_data[], real_T lambdaLSQ_data[],
  real_T workspace_data[])
{
  full_loop_B.fullRank_R = 0;
  while (full_loop_B.fullRank_R <= mConstr - 1) {
    lambdaLSQ_data[full_loop_B.fullRank_R] = 0.0;
    full_loop_B.fullRank_R++;
  }

  full_loop_factorQRE(QRManager, ATwset_data, ATwset_size, nVar, mConstr);
  full_loop_computeQ_(QRManager, QRManager->mrows);
  full_loop_xgemv_j(nVar, nVar, QRManager->Q.data, QRManager->ldq, grad_data,
                    workspace_data);
  if (nVar > mConstr) {
    full_loop_B.fullRank_R = nVar;
  } else {
    full_loop_B.fullRank_R = mConstr;
  }

  full_loop_B.tol_k = static_cast<real_T>(full_loop_B.fullRank_R) *
    2.2204460492503131E-16;
  if (1.4901161193847656E-8 < full_loop_B.tol_k) {
    full_loop_B.tol_k = 1.4901161193847656E-8;
  }

  full_loop_B.tol_k *= std::abs(QRManager->QR.data[0]);
  if (nVar < mConstr) {
    full_loop_B.fullRank_R = nVar;
  } else {
    full_loop_B.fullRank_R = mConstr;
  }

  full_loop_B.rankR = 0;
  full_loop_B.iQR_diag = 0;
  while ((full_loop_B.rankR < full_loop_B.fullRank_R) && (std::abs
          (QRManager->QR.data[full_loop_B.iQR_diag]) > full_loop_B.tol_k)) {
    full_loop_B.rankR++;
    full_loop_B.iQR_diag = (full_loop_B.iQR_diag + QRManager->ldq) + 1;
  }

  full_loop_xtrsv(full_loop_B.rankR, QRManager->QR.data, QRManager->ldq,
                  workspace_data);
  if (mConstr < full_loop_B.fullRank_R) {
    full_loop_B.fullRank_R = mConstr;
  }

  full_loop_B.rankR = 0;
  while (full_loop_B.rankR <= full_loop_B.fullRank_R - 1) {
    lambdaLSQ_data[QRManager->jpvt.data[full_loop_B.rankR] - 1] =
      workspace_data[full_loop_B.rankR];
    full_loop_B.rankR++;
  }
}

// Function for MATLAB Function: '<S60>/NLMPC'
void full_loopModelClass::full_loop_sortLambdaQP(real_T lambda_data[], int32_T
  WorkingSet_nActiveConstr, const int32_T WorkingSet_sizes[5], const int32_T
  WorkingSet_isActiveIdx[6], const int32_T WorkingSet_Wid_data[], const int32_T
  WorkingSet_Wlocalidx_data[], real_T workspace_data[])
{
  int32_T mAll;
  int32_T idx;
  int32_T idxOffset;
  if (WorkingSet_nActiveConstr != 0) {
    mAll = (((WorkingSet_sizes[0] + WorkingSet_sizes[3]) + WorkingSet_sizes[4])
            + WorkingSet_sizes[2]) + 51;
    for (idx = 0; idx <= mAll; idx++) {
      workspace_data[idx] = lambda_data[idx];
    }

    for (idx = 0; idx <= mAll; idx++) {
      lambda_data[idx] = 0.0;
    }

    mAll = 0;
    idx = 0;
    while ((idx + 1 <= WorkingSet_nActiveConstr) && (WorkingSet_Wid_data[idx] <=
            2)) {
      if (WorkingSet_Wid_data[idx] == 1) {
        idxOffset = 1;
      } else {
        idxOffset = WorkingSet_isActiveIdx[1];
      }

      lambda_data[(idxOffset + WorkingSet_Wlocalidx_data[idx]) - 2] =
        workspace_data[mAll];
      mAll++;
      idx++;
    }

    while (idx + 1 <= WorkingSet_nActiveConstr) {
      switch (WorkingSet_Wid_data[idx]) {
       case 3:
        idxOffset = WorkingSet_isActiveIdx[2];
        break;

       case 4:
        idxOffset = WorkingSet_isActiveIdx[3];
        break;

       default:
        idxOffset = WorkingSet_isActiveIdx[4];
        break;
      }

      lambda_data[(idxOffset + WorkingSet_Wlocalidx_data[idx]) - 2] =
        workspace_data[mAll];
      mAll++;
      idx++;
    }
  }
}

// Function for MATLAB Function: '<S60>/NLMPC'
void full_loopModelClass::full_loop_test_exit_a(s7RdrPWkr8UPAUyTdDJkLaG_full__T *
  Flags, s_i4ZL8C3jdkCeOA2IrFHlEF_full_T *memspace,
  s6ICcRyulWOFjNCN0ll7VsE_full__T *MeritFunction, const int32_T
  *fscales_lineq_constraint_size, const int32_T *fscales_cineq_constraint_size,
  s_Mspqy2ajbjhxqxIYYuZUwC_full_T *WorkingSet, s_ZxHOyfVSozxr6pSGbgUCkF_full_T
  *TrialState, s_3RW6EhlAOINzvAvYfuaanB_full_T *QRManager, const real_T lb[69])
{
  boolean_T isFeasible;
  boolean_T b;
  boolean_T guard1 = false;
  full_loop_B.nVar_o = WorkingSet->nVar;
  full_loop_B.mFixed_a = WorkingSet->sizes[0];
  full_loop_B.mIneq_e = WorkingSet->sizes[2];
  full_loop_B.mLB_o = WorkingSet->sizes[3];
  full_loop_B.mUB_i = WorkingSet->sizes[4];
  full_loop_B.mLambda = (((WorkingSet->sizes[0] + WorkingSet->sizes[2]) +
    WorkingSet->sizes[3]) + WorkingSet->sizes[4]) + 52;
  full_loop_computeGradLag(TrialState->gradLag.data, WorkingSet->ldA,
    WorkingSet->nVar, TrialState->grad.data, WorkingSet->sizes[2],
    WorkingSet->Aineq.data, WorkingSet->Aeq.data, WorkingSet->indexFixed.data,
    WorkingSet->sizes[0], WorkingSet->indexLB.data, WorkingSet->sizes[3],
    WorkingSet->indexUB.data, WorkingSet->sizes[4], TrialState->lambdasqp.data);
  full_loop_B.optimRelativeFactor = std::abs(TrialState->
    grad.data[full_loop_ixamax(WorkingSet->nVar, TrialState->grad.data) - 1]);
  if ((1.0 > full_loop_B.optimRelativeFactor) || rtIsNaN
      (full_loop_B.optimRelativeFactor)) {
    full_loop_B.optimRelativeFactor = 1.0;
  }

  if (!full_loop_isfinite(full_loop_B.optimRelativeFactor)) {
    full_loop_B.optimRelativeFactor = 1.0;
  }

  MeritFunction->nlpPrimalFeasError = full_loo_computePrimalFeasError
    (TrialState->xstarsqp, WorkingSet->sizes[2] - TrialState->mNonlinIneq,
     TrialState->mNonlinIneq, TrialState->cIneq.data, TrialState->cEq,
     WorkingSet->indexLB.data, WorkingSet->sizes[3], lb,
     WorkingSet->indexUB.data, WorkingSet->sizes[4]);
  if (TrialState->sqpIterations == 0) {
    if ((1.0 > MeritFunction->nlpPrimalFeasError) || rtIsNaN
        (MeritFunction->nlpPrimalFeasError)) {
      MeritFunction->feasRelativeFactor = 1.0;
    } else {
      MeritFunction->feasRelativeFactor = MeritFunction->nlpPrimalFeasError;
    }
  }

  isFeasible = (MeritFunction->nlpPrimalFeasError <= 0.02 *
                MeritFunction->feasRelativeFactor);
  full_loop_computeDualFeasError(WorkingSet->nVar, TrialState->gradLag.data, &b,
    &full_loop_B.c_fo);
  Flags->gradOK = b;
  MeritFunction->nlpDualFeasError = full_loop_B.c_fo;
  if (!b) {
    Flags->done = true;
    if (isFeasible) {
      TrialState->sqpExitFlag = 2;
    } else {
      TrialState->sqpExitFlag = -2;
    }
  } else {
    MeritFunction->nlpComplError = full_loop_computeComplError
      (fscales_lineq_constraint_size, fscales_cineq_constraint_size,
       TrialState->xstarsqp, WorkingSet->sizes[2], TrialState->cIneq.data,
       WorkingSet->indexLB.data, WorkingSet->sizes[3], lb,
       WorkingSet->indexUB.data, WorkingSet->sizes[4],
       TrialState->lambdasqp.data, WorkingSet->sizes[0] + 53);
    if ((full_loop_B.c_fo > MeritFunction->nlpComplError) || rtIsNaN
        (MeritFunction->nlpComplError)) {
      MeritFunction->firstOrderOpt = full_loop_B.c_fo;
    } else {
      MeritFunction->firstOrderOpt = MeritFunction->nlpComplError;
    }

    if (TrialState->sqpIterations > 1) {
      full_loop_computeGradLag_a(memspace->workspace_double.data,
        WorkingSet->ldA, WorkingSet->nVar, TrialState->grad.data,
        WorkingSet->sizes[2], WorkingSet->Aineq.data, WorkingSet->Aeq.data,
        WorkingSet->indexFixed.data, WorkingSet->sizes[0],
        WorkingSet->indexLB.data, WorkingSet->sizes[3], WorkingSet->indexUB.data,
        WorkingSet->sizes[4], TrialState->lambdasqp_old.data);
      full_loo_computeDualFeasError_m(WorkingSet->nVar,
        memspace->workspace_double.data, &b, &full_loop_B.nlpComplErrorLSQ);
      full_loop_B.nlpComplErrorTmp = full_loop_computeComplError
        (fscales_lineq_constraint_size, fscales_cineq_constraint_size,
         TrialState->xstarsqp, WorkingSet->sizes[2], TrialState->cIneq.data,
         WorkingSet->indexLB.data, WorkingSet->sizes[3], lb,
         WorkingSet->indexUB.data, WorkingSet->sizes[4],
         TrialState->lambdasqp_old.data, WorkingSet->sizes[0] + 1);
      if ((full_loop_B.nlpComplErrorLSQ > full_loop_B.nlpComplErrorTmp) ||
          rtIsNaN(full_loop_B.nlpComplErrorTmp)) {
        full_loop_B.d8 = full_loop_B.nlpComplErrorLSQ;
      } else {
        full_loop_B.d8 = full_loop_B.nlpComplErrorTmp;
      }

      if ((!(full_loop_B.c_fo > MeritFunction->nlpComplError)) && (!rtIsNaN
           (MeritFunction->nlpComplError))) {
        full_loop_B.c_fo = MeritFunction->nlpComplError;
      }

      if (full_loop_B.d8 < full_loop_B.c_fo) {
        MeritFunction->nlpDualFeasError = full_loop_B.nlpComplErrorLSQ;
        MeritFunction->nlpComplError = full_loop_B.nlpComplErrorTmp;
        MeritFunction->firstOrderOpt = full_loop_B.d8;
        full_loop_xcopy_gprn(full_loop_B.mLambda, TrialState->lambdasqp_old.data,
                             TrialState->lambdasqp.data);
      } else {
        full_loop_xcopy_gprn(full_loop_B.mLambda, TrialState->lambdasqp.data,
                             TrialState->lambdasqp_old.data);
      }
    } else {
      full_loop_xcopy_gprn(full_loop_B.mLambda, TrialState->lambdasqp.data,
                           TrialState->lambdasqp_old.data);
    }

    if (isFeasible && (MeritFunction->nlpDualFeasError <= 0.02 *
                       full_loop_B.optimRelativeFactor) &&
        (MeritFunction->nlpComplError <= 0.02 * full_loop_B.optimRelativeFactor))
    {
      Flags->done = true;
      TrialState->sqpExitFlag = 1;
    } else {
      Flags->done = false;
      if (isFeasible && (TrialState->sqpFval < -1.0E+20)) {
        Flags->done = true;
        TrialState->sqpExitFlag = -3;
      } else {
        guard1 = false;
        if ((TrialState->sqpIterations > 0) && full_loop_isDeltaXTooSmall
            (TrialState->xstarsqp, TrialState->delta_x.data, WorkingSet->nVar))
        {
          if (!isFeasible) {
            if (Flags->stepType != 2) {
              Flags->stepType = 2;
              Flags->failedLineSearch = false;
              Flags->stepAccepted = false;
              guard1 = true;
            } else {
              Flags->done = true;
              TrialState->sqpExitFlag = -2;
            }
          } else {
            full_loop_B.nActiveConstr = WorkingSet->nActiveConstr;
            if (WorkingSet->nActiveConstr > 0) {
              full_updateWorkingSetForNewQP_h(TrialState->xstarsqp, WorkingSet,
                WorkingSet->sizes[2], TrialState->mNonlinIneq,
                TrialState->cIneq.data, TrialState->cEq, WorkingSet->sizes[3],
                lb, WorkingSet->sizes[4], WorkingSet->sizes[0]);
              full_loop_computeLambdaLSQ(full_loop_B.nVar_o,
                full_loop_B.nActiveConstr, QRManager, WorkingSet->ATwset.data,
                WorkingSet->ATwset.size, TrialState->grad.data,
                TrialState->lambda.data, memspace->workspace_double.data);
              full_loop_B.nActiveConstr = full_loop_B.mFixed_a;
              while (full_loop_B.nActiveConstr + 1 <= full_loop_B.mFixed_a + 52)
              {
                TrialState->lambda.data[full_loop_B.nActiveConstr] =
                  -TrialState->lambda.data[full_loop_B.nActiveConstr];
                full_loop_B.nActiveConstr++;
              }

              full_loop_B.d_size_b = TrialState->lambda.size;
              full_loop_B.nActiveConstr = TrialState->lambda.size;
              if (0 <= full_loop_B.nActiveConstr - 1) {
                std::memcpy(&full_loop_B.d_data[0], &TrialState->lambda.data[0],
                            full_loop_B.nActiveConstr * sizeof(real_T));
              }

              full_loop_sortLambdaQP(full_loop_B.d_data,
                WorkingSet->nActiveConstr, WorkingSet->sizes,
                WorkingSet->isActiveIdx, WorkingSet->Wid.data,
                WorkingSet->Wlocalidx.data, memspace->workspace_double.data);
              TrialState->lambda.size = full_loop_B.d_size_b;
              full_loop_B.nActiveConstr = full_loop_B.d_size_b;
              if (0 <= full_loop_B.nActiveConstr - 1) {
                std::memcpy(&TrialState->lambda.data[0], &full_loop_B.d_data[0],
                            full_loop_B.nActiveConstr * sizeof(real_T));
              }

              full_loop_computeGradLag_a(memspace->workspace_double.data,
                WorkingSet->ldA, full_loop_B.nVar_o, TrialState->grad.data,
                full_loop_B.mIneq_e, WorkingSet->Aineq.data,
                WorkingSet->Aeq.data, WorkingSet->indexFixed.data,
                full_loop_B.mFixed_a, WorkingSet->indexLB.data,
                full_loop_B.mLB_o, WorkingSet->indexUB.data, full_loop_B.mUB_i,
                full_loop_B.d_data);
              full_loo_computeDualFeasError_m(full_loop_B.nVar_o,
                memspace->workspace_double.data, &isFeasible, &full_loop_B.c_fo);
              full_loop_B.nlpComplErrorLSQ = full_loop_computeComplError
                (fscales_lineq_constraint_size, fscales_cineq_constraint_size,
                 TrialState->xstarsqp, full_loop_B.mIneq_e,
                 TrialState->cIneq.data, WorkingSet->indexLB.data,
                 full_loop_B.mLB_o, lb, WorkingSet->indexUB.data,
                 full_loop_B.mUB_i, full_loop_B.d_data, full_loop_B.mFixed_a + 1);
              if ((full_loop_B.c_fo <= 0.02 * full_loop_B.optimRelativeFactor) &&
                  (full_loop_B.nlpComplErrorLSQ <= 0.02 *
                   full_loop_B.optimRelativeFactor)) {
                MeritFunction->nlpDualFeasError = full_loop_B.c_fo;
                MeritFunction->nlpComplError = full_loop_B.nlpComplErrorLSQ;
                if (full_loop_B.c_fo > full_loop_B.nlpComplErrorLSQ) {
                  MeritFunction->firstOrderOpt = full_loop_B.c_fo;
                } else {
                  MeritFunction->firstOrderOpt = full_loop_B.nlpComplErrorLSQ;
                }

                full_loop_xcopy_gprn(full_loop_B.mLambda, full_loop_B.d_data,
                                     TrialState->lambdasqp.data);
                Flags->done = true;
                TrialState->sqpExitFlag = 1;
              } else {
                Flags->done = true;
                TrialState->sqpExitFlag = 2;
              }
            } else {
              Flags->done = true;
              TrialState->sqpExitFlag = 2;
            }
          }
        } else {
          guard1 = true;
        }

        if (guard1) {
          if (TrialState->sqpIterations >= 400) {
            Flags->done = true;
            TrialState->sqpExitFlag = 0;
          } else {
            if (TrialState->FunctionEvaluations >= 6900) {
              Flags->done = true;
              TrialState->sqpExitFlag = 0;
            }
          }
        }
      }
    }
  }
}

// Function for MATLAB Function: '<S60>/NLMPC'
void full_loopModelClass::full_loop_computeDeltaLag(int32_T nVar, int32_T ldJ,
  int32_T mNonlinIneq, real_T workspace_data[], const real_T grad_data[], const
  real_T JacIneqTrans_data[], int32_T ineqJ0, const real_T JacEqTrans_data[],
  const real_T grad_old_data[], const real_T JacIneqTrans_old_data[], const
  real_T JacEqTrans_old_data[], const real_T lambda_data[], int32_T ineqL0,
  int32_T eqL0)
{
  int32_T b_i;
  int32_T ix;
  int32_T iac;
  int32_T c_iy;
  int32_T c_ia;
  int32_T d_iy;
  int32_T d_ia;
  for (b_i = 0; b_i < nVar; b_i++) {
    workspace_data[b_i] = grad_data[b_i];
  }

  if (nVar >= 1) {
    for (b_i = 0; b_i < nVar; b_i++) {
      workspace_data[b_i] += -grad_old_data[b_i];
    }
  }

  ix = eqL0;
  b_i = ldJ * 51 + 1;
  iac = 1;
  while (((ldJ > 0) && (iac <= b_i)) || ((ldJ < 0) && (iac >= b_i))) {
    d_iy = 0;
    c_iy = (iac + nVar) - 1;
    for (d_ia = iac; d_ia <= c_iy; d_ia++) {
      workspace_data[d_iy] += JacEqTrans_data[d_ia - 1] * lambda_data[ix - 1];
      d_iy++;
    }

    ix++;
    iac += ldJ;
  }

  ix = eqL0;
  iac = 1;
  while (((ldJ > 0) && (iac <= b_i)) || ((ldJ < 0) && (iac >= b_i))) {
    d_iy = 0;
    c_iy = (iac + nVar) - 1;
    for (d_ia = iac; d_ia <= c_iy; d_ia++) {
      workspace_data[d_iy] += JacEqTrans_old_data[d_ia - 1] * -lambda_data[ix -
        1];
      d_iy++;
    }

    ix++;
    iac += ldJ;
  }

  if (mNonlinIneq > 0) {
    ineqJ0 = (ineqJ0 - 1) * ldJ + 1;
    ix = ineqL0;
    b_i = (mNonlinIneq - 1) * ldJ;
    iac = b_i + ineqJ0;
    d_iy = ineqJ0;
    while (((ldJ > 0) && (d_iy <= iac)) || ((ldJ < 0) && (d_iy >= iac))) {
      c_iy = 0;
      d_ia = (d_iy + nVar) - 1;
      for (c_ia = d_iy; c_ia <= d_ia; c_ia++) {
        workspace_data[c_iy] += JacIneqTrans_data[c_ia - 1] * lambda_data[ix - 1];
        c_iy++;
      }

      ix++;
      d_iy += ldJ;
    }

    ix = ineqL0;
    b_i++;
    iac = 1;
    while (((ldJ > 0) && (iac <= b_i)) || ((ldJ < 0) && (iac >= b_i))) {
      d_iy = 0;
      c_iy = (iac + nVar) - 1;
      for (d_ia = iac; d_ia <= c_iy; d_ia++) {
        workspace_data[d_iy] += JacIneqTrans_old_data[d_ia - 1] *
          -lambda_data[ix - 1];
        d_iy++;
      }

      ix++;
      iac += ldJ;
    }
  }
}

// Function for MATLAB Function: '<S60>/NLMPC'
boolean_T full_loopModelClass::full_loop_BFGSUpdate(int32_T nvar, real_T Bk[4761],
  const real_T sk_data[], real_T yk_data[], real_T workspace_data[])
{
  boolean_T success;
  real_T dotSY;
  real_T curvatureS;
  int32_T ix;
  int32_T iac;
  int32_T jy;
  real_T temp;
  int32_T b_ix;
  int32_T d;
  int32_T ijA;
  dotSY = 0.0;
  if (nvar >= 1) {
    for (ix = 0; ix < nvar; ix++) {
      dotSY += sk_data[ix] * yk_data[ix];
    }
  }

  for (ix = 0; ix < nvar; ix++) {
    workspace_data[ix] = 0.0;
  }

  ix = 0;
  jy = (nvar - 1) * 69;
  for (iac = 1; iac <= jy + 1; iac += 69) {
    b_ix = 0;
    d = (iac + nvar) - 1;
    for (ijA = iac; ijA <= d; ijA++) {
      workspace_data[b_ix] += Bk[ijA - 1] * sk_data[ix];
      b_ix++;
    }

    ix++;
  }

  curvatureS = 0.0;
  if (nvar >= 1) {
    for (ix = 0; ix < nvar; ix++) {
      curvatureS += sk_data[ix] * workspace_data[ix];
    }
  }

  if (dotSY < 0.2 * curvatureS) {
    dotSY = 0.8 * curvatureS / (curvatureS - dotSY);
    for (ix = 0; ix < nvar; ix++) {
      yk_data[ix] *= dotSY;
    }

    dotSY = 1.0 - dotSY;
    if (!(dotSY == 0.0)) {
      for (ix = 0; ix < nvar; ix++) {
        yk_data[ix] += dotSY * workspace_data[ix];
      }
    }

    dotSY = 0.0;
    if (nvar >= 1) {
      for (ix = 0; ix < nvar; ix++) {
        dotSY += sk_data[ix] * yk_data[ix];
      }
    }
  }

  success = ((curvatureS > 2.2204460492503131E-16) && (dotSY >
              2.2204460492503131E-16));
  if (success) {
    curvatureS = -1.0 / curvatureS;
    if (!(curvatureS == 0.0)) {
      ix = 0;
      jy = 0;
      for (iac = 0; iac < nvar; iac++) {
        if (workspace_data[jy] != 0.0) {
          temp = workspace_data[jy] * curvatureS;
          b_ix = 0;
          d = nvar + ix;
          for (ijA = ix; ijA < d; ijA++) {
            Bk[ijA] += workspace_data[b_ix] * temp;
            b_ix++;
          }
        }

        jy++;
        ix += 69;
      }
    }

    curvatureS = 1.0 / dotSY;
    if (!(curvatureS == 0.0)) {
      ix = 0;
      jy = 0;
      for (iac = 0; iac < nvar; iac++) {
        if (yk_data[jy] != 0.0) {
          dotSY = yk_data[jy] * curvatureS;
          b_ix = 0;
          d = nvar + ix;
          for (ijA = ix; ijA < d; ijA++) {
            Bk[ijA] += yk_data[b_ix] * dotSY;
            b_ix++;
          }
        }

        jy++;
        ix += 69;
      }
    }
  }

  return success;
}

// Function for MATLAB Function: '<S60>/NLMPC'
void full_loopModelClass::full_loop_xcopy_g(int32_T n, const real_T x[69],
  real_T y_data[])
{
  int32_T b_k;
  for (b_k = 0; b_k < n; b_k++) {
    y_data[b_k] = x[b_k];
  }
}

// Function for MATLAB Function: '<S60>/NLMPC'
void full_loopModelClass::full_addBoundToActiveSetMatrix_
  (s_Mspqy2ajbjhxqxIYYuZUwC_full_T *obj, int32_T TYPE, int32_T idx_local)
{
  int32_T idx_bnd_local;
  int32_T idx;
  int32_T tmp;
  obj->nWConstr[TYPE - 1]++;
  obj->isActiveConstr.data[(obj->isActiveIdx[TYPE - 1] + idx_local) - 2] = true;
  obj->nActiveConstr++;
  obj->Wid.data[obj->nActiveConstr - 1] = TYPE;
  obj->Wlocalidx.data[obj->nActiveConstr - 1] = idx_local;
  tmp = obj->nActiveConstr - 1;
  if (TYPE == 5) {
    idx_bnd_local = obj->indexUB.data[idx_local - 1];
    obj->bwset.data[obj->nActiveConstr - 1] = obj->ub.data[idx_bnd_local - 1];
  } else {
    idx_bnd_local = obj->indexLB.data[idx_local - 1];
    obj->bwset.data[obj->nActiveConstr - 1] = obj->lb.data[idx_bnd_local - 1];
  }

  for (idx = 0; idx <= idx_bnd_local - 2; idx++) {
    obj->ATwset.data[idx + obj->ATwset.size[0] * tmp] = 0.0;
  }

  obj->ATwset.data[(idx_bnd_local + obj->ATwset.size[0] * (obj->nActiveConstr -
    1)) - 1] = static_cast<real_T>(TYPE == 5) * 2.0 - 1.0;
  while (idx_bnd_local + 1 <= obj->nVar) {
    obj->ATwset.data[idx_bnd_local + obj->ATwset.size[0] * tmp] = 0.0;
    idx_bnd_local++;
  }

  switch (obj->probType) {
   case 3:
   case 2:
    break;

   default:
    obj->ATwset.data[(obj->nVar + obj->ATwset.size[0] * (obj->nActiveConstr - 1))
      - 1] = -1.0;
    break;
  }
}

// Function for MATLAB Function: '<S60>/NLMPC'
void full_loopModelClass::full_loop_makeBoundFeasible(real_T xk_data[],
  s_Mspqy2ajbjhxqxIYYuZUwC_full_T *WorkingSet)
{
  int32_T mLB;
  int32_T mUB;
  int32_T b_idx;
  real_T tmp;
  mLB = WorkingSet->sizes[3];
  mUB = WorkingSet->sizes[4];
  for (b_idx = 0; b_idx < mLB; b_idx++) {
    tmp = WorkingSet->lb.data[WorkingSet->indexLB.data[b_idx] - 1];
    if (-xk_data[WorkingSet->indexLB.data[b_idx] - 1] >= tmp) {
      xk_data[WorkingSet->indexLB.data[b_idx] - 1] = -tmp;
      if (!WorkingSet->isActiveConstr.data[(WorkingSet->isActiveIdx[3] + b_idx)
          - 1]) {
        full_addBoundToActiveSetMatrix_(WorkingSet, 4, b_idx + 1);
      }
    }
  }

  for (mLB = 0; mLB < mUB; mLB++) {
    tmp = WorkingSet->ub.data[WorkingSet->indexUB.data[mLB] - 1];
    if (xk_data[WorkingSet->indexUB.data[mLB] - 1] >= tmp) {
      xk_data[WorkingSet->indexUB.data[mLB] - 1] = tmp;
      if (!WorkingSet->isActiveConstr.data[(WorkingSet->isActiveIdx[4] + mLB) -
          1]) {
        full_addBoundToActiveSetMatrix_(WorkingSet, 5, mLB + 1);
      }
    }
  }
}

// Function for MATLAB Function: '<S60>/NLMPC'
void full_loopModelClass::full_loop_xcopy_gprnbz1rec(int32_T n, const real_T x
  [69], real_T y[69])
{
  int32_T b_k;
  for (b_k = 0; b_k < n; b_k++) {
    y[b_k] = x[b_k];
  }
}

// Function for MATLAB Function: '<S60>/NLMPC'
void full_loopModelClass::full_loop_updateWorkingSet
  (s_Mspqy2ajbjhxqxIYYuZUwC_full_T *WorkingSet, const real_T
   TrialState_cIneq_data[], const real_T TrialState_cEq[52], const real_T
   TrialState_searchDir_data[], int32_T workspace_int_data[])
{
  int32_T idx_Aineq;
  int32_T idx_upper;
  int32_T idx_Partition;
  int32_T iy;
  int32_T iac;
  real_T b_c;
  int32_T d;
  int32_T b_ia;
  for (idx_Aineq = 0; idx_Aineq < 52; idx_Aineq++) {
    WorkingSet->beq[idx_Aineq] = -TrialState_cEq[idx_Aineq];
  }

  idx_Aineq = WorkingSet->ldA;
  iy = 0;
  idx_upper = WorkingSet->ldA * 51 + 1;
  iac = 1;
  while (((idx_Aineq > 0) && (iac <= idx_upper)) || ((idx_Aineq < 0) && (iac >=
           idx_upper))) {
    idx_Partition = 0;
    b_c = 0.0;
    d = (iac + WorkingSet->nVar) - 1;
    for (b_ia = iac; b_ia <= d; b_ia++) {
      b_c += WorkingSet->Aeq.data[b_ia - 1] *
        TrialState_searchDir_data[idx_Partition];
      idx_Partition++;
    }

    WorkingSet->beq[iy] += b_c;
    iy++;
    iac += idx_Aineq;
  }

  for (idx_Aineq = 0; idx_Aineq < 52; idx_Aineq++) {
    WorkingSet->bwset.data[WorkingSet->sizes[0] + idx_Aineq] = WorkingSet->
      beq[idx_Aineq];
  }

  if (WorkingSet->sizes[2] > 0) {
    for (idx_Aineq = 0; idx_Aineq < WorkingSet->sizes[2]; idx_Aineq++) {
      WorkingSet->bineq.data[idx_Aineq] = -TrialState_cIneq_data[idx_Aineq];
    }

    idx_Aineq = WorkingSet->ldA;
    iy = 0;
    idx_upper = (WorkingSet->sizes[2] - 1) * WorkingSet->ldA + 1;
    iac = 1;
    while (((idx_Aineq > 0) && (iac <= idx_upper)) || ((idx_Aineq < 0) && (iac >=
             idx_upper))) {
      idx_Partition = 0;
      b_c = 0.0;
      d = (iac + WorkingSet->nVar) - 1;
      for (b_ia = iac; b_ia <= d; b_ia++) {
        b_c += WorkingSet->Aineq.data[b_ia - 1] *
          TrialState_searchDir_data[idx_Partition];
        idx_Partition++;
      }

      WorkingSet->bineq.data[iy] += b_c;
      iy++;
      iac += idx_Aineq;
    }

    idx_Aineq = 1;
    iy = WorkingSet->sizes[2] + 1;
    idx_upper = (WorkingSet->sizes[2] + WorkingSet->sizes[3]) + 1;
    for (iac = WorkingSet->isActiveIdx[2] - 1; iac < WorkingSet->nActiveConstr;
         iac++) {
      switch (WorkingSet->Wid.data[iac]) {
       case 3:
        idx_Partition = idx_Aineq;
        idx_Aineq++;
        WorkingSet->bwset.data[iac] = WorkingSet->bineq.data
          [WorkingSet->Wlocalidx.data[iac] - 1];
        break;

       case 4:
        idx_Partition = iy;
        iy++;
        break;

       default:
        idx_Partition = idx_upper;
        idx_upper++;
        break;
      }

      workspace_int_data[idx_Partition - 1] = WorkingSet->Wlocalidx.data[iac];
    }
  }
}

// Function for MATLAB Function: '<S60>/NLMPC'
void full_loopModelClass::full_loop_snap_bounds(s_ZxHOyfVSozxr6pSGbgUCkF_full_T *
  solution, const real_T workingset_lb_data[], const real_T workingset_ub_data[],
  const int32_T workingset_indexLB_data[], const int32_T
  workingset_indexUB_data[], const int32_T workingset_indexFixed_data[], const
  int32_T workingset_sizes[5], const int32_T workingset_isActiveIdx[6], const
  boolean_T workingset_isActiveConstr_data[])
{
  int32_T b_idx;
  for (b_idx = 0; b_idx < workingset_sizes[0]; b_idx++) {
    solution->xstar.data[workingset_indexFixed_data[b_idx] - 1] =
      workingset_ub_data[workingset_indexFixed_data[b_idx] - 1];
  }

  for (b_idx = 0; b_idx < workingset_sizes[3]; b_idx++) {
    if (workingset_isActiveConstr_data[(workingset_isActiveIdx[3] + b_idx) - 1])
    {
      solution->xstar.data[workingset_indexLB_data[b_idx] - 1] =
        -workingset_lb_data[workingset_indexLB_data[b_idx] - 1];
    }
  }

  for (b_idx = 0; b_idx < workingset_sizes[4]; b_idx++) {
    if (workingset_isActiveConstr_data[(workingset_isActiveIdx[4] + b_idx) - 1])
    {
      solution->xstar.data[workingset_indexUB_data[b_idx] - 1] =
        workingset_ub_data[workingset_indexUB_data[b_idx] - 1];
    }
  }
}

// Function for MATLAB Function: '<S60>/NLMPC'
void full_loopModelClass::full_loop_factorQRE_n(s_3RW6EhlAOINzvAvYfuaanB_full_T *
  obj, int32_T mrows, int32_T ncols)
{
  obj->usedPivoting = true;
  obj->mrows = mrows;
  obj->ncols = ncols;
  if (mrows < ncols) {
    obj->minRowCol = mrows;
  } else {
    obj->minRowCol = ncols;
  }

  full_loop_B.b_size[0] = obj->QR.size[0];
  full_loop_B.b_size[1] = obj->QR.size[1];
  full_loop_B.loop_ub_g = obj->QR.size[0] * obj->QR.size[1] - 1;
  if (0 <= full_loop_B.loop_ub_g) {
    std::memcpy(&full_loop_B.b_data_m[0], &obj->QR.data[0],
                (full_loop_B.loop_ub_g + 1) * sizeof(real_T));
  }

  full_loop_B.d_size_ib = obj->jpvt.size;
  full_loop_B.loop_ub_g = obj->jpvt.size;
  if (0 <= full_loop_B.loop_ub_g - 1) {
    std::memcpy(&full_loop_B.d_data_e[0], &obj->jpvt.data[0],
                full_loop_B.loop_ub_g * sizeof(int32_T));
  }

  full_loop_xgeqp3(full_loop_B.b_data_m, full_loop_B.b_size, mrows, ncols,
                   full_loop_B.d_data_e, full_loop_B.c_data_m,
                   &full_loop_B.c_size_p);
  obj->QR.size[0] = full_loop_B.b_size[0];
  obj->QR.size[1] = full_loop_B.b_size[1];
  full_loop_B.loop_ub_g = full_loop_B.b_size[0] * full_loop_B.b_size[1] - 1;
  if (0 <= full_loop_B.loop_ub_g) {
    std::memcpy(&obj->QR.data[0], &full_loop_B.b_data_m[0],
                (full_loop_B.loop_ub_g + 1) * sizeof(real_T));
  }

  obj->tau.size = full_loop_B.c_size_p;
  full_loop_B.loop_ub_g = full_loop_B.c_size_p;
  if (0 <= full_loop_B.loop_ub_g - 1) {
    std::memcpy(&obj->tau.data[0], &full_loop_B.c_data_m[0],
                full_loop_B.loop_ub_g * sizeof(real_T));
  }

  obj->jpvt.size = full_loop_B.d_size_ib;
  full_loop_B.loop_ub_g = full_loop_B.d_size_ib;
  if (0 <= full_loop_B.loop_ub_g - 1) {
    std::memcpy(&obj->jpvt.data[0], &full_loop_B.d_data_e[0],
                full_loop_B.loop_ub_g * sizeof(int32_T));
  }
}

// Function for MATLAB Function: '<S60>/NLMPC'
int32_T full_loopModelClass::full_loo_ComputeNumDependentEq_
  (s_3RW6EhlAOINzvAvYfuaanB_full_T *qrmanager, const real_T beqf_data[], int32_T
   mConstr, int32_T nVar)
{
  int32_T numDependent;
  boolean_T exitg1;
  numDependent = mConstr - nVar;
  if (0 > numDependent) {
    numDependent = 0;
  }

  full_loop_B.b_idx = 0;
  while (full_loop_B.b_idx <= nVar - 1) {
    qrmanager->jpvt.data[full_loop_B.b_idx] = 0;
    full_loop_B.b_idx++;
  }

  full_loop_factorQRE_n(qrmanager, mConstr, nVar);
  full_loop_B.tol = 100.0 * static_cast<real_T>(nVar) * 2.2204460492503131E-16;
  if (nVar < mConstr) {
    full_loop_B.b_idx = nVar;
  } else {
    full_loop_B.b_idx = mConstr;
  }

  while ((full_loop_B.b_idx > 0) && (std::abs(qrmanager->QR.data
           [((full_loop_B.b_idx - 1) * qrmanager->QR.size[0] + full_loop_B.b_idx)
           - 1]) < full_loop_B.tol)) {
    full_loop_B.b_idx--;
    numDependent++;
  }

  if (numDependent > 0) {
    full_loop_computeQ_(qrmanager, qrmanager->mrows);
    full_loop_B.b_idx = 0;
    exitg1 = false;
    while ((!exitg1) && (full_loop_B.b_idx <= numDependent - 1)) {
      full_loop_B.qtb = 0.0;
      full_loop_B.ix_b = ((mConstr - full_loop_B.b_idx) - 1) * qrmanager->ldq;
      full_loop_B.iy = 0;
      full_loop_B.k_c = 0;
      while (full_loop_B.k_c <= mConstr - 1) {
        full_loop_B.qtb += qrmanager->Q.data[full_loop_B.ix_b] *
          beqf_data[full_loop_B.iy];
        full_loop_B.ix_b++;
        full_loop_B.iy++;
        full_loop_B.k_c++;
      }

      if (std::abs(full_loop_B.qtb) >= full_loop_B.tol) {
        numDependent = -1;
        exitg1 = true;
      } else {
        full_loop_B.b_idx++;
      }
    }
  }

  return numDependent;
}

// Function for MATLAB Function: '<S60>/NLMPC'
void full_loopModelClass::full_loop_IndexOfDependentEq_(int32_T depIdx_data[],
  int32_T mFixed, int32_T nDep, s_3RW6EhlAOINzvAvYfuaanB_full_T *qrmanager,
  const real_T AeqfPrime_data[], const int32_T AeqfPrime_size[2], int32_T mRows,
  int32_T nCols)
{
  int32_T b_idx;
  for (b_idx = 0; b_idx < mFixed; b_idx++) {
    qrmanager->jpvt.data[b_idx] = 1;
  }

  for (b_idx = mFixed; b_idx < nCols; b_idx++) {
    qrmanager->jpvt.data[b_idx] = 0;
  }

  full_loop_factorQRE(qrmanager, AeqfPrime_data, AeqfPrime_size, mRows, nCols);
  for (b_idx = 0; b_idx < nDep; b_idx++) {
    depIdx_data[b_idx] = qrmanager->jpvt.data[(nCols - nDep) + b_idx];
  }
}

// Function for MATLAB Function: '<S60>/NLMPC'
void full_loopModelClass::full_loop_countsort(int32_T x_data[], int32_T xLen,
  int32_T workspace_data[], int32_T xMin, int32_T xMax)
{
  int32_T idxStart;
  int32_T idxEnd;
  int32_T b_idxW;
  int32_T b_tmp;
  if ((xLen > 1) && (xMax > xMin)) {
    b_tmp = xMax - xMin;
    for (idxStart = 0; idxStart <= b_tmp; idxStart++) {
      workspace_data[idxStart] = 0;
    }

    for (idxStart = 0; idxStart < xLen; idxStart++) {
      idxEnd = x_data[idxStart] - xMin;
      workspace_data[idxEnd]++;
    }

    for (idxStart = 1; idxStart < b_tmp + 1; idxStart++) {
      workspace_data[idxStart] += workspace_data[idxStart - 1];
    }

    idxStart = 1;
    idxEnd = workspace_data[0];
    for (b_idxW = 0; b_idxW < b_tmp; b_idxW++) {
      while (idxStart <= idxEnd) {
        x_data[idxStart - 1] = b_idxW + xMin;
        idxStart++;
      }

      idxStart = workspace_data[b_idxW] + 1;
      idxEnd = workspace_data[b_idxW + 1];
    }

    while (idxStart <= idxEnd) {
      x_data[idxStart - 1] = xMax;
      idxStart++;
    }
  }
}

// Function for MATLAB Function: '<S60>/NLMPC'
void full_loopModelClass::full_loop_removeConstr(s_Mspqy2ajbjhxqxIYYuZUwC_full_T
  *obj, int32_T idx_global)
{
  int32_T b_idx;
  int32_T TYPE_tmp;
  int32_T idx_global_start_tmp;
  TYPE_tmp = obj->Wid.data[idx_global - 1] - 1;
  obj->isActiveConstr.data[(obj->isActiveIdx[TYPE_tmp] + obj->
    Wlocalidx.data[idx_global - 1]) - 2] = false;
  idx_global_start_tmp = obj->nActiveConstr - 1;
  obj->Wid.data[idx_global - 1] = obj->Wid.data[idx_global_start_tmp];
  obj->Wlocalidx.data[idx_global - 1] = obj->Wlocalidx.data[idx_global_start_tmp];
  for (b_idx = 0; b_idx < obj->nVar; b_idx++) {
    obj->ATwset.data[b_idx + obj->ATwset.size[0] * (idx_global - 1)] =
      obj->ATwset.data[obj->ATwset.size[0] * idx_global_start_tmp + b_idx];
  }

  obj->bwset.data[idx_global - 1] = obj->bwset.data[idx_global_start_tmp];
  obj->nActiveConstr--;
  obj->nWConstr[TYPE_tmp]--;
}

// Function for MATLAB Function: '<S60>/NLMPC'
void full_loopModelClass::full_loop_removeEqConstr
  (s_Mspqy2ajbjhxqxIYYuZUwC_full_T *obj, int32_T idx_global)
{
  int32_T totalEq;
  int32_T b_idx;
  int32_T d_idx;
  int32_T TYPE_tmp;
  totalEq = (obj->nWConstr[0] + obj->nWConstr[1]) - 1;
  if ((totalEq + 1 != 0) && (idx_global <= totalEq + 1)) {
    if ((totalEq + 1 == obj->nActiveConstr) || (totalEq + 1 == idx_global)) {
      obj->mEqRemoved++;
      obj->indexEqRemoved[obj->mEqRemoved - 1] = obj->Wlocalidx.data[idx_global
        - 1];
      full_loop_removeConstr(obj, idx_global);
    } else {
      obj->mEqRemoved++;
      TYPE_tmp = obj->Wid.data[idx_global - 1] - 1;
      obj->indexEqRemoved[obj->mEqRemoved - 1] = obj->Wlocalidx.data[idx_global
        - 1];
      obj->isActiveConstr.data[(obj->isActiveIdx[obj->Wid.data[idx_global - 1] -
        1] + obj->Wlocalidx.data[idx_global - 1]) - 2] = false;
      obj->Wid.data[idx_global - 1] = obj->Wid.data[totalEq];
      obj->Wlocalidx.data[idx_global - 1] = obj->Wlocalidx.data[totalEq];
      for (b_idx = 0; b_idx < obj->nVar; b_idx++) {
        obj->ATwset.data[b_idx + obj->ATwset.size[0] * (idx_global - 1)] =
          obj->ATwset.data[obj->ATwset.size[0] * totalEq + b_idx];
      }

      obj->bwset.data[idx_global - 1] = obj->bwset.data[totalEq];
      b_idx = obj->nActiveConstr - 1;
      obj->Wid.data[totalEq] = obj->Wid.data[b_idx];
      obj->Wlocalidx.data[totalEq] = obj->Wlocalidx.data[b_idx];
      for (d_idx = 0; d_idx < obj->nVar; d_idx++) {
        obj->ATwset.data[d_idx + obj->ATwset.size[0] * totalEq] =
          obj->ATwset.data[obj->ATwset.size[0] * b_idx + d_idx];
      }

      obj->bwset.data[totalEq] = obj->bwset.data[b_idx];
      obj->nActiveConstr--;
      obj->nWConstr[TYPE_tmp]--;
    }
  }
}

// Function for MATLAB Function: '<S60>/NLMPC'
int32_T full_loopModelClass::full_loop_RemoveDependentEq_
  (s_i4ZL8C3jdkCeOA2IrFHlEF_full_T *memspace, s_Mspqy2ajbjhxqxIYYuZUwC_full_T
   *workingset, s_3RW6EhlAOINzvAvYfuaanB_full_T *qrmanager)
{
  int32_T nDepInd;
  full_loop_B.mTotalWorkingEq = workingset->nWConstr[1] + workingset->nWConstr[0];
  nDepInd = 0;
  if (full_loop_B.mTotalWorkingEq > 0) {
    full_loop_B.idx_row = 0;
    while (full_loop_B.idx_row <= full_loop_B.mTotalWorkingEq - 1) {
      full_loop_B.b_idx_col = 0;
      while (full_loop_B.b_idx_col <= workingset->nVar - 1) {
        qrmanager->QR.data[full_loop_B.idx_row + qrmanager->QR.size[0] *
          full_loop_B.b_idx_col] = workingset->ATwset.data
          [workingset->ATwset.size[0] * full_loop_B.idx_row +
          full_loop_B.b_idx_col];
        full_loop_B.b_idx_col++;
      }

      full_loop_B.idx_row++;
    }

    nDepInd = full_loo_ComputeNumDependentEq_(qrmanager, workingset->bwset.data,
      full_loop_B.mTotalWorkingEq, workingset->nVar);
    if (nDepInd > 0) {
      full_loop_B.b_size_hg = memspace->workspace_int.size;
      full_loop_B.idx_row = memspace->workspace_int.size;
      if (0 <= full_loop_B.idx_row - 1) {
        std::memcpy(&full_loop_B.b_data_f[0], &memspace->workspace_int.data[0],
                    full_loop_B.idx_row * sizeof(int32_T));
      }

      full_loop_IndexOfDependentEq_(full_loop_B.b_data_f, workingset->nWConstr[0],
        nDepInd, qrmanager, workingset->ATwset.data, workingset->ATwset.size,
        workingset->nVar, full_loop_B.mTotalWorkingEq);
      full_loop_B.c_size_cc = memspace->workspace_sort.size;
      full_loop_B.idx_row = memspace->workspace_sort.size;
      if (0 <= full_loop_B.idx_row - 1) {
        std::memcpy(&full_loop_B.c_data_h[0], &memspace->workspace_sort.data[0],
                    full_loop_B.idx_row * sizeof(int32_T));
      }

      full_loop_countsort(full_loop_B.b_data_f, nDepInd, full_loop_B.c_data_h, 1,
                          full_loop_B.mTotalWorkingEq);
      memspace->workspace_int.size = full_loop_B.b_size_hg;
      full_loop_B.idx_row = full_loop_B.b_size_hg;
      if (0 <= full_loop_B.idx_row - 1) {
        std::memcpy(&memspace->workspace_int.data[0], &full_loop_B.b_data_f[0],
                    full_loop_B.idx_row * sizeof(int32_T));
      }

      memspace->workspace_sort.size = full_loop_B.c_size_cc;
      full_loop_B.idx_row = full_loop_B.c_size_cc;
      if (0 <= full_loop_B.idx_row - 1) {
        std::memcpy(&memspace->workspace_sort.data[0], &full_loop_B.c_data_h[0],
                    full_loop_B.idx_row * sizeof(int32_T));
      }

      full_loop_B.mTotalWorkingEq = nDepInd;
      while (full_loop_B.mTotalWorkingEq > 0) {
        full_loop_removeEqConstr(workingset,
          full_loop_B.b_data_f[full_loop_B.mTotalWorkingEq - 1]);
        full_loop_B.mTotalWorkingEq--;
      }
    }
  }

  return nDepInd;
}

// Function for MATLAB Function: '<S60>/NLMPC'
void full_loopModelClass::full_loop_removeAllIneqConstr
  (s_Mspqy2ajbjhxqxIYYuZUwC_full_T *obj)
{
  int32_T idx_global;
  for (idx_global = obj->nWConstr[0] + obj->nWConstr[1]; idx_global <
       obj->nActiveConstr; idx_global++) {
    obj->isActiveConstr.data[(obj->isActiveIdx[obj->Wid.data[idx_global] - 1] +
      obj->Wlocalidx.data[idx_global]) - 2] = false;
  }

  obj->nWConstr[2] = 0;
  obj->nWConstr[3] = 0;
  obj->nWConstr[4] = 0;
  obj->nActiveConstr = obj->nWConstr[0] + obj->nWConstr[1];
}

// Function for MATLAB Function: '<S60>/NLMPC'
void full_loopModelClass::full_loop_RemoveDependentIneq_
  (s_Mspqy2ajbjhxqxIYYuZUwC_full_T *workingset, s_3RW6EhlAOINzvAvYfuaanB_full_T *
   qrmanager, s_i4ZL8C3jdkCeOA2IrFHlEF_full_T *memspace)
{
  full_loop_B.nFixedConstr_m = workingset->nWConstr[1] + workingset->nWConstr[0];
  if ((workingset->nWConstr[2] + workingset->nWConstr[3]) + workingset->
      nWConstr[4] > 0) {
    full_loop_B.tol_n = 100.0 * static_cast<real_T>(workingset->nVar) *
      2.2204460492503131E-16;
    full_loop_B.nDepIneq_e = 0;
    while (full_loop_B.nDepIneq_e <= full_loop_B.nFixedConstr_m - 1) {
      qrmanager->jpvt.data[full_loop_B.nDepIneq_e] = 1;
      full_loop_B.nDepIneq_e++;
    }

    full_loop_B.nDepIneq_e = full_loop_B.nFixedConstr_m + 1;
    while (full_loop_B.nDepIneq_e <= workingset->nActiveConstr) {
      qrmanager->jpvt.data[full_loop_B.nDepIneq_e - 1] = 0;
      full_loop_B.nDepIneq_e++;
    }

    full_loop_factorQRE(qrmanager, workingset->ATwset.data,
                        workingset->ATwset.size, workingset->nVar,
                        workingset->nActiveConstr);
    full_loop_B.nDepIneq_e = 0;
    full_loop_B.idx_h = workingset->nActiveConstr;
    while (full_loop_B.idx_h > workingset->nVar) {
      full_loop_B.nDepIneq_e++;
      memspace->workspace_int.data[full_loop_B.nDepIneq_e - 1] =
        qrmanager->jpvt.data[full_loop_B.idx_h - 1];
      full_loop_B.idx_h--;
    }

    if (full_loop_B.idx_h <= workingset->nVar) {
      while ((full_loop_B.idx_h > full_loop_B.nFixedConstr_m) && (std::abs
              (qrmanager->QR.data[((full_loop_B.idx_h - 1) * qrmanager->QR.size
                [0] + full_loop_B.idx_h) - 1]) < full_loop_B.tol_n)) {
        full_loop_B.nDepIneq_e++;
        memspace->workspace_int.data[full_loop_B.nDepIneq_e - 1] =
          qrmanager->jpvt.data[full_loop_B.idx_h - 1];
        full_loop_B.idx_h--;
      }
    }

    full_loop_B.b_size_mw = memspace->workspace_int.size;
    full_loop_B.idx_h = memspace->workspace_int.size;
    if (0 <= full_loop_B.idx_h - 1) {
      std::memcpy(&full_loop_B.b_data_a[0], &memspace->workspace_int.data[0],
                  full_loop_B.idx_h * sizeof(int32_T));
    }

    full_loop_B.c_size_im = memspace->workspace_sort.size;
    full_loop_B.idx_h = memspace->workspace_sort.size;
    if (0 <= full_loop_B.idx_h - 1) {
      std::memcpy(&full_loop_B.c_data_p[0], &memspace->workspace_sort.data[0],
                  full_loop_B.idx_h * sizeof(int32_T));
    }

    full_loop_countsort(full_loop_B.b_data_a, full_loop_B.nDepIneq_e,
                        full_loop_B.c_data_p, full_loop_B.nFixedConstr_m + 1,
                        workingset->nActiveConstr);
    memspace->workspace_int.size = full_loop_B.b_size_mw;
    full_loop_B.idx_h = full_loop_B.b_size_mw;
    if (0 <= full_loop_B.idx_h - 1) {
      std::memcpy(&memspace->workspace_int.data[0], &full_loop_B.b_data_a[0],
                  full_loop_B.idx_h * sizeof(int32_T));
    }

    memspace->workspace_sort.size = full_loop_B.c_size_im;
    full_loop_B.idx_h = full_loop_B.c_size_im;
    if (0 <= full_loop_B.idx_h - 1) {
      std::memcpy(&memspace->workspace_sort.data[0], &full_loop_B.c_data_p[0],
                  full_loop_B.idx_h * sizeof(int32_T));
    }

    while (full_loop_B.nDepIneq_e > 0) {
      full_loop_removeConstr(workingset,
        full_loop_B.b_data_a[full_loop_B.nDepIneq_e - 1]);
      full_loop_B.nDepIneq_e--;
    }
  }
}

// Function for MATLAB Function: '<S60>/NLMPC'
void full_loopModelClass::full_loop_xgemv_jh(int32_T m, int32_T n, const real_T
  A_data[], int32_T lda, const real_T x_data[], real_T y_data[])
{
  int32_T ix;
  real_T c;
  int32_T iy;
  int32_T iac;
  int32_T b;
  int32_T ia;
  int32_T b_c;
  if (n != 0) {
    iy = 0;
    b_c = (n - 1) * lda + 1;
    iac = 1;
    while (((lda > 0) && (iac <= b_c)) || ((lda < 0) && (iac >= b_c))) {
      ix = 0;
      c = 0.0;
      b = (iac + m) - 1;
      for (ia = iac; ia <= b; ia++) {
        c += A_data[ia - 1] * x_data[ix];
        ix++;
      }

      y_data[iy] += -c;
      iy++;
      iac += lda;
    }
  }
}

// Function for MATLAB Function: '<S60>/NLMPC'
void full_loopModelClass::full_loop_xgeqrf(real_T A_data[], const int32_T
  A_size[2], int32_T m, int32_T n, real_T tau_data[], int32_T *tau_size)
{
  int32_T minmana;
  int32_T minmn;
  if (A_size[0] < A_size[1]) {
    minmana = A_size[0];
  } else {
    minmana = A_size[1];
  }

  if (m < n) {
    minmn = m;
  } else {
    minmn = n;
  }

  *tau_size = minmana;
  if (0 <= minmana - 1) {
    std::memset(&tau_data[0], 0, minmana * sizeof(real_T));
  }

  if (minmn >= 1) {
    full_loop_qrf(A_data, A_size, m, n, minmn, tau_data);
  }
}

// Function for MATLAB Function: '<S60>/NLMPC'
void full_loopModelClass::full_loop_factorQR_i(s_3RW6EhlAOINzvAvYfuaanB_full_T
  *obj, const real_T A_data[], const int32_T A_size[2], int32_T mrows, int32_T
  ncols)
{
  int32_T b_idx;
  boolean_T guard1 = false;
  guard1 = false;
  if ((A_size[0] != 0) && (A_size[1] != 0) && (mrows * ncols > 0)) {
    for (b_idx = 0; b_idx < ncols; b_idx++) {
      full_loop_xcopy_gprnb(mrows, A_data, A_size[0] * b_idx + 1, obj->QR.data,
                            obj->ldq * b_idx + 1);
    }

    guard1 = true;
  } else if (mrows * ncols == 0) {
    obj->mrows = mrows;
    obj->ncols = ncols;
    obj->minRowCol = 0;
  } else {
    guard1 = true;
  }

  if (guard1) {
    obj->usedPivoting = false;
    obj->mrows = mrows;
    obj->ncols = ncols;
    for (b_idx = 0; b_idx < ncols; b_idx++) {
      obj->jpvt.data[b_idx] = b_idx + 1;
    }

    if (mrows < ncols) {
      obj->minRowCol = mrows;
    } else {
      obj->minRowCol = ncols;
    }

    full_loop_xgeqrf(obj->QR.data, obj->QR.size, mrows, ncols, obj->tau.data,
                     &obj->tau.size);
  }
}

// Function for MATLAB Function: '<S60>/NLMPC'
void full_loopModelClass::full_loop_xtrsm_k(int32_T m, const real_T A_data[],
  int32_T lda, real_T B_data[], int32_T ldb)
{
  real_T temp;
  int32_T jBcol;
  int32_T iAcol;
  int32_T i;
  int32_T k;
  int32_T temp_tmp;
  for (i = 1; i - 1 < m; i++) {
    iAcol = (i - 1) * lda - 1;
    temp = B_data[i + -1];
    for (k = 1; k - 1 <= i - 2; k++) {
      temp -= A_data[k + iAcol] * B_data[k + -1];
    }

    B_data[i + -1] = temp / A_data[i + iAcol];
  }

  jBcol = ldb - 1;
  for (i = 1; i - 1 < m; i++) {
    iAcol = (i - 1) * lda - 1;
    temp_tmp = i + jBcol;
    temp = B_data[temp_tmp];
    for (k = 1; k - 1 <= i - 2; k++) {
      temp -= A_data[k + iAcol] * B_data[k + jBcol];
    }

    B_data[temp_tmp] = temp / A_data[i + iAcol];
  }
}

// Function for MATLAB Function: '<S60>/NLMPC'
void full_loopModelClass::full_loop_xgemm_g(int32_T m, int32_T k, const real_T
  A_data[], int32_T lda, const real_T B_data[], int32_T ldb, real_T C_data[],
  int32_T ldc)
{
  int32_T br;
  int32_T ar;
  int32_T ia;
  int32_T b_cr;
  int32_T c;
  int32_T ib;
  int32_T d;
  int32_T b_ic;
  br = 0;
  while (((ldc > 0) && (br <= ldc)) || ((ldc < 0) && (br >= ldc))) {
    b_cr = br + m;
    for (ar = br; ar < b_cr; ar++) {
      C_data[ar] = 0.0;
    }

    br += ldc;
  }

  br = 0;
  b_cr = 0;
  while (((ldc > 0) && (b_cr <= ldc)) || ((ldc < 0) && (b_cr >= ldc))) {
    ar = -1;
    c = br + k;
    for (ib = br + 1; ib <= c; ib++) {
      ia = ar;
      d = b_cr + m;
      for (b_ic = b_cr; b_ic < d; b_ic++) {
        ia++;
        C_data[b_ic] += B_data[ib - 1] * A_data[ia];
      }

      ar += lda;
    }

    br += ldb;
    b_cr += ldc;
  }
}

// Function for MATLAB Function: '<S60>/NLMPC'
void full_loopModelClass::full_loop_factorQR(s_3RW6EhlAOINzvAvYfuaanB_full_T
  *obj, int32_T mrows, int32_T ncols)
{
  int32_T idx;
  obj->usedPivoting = false;
  obj->mrows = mrows;
  obj->ncols = ncols;
  for (idx = 0; idx < ncols; idx++) {
    obj->jpvt.data[idx] = idx + 1;
  }

  if (mrows < ncols) {
    obj->minRowCol = mrows;
  } else {
    obj->minRowCol = ncols;
  }

  full_loop_xgeqrf(obj->QR.data, obj->QR.size, mrows, ncols, obj->tau.data,
                   &obj->tau.size);
}

// Function for MATLAB Function: '<S60>/NLMPC'
void full_loopModelClass::full_loop_xgemm(int32_T m, int32_T k, const real_T
  A_data[], int32_T lda, const real_T B_data[], int32_T ldb, real_T C_data[],
  int32_T ldc)
{
  int32_T br;
  int32_T ar;
  real_T temp;
  int32_T b_cr;
  int32_T c;
  int32_T b_ic;
  int32_T w;
  br = 0;
  while (((ldc > 0) && (br <= ldc)) || ((ldc < 0) && (br >= ldc))) {
    b_cr = br + m;
    for (ar = br; ar < b_cr; ar++) {
      C_data[ar] = 0.0;
    }

    br += ldc;
  }

  br = -1;
  b_cr = 0;
  while (((ldc > 0) && (b_cr <= ldc)) || ((ldc < 0) && (b_cr >= ldc))) {
    ar = -1;
    c = b_cr + m;
    for (b_ic = b_cr; b_ic < c; b_ic++) {
      temp = 0.0;
      for (w = 1; w - 1 < k; w++) {
        temp += A_data[w + ar] * B_data[w + br];
      }

      C_data[b_ic] += temp;
      ar += lda;
    }

    br += ldb;
    b_cr += ldc;
  }
}

// Function for MATLAB Function: '<S60>/NLMPC'
void full_loopModelClass::full_loop_xtrsm(int32_T m, const real_T A_data[],
  int32_T lda, real_T B_data[], int32_T ldb)
{
  int32_T jBcol;
  int32_T kAcol;
  int32_T k;
  int32_T i;
  real_T tmp;
  int32_T tmp_0;
  int32_T tmp_1;
  for (k = m; k > 0; k--) {
    kAcol = (k - 1) * lda - 1;
    tmp = B_data[k + -1];
    if (tmp != 0.0) {
      B_data[k + -1] = tmp / A_data[k + kAcol];
      for (i = 1; i - 1 <= k - 2; i++) {
        B_data[i + -1] -= B_data[k + -1] * A_data[i + kAcol];
      }
    }
  }

  jBcol = ldb - 1;
  for (k = m; k > 0; k--) {
    kAcol = (k - 1) * lda - 1;
    tmp_0 = k + jBcol;
    if (B_data[tmp_0] != 0.0) {
      B_data[tmp_0] /= A_data[k + kAcol];
      for (i = 1; i - 1 <= k - 2; i++) {
        tmp_1 = i + jBcol;
        B_data[tmp_1] -= B_data[tmp_0] * A_data[i + kAcol];
      }
    }
  }
}

// Function for MATLAB Function: '<S60>/NLMPC'
void full_loopModelClass::full_loop_xaxpy(int32_T n, const real_T x_data[],
  real_T y_data[])
{
  int32_T k;
  for (k = 0; k < n; k++) {
    y_data[k] += x_data[k];
  }
}

// Function for MATLAB Function: '<S60>/NLMPC'
void full_loopModelClass::full_loop_xgemv_jhg(int32_T m, const real_T A_data[],
  int32_T lda, const real_T x_data[], real_T y_data[])
{
  int32_T ix;
  int32_T b_iy;
  int32_T iac;
  int32_T b;
  int32_T ia;
  int32_T b_c;
  for (b_iy = 0; b_iy < 52; b_iy++) {
    y_data[b_iy] = -y_data[b_iy];
  }

  b_iy = 0;
  b_c = lda * 51 + 1;
  iac = 1;
  while (((lda > 0) && (iac <= b_c)) || ((lda < 0) && (iac >= b_c))) {
    ix = 0;
    full_loop_B.c_f = 0.0;
    b = (iac + m) - 1;
    for (ia = iac; ia <= b; ia++) {
      full_loop_B.c_f += A_data[ia - 1] * x_data[ix];
      ix++;
    }

    y_data[b_iy] += full_loop_B.c_f;
    b_iy++;
    iac += lda;
  }
}

// Function for MATLAB Function: '<S60>/NLMPC'
real_T full_loopModelClass::maxConstraintViolation_AMats_no
  (s_Mspqy2ajbjhxqxIYYuZUwC_full_T *obj, const real_T x_data[])
{
  real_T v;
  int32_T b_c;
  v = 0.0;
  full_loop_B.mIneq_b = obj->sizes[2] - 1;
  if ((obj->Aineq.size[0] != 0) && (obj->Aineq.size[1] != 0)) {
    full_loop_B.b_k_nh = 0;
    while (full_loop_B.b_k_nh <= full_loop_B.mIneq_b) {
      obj->maxConstrWorkspace.data[full_loop_B.b_k_nh] = obj->
        bineq.data[full_loop_B.b_k_nh];
      full_loop_B.b_k_nh++;
    }

    full_loop_B.b_k_nh = obj->ldA;
    if (obj->sizes[2] != 0) {
      b_c = obj->sizes[2] - 1;
      full_loop_B.b_iy = 0;
      while (full_loop_B.b_iy <= b_c) {
        obj->maxConstrWorkspace.data[full_loop_B.b_iy] =
          -obj->maxConstrWorkspace.data[full_loop_B.b_iy];
        full_loop_B.b_iy++;
      }

      b_c = 0;
      full_loop_B.b_iy = (obj->sizes[2] - 1) * obj->ldA + 1;
      full_loop_B.iac = 1;
      while (((full_loop_B.b_k_nh > 0) && (full_loop_B.iac <= full_loop_B.b_iy))
             || ((full_loop_B.b_k_nh < 0) && (full_loop_B.iac >=
               full_loop_B.b_iy))) {
        full_loop_B.ix_c = 0;
        full_loop_B.c_d = 0.0;
        full_loop_B.b_m = (full_loop_B.iac + obj->nVar) - 1;
        full_loop_B.ia_j = full_loop_B.iac;
        while (full_loop_B.ia_j <= full_loop_B.b_m) {
          full_loop_B.c_d += obj->Aineq.data[full_loop_B.ia_j - 1] *
            x_data[full_loop_B.ix_c];
          full_loop_B.ix_c++;
          full_loop_B.ia_j++;
        }

        obj->maxConstrWorkspace.data[b_c] += full_loop_B.c_d;
        b_c++;
        full_loop_B.iac += full_loop_B.b_k_nh;
      }
    }

    full_loop_B.b_k_nh = 0;
    while (full_loop_B.b_k_nh <= full_loop_B.mIneq_b) {
      if ((!(v > obj->maxConstrWorkspace.data[full_loop_B.b_k_nh])) && (!rtIsNaN
           (obj->maxConstrWorkspace.data[full_loop_B.b_k_nh]))) {
        v = obj->maxConstrWorkspace.data[full_loop_B.b_k_nh];
      }

      full_loop_B.b_k_nh++;
    }
  }

  std::memcpy(&obj->maxConstrWorkspace.data[0], &obj->beq[0], 52U * sizeof
              (real_T));
  full_loop_xgemv_jhg(obj->nVar, obj->Aeq.data, obj->ldA, x_data,
                      obj->maxConstrWorkspace.data);
  for (full_loop_B.mIneq_b = 0; full_loop_B.mIneq_b < 52; full_loop_B.mIneq_b++)
  {
    full_loop_B.c_d = std::abs(obj->maxConstrWorkspace.data[full_loop_B.mIneq_b]);
    if ((!(v > full_loop_B.c_d)) && (!rtIsNaN(full_loop_B.c_d))) {
      v = full_loop_B.c_d;
    }
  }

  return v;
}

// Function for MATLAB Function: '<S60>/NLMPC'
real_T full_loopModelClass::maxConstraintViolation_AMats_re
  (s_Mspqy2ajbjhxqxIYYuZUwC_full_T *obj, const real_T x_data[])
{
  real_T v;
  int32_T b_c;
  v = 0.0;
  full_loop_B.mIneq_i5 = obj->sizes[2] - 1;
  if ((obj->Aineq.size[0] != 0) && (obj->Aineq.size[1] != 0)) {
    full_loop_B.b_k_i4 = 0;
    while (full_loop_B.b_k_i4 <= full_loop_B.mIneq_i5) {
      obj->maxConstrWorkspace.data[full_loop_B.b_k_i4] = obj->
        bineq.data[full_loop_B.b_k_i4];
      full_loop_B.b_k_i4++;
    }

    full_loop_B.b_k_i4 = obj->ldA;
    if (obj->sizes[2] != 0) {
      b_c = obj->sizes[2] - 1;
      full_loop_B.b_iy_f = 0;
      while (full_loop_B.b_iy_f <= b_c) {
        obj->maxConstrWorkspace.data[full_loop_B.b_iy_f] =
          -obj->maxConstrWorkspace.data[full_loop_B.b_iy_f];
        full_loop_B.b_iy_f++;
      }

      b_c = 0;
      full_loop_B.b_iy_f = (obj->sizes[2] - 1) * obj->ldA + 1;
      full_loop_B.iac_h = 1;
      while (((full_loop_B.b_k_i4 > 0) && (full_loop_B.iac_h <=
               full_loop_B.b_iy_f)) || ((full_loop_B.b_k_i4 < 0) &&
              (full_loop_B.iac_h >= full_loop_B.b_iy_f))) {
        full_loop_B.ix_h = 0;
        full_loop_B.c_nl = 0.0;
        full_loop_B.ia_l = full_loop_B.iac_h;
        while (full_loop_B.ia_l <= full_loop_B.iac_h + 68) {
          full_loop_B.c_nl += obj->Aineq.data[full_loop_B.ia_l - 1] *
            x_data[full_loop_B.ix_h];
          full_loop_B.ix_h++;
          full_loop_B.ia_l++;
        }

        obj->maxConstrWorkspace.data[b_c] += full_loop_B.c_nl;
        b_c++;
        full_loop_B.iac_h += full_loop_B.b_k_i4;
      }
    }

    full_loop_B.b_k_i4 = 0;
    while (full_loop_B.b_k_i4 <= full_loop_B.mIneq_i5) {
      obj->maxConstrWorkspace.data[full_loop_B.b_k_i4] -=
        x_data[full_loop_B.b_k_i4 + 69];
      if ((!(v > obj->maxConstrWorkspace.data[full_loop_B.b_k_i4])) && (!rtIsNaN
           (obj->maxConstrWorkspace.data[full_loop_B.b_k_i4]))) {
        v = obj->maxConstrWorkspace.data[full_loop_B.b_k_i4];
      }

      full_loop_B.b_k_i4++;
    }
  }

  std::memcpy(&obj->maxConstrWorkspace.data[0], &obj->beq[0], 52U * sizeof
              (real_T));
  full_loop_xgemv_jhg(69, obj->Aeq.data, obj->ldA, x_data,
                      obj->maxConstrWorkspace.data);
  for (full_loop_B.b_k_i4 = 0; full_loop_B.b_k_i4 < 52; full_loop_B.b_k_i4++) {
    obj->maxConstrWorkspace.data[full_loop_B.b_k_i4] =
      (obj->maxConstrWorkspace.data[full_loop_B.b_k_i4] - x_data
       [(full_loop_B.mIneq_i5 + full_loop_B.b_k_i4) + 70]) + x_data[(obj->sizes
      [2] + full_loop_B.b_k_i4) + 121];
    full_loop_B.c_nl = std::abs(obj->maxConstrWorkspace.data[full_loop_B.b_k_i4]);
    if ((!(v > full_loop_B.c_nl)) && (!rtIsNaN(full_loop_B.c_nl))) {
      v = full_loop_B.c_nl;
    }
  }

  return v;
}

// Function for MATLAB Function: '<S60>/NLMPC'
real_T full_loopModelClass::full_loo_maxConstraintViolation
  (s_Mspqy2ajbjhxqxIYYuZUwC_full_T *obj, const real_T x_data[])
{
  real_T v;
  full_loop_B.mLB_f = obj->sizes[3];
  full_loop_B.mUB_e = obj->sizes[4];
  full_loop_B.mFixed_n = obj->sizes[0];
  if (obj->probType == 2) {
    v = maxConstraintViolation_AMats_re(obj, x_data);
  } else {
    v = maxConstraintViolation_AMats_no(obj, x_data);
  }

  if (full_loop_B.mLB_f > 0) {
    full_loop_B.idx_m = 0;
    while (full_loop_B.idx_m <= full_loop_B.mLB_f - 1) {
      full_loop_B.u1_g = -x_data[obj->indexLB.data[full_loop_B.idx_m] - 1] -
        obj->lb.data[obj->indexLB.data[full_loop_B.idx_m] - 1];
      if ((!(v > full_loop_B.u1_g)) && (!rtIsNaN(full_loop_B.u1_g))) {
        v = full_loop_B.u1_g;
      }

      full_loop_B.idx_m++;
    }
  }

  if (full_loop_B.mUB_e > 0) {
    full_loop_B.mLB_f = 0;
    while (full_loop_B.mLB_f <= full_loop_B.mUB_e - 1) {
      full_loop_B.u1_g = x_data[obj->indexUB.data[full_loop_B.mLB_f] - 1] -
        obj->ub.data[obj->indexUB.data[full_loop_B.mLB_f] - 1];
      if ((!(v > full_loop_B.u1_g)) && (!rtIsNaN(full_loop_B.u1_g))) {
        v = full_loop_B.u1_g;
      }

      full_loop_B.mLB_f++;
    }
  }

  if (full_loop_B.mFixed_n > 0) {
    full_loop_B.mUB_e = 0;
    while (full_loop_B.mUB_e <= full_loop_B.mFixed_n - 1) {
      full_loop_B.u1_g = std::abs(x_data[obj->indexFixed.data[full_loop_B.mUB_e]
        - 1] - obj->ub.data[obj->indexFixed.data[full_loop_B.mUB_e] - 1]);
      if ((!(v > full_loop_B.u1_g)) && (!rtIsNaN(full_loop_B.u1_g))) {
        v = full_loop_B.u1_g;
      }

      full_loop_B.mUB_e++;
    }
  }

  return v;
}

// Function for MATLAB Function: '<S60>/NLMPC'
void full_loopModelClass::full_loop_xgemv_jhgj(int32_T m, int32_T n, const
  real_T A_data[], int32_T lda, const real_T x_data[], int32_T ix0, real_T
  y_data[])
{
  int32_T ix;
  real_T c;
  int32_T b_iy;
  int32_T iac;
  int32_T b;
  int32_T ia;
  int32_T b_c;
  if (n != 0) {
    for (b_iy = 0; b_iy < n; b_iy++) {
      y_data[b_iy] = -y_data[b_iy];
    }

    b_iy = 0;
    b_c = (n - 1) * lda + 1;
    iac = 1;
    while (((lda > 0) && (iac <= b_c)) || ((lda < 0) && (iac >= b_c))) {
      ix = ix0;
      c = 0.0;
      b = (iac + m) - 1;
      for (ia = iac; ia <= b; ia++) {
        c += A_data[ia - 1] * x_data[ix - 1];
        ix++;
      }

      y_data[b_iy] += c;
      b_iy++;
      iac += lda;
    }
  }
}

// Function for MATLAB Function: '<S60>/NLMPC'
void full_loopModelClass::full_loop_xgemv_jhgj1(int32_T m, const real_T A_data[],
  int32_T lda, const real_T x_data[], int32_T ix0, real_T y_data[])
{
  int32_T ix;
  int32_T b_iy;
  int32_T iac;
  int32_T b;
  int32_T ia;
  int32_T b_c;
  for (b_iy = 0; b_iy < 52; b_iy++) {
    y_data[b_iy] = -y_data[b_iy];
  }

  b_iy = 0;
  b_c = lda * 51 + 1;
  iac = 1;
  while (((lda > 0) && (iac <= b_c)) || ((lda < 0) && (iac >= b_c))) {
    ix = ix0;
    full_loop_B.c_jx = 0.0;
    b = (iac + m) - 1;
    for (ia = iac; ia <= b; ia++) {
      full_loop_B.c_jx += A_data[ia - 1] * x_data[ix - 1];
      ix++;
    }

    y_data[b_iy] += full_loop_B.c_jx;
    b_iy++;
    iac += lda;
  }
}

// Function for MATLAB Function: '<S60>/NLMPC'
real_T full_loopModelClass::maxConstraintViolation_AMats__e
  (s_Mspqy2ajbjhxqxIYYuZUwC_full_T *obj, const real_T x_data[], int32_T ix0)
{
  real_T v;
  int32_T mIneq;
  int32_T b_k;
  real_T u1;
  v = 0.0;
  mIneq = obj->sizes[2] - 1;
  if ((obj->Aineq.size[0] != 0) && (obj->Aineq.size[1] != 0)) {
    for (b_k = 0; b_k <= mIneq; b_k++) {
      obj->maxConstrWorkspace.data[b_k] = obj->bineq.data[b_k];
    }

    full_loop_xgemv_jhgj(obj->nVar, obj->sizes[2], obj->Aineq.data, obj->ldA,
                         x_data, ix0, obj->maxConstrWorkspace.data);
    for (b_k = 0; b_k <= mIneq; b_k++) {
      if ((!(v > obj->maxConstrWorkspace.data[b_k])) && (!rtIsNaN
           (obj->maxConstrWorkspace.data[b_k]))) {
        v = obj->maxConstrWorkspace.data[b_k];
      }
    }
  }

  std::memcpy(&obj->maxConstrWorkspace.data[0], &obj->beq[0], 52U * sizeof
              (real_T));
  full_loop_xgemv_jhgj1(obj->nVar, obj->Aeq.data, obj->ldA, x_data, ix0,
                        obj->maxConstrWorkspace.data);
  for (mIneq = 0; mIneq < 52; mIneq++) {
    u1 = std::abs(obj->maxConstrWorkspace.data[mIneq]);
    if ((!(v > u1)) && (!rtIsNaN(u1))) {
      v = u1;
    }
  }

  return v;
}

// Function for MATLAB Function: '<S60>/NLMPC'
real_T full_loopModelClass::maxConstraintViolation_AMats__g
  (s_Mspqy2ajbjhxqxIYYuZUwC_full_T *obj, const real_T x_data[], int32_T ix0)
{
  real_T v;
  int32_T b_k;
  v = 0.0;
  full_loop_B.mIneq_c = obj->sizes[2] - 1;
  if ((obj->Aineq.size[0] != 0) && (obj->Aineq.size[1] != 0)) {
    for (b_k = 0; b_k <= full_loop_B.mIneq_c; b_k++) {
      obj->maxConstrWorkspace.data[b_k] = obj->bineq.data[b_k];
    }

    full_loop_xgemv_jhgj(69, obj->sizes[2], obj->Aineq.data, obj->ldA, x_data,
                         ix0, obj->maxConstrWorkspace.data);
    for (b_k = 0; b_k <= full_loop_B.mIneq_c; b_k++) {
      obj->maxConstrWorkspace.data[b_k] -= x_data[(ix0 + b_k) + 68];
      if ((!(v > obj->maxConstrWorkspace.data[b_k])) && (!rtIsNaN
           (obj->maxConstrWorkspace.data[b_k]))) {
        v = obj->maxConstrWorkspace.data[b_k];
      }
    }
  }

  std::memcpy(&obj->maxConstrWorkspace.data[0], &obj->beq[0], 52U * sizeof
              (real_T));
  full_loop_xgemv_jhgj1(69, obj->Aeq.data, obj->ldA, x_data, ix0,
                        obj->maxConstrWorkspace.data);
  for (b_k = 0; b_k < 52; b_k++) {
    obj->maxConstrWorkspace.data[b_k] = (obj->maxConstrWorkspace.data[b_k] -
      x_data[((ix0 + full_loop_B.mIneq_c) + b_k) + 69]) + x_data[((ix0 +
      obj->sizes[2]) + b_k) + 120];
    full_loop_B.u1_m = std::abs(obj->maxConstrWorkspace.data[b_k]);
    if ((!(v > full_loop_B.u1_m)) && (!rtIsNaN(full_loop_B.u1_m))) {
      v = full_loop_B.u1_m;
    }
  }

  return v;
}

// Function for MATLAB Function: '<S60>/NLMPC'
real_T full_loopModelClass::full_l_maxConstraintViolation_a
  (s_Mspqy2ajbjhxqxIYYuZUwC_full_T *obj, const real_T x_data[], int32_T ix0)
{
  real_T v;
  full_loop_B.mLB_c = obj->sizes[3];
  full_loop_B.mUB_f = obj->sizes[4];
  full_loop_B.mFixed_j = obj->sizes[0];
  if (obj->probType == 2) {
    v = maxConstraintViolation_AMats__g(obj, x_data, ix0);
  } else {
    v = maxConstraintViolation_AMats__e(obj, x_data, ix0);
  }

  if (full_loop_B.mLB_c > 0) {
    full_loop_B.idx_ie = 0;
    while (full_loop_B.idx_ie <= full_loop_B.mLB_c - 1) {
      full_loop_B.u1_k = -x_data[(ix0 + obj->indexLB.data[full_loop_B.idx_ie]) -
        2] - obj->lb.data[obj->indexLB.data[full_loop_B.idx_ie] - 1];
      if ((!(v > full_loop_B.u1_k)) && (!rtIsNaN(full_loop_B.u1_k))) {
        v = full_loop_B.u1_k;
      }

      full_loop_B.idx_ie++;
    }
  }

  if (full_loop_B.mUB_f > 0) {
    full_loop_B.mLB_c = 0;
    while (full_loop_B.mLB_c <= full_loop_B.mUB_f - 1) {
      full_loop_B.u1_k = x_data[(ix0 + obj->indexUB.data[full_loop_B.mLB_c]) - 2]
        - obj->ub.data[obj->indexUB.data[full_loop_B.mLB_c] - 1];
      if ((!(v > full_loop_B.u1_k)) && (!rtIsNaN(full_loop_B.u1_k))) {
        v = full_loop_B.u1_k;
      }

      full_loop_B.mLB_c++;
    }
  }

  if (full_loop_B.mFixed_j > 0) {
    full_loop_B.mUB_f = 0;
    while (full_loop_B.mUB_f <= full_loop_B.mFixed_j - 1) {
      full_loop_B.u1_k = std::abs(x_data[(ix0 + obj->
        indexFixed.data[full_loop_B.mUB_f]) - 2] - obj->ub.data
        [obj->indexFixed.data[full_loop_B.mUB_f] - 1]);
      if ((!(v > full_loop_B.u1_k)) && (!rtIsNaN(full_loop_B.u1_k))) {
        v = full_loop_B.u1_k;
      }

      full_loop_B.mUB_f++;
    }
  }

  return v;
}

// Function for MATLAB Function: '<S60>/NLMPC'
void full_loopModelClass::full_loop_xcopy_gprnbz1r(int32_T n, const real_T
  x_data[], int32_T ix0, real_T y_data[])
{
  int32_T b_k;
  for (b_k = -1; b_k < n - 1; b_k++) {
    y_data[b_k + 1] = x_data[ix0 + b_k];
  }
}

// Function for MATLAB Function: '<S60>/NLMPC'
void full_loopModelClass::full_loop_xcopy_gprnbz1(int32_T n, const real_T
  x_data[], real_T y_data[])
{
  int32_T b_k;
  for (b_k = 0; b_k < n; b_k++) {
    y_data[b_k] = x_data[b_k];
  }
}

// Function for MATLAB Function: '<S60>/NLMPC'
boolean_T full_loopModelClass::full_lo_feasibleX0ForWorkingSet(real_T
  workspace_data[], const int32_T workspace_size[2], real_T xCurrent_data[],
  int32_T *xCurrent_size, s_Mspqy2ajbjhxqxIYYuZUwC_full_T *workingset,
  s_3RW6EhlAOINzvAvYfuaanB_full_T *qrmanager)
{
  boolean_T nonDegenerateWset;
  int32_T exitg1;
  full_loop_B.mWConstr = workingset->nActiveConstr - 1;
  full_loop_B.nVar_a = workingset->nVar;
  nonDegenerateWset = true;
  if (workingset->nActiveConstr != 0) {
    full_loop_B.b_idx_e = 0;
    while (full_loop_B.b_idx_e <= full_loop_B.mWConstr) {
      workspace_data[full_loop_B.b_idx_e] = workingset->
        bwset.data[full_loop_B.b_idx_e];
      workspace_data[full_loop_B.b_idx_e + workspace_size[0]] =
        workingset->bwset.data[full_loop_B.b_idx_e];
      full_loop_B.b_idx_e++;
    }

    full_loop_xgemv_jh(workingset->nVar, workingset->nActiveConstr,
                       workingset->ATwset.data, workingset->ATwset.size[0],
                       xCurrent_data, workspace_data);
    if (workingset->nActiveConstr >= workingset->nVar) {
      full_loop_B.b_idx_e = 0;
      while (full_loop_B.b_idx_e <= full_loop_B.nVar_a - 1) {
        full_loop_B.b_idx_row = 0;
        while (full_loop_B.b_idx_row <= full_loop_B.mWConstr) {
          qrmanager->QR.data[full_loop_B.b_idx_row + qrmanager->QR.size[0] *
            full_loop_B.b_idx_e] = workingset->ATwset.data
            [workingset->ATwset.size[0] * full_loop_B.b_idx_row +
            full_loop_B.b_idx_e];
          full_loop_B.b_idx_row++;
        }

        full_loop_B.b_idx_e++;
      }

      full_loop_factorQR(qrmanager, workingset->nActiveConstr, workingset->nVar);
      full_loop_computeQ_(qrmanager, qrmanager->mrows);
      full_loop_B.mWConstr = workspace_size[0] * workspace_size[1];
      if (0 <= full_loop_B.mWConstr - 1) {
        std::memcpy(&full_loop_B.workspace_data[0], &workspace_data[0],
                    full_loop_B.mWConstr * sizeof(real_T));
      }

      full_loop_xgemm(workingset->nVar, workingset->nActiveConstr,
                      qrmanager->Q.data, qrmanager->ldq,
                      full_loop_B.workspace_data, workspace_size[0],
                      workspace_data, workspace_size[0]);
      full_loop_xtrsm(workingset->nVar, qrmanager->QR.data, qrmanager->ldq,
                      workspace_data, workspace_size[0]);
    } else {
      full_loop_factorQR_i(qrmanager, workingset->ATwset.data,
                           workingset->ATwset.size, workingset->nVar,
                           workingset->nActiveConstr);
      full_loop_computeQ_(qrmanager, qrmanager->minRowCol);
      full_loop_xtrsm_k(workingset->nActiveConstr, qrmanager->QR.data,
                        qrmanager->ldq, workspace_data, workspace_size[0]);
      full_loop_B.mWConstr = workspace_size[0] * workspace_size[1];
      if (0 <= full_loop_B.mWConstr - 1) {
        std::memcpy(&full_loop_B.workspace_data[0], &workspace_data[0],
                    full_loop_B.mWConstr * sizeof(real_T));
      }

      full_loop_xgemm_g(workingset->nVar, workingset->nActiveConstr,
                        qrmanager->Q.data, qrmanager->ldq,
                        full_loop_B.workspace_data, workspace_size[0],
                        workspace_data, workspace_size[0]);
    }

    full_loop_B.mWConstr = 0;
    do {
      exitg1 = 0;
      if (full_loop_B.mWConstr <= full_loop_B.nVar_a - 1) {
        if (!full_loop_isfinite(workspace_data[full_loop_B.mWConstr])) {
          nonDegenerateWset = false;
          exitg1 = 1;
        } else if (!full_loop_isfinite(workspace_data[full_loop_B.mWConstr +
                    workspace_size[0]])) {
          nonDegenerateWset = false;
          exitg1 = 1;
        } else {
          full_loop_B.mWConstr++;
        }
      } else {
        full_loop_xaxpy(full_loop_B.nVar_a, xCurrent_data, workspace_data);
        full_loop_B.constrViolation_minnormX = full_loo_maxConstraintViolation
          (workingset, workspace_data);
        full_loop_B.constrViolation_basicX = full_l_maxConstraintViolation_a
          (workingset, workspace_data, workspace_size[0] + 1);
        if ((full_loop_B.constrViolation_minnormX <= 2.2204460492503131E-16) ||
            (full_loop_B.constrViolation_minnormX <
             full_loop_B.constrViolation_basicX)) {
          full_loop_B.b_size_g = *xCurrent_size;
          full_loop_B.mWConstr = *xCurrent_size;
          if (0 <= full_loop_B.mWConstr - 1) {
            std::memcpy(&full_loop_B.b_data_mc[0], &xCurrent_data[0],
                        full_loop_B.mWConstr * sizeof(real_T));
          }

          full_loop_xcopy_gprnbz1(full_loop_B.nVar_a, workspace_data,
            full_loop_B.b_data_mc);
          *xCurrent_size = full_loop_B.b_size_g;
          full_loop_B.mWConstr = full_loop_B.b_size_g;
          if (0 <= full_loop_B.mWConstr - 1) {
            std::memcpy(&xCurrent_data[0], &full_loop_B.b_data_mc[0],
                        full_loop_B.mWConstr * sizeof(real_T));
          }
        } else {
          full_loop_xcopy_gprnbz1r(full_loop_B.nVar_a, workspace_data,
            workspace_size[0] + 1, xCurrent_data);
        }

        exitg1 = 1;
      }
    } while (exitg1 == 0);
  }

  return nonDegenerateWset;
}

// Function for MATLAB Function: '<S60>/NLMPC'
void full_loopModelClass::full_loo_RemoveDependentIneq__d
  (s_Mspqy2ajbjhxqxIYYuZUwC_full_T *workingset, s_3RW6EhlAOINzvAvYfuaanB_full_T *
   qrmanager, s_i4ZL8C3jdkCeOA2IrFHlEF_full_T *memspace)
{
  full_loop_B.nFixedConstr = workingset->nWConstr[1] + workingset->nWConstr[0];
  if ((workingset->nWConstr[2] + workingset->nWConstr[3]) + workingset->
      nWConstr[4] > 0) {
    full_loop_B.tol_p = 1000.0 * static_cast<real_T>(workingset->nVar) *
      2.2204460492503131E-16;
    full_loop_B.nDepIneq = 0;
    while (full_loop_B.nDepIneq <= full_loop_B.nFixedConstr - 1) {
      qrmanager->jpvt.data[full_loop_B.nDepIneq] = 1;
      full_loop_B.nDepIneq++;
    }

    full_loop_B.nDepIneq = full_loop_B.nFixedConstr + 1;
    while (full_loop_B.nDepIneq <= workingset->nActiveConstr) {
      qrmanager->jpvt.data[full_loop_B.nDepIneq - 1] = 0;
      full_loop_B.nDepIneq++;
    }

    full_loop_factorQRE(qrmanager, workingset->ATwset.data,
                        workingset->ATwset.size, workingset->nVar,
                        workingset->nActiveConstr);
    full_loop_B.nDepIneq = 0;
    full_loop_B.idx_e = workingset->nActiveConstr;
    while (full_loop_B.idx_e > workingset->nVar) {
      full_loop_B.nDepIneq++;
      memspace->workspace_int.data[full_loop_B.nDepIneq - 1] =
        qrmanager->jpvt.data[full_loop_B.idx_e - 1];
      full_loop_B.idx_e--;
    }

    if (full_loop_B.idx_e <= workingset->nVar) {
      while ((full_loop_B.idx_e > full_loop_B.nFixedConstr) && (std::abs
              (qrmanager->QR.data[((full_loop_B.idx_e - 1) * qrmanager->QR.size
                [0] + full_loop_B.idx_e) - 1]) < full_loop_B.tol_p)) {
        full_loop_B.nDepIneq++;
        memspace->workspace_int.data[full_loop_B.nDepIneq - 1] =
          qrmanager->jpvt.data[full_loop_B.idx_e - 1];
        full_loop_B.idx_e--;
      }
    }

    full_loop_B.b_size_k = memspace->workspace_int.size;
    full_loop_B.idx_e = memspace->workspace_int.size;
    if (0 <= full_loop_B.idx_e - 1) {
      std::memcpy(&full_loop_B.b_data_ch[0], &memspace->workspace_int.data[0],
                  full_loop_B.idx_e * sizeof(int32_T));
    }

    full_loop_B.c_size_b = memspace->workspace_sort.size;
    full_loop_B.idx_e = memspace->workspace_sort.size;
    if (0 <= full_loop_B.idx_e - 1) {
      std::memcpy(&full_loop_B.c_data_ax[0], &memspace->workspace_sort.data[0],
                  full_loop_B.idx_e * sizeof(int32_T));
    }

    full_loop_countsort(full_loop_B.b_data_ch, full_loop_B.nDepIneq,
                        full_loop_B.c_data_ax, full_loop_B.nFixedConstr + 1,
                        workingset->nActiveConstr);
    memspace->workspace_int.size = full_loop_B.b_size_k;
    full_loop_B.idx_e = full_loop_B.b_size_k;
    if (0 <= full_loop_B.idx_e - 1) {
      std::memcpy(&memspace->workspace_int.data[0], &full_loop_B.b_data_ch[0],
                  full_loop_B.idx_e * sizeof(int32_T));
    }

    memspace->workspace_sort.size = full_loop_B.c_size_b;
    full_loop_B.idx_e = full_loop_B.c_size_b;
    if (0 <= full_loop_B.idx_e - 1) {
      std::memcpy(&memspace->workspace_sort.data[0], &full_loop_B.c_data_ax[0],
                  full_loop_B.idx_e * sizeof(int32_T));
    }

    while (full_loop_B.nDepIneq > 0) {
      full_loop_removeConstr(workingset,
        full_loop_B.b_data_ch[full_loop_B.nDepIneq - 1]);
      full_loop_B.nDepIneq--;
    }
  }
}

// Function for MATLAB Function: '<S60>/NLMPC'
void full_loopModelClass::full_loop_xgemv_jhgj1v(int32_T m, const real_T A_data[],
  int32_T lda, const real_T x_data[], real_T y_data[])
{
  int32_T ix;
  int32_T b_iy;
  int32_T iac;
  int32_T b;
  int32_T ia;
  int32_T b_c;
  for (b_iy = 0; b_iy < 52; b_iy++) {
    y_data[b_iy] = -y_data[b_iy];
  }

  b_iy = 0;
  b_c = lda * 51 + 1;
  iac = 1;
  while (((lda > 0) && (iac <= b_c)) || ((lda < 0) && (iac >= b_c))) {
    ix = 0;
    full_loop_B.c_a = 0.0;
    b = (iac + m) - 1;
    for (ia = iac; ia <= b; ia++) {
      full_loop_B.c_a += A_data[ia - 1] * x_data[ix];
      ix++;
    }

    y_data[b_iy] += full_loop_B.c_a;
    b_iy++;
    iac += lda;
  }
}

// Function for MATLAB Function: '<S60>/NLMPC'
real_T full_loopModelClass::maxConstraintViolation_AMats_ev
  (s_Mspqy2ajbjhxqxIYYuZUwC_full_T *obj, const real_T x_data[])
{
  real_T v;
  int32_T b_c;
  v = 0.0;
  full_loop_B.mIneq_k = obj->sizes[2] - 1;
  if ((obj->Aineq.size[0] != 0) && (obj->Aineq.size[1] != 0)) {
    full_loop_B.b_k_dy = 0;
    while (full_loop_B.b_k_dy <= full_loop_B.mIneq_k) {
      obj->maxConstrWorkspace.data[full_loop_B.b_k_dy] = obj->
        bineq.data[full_loop_B.b_k_dy];
      full_loop_B.b_k_dy++;
    }

    full_loop_B.b_k_dy = obj->ldA;
    if (obj->sizes[2] != 0) {
      b_c = obj->sizes[2] - 1;
      full_loop_B.b_iy_k = 0;
      while (full_loop_B.b_iy_k <= b_c) {
        obj->maxConstrWorkspace.data[full_loop_B.b_iy_k] =
          -obj->maxConstrWorkspace.data[full_loop_B.b_iy_k];
        full_loop_B.b_iy_k++;
      }

      b_c = 0;
      full_loop_B.b_iy_k = (obj->sizes[2] - 1) * obj->ldA + 1;
      full_loop_B.iac_p = 1;
      while (((full_loop_B.b_k_dy > 0) && (full_loop_B.iac_p <=
               full_loop_B.b_iy_k)) || ((full_loop_B.b_k_dy < 0) &&
              (full_loop_B.iac_p >= full_loop_B.b_iy_k))) {
        full_loop_B.ix_ce = 0;
        full_loop_B.c_dh = 0.0;
        full_loop_B.b_em = (full_loop_B.iac_p + obj->nVar) - 1;
        full_loop_B.ia_i = full_loop_B.iac_p;
        while (full_loop_B.ia_i <= full_loop_B.b_em) {
          full_loop_B.c_dh += obj->Aineq.data[full_loop_B.ia_i - 1] *
            x_data[full_loop_B.ix_ce];
          full_loop_B.ix_ce++;
          full_loop_B.ia_i++;
        }

        obj->maxConstrWorkspace.data[b_c] += full_loop_B.c_dh;
        b_c++;
        full_loop_B.iac_p += full_loop_B.b_k_dy;
      }
    }

    full_loop_B.b_k_dy = 0;
    while (full_loop_B.b_k_dy <= full_loop_B.mIneq_k) {
      if ((!(v > obj->maxConstrWorkspace.data[full_loop_B.b_k_dy])) && (!rtIsNaN
           (obj->maxConstrWorkspace.data[full_loop_B.b_k_dy]))) {
        v = obj->maxConstrWorkspace.data[full_loop_B.b_k_dy];
      }

      full_loop_B.b_k_dy++;
    }
  }

  std::memcpy(&obj->maxConstrWorkspace.data[0], &obj->beq[0], 52U * sizeof
              (real_T));
  full_loop_xgemv_jhgj1v(obj->nVar, obj->Aeq.data, obj->ldA, x_data,
    obj->maxConstrWorkspace.data);
  for (full_loop_B.mIneq_k = 0; full_loop_B.mIneq_k < 52; full_loop_B.mIneq_k++)
  {
    full_loop_B.c_dh = std::abs(obj->maxConstrWorkspace.data[full_loop_B.mIneq_k]);
    if ((!(v > full_loop_B.c_dh)) && (!rtIsNaN(full_loop_B.c_dh))) {
      v = full_loop_B.c_dh;
    }
  }

  return v;
}

// Function for MATLAB Function: '<S60>/NLMPC'
real_T full_loopModelClass::maxConstraintViolation_AMats_g3
  (s_Mspqy2ajbjhxqxIYYuZUwC_full_T *obj, const real_T x_data[])
{
  real_T v;
  int32_T b_c;
  v = 0.0;
  full_loop_B.mIneq_be = obj->sizes[2] - 1;
  if ((obj->Aineq.size[0] != 0) && (obj->Aineq.size[1] != 0)) {
    full_loop_B.b_k_ev = 0;
    while (full_loop_B.b_k_ev <= full_loop_B.mIneq_be) {
      obj->maxConstrWorkspace.data[full_loop_B.b_k_ev] = obj->
        bineq.data[full_loop_B.b_k_ev];
      full_loop_B.b_k_ev++;
    }

    full_loop_B.b_k_ev = obj->ldA;
    if (obj->sizes[2] != 0) {
      b_c = obj->sizes[2] - 1;
      full_loop_B.b_iy_o = 0;
      while (full_loop_B.b_iy_o <= b_c) {
        obj->maxConstrWorkspace.data[full_loop_B.b_iy_o] =
          -obj->maxConstrWorkspace.data[full_loop_B.b_iy_o];
        full_loop_B.b_iy_o++;
      }

      b_c = 0;
      full_loop_B.b_iy_o = (obj->sizes[2] - 1) * obj->ldA + 1;
      full_loop_B.iac_ff = 1;
      while (((full_loop_B.b_k_ev > 0) && (full_loop_B.iac_ff <=
               full_loop_B.b_iy_o)) || ((full_loop_B.b_k_ev < 0) &&
              (full_loop_B.iac_ff >= full_loop_B.b_iy_o))) {
        full_loop_B.ix_p = 0;
        full_loop_B.c_p5 = 0.0;
        full_loop_B.ia_dg = full_loop_B.iac_ff;
        while (full_loop_B.ia_dg <= full_loop_B.iac_ff + 68) {
          full_loop_B.c_p5 += obj->Aineq.data[full_loop_B.ia_dg - 1] *
            x_data[full_loop_B.ix_p];
          full_loop_B.ix_p++;
          full_loop_B.ia_dg++;
        }

        obj->maxConstrWorkspace.data[b_c] += full_loop_B.c_p5;
        b_c++;
        full_loop_B.iac_ff += full_loop_B.b_k_ev;
      }
    }

    full_loop_B.b_k_ev = 0;
    while (full_loop_B.b_k_ev <= full_loop_B.mIneq_be) {
      obj->maxConstrWorkspace.data[full_loop_B.b_k_ev] -=
        x_data[full_loop_B.b_k_ev + 69];
      if ((!(v > obj->maxConstrWorkspace.data[full_loop_B.b_k_ev])) && (!rtIsNaN
           (obj->maxConstrWorkspace.data[full_loop_B.b_k_ev]))) {
        v = obj->maxConstrWorkspace.data[full_loop_B.b_k_ev];
      }

      full_loop_B.b_k_ev++;
    }
  }

  std::memcpy(&obj->maxConstrWorkspace.data[0], &obj->beq[0], 52U * sizeof
              (real_T));
  full_loop_xgemv_jhgj1v(69, obj->Aeq.data, obj->ldA, x_data,
    obj->maxConstrWorkspace.data);
  for (full_loop_B.b_k_ev = 0; full_loop_B.b_k_ev < 52; full_loop_B.b_k_ev++) {
    obj->maxConstrWorkspace.data[full_loop_B.b_k_ev] =
      (obj->maxConstrWorkspace.data[full_loop_B.b_k_ev] - x_data
       [(full_loop_B.mIneq_be + full_loop_B.b_k_ev) + 70]) + x_data[(obj->sizes
      [2] + full_loop_B.b_k_ev) + 121];
    full_loop_B.c_p5 = std::abs(obj->maxConstrWorkspace.data[full_loop_B.b_k_ev]);
    if ((!(v > full_loop_B.c_p5)) && (!rtIsNaN(full_loop_B.c_p5))) {
      v = full_loop_B.c_p5;
    }
  }

  return v;
}

// Function for MATLAB Function: '<S60>/NLMPC'
real_T full_loopModelClass::full__maxConstraintViolation_ae
  (s_Mspqy2ajbjhxqxIYYuZUwC_full_T *obj, const real_T x_data[])
{
  real_T v;
  full_loop_B.mLB_d = obj->sizes[3];
  full_loop_B.mUB_l = obj->sizes[4];
  full_loop_B.mFixed_d = obj->sizes[0];
  if (obj->probType == 2) {
    v = maxConstraintViolation_AMats_g3(obj, x_data);
  } else {
    v = maxConstraintViolation_AMats_ev(obj, x_data);
  }

  if (full_loop_B.mLB_d > 0) {
    full_loop_B.idx_jj = 0;
    while (full_loop_B.idx_jj <= full_loop_B.mLB_d - 1) {
      full_loop_B.u1_c = -x_data[obj->indexLB.data[full_loop_B.idx_jj] - 1] -
        obj->lb.data[obj->indexLB.data[full_loop_B.idx_jj] - 1];
      if ((!(v > full_loop_B.u1_c)) && (!rtIsNaN(full_loop_B.u1_c))) {
        v = full_loop_B.u1_c;
      }

      full_loop_B.idx_jj++;
    }
  }

  if (full_loop_B.mUB_l > 0) {
    full_loop_B.mLB_d = 0;
    while (full_loop_B.mLB_d <= full_loop_B.mUB_l - 1) {
      full_loop_B.u1_c = x_data[obj->indexUB.data[full_loop_B.mLB_d] - 1] -
        obj->ub.data[obj->indexUB.data[full_loop_B.mLB_d] - 1];
      if ((!(v > full_loop_B.u1_c)) && (!rtIsNaN(full_loop_B.u1_c))) {
        v = full_loop_B.u1_c;
      }

      full_loop_B.mLB_d++;
    }
  }

  if (full_loop_B.mFixed_d > 0) {
    full_loop_B.mUB_l = 0;
    while (full_loop_B.mUB_l <= full_loop_B.mFixed_d - 1) {
      full_loop_B.u1_c = std::abs(x_data[obj->indexFixed.data[full_loop_B.mUB_l]
        - 1] - obj->ub.data[obj->indexFixed.data[full_loop_B.mUB_l] - 1]);
      if ((!(v > full_loop_B.u1_c)) && (!rtIsNaN(full_loop_B.u1_c))) {
        v = full_loop_B.u1_c;
      }

      full_loop_B.mUB_l++;
    }
  }

  return v;
}

// Function for MATLAB Function: '<S60>/NLMPC'
void full_loopModelClass::full_loop_PresolveWorkingSet
  (s_ZxHOyfVSozxr6pSGbgUCkF_full_T *solution, s_i4ZL8C3jdkCeOA2IrFHlEF_full_T
   *memspace, s_Mspqy2ajbjhxqxIYYuZUwC_full_T *workingset,
   s_3RW6EhlAOINzvAvYfuaanB_full_T *qrmanager)
{
  boolean_T okWorkingSet;
  boolean_T guard1 = false;
  solution->state = 82;
  full_loop_B.b_d4 = full_loop_RemoveDependentEq_(memspace, workingset,
    qrmanager);
  if (full_loop_B.b_d4 != -1) {
    full_loop_RemoveDependentIneq_(workingset, qrmanager, memspace);
    full_loop_B.c_size_a = solution->xstar.size;
    full_loop_B.b_d4 = solution->xstar.size;
    if (0 <= full_loop_B.b_d4 - 1) {
      std::memcpy(&full_loop_B.c_data_a[0], &solution->xstar.data[0],
                  full_loop_B.b_d4 * sizeof(real_T));
    }

    okWorkingSet = full_lo_feasibleX0ForWorkingSet
      (memspace->workspace_double.data, memspace->workspace_double.size,
       full_loop_B.c_data_a, &full_loop_B.c_size_a, workingset, qrmanager);
    solution->xstar.size = full_loop_B.c_size_a;
    full_loop_B.b_d4 = full_loop_B.c_size_a;
    if (0 <= full_loop_B.b_d4 - 1) {
      std::memcpy(&solution->xstar.data[0], &full_loop_B.c_data_a[0],
                  full_loop_B.b_d4 * sizeof(real_T));
    }

    guard1 = false;
    if (!okWorkingSet) {
      full_loo_RemoveDependentIneq__d(workingset, qrmanager, memspace);
      okWorkingSet = full_lo_feasibleX0ForWorkingSet
        (memspace->workspace_double.data, memspace->workspace_double.size,
         full_loop_B.c_data_a, &full_loop_B.c_size_a, workingset, qrmanager);
      solution->xstar.size = full_loop_B.c_size_a;
      full_loop_B.b_d4 = full_loop_B.c_size_a;
      if (0 <= full_loop_B.b_d4 - 1) {
        std::memcpy(&solution->xstar.data[0], &full_loop_B.c_data_a[0],
                    full_loop_B.b_d4 * sizeof(real_T));
      }

      if (!okWorkingSet) {
        solution->state = -7;
      } else {
        guard1 = true;
      }
    } else {
      guard1 = true;
    }

    if (guard1) {
      if (workingset->nWConstr[0] + workingset->nWConstr[1] == workingset->nVar)
      {
        full_loop_B.constrViolation = full__maxConstraintViolation_ae(workingset,
          solution->xstar.data);
        if (full_loop_B.constrViolation > 0.02) {
          solution->state = -2;
        }
      }
    }
  } else {
    solution->state = -3;
    full_loop_removeAllIneqConstr(workingset);
  }
}

// Function for MATLAB Function: '<S60>/NLMPC'
void full_loopModelClass::full_loop_xgemv_jhgj1v0(int32_T m, int32_T n, const
  real_T A[4761], int32_T lda, const real_T x_data[], real_T y_data[])
{
  int32_T iy;
  int32_T ix;
  int32_T iac;
  int32_T b;
  int32_T ia;
  int32_T c;
  if ((m != 0) && (n != 0)) {
    for (ix = 0; ix < m; ix++) {
      y_data[ix] = 0.0;
    }

    ix = 0;
    c = (n - 1) * lda + 1;
    iac = 1;
    while (((lda > 0) && (iac <= c)) || ((lda < 0) && (iac >= c))) {
      iy = 0;
      b = (iac + m) - 1;
      for (ia = iac; ia <= b; ia++) {
        y_data[iy] += A[ia - 1] * x_data[ix];
        iy++;
      }

      ix++;
      iac += lda;
    }
  }
}

// Function for MATLAB Function: '<S60>/NLMPC'
void full_loopModelClass::full_loop_computeGrad_StoreHx
  (s_BtE36YuCWnavoi0lGdvGZF_full_T *obj, const real_T H[4761], const real_T
   f_data[], const real_T x_data[])
{
  int32_T maxRegVar;
  int32_T iy;
  int32_T c_k;
  int32_T exitg1;
  switch (obj->objtype) {
   case 5:
    for (maxRegVar = 0; maxRegVar <= obj->nvar - 2; maxRegVar++) {
      obj->grad.data[maxRegVar] = 0.0;
    }

    obj->grad.data[obj->nvar - 1] = obj->gammaScalar;
    break;

   case 3:
    full_loop_xgemv_jhgj1v0(obj->nvar, obj->nvar, H, obj->nvar, x_data,
      obj->Hx.data);
    iy = 0;
    do {
      exitg1 = 0;
      maxRegVar = obj->nvar - 1;
      if (iy <= maxRegVar) {
        obj->grad.data[iy] = obj->Hx.data[iy];
        iy++;
      } else {
        exitg1 = 1;
      }
    } while (exitg1 == 0);

    if (obj->hasLinear && (obj->nvar >= 1)) {
      for (iy = 0; iy <= maxRegVar; iy++) {
        obj->grad.data[iy] += f_data[iy];
      }
    }
    break;

   case 4:
    maxRegVar = obj->maxVar - 1;
    full_loop_xgemv_jhgj1v0(obj->nvar, obj->nvar, H, obj->nvar, x_data,
      obj->Hx.data);
    for (iy = obj->nvar; iy < maxRegVar; iy++) {
      obj->Hx.data[iy] = obj->beta * x_data[iy];
    }

    for (iy = 0; iy < maxRegVar; iy++) {
      obj->grad.data[iy] = obj->Hx.data[iy];
    }

    if (obj->hasLinear && (obj->nvar >= 1)) {
      maxRegVar = obj->nvar - 1;
      for (iy = 0; iy <= maxRegVar; iy++) {
        obj->grad.data[iy] += f_data[iy];
      }
    }

    maxRegVar = (obj->maxVar - obj->nvar) - 1;
    if (maxRegVar >= 1) {
      iy = obj->nvar;
      for (c_k = 0; c_k < maxRegVar; c_k++) {
        obj->grad.data[iy] += obj->rho;
        iy++;
      }
    }
    break;
  }
}

// Function for MATLAB Function: '<S60>/NLMPC'
real_T full_loopModelClass::full_loop_computeFval_ReuseHx(const
  s_BtE36YuCWnavoi0lGdvGZF_full_T *obj, real_T workspace_data[], const real_T
  f_data[], const real_T x_data[])
{
  real_T val;
  int32_T b_i;
  int32_T d_i;
  int32_T b_k;
  int32_T exitg1;
  val = 0.0;
  switch (obj->objtype) {
   case 5:
    val = x_data[obj->nvar - 1] * obj->gammaScalar;
    break;

   case 3:
    if (obj->hasLinear) {
      b_i = 0;
      do {
        exitg1 = 0;
        b_k = obj->nvar - 1;
        if (b_i <= b_k) {
          workspace_data[b_i] = 0.5 * obj->Hx.data[b_i] + f_data[b_i];
          b_i++;
        } else {
          exitg1 = 1;
        }
      } while (exitg1 == 0);

      if (obj->nvar >= 1) {
        for (b_i = 0; b_i <= b_k; b_i++) {
          val += x_data[b_i] * workspace_data[b_i];
        }
      }
    } else {
      if (obj->nvar >= 1) {
        for (b_k = 0; b_k < obj->nvar; b_k++) {
          val += x_data[b_k] * obj->Hx.data[b_k];
        }
      }

      val *= 0.5;
    }
    break;

   case 4:
    b_k = obj->maxVar - 1;
    if (obj->hasLinear) {
      for (b_i = 0; b_i < obj->nvar; b_i++) {
        workspace_data[b_i] = f_data[b_i];
      }

      b_i = obj->maxVar - obj->nvar;
      for (d_i = 0; d_i <= b_i - 2; d_i++) {
        workspace_data[obj->nvar + d_i] = obj->rho;
      }

      for (b_i = 0; b_i < b_k; b_i++) {
        workspace_data[b_i] += 0.5 * obj->Hx.data[b_i];
      }

      if (b_k >= 1) {
        for (b_k = 0; b_k <= obj->maxVar - 2; b_k++) {
          val += x_data[b_k] * workspace_data[b_k];
        }
      }
    } else {
      if (b_k >= 1) {
        for (b_i = 0; b_i <= obj->maxVar - 2; b_i++) {
          val += x_data[b_i] * obj->Hx.data[b_i];
        }
      }

      val *= 0.5;
      for (b_i = obj->nvar; b_i < b_k; b_i++) {
        val += x_data[b_i] * obj->rho;
      }
    }
    break;
  }

  return val;
}

// Function for MATLAB Function: '<S60>/NLMPC'
void full_loopModelClass::full_loop_xcopy_gprnbz(int32_T n, real_T y_data[])
{
  int32_T k;
  for (k = 0; k < n; k++) {
    y_data[k] = 0.0;
  }
}

// Function for MATLAB Function: '<S60>/NLMPC'
void full_loopModelClass::full_loop_xrotg(real_T *a, real_T *b, real_T *c,
  real_T *s)
{
  full_loop_B.roe_d = *b;
  full_loop_B.absa_g = std::abs(*a);
  full_loop_B.absb_c = std::abs(*b);
  if (full_loop_B.absa_g > full_loop_B.absb_c) {
    full_loop_B.roe_d = *a;
  }

  full_loop_B.scale_k = full_loop_B.absa_g + full_loop_B.absb_c;
  if (full_loop_B.scale_k == 0.0) {
    *s = 0.0;
    *c = 1.0;
    full_loop_B.scale_k = 0.0;
    *b = 0.0;
  } else {
    full_loop_B.ads_j = full_loop_B.absa_g / full_loop_B.scale_k;
    full_loop_B.bds_h = full_loop_B.absb_c / full_loop_B.scale_k;
    full_loop_B.scale_k *= std::sqrt(full_loop_B.ads_j * full_loop_B.ads_j +
      full_loop_B.bds_h * full_loop_B.bds_h);
    if (full_loop_B.roe_d < 0.0) {
      full_loop_B.scale_k = -full_loop_B.scale_k;
    }

    *c = *a / full_loop_B.scale_k;
    *s = *b / full_loop_B.scale_k;
    if (full_loop_B.absa_g > full_loop_B.absb_c) {
      *b = *s;
    } else if (*c != 0.0) {
      *b = 1.0 / *c;
    } else {
      *b = 1.0;
    }
  }

  *a = full_loop_B.scale_k;
}

// Function for MATLAB Function: '<S60>/NLMPC'
void full_loopModelClass::full_loop_xrot(int32_T n, real_T x_data[], int32_T ix0,
  int32_T iy0, real_T c, real_T s)
{
  int32_T ix;
  int32_T iy;
  int32_T k;
  if (n >= 1) {
    ix = ix0 - 1;
    iy = iy0 - 1;
    for (k = 0; k < n; k++) {
      full_loop_B.temp_k = c * x_data[ix] + s * x_data[iy];
      x_data[iy] = c * x_data[iy] - s * x_data[ix];
      x_data[ix] = full_loop_B.temp_k;
      iy++;
      ix++;
    }
  }
}

// Function for MATLAB Function: '<S60>/NLMPC'
void full_loopModelClass::full_loop_squareQ_appendCol
  (s_3RW6EhlAOINzvAvYfuaanB_full_T *obj, const real_T vec_data[], int32_T iv0)
{
  int32_T iQR0;
  int32_T Qk0;
  int32_T iyend;
  int32_T ix;
  int32_T b_iy;
  int32_T d;
  int32_T ia;
  iQR0 = obj->ncols + 1;
  if (obj->mrows < iQR0) {
    obj->minRowCol = obj->mrows;
  } else {
    obj->minRowCol = iQR0;
  }

  iQR0 = obj->ldq * obj->ncols;
  Qk0 = obj->ldq;
  if (obj->mrows != 0) {
    iyend = iQR0 + obj->mrows;
    for (b_iy = iQR0; b_iy < iyend; b_iy++) {
      obj->QR.data[b_iy] = 0.0;
    }

    iyend = (obj->mrows - 1) * obj->ldq + 1;
    b_iy = 1;
    while (((Qk0 > 0) && (b_iy <= iyend)) || ((Qk0 < 0) && (b_iy >= iyend))) {
      ix = iv0;
      full_loop_B.c_c = 0.0;
      d = (b_iy + obj->mrows) - 1;
      for (ia = b_iy; ia <= d; ia++) {
        full_loop_B.c_c += obj->Q.data[ia - 1] * vec_data[ix - 1];
        ix++;
      }

      obj->QR.data[iQR0] += full_loop_B.c_c;
      iQR0++;
      b_iy += Qk0;
    }
  }

  obj->ncols++;
  obj->jpvt.data[obj->ncols - 1] = obj->ncols;
  for (iQR0 = obj->mrows - 2; iQR0 + 2 > obj->ncols; iQR0--) {
    Qk0 = (obj->ncols - 1) * obj->QR.size[0] + iQR0;
    full_loop_B.c_c = obj->QR.data[Qk0];
    full_loop_B.c_jo = obj->QR.data[Qk0 + 1];
    full_loop_xrotg(&full_loop_B.c_c, &full_loop_B.c_jo, &full_loop_B.b_c_k,
                    &full_loop_B.s_j);
    obj->QR.data[Qk0] = full_loop_B.c_c;
    obj->QR.data[(iQR0 + obj->QR.size[0] * (obj->ncols - 1)) + 1] =
      full_loop_B.c_jo;
    Qk0 = obj->ldq * iQR0 + 1;
    full_loop_xrot(obj->mrows, obj->Q.data, Qk0, obj->ldq + Qk0,
                   full_loop_B.b_c_k, full_loop_B.s_j);
  }
}

// Function for MATLAB Function: '<S60>/NLMPC'
void full_loopModelClass::full_loop_xrot_i(int32_T n, real_T x_data[], int32_T
  ix0, int32_T incx, int32_T iy0, int32_T incy, real_T c, real_T s)
{
  int32_T ix;
  int32_T iy;
  real_T temp;
  int32_T k;
  if (n >= 1) {
    ix = ix0 - 1;
    iy = iy0 - 1;
    for (k = 0; k < n; k++) {
      temp = c * x_data[ix] + s * x_data[iy];
      x_data[iy] = c * x_data[iy] - s * x_data[ix];
      x_data[ix] = temp;
      iy += incx;
      ix += incy;
    }
  }
}

// Function for MATLAB Function: '<S60>/NLMPC'
void full_loopModelClass::full_loop_deleteColMoveEnd
  (s_3RW6EhlAOINzvAvYfuaanB_full_T *obj, int32_T idx)
{
  int32_T i;
  int32_T k;
  int32_T QRk0;
  int32_T b_tmp;
  if (obj->usedPivoting) {
    i = 1;
    while ((i <= obj->ncols) && (obj->jpvt.data[i - 1] != idx)) {
      i++;
    }

    idx = i;
  }

  if (idx >= obj->ncols) {
    obj->ncols--;
  } else {
    obj->jpvt.data[idx - 1] = obj->jpvt.data[obj->ncols - 1];
    for (i = 0; i < obj->minRowCol; i++) {
      obj->QR.data[i + obj->QR.size[0] * (idx - 1)] = obj->QR.data[(obj->ncols -
        1) * obj->QR.size[0] + i];
    }

    obj->ncols--;
    if (obj->mrows < obj->ncols) {
      obj->minRowCol = obj->mrows;
    } else {
      obj->minRowCol = obj->ncols;
    }

    if (idx < obj->mrows) {
      i = obj->mrows - 1;
      if (i >= obj->ncols) {
        i = obj->ncols;
      }

      for (k = i; k >= idx; k--) {
        QRk0 = (idx - 1) * obj->QR.size[0] + k;
        b_tmp = QRk0 - 1;
        full_loop_B.d_fo = obj->QR.data[b_tmp];
        full_loop_B.e_cz = obj->QR.data[QRk0];
        full_loop_xrotg(&full_loop_B.d_fo, &full_loop_B.e_cz, &full_loop_B.c_c_o,
                        &full_loop_B.b_s);
        obj->QR.data[b_tmp] = full_loop_B.d_fo;
        obj->QR.data[k + obj->QR.size[0] * (idx - 1)] = full_loop_B.e_cz;
        obj->QR.data[k + obj->QR.size[0] * (k - 1)] = 0.0;
        QRk0 = obj->ldq * idx + k;
        full_loop_xrot_i(obj->ncols - idx, obj->QR.data, QRk0, obj->ldq, QRk0 +
                         1, obj->ldq, full_loop_B.c_c_o, full_loop_B.b_s);
        QRk0 = (k - 1) * obj->ldq + 1;
        full_loop_xrot(obj->mrows, obj->Q.data, QRk0, obj->ldq + QRk0,
                       full_loop_B.c_c_o, full_loop_B.b_s);
      }

      for (k = idx; k < i; k++) {
        QRk0 = obj->QR.size[0] * k + k;
        full_loop_B.d_fo = obj->QR.data[QRk0];
        full_loop_B.e_cz = obj->QR.data[QRk0 + 1];
        full_loop_xrotg(&full_loop_B.d_fo, &full_loop_B.e_cz, &full_loop_B.c_c_o,
                        &full_loop_B.b_s);
        obj->QR.data[QRk0] = full_loop_B.d_fo;
        obj->QR.data[(k + obj->QR.size[0] * k) + 1] = full_loop_B.e_cz;
        QRk0 = (k + 1) * (obj->ldq + 1);
        full_loop_xrot_i((obj->ncols - k) - 1, obj->QR.data, QRk0, obj->ldq,
                         QRk0 + 1, obj->ldq, full_loop_B.c_c_o, full_loop_B.b_s);
        QRk0 = obj->ldq * k + 1;
        full_loop_xrot(obj->mrows, obj->Q.data, QRk0, obj->ldq + QRk0,
                       full_loop_B.c_c_o, full_loop_B.b_s);
      }
    }
  }
}

// Function for MATLAB Function: '<S60>/NLMPC'
void full_loopModelClass::full_loop_xgemm_gu(int32_T m, int32_T n, int32_T k,
  const real_T A[4761], int32_T lda, const real_T B_data[], int32_T ib0, int32_T
  ldb, real_T C_data[], int32_T ldc)
{
  int32_T br;
  int32_T ar;
  int32_T ia;
  int32_T b_cr;
  int32_T c;
  int32_T ib;
  int32_T d;
  int32_T b_ic;
  int32_T b_c;
  if ((m != 0) && (n != 0)) {
    b_c = (n - 1) * ldc;
    br = 0;
    while (((ldc > 0) && (br <= b_c)) || ((ldc < 0) && (br >= b_c))) {
      b_cr = br + m;
      for (ar = br; ar < b_cr; ar++) {
        C_data[ar] = 0.0;
      }

      br += ldc;
    }

    br = ib0;
    b_cr = 0;
    while (((ldc > 0) && (b_cr <= b_c)) || ((ldc < 0) && (b_cr >= b_c))) {
      ar = -1;
      c = br + k;
      for (ib = br; ib < c; ib++) {
        ia = ar;
        d = b_cr + m;
        for (b_ic = b_cr; b_ic < d; b_ic++) {
          ia++;
          C_data[b_ic] += B_data[ib - 1] * A[ia];
        }

        ar += lda;
      }

      br += ldb;
      b_cr += ldc;
    }
  }
}

// Function for MATLAB Function: '<S60>/NLMPC'
void full_loopModelClass::full_loop_xgemm_gu5(int32_T m, int32_T n, int32_T k,
  const real_T A_data[], int32_T ia0, int32_T lda, const real_T B_data[],
  int32_T ldb, real_T C_data[], int32_T ldc)
{
  int32_T br;
  int32_T ar;
  int32_T b_cr;
  int32_T c;
  int32_T b_ic;
  int32_T w;
  int32_T b_c;
  if ((m != 0) && (n != 0)) {
    b_c = (n - 1) * ldc;
    br = 0;
    while (((ldc > 0) && (br <= b_c)) || ((ldc < 0) && (br >= b_c))) {
      b_cr = br + m;
      for (ar = br; ar < b_cr; ar++) {
        C_data[ar] = 0.0;
      }

      br += ldc;
    }

    br = -1;
    b_cr = 0;
    while (((ldc > 0) && (b_cr <= b_c)) || ((ldc < 0) && (b_cr >= b_c))) {
      ar = ia0;
      c = b_cr + m;
      for (b_ic = b_cr; b_ic < c; b_ic++) {
        full_loop_B.temp_d4 = 0.0;
        for (w = 1; w - 1 < k; w++) {
          full_loop_B.temp_d4 += A_data[(w + ar) - 2] * B_data[w + br];
        }

        C_data[b_ic] += full_loop_B.temp_d4;
        ar += lda;
      }

      br += ldb;
      b_cr += ldc;
    }
  }
}

// Function for MATLAB Function: '<S60>/NLMPC'
void full_loopModelClass::computeProjectedHessian_regular(real_T beta, const
  real_T H[4761], int32_T nVarOrig, s_a5SYZcWNC5KFUTosoMMbl_full__T *cholmanager,
  const s_3RW6EhlAOINzvAvYfuaanB_full_T *qrmanager,
  s_i4ZL8C3jdkCeOA2IrFHlEF_full_T *memspace)
{
  int32_T idx_row;
  full_loop_B.mNull_a = qrmanager->mrows - qrmanager->ncols;
  full_loop_B.ldw = memspace->workspace_double.size[0];
  full_loop_B.nullStart = qrmanager->ldq * qrmanager->ncols + 1;
  full_loop_xgemm_gu(nVarOrig, full_loop_B.mNull_a, nVarOrig, H, nVarOrig,
                     qrmanager->Q.data, full_loop_B.nullStart, qrmanager->ldq,
                     memspace->workspace_double.data,
                     memspace->workspace_double.size[0]);
  full_loop_B.b_idx_col_g = 0;
  while (full_loop_B.b_idx_col_g <= full_loop_B.mNull_a - 1) {
    for (idx_row = nVarOrig; idx_row < qrmanager->mrows; idx_row++) {
      memspace->workspace_double.data[idx_row + memspace->workspace_double.size
        [0] * full_loop_B.b_idx_col_g] = qrmanager->Q.data
        [(full_loop_B.b_idx_col_g + qrmanager->ncols) * qrmanager->Q.size[0] +
        idx_row] * beta;
    }

    full_loop_B.b_idx_col_g++;
  }

  full_loop_xgemm_gu5(full_loop_B.mNull_a, full_loop_B.mNull_a, qrmanager->mrows,
                      qrmanager->Q.data, full_loop_B.nullStart, qrmanager->ldq,
                      memspace->workspace_double.data, full_loop_B.ldw,
                      cholmanager->FMat.data, cholmanager->ldm);
}

// Function for MATLAB Function: '<S60>/NLMPC'
void full_loopModelClass::full_lo_computeProjectedHessian(const real_T H[4761],
  s_a5SYZcWNC5KFUTosoMMbl_full__T *cholmanager, const
  s_3RW6EhlAOINzvAvYfuaanB_full_T *qrmanager, s_i4ZL8C3jdkCeOA2IrFHlEF_full_T
  *memspace)
{
  int32_T mNull;
  int32_T ldw;
  int32_T nullStart;
  mNull = qrmanager->mrows - qrmanager->ncols;
  ldw = memspace->workspace_double.size[0];
  nullStart = qrmanager->ldq * qrmanager->ncols + 1;
  full_loop_xgemm_gu(qrmanager->mrows, mNull, qrmanager->mrows, H,
                     qrmanager->mrows, qrmanager->Q.data, nullStart,
                     qrmanager->ldq, memspace->workspace_double.data,
                     memspace->workspace_double.size[0]);
  full_loop_xgemm_gu5(mNull, mNull, qrmanager->mrows, qrmanager->Q.data,
                      nullStart, qrmanager->ldq, memspace->workspace_double.data,
                      ldw, cholmanager->FMat.data, cholmanager->ldm);
}

// Function for MATLAB Function: '<S60>/NLMPC'
int32_T full_loopModelClass::full_loop_xpotrf(int32_T n, real_T A_data[],
  int32_T lda)
{
  int32_T info;
  int32_T b_j;
  int32_T ix;
  int32_T iy;
  int32_T b;
  int32_T d;
  int32_T ia;
  int32_T b_ix;
  int32_T b_iy;
  boolean_T exitg1;
  info = 0;
  b_j = 0;
  exitg1 = false;
  while ((!exitg1) && (b_j <= n - 1)) {
    full_loop_B.idxA1j = b_j * lda;
    full_loop_B.idxAjj = full_loop_B.idxA1j + b_j;
    full_loop_B.ssq = 0.0;
    if (b_j >= 1) {
      b_ix = full_loop_B.idxA1j;
      b_iy = full_loop_B.idxA1j;
      for (iy = 0; iy < b_j; iy++) {
        full_loop_B.ssq += A_data[b_ix] * A_data[b_iy];
        b_ix++;
        b_iy++;
      }
    }

    full_loop_B.ssq = A_data[full_loop_B.idxAjj] - full_loop_B.ssq;
    if (full_loop_B.ssq > 0.0) {
      full_loop_B.ssq = std::sqrt(full_loop_B.ssq);
      A_data[full_loop_B.idxAjj] = full_loop_B.ssq;
      if (b_j + 1 < n) {
        b_ix = (n - b_j) - 2;
        b_iy = (full_loop_B.idxA1j + lda) + 1;
        full_loop_B.idxAjj += lda;
        if ((b_j != 0) && (b_ix + 1 != 0)) {
          iy = full_loop_B.idxAjj;
          b = lda * b_ix + b_iy;
          while (((lda > 0) && (b_iy <= b)) || ((lda < 0) && (b_iy >= b))) {
            ix = full_loop_B.idxA1j;
            full_loop_B.c_j5 = 0.0;
            d = (b_iy + b_j) - 1;
            for (ia = b_iy; ia <= d; ia++) {
              full_loop_B.c_j5 += A_data[ia - 1] * A_data[ix];
              ix++;
            }

            A_data[iy] += -full_loop_B.c_j5;
            iy += lda;
            b_iy += lda;
          }
        }

        full_loop_B.ssq = 1.0 / full_loop_B.ssq;
        full_loop_B.idxA1j = (lda * b_ix + full_loop_B.idxAjj) + 1;
        b_ix = full_loop_B.idxAjj + 1;
        while (((lda > 0) && (b_ix <= full_loop_B.idxA1j)) || ((lda < 0) &&
                (b_ix >= full_loop_B.idxA1j))) {
          A_data[b_ix - 1] *= full_loop_B.ssq;
          b_ix += lda;
        }
      }

      b_j++;
    } else {
      A_data[full_loop_B.idxAjj] = full_loop_B.ssq;
      info = b_j + 1;
      exitg1 = true;
    }
  }

  return info;
}

// Function for MATLAB Function: '<S60>/NLMPC'
void full_loopModelClass::full_loop_factor_a(s_a5SYZcWNC5KFUTosoMMbl_full__T
  *obj, int32_T ndims)
{
  int32_T c;
  int32_T loop_ub;
  int32_T b_size[2];
  obj->ndims = ndims;
  b_size[0] = obj->FMat.size[0];
  b_size[1] = obj->FMat.size[1];
  loop_ub = obj->FMat.size[0] * obj->FMat.size[1] - 1;
  if (0 <= loop_ub) {
    std::memcpy(&full_loop_B.b_data_k[0], &obj->FMat.data[0], (loop_ub + 1) *
                sizeof(real_T));
  }

  c = full_loop_xpotrf(ndims, full_loop_B.b_data_k, obj->ldm);
  obj->FMat.size[0] = b_size[0];
  obj->FMat.size[1] = b_size[1];
  loop_ub = b_size[0] * b_size[1] - 1;
  if (0 <= loop_ub) {
    std::memcpy(&obj->FMat.data[0], &full_loop_B.b_data_k[0], (loop_ub + 1) *
                sizeof(real_T));
  }

  obj->info = c;
}

// Function for MATLAB Function: '<S60>/NLMPC'
void full_loopModelClass::full_loop_xgemv_jhgj1v0ny(int32_T m, int32_T n, const
  real_T A_data[], int32_T ia0, int32_T lda, const real_T x_data[], real_T
  y_data[])
{
  int32_T ix;
  real_T c;
  int32_T b_iy;
  int32_T b;
  int32_T iac;
  int32_T d;
  int32_T ia;
  if (m != 0) {
    for (b_iy = 0; b_iy < n; b_iy++) {
      y_data[b_iy] = 0.0;
    }

    b_iy = 0;
    b = (n - 1) * lda + ia0;
    iac = ia0;
    while (((lda > 0) && (iac <= b)) || ((lda < 0) && (iac >= b))) {
      ix = 0;
      c = 0.0;
      d = (iac + m) - 1;
      for (ia = iac; ia <= d; ia++) {
        c += A_data[ia - 1] * x_data[ix];
        ix++;
      }

      y_data[b_iy] += -c;
      b_iy++;
      iac += lda;
    }
  }
}

// Function for MATLAB Function: '<S60>/NLMPC'
void full_loopModelClass::full_loop_solve_k(const
  s_a5SYZcWNC5KFUTosoMMbl_full__T *obj, real_T rhs_data[])
{
  real_T temp;
  int32_T b_j;
  int32_T b_i;
  int32_T c;
  for (b_j = 0; b_j < obj->ndims; b_j++) {
    c = b_j * obj->ldm;
    temp = rhs_data[b_j];
    for (b_i = 0; b_i < b_j; b_i++) {
      temp -= obj->FMat.data[c + b_i] * rhs_data[b_i];
    }

    rhs_data[b_j] = temp / obj->FMat.data[c + b_j];
  }

  full_loop_xtrsv(obj->ndims, obj->FMat.data, obj->ldm, rhs_data);
}

// Function for MATLAB Function: '<S60>/NLMPC'
void full_loopModelClass::full_loop_xgemv_jhgj1v0n(int32_T m, int32_T n, const
  real_T A_data[], int32_T ia0, int32_T lda, const real_T x_data[], real_T
  y_data[])
{
  int32_T iy;
  int32_T ix;
  int32_T b;
  int32_T iac;
  int32_T c;
  int32_T ia;
  if (m != 0) {
    for (ix = 0; ix < m; ix++) {
      y_data[ix] = 0.0;
    }

    ix = 0;
    b = (n - 1) * lda + ia0;
    iac = ia0;
    while (((lda > 0) && (iac <= b)) || ((lda < 0) && (iac >= b))) {
      iy = 0;
      c = (iac + m) - 1;
      for (ia = iac; ia <= c; ia++) {
        y_data[iy] += A_data[ia - 1] * x_data[ix];
        iy++;
      }

      ix++;
      iac += lda;
    }
  }
}

// Function for MATLAB Function: '<S60>/NLMPC'
void full_loopModelClass::full_loop_xcopy_gprnbz1re(int32_T n, const real_T x
  [4761], int32_T ix0, real_T y_data[], int32_T iy0)
{
  int32_T b_k;
  for (b_k = -1; b_k < n - 1; b_k++) {
    y_data[iy0 + b_k] = x[ix0 + b_k];
  }
}

// Function for MATLAB Function: '<S60>/NLMPC'
void full_loopModelClass::full_loop_factor(s_a5SYZcWNC5KFUTosoMMbl_full__T *obj,
  const real_T A[4761], int32_T ndims, int32_T ldA)
{
  obj->ndims = ndims;
  full_loop_B.b_idx_g = 0;
  while (full_loop_B.b_idx_g <= ndims - 1) {
    full_loop_xcopy_gprnbz1re(ndims, A, ldA * full_loop_B.b_idx_g + 1,
      obj->FMat.data, obj->ldm * full_loop_B.b_idx_g + 1);
    full_loop_B.b_idx_g++;
  }

  full_loop_B.b_size_c[0] = obj->FMat.size[0];
  full_loop_B.b_size_c[1] = obj->FMat.size[1];
  full_loop_B.b_idx_g = obj->FMat.size[0] * obj->FMat.size[1] - 1;
  if (0 <= full_loop_B.b_idx_g) {
    std::memcpy(&full_loop_B.b_data_c[0], &obj->FMat.data[0],
                (full_loop_B.b_idx_g + 1) * sizeof(real_T));
  }

  full_loop_B.c_d5 = full_loop_xpotrf(ndims, full_loop_B.b_data_c, obj->ldm);
  obj->FMat.size[0] = full_loop_B.b_size_c[0];
  obj->FMat.size[1] = full_loop_B.b_size_c[1];
  full_loop_B.b_idx_g = full_loop_B.b_size_c[0] * full_loop_B.b_size_c[1] - 1;
  if (0 <= full_loop_B.b_idx_g) {
    std::memcpy(&obj->FMat.data[0], &full_loop_B.b_data_c[0],
                (full_loop_B.b_idx_g + 1) * sizeof(real_T));
  }

  obj->info = full_loop_B.c_d5;
}

// Function for MATLAB Function: '<S60>/NLMPC'
void full_loopModelClass::full_loop_solve(const s_a5SYZcWNC5KFUTosoMMbl_full__T *
  obj, real_T rhs_data[])
{
  real_T temp;
  int32_T jjA;
  int32_T ix;
  int32_T c_j;
  int32_T c_i;
  int32_T exitg1;
  if (obj->ndims != 0) {
    jjA = 0;
    do {
      exitg1 = 0;
      c_j = obj->ndims - 1;
      if (jjA <= c_j) {
        c_j = jjA * obj->ldm;
        temp = rhs_data[jjA];
        for (c_i = 0; c_i < jjA; c_i++) {
          temp -= obj->FMat.data[c_j + c_i] * rhs_data[c_i];
        }

        rhs_data[jjA] = temp / obj->FMat.data[c_j + jjA];
        jjA++;
      } else {
        exitg1 = 1;
      }
    } while (exitg1 == 0);

    while (c_j + 1 > 0) {
      jjA = c_j * obj->ldm + c_j;
      rhs_data[c_j] /= obj->FMat.data[jjA];
      for (c_i = 1; c_i - 1 < c_j; c_i++) {
        ix = c_j - c_i;
        rhs_data[ix] -= obj->FMat.data[jjA - c_i] * rhs_data[c_j];
      }

      c_j--;
    }
  }
}

// Function for MATLAB Function: '<S60>/NLMPC'
void full_loopModelClass::full_loop_xscal_n(int32_T n, real_T a, real_T x_data[],
  int32_T ix0)
{
  int32_T b;
  int32_T k;
  b = (ix0 + n) - 1;
  for (k = ix0; k <= b; k++) {
    x_data[k - 1] *= a;
  }
}

// Function for MATLAB Function: '<S60>/NLMPC'
void full_loopModelClass::full_loop_compute_deltax(const real_T H[4761],
  s_ZxHOyfVSozxr6pSGbgUCkF_full_T *solution, s_i4ZL8C3jdkCeOA2IrFHlEF_full_T
  *memspace, const s_3RW6EhlAOINzvAvYfuaanB_full_T *qrmanager,
  s_a5SYZcWNC5KFUTosoMMbl_full__T *cholmanager, const
  s_BtE36YuCWnavoi0lGdvGZF_full_T *objective)
{
  full_loop_B.nVar_h = qrmanager->mrows - 1;
  full_loop_B.mNull = qrmanager->mrows - qrmanager->ncols;
  if (full_loop_B.mNull <= 0) {
    full_loop_B.mNull = 0;
    while (full_loop_B.mNull <= full_loop_B.nVar_h) {
      solution->searchDir.data[full_loop_B.mNull] = 0.0;
      full_loop_B.mNull++;
    }
  } else {
    full_loop_B.nullStartIdx = 0;
    while (full_loop_B.nullStartIdx <= full_loop_B.nVar_h) {
      solution->searchDir.data[full_loop_B.nullStartIdx] = -objective->
        grad.data[full_loop_B.nullStartIdx];
      full_loop_B.nullStartIdx++;
    }

    if (qrmanager->ncols <= 0) {
      switch (objective->objtype) {
       case 5:
        break;

       case 3:
        full_loop_factor(cholmanager, H, qrmanager->mrows, qrmanager->mrows);
        if (cholmanager->info != 0) {
          solution->state = -6;
        } else {
          full_loop_solve(cholmanager, solution->searchDir.data);
        }
        break;

       case 4:
        full_loop_factor(cholmanager, H, objective->nvar, objective->nvar);
        if (cholmanager->info != 0) {
          solution->state = -6;
        } else {
          full_loop_solve(cholmanager, solution->searchDir.data);
          full_loop_xscal_n(qrmanager->mrows - objective->nvar, 1.0 /
                            objective->beta, solution->searchDir.data,
                            objective->nvar + 1);
        }
        break;
      }
    } else {
      full_loop_B.nullStartIdx = qrmanager->ldq * qrmanager->ncols + 1;
      if (objective->objtype == 5) {
        full_loop_B.d_idx = 0;
        while (full_loop_B.d_idx <= full_loop_B.mNull - 1) {
          memspace->workspace_double.data[full_loop_B.d_idx] =
            -qrmanager->Q.data[(qrmanager->ncols + full_loop_B.d_idx) *
            qrmanager->Q.size[0] + full_loop_B.nVar_h];
          full_loop_B.d_idx++;
        }

        full_loop_xgemv_jhgj1v0n(qrmanager->mrows, full_loop_B.mNull,
          qrmanager->Q.data, full_loop_B.nullStartIdx, qrmanager->ldq,
          memspace->workspace_double.data, solution->searchDir.data);
      } else {
        if (objective->objtype == 3) {
          full_lo_computeProjectedHessian(H, cholmanager, qrmanager, memspace);
        } else {
          computeProjectedHessian_regular(objective->beta, H, objective->nvar,
            cholmanager, qrmanager, memspace);
        }

        full_loop_factor_a(cholmanager, full_loop_B.mNull);
        if (cholmanager->info != 0) {
          solution->state = -6;
        } else {
          full_loop_xgemv_jhgj1v0ny(qrmanager->mrows, full_loop_B.mNull,
            qrmanager->Q.data, full_loop_B.nullStartIdx, qrmanager->ldq,
            objective->grad.data, memspace->workspace_double.data);
          full_loop_B.c_size_l[0] = memspace->workspace_double.size[0];
          full_loop_B.c_size_l[1] = memspace->workspace_double.size[1];
          full_loop_B.nVar_h = memspace->workspace_double.size[0] *
            memspace->workspace_double.size[1] - 1;
          if (0 <= full_loop_B.nVar_h) {
            std::memcpy(&full_loop_B.c_data[0], &memspace->
                        workspace_double.data[0], (full_loop_B.nVar_h + 1) *
                        sizeof(real_T));
          }

          full_loop_solve_k(cholmanager, full_loop_B.c_data);
          memspace->workspace_double.size[0] = full_loop_B.c_size_l[0];
          memspace->workspace_double.size[1] = full_loop_B.c_size_l[1];
          full_loop_B.nVar_h = full_loop_B.c_size_l[0] * full_loop_B.c_size_l[1]
            - 1;
          if (0 <= full_loop_B.nVar_h) {
            std::memcpy(&memspace->workspace_double.data[0],
                        &full_loop_B.c_data[0], (full_loop_B.nVar_h + 1) *
                        sizeof(real_T));
          }

          full_loop_xgemv_jhgj1v0n(qrmanager->mrows, full_loop_B.mNull,
            qrmanager->Q.data, full_loop_B.nullStartIdx, qrmanager->ldq,
            full_loop_B.c_data, solution->searchDir.data);
        }
      }
    }
  }
}

// Function for MATLAB Function: '<S60>/NLMPC'
real_T full_loopModelClass::full_loop_xnrm2_n(int32_T n, const real_T x_data[])
{
  real_T y;
  real_T scale;
  real_T absxk;
  real_T t;
  int32_T k;
  y = 0.0;
  if (n >= 1) {
    if (n == 1) {
      y = std::abs(x_data[0]);
    } else {
      scale = 3.3121686421112381E-170;
      for (k = 0; k < n; k++) {
        absxk = std::abs(x_data[k]);
        if (absxk > scale) {
          t = scale / absxk;
          y = y * t * t + 1.0;
          scale = absxk;
        } else {
          t = absxk / scale;
          y += t * t;
        }
      }

      y = scale * std::sqrt(y);
    }
  }

  return y;
}

// Function for MATLAB Function: '<S60>/NLMPC'
void full_loopModelClass::full_loop_xgemv_jhgj1v0ny5(int32_T m, int32_T n, const
  real_T A_data[], int32_T lda, const real_T x_data[], real_T y_data[])
{
  int32_T ix;
  int32_T b_iy;
  int32_T iac;
  int32_T b;
  int32_T ia;
  int32_T b_c;
  if (n != 0) {
    for (b_iy = 0; b_iy < n; b_iy++) {
      y_data[b_iy] = -y_data[b_iy];
    }

    b_iy = 0;
    b_c = (n - 1) * lda + 1;
    iac = 1;
    while (((lda > 0) && (iac <= b_c)) || ((lda < 0) && (iac >= b_c))) {
      ix = 0;
      full_loop_B.c_o3 = 0.0;
      b = (iac + m) - 1;
      for (ia = iac; ia <= b; ia++) {
        full_loop_B.c_o3 += A_data[ia - 1] * x_data[ix];
        ix++;
      }

      y_data[b_iy] += full_loop_B.c_o3;
      b_iy++;
      iac += lda;
    }
  }
}

// Function for MATLAB Function: '<S60>/NLMPC'
void full_loopModelClass::full_loop_feasibleratiotest(const real_T
  solution_xstar_data[], const real_T solution_searchDir_data[], real_T
  workspace_data[], const int32_T workspace_size[2], int32_T workingset_nVar,
  int32_T workingset_ldA, const real_T workingset_Aineq_data[], const real_T
  workingset_bineq_data[], const real_T workingset_lb_data[], const real_T
  workingset_ub_data[], const int32_T workingset_indexLB_data[], const int32_T
  workingset_indexUB_data[], const int32_T workingset_sizes[5], const int32_T
  workingset_isActiveIdx[6], const boolean_T workingset_isActiveConstr_data[],
  const int32_T workingset_nWConstr[5], boolean_T isPhaseOne, real_T *alpha,
  boolean_T *newBlocking, int32_T *constrType, int32_T *constrIdx)
{
  int32_T b;
  int32_T ia;
  full_loop_B.totalIneq = workingset_sizes[2] - 1;
  *alpha = 1.0E+30;
  *newBlocking = false;
  *constrType = 0;
  *constrIdx = 0;
  full_loop_B.denomTol = 2.2204460492503131E-13 * full_loop_xnrm2_n
    (workingset_nVar, solution_searchDir_data);
  if (workingset_nWConstr[2] < workingset_sizes[2]) {
    full_loop_B.iyend = 0;
    while (full_loop_B.iyend <= full_loop_B.totalIneq) {
      workspace_data[full_loop_B.iyend] =
        workingset_bineq_data[full_loop_B.iyend];
      full_loop_B.iyend++;
    }

    full_loop_xgemv_jhgj1v0ny5(workingset_nVar, workingset_sizes[2],
      workingset_Aineq_data, workingset_ldA, solution_xstar_data, workspace_data);
    if (workingset_sizes[2] != 0) {
      full_loop_B.iyend = workspace_size[0] + workingset_sizes[2];
      full_loop_B.b_iy_c = workspace_size[0];
      while (full_loop_B.b_iy_c + 1 <= full_loop_B.iyend) {
        workspace_data[full_loop_B.b_iy_c] = 0.0;
        full_loop_B.b_iy_c++;
      }

      full_loop_B.iyend = workspace_size[0];
      full_loop_B.b_iy_c = (workingset_sizes[2] - 1) * workingset_ldA + 1;
      full_loop_B.iac_d = 1;
      while (((workingset_ldA > 0) && (full_loop_B.iac_d <= full_loop_B.b_iy_c))
             || ((workingset_ldA < 0) && (full_loop_B.iac_d >=
               full_loop_B.b_iy_c))) {
        full_loop_B.ix_ay = 0;
        full_loop_B.c_e = 0.0;
        b = (full_loop_B.iac_d + workingset_nVar) - 1;
        for (ia = full_loop_B.iac_d; ia <= b; ia++) {
          full_loop_B.c_e += workingset_Aineq_data[ia - 1] *
            solution_searchDir_data[full_loop_B.ix_ay];
          full_loop_B.ix_ay++;
        }

        workspace_data[full_loop_B.iyend] += full_loop_B.c_e;
        full_loop_B.iyend++;
        full_loop_B.iac_d += workingset_ldA;
      }
    }

    full_loop_B.iyend = 0;
    while (full_loop_B.iyend <= full_loop_B.totalIneq) {
      full_loop_B.b_iy_c = workspace_size[0] + full_loop_B.iyend;
      if ((workspace_data[full_loop_B.b_iy_c] > full_loop_B.denomTol) &&
          (!workingset_isActiveConstr_data[(workingset_isActiveIdx[2] +
            full_loop_B.iyend) - 1])) {
        full_loop_B.u0_i = std::abs(workspace_data[full_loop_B.iyend]);
        if ((!(full_loop_B.u0_i < 0.02 - workspace_data[full_loop_B.iyend])) &&
            (!rtIsNaN(0.02 - workspace_data[full_loop_B.iyend]))) {
          full_loop_B.u0_i = 0.02 - workspace_data[full_loop_B.iyend];
        }

        full_loop_B.ratio = full_loop_B.u0_i / workspace_data[full_loop_B.b_iy_c];
        if (full_loop_B.ratio < *alpha) {
          *alpha = full_loop_B.ratio;
          *constrType = 3;
          *constrIdx = full_loop_B.iyend + 1;
          *newBlocking = true;
        }
      }

      full_loop_B.iyend++;
    }
  }

  if (workingset_nWConstr[3] < workingset_sizes[3]) {
    full_loop_B.c_e = solution_xstar_data[workingset_nVar - 1] *
      static_cast<real_T>(isPhaseOne);
    full_loop_B.phaseOneCorrectionP = solution_searchDir_data[workingset_nVar -
      1] * static_cast<real_T>(isPhaseOne);
    full_loop_B.totalIneq = 0;
    while (full_loop_B.totalIneq <= workingset_sizes[3] - 2) {
      full_loop_B.pk_corrected =
        -solution_searchDir_data[workingset_indexLB_data[full_loop_B.totalIneq]
        - 1] - full_loop_B.phaseOneCorrectionP;
      if ((full_loop_B.pk_corrected > full_loop_B.denomTol) &&
          (!workingset_isActiveConstr_data[(workingset_isActiveIdx[3] +
            full_loop_B.totalIneq) - 1])) {
        full_loop_B.ratio =
          (-solution_xstar_data[workingset_indexLB_data[full_loop_B.totalIneq] -
           1] - workingset_lb_data[workingset_indexLB_data[full_loop_B.totalIneq]
           - 1]) - full_loop_B.c_e;
        full_loop_B.u0_i = std::abs(full_loop_B.ratio);
        if ((!(full_loop_B.u0_i < 0.02 - full_loop_B.ratio)) && (!rtIsNaN(0.02 -
              full_loop_B.ratio))) {
          full_loop_B.u0_i = 0.02 - full_loop_B.ratio;
        }

        full_loop_B.ratio = full_loop_B.u0_i / full_loop_B.pk_corrected;
        if (full_loop_B.ratio < *alpha) {
          *alpha = full_loop_B.ratio;
          *constrType = 4;
          *constrIdx = full_loop_B.totalIneq + 1;
          *newBlocking = true;
        }
      }

      full_loop_B.totalIneq++;
    }

    full_loop_B.b_iy_c = workingset_indexLB_data[workingset_sizes[3] - 1] - 1;
    if ((-solution_searchDir_data[full_loop_B.b_iy_c] > full_loop_B.denomTol) &&
        (!workingset_isActiveConstr_data[(workingset_isActiveIdx[3] +
          workingset_sizes[3]) - 2])) {
      full_loop_B.ratio = -solution_xstar_data[full_loop_B.b_iy_c] -
        workingset_lb_data[full_loop_B.b_iy_c];
      full_loop_B.u0_i = std::abs(full_loop_B.ratio);
      if ((!(full_loop_B.u0_i < 0.02 - full_loop_B.ratio)) && (!rtIsNaN(0.02 -
            full_loop_B.ratio))) {
        full_loop_B.u0_i = 0.02 - full_loop_B.ratio;
      }

      full_loop_B.ratio = full_loop_B.u0_i /
        -solution_searchDir_data[full_loop_B.b_iy_c];
      if (full_loop_B.ratio < *alpha) {
        *alpha = full_loop_B.ratio;
        *constrType = 4;
        *constrIdx = workingset_sizes[3];
        *newBlocking = true;
      }
    }
  }

  if (workingset_nWConstr[4] < workingset_sizes[4]) {
    full_loop_B.c_e = solution_xstar_data[workingset_nVar - 1] *
      static_cast<real_T>(isPhaseOne);
    full_loop_B.phaseOneCorrectionP = solution_searchDir_data[workingset_nVar -
      1] * static_cast<real_T>(isPhaseOne);
    full_loop_B.totalIneq = 0;
    while (full_loop_B.totalIneq <= workingset_sizes[4] - 1) {
      full_loop_B.pk_corrected =
        solution_searchDir_data[workingset_indexUB_data[full_loop_B.totalIneq] -
        1] - full_loop_B.phaseOneCorrectionP;
      if ((full_loop_B.pk_corrected > full_loop_B.denomTol) &&
          (!workingset_isActiveConstr_data[(workingset_isActiveIdx[4] +
            full_loop_B.totalIneq) - 1])) {
        full_loop_B.ratio =
          (solution_xstar_data[workingset_indexUB_data[full_loop_B.totalIneq] -
           1] - workingset_ub_data[workingset_indexUB_data[full_loop_B.totalIneq]
           - 1]) - full_loop_B.c_e;
        full_loop_B.u0_i = std::abs(full_loop_B.ratio);
        if ((!(full_loop_B.u0_i < 0.02 - full_loop_B.ratio)) && (!rtIsNaN(0.02 -
              full_loop_B.ratio))) {
          full_loop_B.u0_i = 0.02 - full_loop_B.ratio;
        }

        full_loop_B.ratio = full_loop_B.u0_i / full_loop_B.pk_corrected;
        if (full_loop_B.ratio < *alpha) {
          *alpha = full_loop_B.ratio;
          *constrType = 5;
          *constrIdx = full_loop_B.totalIneq + 1;
          *newBlocking = true;
        }
      }

      full_loop_B.totalIneq++;
    }
  }

  if (!isPhaseOne) {
    *newBlocking = (((!*newBlocking) || (!(*alpha > 1.0))) && (*newBlocking));
    if (!(*alpha < 1.0)) {
      *alpha = 1.0;
    }
  }
}

// Function for MATLAB Function: '<S60>/NLMPC'
void full_loopModelClass::full_l_checkUnboundedOrIllPosed
  (s_ZxHOyfVSozxr6pSGbgUCkF_full_T *solution, const
   s_BtE36YuCWnavoi0lGdvGZF_full_T *objective)
{
  if (objective->objtype == 5) {
    if (full_loop_xnrm2_n(objective->nvar, solution->searchDir.data) > 100.0 *
        static_cast<real_T>(objective->nvar) * 1.4901161193847656E-8) {
      solution->state = 3;
    } else {
      solution->state = 4;
    }
  }
}

// Function for MATLAB Function: '<S60>/NLMPC'
void full_loopModelClass::full_loop_addAineqConstr
  (s_Mspqy2ajbjhxqxIYYuZUwC_full_T *obj, int32_T idx_local)
{
  int32_T iAineq0;
  int32_T iAw0;
  int32_T k;
  obj->nWConstr[2]++;
  obj->isActiveConstr.data[(obj->isActiveIdx[2] + idx_local) - 2] = true;
  obj->nActiveConstr++;
  obj->Wid.data[obj->nActiveConstr - 1] = 3;
  obj->Wlocalidx.data[obj->nActiveConstr - 1] = idx_local;
  iAineq0 = (idx_local - 1) * obj->ldA;
  iAw0 = (obj->nActiveConstr - 1) * obj->ldA;
  for (k = 1; k - 1 < obj->nVar; k++) {
    obj->ATwset.data[(iAw0 + k) - 1] = obj->Aineq.data[(iAineq0 + k) - 1];
  }

  obj->bwset.data[obj->nActiveConstr - 1] = obj->bineq.data[idx_local - 1];
}

// Function for MATLAB Function: '<S60>/NLMPC'
void full_loopModelClass::full_loop_xaxpy_k(int32_T n, real_T a, const real_T
  x_data[], real_T y_data[])
{
  int32_T k;
  if ((n >= 1) && (!(a == 0.0))) {
    for (k = 0; k < n; k++) {
      y_data[k] += a * x_data[k];
    }
  }
}

// Function for MATLAB Function: '<S60>/NLMPC'
void full_loopModelClass::full_loop_compute_lambda(real_T workspace_data[],
  s_ZxHOyfVSozxr6pSGbgUCkF_full_T *solution, const
  s_BtE36YuCWnavoi0lGdvGZF_full_T *objective, const
  s_3RW6EhlAOINzvAvYfuaanB_full_T *qrmanager)
{
  real_T tol;
  boolean_T nonDegenerate;
  int32_T c_idx;
  int32_T entryg1;
  int32_T exitg2;
  boolean_T guard1 = false;
  if (qrmanager->ncols > 0) {
    tol = 100.0 * static_cast<real_T>(qrmanager->mrows) * 2.2204460492503131E-16;
    nonDegenerate = ((qrmanager->mrows > 0) && (qrmanager->ncols > 0));
    if (nonDegenerate) {
      c_idx = qrmanager->ncols;
      guard1 = false;
      if (qrmanager->mrows < qrmanager->ncols) {
        while ((c_idx > qrmanager->mrows) && (std::abs(qrmanager->QR.data
                 [((c_idx - 1) * qrmanager->QR.size[0] + qrmanager->mrows) - 1])
                >= tol)) {
          c_idx--;
        }

        nonDegenerate = (c_idx == qrmanager->mrows);
        if (!nonDegenerate) {
        } else {
          entryg1 = 1;
          guard1 = true;
        }
      } else {
        entryg1 = 0;
        guard1 = true;
      }

      if (guard1) {
        do {
          exitg2 = 0;
          if (entryg1 == 0) {
          } else {
            entryg1 = 0;
          }

          if (c_idx >= 1) {
            if (std::abs(qrmanager->QR.data[((c_idx - 1) * qrmanager->QR.size[0]
                  + c_idx) - 1]) >= tol) {
              c_idx--;
            } else {
              nonDegenerate = false;
              exitg2 = 1;
            }
          } else {
            nonDegenerate = (c_idx == 0);
            exitg2 = 1;
          }
        } while (exitg2 == 0);
      }
    }

    if (!nonDegenerate) {
      solution->state = -7;
    } else {
      full_loop_xgemv_j(qrmanager->mrows, qrmanager->ncols, qrmanager->Q.data,
                        qrmanager->ldq, objective->grad.data, workspace_data);
      full_loop_xtrsv(qrmanager->ncols, qrmanager->QR.data, qrmanager->ldq,
                      workspace_data);
      for (c_idx = 0; c_idx < qrmanager->ncols; c_idx++) {
        solution->lambda.data[c_idx] = -workspace_data[c_idx];
      }
    }
  }
}

// Function for MATLAB Function: '<S60>/NLMPC'
int32_T full_loopModelClass::full_loop_find_neg_lambda(const real_T
  solution_lambda_data[], int32_T workingset_nActiveConstr, const int32_T
  workingset_nWConstr[5])
{
  int32_T idxMinLambda;
  real_T minLambda;
  int32_T idx;
  idxMinLambda = 0;
  minLambda = 0.0;
  for (idx = workingset_nWConstr[0] + workingset_nWConstr[1]; idx <
       workingset_nActiveConstr; idx++) {
    if (solution_lambda_data[idx] < minLambda) {
      minLambda = solution_lambda_data[idx];
      idxMinLambda = idx + 1;
    }
  }

  return idxMinLambda;
}

// Function for MATLAB Function: '<S60>/NLMPC'
int32_T full_loopModelClass::full_loop_mod(int32_T x)
{
  return x - x / 50 * 50;
}

// Function for MATLAB Function: '<S60>/NLMPC'
void full_loopModelClass::full_checkStoppingAndUpdateFval(int32_T
  *activeSetChangeID, const real_T f_data[], s_ZxHOyfVSozxr6pSGbgUCkF_full_T
  *solution, s_i4ZL8C3jdkCeOA2IrFHlEF_full_T *memspace, const
  s_BtE36YuCWnavoi0lGdvGZF_full_T *objective, s_Mspqy2ajbjhxqxIYYuZUwC_full_T
  *workingset, s_3RW6EhlAOINzvAvYfuaanB_full_T *qrmanager, real_T
  options_ObjectiveLimit, int32_T runTimeOptions_MaxIterations, boolean_T
  updateFval)
{
  boolean_T nonDegenerateWset;
  solution->iterations++;
  if ((solution->iterations >= runTimeOptions_MaxIterations) &&
      ((solution->state != 1) || (objective->objtype == 5))) {
    solution->state = 0;
  }

  if (full_loop_mod(solution->iterations) == 0) {
    full_loop_B.b_b = full__maxConstraintViolation_ae(workingset,
      solution->xstar.data);
    solution->maxConstr = full_loop_B.b_b;
    if (full_loop_B.b_b > 0.02) {
      full_loop_B.i_size = solution->searchDir.size;
      full_loop_B.loop_ub_e2 = solution->searchDir.size;
      if (0 <= full_loop_B.loop_ub_e2 - 1) {
        std::memcpy(&full_loop_B.i_data[0], &solution->searchDir.data[0],
                    full_loop_B.loop_ub_e2 * sizeof(real_T));
      }

      full_loop_xcopy_gprn(objective->nvar, solution->xstar.data,
                           full_loop_B.i_data);
      solution->searchDir.size = full_loop_B.i_size;
      full_loop_B.loop_ub_e2 = full_loop_B.i_size;
      if (0 <= full_loop_B.loop_ub_e2 - 1) {
        std::memcpy(&solution->searchDir.data[0], &full_loop_B.i_data[0],
                    full_loop_B.loop_ub_e2 * sizeof(real_T));
      }

      full_loop_B.d_size_l = solution->searchDir.size;
      full_loop_B.loop_ub_e2 = solution->searchDir.size;
      if (0 <= full_loop_B.loop_ub_e2 - 1) {
        std::memcpy(&full_loop_B.d_data_g[0], &solution->searchDir.data[0],
                    full_loop_B.loop_ub_e2 * sizeof(real_T));
      }

      nonDegenerateWset = full_lo_feasibleX0ForWorkingSet
        (memspace->workspace_double.data, memspace->workspace_double.size,
         full_loop_B.d_data_g, &full_loop_B.d_size_l, workingset, qrmanager);
      solution->searchDir.size = full_loop_B.d_size_l;
      full_loop_B.loop_ub_e2 = full_loop_B.d_size_l;
      if (0 <= full_loop_B.loop_ub_e2 - 1) {
        std::memcpy(&solution->searchDir.data[0], &full_loop_B.d_data_g[0],
                    full_loop_B.loop_ub_e2 * sizeof(real_T));
      }

      if ((!nonDegenerateWset) && (solution->state != 0)) {
        solution->state = -2;
      }

      *activeSetChangeID = 0;
      full_loop_B.constrViolation_new = full__maxConstraintViolation_ae
        (workingset, full_loop_B.d_data_g);
      if (full_loop_B.constrViolation_new < full_loop_B.b_b) {
        full_loop_B.loop_ub_e2 = 0;
        while (full_loop_B.loop_ub_e2 <= objective->nvar - 1) {
          solution->xstar.data[full_loop_B.loop_ub_e2] =
            full_loop_B.d_data_g[full_loop_B.loop_ub_e2];
          full_loop_B.loop_ub_e2++;
        }

        solution->maxConstr = full_loop_B.constrViolation_new;
      }
    }
  }

  if ((options_ObjectiveLimit > (rtMinusInf)) && updateFval) {
    full_loop_B.b_b = full_loop_computeFval_ReuseHx(objective,
      memspace->workspace_double.data, f_data, solution->xstar.data);
    solution->fstar = full_loop_B.b_b;
    if ((full_loop_B.b_b < options_ObjectiveLimit) && ((solution->state != 0) ||
         (objective->objtype != 5))) {
      solution->state = 2;
    }
  }
}

// Function for MATLAB Function: '<S60>/NLMPC'
void full_loopModelClass::full_loop_iterate(const real_T H[4761], const real_T
  f_data[], s_ZxHOyfVSozxr6pSGbgUCkF_full_T *solution,
  s_i4ZL8C3jdkCeOA2IrFHlEF_full_T *memspace, s_Mspqy2ajbjhxqxIYYuZUwC_full_T
  *workingset, s_3RW6EhlAOINzvAvYfuaanB_full_T *qrmanager,
  s_a5SYZcWNC5KFUTosoMMbl_full__T *cholmanager, s_BtE36YuCWnavoi0lGdvGZF_full_T *
  objective, real_T options_StepTolerance, real_T options_ObjectiveLimit,
  int32_T runTimeOptions_MaxIterations)
{
  boolean_T subProblemChanged;
  boolean_T updateFval;
  int32_T exitg1;
  boolean_T guard1 = false;
  subProblemChanged = true;
  updateFval = true;
  full_loop_B.activeSetChangeID = 0;
  full_loop_B.TYPE = objective->objtype;
  full_loop_B.nVar_nk = workingset->nVar;
  full_loop_B.globalActiveConstrIdx = 0;
  full_loop_computeGrad_StoreHx(objective, H, f_data, solution->xstar.data);
  solution->fstar = full_loop_computeFval_ReuseHx(objective,
    memspace->workspace_double.data, f_data, solution->xstar.data);
  if (solution->iterations < runTimeOptions_MaxIterations) {
    solution->state = -5;
  } else {
    solution->state = 0;
  }

  full_loop_xcopy_gprnbz(workingset->mConstrMax, solution->lambda.data);
  do {
    exitg1 = 0;
    if (solution->state == -5) {
      guard1 = false;
      if (subProblemChanged) {
        switch (full_loop_B.activeSetChangeID) {
         case 1:
          full_loop_squareQ_appendCol(qrmanager, workingset->ATwset.data,
            workingset->ldA * (workingset->nActiveConstr - 1) + 1);
          break;

         case -1:
          full_loop_deleteColMoveEnd(qrmanager,
            full_loop_B.globalActiveConstrIdx);
          break;

         default:
          full_loop_factorQR_i(qrmanager, workingset->ATwset.data,
                               workingset->ATwset.size, full_loop_B.nVar_nk,
                               workingset->nActiveConstr);
          full_loop_computeQ_(qrmanager, qrmanager->mrows);
          break;
        }

        full_loop_compute_deltax(H, solution, memspace, qrmanager, cholmanager,
          objective);
        if (solution->state != -5) {
          exitg1 = 1;
        } else {
          full_loop_B.normDelta = full_loop_xnrm2_n(full_loop_B.nVar_nk,
            solution->searchDir.data);
          guard1 = true;
        }
      } else {
        full_loop_B.h_size_p = solution->searchDir.size;
        full_loop_B.idxMinLambda = solution->searchDir.size;
        if (0 <= full_loop_B.idxMinLambda - 1) {
          std::memcpy(&full_loop_B.h_data[0], &solution->searchDir.data[0],
                      full_loop_B.idxMinLambda * sizeof(real_T));
        }

        full_loop_xcopy_gprnbz(full_loop_B.nVar_nk, full_loop_B.h_data);
        solution->searchDir.size = full_loop_B.h_size_p;
        full_loop_B.idxMinLambda = full_loop_B.h_size_p;
        if (0 <= full_loop_B.idxMinLambda - 1) {
          std::memcpy(&solution->searchDir.data[0], &full_loop_B.h_data[0],
                      full_loop_B.idxMinLambda * sizeof(real_T));
        }

        full_loop_B.normDelta = 0.0;
        guard1 = true;
      }

      if (guard1) {
        if ((!subProblemChanged) || (full_loop_B.normDelta <
             options_StepTolerance) || (workingset->nActiveConstr >=
             full_loop_B.nVar_nk)) {
          full_loop_compute_lambda(memspace->workspace_double.data, solution,
            objective, qrmanager);
          if (solution->state != -7) {
            full_loop_B.idxMinLambda = full_loop_find_neg_lambda
              (solution->lambda.data, workingset->nActiveConstr,
               workingset->nWConstr);
            if (full_loop_B.idxMinLambda == 0) {
              solution->state = 1;
            } else {
              full_loop_B.activeSetChangeID = -1;
              full_loop_B.globalActiveConstrIdx = full_loop_B.idxMinLambda;
              subProblemChanged = true;
              full_loop_removeConstr(workingset, full_loop_B.idxMinLambda);
              solution->lambda.data[full_loop_B.idxMinLambda - 1] = 0.0;
            }
          } else {
            full_loop_B.idxMinLambda = workingset->nActiveConstr;
            full_loop_B.activeSetChangeID = 0;
            full_loop_B.globalActiveConstrIdx = workingset->nActiveConstr;
            subProblemChanged = true;
            full_loop_removeConstr(workingset, workingset->nActiveConstr);
            solution->lambda.data[full_loop_B.idxMinLambda - 1] = 0.0;
          }

          updateFval = false;
        } else {
          full_loop_feasibleratiotest(solution->xstar.data,
            solution->searchDir.data, memspace->workspace_double.data,
            memspace->workspace_double.size, workingset->nVar, workingset->ldA,
            workingset->Aineq.data, workingset->bineq.data, workingset->lb.data,
            workingset->ub.data, workingset->indexLB.data,
            workingset->indexUB.data, workingset->sizes, workingset->isActiveIdx,
            workingset->isActiveConstr.data, workingset->nWConstr,
            full_loop_B.TYPE == 5, &full_loop_B.normDelta, &updateFval,
            &full_loop_B.idxMinLambda, &full_loop_B.idx_local);
          if (updateFval) {
            switch (full_loop_B.idxMinLambda) {
             case 3:
              full_loop_addAineqConstr(workingset, full_loop_B.idx_local);
              break;

             case 4:
              full_addBoundToActiveSetMatrix_(workingset, 4,
                full_loop_B.idx_local);
              break;

             default:
              full_addBoundToActiveSetMatrix_(workingset, 5,
                full_loop_B.idx_local);
              break;
            }

            full_loop_B.activeSetChangeID = 1;
          } else {
            full_l_checkUnboundedOrIllPosed(solution, objective);
            subProblemChanged = false;
            if (workingset->nActiveConstr == 0) {
              solution->state = 1;
            }
          }

          full_loop_xaxpy_k(full_loop_B.nVar_nk, full_loop_B.normDelta,
                            solution->searchDir.data, solution->xstar.data);
          full_loop_computeGrad_StoreHx(objective, H, f_data,
            solution->xstar.data);
          updateFval = true;
        }

        full_checkStoppingAndUpdateFval(&full_loop_B.activeSetChangeID, f_data,
          solution, memspace, objective, workingset, qrmanager,
          options_ObjectiveLimit, runTimeOptions_MaxIterations, updateFval);
      }
    } else {
      if (!updateFval) {
        solution->fstar = full_loop_computeFval_ReuseHx(objective,
          memspace->workspace_double.data, f_data, solution->xstar.data);
      }

      exitg1 = 1;
    }
  } while (exitg1 == 0);
}

// Function for MATLAB Function: '<S60>/NLMPC'
void full_loopModelClass::full_loop_setPhaseOne(s_BtE36YuCWnavoi0lGdvGZF_full_T *
  obj, int32_T NumVars)
{
  obj->prev_objtype = obj->objtype;
  obj->prev_nvar = obj->nvar;
  obj->prev_hasLinear = obj->hasLinear;
  obj->objtype = 5;
  obj->nvar = NumVars;
  obj->gammaScalar = 1.0;
  obj->hasLinear = true;
}

// Function for MATLAB Function: '<S60>/NLMPC'
void full_loopModelClass::full_loop_linearForm_(boolean_T obj_hasLinear, int32_T
  obj_nvar, real_T workspace_data[], const real_T H[4761], const real_T f_data[],
  const real_T x_data[])
{
  int32_T fMultiplier;
  int32_T iy;
  real_T c;
  int32_T iac;
  int32_T b;
  int32_T b_c;
  int32_T b_tmp;
  fMultiplier = 0;
  if (obj_hasLinear) {
    for (fMultiplier = 0; fMultiplier < obj_nvar; fMultiplier++) {
      workspace_data[fMultiplier] = f_data[fMultiplier];
    }

    fMultiplier = 1;
  }

  if (obj_nvar != 0) {
    if (fMultiplier != 1) {
      for (fMultiplier = 0; fMultiplier < obj_nvar; fMultiplier++) {
        workspace_data[fMultiplier] = 0.0;
      }
    }

    fMultiplier = 0;
    b_c = (obj_nvar - 1) * obj_nvar + 1;
    iac = 1;
    while (((obj_nvar > 0) && (iac <= b_c)) || ((obj_nvar < 0) && (iac >= b_c)))
    {
      c = 0.5 * x_data[fMultiplier];
      iy = 0;
      b_tmp = iac + obj_nvar;
      b = b_tmp - 1;
      while (iac <= b) {
        workspace_data[iy] += H[iac - 1] * c;
        iy++;
        iac++;
      }

      fMultiplier++;
      iac = b_tmp;
    }
  }
}

// Function for MATLAB Function: '<S60>/NLMPC'
real_T full_loopModelClass::full_loop_computeFval(const
  s_BtE36YuCWnavoi0lGdvGZF_full_T *obj, real_T workspace_data[], const real_T H
  [4761], const real_T f_data[], const real_T x_data[])
{
  real_T val;
  int32_T b_k;
  int32_T tmp;
  int32_T exitg1;
  val = 0.0;
  switch (obj->objtype) {
   case 5:
    val = x_data[obj->nvar - 1] * obj->gammaScalar;
    break;

   case 3:
    full_loop_linearForm_(obj->hasLinear, obj->nvar, workspace_data, H, f_data,
                          x_data);
    if (obj->nvar >= 1) {
      for (b_k = 0; b_k < obj->nvar; b_k++) {
        val += x_data[b_k] * workspace_data[b_k];
      }
    }
    break;

   case 4:
    full_loop_linearForm_(obj->hasLinear, obj->nvar, workspace_data, H, f_data,
                          x_data);
    b_k = obj->nvar;
    do {
      exitg1 = 0;
      tmp = obj->maxVar - 1;
      if (b_k + 1 <= tmp) {
        workspace_data[b_k] = 0.5 * obj->beta * x_data[b_k] + obj->rho;
        b_k++;
      } else {
        exitg1 = 1;
      }
    } while (exitg1 == 0);

    if (tmp >= 1) {
      for (b_k = 0; b_k <= obj->maxVar - 2; b_k++) {
        val += x_data[b_k] * workspace_data[b_k];
      }
    }
    break;
  }

  return val;
}

// Function for MATLAB Function: '<S60>/NLMPC'
void full_loopModelClass::full_loop_restoreFromPhaseOne
  (s_BtE36YuCWnavoi0lGdvGZF_full_T *obj)
{
  obj->objtype = obj->prev_objtype;
  obj->nvar = obj->prev_nvar;
  obj->hasLinear = obj->prev_hasLinear;
}

// Function for MATLAB Function: '<S60>/NLMPC'
void full_loopModelClass::full_loop_phaseone(const real_T H[4761], const real_T
  f_data[], s_ZxHOyfVSozxr6pSGbgUCkF_full_T *solution,
  s_i4ZL8C3jdkCeOA2IrFHlEF_full_T *memspace, s_Mspqy2ajbjhxqxIYYuZUwC_full_T
  *workingset, s_3RW6EhlAOINzvAvYfuaanB_full_T *qrmanager,
  s_a5SYZcWNC5KFUTosoMMbl_full__T *cholmanager, s_BtE36YuCWnavoi0lGdvGZF_full_T *
  objective, s1TgE9KstXgkd2qJxO1bF4F_full__T *options, const
  s1TgE9KstXgkd2qJxO1bF4F_full__T *runTimeOptions)
{
  boolean_T exitg1;
  full_loop_B.PROBTYPE_ORIG = workingset->probType;
  full_loop_B.nVar_k = workingset->nVar;
  full_loop_B.nVarP1 = workingset->nVar;
  solution->xstar.data[workingset->nVar] = solution->maxConstr + 1.0;
  if (workingset->probType == 3) {
    full_loop_B.PHASEONE = 1;
  } else {
    full_loop_B.PHASEONE = 4;
  }

  full_loop_removeAllIneqConstr(workingset);
  full_loop_setProblemType(workingset, full_loop_B.PHASEONE);
  full_loop_setPhaseOne(objective, full_loop_B.nVarP1 + 1);
  options->ObjectiveLimit = 0.02;
  options->StepTolerance = 1.4901161193847657E-10;
  solution->fstar = full_loop_computeFval(objective,
    memspace->workspace_double.data, H, f_data, solution->xstar.data);
  solution->state = 5;
  full_loop_iterate(H, f_data, solution, memspace, workingset, qrmanager,
                    cholmanager, objective, options->StepTolerance,
                    options->ObjectiveLimit, runTimeOptions->MaxIterations);
  if (workingset->isActiveConstr.data[(workingset->isActiveIdx[3] +
       workingset->sizes[3]) - 2]) {
    full_loop_B.PHASEONE = workingset->sizes[0] + 53;
    exitg1 = false;
    while ((!exitg1) && (full_loop_B.PHASEONE <= workingset->nActiveConstr)) {
      if ((workingset->Wid.data[full_loop_B.PHASEONE - 1] == 4) &&
          (workingset->Wlocalidx.data[full_loop_B.PHASEONE - 1] ==
           workingset->sizes[3])) {
        full_loop_removeConstr(workingset, full_loop_B.PHASEONE);
        exitg1 = true;
      } else {
        full_loop_B.PHASEONE++;
      }
    }
  }

  full_loop_B.PHASEONE = workingset->nActiveConstr;
  full_loop_B.mEqFixed = workingset->sizes[0] + 52;
  while ((full_loop_B.PHASEONE > full_loop_B.mEqFixed) && (full_loop_B.PHASEONE >
          full_loop_B.nVar_k)) {
    full_loop_removeConstr(workingset, full_loop_B.PHASEONE);
    full_loop_B.PHASEONE--;
  }

  solution->maxConstr = solution->xstar.data[full_loop_B.nVarP1];
  full_loop_setProblemType(workingset, full_loop_B.PROBTYPE_ORIG);
  full_loop_restoreFromPhaseOne(objective);
  options->ObjectiveLimit = -1.0E+20;
  options->StepTolerance = 1.0E-6;
}

// Function for MATLAB Function: '<S60>/NLMPC'
void full_loopModelClass::full_loop_driver_e(const real_T H[4761], const real_T
  f_data[], s_ZxHOyfVSozxr6pSGbgUCkF_full_T *solution,
  s_i4ZL8C3jdkCeOA2IrFHlEF_full_T *memspace, s_Mspqy2ajbjhxqxIYYuZUwC_full_T
  *workingset, s_3RW6EhlAOINzvAvYfuaanB_full_T *qrmanager,
  s_a5SYZcWNC5KFUTosoMMbl_full__T *cholmanager, s_BtE36YuCWnavoi0lGdvGZF_full_T *
  objective, s1TgE9KstXgkd2qJxO1bF4F_full__T *options,
  s1TgE9KstXgkd2qJxO1bF4F_full__T *runTimeOptions)
{
  solution->iterations = 0;
  runTimeOptions->RemainFeasible = true;
  full_loop_B.nVar_n = workingset->nVar;
  full_loop_snap_bounds(solution, workingset->lb.data, workingset->ub.data,
                        workingset->indexLB.data, workingset->indexUB.data,
                        workingset->indexFixed.data, workingset->sizes,
                        workingset->isActiveIdx, workingset->isActiveConstr.data);
  full_loop_PresolveWorkingSet(solution, memspace, workingset, qrmanager);
  if (solution->state >= 0) {
    solution->iterations = 0;
    full_loop_B.b_df = full__maxConstraintViolation_ae(workingset,
      solution->xstar.data);
    solution->maxConstr = full_loop_B.b_df;
    if (full_loop_B.b_df > 0.02) {
      full_loop_phaseone(H, f_data, solution, memspace, workingset, qrmanager,
                         cholmanager, objective, options, runTimeOptions);
      if (solution->state != 0) {
        full_loop_B.b_df = full__maxConstraintViolation_ae(workingset,
          solution->xstar.data);
        solution->maxConstr = full_loop_B.b_df;
        if (full_loop_B.b_df > 0.02) {
          full_loop_xcopy_gprnbz(workingset->mConstrMax, solution->lambda.data);
          solution->fstar = full_loop_computeFval(objective,
            memspace->workspace_double.data, H, f_data, solution->xstar.data);
          solution->state = -2;
        } else {
          if (full_loop_B.b_df > 0.0) {
            full_loop_B.g_size_h = solution->searchDir.size;
            full_loop_B.loop_ub_k = solution->searchDir.size;
            if (0 <= full_loop_B.loop_ub_k - 1) {
              std::memcpy(&full_loop_B.g_data[0], &solution->searchDir.data[0],
                          full_loop_B.loop_ub_k * sizeof(real_T));
            }

            full_loop_xcopy_gprn(full_loop_B.nVar_n, solution->xstar.data,
                                 full_loop_B.g_data);
            solution->searchDir.size = full_loop_B.g_size_h;
            full_loop_B.loop_ub_k = full_loop_B.g_size_h;
            if (0 <= full_loop_B.loop_ub_k - 1) {
              std::memcpy(&solution->searchDir.data[0], &full_loop_B.g_data[0],
                          full_loop_B.loop_ub_k * sizeof(real_T));
            }

            full_loop_B.b_solution = *solution;
            full_loop_PresolveWorkingSet(&full_loop_B.b_solution, memspace,
              workingset, qrmanager);
            *solution = full_loop_B.b_solution;
            full_loop_B.b_df = full__maxConstraintViolation_ae(workingset,
              full_loop_B.b_solution.xstar.data);
            if (full_loop_B.b_df >= full_loop_B.b_solution.maxConstr) {
              solution->maxConstr = full_loop_B.b_df;
              full_loop_B.g_size_h = full_loop_B.b_solution.xstar.size;
              full_loop_B.loop_ub_k = full_loop_B.b_solution.xstar.size;
              if (0 <= full_loop_B.loop_ub_k - 1) {
                std::memcpy(&full_loop_B.g_data[0],
                            &full_loop_B.b_solution.xstar.data[0],
                            full_loop_B.loop_ub_k * sizeof(real_T));
              }

              full_loop_xcopy_gprn(full_loop_B.nVar_n,
                                   full_loop_B.b_solution.searchDir.data,
                                   full_loop_B.g_data);
              solution->xstar.size = full_loop_B.g_size_h;
              full_loop_B.loop_ub_k = full_loop_B.g_size_h;
              if (0 <= full_loop_B.loop_ub_k - 1) {
                std::memcpy(&solution->xstar.data[0], &full_loop_B.g_data[0],
                            full_loop_B.loop_ub_k * sizeof(real_T));
              }
            }
          }

          full_loop_iterate(H, f_data, solution, memspace, workingset, qrmanager,
                            cholmanager, objective, options->StepTolerance,
                            options->ObjectiveLimit,
                            runTimeOptions->MaxIterations);
        }
      }
    } else {
      full_loop_iterate(H, f_data, solution, memspace, workingset, qrmanager,
                        cholmanager, objective, options->StepTolerance,
                        options->ObjectiveLimit, runTimeOptions->MaxIterations);
    }
  }
}

// Function for MATLAB Function: '<S60>/NLMPC'
void full_loopModelClass::full_loop_restoreWorkingSet(boolean_T stepSuccess,
  int32_T nWIneq_old, int32_T nWLower_old, int32_T nWUpper_old,
  s_Mspqy2ajbjhxqxIYYuZUwC_full_T *WorkingSet, const real_T
  TrialState_cIneq_data[], const real_T TrialState_cEq[52], const int32_T
  workspace_int_data[])
{
  int32_T mIneq;
  int32_T mLB;
  int32_T b_idx;
  mIneq = WorkingSet->sizes[2];
  mLB = WorkingSet->sizes[3];
  for (b_idx = 0; b_idx < 52; b_idx++) {
    WorkingSet->beq[b_idx] = -TrialState_cEq[b_idx];
  }

  for (b_idx = 0; b_idx < 52; b_idx++) {
    WorkingSet->bwset.data[WorkingSet->sizes[0] + b_idx] = WorkingSet->beq[b_idx];
  }

  if (WorkingSet->sizes[2] > 0) {
    for (b_idx = 0; b_idx < mIneq; b_idx++) {
      WorkingSet->bineq.data[b_idx] = -TrialState_cIneq_data[b_idx];
    }

    if (!stepSuccess) {
      full_loop_removeAllIneqConstr(WorkingSet);
      for (b_idx = 0; b_idx < nWIneq_old; b_idx++) {
        full_loop_addAineqConstr(WorkingSet, workspace_int_data[b_idx]);
      }

      for (b_idx = 0; b_idx < nWLower_old; b_idx++) {
        full_addBoundToActiveSetMatrix_(WorkingSet, 4, workspace_int_data[b_idx
          + mIneq]);
      }

      for (b_idx = 0; b_idx < nWUpper_old; b_idx++) {
        full_addBoundToActiveSetMatrix_(WorkingSet, 5, workspace_int_data[(b_idx
          + mIneq) + mLB]);
      }
    }
  }
}

// Function for MATLAB Function: '<S60>/NLMPC'
void full_loopModelClass::full_loop_addAeqConstr(s_Mspqy2ajbjhxqxIYYuZUwC_full_T
  *obj, int32_T idx_local)
{
  int32_T totalEq;
  int32_T iAeq0;
  int32_T iAw0;
  int32_T b_idx;
  totalEq = obj->nWConstr[0] + obj->nWConstr[1];
  if ((obj->nActiveConstr == totalEq) && (idx_local > obj->nWConstr[1])) {
    obj->nWConstr[1]++;
    obj->isActiveConstr.data[(obj->isActiveIdx[1] + idx_local) - 2] = true;
    obj->nActiveConstr++;
    obj->Wid.data[obj->nActiveConstr - 1] = 2;
    obj->Wlocalidx.data[obj->nActiveConstr - 1] = idx_local;
    iAeq0 = (idx_local - 1) * obj->ldA;
    iAw0 = (obj->nActiveConstr - 1) * obj->ldA;
    for (totalEq = 1; totalEq - 1 < obj->nVar; totalEq++) {
      obj->ATwset.data[(iAw0 + totalEq) - 1] = obj->Aeq.data[(iAeq0 + totalEq) -
        1];
    }

    obj->bwset.data[obj->nActiveConstr - 1] = obj->beq[idx_local - 1];
  } else {
    obj->nActiveConstr++;
    iAeq0 = obj->nActiveConstr - 1;
    obj->Wid.data[iAeq0] = obj->Wid.data[totalEq];
    obj->Wlocalidx.data[iAeq0] = obj->Wlocalidx.data[totalEq];
    for (iAw0 = 0; iAw0 < obj->nVar; iAw0++) {
      obj->ATwset.data[iAw0 + obj->ATwset.size[0] * iAeq0] = obj->
        ATwset.data[obj->ATwset.size[0] * totalEq + iAw0];
    }

    obj->bwset.data[iAeq0] = obj->bwset.data[totalEq];
    obj->nWConstr[1]++;
    obj->isActiveConstr.data[(obj->isActiveIdx[1] + idx_local) - 2] = true;
    obj->Wid.data[totalEq] = 2;
    obj->Wlocalidx.data[totalEq] = idx_local;
    iAeq0 = (idx_local - 1) * obj->ldA;
    iAw0 = obj->ldA * totalEq;
    for (b_idx = 1; b_idx - 1 < obj->nVar; b_idx++) {
      obj->ATwset.data[(iAw0 + b_idx) - 1] = obj->Aeq.data[(iAeq0 + b_idx) - 1];
    }

    obj->bwset.data[totalEq] = obj->beq[idx_local - 1];
  }
}

// Function for MATLAB Function: '<S60>/NLMPC'
boolean_T full_loopModelClass::full_loop_soc(const real_T Hessian[4761], const
  real_T grad_data[], s_ZxHOyfVSozxr6pSGbgUCkF_full_T *TrialState,
  s_i4ZL8C3jdkCeOA2IrFHlEF_full_T *memspace, s_Mspqy2ajbjhxqxIYYuZUwC_full_T
  *WorkingSet, s_3RW6EhlAOINzvAvYfuaanB_full_T *QRManager,
  s_a5SYZcWNC5KFUTosoMMbl_full__T *CholManager, s_BtE36YuCWnavoi0lGdvGZF_full_T *
  QPObjective, const s1TgE9KstXgkd2qJxO1bF4F_full__T *qpoptions)
{
  boolean_T success;
  full_loop_B.nWIneq_old = WorkingSet->nWConstr[2];
  full_loop_B.nWLower_old = WorkingSet->nWConstr[3];
  full_loop_B.nWUpper_old = WorkingSet->nWConstr[4];
  full_loop_B.nVar_p = WorkingSet->nVar;
  full_loop_B.mConstrMax_k = WorkingSet->mConstrMax;
  full_loop_xcopy_gprnbz1rec(WorkingSet->nVar, TrialState->xstarsqp_old,
    TrialState->xstarsqp);
  full_loop_B.b_i_p3 = 0;
  while (full_loop_B.b_i_p3 <= full_loop_B.nVar_p - 1) {
    TrialState->socDirection.data[full_loop_B.b_i_p3] = TrialState->
      xstar.data[full_loop_B.b_i_p3];
    full_loop_B.b_i_p3++;
  }

  full_loop_xcopy_gprn(WorkingSet->mConstrMax, TrialState->lambda.data,
                       TrialState->lambda_old.data);
  full_loop_B.b_WorkingSet = *WorkingSet;
  full_loop_updateWorkingSet(&full_loop_B.b_WorkingSet, TrialState->cIneq.data,
    TrialState->cEq, TrialState->searchDir.data, TrialState->workingset_old.data);
  full_loop_xcopy_g(WorkingSet->nVar, TrialState->xstarsqp,
                    TrialState->xstar.data);
  full_loop_B.qpoptions_o = *qpoptions;
  full_loop_B.qpoptions_b = *qpoptions;
  full_loop_driver_e(Hessian, grad_data, TrialState, memspace,
                     &full_loop_B.b_WorkingSet, QRManager, CholManager,
                     QPObjective, &full_loop_B.qpoptions_o,
                     &full_loop_B.qpoptions_b);
  *WorkingSet = full_loop_B.b_WorkingSet;
  while ((WorkingSet->mEqRemoved > 0) && (WorkingSet->indexEqRemoved
          [WorkingSet->mEqRemoved - 1] >= 1)) {
    full_loop_addAeqConstr(WorkingSet, WorkingSet->indexEqRemoved
      [WorkingSet->mEqRemoved - 1]);
    WorkingSet->mEqRemoved--;
  }

  full_loop_B.b_i_p3 = 0;
  while (full_loop_B.b_i_p3 <= full_loop_B.nVar_p - 1) {
    full_loop_B.oldDirIdx = TrialState->socDirection.data[full_loop_B.b_i_p3];
    TrialState->socDirection.data[full_loop_B.b_i_p3] = TrialState->
      xstar.data[full_loop_B.b_i_p3] - TrialState->
      socDirection.data[full_loop_B.b_i_p3];
    TrialState->xstar.data[full_loop_B.b_i_p3] = full_loop_B.oldDirIdx;
    full_loop_B.b_i_p3++;
  }

  success = (full_loop_xnrm2_n(full_loop_B.nVar_p, TrialState->socDirection.data)
             <= 2.0 * full_loop_xnrm2_n(full_loop_B.nVar_p,
              TrialState->xstar.data));
  full_loop_restoreWorkingSet(success, full_loop_B.nWIneq_old,
    full_loop_B.nWLower_old, full_loop_B.nWUpper_old, WorkingSet,
    TrialState->cIneq.data, TrialState->cEq, TrialState->workingset_old.data);
  if (!success) {
    full_loop_xcopy_gprn(full_loop_B.mConstrMax_k, TrialState->lambda_old.data,
                         TrialState->lambda.data);
  } else {
    full_loop_sortLambdaQP(TrialState->lambda.data, WorkingSet->nActiveConstr,
      WorkingSet->sizes, WorkingSet->isActiveIdx, WorkingSet->Wid.data,
      WorkingSet->Wlocalidx.data, memspace->workspace_double.data);
  }

  return success;
}

// Function for MATLAB Function: '<S60>/NLMPC'
void full_loopModelClass::full_loop_updatePenaltyParam
  (s6ICcRyulWOFjNCN0ll7VsE_full__T *obj, real_T fval, const real_T
   ineq_workspace_data[], int32_T mIneq, const real_T eq_workspace[52], int32_T
   sqpiter, real_T qpval)
{
  real_T penaltyParamTrial;
  real_T constrViolationEq;
  real_T constrViolationIneq;
  int32_T k;
  penaltyParamTrial = obj->penaltyParam;
  constrViolationEq = 0.0;
  for (k = 0; k < 52; k++) {
    constrViolationEq += std::abs(eq_workspace[k]);
  }

  constrViolationIneq = 0.0;
  for (k = 0; k < mIneq; k++) {
    if (ineq_workspace_data[k] > 0.0) {
      constrViolationIneq += ineq_workspace_data[k];
    }
  }

  constrViolationEq += constrViolationIneq;
  constrViolationIneq = obj->linearizedConstrViol;
  obj->linearizedConstrViol = 0.0;
  constrViolationIneq += constrViolationEq;
  if ((constrViolationIneq > 2.2204460492503131E-16) && (qpval > 0.0)) {
    if (fval == 0.0) {
      penaltyParamTrial = 1.0;
    } else {
      penaltyParamTrial = 1.5;
    }

    penaltyParamTrial = penaltyParamTrial * qpval / constrViolationIneq;
  }

  if (penaltyParamTrial < obj->penaltyParam) {
    obj->phi = penaltyParamTrial * constrViolationEq + fval;
    if (((obj->initConstrViolationEq + obj->initConstrViolationIneq) *
         penaltyParamTrial + obj->initFval) - obj->phi > static_cast<real_T>
        (obj->nPenaltyDecreases) * obj->threshold) {
      obj->nPenaltyDecreases++;
      if ((obj->nPenaltyDecreases << 1) > sqpiter) {
        obj->threshold *= 10.0;
      }

      if (penaltyParamTrial > 1.0E-10) {
        obj->penaltyParam = penaltyParamTrial;
      } else {
        obj->penaltyParam = 1.0E-10;
      }
    } else {
      obj->phi = obj->penaltyParam * constrViolationEq + fval;
    }
  } else {
    if (!(penaltyParamTrial > 1.0E-10)) {
      penaltyParamTrial = 1.0E-10;
    }

    obj->penaltyParam = penaltyParamTrial;
    obj->phi = penaltyParamTrial * constrViolationEq + fval;
  }

  penaltyParamTrial = qpval - obj->penaltyParam * constrViolationEq;
  if (penaltyParamTrial < 0.0) {
    obj->phiPrimePlus = penaltyParamTrial;
  } else {
    obj->phiPrimePlus = 0.0;
  }
}

// Function for MATLAB Function: '<S60>/NLMPC'
void full_loopModelClass::full_loop_normal(const real_T Hessian[4761], const
  real_T grad_data[], s_ZxHOyfVSozxr6pSGbgUCkF_full_T *TrialState,
  s6ICcRyulWOFjNCN0ll7VsE_full__T *MeritFunction,
  s_i4ZL8C3jdkCeOA2IrFHlEF_full_T *memspace, s_Mspqy2ajbjhxqxIYYuZUwC_full_T
  *WorkingSet, s_3RW6EhlAOINzvAvYfuaanB_full_T *QRManager,
  s_a5SYZcWNC5KFUTosoMMbl_full__T *CholManager, s_BtE36YuCWnavoi0lGdvGZF_full_T *
  QPObjective, const s1TgE9KstXgkd2qJxO1bF4F_full__T *qpoptions)
{
  boolean_T nonlinEqRemoved;
  full_loop_B.qpoptions_a = *qpoptions;
  full_loop_B.qpoptions_aq = *qpoptions;
  full_loop_driver_e(Hessian, grad_data, TrialState, memspace, WorkingSet,
                     QRManager, CholManager, QPObjective,
                     &full_loop_B.qpoptions_a, &full_loop_B.qpoptions_aq);
  if (TrialState->state > 0) {
    full_loop_updatePenaltyParam(MeritFunction, TrialState->sqpFval,
      TrialState->cIneq.data, WorkingSet->sizes[2], TrialState->cEq,
      TrialState->sqpIterations, TrialState->fstar);
  }

  full_loop_sortLambdaQP(TrialState->lambda.data, WorkingSet->nActiveConstr,
    WorkingSet->sizes, WorkingSet->isActiveIdx, WorkingSet->Wid.data,
    WorkingSet->Wlocalidx.data, memspace->workspace_double.data);
  nonlinEqRemoved = (WorkingSet->mEqRemoved > 0);
  while ((WorkingSet->mEqRemoved > 0) && (WorkingSet->indexEqRemoved
          [WorkingSet->mEqRemoved - 1] >= 1)) {
    full_loop_addAeqConstr(WorkingSet, WorkingSet->indexEqRemoved
      [WorkingSet->mEqRemoved - 1]);
    WorkingSet->mEqRemoved--;
  }

  if (nonlinEqRemoved) {
    for (full_loop_B.idx_o = 0; full_loop_B.idx_o < 52; full_loop_B.idx_o++) {
      WorkingSet->Wlocalidx.data[WorkingSet->sizes[0] + full_loop_B.idx_o] =
        full_loop_B.idx_o + 1;
    }
  }
}

// Function for MATLAB Function: '<S60>/NLMPC'
void full_loopModelClass::full_loop_setRegularized
  (s_BtE36YuCWnavoi0lGdvGZF_full_T *obj, int32_T numQuadVars, real_T beta,
   real_T rho)
{
  obj->hasLinear = true;
  obj->nvar = numQuadVars;
  obj->objtype = 4;
  obj->beta = beta;
  obj->rho = rho;
}

// Function for MATLAB Function: '<S60>/NLMPC'
void full_loopModelClass::full_lo_assignResidualsToXSlack(int32_T nVarOrig,
  s_Mspqy2ajbjhxqxIYYuZUwC_full_T *WorkingSet, s_ZxHOyfVSozxr6pSGbgUCkF_full_T
  *TrialState, s_i4ZL8C3jdkCeOA2IrFHlEF_full_T *memspace)
{
  int32_T b;
  int32_T ia;
  full_loop_B.mIneq_m = WorkingSet->sizes[2] - 1;
  full_loop_B.mLBOrig = (WorkingSet->sizes[3] - WorkingSet->sizes[2]) - 103;
  full_loop_B.b_k_oh = 0;
  while (full_loop_B.b_k_oh <= full_loop_B.mIneq_m) {
    memspace->workspace_double.data[full_loop_B.b_k_oh] = WorkingSet->
      bineq.data[full_loop_B.b_k_oh];
    full_loop_B.b_k_oh++;
  }

  full_loop_xgemv_jhgj1v0ny5(nVarOrig, WorkingSet->sizes[2],
    WorkingSet->Aineq.data, WorkingSet->ldA, TrialState->xstar.data,
    memspace->workspace_double.data);
  full_loop_B.b_k_oh = 0;
  while (full_loop_B.b_k_oh <= full_loop_B.mIneq_m) {
    TrialState->xstar.data[nVarOrig + full_loop_B.b_k_oh] = static_cast<real_T>
      (memspace->workspace_double.data[full_loop_B.b_k_oh] > 0.0) *
      memspace->workspace_double.data[full_loop_B.b_k_oh];
    if (memspace->workspace_double.data[full_loop_B.b_k_oh] <= 0.02) {
      full_addBoundToActiveSetMatrix_(WorkingSet, 4, full_loop_B.mLBOrig +
        full_loop_B.b_k_oh);
    }

    full_loop_B.b_k_oh++;
  }

  full_loop_B.b_k_oh = WorkingSet->ldA;
  for (full_loop_B.idx_positive = 0; full_loop_B.idx_positive < 52;
       full_loop_B.idx_positive++) {
    memspace->workspace_double.data[full_loop_B.idx_positive] = WorkingSet->
      beq[full_loop_B.idx_positive];
    memspace->workspace_double.data[full_loop_B.idx_positive] =
      -memspace->workspace_double.data[full_loop_B.idx_positive];
  }

  full_loop_B.idx_positive = 0;
  full_loop_B.idx_negative = WorkingSet->ldA * 51 + 1;
  full_loop_B.iac_a = 1;
  while (((full_loop_B.b_k_oh > 0) && (full_loop_B.iac_a <=
           full_loop_B.idx_negative)) || ((full_loop_B.b_k_oh < 0) &&
          (full_loop_B.iac_a >= full_loop_B.idx_negative))) {
    full_loop_B.ix_k = 0;
    full_loop_B.c_dx = 0.0;
    b = (full_loop_B.iac_a + nVarOrig) - 1;
    for (ia = full_loop_B.iac_a; ia <= b; ia++) {
      full_loop_B.c_dx += WorkingSet->Aeq.data[ia - 1] * TrialState->
        xstar.data[full_loop_B.ix_k];
      full_loop_B.ix_k++;
    }

    memspace->workspace_double.data[full_loop_B.idx_positive] +=
      full_loop_B.c_dx;
    full_loop_B.idx_positive++;
    full_loop_B.iac_a += full_loop_B.b_k_oh;
  }

  for (full_loop_B.b_k_oh = 0; full_loop_B.b_k_oh < 52; full_loop_B.b_k_oh++) {
    full_loop_B.idx_negative = full_loop_B.mIneq_m + full_loop_B.b_k_oh;
    full_loop_B.idx_positive = full_loop_B.idx_negative + 1;
    full_loop_B.idx_negative += 53;
    if (memspace->workspace_double.data[full_loop_B.b_k_oh] <= 0.0) {
      TrialState->xstar.data[nVarOrig + full_loop_B.idx_positive] = 0.0;
      TrialState->xstar.data[nVarOrig + full_loop_B.idx_negative] =
        -memspace->workspace_double.data[full_loop_B.b_k_oh];
      full_addBoundToActiveSetMatrix_(WorkingSet, 4, full_loop_B.mLBOrig +
        full_loop_B.idx_positive);
      if (memspace->workspace_double.data[full_loop_B.b_k_oh] >= -0.02) {
        full_addBoundToActiveSetMatrix_(WorkingSet, 4, full_loop_B.mLBOrig +
          full_loop_B.idx_negative);
      }
    } else {
      TrialState->xstar.data[nVarOrig + full_loop_B.idx_positive] =
        memspace->workspace_double.data[full_loop_B.b_k_oh];
      TrialState->xstar.data[nVarOrig + full_loop_B.idx_negative] = 0.0;
      full_addBoundToActiveSetMatrix_(WorkingSet, 4, full_loop_B.mLBOrig +
        full_loop_B.idx_negative);
      if (memspace->workspace_double.data[full_loop_B.b_k_oh] <= 0.02) {
        full_addBoundToActiveSetMatrix_(WorkingSet, 4, full_loop_B.mLBOrig +
          full_loop_B.idx_positive);
      }
    }
  }
}

// Function for MATLAB Function: '<S60>/NLMPC'
int32_T full_loopModelClass::full_findActiveSlackLowerBounds
  (s_i4ZL8C3jdkCeOA2IrFHlEF_full_T *memspace, const int32_T WorkingSet_sizes[5],
   const int32_T WorkingSet_isActiveIdx[6], const boolean_T
   WorkingSet_isActiveConstr_data[])
{
  int32_T nActiveLBArtificial;
  int32_T mIneq;
  int32_T mFiniteLB;
  int32_T idx;
  boolean_T b_tf;
  int32_T tf_tmp;
  mIneq = WorkingSet_sizes[2] - 1;
  mFiniteLB = WorkingSet_sizes[3] - 105;
  nActiveLBArtificial = 0;
  for (idx = 0; idx < 52; idx++) {
    tf_tmp = (WorkingSet_isActiveIdx[3] + mFiniteLB) + idx;
    b_tf = WorkingSet_isActiveConstr_data[tf_tmp + 52];
    memspace->workspace_int.data[idx] = WorkingSet_isActiveConstr_data[tf_tmp];
    memspace->workspace_int.data[idx + 52] = b_tf;
    nActiveLBArtificial = (nActiveLBArtificial +
      WorkingSet_isActiveConstr_data[tf_tmp]) + b_tf;
  }

  for (idx = 0; idx <= mIneq; idx++) {
    b_tf = WorkingSet_isActiveConstr_data[(((WorkingSet_isActiveIdx[3] +
      mFiniteLB) - mIneq) + idx) - 1];
    memspace->workspace_int.data[idx + 104] = b_tf;
    nActiveLBArtificial += b_tf;
  }

  return nActiveLBArtificial;
}

// Function for MATLAB Function: '<S60>/NLMPC'
real_T full_loopModelClass::full_loop_xasum(int32_T n, const real_T x_data[],
  int32_T ix0)
{
  real_T y;
  int32_T kend;
  int32_T k;
  y = 0.0;
  if (n >= 1) {
    kend = (ix0 + n) - 1;
    for (k = ix0; k <= kend; k++) {
      y += std::abs(x_data[k - 1]);
    }
  }

  return y;
}

// Function for MATLAB Function: '<S60>/NLMPC'
real_T full_loopModelClass::full_loop_xdot(int32_T n, const real_T x_data[],
  int32_T ix0, const real_T y_data[], int32_T iy0)
{
  real_T d;
  int32_T ix;
  int32_T iy;
  int32_T k;
  d = 0.0;
  if (n >= 1) {
    ix = ix0;
    iy = iy0;
    for (k = 0; k < n; k++) {
      d += x_data[ix - 1] * y_data[iy - 1];
      ix++;
      iy++;
    }
  }

  return d;
}

// Function for MATLAB Function: '<S60>/NLMPC'
void full_loopModelClass::full_loop_updatePenaltyParam_o
  (s6ICcRyulWOFjNCN0ll7VsE_full__T *obj, real_T fval, const real_T
   ineq_workspace_data[], int32_T mIneq, const real_T eq_workspace[52], int32_T
   sqpiter, real_T qpval, const real_T x_data[], int32_T iReg0, int32_T
   nRegularized)
{
  real_T penaltyParamTrial;
  real_T constrViolationEq;
  real_T constrViolationIneq;
  real_T y;
  int32_T kend;
  int32_T k;
  penaltyParamTrial = obj->penaltyParam;
  constrViolationEq = 0.0;
  for (kend = 0; kend < 52; kend++) {
    constrViolationEq += std::abs(eq_workspace[kend]);
  }

  constrViolationIneq = 0.0;
  for (kend = 0; kend < mIneq; kend++) {
    if (ineq_workspace_data[kend] > 0.0) {
      constrViolationIneq += ineq_workspace_data[kend];
    }
  }

  constrViolationEq += constrViolationIneq;
  constrViolationIneq = obj->linearizedConstrViol;
  y = 0.0;
  if (nRegularized >= 1) {
    kend = (iReg0 + nRegularized) - 1;
    for (k = iReg0; k <= kend; k++) {
      y += std::abs(x_data[k - 1]);
    }
  }

  obj->linearizedConstrViol = y;
  constrViolationIneq = (constrViolationEq + constrViolationIneq) - y;
  if ((constrViolationIneq > 2.2204460492503131E-16) && (qpval > 0.0)) {
    if (fval == 0.0) {
      penaltyParamTrial = 1.0;
    } else {
      penaltyParamTrial = 1.5;
    }

    penaltyParamTrial = penaltyParamTrial * qpval / constrViolationIneq;
  }

  if (penaltyParamTrial < obj->penaltyParam) {
    obj->phi = penaltyParamTrial * constrViolationEq + fval;
    if (((obj->initConstrViolationEq + obj->initConstrViolationIneq) *
         penaltyParamTrial + obj->initFval) - obj->phi > static_cast<real_T>
        (obj->nPenaltyDecreases) * obj->threshold) {
      obj->nPenaltyDecreases++;
      if ((obj->nPenaltyDecreases << 1) > sqpiter) {
        obj->threshold *= 10.0;
      }

      if (penaltyParamTrial > 1.0E-10) {
        obj->penaltyParam = penaltyParamTrial;
      } else {
        obj->penaltyParam = 1.0E-10;
      }
    } else {
      obj->phi = obj->penaltyParam * constrViolationEq + fval;
    }
  } else {
    if (!(penaltyParamTrial > 1.0E-10)) {
      penaltyParamTrial = 1.0E-10;
    }

    obj->penaltyParam = penaltyParamTrial;
    obj->phi = penaltyParamTrial * constrViolationEq + fval;
  }

  penaltyParamTrial = qpval - obj->penaltyParam * constrViolationEq;
  if (penaltyParamTrial < 0.0) {
    obj->phiPrimePlus = penaltyParamTrial;
  } else {
    obj->phiPrimePlus = 0.0;
  }
}

// Function for MATLAB Function: '<S60>/NLMPC'
void full_loopModelClass::fu_removeActiveSlackLowerBounds(int32_T
  nActiveLBArtificial, s_ZxHOyfVSozxr6pSGbgUCkF_full_T *TrialState,
  s_Mspqy2ajbjhxqxIYYuZUwC_full_T *WorkingSet)
{
  int32_T mFixed;
  int32_T mFiniteLBOrig;
  int32_T idx;
  real_T tmp;
  int32_T tmp_tmp;
  mFixed = WorkingSet->sizes[0];
  mFiniteLBOrig = (WorkingSet->sizes[3] - WorkingSet->sizes[2]) - 104;
  idx = WorkingSet->nActiveConstr;
  while ((idx > mFixed + 52) && (nActiveLBArtificial > 0)) {
    if ((WorkingSet->Wid.data[idx - 1] == 4) && (WorkingSet->Wlocalidx.data[idx
         - 1] > mFiniteLBOrig)) {
      tmp_tmp = WorkingSet->nActiveConstr - 1;
      tmp = TrialState->lambda.data[tmp_tmp];
      TrialState->lambda.data[tmp_tmp] = 0.0;
      TrialState->lambda.data[idx - 1] = tmp;
      full_loop_removeConstr(WorkingSet, idx);
      nActiveLBArtificial--;
    }

    idx--;
  }
}

// Function for MATLAB Function: '<S60>/NLMPC'
void full_loopModelClass::full_loop_relaxed(const real_T Hessian[4761], const
  real_T grad_data[], s_ZxHOyfVSozxr6pSGbgUCkF_full_T *TrialState,
  s6ICcRyulWOFjNCN0ll7VsE_full__T *MeritFunction,
  s_i4ZL8C3jdkCeOA2IrFHlEF_full_T *memspace, s_Mspqy2ajbjhxqxIYYuZUwC_full_T
  *WorkingSet, s_3RW6EhlAOINzvAvYfuaanB_full_T *QRManager,
  s_a5SYZcWNC5KFUTosoMMbl_full__T *CholManager, s_BtE36YuCWnavoi0lGdvGZF_full_T *
  QPObjective, s1TgE9KstXgkd2qJxO1bF4F_full__T *qpoptions)
{
  boolean_T isAeqActive;
  full_loop_B.nVarOrig = WorkingSet->nVar + 1;
  full_loop_B.nVarMax = WorkingSet->nVarMax;
  full_loop_B.mIneq_o = WorkingSet->sizes[2];
  full_loop_B.beta_a = 0.0;
  full_loop_B.temp_os = 0;
  while (full_loop_B.temp_os <= full_loop_B.nVarOrig - 2) {
    full_loop_B.beta_a += Hessian[69 * full_loop_B.temp_os + full_loop_B.temp_os];
    full_loop_B.temp_os++;
  }

  full_loop_B.beta_a /= static_cast<real_T>(WorkingSet->nVar);
  if (TrialState->sqpIterations <= 1) {
    full_loop_B.rho = std::abs(grad_data[full_loop_ixamax(QPObjective->nvar,
      grad_data) - 1]);
    if ((1.0 > full_loop_B.rho) || rtIsNaN(full_loop_B.rho)) {
      full_loop_B.rho = 1.0;
    }

    full_loop_B.rho *= 100.0;
  } else {
    full_loop_B.rho = std::abs(TrialState->lambdasqp.data[full_loop_ixamax
      (WorkingSet->mConstr, TrialState->lambdasqp.data) - 1]);
  }

  full_loop_setRegularized(QPObjective, WorkingSet->nVar, full_loop_B.beta_a,
    full_loop_B.rho);
  full_loop_setProblemType(WorkingSet, 2);
  full_lo_assignResidualsToXSlack(full_loop_B.nVarOrig - 1, WorkingSet,
    TrialState, memspace);
  full_loop_B.temp_os = qpoptions->MaxIterations;
  qpoptions->MaxIterations = ((qpoptions->MaxIterations + WorkingSet->nVar) -
    full_loop_B.nVarOrig) + 1;
  full_loop_B.qpoptions = *qpoptions;
  full_loop_B.qpoptions_i = *qpoptions;
  full_loop_driver_e(Hessian, grad_data, TrialState, memspace, WorkingSet,
                     QRManager, CholManager, QPObjective, &full_loop_B.qpoptions,
                     &full_loop_B.qpoptions_i);
  qpoptions->MaxIterations = full_loop_B.temp_os;
  full_loop_B.temp_os = full_findActiveSlackLowerBounds(memspace,
    WorkingSet->sizes, WorkingSet->isActiveIdx, WorkingSet->isActiveConstr.data);
  if (TrialState->state != -6) {
    full_loop_B.nArtificial = WorkingSet->nVarMax - full_loop_B.nVarOrig;
    full_loop_updatePenaltyParam_o(MeritFunction, TrialState->sqpFval,
      TrialState->cIneq.data, full_loop_B.mIneq_o, TrialState->cEq,
      TrialState->sqpIterations, (TrialState->fstar - full_loop_B.rho *
      full_loop_xasum(full_loop_B.nArtificial, TrialState->xstar.data,
                      full_loop_B.nVarOrig)) - full_loop_B.beta_a / 2.0 *
      full_loop_xdot(full_loop_B.nArtificial, TrialState->xstar.data,
                     full_loop_B.nVarOrig, TrialState->xstar.data,
                     full_loop_B.nVarOrig), TrialState->xstar.data,
      full_loop_B.nVarOrig, full_loop_B.nVarMax - full_loop_B.nVarOrig);
    full_loop_B.mIneq_o = WorkingSet->isActiveIdx[1] - 1;
    for (full_loop_B.nVarMax = 0; full_loop_B.nVarMax < 52; full_loop_B.nVarMax
         ++) {
      if (memspace->workspace_int.data[full_loop_B.nVarMax] != 0) {
        if (memspace->workspace_int.data[full_loop_B.nVarMax + 52] != 0) {
          isAeqActive = true;
        } else {
          isAeqActive = false;
        }
      } else {
        isAeqActive = false;
      }

      full_loop_B.nArtificial = full_loop_B.mIneq_o + full_loop_B.nVarMax;
      TrialState->lambda.data[full_loop_B.nArtificial] *= static_cast<real_T>
        (isAeqActive);
    }

    full_loop_B.nVarMax = WorkingSet->isActiveIdx[2] - 1;
    while (full_loop_B.nVarMax + 1 <= WorkingSet->nActiveConstr) {
      if (WorkingSet->Wid.data[full_loop_B.nVarMax] == 3) {
        TrialState->lambda.data[full_loop_B.nVarMax] *= static_cast<real_T>
          (memspace->workspace_int.data[WorkingSet->
           Wlocalidx.data[full_loop_B.nVarMax] + 103]);
      }

      full_loop_B.nVarMax++;
    }
  }

  fu_removeActiveSlackLowerBounds(full_loop_B.temp_os, TrialState, WorkingSet);
  full_loop_setQuadratic(QPObjective, full_loop_B.nVarOrig - 1);
  full_loop_setProblemType(WorkingSet, 3);
  full_loop_sortLambdaQP(TrialState->lambda.data, WorkingSet->nActiveConstr,
    WorkingSet->sizes, WorkingSet->isActiveIdx, WorkingSet->Wid.data,
    WorkingSet->Wlocalidx.data, memspace->workspace_double.data);
}

// Function for MATLAB Function: '<S60>/NLMPC'
void full_loopModelClass::full_loop_BFGSReset(real_T Hessian[4761], const real_T
  grad_data[], const real_T searchDir_data[])
{
  real_T nrmGradInf;
  real_T nrmDirInf;
  int32_T iH0;
  int32_T idx;
  int32_T k;
  real_T u1;
  nrmGradInf = 0.0;
  nrmDirInf = 1.0;
  for (idx = 0; idx < 69; idx++) {
    u1 = std::abs(grad_data[idx]);
    if ((!(nrmGradInf > u1)) && (!rtIsNaN(u1))) {
      nrmGradInf = u1;
    }

    u1 = std::abs(searchDir_data[idx]);
    if ((!(nrmDirInf > u1)) && (!rtIsNaN(u1))) {
      nrmDirInf = u1;
    }
  }

  nrmGradInf /= nrmDirInf;
  if ((2.2204460492503131E-16 > nrmGradInf) || rtIsNaN(nrmGradInf)) {
    nrmGradInf = 2.2204460492503131E-16;
  }

  for (idx = 0; idx < 69; idx++) {
    iH0 = 69 * idx;
    for (k = 0; k < idx; k++) {
      Hessian[iH0 + k] = 0.0;
    }

    Hessian[idx + 69 * idx] = nrmGradInf;
    iH0 += idx;
    for (k = 0; k <= 67 - idx; k++) {
      Hessian[(iH0 + k) + 1] = 0.0;
    }
  }
}

// Function for MATLAB Function: '<S60>/NLMPC'
void full_loopModelClass::full_loop_saturateDirection(const real_T xk[69],
  real_T delta_x_data[], real_T xstarqp_data[], const int32_T indexLB_data[],
  int32_T mLB, const real_T lb[69])
{
  real_T violationResid;
  int32_T b_idx;
  real_T violationResid_tmp;
  for (b_idx = 0; b_idx < mLB; b_idx++) {
    violationResid_tmp = delta_x_data[indexLB_data[b_idx] - 1];
    violationResid = (xk[indexLB_data[b_idx] - 1] + violationResid_tmp) -
      lb[indexLB_data[b_idx] - 1];
    if (violationResid < 0.0) {
      delta_x_data[indexLB_data[b_idx] - 1] = violationResid_tmp -
        violationResid;
      xstarqp_data[indexLB_data[b_idx] - 1] -= violationResid;
    }
  }
}

// Function for MATLAB Function: '<S60>/NLMPC'
boolean_T full_loopModelClass::full_loop_step_n(int32_T *STEP_TYPE, real_T
  Hessian[4761], const real_T lb[69], s_ZxHOyfVSozxr6pSGbgUCkF_full_T
  *TrialState, s6ICcRyulWOFjNCN0ll7VsE_full__T *MeritFunction,
  s_i4ZL8C3jdkCeOA2IrFHlEF_full_T *memspace, s_Mspqy2ajbjhxqxIYYuZUwC_full_T
  *WorkingSet, s_3RW6EhlAOINzvAvYfuaanB_full_T *QRManager,
  s_a5SYZcWNC5KFUTosoMMbl_full__T *CholManager, s_BtE36YuCWnavoi0lGdvGZF_full_T *
  QPObjective, s1TgE9KstXgkd2qJxO1bF4F_full__T *qpoptions)
{
  boolean_T stepSuccess;
  boolean_T checkBoundViolation;
  int32_T exitg1;
  boolean_T guard1 = false;
  stepSuccess = true;
  checkBoundViolation = true;
  full_loop_B.nVar_e = WorkingSet->nVar;
  if (*STEP_TYPE != 3) {
    full_loop_xcopy_g(WorkingSet->nVar, TrialState->xstarsqp,
                      TrialState->xstar.data);
  } else {
    full_loop_B.e_size_a = TrialState->searchDir.size;
    full_loop_B.loop_ub_ik = TrialState->searchDir.size;
    if (0 <= full_loop_B.loop_ub_ik - 1) {
      std::memcpy(&full_loop_B.e_data[0], &TrialState->searchDir.data[0],
                  full_loop_B.loop_ub_ik * sizeof(real_T));
    }

    full_loop_xcopy_gprn(WorkingSet->nVar, TrialState->xstar.data,
                         full_loop_B.e_data);
    TrialState->searchDir.size = full_loop_B.e_size_a;
    full_loop_B.loop_ub_ik = full_loop_B.e_size_a;
    if (0 <= full_loop_B.loop_ub_ik - 1) {
      std::memcpy(&TrialState->searchDir.data[0], &full_loop_B.e_data[0],
                  full_loop_B.loop_ub_ik * sizeof(real_T));
    }
  }

  full_loop_makeBoundFeasible(TrialState->xstar.data, WorkingSet);
  do {
    exitg1 = 0;
    guard1 = false;
    switch (*STEP_TYPE) {
     case 1:
      full_loop_B.b_TrialState = *TrialState;
      full_loop_normal(Hessian, TrialState->grad.data, &full_loop_B.b_TrialState,
                       MeritFunction, memspace, WorkingSet, QRManager,
                       CholManager, QPObjective, qpoptions);
      *TrialState = full_loop_B.b_TrialState;
      if ((full_loop_B.b_TrialState.state <= 0) &&
          (full_loop_B.b_TrialState.state != -6)) {
        *STEP_TYPE = 2;
      } else {
        full_loop_B.e_size_a = full_loop_B.b_TrialState.delta_x.size;
        full_loop_B.loop_ub_ik = full_loop_B.b_TrialState.delta_x.size;
        if (0 <= full_loop_B.loop_ub_ik - 1) {
          std::memcpy(&full_loop_B.e_data[0],
                      &full_loop_B.b_TrialState.delta_x.data[0],
                      full_loop_B.loop_ub_ik * sizeof(real_T));
        }

        full_loop_xcopy_gprn(full_loop_B.nVar_e,
                             full_loop_B.b_TrialState.xstar.data,
                             full_loop_B.e_data);
        TrialState->delta_x.size = full_loop_B.e_size_a;
        full_loop_B.loop_ub_ik = full_loop_B.e_size_a;
        if (0 <= full_loop_B.loop_ub_ik - 1) {
          std::memcpy(&TrialState->delta_x.data[0], &full_loop_B.e_data[0],
                      full_loop_B.loop_ub_ik * sizeof(real_T));
        }

        guard1 = true;
      }
      break;

     case 2:
      full_loop_B.b_TrialState = *TrialState;
      full_loop_relaxed(Hessian, TrialState->grad.data,
                        &full_loop_B.b_TrialState, MeritFunction, memspace,
                        WorkingSet, QRManager, CholManager, QPObjective,
                        qpoptions);
      *TrialState = full_loop_B.b_TrialState;
      full_loop_B.e_size_a = full_loop_B.b_TrialState.delta_x.size;
      full_loop_B.loop_ub_ik = full_loop_B.b_TrialState.delta_x.size;
      if (0 <= full_loop_B.loop_ub_ik - 1) {
        std::memcpy(&full_loop_B.e_data[0],
                    &full_loop_B.b_TrialState.delta_x.data[0],
                    full_loop_B.loop_ub_ik * sizeof(real_T));
      }

      full_loop_xcopy_gprn(full_loop_B.nVar_e,
                           full_loop_B.b_TrialState.xstar.data,
                           full_loop_B.e_data);
      TrialState->delta_x.size = full_loop_B.e_size_a;
      full_loop_B.loop_ub_ik = full_loop_B.e_size_a;
      if (0 <= full_loop_B.loop_ub_ik - 1) {
        std::memcpy(&TrialState->delta_x.data[0], &full_loop_B.e_data[0],
                    full_loop_B.loop_ub_ik * sizeof(real_T));
      }

      guard1 = true;
      break;

     default:
      full_loop_B.b_TrialState = *TrialState;
      stepSuccess = full_loop_soc(Hessian, TrialState->grad.data,
        &full_loop_B.b_TrialState, memspace, WorkingSet, QRManager, CholManager,
        QPObjective, qpoptions);
      *TrialState = full_loop_B.b_TrialState;
      checkBoundViolation = stepSuccess;
      if (stepSuccess && (TrialState->state != -6)) {
        full_loop_B.loop_ub_ik = 0;
        while (full_loop_B.loop_ub_ik <= full_loop_B.nVar_e - 1) {
          TrialState->delta_x.data[full_loop_B.loop_ub_ik] =
            TrialState->xstar.data[full_loop_B.loop_ub_ik] +
            TrialState->socDirection.data[full_loop_B.loop_ub_ik];
          full_loop_B.loop_ub_ik++;
        }
      }

      guard1 = true;
      break;
    }

    if (guard1) {
      if (TrialState->state != -6) {
        exitg1 = 1;
      } else {
        full_loop_BFGSReset(Hessian, TrialState->grad.data,
                            TrialState->xstar.data);
      }
    }
  } while (exitg1 == 0);

  if (checkBoundViolation) {
    full_loop_B.b_size_hv = TrialState->delta_x.size;
    full_loop_B.loop_ub_ik = TrialState->delta_x.size;
    if (0 <= full_loop_B.loop_ub_ik - 1) {
      std::memcpy(&full_loop_B.b_data_o[0], &TrialState->delta_x.data[0],
                  full_loop_B.loop_ub_ik * sizeof(real_T));
    }

    full_loop_B.d_size_mg = TrialState->xstar.size;
    full_loop_B.loop_ub_ik = TrialState->xstar.size;
    if (0 <= full_loop_B.loop_ub_ik - 1) {
      std::memcpy(&full_loop_B.d_data_b[0], &TrialState->xstar.data[0],
                  full_loop_B.loop_ub_ik * sizeof(real_T));
    }

    full_loop_saturateDirection(TrialState->xstarsqp, full_loop_B.b_data_o,
      full_loop_B.d_data_b, WorkingSet->indexLB.data, WorkingSet->sizes[3], lb);
    TrialState->delta_x.size = full_loop_B.b_size_hv;
    full_loop_B.loop_ub_ik = full_loop_B.b_size_hv;
    if (0 <= full_loop_B.loop_ub_ik - 1) {
      std::memcpy(&TrialState->delta_x.data[0], &full_loop_B.b_data_o[0],
                  full_loop_B.loop_ub_ik * sizeof(real_T));
    }

    TrialState->xstar.size = full_loop_B.d_size_mg;
    full_loop_B.loop_ub_ik = full_loop_B.d_size_mg;
    if (0 <= full_loop_B.loop_ub_ik - 1) {
      std::memcpy(&TrialState->xstar.data[0], &full_loop_B.d_data_b[0],
                  full_loop_B.loop_ub_ik * sizeof(real_T));
    }
  }

  return stepSuccess;
}

// Function for MATLAB Function: '<S60>/NLMPC'
void full_loopModelClass::full_loop_computeObjective_(const real_T
  obj_objfun_tunableEnvironment_f[13], const real_T
  obj_objfun_tunableEnvironment_0[8], const real_T
  obj_objfun_tunableEnvironment_1[52], const real_T
  obj_objfun_tunableEnvironment_2[52], const real_T
  obj_objfun_tunableEnvironment_3[32], const real_T
  obj_objfun_tunableEnvironment_4[32], const real_T
  obj_objfun_tunableEnvironment_5[32], const real_T x[69], real_T *fval, int32_T
  *status)
{
  full_loop_znlmpc_getXUe(x, obj_objfun_tunableEnvironment_f, full_loop_B.X_d,
    full_loop_B.U_j, &full_loop_B.e_jo);
  full_loop_quadraticObjective(obj_objfun_tunableEnvironment_0,
    obj_objfun_tunableEnvironment_1, obj_objfun_tunableEnvironment_2,
    obj_objfun_tunableEnvironment_3, obj_objfun_tunableEnvironment_4,
    obj_objfun_tunableEnvironment_5, full_loop_B.X_d, full_loop_B.U_j,
    full_loop_B.e_jo, fval, full_loop_B.gfX_o, full_loop_B.gfU_j,
    &full_loop_B.gfE_p);
  *status = 1;
  if (rtIsInf(*fval) || rtIsNaN(*fval)) {
    if (rtIsNaN(*fval)) {
      *status = -6;
    } else if (*fval < 0.0) {
      *status = -4;
    } else {
      *status = -5;
    }
  }
}

// Function for MATLAB Function: '<S60>/NLMPC'
void full_loopModelClass::full_loop___anon_fcn_bv(const real_T runtimedata_x[13],
  const real_T runtimedata_OutputMin[52], const real_T runtimedata_OutputMax[52],
  const real_T z[69], real_T varargout_1_data[], int32_T varargout_1_size[2],
  real_T varargout_2[52])
{
  int32_T result;
  int32_T result_idx_0;
  full_loop_znlmpc_getXUe(z, runtimedata_x, full_loop_B.X_g, full_loop_B.U_h,
    &full_loop_B.e_e);
  full_loop_stateEvolution(full_loop_B.X_g, full_loop_B.U_h, varargout_2,
    full_loop_B.Jceq);
  full_loop_outputBounds(runtimedata_OutputMin, runtimedata_OutputMax,
    full_loop_B.X_g, full_loop_B.e_e, full_loop_B.c_data_pc,
    full_loop_B.c_size_e, full_loop_B.Jc_data_l, full_loop_B.Jc_size);
  result = ((full_loop_B.c_size_e[0] != 0) && (full_loop_B.c_size_e[1] != 0));
  if (result == 0) {
    result_idx_0 = full_loop_B.c_size_e[0];
  } else if ((full_loop_B.c_size_e[0] != 0) && (full_loop_B.c_size_e[1] != 0)) {
    result_idx_0 = full_loop_B.c_size_e[0];
  } else {
    result_idx_0 = 0;
  }

  varargout_1_size[0] = result_idx_0;
  varargout_1_size[1] = result;
  if ((0 <= result - 1) && (0 <= result_idx_0 - 1)) {
    std::memcpy(&varargout_1_data[0], &full_loop_B.c_data_pc[0], result_idx_0 *
                sizeof(real_T));
  }
}

// Function for MATLAB Function: '<S60>/NLMPC'
int32_T full_loopModelClass::full_loop_computeConstraints_(const real_T
  obj_nonlcon_tunableEnvironment_[13], const real_T
  obj_nonlcon_tunableEnvironmen_0[52], const real_T
  obj_nonlcon_tunableEnvironmen_1[52], int32_T obj_mCineq, const real_T x[69],
  real_T Cineq_workspace_data[], int32_T ineq0, real_T Ceq_workspace[52])
{
  int32_T status;
  int32_T c;
  int32_T tmp;
  full_loop_B.ineqEnd = (ineq0 + obj_mCineq) - 2;
  full_loop___anon_fcn_bv(obj_nonlcon_tunableEnvironment_,
    obj_nonlcon_tunableEnvironmen_0, obj_nonlcon_tunableEnvironmen_1, x,
    full_loop_B.varargout_1_data, full_loop_B.varargout_1_size,
    full_loop_B.varargout_2_n);
  if (ineq0 > full_loop_B.ineqEnd + 1) {
    c = -1;
    full_loop_B.ineqEnd = -1;
  } else {
    c = ineq0 - 2;
  }

  tmp = full_loop_B.ineqEnd - c;
  for (full_loop_B.ineqEnd = 0; full_loop_B.ineqEnd < tmp; full_loop_B.ineqEnd++)
  {
    Cineq_workspace_data[(c + full_loop_B.ineqEnd) + 1] =
      full_loop_B.varargout_1_data[full_loop_B.ineqEnd];
  }

  std::memcpy(&Ceq_workspace[0], &full_loop_B.varargout_2_n[0], 52U * sizeof
              (real_T));
  status = full_loop_checkVectorNonFinite(obj_mCineq, Cineq_workspace_data,
    ineq0);
  if (status == 1) {
    status = full_loo_checkVectorNonFinite_e(Ceq_workspace);
  }

  return status;
}

// Function for MATLAB Function: '<S60>/NLMPC'
void full_loopModelClass::full_loop_evalObjAndConstr(const real_T
  obj_objfun_tunableEnvironment_f[13], const real_T
  obj_objfun_tunableEnvironment_0[8], const real_T
  obj_objfun_tunableEnvironment_1[52], const real_T
  obj_objfun_tunableEnvironment_2[52], const real_T
  obj_objfun_tunableEnvironment_3[32], const real_T
  obj_objfun_tunableEnvironment_4[32], const real_T
  obj_objfun_tunableEnvironment_5[32], const real_T
  obj_nonlcon_tunableEnvironment_[13], const real_T
  obj_nonlcon_tunableEnvironmen_0[52], const real_T
  obj_nonlcon_tunableEnvironmen_1[52], int32_T obj_mCineq, const real_T x[69],
  real_T Cineq_workspace_data[], int32_T ineq0, real_T Ceq_workspace[52], real_T
  *fval, int32_T *status)
{
  full_loop_computeObjective_(obj_objfun_tunableEnvironment_f,
    obj_objfun_tunableEnvironment_0, obj_objfun_tunableEnvironment_1,
    obj_objfun_tunableEnvironment_2, obj_objfun_tunableEnvironment_3,
    obj_objfun_tunableEnvironment_4, obj_objfun_tunableEnvironment_5, x, fval,
    status);
  if (*status == 1) {
    *status = full_loop_computeConstraints_(obj_nonlcon_tunableEnvironment_,
      obj_nonlcon_tunableEnvironmen_0, obj_nonlcon_tunableEnvironmen_1,
      obj_mCineq, x, Cineq_workspace_data, ineq0, Ceq_workspace);
  }
}

// Function for MATLAB Function: '<S60>/NLMPC'
void full_loopModelClass::full_l_computeLinearResiduals_l(const real_T x[69],
  int32_T nVar, real_T workspaceIneq_data[], const int32_T *workspaceIneq_size,
  int32_T mLinIneq, const real_T AineqT_data[], const real_T bineq_data[],
  int32_T ldAi)
{
  int32_T ix;
  real_T c;
  int32_T iac;
  int32_T b;
  int32_T ia;
  int32_T loop_ub;
  int32_T y_size_idx_0;
  if (mLinIneq > 0) {
    if (0 <= *workspaceIneq_size - 1) {
      std::memcpy(&full_loop_B.y_data_h3[0], &workspaceIneq_data[0],
                  *workspaceIneq_size * sizeof(real_T));
    }

    for (loop_ub = 0; loop_ub < mLinIneq; loop_ub++) {
      full_loop_B.y_data_h3[loop_ub] = bineq_data[loop_ub];
    }

    if (0 <= *workspaceIneq_size - 1) {
      std::memcpy(&workspaceIneq_data[0], &full_loop_B.y_data_h3[0],
                  *workspaceIneq_size * sizeof(real_T));
    }

    for (y_size_idx_0 = 0; y_size_idx_0 < mLinIneq; y_size_idx_0++) {
      workspaceIneq_data[y_size_idx_0] = -workspaceIneq_data[y_size_idx_0];
    }

    y_size_idx_0 = 0;
    loop_ub = (mLinIneq - 1) * ldAi + 1;
    iac = 1;
    while (((ldAi > 0) && (iac <= loop_ub)) || ((ldAi < 0) && (iac >= loop_ub)))
    {
      ix = 0;
      c = 0.0;
      b = (iac + nVar) - 1;
      for (ia = iac; ia <= b; ia++) {
        c += AineqT_data[ia - 1] * x[ix];
        ix++;
      }

      workspaceIneq_data[y_size_idx_0] += c;
      y_size_idx_0++;
      iac += ldAi;
    }
  }
}

// Function for MATLAB Function: '<S60>/NLMPC'
real_T full_loopModelClass::full_loop_computeMeritFcn(real_T obj_penaltyParam,
  real_T fval, const real_T Cineq_workspace_data[], int32_T mIneq, const real_T
  Ceq_workspace[52], boolean_T evalWellDefined)
{
  real_T val;
  real_T constrViolationEq;
  real_T constrViolationIneq;
  int32_T k;
  if (evalWellDefined) {
    constrViolationEq = 0.0;
    for (k = 0; k < 52; k++) {
      constrViolationEq += std::abs(Ceq_workspace[k]);
    }

    constrViolationIneq = 0.0;
    for (k = 0; k < mIneq; k++) {
      if (Cineq_workspace_data[k] > 0.0) {
        constrViolationIneq += Cineq_workspace_data[k];
      }
    }

    val = (constrViolationEq + constrViolationIneq) * obj_penaltyParam + fval;
  } else {
    val = (rtInf);
  }

  return val;
}

// Function for MATLAB Function: '<S60>/NLMPC'
void full_loopModelClass::full_loop_linesearch(boolean_T *evalWellDefined, const
  real_T bineq_data[], int32_T WorkingSet_nVar, int32_T WorkingSet_ldA, const
  real_T WorkingSet_Aineq_data[], s_ZxHOyfVSozxr6pSGbgUCkF_full_T *TrialState,
  real_T MeritFunction_penaltyParam, real_T MeritFunction_phi, real_T
  MeritFunction_phiPrimePlus, real_T MeritFunction_phiFullStep, const
  s_A0rUWcsbMx3S06V1NlippE_full_T *FcnEvaluator_objfun_tunableEnvi, const
  s_A0rUWcsbMx3S06V1NlippE_full_T *FcnEvaluator_nonlcon_tunableEnv, int32_T
  FcnEvaluator_mCineq, boolean_T socTaken, real_T *alpha, int32_T *exitflag)
{
  int32_T exitg1;
  full_loop_B.mLinIneq_n = TrialState->mIneq - TrialState->mNonlinIneq;
  *alpha = 1.0;
  *exitflag = 1;
  full_loop_B.phi_alpha = MeritFunction_phiFullStep;
  full_loop_B.e_size_m = TrialState->searchDir.size;
  full_loop_B.loop_ub_ir = TrialState->searchDir.size;
  if (0 <= full_loop_B.loop_ub_ir - 1) {
    std::memcpy(&full_loop_B.e_data_c[0], &TrialState->searchDir.data[0],
                full_loop_B.loop_ub_ir * sizeof(real_T));
  }

  full_loop_xcopy_gprn(WorkingSet_nVar, TrialState->delta_x.data,
                       full_loop_B.e_data_c);
  TrialState->searchDir.size = full_loop_B.e_size_m;
  full_loop_B.loop_ub_ir = full_loop_B.e_size_m;
  if (0 <= full_loop_B.loop_ub_ir - 1) {
    std::memcpy(&TrialState->searchDir.data[0], &full_loop_B.e_data_c[0],
                full_loop_B.loop_ub_ir * sizeof(real_T));
  }

  do {
    exitg1 = 0;
    if (TrialState->FunctionEvaluations < 6900) {
      if ((*evalWellDefined) && (full_loop_B.phi_alpha <= *alpha * 0.0001 *
           MeritFunction_phiPrimePlus + MeritFunction_phi)) {
        exitg1 = 1;
      } else {
        *alpha *= 0.7;
        full_loop_B.loop_ub_ir = 0;
        while (full_loop_B.loop_ub_ir <= WorkingSet_nVar - 1) {
          TrialState->delta_x.data[full_loop_B.loop_ub_ir] = *alpha *
            TrialState->xstar.data[full_loop_B.loop_ub_ir];
          full_loop_B.loop_ub_ir++;
        }

        if (socTaken) {
          full_loop_xaxpy_k(WorkingSet_nVar, *alpha * *alpha,
                            TrialState->socDirection.data,
                            TrialState->delta_x.data);
        }

        if (full_loop_isDeltaXTooSmall(TrialState->xstarsqp,
             TrialState->delta_x.data, WorkingSet_nVar)) {
          *exitflag = -2;
          exitg1 = 1;
        } else {
          full_loop_B.loop_ub_ir = 0;
          while (full_loop_B.loop_ub_ir <= WorkingSet_nVar - 1) {
            TrialState->xstarsqp[full_loop_B.loop_ub_ir] =
              TrialState->xstarsqp_old[full_loop_B.loop_ub_ir] +
              TrialState->delta_x.data[full_loop_B.loop_ub_ir];
            full_loop_B.loop_ub_ir++;
          }

          full_loop_B.c_size_n = TrialState->cIneq.size;
          full_loop_B.loop_ub_ir = TrialState->cIneq.size;
          if (0 <= full_loop_B.loop_ub_ir - 1) {
            std::memcpy(&full_loop_B.c_data_l[0], &TrialState->cIneq.data[0],
                        full_loop_B.loop_ub_ir * sizeof(real_T));
          }

          std::memcpy(&full_loop_B.d_ce[0], &TrialState->cEq[0], 52U * sizeof
                      (real_T));
          full_loop_evalObjAndConstr(FcnEvaluator_objfun_tunableEnvi->x,
            FcnEvaluator_objfun_tunableEnvi->lastMV,
            FcnEvaluator_objfun_tunableEnvi->ref,
            FcnEvaluator_objfun_tunableEnvi->OutputWeights,
            FcnEvaluator_objfun_tunableEnvi->MVWeights,
            FcnEvaluator_objfun_tunableEnvi->MVRateWeights,
            FcnEvaluator_objfun_tunableEnvi->MVScaledTarget,
            FcnEvaluator_nonlcon_tunableEnv->x,
            FcnEvaluator_nonlcon_tunableEnv->OutputMin,
            FcnEvaluator_nonlcon_tunableEnv->OutputMax, FcnEvaluator_mCineq,
            TrialState->xstarsqp, full_loop_B.c_data_l, TrialState->iNonIneq0,
            full_loop_B.d_ce, &full_loop_B.phi_alpha, &full_loop_B.evalStatus);
          TrialState->sqpFval = full_loop_B.phi_alpha;
          full_l_computeLinearResiduals_l(TrialState->xstarsqp, WorkingSet_nVar,
            full_loop_B.c_data_l, &full_loop_B.c_size_n, full_loop_B.mLinIneq_n,
            WorkingSet_Aineq_data, bineq_data, WorkingSet_ldA);
          TrialState->cIneq.size = full_loop_B.c_size_n;
          full_loop_B.loop_ub_ir = full_loop_B.c_size_n;
          if (0 <= full_loop_B.loop_ub_ir - 1) {
            std::memcpy(&TrialState->cIneq.data[0], &full_loop_B.c_data_l[0],
                        full_loop_B.loop_ub_ir * sizeof(real_T));
          }

          std::memcpy(&TrialState->cEq[0], &full_loop_B.d_ce[0], 52U * sizeof
                      (real_T));
          TrialState->FunctionEvaluations++;
          *evalWellDefined = (full_loop_B.evalStatus == 1);
          full_loop_B.phi_alpha = full_loop_computeMeritFcn
            (MeritFunction_penaltyParam, full_loop_B.phi_alpha,
             full_loop_B.c_data_l, TrialState->mIneq, full_loop_B.d_ce,
             *evalWellDefined);
        }
      }
    } else {
      *exitflag = 0;
      exitg1 = 1;
    }
  } while (exitg1 == 0);
}

// Function for MATLAB Function: '<S60>/NLMPC'
void full_loopModelClass::full_loop_driver(const real_T bineq_data[], const
  real_T lb[69], s_ZxHOyfVSozxr6pSGbgUCkF_full_T *TrialState,
  s6ICcRyulWOFjNCN0ll7VsE_full__T *MeritFunction, const
  s_siHoaqeHIV5TpidUajpsGD_full_T *FcnEvaluator, s_i4ZL8C3jdkCeOA2IrFHlEF_full_T
  *memspace, s_Mspqy2ajbjhxqxIYYuZUwC_full_T *WorkingSet,
  s_3RW6EhlAOINzvAvYfuaanB_full_T *QRManager, s_a5SYZcWNC5KFUTosoMMbl_full__T
  *CholManager, s_BtE36YuCWnavoi0lGdvGZF_full_T *QPObjective, const int32_T
  *fscales_lineq_constraint_size, const int32_T *fscales_cineq_constraint_size,
  real_T Hessian[4761])
{
  boolean_T b;
  static const int8_T o[4761] = { 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 };

  static const char_T p[7] = { 'f', 'm', 'i', 'n', 'c', 'o', 'n' };

  for (full_loop_B.u1_i = 0; full_loop_B.u1_i < 4761; full_loop_B.u1_i++) {
    Hessian[full_loop_B.u1_i] = o[full_loop_B.u1_i];
  }

  full_loop_B.nVar = WorkingSet->nVar;
  full_loop_B.mFixed_k = WorkingSet->sizes[0];
  full_loop_B.mIneq_i = WorkingSet->sizes[2];
  full_loop_B.mLB_m = WorkingSet->sizes[3];
  full_loop_B.mUB_j = WorkingSet->sizes[4];
  full_loop_B.mConstr = (((WorkingSet->sizes[0] + WorkingSet->sizes[2]) +
    WorkingSet->sizes[3]) + WorkingSet->sizes[4]) + 51;
  full_loop_B.mLinIneq = WorkingSet->sizes[2] - TrialState->mNonlinIneq;
  full_loop_B.u1_i = ((WorkingSet->sizes[2] + WorkingSet->sizes[3]) +
                      WorkingSet->sizes[4]) + (WorkingSet->sizes[0] << 1);
  if (WorkingSet->nVar > full_loop_B.u1_i) {
    full_loop_B.u1_i = WorkingSet->nVar;
  }

  full_loop_B.qpoptions_MaxIterations = 10 * full_loop_B.u1_i;
  TrialState->steplength = 1.0;
  full_loop_test_exit(MeritFunction, WorkingSet, TrialState, lb,
                      &full_loop_B.Flags.gradOK, &full_loop_B.Flags.fevalOK,
                      &full_loop_B.Flags.done, &full_loop_B.Flags.stepAccepted,
                      &full_loop_B.Flags.failedLineSearch,
                      &full_loop_B.Flags.stepType);
  full_loop_B.q = *TrialState;
  full_loop_saveJacobian(&full_loop_B.q, WorkingSet->nVar, WorkingSet->sizes[2],
    WorkingSet->Aineq.data, TrialState->iNonIneq0, WorkingSet->Aeq.data,
    WorkingSet->ldA);
  *TrialState = full_loop_B.q;
  full_loop_saveState(TrialState);
  if (!full_loop_B.Flags.done) {
    TrialState->sqpIterations = 1;
  }

  while (!full_loop_B.Flags.done) {
    if ((!full_loop_B.Flags.stepAccepted) &&
        (!full_loop_B.Flags.failedLineSearch)) {
      full_loop_B.expl_temp_l.IterDisplayQP = false;
      full_loop_B.expl_temp_l.RemainFeasible = false;
      full_loop_B.expl_temp_l.ProbRelTolFactor = 1.0;
      full_loop_B.expl_temp_l.ConstrRelTolFactor = 1.0;
      full_loop_B.expl_temp_l.PricingTolerance = 0.0;
      full_loop_B.expl_temp_l.ObjectiveLimit = -1.0E+20;
      full_loop_B.expl_temp_l.ConstraintTolerance = 0.02;
      full_loop_B.expl_temp_l.OptimalityTolerance = 2.2204460492503131E-14;
      full_loop_B.expl_temp_l.StepTolerance = 1.0E-6;
      full_loop_B.expl_temp_l.MaxIterations =
        full_loop_B.qpoptions_MaxIterations;
      for (full_loop_B.u1_i = 0; full_loop_B.u1_i < 7; full_loop_B.u1_i++) {
        full_loop_B.expl_temp_l.SolverName[full_loop_B.u1_i] =
          p[full_loop_B.u1_i];
      }
    }

    while ((!full_loop_B.Flags.stepAccepted) &&
           (!full_loop_B.Flags.failedLineSearch)) {
      full_updateWorkingSetForNewQP_h(TrialState->xstarsqp, WorkingSet,
        full_loop_B.mIneq_i, TrialState->mNonlinIneq, TrialState->cIneq.data,
        TrialState->cEq, full_loop_B.mLB_m, lb, full_loop_B.mUB_j,
        full_loop_B.mFixed_k);
      full_loop_B.u1_i = full_loop_B.Flags.stepType;
      full_loop_B.expl_temp_a = full_loop_B.expl_temp_l;
      b = full_loop_step_n(&full_loop_B.u1_i, Hessian, lb, TrialState,
                           MeritFunction, memspace, WorkingSet, QRManager,
                           CholManager, QPObjective, &full_loop_B.expl_temp_a);
      full_loop_B.Flags.stepAccepted = b;
      full_loop_B.Flags.stepType = full_loop_B.u1_i;
      if (b) {
        full_loop_B.loop_ub_a = 0;
        while (full_loop_B.loop_ub_a <= full_loop_B.nVar - 1) {
          TrialState->xstarsqp[full_loop_B.loop_ub_a] +=
            TrialState->delta_x.data[full_loop_B.loop_ub_a];
          full_loop_B.loop_ub_a++;
        }

        full_loop_B.h_size = TrialState->cIneq.size;
        full_loop_B.loop_ub_a = TrialState->cIneq.size;
        if (0 <= full_loop_B.loop_ub_a - 1) {
          std::memcpy(&full_loop_B.h_data_n[0], &TrialState->cIneq.data[0],
                      full_loop_B.loop_ub_a * sizeof(real_T));
        }

        std::memcpy(&full_loop_B.j_l[0], &TrialState->cEq[0], 52U * sizeof
                    (real_T));
        full_loop_evalObjAndConstr(FcnEvaluator->objfun.tunableEnvironment.f1.x,
          FcnEvaluator->objfun.tunableEnvironment.f1.lastMV,
          FcnEvaluator->objfun.tunableEnvironment.f1.ref,
          FcnEvaluator->objfun.tunableEnvironment.f1.OutputWeights,
          FcnEvaluator->objfun.tunableEnvironment.f1.MVWeights,
          FcnEvaluator->objfun.tunableEnvironment.f1.MVRateWeights,
          FcnEvaluator->objfun.tunableEnvironment.f1.MVScaledTarget,
          FcnEvaluator->nonlcon.tunableEnvironment.f1.x,
          FcnEvaluator->nonlcon.tunableEnvironment.f1.OutputMin,
          FcnEvaluator->nonlcon.tunableEnvironment.f1.OutputMax,
          FcnEvaluator->mCineq, TrialState->xstarsqp, full_loop_B.h_data_n,
          TrialState->iNonIneq0, full_loop_B.j_l, &full_loop_B.d_p,
          &full_loop_B.loop_ub_a);
        TrialState->sqpFval = full_loop_B.d_p;
        full_loop_B.Flags.fevalOK = (full_loop_B.loop_ub_a == 1);
        TrialState->FunctionEvaluations++;
        full_l_computeLinearResiduals_l(TrialState->xstarsqp, full_loop_B.nVar,
          full_loop_B.h_data_n, &full_loop_B.h_size, full_loop_B.mLinIneq,
          WorkingSet->Aineq.data, bineq_data, WorkingSet->ldA);
        TrialState->cIneq.size = full_loop_B.h_size;
        full_loop_B.loop_ub_a = full_loop_B.h_size;
        if (0 <= full_loop_B.loop_ub_a - 1) {
          std::memcpy(&TrialState->cIneq.data[0], &full_loop_B.h_data_n[0],
                      full_loop_B.loop_ub_a * sizeof(real_T));
        }

        std::memcpy(&TrialState->cEq[0], &full_loop_B.j_l[0], 52U * sizeof
                    (real_T));
        MeritFunction->phiFullStep = full_loop_computeMeritFcn
          (MeritFunction->penaltyParam, full_loop_B.d_p, full_loop_B.h_data_n,
           full_loop_B.mIneq_i, full_loop_B.j_l, full_loop_B.Flags.fevalOK);
      }

      if ((full_loop_B.u1_i == 1) && b && full_loop_B.Flags.fevalOK &&
          (MeritFunction->phi < MeritFunction->phiFullStep) &&
          (TrialState->sqpFval < TrialState->sqpFval_old)) {
        full_loop_B.Flags.stepType = 3;
        full_loop_B.Flags.stepAccepted = false;
      } else {
        full_loop_linesearch(&full_loop_B.Flags.fevalOK, bineq_data,
                             WorkingSet->nVar, WorkingSet->ldA,
                             WorkingSet->Aineq.data, TrialState,
                             MeritFunction->penaltyParam, MeritFunction->phi,
                             MeritFunction->phiPrimePlus,
                             MeritFunction->phiFullStep,
                             &FcnEvaluator->objfun.tunableEnvironment.f1,
                             &FcnEvaluator->nonlcon.tunableEnvironment.f1,
                             FcnEvaluator->mCineq, (full_loop_B.u1_i == 3) && b,
                             &full_loop_B.d_p, &full_loop_B.loop_ub_a);
        TrialState->steplength = full_loop_B.d_p;
        if (full_loop_B.loop_ub_a > 0) {
          full_loop_B.Flags.stepAccepted = true;
        } else {
          full_loop_B.Flags.failedLineSearch = true;
        }
      }
    }

    if (full_loop_B.Flags.stepAccepted && (!full_loop_B.Flags.failedLineSearch))
    {
      full_loop_B.u1_i = 0;
      while (full_loop_B.u1_i <= full_loop_B.nVar - 1) {
        TrialState->xstarsqp[full_loop_B.u1_i] = TrialState->
          xstarsqp_old[full_loop_B.u1_i] + TrialState->
          delta_x.data[full_loop_B.u1_i];
        full_loop_B.u1_i++;
      }

      full_loop_B.u1_i = 0;
      while (full_loop_B.u1_i <= full_loop_B.mConstr) {
        TrialState->lambdasqp.data[full_loop_B.u1_i] += (TrialState->
          lambda.data[full_loop_B.u1_i] - TrialState->
          lambdasqp.data[full_loop_B.u1_i]) * TrialState->steplength;
        full_loop_B.u1_i++;
      }

      full_loop_saveState(TrialState);
      full_loop_B.Flags.gradOK = true;
      full_loop_B.g_size = TrialState->grad.size;
      full_loop_B.loop_ub_a = TrialState->grad.size;
      if (0 <= full_loop_B.loop_ub_a - 1) {
        std::memcpy(&full_loop_B.g_data_e[0], &TrialState->grad.data[0],
                    full_loop_B.loop_ub_a * sizeof(real_T));
      }

      full_loop_B.h_size = TrialState->cIneq.size;
      full_loop_B.loop_ub_a = TrialState->cIneq.size;
      if (0 <= full_loop_B.loop_ub_a - 1) {
        std::memcpy(&full_loop_B.h_data_n[0], &TrialState->cIneq.data[0],
                    full_loop_B.loop_ub_a * sizeof(real_T));
      }

      std::memcpy(&full_loop_B.j_l[0], &TrialState->cEq[0], 52U * sizeof(real_T));
      full_loop_B.k_size[0] = WorkingSet->Aineq.size[0];
      full_loop_B.k_size[1] = WorkingSet->Aineq.size[1];
      full_loop_B.loop_ub_a = WorkingSet->Aineq.size[0] * WorkingSet->
        Aineq.size[1] - 1;
      if (0 <= full_loop_B.loop_ub_a) {
        std::memcpy(&full_loop_B.k_data[0], &WorkingSet->Aineq.data[0],
                    (full_loop_B.loop_ub_a + 1) * sizeof(real_T));
      }

      full_loop_B.l_size[0] = WorkingSet->Aeq.size[0];
      full_loop_B.l_size[1] = 52;
      full_loop_B.loop_ub_a = WorkingSet->Aeq.size[0] * WorkingSet->Aeq.size[1]
        - 1;
      if (0 <= full_loop_B.loop_ub_a) {
        std::memcpy(&full_loop_B.l_data[0], &WorkingSet->Aeq.data[0],
                    (full_loop_B.loop_ub_a + 1) * sizeof(real_T));
      }

      std::memcpy(&full_loop_B.TrialState_c[0], &TrialState->xstarsqp[0], 69U *
                  sizeof(real_T));
      evalObjAndConstrAndDerivatives
        (FcnEvaluator->objfun.tunableEnvironment.f1.x,
         FcnEvaluator->objfun.tunableEnvironment.f1.lastMV,
         FcnEvaluator->objfun.tunableEnvironment.f1.ref,
         FcnEvaluator->objfun.tunableEnvironment.f1.OutputWeights,
         FcnEvaluator->objfun.tunableEnvironment.f1.MVWeights,
         FcnEvaluator->objfun.tunableEnvironment.f1.MVRateWeights,
         FcnEvaluator->objfun.tunableEnvironment.f1.MVScaledTarget,
         FcnEvaluator->nonlcon.tunableEnvironment.f1.x,
         FcnEvaluator->nonlcon.tunableEnvironment.f1.OutputMin,
         FcnEvaluator->nonlcon.tunableEnvironment.f1.OutputMax,
         FcnEvaluator->mCineq, full_loop_B.TrialState_c, full_loop_B.g_data_e,
         full_loop_B.h_data_n, TrialState->iNonIneq0, full_loop_B.j_l,
         full_loop_B.k_data, full_loop_B.k_size, TrialState->iNonIneq0,
         full_loop_B.l_data, full_loop_B.l_size, &TrialState->sqpFval,
         &full_loop_B.u1_i);
      TrialState->grad.size = full_loop_B.g_size;
      full_loop_B.loop_ub_a = full_loop_B.g_size;
      if (0 <= full_loop_B.loop_ub_a - 1) {
        std::memcpy(&TrialState->grad.data[0], &full_loop_B.g_data_e[0],
                    full_loop_B.loop_ub_a * sizeof(real_T));
      }

      TrialState->cIneq.size = full_loop_B.h_size;
      full_loop_B.loop_ub_a = full_loop_B.h_size;
      if (0 <= full_loop_B.loop_ub_a - 1) {
        std::memcpy(&TrialState->cIneq.data[0], &full_loop_B.h_data_n[0],
                    full_loop_B.loop_ub_a * sizeof(real_T));
      }

      std::memcpy(&TrialState->cEq[0], &full_loop_B.j_l[0], 52U * sizeof(real_T));
      WorkingSet->Aineq.size[0] = full_loop_B.k_size[0];
      WorkingSet->Aineq.size[1] = full_loop_B.k_size[1];
      full_loop_B.loop_ub_a = full_loop_B.k_size[0] * full_loop_B.k_size[1] - 1;
      if (0 <= full_loop_B.loop_ub_a) {
        std::memcpy(&WorkingSet->Aineq.data[0], &full_loop_B.k_data[0],
                    (full_loop_B.loop_ub_a + 1) * sizeof(real_T));
      }

      WorkingSet->Aeq.size[0] = full_loop_B.l_size[0];
      WorkingSet->Aeq.size[1] = 52;
      full_loop_B.loop_ub_a = full_loop_B.l_size[0] * full_loop_B.l_size[1] - 1;
      if (0 <= full_loop_B.loop_ub_a) {
        std::memcpy(&WorkingSet->Aeq.data[0], &full_loop_B.l_data[0],
                    (full_loop_B.loop_ub_a + 1) * sizeof(real_T));
      }

      TrialState->FunctionEvaluations++;
      full_loop_B.Flags.fevalOK = (full_loop_B.u1_i == 1);
    } else {
      full_loop_revertSolution(TrialState);
    }

    full_loop_test_exit_a(&full_loop_B.Flags, memspace, MeritFunction,
                          fscales_lineq_constraint_size,
                          fscales_cineq_constraint_size, WorkingSet, TrialState,
                          QRManager, lb);
    if ((!full_loop_B.Flags.done) && full_loop_B.Flags.stepAccepted) {
      full_loop_B.Flags.stepAccepted = false;
      full_loop_B.Flags.stepType = 1;
      full_loop_B.Flags.failedLineSearch = false;
      full_loop_computeDeltaLag(full_loop_B.nVar, WorkingSet->ldA,
        TrialState->mNonlinIneq, TrialState->delta_gradLag.data,
        TrialState->grad.data, WorkingSet->Aineq.data, TrialState->iNonIneq0,
        WorkingSet->Aeq.data, TrialState->grad_old.data,
        TrialState->JacCineqTrans_old.data, TrialState->JacCeqTrans_old.data,
        TrialState->lambdasqp.data, (full_loop_B.mFixed_k +
        TrialState->iNonIneq0) + 52, full_loop_B.mFixed_k + 1);
      full_loop_saveJacobian(TrialState, full_loop_B.nVar, full_loop_B.mIneq_i,
        WorkingSet->Aineq.data, TrialState->iNonIneq0, WorkingSet->Aeq.data,
        WorkingSet->ldA);
      full_loop_BFGSUpdate(full_loop_B.nVar, Hessian, TrialState->delta_x.data,
                           TrialState->delta_gradLag.data,
                           memspace->workspace_double.data);
      TrialState->sqpIterations++;
    }
  }
}

// Function for MATLAB Function: '<S60>/NLMPC'
void full_loopModelClass::full_loop_fillOutputStruct(int32_T
  TrialState_FunctionEvaluations, int32_T TrialState_sqpIterations, real_T
  TrialState_steplength, const real_T TrialState_delta_x_data[], real_T
  MeritFunction_nlpPrimalFeasErro, real_T MeritFunction_firstOrderOpt, real_T
  *output_iterations, real_T *output_funcCount, char_T output_algorithm[3],
  real_T *output_constrviolation, real_T *output_stepsize, real_T
  *output_lssteplength, real_T *output_firstorderopt)
{
  real_T y;
  real_T scale;
  real_T absxk;
  real_T t;
  int32_T k;
  *output_iterations = TrialState_sqpIterations;
  *output_funcCount = TrialState_FunctionEvaluations;
  output_algorithm[0] = 's';
  output_algorithm[1] = 'q';
  output_algorithm[2] = 'p';
  *output_constrviolation = MeritFunction_nlpPrimalFeasErro;
  y = 0.0;
  scale = 3.3121686421112381E-170;
  for (k = 0; k < 69; k++) {
    absxk = std::abs(TrialState_delta_x_data[k]);
    if (absxk > scale) {
      t = scale / absxk;
      y = y * t * t + 1.0;
      scale = absxk;
    } else {
      t = absxk / scale;
      y += t * t;
    }
  }

  *output_stepsize = scale * std::sqrt(y);
  *output_lssteplength = TrialState_steplength;
  *output_firstorderopt = MeritFunction_firstOrderOpt;
}

// Function for MATLAB Function: '<S60>/NLMPC'
void full_loopModelClass::full_loop_fmincon(const
  s_A0rUWcsbMx3S06V1NlippE_full_T *fun_tunableEnvironment_f1, const
  sACkMJ1zT2VJOHR6eMwwEPC_full__T *fun_tunableEnvironment_f2, const real_T x0[69],
  const real_T Aineq_data[], const int32_T Aineq_size[2], const real_T
  bineq_data[], const int32_T *bineq_size, const real_T lb[69], const
  s_A0rUWcsbMx3S06V1NlippE_full_T *nonlcon_tunableEnvironment_f1, const
  sACkMJ1zT2VJOHR6eMwwEPC_full__T *nonlcon_tunableEnvironment_f2, real_T x[69],
  real_T *fval, real_T *exitflag, real_T *output_iterations, real_T
  *output_constrviolation)
{
  char_T expl_temp[3];
  full_loop_B.mNonlinIneq = full_loop_checkNonlinearInputs(x0,
    nonlcon_tunableEnvironment_f1->x, nonlcon_tunableEnvironment_f1->OutputMin,
    nonlcon_tunableEnvironment_f1->OutputMax);
  full_loop_B.mIneq = *bineq_size + full_loop_B.mNonlinIneq;
  full_loop_B.mConstrMax = (full_loop_B.mIneq + full_loop_B.mIneq) + 295;
  full_loop_B.maxDims = full_loop_B.mIneq + 174;
  if (full_loop_B.maxDims <= full_loop_B.mConstrMax) {
    full_loop_B.maxDims = full_loop_B.mConstrMax;
  }

  full_loop_factoryConstruct(full_loop_B.mIneq + 174, full_loop_B.mConstrMax,
    full_loop_B.mIneq, full_loop_B.mNonlinIneq, &full_loop_B.TrialState);
  full_loop_xcopy(x0, full_loop_B.TrialState.xstarsqp);
  full_loop_factoryConstruct_c(fun_tunableEnvironment_f1,
    fun_tunableEnvironment_f2, nonlcon_tunableEnvironment_f1,
    nonlcon_tunableEnvironment_f2, full_loop_B.mNonlinIneq,
    &full_loop_B.FcnEvaluator);
  full_loop_B.memspace.workspace_double.size[0] = full_loop_B.maxDims;
  full_loop_B.memspace.workspace_double.size[1] = full_loop_B.mIneq + 174;
  full_loop_B.memspace.workspace_int.size = full_loop_B.maxDims;
  full_loop_B.memspace.workspace_sort.size = full_loop_B.maxDims;
  full_loop_compressBounds(full_loop_B.indexLB, lb, &full_loop_B.mLB,
    &full_loop_B.mUB, &full_loop_B.mFixed);
  full_lo_factoryConstruct_cntp2b(full_loop_B.mIneq, *bineq_size, Aineq_data,
    Aineq_size, full_loop_B.mLB, full_loop_B.indexLB, full_loop_B.mUB,
    full_loop_B.indexUB, full_loop_B.mFixed, full_loop_B.indexUB,
    full_loop_B.mIneq + 174, full_loop_B.mConstrMax, &full_loop_B.WorkingSet);
  full_loop_B.mConstrMax = 0;
  while (full_loop_B.mConstrMax <= full_loop_B.mLB - 1) {
    full_loop_B.b_dl =
      full_loop_B.TrialState.xstarsqp[full_loop_B.WorkingSet.indexLB.data[full_loop_B.mConstrMax]
      - 1];
    full_loop_B.expl_temp_j =
      lb[full_loop_B.WorkingSet.indexLB.data[full_loop_B.mConstrMax] - 1];
    if ((full_loop_B.b_dl > full_loop_B.expl_temp_j) || rtIsNaN
        (full_loop_B.expl_temp_j)) {
      full_loop_B.TrialState.xstarsqp[full_loop_B.WorkingSet.indexLB.data[full_loop_B.mConstrMax]
        - 1] = full_loop_B.b_dl;
    } else {
      full_loop_B.TrialState.xstarsqp[full_loop_B.WorkingSet.indexLB.data[full_loop_B.mConstrMax]
        - 1] = full_loop_B.expl_temp_j;
    }

    full_loop_B.mConstrMax++;
  }

  full_loop_B.mConstrMax = 0;
  while (full_loop_B.mConstrMax <= full_loop_B.mUB - 1) {
    full_loop_B.b_dl =
      full_loop_B.TrialState.xstarsqp[full_loop_B.WorkingSet.indexUB.data[full_loop_B.mConstrMax]
      - 1];
    if (full_loop_B.b_dl < (rtInf)) {
      full_loop_B.TrialState.xstarsqp[full_loop_B.WorkingSet.indexUB.data[full_loop_B.mConstrMax]
        - 1] = full_loop_B.b_dl;
    } else {
      full_loop_B.TrialState.xstarsqp[full_loop_B.WorkingSet.indexUB.data[full_loop_B.mConstrMax]
        - 1] = (rtInf);
    }

    full_loop_B.mConstrMax++;
  }

  full_loop_B.mConstrMax = 0;
  while (full_loop_B.mConstrMax <= full_loop_B.mFixed - 1) {
    full_loop_B.TrialState.xstarsqp[full_loop_B.WorkingSet.indexFixed.data[full_loop_B.mConstrMax]
      - 1] = (rtInf);
    full_loop_B.mConstrMax++;
  }

  full_loop_B.c_size_d = full_loop_B.TrialState.grad.size;
  full_loop_B.mConstrMax = full_loop_B.TrialState.grad.size;
  if (0 <= full_loop_B.mConstrMax - 1) {
    std::memcpy(&full_loop_B.c_data_j[0], &full_loop_B.TrialState.grad.data[0],
                full_loop_B.mConstrMax * sizeof(real_T));
  }

  full_loop_B.d_size_m = full_loop_B.TrialState.cIneq.size;
  full_loop_B.mConstrMax = full_loop_B.TrialState.cIneq.size;
  if (0 <= full_loop_B.mConstrMax - 1) {
    std::memcpy(&full_loop_B.d_data_o[0], &full_loop_B.TrialState.cIneq.data[0],
                full_loop_B.mConstrMax * sizeof(real_T));
  }

  std::memcpy(&full_loop_B.e_n[0], &full_loop_B.TrialState.cEq[0], 52U * sizeof
              (real_T));
  full_loop_B.f_size[0] = full_loop_B.WorkingSet.Aineq.size[0];
  full_loop_B.f_size[1] = full_loop_B.WorkingSet.Aineq.size[1];
  full_loop_B.mConstrMax = full_loop_B.WorkingSet.Aineq.size[0] *
    full_loop_B.WorkingSet.Aineq.size[1] - 1;
  if (0 <= full_loop_B.mConstrMax) {
    std::memcpy(&full_loop_B.f_data[0], &full_loop_B.WorkingSet.Aineq.data[0],
                (full_loop_B.mConstrMax + 1) * sizeof(real_T));
  }

  full_loop_B.WorkingSet.Aeq.size[1] = 52;
  evalObjAndConstrAndDerivatives
    (full_loop_B.FcnEvaluator.objfun.tunableEnvironment.f1.x,
     full_loop_B.FcnEvaluator.objfun.tunableEnvironment.f1.lastMV,
     full_loop_B.FcnEvaluator.objfun.tunableEnvironment.f1.ref,
     full_loop_B.FcnEvaluator.objfun.tunableEnvironment.f1.OutputWeights,
     full_loop_B.FcnEvaluator.objfun.tunableEnvironment.f1.MVWeights,
     full_loop_B.FcnEvaluator.objfun.tunableEnvironment.f1.MVRateWeights,
     full_loop_B.FcnEvaluator.objfun.tunableEnvironment.f1.MVScaledTarget,
     full_loop_B.FcnEvaluator.nonlcon.tunableEnvironment.f1.x,
     full_loop_B.FcnEvaluator.nonlcon.tunableEnvironment.f1.OutputMin,
     full_loop_B.FcnEvaluator.nonlcon.tunableEnvironment.f1.OutputMax,
     full_loop_B.FcnEvaluator.mCineq, full_loop_B.TrialState.xstarsqp,
     full_loop_B.c_data_j, full_loop_B.d_data_o,
     full_loop_B.TrialState.iNonIneq0, full_loop_B.e_n, full_loop_B.f_data,
     full_loop_B.f_size, full_loop_B.TrialState.iNonIneq0,
     full_loop_B.WorkingSet.Aeq.data, full_loop_B.WorkingSet.Aeq.size,
     &full_loop_B.b_dl, &full_loop_B.mConstrMax);
  full_loop_B.TrialState.sqpFval = full_loop_B.b_dl;
  full_loop_B.TrialState.grad.size = full_loop_B.c_size_d;
  full_loop_B.mConstrMax = full_loop_B.c_size_d;
  if (0 <= full_loop_B.mConstrMax - 1) {
    std::memcpy(&full_loop_B.TrialState.grad.data[0], &full_loop_B.c_data_j[0],
                full_loop_B.mConstrMax * sizeof(real_T));
  }

  full_loop_B.WorkingSet.Aineq.size[0] = full_loop_B.f_size[0];
  full_loop_B.WorkingSet.Aineq.size[1] = full_loop_B.f_size[1];
  full_loop_B.mConstrMax = full_loop_B.f_size[0] * full_loop_B.f_size[1] - 1;
  if (0 <= full_loop_B.mConstrMax) {
    std::memcpy(&full_loop_B.WorkingSet.Aineq.data[0], &full_loop_B.f_data[0],
                (full_loop_B.mConstrMax + 1) * sizeof(real_T));
  }

  full_loop_B.TrialState.FunctionEvaluations = 1;
  full_loo_computeLinearResiduals(full_loop_B.TrialState.xstarsqp,
    full_loop_B.d_data_o, &full_loop_B.d_size_m, *bineq_size, full_loop_B.f_data,
    bineq_data, full_loop_B.WorkingSet.ldA);
  full_loop_B.TrialState.cIneq.size = full_loop_B.d_size_m;
  full_loop_B.mConstrMax = full_loop_B.d_size_m;
  if (0 <= full_loop_B.mConstrMax - 1) {
    std::memcpy(&full_loop_B.TrialState.cIneq.data[0], &full_loop_B.d_data_o[0],
                full_loop_B.mConstrMax * sizeof(real_T));
  }

  std::memcpy(&full_loop_B.TrialState.cEq[0], &full_loop_B.e_n[0], 52U * sizeof
              (real_T));
  full_l_updateWorkingSetForNewQP(x0, &full_loop_B.WorkingSet, full_loop_B.mIneq,
    full_loop_B.d_data_o, full_loop_B.e_n, full_loop_B.mLB, lb, full_loop_B.mUB,
    full_loop_B.mFixed);
  full_loop_initActiveSet(&full_loop_B.WorkingSet);
  full_l_factoryConstruct_cntp2b1(full_loop_B.b_dl, full_loop_B.d_data_o,
    full_loop_B.mIneq, full_loop_B.e_n, &full_loop_B.MeritFunction);
  full_loop_factoryConstruct_cn(fun_tunableEnvironment_f1,
    fun_tunableEnvironment_f2, nonlcon_tunableEnvironment_f1,
    nonlcon_tunableEnvironment_f2, full_loop_B.mNonlinIneq, lb,
    &full_loop_B.FiniteDifferences);
  full_loop_factoryConstruct_cnt(full_loop_B.maxDims, full_loop_B.maxDims,
    &full_loop_B.QRManager);
  full_loop_factoryConstruct_cntp(full_loop_B.maxDims,
    full_loop_B.CholManager.FMat.size, &full_loop_B.CholManager.ldm,
    &full_loop_B.CholManager.ndims, &full_loop_B.CholManager.info);
  full_loo_factoryConstruct_cntp2(full_loop_B.mIneq + 174,
    &full_loop_B.QPObjective);
  full_loop_setQuadratic(&full_loop_B.QPObjective, 69);
  full_loop_B.tmp_size_gm = *bineq_size;
  full_loop_B.tmp_size_ij = full_loop_B.mNonlinIneq;
  full_loop_driver(bineq_data, lb, &full_loop_B.TrialState,
                   &full_loop_B.MeritFunction, &full_loop_B.FcnEvaluator,
                   &full_loop_B.memspace, &full_loop_B.WorkingSet,
                   &full_loop_B.QRManager, &full_loop_B.CholManager,
                   &full_loop_B.QPObjective, &full_loop_B.tmp_size_gm,
                   &full_loop_B.tmp_size_ij, full_loop_B.unusedExpr);
  std::memcpy(&x[0], &full_loop_B.TrialState.xstarsqp[0], 69U * sizeof(real_T));
  *fval = full_loop_B.TrialState.sqpFval;
  *exitflag = full_loop_B.TrialState.sqpExitFlag;
  full_loop_fillOutputStruct(full_loop_B.TrialState.FunctionEvaluations,
    full_loop_B.TrialState.sqpIterations, full_loop_B.TrialState.steplength,
    full_loop_B.TrialState.delta_x.data,
    full_loop_B.MeritFunction.nlpPrimalFeasError,
    full_loop_B.MeritFunction.firstOrderOpt, output_iterations,
    &full_loop_B.b_dl, expl_temp, output_constrviolation,
    &full_loop_B.expl_temp_j, &full_loop_B.expl_temp_n,
    &full_loop_B.expl_temp_ju);
}

// Function for MATLAB Function: '<S60>/NLMPC'
void full_loopModelClass::full_loop_znlmpc_computeInfo(const real_T X[65], const
  real_T U[40], real_T e, real_T cost, real_T ExitFlag, real_T iter, real_T X0
  [52], real_T MV0[32], real_T *Slack0, sscAEMcz7TPKHyH2uh3imDC_full__T *info)
{
  int32_T i;
  int32_T MV0_tmp;
  int32_T X0_tmp;
  for (i = 0; i < 8; i++) {
    MV0_tmp = i << 2;
    MV0[MV0_tmp] = U[5 * i + 1];
    MV0[MV0_tmp + 1] = U[5 * i + 2];
    MV0[MV0_tmp + 2] = U[5 * i + 3];
    MV0[MV0_tmp + 3] = U[5 * i + 4];
  }

  for (i = 0; i < 13; i++) {
    MV0_tmp = i << 2;
    X0[MV0_tmp] = X[5 * i + 2];
    X0[MV0_tmp + 1] = X[5 * i + 3];
    X0_tmp = 5 * i + 4;
    X0[MV0_tmp + 2] = X[X0_tmp];
    X0[MV0_tmp + 3] = X[X0_tmp];
  }

  if ((0.0 > e) || rtIsNaN(e)) {
    *Slack0 = 0.0;
  } else {
    *Slack0 = e;
  }

  std::memcpy(&info->MVopt[0], &U[0], 40U * sizeof(real_T));
  std::memcpy(&info->Xopt[0], &X[0], 65U * sizeof(real_T));
  std::memcpy(&info->Yopt[0], &X[0], 65U * sizeof(real_T));
  for (i = 0; i < 5; i++) {
    info->Topt[i] = 0.25 * static_cast<real_T>(i);
  }

  info->Slack = e;
  info->ExitFlag = ExitFlag;
  info->Iterations = iter;
  info->Cost = cost;
}

boolean_T full_loopModelClass::full_loop_isequal_p4(const real_T varargin_1[3],
  const real_T varargin_2[3])
{
  boolean_T p;
  boolean_T p_0;
  int32_T b_k;
  boolean_T exitg1;
  p = false;
  p_0 = true;
  b_k = 0;
  exitg1 = false;
  while ((!exitg1) && (b_k < 3)) {
    if (!(varargin_1[b_k] == varargin_2[b_k])) {
      p_0 = false;
      exitg1 = true;
    } else {
      b_k++;
    }
  }

  if (p_0) {
    p = true;
  }

  return p;
}

boolean_T full_loopModelClass::full_loop_isequal_p43(const real_T varargin_1[6],
  const real_T varargin_2[6])
{
  boolean_T p;
  boolean_T p_0;
  int32_T b_k;
  boolean_T exitg1;
  p = false;
  p_0 = true;
  b_k = 0;
  exitg1 = false;
  while ((!exitg1) && (b_k < 6)) {
    if (!(varargin_1[b_k] == varargin_2[b_k])) {
      p_0 = false;
      exitg1 = true;
    } else {
      b_k++;
    }
  }

  if (p_0) {
    p = true;
  }

  return p;
}

void full_loopModelClass::full_loop_AUVModelMatrices(const real_T in1[13], const
  real_T in2[41], real_T M[36], real_T C[36], real_T D[36], real_T Gq[6])
{
  real_T t62;
  real_T C_tmp;
  real_T C_tmp_0;
  real_T t65_tmp;
  real_T t65_tmp_0;

  // AUVMODELMATRICES
  //     [M,C,D,GQ] = AUVMODELMATRICES(IN1,IN2)
  //     This function was generated by the Symbolic Math Toolbox version 8.5.
  //     05-May-2021 19:59:14
  full_loop_B.t2_f = in2[6] * in1[10];
  full_loop_B.t3_f = in2[9] * in1[10];
  full_loop_B.t4_c = in2[12] * in1[10];
  full_loop_B.t5_d = in2[7] * in1[11];
  full_loop_B.t6_c = in2[10] * in1[11];
  full_loop_B.t7_b = in2[13] * in1[11];
  full_loop_B.t8_p = in2[8] * in1[12];
  full_loop_B.t9_h = in2[11] * in1[12];
  full_loop_B.t10_ei = in2[14] * in1[12];
  full_loop_B.t11_l = in2[36] * in1[10];
  full_loop_B.t12_h = in2[37] * in1[11];
  full_loop_B.t13_n = in2[15] * in2[0];
  full_loop_B.t14_k = in2[16] * in2[0];
  full_loop_B.t15_b = in2[17] * in2[0];
  full_loop_B.t16_o = in2[38] * in1[12];
  full_loop_B.t17_n = in2[15] * in1[10];
  full_loop_B.t21_f = in2[16] * in1[11];
  full_loop_B.t25_g = in2[17] * in1[12];
  full_loop_B.t26_d = in2[33] * in1[7];
  full_loop_B.t27_d = in2[34] * in1[8];
  full_loop_B.t28_e = in2[35] * in1[9];
  full_loop_B.t29_c = in2[39] * in2[1];
  M[0] = -in2[33] + in2[0];
  M[1] = 0.0;
  M[2] = 0.0;
  M[3] = 0.0;
  M[4] = full_loop_B.t15_b;
  M[5] = -full_loop_B.t14_k;
  M[6] = 0.0;
  M[7] = -in2[34] + in2[0];
  M[8] = 0.0;
  M[9] = -full_loop_B.t15_b;
  M[10] = 0.0;
  M[11] = full_loop_B.t13_n;
  M[12] = 0.0;
  M[13] = 0.0;
  M[14] = -in2[35] + in2[0];
  M[15] = full_loop_B.t14_k;
  M[16] = -full_loop_B.t13_n;
  M[17] = 0.0;
  M[18] = 0.0;
  M[19] = -full_loop_B.t15_b;
  M[20] = full_loop_B.t14_k;
  M[21] = in2[6] - in2[36];
  M[22] = in2[9];
  M[23] = in2[12];
  M[24] = full_loop_B.t15_b;
  M[25] = 0.0;
  M[26] = -full_loop_B.t13_n;
  M[27] = in2[7];
  M[28] = in2[10] - in2[37];
  M[29] = in2[13];
  M[30] = -full_loop_B.t14_k;
  M[31] = full_loop_B.t13_n;
  M[32] = 0.0;
  M[33] = in2[8];
  M[34] = in2[11];
  M[35] = in2[14] - in2[38];
  t65_tmp = in1[5] * in1[6];
  t65_tmp_0 = in1[4] * in1[3];
  full_loop_B.t65 = t65_tmp * 2.0 + t65_tmp_0 * 2.0;
  full_loop_B.t56_a = (in2[17] * in1[11] + in1[7]) * in2[0];
  full_loop_B.t57_h = (in2[16] * in1[10] + in1[9]) * in2[0];
  full_loop_B.t58 = (in2[15] * in1[12] + in1[8]) * in2[0];
  t62 = (full_loop_B.t17_n + full_loop_B.t21_f) * in2[0];
  full_loop_B.t17_n = (full_loop_B.t17_n + full_loop_B.t25_g) * in2[0];
  full_loop_B.t21_f = (full_loop_B.t21_f + full_loop_B.t25_g) * in2[0];
  C[0] = 0.0;
  C[1] = 0.0;
  C[2] = 0.0;
  C[3] = -full_loop_B.t21_f;
  full_loop_B.t25_g = in2[15] * in1[11] - in1[9];
  C[4] = full_loop_B.t25_g * in2[0] + full_loop_B.t28_e;
  C[5] = -full_loop_B.t27_d + full_loop_B.t58;
  C[6] = 0.0;
  C[7] = 0.0;
  C[8] = 0.0;
  C[9] = -full_loop_B.t28_e + full_loop_B.t57_h;
  C[10] = -full_loop_B.t17_n;
  C_tmp_0 = in2[16] * in1[12] - in1[7];
  C[11] = C_tmp_0 * in2[0] + full_loop_B.t26_d;
  C[12] = 0.0;
  C[13] = 0.0;
  C[14] = 0.0;
  C_tmp = in2[17] * in1[10] - in1[8];
  C[15] = C_tmp * in2[0] + full_loop_B.t27_d;
  C[16] = -full_loop_B.t26_d + full_loop_B.t56_a;
  C[17] = -t62;
  C[18] = full_loop_B.t21_f;
  C[19] = full_loop_B.t28_e - full_loop_B.t57_h;
  C[20] = C_tmp * -in2[0] + -full_loop_B.t27_d;
  C[21] = 0.0;
  C[22] = ((-full_loop_B.t4_c - full_loop_B.t7_b) - full_loop_B.t10_ei) +
    full_loop_B.t16_o;
  C[23] = ((full_loop_B.t3_f + full_loop_B.t6_c) + full_loop_B.t9_h) -
    full_loop_B.t12_h;
  C[24] = full_loop_B.t25_g * -in2[0] + -full_loop_B.t28_e;
  C[25] = full_loop_B.t17_n;
  C[26] = full_loop_B.t26_d - full_loop_B.t56_a;
  C[27] = ((full_loop_B.t4_c + full_loop_B.t7_b) + full_loop_B.t10_ei) -
    full_loop_B.t16_o;
  C[28] = 0.0;
  C[29] = ((-full_loop_B.t2_f - full_loop_B.t5_d) - full_loop_B.t8_p) +
    full_loop_B.t11_l;
  C[30] = full_loop_B.t27_d - full_loop_B.t58;
  C[31] = C_tmp_0 * -in2[0] + -full_loop_B.t26_d;
  C[32] = t62;
  C[33] = ((-full_loop_B.t3_f - full_loop_B.t6_c) - full_loop_B.t9_h) +
    full_loop_B.t12_h;
  C[34] = ((full_loop_B.t2_f + full_loop_B.t5_d) + full_loop_B.t8_p) -
    full_loop_B.t11_l;
  C[35] = 0.0;
  D[0] = in2[3] * in2[27] * in2[39] * std::abs(in1[7]) / 2.0 + in2[21];
  D[1] = 0.0;
  D[2] = 0.0;
  D[3] = 0.0;
  D[4] = 0.0;
  D[5] = 0.0;
  D[6] = 0.0;
  D[7] = in2[4] * in2[28] * in2[39] * std::abs(in1[8]) / 2.0 + in2[22];
  D[8] = 0.0;
  D[9] = 0.0;
  D[10] = 0.0;
  D[11] = 0.0;
  D[12] = 0.0;
  D[13] = 0.0;
  D[14] = in2[5] * in2[29] * in2[39] * std::abs(in1[9]) / 2.0 + in2[23];
  D[15] = 0.0;
  D[16] = 0.0;
  D[17] = 0.0;
  D[18] = 0.0;
  D[19] = 0.0;
  D[20] = 0.0;
  D[21] = in2[5] * in2[30] * in2[39] * std::abs(in1[10]) / 2.0 + in2[24];
  D[22] = 0.0;
  D[23] = 0.0;
  D[24] = 0.0;
  D[25] = 0.0;
  D[26] = 0.0;
  D[27] = 0.0;
  D[28] = in2[5] * in2[31] * in2[39] * std::abs(in1[11]) / 2.0 + in2[25];
  D[29] = 0.0;
  D[30] = 0.0;
  D[31] = 0.0;
  D[32] = 0.0;
  D[33] = 0.0;
  D[34] = 0.0;
  D[35] = in2[4] * in2[32] * in2[39] * std::abs(in1[12]) / 2.0 + in2[26];
  full_loop_B.t5_d = in1[4] * in1[6];
  full_loop_B.t6_c = in1[5] * in1[3];
  full_loop_B.t2_f = full_loop_B.t5_d * 2.0 + -(full_loop_B.t6_c * 2.0);
  full_loop_B.t3_f = (in1[4] * in1[4] * 2.0 + in1[5] * in1[5] * 2.0) - 1.0;
  full_loop_B.t4_c = in2[40] * (in2[0] + -full_loop_B.t29_c);
  Gq[0] = (full_loop_B.t5_d - full_loop_B.t6_c) * full_loop_B.t4_c * -2.0;
  Gq[1] = (t65_tmp + t65_tmp_0) * full_loop_B.t4_c * -2.0;
  Gq[2] = full_loop_B.t4_c * full_loop_B.t3_f;
  full_loop_B.t4_c = in2[20] * in2[40];
  full_loop_B.t14_k *= in2[40];
  t65_tmp = in2[19] * in2[40] * -full_loop_B.t29_c;
  Gq[3] = ((in2[40] * full_loop_B.t15_b * full_loop_B.t65 + full_loop_B.t14_k *
            full_loop_B.t3_f) + full_loop_B.t4_c * -full_loop_B.t29_c *
           full_loop_B.t65) + t65_tmp * full_loop_B.t3_f;
  full_loop_B.t13_n = in2[40] * -full_loop_B.t13_n;
  t65_tmp_0 = in2[18] * in2[40] * full_loop_B.t29_c;
  Gq[4] = ((full_loop_B.t13_n * full_loop_B.t3_f + in2[40] * -full_loop_B.t15_b *
            full_loop_B.t2_f) + t65_tmp_0 * full_loop_B.t3_f) + full_loop_B.t4_c
    * full_loop_B.t29_c * full_loop_B.t2_f;
  Gq[5] = ((full_loop_B.t14_k * full_loop_B.t2_f + full_loop_B.t13_n *
            full_loop_B.t65) + t65_tmp_0 * full_loop_B.t65) + t65_tmp *
    full_loop_B.t2_f;
}

// Function for MATLAB Function: '<S1>/AUV State Equation'
real_T full_loopModelClass::full_loop_erf(real_T x)
{
  real_T y;
  real_T absx;
  real_T z;
  real_T s;
  real_T R;
  int32_T e;

  // ========================== COPYRIGHT NOTICE ============================
  //  The algorithms for calculating ERF(X) and ERFC(X) are derived
  //  from FDLIBM, which has the following notice:
  //
  //  Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.
  //
  //  Developed at SunSoft, a Sun Microsystems, Inc. business.
  //  Permission to use, copy, modify, and distribute this
  //  software is freely granted, provided that this notice
  //  is preserved.
  // =============================    END    ================================
  absx = std::abs(x);
  if (rtIsNaN(x)) {
    y = x;
  } else if (rtIsInf(x)) {
    if (x < 0.0) {
      y = -1.0;
    } else {
      y = 1.0;
    }
  } else if (absx < 0.84375) {
    if (absx < 3.7252902984619141E-9) {
      if (absx < 2.8480945388892178E-306) {
        y = (8.0 * x + 1.0270333367641007 * x) * 0.125;
      } else {
        y = 0.12837916709551259 * x + x;
      }
    } else {
      z = x * x;
      y = ((((z * -2.3763016656650163E-5 + -0.0057702702964894416) * z +
             -0.02848174957559851) * z + -0.3250421072470015) * z +
           0.12837916709551256) / (((((z * -3.9602282787753681E-6 +
        0.00013249473800432164) * z + 0.0050813062818757656) * z +
        0.0650222499887673) * z + 0.39791722395915535) * z + 1.0) * x + x;
    }
  } else if (absx < 1.25) {
    if (x >= 0.0) {
      y = (((((((absx - 1.0) * -0.0021663755948687908 + 0.035478304325618236) *
               (absx - 1.0) + -0.11089469428239668) * (absx - 1.0) +
              0.31834661990116175) * (absx - 1.0) + -0.37220787603570132) *
            (absx - 1.0) + 0.41485611868374833) * (absx - 1.0) +
           -0.0023621185607526594) / (((((((absx - 1.0) * 0.011984499846799107 +
        0.013637083912029051) * (absx - 1.0) + 0.12617121980876164) * (absx -
        1.0) + 0.071828654414196266) * (absx - 1.0) + 0.540397917702171) * (absx
        - 1.0) + 0.10642088040084423) * (absx - 1.0) + 1.0) +
        0.84506291151046753;
    } else {
      y = -0.84506291151046753 - (((((((absx - 1.0) * -0.0021663755948687908 +
        0.035478304325618236) * (absx - 1.0) + -0.11089469428239668) * (absx -
        1.0) + 0.31834661990116175) * (absx - 1.0) + -0.37220787603570132) *
        (absx - 1.0) + 0.41485611868374833) * (absx - 1.0) +
        -0.0023621185607526594) / (((((((absx - 1.0) * 0.011984499846799107 +
        0.013637083912029051) * (absx - 1.0) + 0.12617121980876164) * (absx -
        1.0) + 0.071828654414196266) * (absx - 1.0) + 0.540397917702171) * (absx
        - 1.0) + 0.10642088040084423) * (absx - 1.0) + 1.0);
    }
  } else if (absx > 6.0) {
    if (x < 0.0) {
      y = -1.0;
    } else {
      y = 1.0;
    }
  } else {
    s = 1.0 / (absx * absx);
    if (absx < 2.8571434020996094) {
      R = ((((((s * -9.8143293441691455 + -81.2874355063066) * s +
               -184.60509290671104) * s + -162.39666946257347) * s +
             -62.375332450326006) * s + -10.558626225323291) * s +
           -0.69385857270718176) * s + -0.0098649440348471482;
      s = (((((((s * -0.0604244152148581 + 6.5702497703192817) * s +
                108.63500554177944) * s + 429.00814002756783) * s +
              645.38727173326788) * s + 434.56587747522923) * s +
            137.65775414351904) * s + 19.651271667439257) * s + 1.0;
    } else {
      R = (((((s * -483.5191916086514 + -1025.0951316110772) * s +
              -637.56644336838963) * s + -160.63638485582192) * s +
            -17.757954917754752) * s + -0.799283237680523) * s +
        -0.0098649429247001;
      s = ((((((s * -22.440952446585818 + 474.52854120695537) * s +
               2553.0504064331644) * s + 3199.8582195085955) * s +
             1536.729586084437) * s + 325.79251299657392) * s +
           30.338060743482458) * s + 1.0;
    }

    if (!rtIsNaN(absx)) {
      z = frexp(absx, &e);
    } else {
      z = absx;
      e = 0;
    }

    z = std::floor(z * 2.097152E+6) / 2.097152E+6 * full_loop_rt_powd_snf(2.0,
      static_cast<real_T>(e));
    if (x < 0.0) {
      y = std::exp((z - absx) * (z + absx) + R / s) * std::exp(-z * z - 0.5625) /
        absx - 1.0;
    } else {
      y = 1.0 - std::exp((z - absx) * (z + absx) + R / s) * std::exp(-z * z -
        0.5625) / absx;
    }
  }

  return y;
}

// Function for MATLAB Function: '<S1>/AUV State Equation'
void full_loopModelClass::full_loo_AUVQuatPerturbedSimFcn(const real_T in1[13],
  const real_T in2[6], const real_T in3[8], real_T out1[13])
{
  full_loop_B.t8_j = in1[4] * in1[6];
  full_loop_B.t9_e = in1[5] * in1[6];
  full_loop_B.t10_e = in1[4] * in1[3];
  full_loop_B.t11_k = in1[5] * in1[3];
  full_loop_B.t12_k = in1[4] * in1[4];
  full_loop_B.t13_i = in1[5] * in1[5];
  full_loop_B.t15_e = in1[4] * in1[5] * 2.0;
  full_loop_B.t20_l = in1[6] * in1[3] * 2.0;
  full_loop_B.t32_l = in1[11] / 500.0;
  full_loop_B.t34_l = in1[10] / 1000.0;
  full_loop_B.t36 = in1[12] * 0.018;
  full_loop_B.t54 = in1[8] * 46.5656;
  full_loop_B.t57_o = in1[7] * 35.4148;
  full_loop_B.t59_i = in1[9] * 49.7195;
  full_loop_B.t16_e = full_loop_B.t8_j * 2.0;
  full_loop_B.t17_l = full_loop_B.t9_e * 2.0;
  full_loop_B.t18_n = full_loop_B.t10_e * 2.0;
  full_loop_B.t19_e = full_loop_B.t11_k * 2.0;
  full_loop_B.t21_c = full_loop_B.t12_k * 2.0;
  full_loop_B.t22_a = full_loop_B.t13_i * 2.0;
  full_loop_B.t23_m = in1[6] * in1[6] * 2.0;
  full_loop_B.t66 = full_loop_B.t32_l + full_loop_B.t36;
  full_loop_B.t32_l += full_loop_B.t34_l;
  full_loop_B.t69_c = full_loop_B.t34_l + full_loop_B.t36;
  full_loop_B.t78 = (in1[11] / 125.0 + in1[12] / 250.0) + in1[10] * 0.592;
  full_loop_B.t79 = in1[12] * 0.03395 + full_loop_B.t54;
  full_loop_B.t34_l = in1[11] * 0.6111 + full_loop_B.t57_o;
  full_loop_B.t36 = in1[10] * 0.0679 + full_loop_B.t59_i;
  full_loop_B.t40_f = full_loop_B.t17_l + full_loop_B.t18_n;
  full_loop_B.t44_m = full_loop_erf(in1[2] * 13.333333333333334 - 2.0);
  full_loop_B.t56_k = (full_loop_B.t21_c + full_loop_B.t22_a) - 1.0;
  full_loop_B.t54 = in1[10] * 0.6111 + -full_loop_B.t54;
  full_loop_B.t57_o = in1[12] * 0.0679 + -full_loop_B.t57_o;
  full_loop_B.t59_i = in1[11] * 0.03395 + -full_loop_B.t59_i;
  full_loop_B.t86 = (in1[10] / 250.0 + -(in1[11] / 1000.0)) + in1[12] * 1.8864;
  full_loop_B.t87 = (in1[10] / 125.0 + -(in1[12] / 1000.0)) + in1[11] * 1.7228;
  full_loop_B.t45_b = full_loop_B.t16_e + -full_loop_B.t19_e;
  full_loop_B.t74 = full_loop_B.t44_m * 0.0185;
  full_loop_B.t77 = full_loop_B.t44_m * 18.463;
  out1[0] = (((full_loop_B.t22_a + full_loop_B.t23_m) - 1.0) * -in1[7] +
             (full_loop_B.t16_e + full_loop_B.t19_e) * in1[9]) +
    (full_loop_B.t15_e - full_loop_B.t20_l) * in1[8];
  out1[1] = ((full_loop_B.t15_e + full_loop_B.t20_l) * in1[7] -
             ((full_loop_B.t21_c + full_loop_B.t23_m) - 1.0) * in1[8]) +
    (full_loop_B.t17_l - full_loop_B.t18_n) * in1[9];
  out1[2] = (full_loop_B.t45_b * in1[7] + full_loop_B.t40_f * in1[8]) -
    full_loop_B.t56_k * in1[9];
  out1[3] = (in1[4] * in1[10] * -0.5 - in1[5] * in1[11] / 2.0) - in1[6] * in1[12]
    / 2.0;
  out1[4] = (in1[3] * in1[10] / 2.0 - in1[6] * in1[11] / 2.0) + in1[5] * in1[12]
    / 2.0;
  out1[5] = (in1[6] * in1[10] / 2.0 + in1[3] * in1[11] / 2.0) - in1[4] * in1[12]
    / 2.0;
  out1[6] = (in1[5] * in1[10] * -0.5 + in1[4] * in1[11] / 2.0) + in1[3] * in1[12]
    / 2.0;
  full_loop_B.t15_e = in1[10] * full_loop_B.t66;
  full_loop_B.t20_l = (std::abs(in1[10]) * 24.333236 + 10.0) * in1[10];
  full_loop_B.t16_e = in1[10] * full_loop_B.t54;
  full_loop_B.t17_l = in1[10] * full_loop_B.t36;
  full_loop_B.t18_n = in1[10] * full_loop_B.t86;
  full_loop_B.t19_e = in1[10] * full_loop_B.t87;
  full_loop_B.t21_c = (std::abs(in1[11]) * 14.5708 + 7.0) * in1[11];
  full_loop_B.t22_a = in1[11] * full_loop_B.t69_c;
  full_loop_B.t23_m = in1[11] * full_loop_B.t78;
  full_loop_B.t44_m = in1[11] * full_loop_B.t34_l;
  full_loop_B.out1_tmp_h = in1[11] * full_loop_B.t59_i;
  full_loop_B.t86 *= in1[11];
  full_loop_B.out1_tmp_hc = in1[12] * full_loop_B.t32_l;
  full_loop_B.out1_tmp_h2 = (std::abs(in1[12]) * 11.19756 + 15.0) * in1[12];
  full_loop_B.t78 *= in1[12];
  full_loop_B.out1_tmp_b = in1[12] * full_loop_B.t79;
  full_loop_B.out1_tmp_bf = in1[12] * full_loop_B.t57_o;
  full_loop_B.t87 *= in1[12];
  full_loop_B.out1_tmp_d = (full_loop_B.t77 - 15.487) * (full_loop_B.t9_e +
    full_loop_B.t10_e);
  full_loop_B.t40_f *= full_loop_B.t74 + 0.0185;
  full_loop_B.out1_tmp_j = (full_loop_B.t77 - 15.487) * (full_loop_B.t8_j +
    -full_loop_B.t11_k);
  full_loop_B.t45_b *= full_loop_B.t74 + 0.0185;
  full_loop_B.t56_k *= full_loop_B.t77 - 15.487;
  full_loop_B.t66 *= in1[7];
  full_loop_B.t74 = (std::abs(in1[7]) * 70.0596 + 45.0) * in1[7];
  full_loop_B.t79 *= in1[7];
  full_loop_B.t59_i *= in1[7];
  full_loop_B.t69_c *= in1[8];
  full_loop_B.t77 = (std::abs(in1[8]) * 90.0196 + 60.0) * in1[8];
  full_loop_B.t36 *= in1[8];
  full_loop_B.t57_o *= in1[8];
  full_loop_B.t32_l *= in1[9];
  full_loop_B.out1_tmp_dl = (std::abs(in1[9]) * 110.155248 + 70.0) * in1[9];
  full_loop_B.t54 *= in1[9];
  full_loop_B.t34_l *= in1[9];
  out1[7] = ((((((((((((((((((((((((((((((((((((((((((((((((((((((((((in2[0] *
    0.028412641856654239 + in2[1] * 9.7955304455476024E-7) - in2[2] *
    7.0610075585606938E-6) + in2[3] * 0.0001311449245682505) - in2[4] *
    0.0100784985251745) + in2[5] * 0.00101706003393634) - in3[0] *
    0.0003322565616540353) + in3[1] * 1.9244079100769068E-21) + in3[2] *
    0.00033657158193525657) + in3[3] * 0.0003351332418415161) - in3[4] *
    0.001827658480130064) - in3[5] * 0.001820757985983108) + in3[6] *
    0.001862462071995808) + in3[7] * 0.001785954394117357) - full_loop_B.t8_j *
    0.1221939255472537) - full_loop_B.t9_e * 0.00089493638443480564) -
    full_loop_B.t10_e * 0.00089493638443480564) + full_loop_B.t11_k *
    0.1221939255472537) - full_loop_B.t12_k * 0.006887988795340182) -
    full_loop_B.t13_i * 0.006887988795340182) + in3[0] * 1.4142135623730951 *
    0.013887515836585439) + in3[1] * 1.4142135623730951 * 0.0136441441865844) +
    in3[2] * 1.4142135623730951 * 0.013887515836585439) + in3[3] *
    1.4142135623730951 * 0.013880102114457629) - full_loop_B.t15_e *
    0.96460919103341125) - full_loop_B.t20_l * 0.0001311449245682505) -
    full_loop_B.t16_e * 7.0610075585606938E-6) + full_loop_B.t17_l *
    9.7955304455476024E-7) - full_loop_B.t18_n * 0.0100784985251745) -
    full_loop_B.t19_e * 0.00101706003393634) + full_loop_B.t21_c *
    0.0100784985251745) - full_loop_B.t22_a * 3.3255825862634111E-5) +
    full_loop_B.t23_m * 0.00101706003393634) - full_loop_B.t44_m *
    7.0610075585606938E-6) + full_loop_B.out1_tmp_h * 0.028412641856654239) -
    full_loop_B.t86 * 0.0001311449245682505) + full_loop_B.out1_tmp_hc *
    0.00023972120661313559) - full_loop_B.out1_tmp_h2 * 0.00101706003393634) +
    full_loop_B.t78 * 0.0100784985251745) + full_loop_B.out1_tmp_b *
    0.028412641856654239) + full_loop_B.out1_tmp_bf * 9.7955304455476024E-7) +
    full_loop_B.t87 * 0.0001311449245682505) - full_loop_B.out1_tmp_d *
    1.92188307341644E-5) - full_loop_B.t40_f * 0.12839586465945091) -
    full_loop_B.out1_tmp_j * 0.5574560332275561) - full_loop_B.t45_b *
    9.8672330390897915) - full_loop_B.t56_k * 6.9268484149480409E-5) +
                        full_loop_B.t66 * 0.0044523701890921046) -
                       full_loop_B.t74 * 0.028412641856654239) - full_loop_B.t79
                      * 0.00101706003393634) + full_loop_B.t59_i *
                     0.0100784985251745) - full_loop_B.t69_c *
                    0.34216502492967421) - full_loop_B.t77 *
                   9.7955304455476024E-7) - full_loop_B.t36 *
                  0.0001311449245682505) - full_loop_B.t57_o *
                 0.00101706003393634) + full_loop_B.t32_l * 0.034529188152138762)
               + full_loop_B.out1_tmp_dl * 7.0610075585606938E-6) -
              full_loop_B.t54 * 0.0001311449245682505) + full_loop_B.t34_l *
             0.0100784985251745) + 0.003443994397670091;
  out1[8] = ((((((((((((((((((((((((((((((((((((((((((((((((((((((((((in2[0] *
    9.7955304455476024E-7 + in2[1] * 0.021770424994214239) - in2[2] *
    3.0773187466495261E-5) + in2[3] * 0.022480741568091309) - in2[4] *
    0.0001056006411490808) - in2[5] * 0.00043949744689109537) + in3[0] *
    0.00014357649075502109) + in3[1] * 8.3869284783593086E-21) - in3[2] *
    0.0001454411205050863) - in3[3] * 0.00014481957725506449) - in3[4] *
    0.0035177113541306742) + in3[5] * 0.0034794839220347071) + in3[6] *
    0.0036693918966183279) - in3[7] * 0.0036311644645223612) - full_loop_B.t8_j *
    0.00068063104668428524) - full_loop_B.t9_e * 0.26983193940962957) -
    full_loop_B.t10_e * 0.26983193940962957) + full_loop_B.t11_k *
    0.00068063104668428524) - full_loop_B.t12_k * 0.030019139436996859) -
    full_loop_B.t13_i * 0.030019139436996859) - in3[0] * 1.4142135623730951 *
    0.010168718210922689) + in3[1] * 1.4142135623730951 * 0.01026490273061244) -
    in3[2] * 1.4142135623730951 * 0.010168718210922689) + in3[3] *
    1.4142135623730951 * 0.0101629393229337) - full_loop_B.t15_e *
    3.3255825862634111E-5) - full_loop_B.t20_l * 0.022480741568091309) -
    full_loop_B.t16_e * 3.0773187466495261E-5) + full_loop_B.t17_l *
    0.021770424994214239) - full_loop_B.t18_n * 0.0001056006411490808) +
    full_loop_B.t19_e * 0.00043949744689109537) + full_loop_B.t21_c *
    0.0001056006411490808) - full_loop_B.t22_a * 0.73910592855357338) -
    full_loop_B.t23_m * 0.00043949744689109537) - full_loop_B.t44_m *
    3.0773187466495261E-5) + full_loop_B.out1_tmp_h * 9.7955304455476024E-7) -
    full_loop_B.t86 * 0.022480741568091309) + full_loop_B.out1_tmp_hc *
    0.0010447497144875141) + full_loop_B.out1_tmp_h2 * 0.00043949744689109537) +
    full_loop_B.t78 * 0.0001056006411490808) + full_loop_B.out1_tmp_b *
    9.7955304455476024E-7) + full_loop_B.out1_tmp_bf * 0.021770424994214239) +
    full_loop_B.t87 * 0.022480741568091309) - full_loop_B.out1_tmp_d *
    0.42713573838648339) - full_loop_B.t40_f * 22.009500263340978) -
    full_loop_B.out1_tmp_j * 1.92188307341644E-5) - full_loop_B.t45_b *
    0.1033870405093138) - full_loop_B.t56_k * 0.00030188496904631849) +
                        full_loop_B.t66 * 0.76322117623669983) - full_loop_B.t74
                       * 9.7955304455476024E-7) + full_loop_B.t79 *
                      0.00043949744689109537) + full_loop_B.t59_i *
                     0.0001056006411490808) - full_loop_B.t69_c *
                    0.0035851417670112952) - full_loop_B.t77 *
                   0.021770424994214239) - full_loop_B.t36 *
                  0.022480741568091309) + full_loop_B.t57_o *
                 0.00043949744689109537) - full_loop_B.t32_l *
                0.01492093832195269) + full_loop_B.out1_tmp_dl *
               3.0773187466495261E-5) - full_loop_B.t54 * 0.022480741568091309)
             + full_loop_B.t34_l * 0.0001056006411490808) + 0.01500956971849843;
  out1[9] = ((((((((((((((((((((((((((((((((((((((((((((((((((((((((((in2[0] *
    -7.0610075585606938E-6 - in2[1] * 3.0773187466495261E-5) + in2[2] *
    0.020116314756949891) - in2[3] * 0.0023446008892116159) + in2[4] *
    0.00040981318977277321) + in2[5] * 5.4885093553225614E-6) - in3[0] *
    1.79300452890001E-6) - in3[1] * 5.4825030165754691E-18) + in3[2] *
    1.8162903019915721E-6) + in3[3] * 1.808528377624063E-6) - in3[4] *
    0.019674446043184569) + in3[5] * 0.019822798417882322) - in3[6] *
    0.020568381500651611) + in3[7] * 0.020420029125953861) + full_loop_B.t8_j *
    0.0049062590249140383) + full_loop_B.t9_e * 0.0281149094292465) +
    full_loop_B.t10_e * 0.0281149094292465) - full_loop_B.t11_k *
    0.0049062590249140383) + full_loop_B.t12_k * 0.003396448771300391) +
    full_loop_B.t13_i * 0.003396448771300391) - in3[0] * 1.4142135623730951 *
    5.0057116428075682E-5) + in3[1] * 1.4142135623730951 * 6.7950818844537625E-5)
    - in3[2] * 1.4142135623730951 * 5.0057116428075682E-5) + in3[3] *
    1.4142135623730951 * 6.9224153014972465E-5) + full_loop_B.t15_e *
    0.00023972120661313559) + full_loop_B.t20_l * 0.0023446008892116159) +
    full_loop_B.t16_e * 0.020116314756949891) - full_loop_B.t17_l *
    3.0773187466495261E-5) + full_loop_B.t18_n * 0.00040981318977277321) -
    full_loop_B.t19_e * 5.4885093553225614E-6) - full_loop_B.t21_c *
    0.00040981318977277321) + full_loop_B.t22_a * 0.0010447497144875141) +
    full_loop_B.t23_m * 5.4885093553225614E-6) + full_loop_B.t44_m *
    0.020116314756949891) - full_loop_B.out1_tmp_h * 7.0610075585606938E-6) +
    full_loop_B.t86 * 0.0023446008892116159) - full_loop_B.out1_tmp_hc *
    0.68294888599844894) - full_loop_B.out1_tmp_h2 * 5.4885093553225614E-6) -
    full_loop_B.t78 * 0.00040981318977277321) - full_loop_B.out1_tmp_b *
    7.0610075585606938E-6) - full_loop_B.out1_tmp_bf * 3.0773187466495261E-5) -
    full_loop_B.t87 * 0.0023446008892116159) + full_loop_B.out1_tmp_d *
    0.000603769938092637) + full_loop_B.t40_f * 2.2954533653719622) +
    full_loop_B.out1_tmp_j * 0.00013853696829896079) + full_loop_B.t45_b *
    0.4012226856887563) + full_loop_B.t56_k * 0.19734104776567851) -
                        full_loop_B.t66 * 0.079599200188734356) +
                       full_loop_B.t74 * 7.0610075585606938E-6) -
                      full_loop_B.t79 * 5.4885093553225614E-6) -
                     full_loop_B.t59_i * 0.00040981318977277321) +
                    full_loop_B.t69_c * 0.01391315779278565) + full_loop_B.t77 *
                   3.0773187466495261E-5) + full_loop_B.t36 *
                  0.0023446008892116159) - full_loop_B.t57_o *
                 5.4885093553225614E-6) + full_loop_B.t32_l *
                0.0001863348926132009) - full_loop_B.out1_tmp_dl *
               0.020116314756949891) + full_loop_B.t54 * 0.0023446008892116159)
             - full_loop_B.t34_l * 0.00040981318977277321) -
    0.0016982243856501951;
  out1[10] = ((((((((((((((((((((((((((((((((((((((((((((((((((((((((((in2[0] *
    0.0001311449245682505 + in2[1] * 0.022480741568091309) - in2[2] *
    0.0023446008892116159) + in2[3] * 1.7128001904198551) - in2[4] *
    0.0080486297981970222) - in2[5] * 0.0040360293825997314) + in3[0] *
    0.001318503530423044) + in3[1] * 6.3899782853254686E-19) - in3[2] *
    0.00133562695289607) - in3[3] * 0.001329919145405061) - in3[4] *
    0.26801378237038109) + in3[5] * 0.26510017838343369) + in3[6] *
    0.27957028217008012) - in3[7] * 0.27665667818313278) - full_loop_B.t8_j *
    0.0911245264076457) - full_loop_B.t9_e * 20.538789287828269) -
    full_loop_B.t10_e * 20.538789287828269) + full_loop_B.t11_k *
    0.0911245264076457) - full_loop_B.t12_k * 2.287150172336899) -
    full_loop_B.t13_i * 2.287150172336899) + in3[0] * 1.4142135623730951 *
    0.043377251618131517) - in3[1] * 1.4142135623730951 * 0.04282486018388474) +
    in3[2] * 1.4142135623730951 * 0.043377251618131517) - in3[3] *
    1.4142135623730951 * 0.043761219000647882) - full_loop_B.t15_e *
    0.0044523701890921046) - full_loop_B.t20_l * 1.7128001904198551) -
    full_loop_B.t16_e * 0.0023446008892116159) + full_loop_B.t17_l *
    0.022480741568091309) - full_loop_B.t18_n * 0.0080486297981970222) +
    full_loop_B.t19_e * 0.0040360293825997314) + full_loop_B.t21_c *
    0.0080486297981970222) - full_loop_B.t22_a * 0.76322117623669983) -
    full_loop_B.t23_m * 0.0040360293825997314) - full_loop_B.t44_m *
    0.0023446008892116159) + full_loop_B.out1_tmp_h * 0.0001311449245682505) -
    full_loop_B.t86 * 1.7128001904198551) + full_loop_B.out1_tmp_hc *
    0.079599200188734356) + full_loop_B.out1_tmp_h2 * 0.0040360293825997314) +
    full_loop_B.t78 * 0.0080486297981970222) + full_loop_B.out1_tmp_b *
    0.0001311449245682505) + full_loop_B.out1_tmp_bf * 0.022480741568091309) +
    full_loop_B.t87 * 1.7128001904198551) - full_loop_B.out1_tmp_d *
    0.44107214956595142) - full_loop_B.t40_f * 1676.896472828274) -
    full_loop_B.out1_tmp_j * 0.0025730634200290749) - full_loop_B.t45_b *
    7.8799144203672169) - full_loop_B.t56_k * 0.02300053472316595) +
    full_loop_B.t66 * 58.149566464754074) - full_loop_B.t74 *
                        0.0001311449245682505) + full_loop_B.t79 *
                       0.0040360293825997314) + full_loop_B.t59_i *
                      0.0080486297981970222) - full_loop_B.t69_c *
                     0.27325098164878892) - full_loop_B.t77 *
                    0.022480741568091309) - full_loop_B.t36 * 1.7128001904198551)
                  + full_loop_B.t57_o * 0.0040360293825997314) -
                 full_loop_B.t32_l * 0.1370231975392609) +
                full_loop_B.out1_tmp_dl * 0.0023446008892116159) -
               full_loop_B.t54 * 1.7128001904198551) + full_loop_B.t34_l *
              0.0080486297981970222) + 1.1435750861684491;
  out1[11] = ((((((((((((((((((((((((((((((((((((((((((((((((((((((((((in2[0] *
    -0.0100784985251745 - in2[1] * 0.0001056006411490808) + in2[2] *
    0.00040981318977277321) - in2[3] * 0.0080486297981970222) + in2[4] *
    0.58407083727863973) - in2[5] * 3.4181272063671217E-5) + in3[0] *
    1.116645188080143E-5) - in3[1] * 1.116905395599563E-19) - in3[2] *
    1.131147073639648E-5) - in3[3] * 1.1263131117864871E-5) + in3[4] *
    0.1059865723986993) + in3[5] * 0.10544707069616829) - in3[6] *
    0.1080065349719949) - in3[7] * 0.1034271081228726) + full_loop_B.t8_j *
    7.0029275477506436) + full_loop_B.t9_e * 0.096478548567945951) +
    full_loop_B.t10_e * 0.096478548567945951) - full_loop_B.t11_k *
    7.0029275477506436) + full_loop_B.t12_k * 0.3997713691603631) +
    full_loop_B.t13_i * 0.3997713691603631) + in3[0] * 1.4142135623730951 *
    0.01344626169736146) + in3[1] * 1.4142135623730951 * 0.01386370341841576) +
    in3[2] * 1.4142135623730951 * 0.01344626169736146) + in3[3] *
    1.4142135623730951 * 0.013855773363296979) + full_loop_B.t15_e *
    0.34216502492967421) + full_loop_B.t20_l * 0.0080486297981970222) +
    full_loop_B.t16_e * 0.00040981318977277321) - full_loop_B.t17_l *
    0.0001056006411490808) + full_loop_B.t18_n * 0.58407083727863973) +
    full_loop_B.t19_e * 3.4181272063671217E-5) - full_loop_B.t21_c *
    0.58407083727863973) + full_loop_B.t22_a * 0.0035851417670112952) -
    full_loop_B.t23_m * 3.4181272063671217E-5) + full_loop_B.t44_m *
    0.00040981318977277321) - full_loop_B.out1_tmp_h * 0.0100784985251745) +
    full_loop_B.t86 * 0.0080486297981970222) - full_loop_B.out1_tmp_hc *
    0.01391315779278565) + full_loop_B.out1_tmp_h2 * 3.4181272063671217E-5) -
    full_loop_B.t78 * 0.58407083727863973) - full_loop_B.out1_tmp_b *
    0.0100784985251745) - full_loop_B.out1_tmp_bf * 0.0001056006411490808) -
    full_loop_B.t87 * 0.0080486297981970222) + full_loop_B.out1_tmp_d *
    0.0020718845793449661) + full_loop_B.t40_f * 7.8799144203672169) +
    full_loop_B.out1_tmp_j * 0.19774014106392371) + full_loop_B.t45_b *
    571.8275443876048) + full_loop_B.t56_k * 0.004020267391670905) -
    full_loop_B.t66 * 0.27325098164878892) + full_loop_B.t74 *
                        0.0100784985251745) + full_loop_B.t79 *
                       3.4181272063671217E-5) - full_loop_B.t59_i *
                      0.58407083727863973) + full_loop_B.t69_c *
                     19.829204925609819) + full_loop_B.t77 *
                    0.0001056006411490808) + full_loop_B.t36 *
                   0.0080486297981970222) + full_loop_B.t57_o *
                  3.4181272063671217E-5) - full_loop_B.t32_l *
                 0.0011604541865616381) - full_loop_B.out1_tmp_dl *
                0.00040981318977277321) + full_loop_B.t54 *
               0.0080486297981970222) - full_loop_B.t34_l * 0.58407083727863973)
    - 0.19988568458018149;
  out1[12] = ((((((((((((((((((((((((((((((((((((((((((((((((((((((((((in2[0] *
    0.00101706003393634 - in2[1] * 0.00043949744689109537) + in2[2] *
    5.4885093553225614E-6) - in2[3] * 0.0040360293825997314) - in2[4] *
    3.4181272063671217E-5) + in2[5] * 0.53016332127379384) - in3[0] *
    0.17319552077939579) - in3[1] * 1.4958390470929921E-21) + in3[2] *
    0.1754448132570503) + in3[3] * 0.17469504909783209) + in3[4] *
    0.00062201547474137432) - in3[5] * 0.00063438909522841322) - in3[6] *
    0.000649068248438291) + in3[7] * 0.00066144186892532939) - full_loop_B.t8_j *
    0.70669234227483158) + full_loop_B.t9_e * 0.40153237058011809) +
    full_loop_B.t10_e * 0.40153237058011809) + full_loop_B.t11_k *
    0.70669234227483158) + full_loop_B.t12_k * 0.0053540221603002574) +
    full_loop_B.t13_i * 0.0053540221603002574) + in3[0] * 1.4142135623730951 *
    0.000598031999464489) - in3[1] * 1.4142135623730951 * 0.1225810501024604) +
    in3[2] * 1.4142135623730951 * 0.000598031999464489) + in3[3] *
    1.4142135623730951 * 0.00041684043305977638) - full_loop_B.t15_e *
    0.034529188152138762) + full_loop_B.t20_l * 0.0040360293825997314) +
    full_loop_B.t16_e * 5.4885093553225614E-6) - full_loop_B.t17_l *
    0.00043949744689109537) - full_loop_B.t18_n * 3.4181272063671217E-5) -
    full_loop_B.t19_e * 0.53016332127379384) + full_loop_B.t21_c *
    3.4181272063671217E-5) + full_loop_B.t22_a * 0.01492093832195269) +
    full_loop_B.t23_m * 0.53016332127379384) + full_loop_B.t44_m *
    5.4885093553225614E-6) + full_loop_B.out1_tmp_h * 0.00101706003393634) +
    full_loop_B.t86 * 0.0040360293825997314) - full_loop_B.out1_tmp_hc *
    0.0001863348926132009) - full_loop_B.out1_tmp_h2 * 0.53016332127379384) +
    full_loop_B.t78 * 3.4181272063671217E-5) + full_loop_B.out1_tmp_b *
    0.00101706003393634) - full_loop_B.out1_tmp_bf * 0.00043949744689109537) -
    full_loop_B.t87 * 0.0040360293825997314) + full_loop_B.out1_tmp_d *
    0.0086229399080032937) + full_loop_B.t40_f * 3.9514261346816748) -
    full_loop_B.out1_tmp_j * 0.019954717865831) - full_loop_B.t45_b *
    0.033464764238672541) + full_loop_B.t56_k * 5.3842276775714317E-5) -
    full_loop_B.t66 * 0.1370231975392609) - full_loop_B.t74 *
                        0.00101706003393634) - full_loop_B.t79 *
                       0.53016332127379384) + full_loop_B.t59_i *
                      3.4181272063671217E-5) - full_loop_B.t69_c *
                     0.0011604541865616381) + full_loop_B.t77 *
                    0.00043949744689109537) + full_loop_B.t36 *
                   0.0040360293825997314) - full_loop_B.t57_o *
                  0.53016332127379384) + full_loop_B.t32_l * 17.9990447572453) -
                full_loop_B.out1_tmp_dl * 5.4885093553225614E-6) +
               full_loop_B.t54 * 0.0040360293825997314) + full_loop_B.t34_l *
              3.4181272063671217E-5) - 0.0026770110801501278;
}

real_T rt_urand_Upu32_Yd_f_pw_snf(uint32_T *u)
{
  uint32_T lo;
  uint32_T hi;

  // Uniform random number generator (random number between 0 and 1)

  // #define IA      16807                      magic multiplier = 7^5
  // #define IM      2147483647                 modulus = 2^31-1
  // #define IQ      127773                     IM div IA
  // #define IR      2836                       IM modulo IA
  // #define S       4.656612875245797e-10      reciprocal of 2^31-1
  // test = IA * (seed % IQ) - IR * (seed/IQ)
  // seed = test < 0 ? (test + IM) : test
  // return (seed*S)

  lo = *u % 127773U * 16807U;
  hi = *u / 127773U * 2836U;
  if (lo < hi) {
    *u = 2147483647U - (hi - lo);
  } else {
    *u = lo - hi;
  }

  return static_cast<real_T>(*u) * 4.6566128752457969E-10;
}

real_T rt_nrand_Upu32_Yd_f_pw_snf(uint32_T *u)
{
  real_T y;
  real_T sr;
  real_T si;

  // Normal (Gaussian) random number generator
  do {
    sr = 2.0 * rt_urand_Upu32_Yd_f_pw_snf(u) - 1.0;
    si = 2.0 * rt_urand_Upu32_Yd_f_pw_snf(u) - 1.0;
    si = sr * sr + si * si;
  } while (si > 1.0);

  y = std::sqrt(-2.0 * std::log(si) / si) * sr;
  return y;
}

void full_loopModelClass::matlabCodegenHandle_matla_p43ri
  (ros_slros_internal_block_Subs_T *obj)
{
  if (!obj->matlabCodegenIsDeleted) {
    obj->matlabCodegenIsDeleted = true;
  }
}

void full_loopModelClass::matlabCodegenHandle_matlabCodeg
  (ros_slros_internal_block_Publ_T *obj)
{
  if (!obj->matlabCodegenIsDeleted) {
    obj->matlabCodegenIsDeleted = true;
  }
}

void full_loopModelClass::ful_TrajectoryManager_setupImpl
  (TrajectoryManager_full_loop_T *b_this)
{
  int32_T i;

  //  untitled Add summary here
  //
  //  This template includes the minimum set of functions required
  //  to define a System object with discrete state.
  //  Public, tunable properties
  //  Offset Time
  //  prediction controlleur
  //  Taille statique
  //  Metre
  //  Radian
  //  seconde
  // pMax;
  //  Pre-computed constants
  //  Perform one-time calculations, such as computing constants
  b_this->generationNumber = 0.0;
  b_this->dummy = 999.0;

  //  Chiffre NULL
  for (i = 0; i < 13; i++) {
    b_this->emptyArray[i] = b_this->dummy;
  }

  //  Vecteur pose NULL
  b_this->targetReachedCount = 0.0;

  //  Buffer trajectoire
  for (i = 0; i < 78013; i++) {
    b_this->poseBuffer[i] = b_this->dummy;
  }

  b_this->bufferCount = 1.0;
  b_this->done = false;

  //  Conditions Initiales
  b_this->poseBuffer[0] = 0.0;
  b_this->poseBuffer[6001] = 0.0;
  b_this->poseBuffer[12002] = 0.0;
  b_this->poseBuffer[18003] = 1.0;
  b_this->poseBuffer[24004] = 0.0;
  b_this->poseBuffer[30005] = 0.0;
  b_this->poseBuffer[36006] = 0.0;
  b_this->poseBuffer[42007] = 0.0;
  b_this->poseBuffer[48008] = 0.0;
  b_this->poseBuffer[54009] = 0.0;
  b_this->poseBuffer[60010] = 0.0;
  b_this->poseBuffer[66011] = 0.0;
  b_this->poseBuffer[72012] = 0.0;

  // InitCond;
}

// Model step function
void full_loopModelClass::step()
{
  if (rtmIsMajorTimeStep((&full_loop_M))) {
    // set solver stop time
    rtsiSetSolverStopTime(&(&full_loop_M)->solverInfo,(((&full_loop_M)
      ->Timing.clockTick0+1)*(&full_loop_M)->Timing.stepSize0));
  }                                    // end MajorTimeStep

  // Update absolute time of base rate at minor time step
  if (rtmIsMinorTimeStep((&full_loop_M))) {
    (&full_loop_M)->Timing.t[0] = rtsiGetT(&(&full_loop_M)->solverInfo);
  }

  {
    char_T *sErr;
    void *audio;
    TrajectoryManager_full_loop_T *obj;
    boolean_T exitg1;
    if (rtmIsMajorTimeStep((&full_loop_M)) &&
        (&full_loop_M)->Timing.TaskCounters.TID[4] == 0) {
      // Outputs for Atomic SubSystem: '<S9>/Subscribe2'
      // MATLABSystem: '<S136>/SourceBlock' incorporates:
      //   Inport: '<S140>/In1'

      full_loop_B.SourceBlock_o1_b = Sub_full_loop_854.getLatestMessage
        (&full_loop_B.b_varargout_2_i);

      // Outputs for Enabled SubSystem: '<S136>/Enabled Subsystem' incorporates:
      //   EnablePort: '<S140>/Enable'

      if (full_loop_B.SourceBlock_o1_b) {
        full_loop_B.In1_g = full_loop_B.b_varargout_2_i;
      }

      // End of MATLABSystem: '<S136>/SourceBlock'
      // End of Outputs for SubSystem: '<S136>/Enabled Subsystem'
      // End of Outputs for SubSystem: '<S9>/Subscribe2'

      // SignalConversion generated from: '<S9>/Bus Selector3'
      full_loop_B.Data = full_loop_B.In1_g.Data;
    }

    if (rtmIsMajorTimeStep((&full_loop_M)) &&
        (&full_loop_M)->Timing.TaskCounters.TID[1] == 0) {
      // RandomNumber: '<S25>/White Noise'
      full_loop_B.Product1_a5 = full_loop_DW.NextOutput;

      // Gain: '<S25>/Output' incorporates:
      //   RandomNumber: '<S25>/White Noise'

      full_loop_B.Output = 0.00015491933384829672 * full_loop_DW.NextOutput;
    }

    if (rtmIsMajorTimeStep((&full_loop_M)) &&
        (&full_loop_M)->Timing.TaskCounters.TID[4] == 0) {
      // Outputs for Atomic SubSystem: '<S9>/Subscribe'
      // MATLABSystem: '<S134>/SourceBlock'
      full_loop_B.SourceBlock_o1 = Sub_full_loop_796.getLatestMessage
        (&full_loop_B.b_varargout_2_h);

      // Outputs for Enabled SubSystem: '<S134>/Enabled Subsystem' incorporates:
      //   EnablePort: '<S138>/Enable'

      if (full_loop_B.SourceBlock_o1) {
        // Inport: '<S138>/In1' incorporates:
        //   MATLABSystem: '<S134>/SourceBlock'

        full_loop_B.In1_k = full_loop_B.b_varargout_2_h;
      }

      // End of Outputs for SubSystem: '<S134>/Enabled Subsystem'
      // End of Outputs for SubSystem: '<S9>/Subscribe'
    }

    // Integrator: '<S1>/Integrator3' incorporates:
    //   Integrator: '<S1>/Integrator2'

    if (rtmIsMajorTimeStep((&full_loop_M))) {
      full_loop_B.didZcEventOccur = (full_loop_B.SourceBlock_o1 &&
        (full_loop_PrevZCX.Integrator3_Reset_ZCE != 1));
      full_loop_PrevZCX.Integrator3_Reset_ZCE = full_loop_B.SourceBlock_o1;

      // evaluate zero-crossings
      if (full_loop_B.didZcEventOccur || (full_loop_DW.Integrator3_IWORK != 0))
      {
        full_loop_X.Integrator3_CSTATE[0] =
          full_loop_ConstB.InitialAngularRates[0];
        full_loop_X.Integrator3_CSTATE[1] =
          full_loop_ConstB.InitialAngularRates[1];
        full_loop_X.Integrator3_CSTATE[2] =
          full_loop_ConstB.InitialAngularRates[2];
      }

      full_loop_B.didZcEventOccur = (full_loop_B.SourceBlock_o1 &&
        (full_loop_PrevZCX.Integrator2_Reset_ZCE != 1));
      full_loop_PrevZCX.Integrator2_Reset_ZCE = full_loop_B.SourceBlock_o1;

      // evaluate zero-crossings
      if (full_loop_B.didZcEventOccur || (full_loop_DW.Integrator2_IWORK != 0))
      {
        full_loop_X.Integrator2_CSTATE[0] =
          full_loop_ConstB.InitialBodyvelocity[0];
        full_loop_X.Integrator2_CSTATE[1] =
          full_loop_ConstB.InitialBodyvelocity[1];
        full_loop_X.Integrator2_CSTATE[2] =
          full_loop_ConstB.InitialBodyvelocity[2];
      }
    }

    full_loop_B.AngularRate[0] = full_loop_X.Integrator3_CSTATE[0];

    // Sum: '<S15>/Sum2' incorporates:
    //   Integrator: '<S1>/Integrator3'

    full_loop_B.AngularRate_m[0] = full_loop_X.Integrator3_CSTATE[0] +
      full_loop_B.Output;

    // Integrator: '<S1>/Integrator3'
    full_loop_B.AngularRate[1] = full_loop_X.Integrator3_CSTATE[1];

    // Sum: '<S15>/Sum2' incorporates:
    //   Integrator: '<S1>/Integrator3'

    full_loop_B.AngularRate_m[1] = full_loop_X.Integrator3_CSTATE[1] +
      full_loop_B.Output;

    // Integrator: '<S1>/Integrator3'
    full_loop_B.AngularRate[2] = full_loop_X.Integrator3_CSTATE[2];

    // Sum: '<S15>/Sum2' incorporates:
    //   Integrator: '<S1>/Integrator3'

    full_loop_B.AngularRate_m[2] = full_loop_X.Integrator3_CSTATE[2] +
      full_loop_B.Output;

    // Integrator: '<S1>/Integrator2'
    full_loop_B.BodyVelocity_idx_0 = full_loop_X.Integrator2_CSTATE[0];
    full_loop_B.BodyVelocity_idx_1 = full_loop_X.Integrator2_CSTATE[1];
    full_loop_B.BodyVelocity_idx_2 = full_loop_X.Integrator2_CSTATE[2];

    // Sum: '<S32>/Sum' incorporates:
    //   Integrator: '<S1>/Integrator2'
    //   Product: '<S32>/Product4'
    //   Product: '<S32>/Product5'
    //   Product: '<S32>/Product8'

    full_loop_B.Sum_b = (full_loop_X.Integrator2_CSTATE[0] *
                         full_loop_ConstB.Gain2 + full_loop_ConstB.Gain *
                         full_loop_X.Integrator2_CSTATE[1]) +
      full_loop_ConstB.Gain1 * full_loop_X.Integrator2_CSTATE[2];
    if (rtmIsMajorTimeStep((&full_loop_M)) &&
        (&full_loop_M)->Timing.TaskCounters.TID[1] == 0) {
      // Fcn: '<S86>/q1'
      full_loop_B.Product1_a5 = 1.0;

      // Gain: '<S99>/Gain' incorporates:
      //   Product: '<S99>/Product'
      //   Product: '<S99>/Product1'
      //   Sum: '<S99>/Sum1'

      full_loop_B.Gain = 0.0;

      // Gain: '<S99>/Gain1' incorporates:
      //   Product: '<S99>/Product2'
      //   Product: '<S99>/Product3'
      //   Sum: '<S99>/Sum2'

      full_loop_B.Gain1 = -1.2246467991473532E-16;

      // Gain: '<S99>/Gain2' incorporates:
      //   Constant: '<S99>/Constant'
      //   Product: '<S99>/Product6'
      //   Sum: '<S99>/Sum3'

      full_loop_B.Gain2 = (0.5 - full_loop_B.Product1_a5 *
                           full_loop_B.Product1_a5) * 2.0;
    }

    // Sum: '<S33>/Sum' incorporates:
    //   Integrator: '<S1>/Integrator2'
    //   Product: '<S33>/Product4'
    //   Product: '<S33>/Product5'
    //   Product: '<S33>/Product8'

    full_loop_B.Sum_m = (full_loop_X.Integrator2_CSTATE[0] *
                         full_loop_ConstB.Gain_e + full_loop_ConstB.Gain2_d *
                         full_loop_X.Integrator2_CSTATE[1]) +
      full_loop_ConstB.Gain1_b * full_loop_X.Integrator2_CSTATE[2];

    // Sum: '<S34>/Sum' incorporates:
    //   Integrator: '<S1>/Integrator2'
    //   Product: '<S34>/Product4'
    //   Product: '<S34>/Product5'
    //   Product: '<S34>/Product8'

    full_loop_B.Sum_c = (full_loop_X.Integrator2_CSTATE[0] *
                         full_loop_ConstB.Gain_n + full_loop_ConstB.Gain1_l *
                         full_loop_X.Integrator2_CSTATE[1]) +
      full_loop_ConstB.Gain2_m * full_loop_X.Integrator2_CSTATE[2];

    // Sum: '<S99>/Sum' incorporates:
    //   Product: '<S99>/Product4'
    //   Product: '<S99>/Product5'
    //   Product: '<S99>/Product8'

    full_loop_B.Sum_o = (full_loop_B.Sum_b * full_loop_B.Gain +
                         full_loop_B.Gain1 * full_loop_B.Sum_m) +
      full_loop_B.Gain2 * full_loop_B.Sum_c;
    if (rtmIsMajorTimeStep((&full_loop_M)) &&
        (&full_loop_M)->Timing.TaskCounters.TID[1] == 0) {
      // Gain: '<S98>/Gain' incorporates:
      //   Product: '<S98>/Product'

      full_loop_B.Gain_h = full_loop_B.Product1_a5 * 0.0 * 2.0;

      // Gain: '<S98>/Gain2' incorporates:
      //   Constant: '<S98>/Constant'
      //   Product: '<S98>/Product6'
      //   Sum: '<S98>/Sum3'

      full_loop_B.Gain2_p = (0.5 - full_loop_B.Product1_a5 *
        full_loop_B.Product1_a5) * 2.0;

      // Gain: '<S98>/Gain1' incorporates:
      //   Product: '<S98>/Product2'

      full_loop_B.Gain1_n = 6.123233995736766E-17 * full_loop_B.Product1_a5 *
        2.0;

      // Gain: '<S97>/Gain2'
      full_loop_B.Gain2_d = 1.0;

      // Gain: '<S97>/Gain' incorporates:
      //   Product: '<S97>/Product'

      full_loop_B.Gain_d = full_loop_B.Product1_a5 * 0.0 * 2.0;

      // Gain: '<S97>/Gain1' incorporates:
      //   Product: '<S97>/Product3'

      full_loop_B.Gain1_c = full_loop_B.Product1_a5 * 0.0 * 2.0;
    }

    // Sum: '<S98>/Sum' incorporates:
    //   Product: '<S98>/Product4'
    //   Product: '<S98>/Product5'
    //   Product: '<S98>/Product8'

    full_loop_B.Sum_mk = (full_loop_B.Sum_b * full_loop_B.Gain_h +
                          full_loop_B.Gain2_p * full_loop_B.Sum_m) +
      full_loop_B.Gain1_n * full_loop_B.Sum_c;

    // Sum: '<S97>/Sum' incorporates:
    //   Product: '<S97>/Product4'
    //   Product: '<S97>/Product5'
    //   Product: '<S97>/Product8'

    full_loop_B.Sum_i = (full_loop_B.Sum_b * full_loop_B.Gain2_d +
                         full_loop_B.Gain_d * full_loop_B.Sum_m) +
      full_loop_B.Gain1_c * full_loop_B.Sum_c;
    if (rtmIsMajorTimeStep((&full_loop_M)) &&
        (&full_loop_M)->Timing.TaskCounters.TID[4] == 0) {
      // SignalConversion generated from: '<S133>/ SFunction ' incorporates:
      //   MATLAB Function: '<S9>/Quaternion Normalise'

      full_loop_B.y[0] = full_loop_B.In1_k.Orientation.W;
      full_loop_B.y[1] = full_loop_B.In1_k.Orientation.Z;
      full_loop_B.y[2] = full_loop_B.In1_k.Orientation.Y;
      full_loop_B.y[3] = full_loop_B.In1_k.Orientation.X;

      // MATLAB Function: '<S9>/Quaternion Normalise'
      full_loop_B.scale = 3.3121686421112381E-170;
      full_loop_B.absxk = std::abs(full_loop_B.y[0]);
      if (full_loop_B.absxk > 3.3121686421112381E-170) {
        full_loop_B.Product1_a5 = 1.0;
        full_loop_B.scale = full_loop_B.absxk;
      } else {
        full_loop_B.t_p2 = full_loop_B.absxk / 3.3121686421112381E-170;
        full_loop_B.Product1_a5 = full_loop_B.t_p2 * full_loop_B.t_p2;
      }

      full_loop_B.absxk = std::abs(full_loop_B.y[1]);
      if (full_loop_B.absxk > full_loop_B.scale) {
        full_loop_B.t_p2 = full_loop_B.scale / full_loop_B.absxk;
        full_loop_B.Product1_a5 = full_loop_B.Product1_a5 * full_loop_B.t_p2 *
          full_loop_B.t_p2 + 1.0;
        full_loop_B.scale = full_loop_B.absxk;
      } else {
        full_loop_B.t_p2 = full_loop_B.absxk / full_loop_B.scale;
        full_loop_B.Product1_a5 += full_loop_B.t_p2 * full_loop_B.t_p2;
      }

      full_loop_B.absxk = std::abs(full_loop_B.y[2]);
      if (full_loop_B.absxk > full_loop_B.scale) {
        full_loop_B.t_p2 = full_loop_B.scale / full_loop_B.absxk;
        full_loop_B.Product1_a5 = full_loop_B.Product1_a5 * full_loop_B.t_p2 *
          full_loop_B.t_p2 + 1.0;
        full_loop_B.scale = full_loop_B.absxk;
      } else {
        full_loop_B.t_p2 = full_loop_B.absxk / full_loop_B.scale;
        full_loop_B.Product1_a5 += full_loop_B.t_p2 * full_loop_B.t_p2;
      }

      full_loop_B.absxk = std::abs(full_loop_B.y[3]);
      if (full_loop_B.absxk > full_loop_B.scale) {
        full_loop_B.t_p2 = full_loop_B.scale / full_loop_B.absxk;
        full_loop_B.Product1_a5 = full_loop_B.Product1_a5 * full_loop_B.t_p2 *
          full_loop_B.t_p2 + 1.0;
        full_loop_B.scale = full_loop_B.absxk;
      } else {
        full_loop_B.t_p2 = full_loop_B.absxk / full_loop_B.scale;
        full_loop_B.Product1_a5 += full_loop_B.t_p2 * full_loop_B.t_p2;
      }

      full_loop_B.Product1_a5 = full_loop_B.scale * std::sqrt
        (full_loop_B.Product1_a5);
      full_loop_B.y[0] /= full_loop_B.Product1_a5;
      full_loop_B.b_cj[0] = rtIsNaN(full_loop_B.y[0]);
      full_loop_B.y[1] /= full_loop_B.Product1_a5;
      full_loop_B.b_cj[1] = rtIsNaN(full_loop_B.y[1]);
      full_loop_B.y[2] /= full_loop_B.Product1_a5;
      full_loop_B.b_cj[2] = rtIsNaN(full_loop_B.y[2]);
      full_loop_B.y[3] /= full_loop_B.Product1_a5;
      full_loop_B.b_cj[3] = rtIsNaN(full_loop_B.y[3]);
      full_loop_B.didZcEventOccur = true;
      full_loop_B.i_h = 0;
      exitg1 = false;
      while ((!exitg1) && (full_loop_B.i_h < 4)) {
        if (!full_loop_B.b_cj[full_loop_B.i_h]) {
          full_loop_B.didZcEventOccur = false;
          exitg1 = true;
        } else {
          full_loop_B.i_h++;
        }
      }

      if (full_loop_B.didZcEventOccur) {
        full_loop_B.y[0] = 1.0;
        full_loop_B.y[1] = 0.0;
        full_loop_B.y[2] = 0.0;
        full_loop_B.y[3] = 0.0;
      }
    }

    // Integrator: '<S1>/Integrator1'
    if (rtmIsMajorTimeStep((&full_loop_M))) {
      full_loop_B.didZcEventOccur = (full_loop_B.SourceBlock_o1 &&
        (full_loop_PrevZCX.Integrator1_Reset_ZCE != 1));
      full_loop_PrevZCX.Integrator1_Reset_ZCE = full_loop_B.SourceBlock_o1;

      // evaluate zero-crossings
      if (full_loop_B.didZcEventOccur || (full_loop_DW.Integrator1_IWORK != 0))
      {
        full_loop_X.Integrator1_CSTATE[0] = full_loop_B.y[0];
        full_loop_X.Integrator1_CSTATE[1] = full_loop_B.y[1];
        full_loop_X.Integrator1_CSTATE[2] = full_loop_B.y[2];
        full_loop_X.Integrator1_CSTATE[3] = full_loop_B.y[3];
      }
    }

    // MATLAB Function: '<S1>/Quaternion Normalise' incorporates:
    //   Integrator: '<S1>/Integrator1'

    full_loop_B.scale = 3.3121686421112381E-170;
    full_loop_B.absxk = std::abs(full_loop_X.Integrator1_CSTATE[0]);
    if (full_loop_B.absxk > 3.3121686421112381E-170) {
      full_loop_B.Product1_a5 = 1.0;
      full_loop_B.scale = full_loop_B.absxk;
    } else {
      full_loop_B.t_p2 = full_loop_B.absxk / 3.3121686421112381E-170;
      full_loop_B.Product1_a5 = full_loop_B.t_p2 * full_loop_B.t_p2;
    }

    full_loop_B.absxk = std::abs(full_loop_X.Integrator1_CSTATE[1]);
    if (full_loop_B.absxk > full_loop_B.scale) {
      full_loop_B.t_p2 = full_loop_B.scale / full_loop_B.absxk;
      full_loop_B.Product1_a5 = full_loop_B.Product1_a5 * full_loop_B.t_p2 *
        full_loop_B.t_p2 + 1.0;
      full_loop_B.scale = full_loop_B.absxk;
    } else {
      full_loop_B.t_p2 = full_loop_B.absxk / full_loop_B.scale;
      full_loop_B.Product1_a5 += full_loop_B.t_p2 * full_loop_B.t_p2;
    }

    full_loop_B.absxk = std::abs(full_loop_X.Integrator1_CSTATE[2]);
    if (full_loop_B.absxk > full_loop_B.scale) {
      full_loop_B.t_p2 = full_loop_B.scale / full_loop_B.absxk;
      full_loop_B.Product1_a5 = full_loop_B.Product1_a5 * full_loop_B.t_p2 *
        full_loop_B.t_p2 + 1.0;
      full_loop_B.scale = full_loop_B.absxk;
    } else {
      full_loop_B.t_p2 = full_loop_B.absxk / full_loop_B.scale;
      full_loop_B.Product1_a5 += full_loop_B.t_p2 * full_loop_B.t_p2;
    }

    full_loop_B.absxk = std::abs(full_loop_X.Integrator1_CSTATE[3]);
    if (full_loop_B.absxk > full_loop_B.scale) {
      full_loop_B.t_p2 = full_loop_B.scale / full_loop_B.absxk;
      full_loop_B.Product1_a5 = full_loop_B.Product1_a5 * full_loop_B.t_p2 *
        full_loop_B.t_p2 + 1.0;
      full_loop_B.scale = full_loop_B.absxk;
    } else {
      full_loop_B.t_p2 = full_loop_B.absxk / full_loop_B.scale;
      full_loop_B.Product1_a5 += full_loop_B.t_p2 * full_loop_B.t_p2;
    }

    full_loop_B.Product1_a5 = full_loop_B.scale * std::sqrt
      (full_loop_B.Product1_a5);
    full_loop_B.y_l_idx_0 = full_loop_X.Integrator1_CSTATE[0] /
      full_loop_B.Product1_a5;
    full_loop_B.y_l_idx_1 = full_loop_X.Integrator1_CSTATE[1] /
      full_loop_B.Product1_a5;
    full_loop_B.y_l_idx_2 = full_loop_X.Integrator1_CSTATE[2] /
      full_loop_B.Product1_a5;
    full_loop_B.y_l_idx_3 = full_loop_X.Integrator1_CSTATE[3] /
      full_loop_B.Product1_a5;

    // End of MATLAB Function: '<S1>/Quaternion Normalise'

    // Sum: '<S30>/Sum' incorporates:
    //   Product: '<S30>/Product'
    //   Product: '<S30>/Product1'
    //   Product: '<S30>/Product2'
    //   Product: '<S30>/Product3'

    full_loop_B.Product1_a5 = ((full_loop_B.y_l_idx_0 * full_loop_B.y_l_idx_0 +
      full_loop_B.y_l_idx_1 * full_loop_B.y_l_idx_1) + full_loop_B.y_l_idx_2 *
      full_loop_B.y_l_idx_2) + full_loop_B.y_l_idx_3 * full_loop_B.y_l_idx_3;
    if (rtmIsMajorTimeStep((&full_loop_M)) &&
        (&full_loop_M)->Timing.TaskCounters.TID[1] == 0) {
      // Gain: '<S24>/Output' incorporates:
      //   RandomNumber: '<S24>/White Noise'

      full_loop_B.Output_n = 0.00012247448713915892 * full_loop_DW.NextOutput_m;
    }

    // Sum: '<S15>/Sum1' incorporates:
    //   Product: '<S26>/Divide'
    //   Product: '<S26>/Divide1'
    //   Product: '<S26>/Divide2'
    //   Product: '<S26>/Divide3'
    //   UnaryMinus: '<S29>/Unary Minus'
    //   UnaryMinus: '<S29>/Unary Minus1'
    //   UnaryMinus: '<S29>/Unary Minus2'

    full_loop_B.Quaternion_idx_0 = full_loop_B.y_l_idx_0 /
      full_loop_B.Product1_a5 + full_loop_B.Output_n;
    full_loop_B.Quaternion_idx_1 = -full_loop_B.y_l_idx_1 /
      full_loop_B.Product1_a5 + full_loop_B.Output_n;
    full_loop_B.Quaternion_idx_2 = -full_loop_B.y_l_idx_2 /
      full_loop_B.Product1_a5 + full_loop_B.Output_n;
    full_loop_B.Quaternion_idx_3 = -full_loop_B.y_l_idx_3 /
      full_loop_B.Product1_a5 + full_loop_B.Output_n;

    // Sum: '<S89>/Sum' incorporates:
    //   Product: '<S89>/Product'
    //   Product: '<S89>/Product1'
    //   Product: '<S89>/Product2'
    //   Product: '<S89>/Product3'
    //   Sum: '<S95>/Sum'

    full_loop_B.Product1_a5 = ((full_loop_B.Quaternion_idx_0 *
      full_loop_B.Quaternion_idx_0 + full_loop_B.Quaternion_idx_1 *
      full_loop_B.Quaternion_idx_1) + full_loop_B.Quaternion_idx_2 *
      full_loop_B.Quaternion_idx_2) + full_loop_B.Quaternion_idx_3 *
      full_loop_B.Quaternion_idx_3;

    // Product: '<S83>/Divide3' incorporates:
    //   Sum: '<S89>/Sum'
    //   UnaryMinus: '<S88>/Unary Minus2'

    full_loop_B.Divide3 = -full_loop_B.Quaternion_idx_3 /
      full_loop_B.Product1_a5;

    // Product: '<S83>/Divide2' incorporates:
    //   Sum: '<S89>/Sum'
    //   UnaryMinus: '<S88>/Unary Minus1'

    full_loop_B.Divide2 = -full_loop_B.Quaternion_idx_2 /
      full_loop_B.Product1_a5;

    // Product: '<S83>/Divide1' incorporates:
    //   Sum: '<S89>/Sum'
    //   UnaryMinus: '<S88>/Unary Minus'

    full_loop_B.Divide1 = -full_loop_B.Quaternion_idx_1 /
      full_loop_B.Product1_a5;

    // Product: '<S83>/Divide' incorporates:
    //   Sum: '<S89>/Sum'

    full_loop_B.Divide = full_loop_B.Quaternion_idx_0 / full_loop_B.Product1_a5;

    // Sqrt: '<S94>/sqrt' incorporates:
    //   Sqrt: '<S110>/sqrt'

    full_loop_B.scale = std::sqrt(full_loop_B.Product1_a5);

    // Product: '<S90>/Product2' incorporates:
    //   Product: '<S105>/Product2'
    //   Sqrt: '<S94>/sqrt'

    full_loop_B.Product1_a5 = full_loop_B.Quaternion_idx_2 / full_loop_B.scale;

    // Product: '<S90>/Product3' incorporates:
    //   Product: '<S105>/Product3'
    //   Sqrt: '<S94>/sqrt'

    full_loop_B.absxk = full_loop_B.Quaternion_idx_3 / full_loop_B.scale;

    // Product: '<S90>/Product1' incorporates:
    //   Product: '<S105>/Product1'
    //   Sqrt: '<S94>/sqrt'

    full_loop_B.t_p2 = full_loop_B.Quaternion_idx_1 / full_loop_B.scale;

    // Product: '<S90>/Product' incorporates:
    //   Product: '<S105>/Product'
    //   Sqrt: '<S94>/sqrt'

    full_loop_B.scale = full_loop_B.Quaternion_idx_0 / full_loop_B.scale;

    // Product: '<S91>/Product7' incorporates:
    //   Product: '<S90>/Product3'
    //   Product: '<S92>/Product7'

    full_loop_B.Sum_a_tmp = full_loop_B.absxk * full_loop_B.absxk;

    // Product: '<S91>/Product' incorporates:
    //   Product: '<S90>/Product1'
    //   Product: '<S90>/Product2'
    //   Product: '<S92>/Product'

    full_loop_B.Sum_a_tmp_g = full_loop_B.t_p2 * full_loop_B.Product1_a5;

    // Product: '<S91>/Product1' incorporates:
    //   Product: '<S90>/Product'
    //   Product: '<S90>/Product3'
    //   Product: '<S92>/Product1'

    full_loop_B.Sum_a_tmp_n = full_loop_B.scale * full_loop_B.absxk;

    // Product: '<S91>/Product3' incorporates:
    //   Product: '<S90>/Product1'
    //   Product: '<S90>/Product3'
    //   Product: '<S93>/Product'

    full_loop_B.rtb_sincos_o1_idx_0 = full_loop_B.t_p2 * full_loop_B.absxk;

    // Product: '<S91>/Product2' incorporates:
    //   Product: '<S90>/Product'
    //   Product: '<S90>/Product2'
    //   Product: '<S93>/Product1'

    full_loop_B.rtb_TmpSignalConversionAtSFu_jv = full_loop_B.scale *
      full_loop_B.Product1_a5;

    // Product: '<S91>/Product6' incorporates:
    //   Product: '<S90>/Product2'
    //   Product: '<S93>/Product7'

    full_loop_B.rtb_sincos_o1_idx_1 = full_loop_B.Product1_a5 *
      full_loop_B.Product1_a5;

    // Sum: '<S91>/Sum' incorporates:
    //   Constant: '<S91>/Constant'
    //   Gain: '<S91>/Gain'
    //   Gain: '<S91>/Gain1'
    //   Gain: '<S91>/Gain2'
    //   Product: '<S91>/Product'
    //   Product: '<S91>/Product1'
    //   Product: '<S91>/Product2'
    //   Product: '<S91>/Product3'
    //   Product: '<S91>/Product4'
    //   Product: '<S91>/Product5'
    //   Product: '<S91>/Product6'
    //   Product: '<S91>/Product7'
    //   Product: '<S91>/Product8'
    //   Sum: '<S91>/Sum1'
    //   Sum: '<S91>/Sum2'
    //   Sum: '<S91>/Sum3'

    full_loop_B.Sum_a = (((0.5 - full_loop_B.rtb_sincos_o1_idx_1) -
                          full_loop_B.Sum_a_tmp) * 2.0 * full_loop_B.Sum_i +
                         (full_loop_B.Sum_a_tmp_g + full_loop_B.Sum_a_tmp_n) *
                         2.0 * full_loop_B.Sum_mk) +
      (full_loop_B.rtb_sincos_o1_idx_0 -
       full_loop_B.rtb_TmpSignalConversionAtSFu_jv) * 2.0 * full_loop_B.Sum_o;

    // Product: '<S92>/Product3' incorporates:
    //   Product: '<S90>/Product2'
    //   Product: '<S90>/Product3'
    //   Product: '<S93>/Product3'

    full_loop_B.rtb_TmpSignalConversionAtSFun_b = full_loop_B.Product1_a5 *
      full_loop_B.absxk;

    // Product: '<S92>/Product2' incorporates:
    //   Product: '<S90>/Product'
    //   Product: '<S90>/Product1'
    //   Product: '<S93>/Product2'

    full_loop_B.rtb_sincos_o1_idx_2 = full_loop_B.scale * full_loop_B.t_p2;

    // Sum: '<S92>/Sum3' incorporates:
    //   Constant: '<S92>/Constant'
    //   Product: '<S90>/Product1'
    //   Product: '<S92>/Product6'
    //   Sum: '<S93>/Sum3'

    full_loop_B.rtb_TmpSignalConversionAtSFun_i = 0.5 - full_loop_B.t_p2 *
      full_loop_B.t_p2;

    // Sum: '<S92>/Sum' incorporates:
    //   Gain: '<S92>/Gain'
    //   Gain: '<S92>/Gain1'
    //   Gain: '<S92>/Gain2'
    //   Product: '<S92>/Product2'
    //   Product: '<S92>/Product3'
    //   Product: '<S92>/Product4'
    //   Product: '<S92>/Product5'
    //   Product: '<S92>/Product8'
    //   Sum: '<S92>/Sum1'
    //   Sum: '<S92>/Sum2'
    //   Sum: '<S92>/Sum3'

    full_loop_B.Sum_g = ((full_loop_B.rtb_TmpSignalConversionAtSFun_i -
                          full_loop_B.Sum_a_tmp) * 2.0 * full_loop_B.Sum_mk +
                         (full_loop_B.Sum_a_tmp_g - full_loop_B.Sum_a_tmp_n) *
                         2.0 * full_loop_B.Sum_i) +
      (full_loop_B.rtb_sincos_o1_idx_2 +
       full_loop_B.rtb_TmpSignalConversionAtSFun_b) * 2.0 * full_loop_B.Sum_o;

    // Sum: '<S93>/Sum' incorporates:
    //   Gain: '<S93>/Gain'
    //   Gain: '<S93>/Gain1'
    //   Gain: '<S93>/Gain2'
    //   Product: '<S93>/Product4'
    //   Product: '<S93>/Product5'
    //   Product: '<S93>/Product8'
    //   Sum: '<S93>/Sum1'
    //   Sum: '<S93>/Sum2'
    //   Sum: '<S93>/Sum3'

    full_loop_B.Sum_e = ((full_loop_B.rtb_sincos_o1_idx_0 +
                          full_loop_B.rtb_TmpSignalConversionAtSFu_jv) * 2.0 *
                         full_loop_B.Sum_i +
                         (full_loop_B.rtb_TmpSignalConversionAtSFun_b -
                          full_loop_B.rtb_sincos_o1_idx_2) * 2.0 *
                         full_loop_B.Sum_mk) +
      (full_loop_B.rtb_TmpSignalConversionAtSFun_i -
       full_loop_B.rtb_sincos_o1_idx_1) * 2.0 * full_loop_B.Sum_o;
    if (rtmIsMajorTimeStep((&full_loop_M)) &&
        (&full_loop_M)->Timing.TaskCounters.TID[3] == 0) {
      // DiscreteIntegrator: '<S7>/Discrete-Time Integrator'
      if (full_loop_DW.DiscreteTimeIntegrator_IC_LOADI != 0) {
        full_loop_DW.DiscreteTimeIntegrator_DSTATE[0] =
          full_loop_B.In1_k.Position.X;
        full_loop_DW.DiscreteTimeIntegrator_DSTATE[1] =
          full_loop_B.In1_k.Position.Y;
        full_loop_DW.DiscreteTimeIntegrator_DSTATE[2] =
          full_loop_B.In1_k.Position.Z;
      }

      if (full_loop_B.SourceBlock_o1 &&
          (full_loop_DW.DiscreteTimeIntegrator_PrevRese <= 0)) {
        full_loop_DW.DiscreteTimeIntegrator_DSTATE[0] =
          full_loop_B.In1_k.Position.X;
        full_loop_DW.DiscreteTimeIntegrator_DSTATE[1] =
          full_loop_B.In1_k.Position.Y;
        full_loop_DW.DiscreteTimeIntegrator_DSTATE[2] =
          full_loop_B.In1_k.Position.Z;
      }

      full_loop_B.WorldPosition[0] = 0.025 * full_loop_B.Sum_a +
        full_loop_DW.DiscreteTimeIntegrator_DSTATE[0];
      full_loop_B.WorldPosition[1] = 0.025 * full_loop_B.Sum_g +
        full_loop_DW.DiscreteTimeIntegrator_DSTATE[1];
      full_loop_B.WorldPosition[2] = 0.025 * full_loop_B.Sum_e +
        full_loop_DW.DiscreteTimeIntegrator_DSTATE[2];

      // End of DiscreteIntegrator: '<S7>/Discrete-Time Integrator'
    }

    if (rtmIsMajorTimeStep((&full_loop_M)) &&
        (&full_loop_M)->Timing.TaskCounters.TID[2] == 0) {
      for (full_loop_B.i_h = 0; full_loop_B.i_h < 6; full_loop_B.i_h++) {
        // DiscreteIntegrator: '<S119>/Integrator' incorporates:
        //   Constant: '<S115>/Constant3'

        if (full_loop_DW.Integrator_PrevResetState != 0) {
          full_loop_DW.Integrator_DSTATE[full_loop_B.i_h] = 0.0;
        }

        // Gain: '<S115>/Gain3' incorporates:
        //   DiscreteIntegrator: '<S119>/Integrator'

        full_loop_B.MultiportSwitch[full_loop_B.i_h] = 95.5488288487489 *
          full_loop_DW.Integrator_DSTATE[full_loop_B.i_h];

        // DiscreteIntegrator: '<S120>/Integrator' incorporates:
        //   Constant: '<S115>/Constant2'

        if (full_loop_DW.Integrator_PrevResetState_l != 0) {
          full_loop_DW.Integrator_DSTATE_h[full_loop_B.i_h] = 0.0;
        }

        full_loop_B.Integrator[full_loop_B.i_h] =
          full_loop_DW.Integrator_DSTATE_h[full_loop_B.i_h];

        // End of DiscreteIntegrator: '<S120>/Integrator'

        // Gain: '<S115>/Gain'
        full_loop_B.Gain_o[full_loop_B.i_h] = 19.354318087151384 *
          full_loop_B.Integrator[full_loop_B.i_h];
      }

      // Outputs for Atomic SubSystem: '<S112>/Subscribe2'
      // MATLABSystem: '<S116>/SourceBlock' incorporates:
      //   Inport: '<S121>/In1'

      full_loop_B.didZcEventOccur = Sub_full_loop_644_1122.getLatestMessage
        (&full_loop_B.b_varargout_2_c);

      // Outputs for Enabled SubSystem: '<S116>/Enabled Subsystem' incorporates:
      //   EnablePort: '<S121>/Enable'

      if (full_loop_B.didZcEventOccur) {
        full_loop_B.In1_p = full_loop_B.b_varargout_2_c;
      }

      // End of MATLABSystem: '<S116>/SourceBlock'
      // End of Outputs for SubSystem: '<S116>/Enabled Subsystem'
      // End of Outputs for SubSystem: '<S112>/Subscribe2'

      // Sum: '<S115>/Sum'
      full_loop_B.Sum[0] = (full_loop_B.In1_p.Linear.X -
                            full_loop_B.MultiportSwitch[0]) -
        full_loop_B.Gain_o[0];
      full_loop_B.Sum[1] = (full_loop_B.In1_p.Linear.Y -
                            full_loop_B.MultiportSwitch[1]) -
        full_loop_B.Gain_o[1];
      full_loop_B.Sum[2] = (full_loop_B.In1_p.Linear.Z -
                            full_loop_B.MultiportSwitch[2]) -
        full_loop_B.Gain_o[2];
      full_loop_B.Sum[3] = (full_loop_B.In1_p.Angular.X -
                            full_loop_B.MultiportSwitch[3]) -
        full_loop_B.Gain_o[3];
      full_loop_B.Sum[4] = (full_loop_B.In1_p.Angular.Y -
                            full_loop_B.MultiportSwitch[4]) -
        full_loop_B.Gain_o[4];
      full_loop_B.Sum[5] = (full_loop_B.In1_p.Angular.Z -
                            full_loop_B.MultiportSwitch[5]) -
        full_loop_B.Gain_o[5];
    }

    if (rtmIsMajorTimeStep((&full_loop_M)) &&
        (&full_loop_M)->Timing.TaskCounters.TID[4] == 0) {
      // Sum: '<S9>/Sum'
      full_loop_B.Sum_l = static_cast<uint8_T>(static_cast<uint32_T>
        (full_loop_B.SourceBlock_o1_b) + full_loop_B.SourceBlock_o1);

      // SwitchCase: '<S8>/Switch Case' incorporates:
      //   MATLABSystem: '<S123>/SourceBlock'
      //   MATLABSystem: '<S124>/SourceBlock'

      full_loop_B.rtAction = -1;
      if (rtmIsMajorTimeStep((&full_loop_M))) {
        switch (full_loop_B.Data) {
         case 10:
          full_loop_B.rtAction = 0;
          break;

         case 19:
         case 20:
         case 21:
          full_loop_B.rtAction = 1;
          break;
        }

        full_loop_DW.SwitchCase_ActiveSubsystem = full_loop_B.rtAction;
      } else {
        full_loop_B.rtAction = full_loop_DW.SwitchCase_ActiveSubsystem;
      }

      switch (full_loop_B.rtAction) {
       case 0:
        // Outputs for IfAction SubSystem: '<S8>/SubsystemAuto' incorporates:
        //   ActionPort: '<S113>/Action Port'

        // SignalConversion generated from: '<S122>/ SFunction ' incorporates:
        //   MATLAB Function: '<S113>/MATLAB Function'

        full_loop_B.TmpSignalConversionAtSFun_a[0] = full_loop_B.WorldPosition[0];
        full_loop_B.TmpSignalConversionAtSFun_a[1] = full_loop_B.WorldPosition[1];
        full_loop_B.TmpSignalConversionAtSFun_a[2] = full_loop_B.WorldPosition[2];
        full_loop_B.TmpSignalConversionAtSFun_a[3] = full_loop_B.Divide;
        full_loop_B.TmpSignalConversionAtSFun_a[4] = full_loop_B.Divide1;
        full_loop_B.TmpSignalConversionAtSFun_a[5] = full_loop_B.Divide2;
        full_loop_B.TmpSignalConversionAtSFun_a[6] = full_loop_B.Divide3;

        // Outputs for Atomic SubSystem: '<S113>/Subscribe2'
        // MATLABSystem: '<S125>/SourceBlock'
        full_loop_B.didZcEventOccur = Sub_full_loop_644_946.getLatestMessage
          (&full_loop_B.b_varargout_2_b);

        // End of Outputs for SubSystem: '<S113>/Subscribe2'

        // Outputs for Atomic SubSystem: '<S113>/Subscribe'
        // MATLABSystem: '<S123>/SourceBlock'
        full_loop_B.SourceBlock_o1_b = Sub_full_loop_644_945.getLatestMessage
          (&full_loop_B.b_varargout_2_o);

        // Outputs for Enabled SubSystem: '<S113>/Subsystem1' incorporates:
        //   EnablePort: '<S126>/Enable'

        // Outputs for Enabled SubSystem: '<S123>/Enabled Subsystem' incorporates:
        //   EnablePort: '<S128>/Enable'

        if (full_loop_B.SourceBlock_o1_b) {
          // DataTypeConversion: '<S126>/Data Type Conversion'
          full_loop_B.DataTypeConversion[0] =
            full_loop_B.b_varargout_2_o.Position.X;
          full_loop_B.DataTypeConversion[1] =
            full_loop_B.b_varargout_2_o.Position.Y;
          full_loop_B.DataTypeConversion[2] =
            full_loop_B.b_varargout_2_o.Position.Z;
          full_loop_B.DataTypeConversion[3] =
            full_loop_B.b_varargout_2_o.Orientation.Z;
          full_loop_B.DataTypeConversion[4] =
            full_loop_B.b_varargout_2_o.Orientation.Y;
          full_loop_B.DataTypeConversion[5] =
            full_loop_B.b_varargout_2_o.Orientation.X;

          // DataTypeConversion: '<S126>/Data Type Conversion1'
          full_loop_B.DataTypeConversion1[0] = full_loop_B.b_varargout_2_o.Frame;
          full_loop_B.DataTypeConversion1[1] = full_loop_B.b_varargout_2_o.Speed;

          // DataTypeConversion: '<S126>/Data Type Conversion2'
          full_loop_B.DataTypeConversion2 = full_loop_B.b_varargout_2_o.Fine;
        }

        // End of Outputs for SubSystem: '<S123>/Enabled Subsystem'
        // End of Outputs for SubSystem: '<S113>/Subsystem1'
        // End of Outputs for SubSystem: '<S113>/Subscribe'

        // SignalConversion generated from: '<S113>/MATLAB System1' incorporates:
        //   MATLABSystem: '<S123>/SourceBlock'

        for (full_loop_B.i_h = 0; full_loop_B.i_h < 6; full_loop_B.i_h++) {
          full_loop_B.TmpSignalConversionAtMATLAB[full_loop_B.i_h] =
            full_loop_B.DataTypeConversion[full_loop_B.i_h];
        }

        // MATLABSystem: '<S113>/MATLAB System1' incorporates:
        //   Delay: '<S113>/Delay'
        //   MATLAB Function: '<S113>/MATLAB Function'
        //   MATLABSystem: '<S123>/SourceBlock'
        //   MATLABSystem: '<S125>/SourceBlock'
        //   SignalConversion generated from: '<S113>/MATLAB System1'

        //  Main appeller à chaque exécution
        //  Suppression du buffer.
        //  Fonction qui interprete les message ROS
        if (full_loop_DW.Delay_DSTATE) {
          full_loop_B.i_h = static_cast<int32_T>(full_loop_DW.obj_o.i - 1.0);
          for (full_loop_B.ibmat = 0; full_loop_B.ibmat < 8; full_loop_B.ibmat++)
          {
            full_loop_DW.obj_o.poseList[20 * full_loop_B.ibmat] =
              full_loop_DW.obj_o.poseList[(20 * full_loop_B.ibmat +
              full_loop_B.i_h) - 1];
            for (full_loop_B.M_tmp = 0; full_loop_B.M_tmp < 19;
                 full_loop_B.M_tmp++) {
              full_loop_DW.obj_o.poseList[((full_loop_B.M_tmp + 2) + 20 *
                full_loop_B.ibmat) - 1] = 999.0;
            }
          }

          full_loop_DW.obj_o.i = 2.0;
        }

        // Outputs for Atomic SubSystem: '<S113>/Subscribe2'
        if (full_loop_B.didZcEventOccur) {
          for (full_loop_B.i_h = 0; full_loop_B.i_h < 8; full_loop_B.i_h++) {
            for (full_loop_B.ibmat = 0; full_loop_B.ibmat < 19;
                 full_loop_B.ibmat++) {
              full_loop_DW.obj_o.poseList[((full_loop_B.ibmat + 2) + 20 *
                full_loop_B.i_h) - 1] = 999.0;
            }
          }

          full_loop_DW.obj_o.i = 2.0;
        }

        // End of Outputs for SubSystem: '<S113>/Subscribe2'

        // Outputs for Atomic SubSystem: '<S113>/Subscribe'
        //  Ajout d'un waypoint provenant de ROS.
        if (full_loop_B.SourceBlock_o1_b && (full_loop_DW.obj_o.i < 20.0)) {
          //  Fonction qui interprete les waypoints reçu par ROS
          //  Determiner le quaternion en fonction des angles d'euler.
          //  Orde de rotation : ZYX.
          //  Reel
          full_loop_B.twpt[7] = full_loop_B.DataTypeConversion1[1];

          //  Weird unity vs realitée besoin test piscine !!
          full_loop_B.u2[0] = full_loop_B.TmpSignalConversionAtMATLAB[0];
          full_loop_B.u2[2] = full_loop_B.TmpSignalConversionAtMATLAB[2];
          full_loop_B.u2[1] = -full_loop_B.TmpSignalConversionAtMATLAB[1];

          //  Pre calculs
          full_loop_B.rtb_TmpSignalConversionAtSFun_i = 0.017453292519943295 *
            full_loop_B.TmpSignalConversionAtMATLAB[3];
          full_loop_B.rtb_sincos_o1_idx_0 =
            full_loop_B.rtb_TmpSignalConversionAtSFun_i / 2.0;
          full_loop_B.rtb_TmpSignalConversionAtSFu_jv =
            full_loop_B.rtb_TmpSignalConversionAtSFun_i;
          full_loop_B.rtb_TmpSignalConversionAtSFun_i = 0.017453292519943295 *
            full_loop_B.TmpSignalConversionAtMATLAB[4];
          full_loop_B.rtb_sincos_o1_idx_1 =
            full_loop_B.rtb_TmpSignalConversionAtSFun_i / 2.0;
          full_loop_B.rtb_TmpSignalConversionAtSFun_b =
            full_loop_B.rtb_TmpSignalConversionAtSFun_i;
          full_loop_B.rtb_TmpSignalConversionAtSFun_i = 0.017453292519943295 *
            full_loop_B.TmpSignalConversionAtMATLAB[5];
          full_loop_B.rtb_sincos_o1_idx_0 = std::cos
            (full_loop_B.rtb_sincos_o1_idx_0);
          full_loop_B.rtb_TmpSignalConversionAtSFu_jv /= 2.0;
          full_loop_B.rtb_sincos_o1_idx_1 = std::cos
            (full_loop_B.rtb_sincos_o1_idx_1);
          full_loop_B.rtb_TmpSignalConversionAtSFun_b /= 2.0;
          full_loop_B.rtb_sincos_o1_idx_2 = std::cos
            (full_loop_B.rtb_TmpSignalConversionAtSFun_i / 2.0);
          full_loop_B.rtb_TmpSignalConversionAtSFu_jv = std::sin
            (full_loop_B.rtb_TmpSignalConversionAtSFu_jv);
          full_loop_B.rtb_TmpSignalConversionAtSFun_b = std::sin
            (full_loop_B.rtb_TmpSignalConversionAtSFun_b);
          full_loop_B.rtb_TmpSignalConversionAtSFun_i = std::sin
            (full_loop_B.rtb_TmpSignalConversionAtSFun_i / 2.0);
          full_loop_B.Sum_a_tmp = full_loop_B.rtb_sincos_o1_idx_0 *
            full_loop_B.rtb_sincos_o1_idx_1;
          full_loop_B.Sum_a_tmp_g = full_loop_B.rtb_TmpSignalConversionAtSFu_jv *
            full_loop_B.rtb_TmpSignalConversionAtSFun_b;
          full_loop_B.q_a2[0] = full_loop_B.Sum_a_tmp *
            full_loop_B.rtb_sincos_o1_idx_2 + full_loop_B.Sum_a_tmp_g *
            full_loop_B.rtb_TmpSignalConversionAtSFun_i;
          full_loop_B.q_a2[1] = full_loop_B.Sum_a_tmp *
            full_loop_B.rtb_TmpSignalConversionAtSFun_i -
            full_loop_B.Sum_a_tmp_g * full_loop_B.rtb_sincos_o1_idx_2;
          full_loop_B.Sum_a_tmp = full_loop_B.rtb_TmpSignalConversionAtSFu_jv *
            full_loop_B.rtb_sincos_o1_idx_1;
          full_loop_B.Sum_a_tmp_g = full_loop_B.rtb_sincos_o1_idx_0 *
            full_loop_B.rtb_TmpSignalConversionAtSFun_b;
          full_loop_B.q_a2[2] = full_loop_B.Sum_a_tmp_g *
            full_loop_B.rtb_sincos_o1_idx_2 + full_loop_B.Sum_a_tmp *
            full_loop_B.rtb_TmpSignalConversionAtSFun_i;
          full_loop_B.q_a2[3] = full_loop_B.Sum_a_tmp *
            full_loop_B.rtb_sincos_o1_idx_2 - full_loop_B.Sum_a_tmp_g *
            full_loop_B.rtb_TmpSignalConversionAtSFun_i;

          //  rp = quatrotate(quatinv(lq),wpt(1:3)) + lp;
          // rp = rotatepoint(quatinv(lq),wpt(1:3)) + lp;
          //  quaternion partie scalaire
          //  quaternion partie vectoriel
          full_loop_B.rtb_TmpSignalConversionAtSFun_b = 0.0;
          full_loop_B.rtb_TmpSignalConversionAtSFu_jv = 0.0;
          for (full_loop_B.i_h = 0; full_loop_B.i_h < 3; full_loop_B.i_h++) {
            full_loop_B.rtb_TmpSignalConversionAtSFun_b +=
              full_loop_DW.obj_o.poseList[((full_loop_B.i_h + 4) * 20 +
              static_cast<int32_T>(full_loop_DW.obj_o.i - 1.0)) - 1] *
              full_loop_B.u2[full_loop_B.i_h];
            full_loop_B.ibmat = (static_cast<int32_T>(full_loop_DW.obj_o.i - 1.0)
                                 + 20 * (full_loop_B.i_h + 4)) - 1;
            full_loop_B.rtb_TmpSignalConversionAtSFu_jv +=
              full_loop_DW.obj_o.poseList[full_loop_B.ibmat] *
              full_loop_DW.obj_o.poseList[full_loop_B.ibmat];
          }

          full_loop_B.rtb_sincos_o1_idx_0 = 2.0 *
            full_loop_B.rtb_TmpSignalConversionAtSFun_b;
          full_loop_B.ibmat = static_cast<int32_T>(full_loop_DW.obj_o.i - 1.0);
          full_loop_B.i_h = full_loop_B.ibmat + 59;
          full_loop_B.rtb_TmpSignalConversionAtSFu_jv =
            full_loop_DW.obj_o.poseList[full_loop_B.i_h] *
            full_loop_DW.obj_o.poseList[full_loop_B.i_h] -
            full_loop_B.rtb_TmpSignalConversionAtSFu_jv;
          full_loop_B.rtb_sincos_o1_idx_1 =
            full_loop_DW.obj_o.poseList[full_loop_B.i_h] * 2.0;
          full_loop_B.rtb_TmpSignalConversionAtSFun_b = 0.0;
          for (full_loop_B.i_h = 0; full_loop_B.i_h < 4; full_loop_B.i_h++) {
            full_loop_B.rtb_TmpSignalConversionAtSFun_b +=
              full_loop_DW.obj_o.poseList[((full_loop_B.i_h + 3) * 20 +
              full_loop_B.ibmat) - 1] * full_loop_B.q_a2[full_loop_B.i_h];
          }

          if (full_loop_B.rtb_TmpSignalConversionAtSFun_b < 1.0) {
            full_loop_B.rtb_TmpSignalConversionAtSFun_b = ((full_loop_B.q_a2[0] *
              full_loop_B.q_a2[0] + -full_loop_B.q_a2[1] * -full_loop_B.q_a2[1])
              + -full_loop_B.q_a2[2] * -full_loop_B.q_a2[2]) +
              -full_loop_B.q_a2[3] * -full_loop_B.q_a2[3];
            full_loop_B.b_q[0] = full_loop_B.q_a2[0] /
              full_loop_B.rtb_TmpSignalConversionAtSFun_b;
            full_loop_B.b_q[1] = full_loop_B.q_a2[1] /
              full_loop_B.rtb_TmpSignalConversionAtSFun_b;
            full_loop_B.b_q[2] = full_loop_B.q_a2[2] /
              full_loop_B.rtb_TmpSignalConversionAtSFun_b;
            full_loop_B.b_q[3] = full_loop_B.q_a2[3] /
              full_loop_B.rtb_TmpSignalConversionAtSFun_b;
            full_loop_B.dv25[0] = full_loop_DW.obj_o.poseList[full_loop_B.ibmat
              + 59];
            full_loop_B.dv25[1] = full_loop_DW.obj_o.poseList[full_loop_B.ibmat
              + 79];
            full_loop_B.dv25[2] = full_loop_DW.obj_o.poseList[full_loop_B.ibmat
              + 99];
            full_loop_B.dv25[3] = full_loop_DW.obj_o.poseList[full_loop_B.ibmat
              + 119];
            full_loop_quatmultiply(full_loop_B.dv25, full_loop_B.b_q,
              full_loop_B.rq);
          } else {
            full_loop_B.rtb_TmpSignalConversionAtSFun_b = ((full_loop_B.q_a2[0] *
              full_loop_B.q_a2[0] + full_loop_B.q_a2[1] * full_loop_B.q_a2[1]) +
              full_loop_B.q_a2[2] * full_loop_B.q_a2[2]) + full_loop_B.q_a2[3] *
              full_loop_B.q_a2[3];
            full_loop_B.b_q[0] = full_loop_B.q_a2[0] /
              full_loop_B.rtb_TmpSignalConversionAtSFun_b;
            full_loop_B.b_q[1] = -full_loop_B.q_a2[1] /
              full_loop_B.rtb_TmpSignalConversionAtSFun_b;
            full_loop_B.b_q[2] = -full_loop_B.q_a2[2] /
              full_loop_B.rtb_TmpSignalConversionAtSFun_b;
            full_loop_B.b_q[3] = -full_loop_B.q_a2[3] /
              full_loop_B.rtb_TmpSignalConversionAtSFun_b;
            full_loop_B.dv25[0] = full_loop_DW.obj_o.poseList[full_loop_B.ibmat
              + 59];
            full_loop_B.dv25[1] = full_loop_DW.obj_o.poseList[full_loop_B.ibmat
              + 79];
            full_loop_B.dv25[2] = full_loop_DW.obj_o.poseList[full_loop_B.ibmat
              + 99];
            full_loop_B.dv25[3] = full_loop_DW.obj_o.poseList[full_loop_B.ibmat
              + 119];
            full_loop_quatmultiply(full_loop_B.dv25, full_loop_B.b_q,
              full_loop_B.rq);
          }

          //  transformer le point en fonction du frame
          full_loop_B.rtb_TmpSignalConversionAtSFun_b = rt_roundd_snf
            (full_loop_B.DataTypeConversion1[0]);
          if (full_loop_B.rtb_TmpSignalConversionAtSFun_b < 256.0) {
            if (full_loop_B.rtb_TmpSignalConversionAtSFun_b >= 0.0) {
              full_loop_B.u_m = static_cast<uint8_T>
                (full_loop_B.rtb_TmpSignalConversionAtSFun_b);
            } else {
              full_loop_B.u_m = 0U;
            }
          } else {
            full_loop_B.u_m = MAX_uint8_T;
          }

          switch (full_loop_B.u_m) {
           case 0:
            //  position et angle absolue
            full_loop_B.twpt[0] = full_loop_B.TmpSignalConversionAtMATLAB[0];
            full_loop_B.twpt[1] = full_loop_B.TmpSignalConversionAtMATLAB[1];
            full_loop_B.twpt[2] = full_loop_B.TmpSignalConversionAtMATLAB[2];
            full_loop_B.twpt[3] = full_loop_B.q_a2[0];
            full_loop_B.twpt[4] = full_loop_B.q_a2[1];
            full_loop_B.twpt[5] = full_loop_B.q_a2[2];
            full_loop_B.twpt[6] = full_loop_B.q_a2[3];
            break;

           case 1:
            //  position et angle relatif
            full_loop_B.rtb_TmpSignalConversionAtSFun_b =
              full_loop_DW.obj_o.poseList[static_cast<int32_T>
              (full_loop_DW.obj_o.i - 1.0) + 119];
            full_loop_B.rtb_sincos_o1_idx_2 = full_loop_DW.obj_o.poseList[
              static_cast<int32_T>(full_loop_DW.obj_o.i - 1.0) + 99];
            full_loop_B.twpt[0] = (full_loop_B.rtb_sincos_o1_idx_2 *
              full_loop_B.TmpSignalConversionAtMATLAB[2] -
              full_loop_B.rtb_TmpSignalConversionAtSFun_b *
              -full_loop_B.TmpSignalConversionAtMATLAB[1]) *
              full_loop_B.rtb_sincos_o1_idx_1 +
              ((full_loop_DW.obj_o.poseList[full_loop_B.ibmat + 79] *
                full_loop_B.rtb_sincos_o1_idx_0 +
                full_loop_DW.obj_o.poseList[full_loop_B.ibmat - 1]) +
               full_loop_B.rtb_TmpSignalConversionAtSFu_jv *
               full_loop_B.TmpSignalConversionAtMATLAB[0]);
            full_loop_B.rtb_TmpSignalConversionAtSFun_i =
              full_loop_DW.obj_o.poseList[static_cast<int32_T>
              (full_loop_DW.obj_o.i - 1.0) + 79];
            full_loop_B.twpt[1] = (full_loop_B.rtb_TmpSignalConversionAtSFun_b *
              full_loop_B.TmpSignalConversionAtMATLAB[0] -
              full_loop_B.rtb_TmpSignalConversionAtSFun_i *
              full_loop_B.TmpSignalConversionAtMATLAB[2]) *
              full_loop_B.rtb_sincos_o1_idx_1 +
              ((full_loop_DW.obj_o.poseList[full_loop_B.ibmat + 99] *
                full_loop_B.rtb_sincos_o1_idx_0 +
                full_loop_DW.obj_o.poseList[full_loop_B.ibmat + 19]) +
               full_loop_B.rtb_TmpSignalConversionAtSFu_jv *
               -full_loop_B.TmpSignalConversionAtMATLAB[1]);
            full_loop_B.twpt[2] = (full_loop_B.rtb_TmpSignalConversionAtSFun_i *
              -full_loop_B.TmpSignalConversionAtMATLAB[1] -
              full_loop_B.rtb_sincos_o1_idx_2 *
              full_loop_B.TmpSignalConversionAtMATLAB[0]) *
              full_loop_B.rtb_sincos_o1_idx_1 +
              ((full_loop_DW.obj_o.poseList[full_loop_B.ibmat + 119] *
                full_loop_B.rtb_sincos_o1_idx_0 +
                full_loop_DW.obj_o.poseList[full_loop_B.ibmat + 39]) +
               full_loop_B.rtb_TmpSignalConversionAtSFu_jv *
               full_loop_B.TmpSignalConversionAtMATLAB[2]);
            full_loop_B.twpt[3] = full_loop_B.rq[0];
            full_loop_B.twpt[4] = full_loop_B.rq[1];
            full_loop_B.twpt[5] = full_loop_B.rq[2];
            full_loop_B.twpt[6] = full_loop_B.rq[3];
            break;

           case 2:
            //  position relatif et angle absolue
            full_loop_B.twpt[0] = (full_loop_DW.obj_o.poseList
              [static_cast<int32_T>(full_loop_DW.obj_o.i - 1.0) + 99] *
              full_loop_B.TmpSignalConversionAtMATLAB[2] -
              full_loop_DW.obj_o.poseList[static_cast<int32_T>
              (full_loop_DW.obj_o.i - 1.0) + 119] *
              -full_loop_B.TmpSignalConversionAtMATLAB[1]) *
              full_loop_B.rtb_sincos_o1_idx_1 +
              ((full_loop_DW.obj_o.poseList[full_loop_B.ibmat + 79] *
                full_loop_B.rtb_sincos_o1_idx_0 +
                full_loop_DW.obj_o.poseList[full_loop_B.ibmat - 1]) +
               full_loop_B.rtb_TmpSignalConversionAtSFu_jv *
               full_loop_B.TmpSignalConversionAtMATLAB[0]);
            full_loop_B.twpt[1] = (full_loop_DW.obj_o.poseList
              [static_cast<int32_T>(full_loop_DW.obj_o.i - 1.0) + 119] *
              full_loop_B.TmpSignalConversionAtMATLAB[0] -
              full_loop_DW.obj_o.poseList[static_cast<int32_T>
              (full_loop_DW.obj_o.i - 1.0) + 79] *
              full_loop_B.TmpSignalConversionAtMATLAB[2]) *
              full_loop_B.rtb_sincos_o1_idx_1 +
              ((full_loop_DW.obj_o.poseList[full_loop_B.ibmat + 99] *
                full_loop_B.rtb_sincos_o1_idx_0 +
                full_loop_DW.obj_o.poseList[full_loop_B.ibmat + 19]) +
               full_loop_B.rtb_TmpSignalConversionAtSFu_jv *
               -full_loop_B.TmpSignalConversionAtMATLAB[1]);
            full_loop_B.twpt[2] = (full_loop_DW.obj_o.poseList
              [static_cast<int32_T>(full_loop_DW.obj_o.i - 1.0) + 79] *
              -full_loop_B.TmpSignalConversionAtMATLAB[1] -
              full_loop_DW.obj_o.poseList[static_cast<int32_T>
              (full_loop_DW.obj_o.i - 1.0) + 99] *
              full_loop_B.TmpSignalConversionAtMATLAB[0]) *
              full_loop_B.rtb_sincos_o1_idx_1 +
              ((full_loop_DW.obj_o.poseList[full_loop_B.ibmat + 119] *
                full_loop_B.rtb_sincos_o1_idx_0 +
                full_loop_DW.obj_o.poseList[full_loop_B.ibmat + 39]) +
               full_loop_B.rtb_TmpSignalConversionAtSFu_jv *
               full_loop_B.TmpSignalConversionAtMATLAB[2]);
            full_loop_B.twpt[3] = full_loop_B.q_a2[0];
            full_loop_B.twpt[4] = full_loop_B.q_a2[1];
            full_loop_B.twpt[5] = full_loop_B.q_a2[2];
            full_loop_B.twpt[6] = full_loop_B.q_a2[3];
            break;

           case 3:
            //  position absolue et angle relatif
            full_loop_B.twpt[0] = full_loop_B.TmpSignalConversionAtMATLAB[0];
            full_loop_B.twpt[1] = full_loop_B.TmpSignalConversionAtMATLAB[1];
            full_loop_B.twpt[2] = full_loop_B.TmpSignalConversionAtMATLAB[2];
            full_loop_B.twpt[3] = full_loop_B.rq[0];
            full_loop_B.twpt[4] = full_loop_B.rq[1];
            full_loop_B.twpt[5] = full_loop_B.rq[2];
            full_loop_B.twpt[6] = full_loop_B.rq[3];
            break;

           default:
            //  retourne le point précédent
            full_loop_B.twpt[0] = full_loop_DW.obj_o.poseList[full_loop_B.ibmat
              - 1];
            full_loop_B.twpt[1] = full_loop_DW.obj_o.poseList[full_loop_B.ibmat
              + 19];
            full_loop_B.twpt[2] = full_loop_DW.obj_o.poseList[full_loop_B.ibmat
              + 39];
            full_loop_B.twpt[3] = full_loop_DW.obj_o.poseList[full_loop_B.ibmat
              + 59];
            full_loop_B.twpt[4] = full_loop_DW.obj_o.poseList[full_loop_B.ibmat
              + 79];
            full_loop_B.twpt[5] = full_loop_DW.obj_o.poseList[full_loop_B.ibmat
              + 99];
            full_loop_B.twpt[6] = full_loop_DW.obj_o.poseList[full_loop_B.ibmat
              + 119];
            break;
          }

          full_loop_B.i_h = static_cast<int32_T>(full_loop_DW.obj_o.i);
          for (full_loop_B.ibmat = 0; full_loop_B.ibmat < 8; full_loop_B.ibmat++)
          {
            full_loop_DW.obj_o.poseList[(full_loop_B.i_h + 20 *
              full_loop_B.ibmat) - 1] = full_loop_B.twpt[full_loop_B.ibmat];
          }

          full_loop_DW.obj_o.i++;
        }

        // End of Outputs for SubSystem: '<S113>/Subscribe'
        if (full_loop_B.Sum_l == 1) {
          for (full_loop_B.i_h = 0; full_loop_B.i_h < 8; full_loop_B.i_h++) {
            for (full_loop_B.ibmat = 0; full_loop_B.ibmat < 19;
                 full_loop_B.ibmat++) {
              full_loop_DW.obj_o.poseList[((full_loop_B.ibmat + 2) + 20 *
                full_loop_B.i_h) - 1] = 999.0;
            }
          }

          for (full_loop_B.i_h = 0; full_loop_B.i_h < 7; full_loop_B.i_h++) {
            full_loop_DW.obj_o.poseList[20 * full_loop_B.i_h] =
              full_loop_B.TmpSignalConversionAtSFun_a[full_loop_B.i_h];
          }

          full_loop_DW.obj_o.poseList[140] = 0.0;
          full_loop_DW.obj_o.i = 2.0;
        }

        // Outputs for Atomic SubSystem: '<S113>/Subscribe1'
        // MATLABSystem: '<S124>/SourceBlock'
        full_loop_DW.Delay_DSTATE = Sub_full_loop_644_944.getLatestMessage
          (&full_loop_B.b_varargout_2_b);

        // Outputs for Triggered SubSystem: '<S113>/Subsystem2' incorporates:
        //   TriggerPort: '<S127>/Trigger'

        if (full_loop_DW.Delay_DSTATE && (full_loop_PrevZCX.Subsystem2_Trig_ZCE
             != 1)) {
          // MATLABSystem: '<S127>/MATLAB System2' incorporates:
          //   MATLABSystem: '<S113>/MATLAB System1'

          if (!full_loop_isequal_p43r(full_loop_DW.obj_c.avanceRapide,
               full_loop_ConstP.MATLABSystem2_avanceRapide)) {
            for (full_loop_B.i_h = 0; full_loop_B.i_h < 7; full_loop_B.i_h++) {
              full_loop_DW.obj_c.avanceRapide[full_loop_B.i_h] =
                full_loop_ConstP.MATLABSystem2_avanceRapide[full_loop_B.i_h];
            }
          }

          if (!full_loop_isequal_p43r(full_loop_DW.obj_c.avancePrecision,
               full_loop_ConstP.MATLABSystem2_avancePrecision)) {
            for (full_loop_B.i_h = 0; full_loop_B.i_h < 7; full_loop_B.i_h++) {
              full_loop_DW.obj_c.avancePrecision[full_loop_B.i_h] =
                full_loop_ConstP.MATLABSystem2_avancePrecision[full_loop_B.i_h];
            }
          }

          if (!full_loop_isequal_p43r(full_loop_DW.obj_c.accRapide,
               full_loop_ConstP.MATLABSystem2_accRapide)) {
            for (full_loop_B.i_h = 0; full_loop_B.i_h < 7; full_loop_B.i_h++) {
              full_loop_DW.obj_c.accRapide[full_loop_B.i_h] =
                full_loop_ConstP.MATLABSystem2_accRapide[full_loop_B.i_h];
            }
          }

          if (full_loop_DW.obj_c.accPrecision != 0.1) {
            full_loop_DW.obj_c.accPrecision = 0.1;
          }

          if (full_loop_DW.obj_c.Ts != 0.25) {
            full_loop_DW.obj_c.Ts = 0.25;
          }

          full_loop_SystemCore_step(&full_loop_DW.obj_c,
            full_loop_DW.obj_o.poseList, full_loop_DW.obj_o.i,
            full_loop_B.MATLABSystem2_o1, full_loop_B.MATLABSystem2_o2);

          // End of MATLABSystem: '<S127>/MATLAB System2'
        }

        full_loop_PrevZCX.Subsystem2_Trig_ZCE = full_loop_DW.Delay_DSTATE;

        // End of Outputs for SubSystem: '<S113>/Subsystem2'
        // End of Outputs for SubSystem: '<S113>/Subscribe1'

        // MATLABSystem: '<S113>/MATLAB System' incorporates:
        //   MATLAB Function: '<S113>/MATLAB Function'
        //   MATLABSystem: '<S124>/SourceBlock'
        //   SignalConversion generated from: '<S122>/ SFunction '

        if (full_loop_DW.obj.linearConvergence != 0.2) {
          full_loop_DW.obj.linearConvergence = 0.2;
        }

        if (full_loop_DW.obj.quaternionConvergence != 0.1) {
          full_loop_DW.obj.quaternionConvergence = 0.1;
        }

        if (full_loop_DW.obj.TargetThreshold != 3.0) {
          full_loop_DW.obj.TargetThreshold = 3.0;
        }

        obj = &full_loop_DW.obj;

        //  Main execute a chaque iteration.
        //  Implement algorithm. Calculate y as a function of input u and
        f_TrajectoryManager_BufferReset(&full_loop_DW.obj, full_loop_B.Sum_l,
          full_loop_B.TmpSignalConversionAtSFun_a);
        TrajectoryManager_processNewPos(&full_loop_DW.obj,
          full_loop_B.MATLABSystem2_o1, full_loop_B.MATLABSystem2_o2[1],
          full_loop_B.MATLABSystem2_o2[0]);
        TrajectoryManager_SendCurrentPo(obj, full_loop_B.Merge);

        //  Fonction qui verifie le target reached
        full_loop_B.MATLABSystem_o2 = false;

        //  vérifier le traget reached si la trajectoire est terminé
        if (obj->done) {
          //  calcule de l'erreur de langle en 3D avec le quaternion
          full_loop_B.b_q[0] = obj->poseBuffer[18003];
          full_loop_B.b_q[1] = obj->poseBuffer[24004];
          full_loop_B.b_q[2] = obj->poseBuffer[30005];
          full_loop_B.b_q[3] = obj->poseBuffer[36006];
          full_loop_B.b_q[1] = -full_loop_B.b_q[1];
          full_loop_B.b_q[2] = -full_loop_B.b_q[2];
          full_loop_B.b_q[3] = -full_loop_B.b_q[3];
          full_loop_B.qRel[0] = ((full_loop_B.b_q[0] * full_loop_B.Divide -
            full_loop_B.b_q[1] * full_loop_B.Divide1) - full_loop_B.b_q[2] *
            full_loop_B.Divide2) - full_loop_B.b_q[3] * full_loop_B.Divide3;
          full_loop_B.qRel[1] = (full_loop_B.b_q[0] * full_loop_B.Divide1 +
            full_loop_B.Divide * full_loop_B.b_q[1]) + (full_loop_B.b_q[2] *
            full_loop_B.Divide3 - full_loop_B.b_q[3] * full_loop_B.Divide2);
          full_loop_B.qRel[2] = (full_loop_B.b_q[0] * full_loop_B.Divide2 +
            full_loop_B.Divide * full_loop_B.b_q[2]) + (full_loop_B.b_q[3] *
            full_loop_B.Divide1 - full_loop_B.b_q[1] * full_loop_B.Divide3);
          full_loop_B.qRel[3] = (full_loop_B.b_q[0] * full_loop_B.Divide3 +
            full_loop_B.Divide * full_loop_B.b_q[3]) + (full_loop_B.b_q[1] *
            full_loop_B.Divide2 - full_loop_B.b_q[2] * full_loop_B.Divide1);

          //  vérifier si le sub est dans la zone de convergence (sphérique / conique) 
          full_loop_B.u2[0] = obj->poseBuffer[0] - full_loop_B.WorldPosition[0];
          full_loop_B.u2[1] = obj->poseBuffer[6001] - full_loop_B.WorldPosition
            [1];
          full_loop_B.u2[2] = obj->poseBuffer[12002] -
            full_loop_B.WorldPosition[2];
          if ((full_loop_norm(full_loop_B.u2) < obj->linearConvergence) && (2.0 *
               rt_atan2d_snf(full_loop_norm(&full_loop_B.qRel[1]),
                             full_loop_B.qRel[0]) < obj->quaternionConvergence))
          {
            full_loop_B.rtb_sincos_o1_idx_0 = obj->targetReachedCount + 1.0;
            obj->targetReachedCount = full_loop_B.rtb_sincos_o1_idx_0;
            full_loop_B.MATLABSystem_o2 = (obj->targetReachedCount * 0.25 >=
              obj->TargetThreshold);
          }
        } else {
          obj->targetReachedCount = 0.0;
        }

        // End of MATLABSystem: '<S113>/MATLAB System'
        // End of Outputs for SubSystem: '<S8>/SubsystemAuto'
        break;

       case 1:
        // Outputs for IfAction SubSystem: '<S8>/SubsystemManual' incorporates:
        //   ActionPort: '<S114>/Action Port'

        // SignalConversion generated from: '<S114>/Transpose'
        for (full_loop_B.i_h = 0; full_loop_B.i_h < 7; full_loop_B.i_h++) {
          full_loop_B.TmpSignalConversionAtTransp[full_loop_B.i_h] = 0.0;
        }

        for (full_loop_B.i_h = 0; full_loop_B.i_h < 6; full_loop_B.i_h++) {
          full_loop_B.TmpSignalConversionAtTransp[full_loop_B.i_h + 7] =
            full_loop_B.MultiportSwitch[full_loop_B.i_h];
        }

        // MATLAB Function: '<S114>/MATLAB Function1' incorporates:
        //   Math: '<S114>/Transpose'

        std::memcpy(&full_loop_B.Reshape[0],
                    &full_loop_B.TmpSignalConversionAtTransp[0], 13U * sizeof
                    (real_T));
        full_loop_B.Reshape[9] = -full_loop_B.TmpSignalConversionAtTransp[9];
        for (full_loop_B.i_h = 0; full_loop_B.i_h < 13; full_loop_B.i_h++) {
          full_loop_B.ibmat = full_loop_B.i_h << 2;
          full_loop_B.Merge[full_loop_B.ibmat] =
            full_loop_B.Reshape[full_loop_B.i_h];
          full_loop_B.Merge[full_loop_B.ibmat + 1] =
            full_loop_B.Reshape[full_loop_B.i_h];
          full_loop_B.Merge[full_loop_B.ibmat + 2] =
            full_loop_B.Reshape[full_loop_B.i_h];
          full_loop_B.Merge[full_loop_B.ibmat + 3] =
            full_loop_B.Reshape[full_loop_B.i_h];
        }

        // End of MATLAB Function: '<S114>/MATLAB Function1'
        // End of Outputs for SubSystem: '<S8>/SubsystemManual'
        break;
      }

      // End of SwitchCase: '<S8>/Switch Case'

      // SwitchCase: '<S6>/Switch Case'
      full_loop_B.rtAction = full_loop_DW.SwitchCase_ActiveSubsystem_c;
      if (rtmIsMajorTimeStep((&full_loop_M))) {
        switch (full_loop_B.Data) {
         case 10:
         case 19:
          full_loop_DW.SwitchCase_ActiveSubsystem_c = 0;
          break;

         case 20:
         case 21:
          full_loop_DW.SwitchCase_ActiveSubsystem_c = 1;
          break;

         default:
          full_loop_DW.SwitchCase_ActiveSubsystem_c = 2;
          break;
        }
      }

      switch (full_loop_DW.SwitchCase_ActiveSubsystem_c) {
       case 0:
        if (full_loop_DW.SwitchCase_ActiveSubsystem_c != full_loop_B.rtAction) {
          // InitializeConditions for IfAction SubSystem: '<S6>/Quaternion Non linear MPC' incorporates:
          //   ActionPort: '<S56>/Action Port'

          // InitializeConditions for SwitchCase: '<S6>/Switch Case' incorporates:
          //   Delay: '<S61>/mv_Delay'
          //   Delay: '<S61>/slack_delay'
          //   Delay: '<S61>/x_Delay'
          //   Memory: '<S56>/Memory1'

          full_loop_DW.icLoad = 1U;
          std::memset(&full_loop_DW.Memory1_PreviousInput[0], 0, sizeof(real_T) <<
                      3U);
          full_loop_DW.icLoad_a = 1U;
          full_loop_DW.icLoad_c = 1U;

          // End of InitializeConditions for SubSystem: '<S6>/Quaternion Non linear MPC' 
          //  Initialize / reset discrete-state properties
        }

        // Outputs for IfAction SubSystem: '<S6>/Quaternion Non linear MPC' incorporates:
        //   ActionPort: '<S56>/Action Port'

        // Delay: '<S61>/x_Delay' incorporates:
        //   Constant: '<S61>/ones'
        //   Product: '<S61>/Product1'

        if (full_loop_DW.icLoad != 0) {
          // Product: '<S61>/Product1' incorporates:
          //   Reshape: '<S61>/reshape_x'

          full_loop_B.dv22[3] = full_loop_B.Divide;
          full_loop_B.dv22[4] = full_loop_B.Divide1;
          full_loop_B.dv22[5] = full_loop_B.Divide2;
          full_loop_B.dv22[6] = full_loop_B.Divide3;
          full_loop_B.dv22[7] = full_loop_B.Sum_i;
          full_loop_B.dv22[8] = full_loop_B.Sum_mk;
          full_loop_B.dv22[9] = full_loop_B.Sum_o;
          full_loop_B.dv22[0] = full_loop_B.WorldPosition[0];
          full_loop_B.dv22[10] = full_loop_B.AngularRate_m[0];
          full_loop_B.dv22[1] = full_loop_B.WorldPosition[1];
          full_loop_B.dv22[11] = full_loop_B.AngularRate_m[1];
          full_loop_B.dv22[2] = full_loop_B.WorldPosition[2];
          full_loop_B.dv22[12] = full_loop_B.AngularRate_m[2];
          for (full_loop_B.i_h = 0; full_loop_B.i_h < 13; full_loop_B.i_h++) {
            for (full_loop_B.ibmat = 0; full_loop_B.ibmat < 5; full_loop_B.ibmat
                 ++) {
              full_loop_DW.x_Delay_DSTATE[full_loop_B.ibmat + 5 *
                full_loop_B.i_h] = full_loop_B.dv22[full_loop_B.i_h];
            }
          }
        }

        // MATLABSystem: '<S56>/MATLAB System'
        if (!full_loop_isequal(full_loop_DW.obj_g.Config10,
                               full_loop_ConstP.MATLABSystem_Config10)) {
          std::memcpy(&full_loop_DW.obj_g.Config10[0],
                      &full_loop_ConstP.MATLABSystem_Config10[0], 29U * sizeof
                      (real_T));
        }

        if (!full_loop_isequal(full_loop_DW.obj_g.Config19,
                               full_loop_ConstP.MATLABSystem_Config19)) {
          std::memcpy(&full_loop_DW.obj_g.Config19[0],
                      &full_loop_ConstP.MATLABSystem_Config19[0], 29U * sizeof
                      (real_T));
        }

        if (!full_loop_isequal_p(full_loop_DW.obj_g.Tmin,
             full_loop_ConstP.MATLABSystem_Tmin)) {
          for (full_loop_B.i_h = 0; full_loop_B.i_h < 8; full_loop_B.i_h++) {
            full_loop_DW.obj_g.Tmin[full_loop_B.i_h] = -24.0;
          }
        }

        if (!full_loop_isequal_p(full_loop_DW.obj_g.Tmax,
             full_loop_ConstP.MATLABSystem_Tmax)) {
          for (full_loop_B.i_h = 0; full_loop_B.i_h < 8; full_loop_B.i_h++) {
            full_loop_DW.obj_g.Tmax[full_loop_B.i_h] = 29.0;
          }
        }

        full_loop_B.SourceBlock_o1_b = false;
        full_loop_B.didZcEventOccur = true;
        full_loop_B.i_h = 0;
        exitg1 = false;
        while ((!exitg1) && (full_loop_B.i_h < 41)) {
          if (!(full_loop_DW.obj_g.MecConst[full_loop_B.i_h] ==
                full_loop_ConstP.MATLABSystem_MecConst[full_loop_B.i_h])) {
            full_loop_B.didZcEventOccur = false;
            exitg1 = true;
          } else {
            full_loop_B.i_h++;
          }
        }

        if (full_loop_B.didZcEventOccur) {
          full_loop_B.SourceBlock_o1_b = true;
        }

        if (!full_loop_B.SourceBlock_o1_b) {
          std::memcpy(&full_loop_DW.obj_g.MecConst[0],
                      &full_loop_ConstP.MATLABSystem_MecConst[0], 41U * sizeof
                      (real_T));
        }

        //         %% Fonction qui détermine les gain
        switch (full_loop_B.Data) {
         case 10:
          std::memcpy(&full_loop_B.TmpSignalConversionAtTransp[0],
                      &full_loop_DW.obj_g.Config10[0], 13U * sizeof(real_T));
          for (full_loop_B.i_h = 0; full_loop_B.i_h < 8; full_loop_B.i_h++) {
            full_loop_B.twpt[full_loop_B.i_h] = full_loop_DW.obj_g.Config10
              [(full_loop_B.i_h + 14) - 1];
            full_loop_B.Saturation[full_loop_B.i_h] =
              full_loop_DW.obj_g.Config10[(full_loop_B.i_h + 22) - 1];
          }
          break;

         case 19:
          std::memcpy(&full_loop_B.TmpSignalConversionAtTransp[0],
                      &full_loop_DW.obj_g.Config19[0], 13U * sizeof(real_T));
          for (full_loop_B.i_h = 0; full_loop_B.i_h < 8; full_loop_B.i_h++) {
            full_loop_B.twpt[full_loop_B.i_h] = full_loop_DW.obj_g.Config19
              [(full_loop_B.i_h + 14) - 1];
            full_loop_B.Saturation[full_loop_B.i_h] =
              full_loop_DW.obj_g.Config19[(full_loop_B.i_h + 22) - 1];
          }
          break;

         default:
          std::memcpy(&full_loop_B.TmpSignalConversionAtTransp[0],
                      &full_loop_DW.obj_g.Config10[0], 13U * sizeof(real_T));
          for (full_loop_B.i_h = 0; full_loop_B.i_h < 8; full_loop_B.i_h++) {
            full_loop_B.twpt[full_loop_B.i_h] = full_loop_DW.obj_g.Config10
              [(full_loop_B.i_h + 14) - 1];
            full_loop_B.Saturation[full_loop_B.i_h] =
              full_loop_DW.obj_g.Config10[(full_loop_B.i_h + 22) - 1];
          }
          break;
        }

        // Reshape: '<S60>/Reshape'
        full_loop_B.Reshape[3] = full_loop_B.Divide;
        full_loop_B.Reshape[4] = full_loop_B.Divide1;
        full_loop_B.Reshape[5] = full_loop_B.Divide2;
        full_loop_B.Reshape[6] = full_loop_B.Divide3;
        full_loop_B.Reshape[7] = full_loop_B.Sum_i;
        full_loop_B.Reshape[8] = full_loop_B.Sum_mk;
        full_loop_B.Reshape[9] = full_loop_B.Sum_o;
        full_loop_B.Reshape[0] = full_loop_B.WorldPosition[0];
        full_loop_B.Reshape[10] = full_loop_B.AngularRate_m[0];
        full_loop_B.Reshape[1] = full_loop_B.WorldPosition[1];
        full_loop_B.Reshape[11] = full_loop_B.AngularRate_m[1];
        full_loop_B.Reshape[2] = full_loop_B.WorldPosition[2];
        full_loop_B.Reshape[12] = full_loop_B.AngularRate_m[2];

        // Delay: '<S61>/mv_Delay' incorporates:
        //   Constant: '<S61>/ones'
        //   Memory: '<S56>/Memory1'
        //   Product: '<S61>/Product'

        if (full_loop_DW.icLoad_a != 0) {
          for (full_loop_B.i_h = 0; full_loop_B.i_h < 8; full_loop_B.i_h++) {
            for (full_loop_B.ibmat = 0; full_loop_B.ibmat < 5; full_loop_B.ibmat
                 ++) {
              full_loop_DW.mv_Delay_DSTATE[full_loop_B.ibmat + 5 *
                full_loop_B.i_h] =
                full_loop_DW.Memory1_PreviousInput[full_loop_B.i_h];
            }
          }
        }

        // Delay: '<S61>/slack_delay' incorporates:
        //   Constant: '<S59>/e.init_zero'

        if (full_loop_DW.icLoad_c != 0) {
          full_loop_DW.slack_delay_DSTATE = 0.0;
        }

        // Selector: '<S61>/Selector' incorporates:
        //   Constant: '<S61>/Constant'
        //   Delay: '<S61>/x_Delay'

        for (full_loop_B.i_h = 0; full_loop_B.i_h < 13; full_loop_B.i_h++) {
          full_loop_B.dv11[3 * full_loop_B.i_h] = full_loop_DW.x_Delay_DSTATE[5 *
            full_loop_B.i_h + 2];
          full_loop_B.dv11[3 * full_loop_B.i_h + 1] =
            full_loop_DW.x_Delay_DSTATE[5 * full_loop_B.i_h + 3];
          full_loop_B.dv11[3 * full_loop_B.i_h + 2] =
            full_loop_DW.x_Delay_DSTATE[5 * full_loop_B.i_h + 4];
        }

        // Selector: '<S61>/Selector1' incorporates:
        //   Constant: '<S61>/Constant1'
        //   Delay: '<S61>/mv_Delay'

        for (full_loop_B.i_h = 0; full_loop_B.i_h < 8; full_loop_B.i_h++) {
          full_loop_B.dv15[3 * full_loop_B.i_h] = full_loop_DW.mv_Delay_DSTATE[5
            * full_loop_B.i_h + 1];
          full_loop_B.dv15[3 * full_loop_B.i_h + 1] =
            full_loop_DW.mv_Delay_DSTATE[5 * full_loop_B.i_h + 2];
          full_loop_B.dv15[3 * full_loop_B.i_h + 2] =
            full_loop_DW.mv_Delay_DSTATE[5 * full_loop_B.i_h + 3];
        }

        // MATLAB Function: '<S60>/NLMPC' incorporates:
        //   Delay: '<S61>/slack_delay'
        //   MATLABSystem: '<S56>/MATLAB System'
        //   Memory: '<S56>/Memory1'
        //   Selector: '<S61>/Selector'
        //   Selector: '<S61>/Selector1'

        full_znlmpc_generateRuntimeData(full_loop_B.Reshape,
          full_loop_DW.Memory1_PreviousInput, full_loop_B.Merge,
          full_loop_B.TmpSignalConversionAtTransp, full_loop_B.twpt,
          full_loop_B.Saturation, full_loop_DW.obj_g.Tmin,
          full_loop_DW.obj_g.Tmax, full_loop_B.dv11, full_loop_B.dv15,
          full_loop_DW.slack_delay_DSTATE, &full_loop_B.runtimedata,
          &full_loop_B.userdata, full_loop_B.z0);
        full_loop_znlmpc_getZBounds(&full_loop_B.runtimedata, full_loop_B.zLB,
          full_loop_B.zUB);
        full_loop_znlmpc_getUBounds(&full_loop_B.runtimedata, full_loop_B.A_data,
          full_loop_B.A_size, full_loop_B.B_data, &full_loop_B.B_size);
        std::memcpy(&full_loop_B.expl_temp.MVScaledTarget[0],
                    &full_loop_B.runtimedata.MVScaledTarget[0], sizeof(real_T) <<
                    5U);
        std::memcpy(&full_loop_B.expl_temp.MVRateMax[0],
                    &full_loop_B.runtimedata.MVRateMax[0], sizeof(real_T) << 5U);
        std::memcpy(&full_loop_B.expl_temp.MVRateMin[0],
                    &full_loop_B.runtimedata.MVRateMin[0], sizeof(real_T) << 5U);
        std::memcpy(&full_loop_B.expl_temp.MVMax[0],
                    &full_loop_B.runtimedata.MVMax[0], sizeof(real_T) << 5U);
        std::memcpy(&full_loop_B.expl_temp.MVMin[0],
                    &full_loop_B.runtimedata.MVMin[0], sizeof(real_T) << 5U);
        std::memcpy(&full_loop_B.expl_temp.StateMax[0],
                    &full_loop_B.runtimedata.StateMax[0], 52U * sizeof(real_T));
        std::memcpy(&full_loop_B.expl_temp.StateMin[0],
                    &full_loop_B.runtimedata.StateMin[0], 52U * sizeof(real_T));
        std::memcpy(&full_loop_B.expl_temp.OutputMax[0],
                    &full_loop_B.runtimedata.OutputMax[0], 52U * sizeof(real_T));
        std::memcpy(&full_loop_B.expl_temp.OutputMin[0],
                    &full_loop_B.runtimedata.OutputMin[0], 52U * sizeof(real_T));
        full_loop_B.expl_temp.ECRWeight = full_loop_B.runtimedata.ECRWeight;
        std::memcpy(&full_loop_B.expl_temp.MVRateWeights[0],
                    &full_loop_B.runtimedata.MVRateWeights[0], sizeof(real_T) <<
                    5U);
        std::memcpy(&full_loop_B.expl_temp.MVWeights[0],
                    &full_loop_B.runtimedata.MVWeights[0], sizeof(real_T) << 5U);
        std::memcpy(&full_loop_B.expl_temp.OutputWeights[0],
                    &full_loop_B.runtimedata.OutputWeights[0], 52U * sizeof
                    (real_T));
        std::memcpy(&full_loop_B.expl_temp.ref[0], &full_loop_B.runtimedata.ref
                    [0], 52U * sizeof(real_T));
        std::memcpy(&full_loop_B.expl_temp.lastMV[0],
                    &full_loop_B.runtimedata.lastMV[0], sizeof(real_T) << 3U);
        std::memcpy(&full_loop_B.expl_temp.x[0], &full_loop_B.runtimedata.x[0],
                    13U * sizeof(real_T));
        std::memcpy(&full_loop_B.expl_temp_p.MVScaledTarget[0],
                    &full_loop_B.runtimedata.MVScaledTarget[0], sizeof(real_T) <<
                    5U);
        std::memcpy(&full_loop_B.expl_temp_p.MVRateMax[0],
                    &full_loop_B.runtimedata.MVRateMax[0], sizeof(real_T) << 5U);
        std::memcpy(&full_loop_B.expl_temp_p.MVRateMin[0],
                    &full_loop_B.runtimedata.MVRateMin[0], sizeof(real_T) << 5U);
        std::memcpy(&full_loop_B.expl_temp_p.MVMax[0],
                    &full_loop_B.runtimedata.MVMax[0], sizeof(real_T) << 5U);
        std::memcpy(&full_loop_B.expl_temp_p.MVMin[0],
                    &full_loop_B.runtimedata.MVMin[0], sizeof(real_T) << 5U);
        std::memcpy(&full_loop_B.expl_temp_p.StateMax[0],
                    &full_loop_B.runtimedata.StateMax[0], 52U * sizeof(real_T));
        std::memcpy(&full_loop_B.expl_temp_p.StateMin[0],
                    &full_loop_B.runtimedata.StateMin[0], 52U * sizeof(real_T));
        std::memcpy(&full_loop_B.expl_temp_p.OutputMax[0],
                    &full_loop_B.runtimedata.OutputMax[0], 52U * sizeof(real_T));
        std::memcpy(&full_loop_B.expl_temp_p.OutputMin[0],
                    &full_loop_B.runtimedata.OutputMin[0], 52U * sizeof(real_T));
        full_loop_B.expl_temp_p.ECRWeight = full_loop_B.runtimedata.ECRWeight;
        std::memcpy(&full_loop_B.expl_temp_p.MVRateWeights[0],
                    &full_loop_B.runtimedata.MVRateWeights[0], sizeof(real_T) <<
                    5U);
        std::memcpy(&full_loop_B.expl_temp_p.MVWeights[0],
                    &full_loop_B.runtimedata.MVWeights[0], sizeof(real_T) << 5U);
        std::memcpy(&full_loop_B.expl_temp_p.OutputWeights[0],
                    &full_loop_B.runtimedata.OutputWeights[0], 52U * sizeof
                    (real_T));
        std::memcpy(&full_loop_B.expl_temp_p.ref[0],
                    &full_loop_B.runtimedata.ref[0], 52U * sizeof(real_T));
        std::memcpy(&full_loop_B.expl_temp_p.lastMV[0],
                    &full_loop_B.runtimedata.lastMV[0], sizeof(real_T) << 3U);
        std::memcpy(&full_loop_B.expl_temp_p.x[0], &full_loop_B.runtimedata.x[0],
                    13U * sizeof(real_T));
        full_loop_fmincon(&full_loop_B.expl_temp, &full_loop_B.userdata,
                          full_loop_B.z0, full_loop_B.A_data, full_loop_B.A_size,
                          full_loop_B.B_data, &full_loop_B.B_size,
                          full_loop_B.zLB, &full_loop_B.expl_temp_p,
                          &full_loop_B.userdata, full_loop_B.zUB,
                          &full_loop_B.Sum_o, &full_loop_B.Sum_i,
                          &full_loop_B.Sum_mk, &full_loop_B.Divide3);
        if ((full_loop_B.Sum_i == 0.0) && (full_loop_B.Divide3 > 0.02)) {
          full_loop_B.Sum_i = -2.0;
        }

        full_loop_znlmpc_getXUe(full_loop_B.zUB, full_loop_B.Reshape,
          full_loop_B.X, full_loop_B.U, &full_loop_B.Divide3);
        if (full_loop_B.Sum_i > 0.0) {
          for (full_loop_B.i_h = 0; full_loop_B.i_h < 8; full_loop_B.i_h++) {
            full_loop_DW.Memory1_PreviousInput[full_loop_B.i_h] = full_loop_B.U
              [5 * full_loop_B.i_h];
          }
        }

        full_loop_znlmpc_computeInfo(full_loop_B.X, full_loop_B.U,
          full_loop_B.Divide3, full_loop_B.Sum_o, full_loop_B.Sum_i,
          full_loop_B.Sum_mk, full_loop_B.unusedU0, full_loop_B.unusedU1,
          &full_loop_B.Divide2, &full_loop_B.info);

        // SignalConversion generated from: '<S56>/mv'
        std::memcpy(&full_loop_B.Saturation[0],
                    &full_loop_DW.Memory1_PreviousInput[0], sizeof(real_T) << 3U);

        // Update for Delay: '<S61>/x_Delay' incorporates:
        //   MATLAB Function: '<S60>/NLMPC'

        full_loop_DW.icLoad = 0U;
        std::memcpy(&full_loop_DW.x_Delay_DSTATE[0], &full_loop_B.info.Xopt[0],
                    65U * sizeof(real_T));

        // Update for Delay: '<S61>/mv_Delay' incorporates:
        //   MATLAB Function: '<S60>/NLMPC'

        full_loop_DW.icLoad_a = 0U;
        std::memcpy(&full_loop_DW.mv_Delay_DSTATE[0], &full_loop_B.info.MVopt[0],
                    40U * sizeof(real_T));

        // Update for Delay: '<S61>/slack_delay' incorporates:
        //   MATLAB Function: '<S60>/NLMPC'

        full_loop_DW.icLoad_c = 0U;
        full_loop_DW.slack_delay_DSTATE = full_loop_B.info.Slack;

        // End of Outputs for SubSystem: '<S6>/Quaternion Non linear MPC'
        break;

       case 1:
        // Outputs for IfAction SubSystem: '<S6>/JoyStick OpenLoop' incorporates:
        //   ActionPort: '<S55>/Action Port'

        // SampleTimeMath: '<S57>/TSamp' incorporates:
        //   Selector: '<S55>/Selector'
        //
        //  About '<S57>/TSamp':
        //   y = u * K where K = 1 / ( w * Ts )

        for (full_loop_B.i_h = 0; full_loop_B.i_h < 6; full_loop_B.i_h++) {
          full_loop_B.Gain_o[full_loop_B.i_h] = full_loop_B.Merge
            [(full_loop_B.i_h + 7) << 2] * 4.0;
        }

        // End of SampleTimeMath: '<S57>/TSamp'

        // MATLABSystem: '<S55>/MATLAB System' incorporates:
        //   Selector: '<S55>/Selector'
        //   SignalConversion generated from: '<S55>/MATLAB System'

        if (full_loop_DW.obj_m.k != 20.0) {
          full_loop_DW.obj_m.k = 20.0;
        }

        full_loop_B.SourceBlock_o1_b = false;
        full_loop_B.didZcEventOccur = true;
        full_loop_B.i_h = 0;
        exitg1 = false;
        while ((!exitg1) && (full_loop_B.i_h < 48)) {
          if (!(full_loop_DW.obj_m.binv[full_loop_B.i_h] ==
                full_loop_ConstP.MATLABSystem_binv[full_loop_B.i_h])) {
            full_loop_B.didZcEventOccur = false;
            exitg1 = true;
          } else {
            full_loop_B.i_h++;
          }
        }

        if (full_loop_B.didZcEventOccur) {
          full_loop_B.SourceBlock_o1_b = true;
        }

        if (!full_loop_B.SourceBlock_o1_b) {
          std::memcpy(&full_loop_DW.obj_m.binv[0],
                      &full_loop_ConstP.MATLABSystem_binv[0], 48U * sizeof
                      (real_T));
        }

        if (full_loop_DW.obj_m.mass != 33.95) {
          full_loop_DW.obj_m.mass = 33.95;
        }

        if (full_loop_DW.obj_m.volume != 0.037) {
          full_loop_DW.obj_m.volume = 0.037;
        }

        if (full_loop_DW.obj_m.height != 0.3) {
          full_loop_DW.obj_m.height = 0.3;
        }

        full_loop_B.SourceBlock_o1_b = false;
        full_loop_B.didZcEventOccur = true;
        full_loop_B.i_h = 0;
        exitg1 = false;
        while ((!exitg1) && (full_loop_B.i_h < 9)) {
          if (!(full_loop_DW.obj_m.I[full_loop_B.i_h] ==
                full_loop_ConstP.MATLABSystem_I[full_loop_B.i_h])) {
            full_loop_B.didZcEventOccur = false;
            exitg1 = true;
          } else {
            full_loop_B.i_h++;
          }
        }

        if (full_loop_B.didZcEventOccur) {
          full_loop_B.SourceBlock_o1_b = true;
        }

        if (!full_loop_B.SourceBlock_o1_b) {
          std::memcpy(&full_loop_DW.obj_m.I[0],
                      &full_loop_ConstP.MATLABSystem_I[0], 9U * sizeof(real_T));
        }

        if (!full_loop_isequal_p4(full_loop_DW.obj_m.RG,
             full_loop_ConstP.MATLABSystem_RG)) {
          full_loop_DW.obj_m.RG[0] = 0.001;
          full_loop_DW.obj_m.RG[1] = 0.002;
          full_loop_DW.obj_m.RG[2] = 0.018;
        }

        if (!full_loop_isequal_p4(full_loop_DW.obj_m.RB,
             full_loop_ConstP.MATLABSystem_RB)) {
          full_loop_DW.obj_m.RB[0] = 0.0;
          full_loop_DW.obj_m.RB[1] = 0.0;
          full_loop_DW.obj_m.RB[2] = -0.1;
        }

        if (!full_loop_isequal_p43(full_loop_DW.obj_m.AddedMass,
             full_loop_ConstP.MATLABSystem_AddedMass)) {
          for (full_loop_B.i_h = 0; full_loop_B.i_h < 6; full_loop_B.i_h++) {
            full_loop_DW.obj_m.AddedMass[full_loop_B.i_h] =
              full_loop_ConstP.MATLABSystem_AddedMass[full_loop_B.i_h];
          }
        }

        if (!full_loop_isequal_p43(full_loop_DW.obj_m.CDL,
             full_loop_ConstP.MATLABSystem_CDL)) {
          for (full_loop_B.i_h = 0; full_loop_B.i_h < 6; full_loop_B.i_h++) {
            full_loop_DW.obj_m.CDL[full_loop_B.i_h] =
              full_loop_ConstP.MATLABSystem_CDL[full_loop_B.i_h];
          }
        }

        if (!full_loop_isequal_p43(full_loop_DW.obj_m.CDQ,
             full_loop_ConstP.MATLABSystem_CDQ)) {
          for (full_loop_B.i_h = 0; full_loop_B.i_h < 6; full_loop_B.i_h++) {
            full_loop_DW.obj_m.CDQ[full_loop_B.i_h] =
              full_loop_ConstP.MATLABSystem_CDQ[full_loop_B.i_h];
          }
        }

        if (!full_loop_isequal_p4(full_loop_DW.obj_m.AF,
             full_loop_ConstP.MATLABSystem_AF)) {
          full_loop_DW.obj_m.AF[0] = 0.12;
          full_loop_DW.obj_m.AF[1] = 0.22;
          full_loop_DW.obj_m.AF[2] = 0.292;
        }

        if (full_loop_DW.obj_m.g != 9.81) {
          full_loop_DW.obj_m.g = 9.81;
        }

        if (full_loop_DW.obj_m.rho != 998.0) {
          full_loop_DW.obj_m.rho = 998.0;
        }

        //  Implement algorithm. Calculate y as a function of input u and
        //  discrete states.
        switch (full_loop_B.Data) {
         case 20:
          //  Open loop avec modèle physique
          //  Construire le vecteur constantes
          //  construire le vecteur state avec la imu et spaceNAV
          //  Déterminer les matrices du modèle physique
          full_loop_B.dv22[0] = 0.0;
          full_loop_B.dv22[1] = 0.0;
          full_loop_B.dv22[2] = 0.0;
          full_loop_B.dv22[3] = full_loop_B.Divide;
          full_loop_B.dv22[4] = full_loop_B.Divide1;
          full_loop_B.dv22[5] = full_loop_B.Divide2;
          full_loop_B.dv22[6] = full_loop_B.Divide3;
          full_loop_B.dv10[0] = full_loop_DW.obj_m.mass;
          full_loop_B.dv10[1] = full_loop_DW.obj_m.volume;
          full_loop_B.dv10[2] = full_loop_DW.obj_m.height;
          full_loop_B.dv10[3] = full_loop_DW.obj_m.AF[0];
          full_loop_B.dv10[6] = full_loop_DW.obj_m.I[0];
          full_loop_B.dv10[9] = full_loop_DW.obj_m.I[1];
          full_loop_B.dv10[12] = full_loop_DW.obj_m.I[2];
          full_loop_B.dv10[15] = full_loop_DW.obj_m.RG[0];
          full_loop_B.dv10[18] = full_loop_DW.obj_m.RB[0];
          full_loop_B.dv10[4] = full_loop_DW.obj_m.AF[1];
          full_loop_B.dv10[7] = full_loop_DW.obj_m.I[3];
          full_loop_B.dv10[10] = full_loop_DW.obj_m.I[4];
          full_loop_B.dv10[13] = full_loop_DW.obj_m.I[5];
          full_loop_B.dv10[16] = full_loop_DW.obj_m.RG[1];
          full_loop_B.dv10[19] = full_loop_DW.obj_m.RB[1];
          full_loop_B.dv10[5] = full_loop_DW.obj_m.AF[2];
          full_loop_B.dv10[8] = full_loop_DW.obj_m.I[6];
          full_loop_B.dv10[11] = full_loop_DW.obj_m.I[7];
          full_loop_B.dv10[14] = full_loop_DW.obj_m.I[8];
          full_loop_B.dv10[17] = full_loop_DW.obj_m.RG[2];
          full_loop_B.dv10[20] = full_loop_DW.obj_m.RB[2];
          for (full_loop_B.i_h = 0; full_loop_B.i_h < 6; full_loop_B.i_h++) {
            full_loop_B.dv22[full_loop_B.i_h + 7] = full_loop_B.Merge
              [(full_loop_B.i_h + 7) << 2];
            full_loop_B.dv10[full_loop_B.i_h + 21] =
              full_loop_DW.obj_m.CDL[full_loop_B.i_h];
            full_loop_B.dv10[full_loop_B.i_h + 27] =
              full_loop_DW.obj_m.CDQ[full_loop_B.i_h];
            full_loop_B.dv10[full_loop_B.i_h + 33] =
              full_loop_DW.obj_m.AddedMass[full_loop_B.i_h];
          }

          full_loop_B.dv10[39] = full_loop_DW.obj_m.rho;
          full_loop_B.dv10[40] = full_loop_DW.obj_m.g;
          full_loop_AUVModelMatrices(full_loop_B.dv22, full_loop_B.dv10,
            full_loop_B.M, full_loop_B.C, full_loop_B.D, full_loop_B.Gq);

          // Sum: '<S57>/Diff' incorporates:
          //   Selector: '<S55>/Selector'
          //   SignalConversion generated from: '<S55>/MATLAB System'
          //   UnitDelay: '<S57>/UD'
          //
          //  Block description for '<S57>/Diff':
          //
          //   Add in CPU
          //
          //  Block description for '<S57>/UD':
          //
          //   Store in Global RAM

          //  CAlculer la comande
          for (full_loop_B.i_h = 0; full_loop_B.i_h < 6; full_loop_B.i_h++) {
            full_loop_B.rtb_Gain_o_o[full_loop_B.i_h] =
              full_loop_B.Gain_o[full_loop_B.i_h] -
              full_loop_DW.UD_DSTATE[full_loop_B.i_h];
          }

          // End of Sum: '<S57>/Diff'
          for (full_loop_B.i_h = 0; full_loop_B.i_h < 36; full_loop_B.i_h++) {
            full_loop_B.C_k[full_loop_B.i_h] = full_loop_B.C[full_loop_B.i_h] +
              full_loop_B.D[full_loop_B.i_h];
          }

          for (full_loop_B.i_h = 0; full_loop_B.i_h < 6; full_loop_B.i_h++) {
            full_loop_B.M_g[full_loop_B.i_h] = 0.0;
            full_loop_B.C_o[full_loop_B.i_h] = 0.0;
            for (full_loop_B.ibmat = 0; full_loop_B.ibmat < 6; full_loop_B.ibmat
                 ++) {
              full_loop_B.M_tmp = 6 * full_loop_B.ibmat + full_loop_B.i_h;
              full_loop_B.M_g[full_loop_B.i_h] +=
                full_loop_B.M[full_loop_B.M_tmp] *
                full_loop_B.rtb_Gain_o_o[full_loop_B.ibmat];
              full_loop_B.C_o[full_loop_B.i_h] +=
                full_loop_B.C_k[full_loop_B.M_tmp] * full_loop_B.Merge
                [(full_loop_B.ibmat + 7) << 2];
            }

            full_loop_B.M_gf[full_loop_B.i_h] = (full_loop_B.M_g[full_loop_B.i_h]
              + full_loop_B.C_o[full_loop_B.i_h]) +
              full_loop_B.Gq[full_loop_B.i_h];
          }

          // SignalConversion generated from: '<S55>/Out1' incorporates:
          //   Selector: '<S55>/Selector'

          for (full_loop_B.i_h = 0; full_loop_B.i_h < 8; full_loop_B.i_h++) {
            full_loop_B.Saturation[full_loop_B.i_h] = 0.0;
            for (full_loop_B.ibmat = 0; full_loop_B.ibmat < 6; full_loop_B.ibmat
                 ++) {
              full_loop_B.Saturation[full_loop_B.i_h] +=
                full_loop_DW.obj_m.binv[(full_loop_B.ibmat << 3) +
                full_loop_B.i_h] * full_loop_B.M_gf[full_loop_B.ibmat];
            }
          }
          break;

         case 21:
          // SignalConversion generated from: '<S55>/Out1' incorporates:
          //   Selector: '<S55>/Selector'

          //  Open loop matrice b invese directe
          for (full_loop_B.i_h = 0; full_loop_B.i_h < 8; full_loop_B.i_h++) {
            full_loop_B.twpt[full_loop_B.i_h] = 0.0;
            for (full_loop_B.ibmat = 0; full_loop_B.ibmat < 6; full_loop_B.ibmat
                 ++) {
              full_loop_B.twpt[full_loop_B.i_h] += full_loop_DW.obj_m.binv
                [(full_loop_B.ibmat << 3) + full_loop_B.i_h] *
                full_loop_B.Merge[(full_loop_B.ibmat + 7) << 2];
            }

            full_loop_B.Saturation[full_loop_B.i_h] =
              full_loop_B.twpt[full_loop_B.i_h] * full_loop_DW.obj_m.k;
          }
          break;

         default:
          // SignalConversion generated from: '<S55>/Out1'
          std::memset(&full_loop_B.Saturation[0], 0, sizeof(real_T) << 3U);
          break;
        }

        // End of MATLABSystem: '<S55>/MATLAB System'

        // Update for UnitDelay: '<S57>/UD'
        //
        //  Block description for '<S57>/UD':
        //
        //   Store in Global RAM

        for (full_loop_B.i_h = 0; full_loop_B.i_h < 6; full_loop_B.i_h++) {
          full_loop_DW.UD_DSTATE[full_loop_B.i_h] =
            full_loop_B.Gain_o[full_loop_B.i_h];
        }

        // End of Update for UnitDelay: '<S57>/UD'
        // End of Outputs for SubSystem: '<S6>/JoyStick OpenLoop'
        break;

       case 2:
        // Outputs for IfAction SubSystem: '<S6>/IDLE' incorporates:
        //   ActionPort: '<S54>/Action Port'

        // SignalConversion generated from: '<S54>/Out1'
        std::memset(&full_loop_B.Saturation[0], 0, sizeof(real_T) << 3U);

        // End of Outputs for SubSystem: '<S6>/IDLE'
        break;
      }

      // End of SwitchCase: '<S6>/Switch Case'
    }

    if (rtmIsMajorTimeStep((&full_loop_M)) &&
        (&full_loop_M)->Timing.TaskCounters.TID[1] == 0) {
      // S-Function (sdspwmmfi2): '<S1>/From Multimedia File'
      sErr = GetErrorBuffer(&full_loop_DW.FromMultimediaFile_HostLib[0U]);
      audio = (void *)&full_loop_B.FromMultimediaFile[0U];
      LibOutputs_FromMMFile(&full_loop_DW.FromMultimediaFile_HostLib[0U],
                            GetNullPointer(), audio, GetNullPointer(),
                            GetNullPointer(), GetNullPointer());
      if (*sErr != 0) {
        rtmSetErrorStatus((&full_loop_M), sErr);
        rtmSetStopRequested((&full_loop_M), 1);
      }

      // End of S-Function (sdspwmmfi2): '<S1>/From Multimedia File'

      // S-Function (saudioToAudioDevice): '<S1>/Audio Device Writer'
      sErr = GetErrorBuffer(&full_loop_DW.AudioDeviceWriter_AudioDeviceLi[0U]);
      LibUpdate_Audio(&full_loop_DW.AudioDeviceWriter_AudioDeviceLi[0U],
                      &full_loop_B.FromMultimediaFile[0U], 0, 1024, 0U);
      if (*sErr != 0) {
        rtmSetErrorStatus((&full_loop_M), sErr);
        rtmSetStopRequested((&full_loop_M), 1);
      }

      // End of S-Function (saudioToAudioDevice): '<S1>/Audio Device Writer'
    }

    if (rtmIsMajorTimeStep((&full_loop_M)) &&
        (&full_loop_M)->Timing.TaskCounters.TID[4] == 0) {
      // Saturate: '<S6>/Saturation'
      for (full_loop_B.i_h = 0; full_loop_B.i_h < 8; full_loop_B.i_h++) {
        full_loop_B.Sum_o = full_loop_B.Saturation[full_loop_B.i_h];
        if (full_loop_B.Saturation[full_loop_B.i_h] > 29.0) {
          full_loop_B.Sum_o = 29.0;
        } else {
          if (full_loop_B.Saturation[full_loop_B.i_h] < -24.0) {
            full_loop_B.Sum_o = -24.0;
          }
        }

        full_loop_B.Saturation[full_loop_B.i_h] = full_loop_B.Sum_o;
      }

      // End of Saturate: '<S6>/Saturation'

      // Lookup_n-D: '<S6>/N to PWM'
      for (full_loop_B.i_h = 0; full_loop_B.i_h < 8; full_loop_B.i_h++) {
        full_loop_B.bpIdx = plook_u32d_binckpan
          (full_loop_B.Saturation[full_loop_B.i_h], full_loop_ConstP.pooled21,
           200U, &full_loop_DW.m_bpIndex[full_loop_B.i_h]);
        full_loop_B.NtoPWM[full_loop_B.i_h] =
          full_loop_ConstP.pooled27[full_loop_B.bpIdx];
      }

      // End of Lookup_n-D: '<S6>/N to PWM'

      // MATLAB Function: '<S1>/MATLAB Function'
      for (full_loop_B.i_h = 0; full_loop_B.i_h < 8; full_loop_B.i_h++) {
        full_loop_B.y_k[full_loop_B.i_h] = full_loop_B.NtoPWM[full_loop_B.i_h];
        if (full_loop_B.NtoPWM[full_loop_B.i_h] < 1100) {
          full_loop_B.y_k[full_loop_B.i_h] = 1500U;
        } else {
          if (full_loop_B.NtoPWM[full_loop_B.i_h] > 1900) {
            full_loop_B.y_k[full_loop_B.i_h] = 1500U;
          }
        }
      }

      // End of MATLAB Function: '<S1>/MATLAB Function'

      // Lookup_n-D: '<S12>/ PWM to N'
      for (full_loop_B.i_h = 0; full_loop_B.i_h < 8; full_loop_B.i_h++) {
        full_loop_B.bpIdx = plook_u32u16_binckpan
          (full_loop_B.y_k[full_loop_B.i_h], full_loop_ConstP.pooled27, 200U,
           &full_loop_DW.m_bpIndex_f[full_loop_B.i_h]);
        full_loop_B.PWMtoN[full_loop_B.i_h] =
          full_loop_ConstP.pooled21[full_loop_B.bpIdx];
      }

      // End of Lookup_n-D: '<S12>/ PWM to N'
    }

    // Integrator: '<S1>/Integrator' incorporates:
    //   SignalConversion generated from: '<S1>/Integrator'

    if (rtmIsMajorTimeStep((&full_loop_M))) {
      full_loop_B.didZcEventOccur = (full_loop_B.SourceBlock_o1 &&
        (full_loop_PrevZCX.Integrator_Reset_ZCE != 1));
      full_loop_PrevZCX.Integrator_Reset_ZCE = full_loop_B.SourceBlock_o1;

      // evaluate zero-crossings
      if (full_loop_B.didZcEventOccur || (full_loop_DW.Integrator_IWORK != 0)) {
        full_loop_X.Integrator_CSTATE[0] = full_loop_B.In1_k.Position.X;
        full_loop_X.Integrator_CSTATE[1] = full_loop_B.In1_k.Position.Y;
        full_loop_X.Integrator_CSTATE[2] = full_loop_B.In1_k.Position.Z;
      }
    }

    if (rtmIsMajorTimeStep((&full_loop_M)) &&
        (&full_loop_M)->Timing.TaskCounters.TID[4] == 0) {
      // Outputs for Atomic SubSystem: '<S9>/Subscribe1'
      // MATLABSystem: '<S135>/SourceBlock'
      full_loop_B.didZcEventOccur = Sub_full_loop_819.getLatestMessage
        (&full_loop_B.b_varargout_2_b);

      // Switch: '<S137>/Reset' incorporates:
      //   Constant: '<S137>/Initial Condition'
      //   MATLABSystem: '<S135>/SourceBlock'
      //   Memory: '<S137>/Memory'
      //   MinMax: '<S132>/MinMax'

      if (full_loop_B.didZcEventOccur) {
        full_loop_B.Reset = false;
      } else {
        full_loop_B.Reset = (full_loop_B.SourceBlock_o1 ||
                             full_loop_DW.Memory_PreviousInput);
      }

      // End of Switch: '<S137>/Reset'
      // End of Outputs for SubSystem: '<S9>/Subscribe1'

      // Outputs for Enabled SubSystem: '<Root>/ROS Output' incorporates:
      //   EnablePort: '<S3>/Enable'

      if (rtmIsMajorTimeStep((&full_loop_M))) {
        full_loop_DW.ROSOutput_MODE = full_loop_B.Reset;
      }

      // End of Outputs for SubSystem: '<Root>/ROS Output'
    }

    // Outputs for Enabled SubSystem: '<Root>/ROS Output' incorporates:
    //   EnablePort: '<S3>/Enable'

    if (full_loop_DW.ROSOutput_MODE && (rtmIsMajorTimeStep((&full_loop_M)) &&
         (&full_loop_M)->Timing.TaskCounters.TID[1] == 0)) {
      // MATLAB Function: '<S39>/MATLAB Function' incorporates:
      //   Constant: '<S39>/  '
      //   Constant: '<S39>/Constant'
      //   Constant: '<S46>/Constant'
      //   Gain: '<S39>/Gain'
      //   Integrator: '<S1>/Integrator'
      //   Sum: '<S39>/Sum'

      full_loop_B.msg_l = full_loop_rtZSL_Bus_full_loop_gazebo_msgs_ModelState;
      full_loop_B.msg_l.ModelName[0] = 97U;
      full_loop_B.msg_l.ModelName[1] = 117U;
      full_loop_B.msg_l.ModelName[2] = 118U;
      full_loop_B.msg_l.ModelName[3] = 56U;
      full_loop_B.msg_l.ModelName_SL_Info.CurrentLength = 4U;
      for (full_loop_B.i_h = 0; full_loop_B.i_h < 5; full_loop_B.i_h++) {
        full_loop_B.msg_l.ReferenceFrame[full_loop_B.i_h] =
          full_loop_ConstP._Value_n[full_loop_B.i_h];
      }

      full_loop_B.msg_l.ReferenceFrame_SL_Info.CurrentLength = 5U;
      full_loop_B.msg_l.Pose.Position.X = full_loop_X.Integrator_CSTATE[0];
      full_loop_B.msg_l.Pose.Position.Y = full_loop_X.Integrator_CSTATE[1];
      full_loop_B.msg_l.Pose.Position.Z = -full_loop_X.Integrator_CSTATE[2] +
        0.1435;
      full_loop_B.msg_l.Pose.Orientation.X = full_loop_B.y_l_idx_1;
      full_loop_B.msg_l.Pose.Orientation.Y = full_loop_B.y_l_idx_2;
      full_loop_B.msg_l.Pose.Orientation.Z = full_loop_B.y_l_idx_3;
      full_loop_B.msg_l.Pose.Orientation.W = full_loop_B.y_l_idx_0;

      // End of MATLAB Function: '<S39>/MATLAB Function'

      // Outputs for Atomic SubSystem: '<S39>/Publish'
      // MATLABSystem: '<S48>/SinkBlock'
      Pub_full_loop_965.publish(&full_loop_B.msg_l);

      // End of Outputs for SubSystem: '<S39>/Publish'

      // MATLAB Function: '<S37>/MATLAB Function' incorporates:
      //   Constant: '<S40>/Constant'
      //   SignalConversion generated from: '<S41>/ SFunction '

      full_loop_B.msg_g =
        full_loop_rtZSL_Bus_full_loop_sonia_common_BodyVelocityDVL;
      full_loop_B.msg_g.XVelBtm = full_loop_B.Sum_b;
      full_loop_B.msg_g.YVelBtm = full_loop_B.Sum_m;
      full_loop_B.msg_g.ZVelBtm = full_loop_B.Sum_c;

      // Outputs for Atomic SubSystem: '<S37>/Publish'
      // MATLABSystem: '<S42>/SinkBlock'
      Pub_full_loop_945.publish(&full_loop_B.msg_g);

      // End of Outputs for SubSystem: '<S37>/Publish'

      // MATLAB Function: '<S38>/MATLAB Function' incorporates:
      //   Constant: '<S43>/Constant'

      full_loop_B.msg_o = full_loop_rtZSL_Bus_full_loop_sensor_msgs_Imu;
      full_loop_B.msg_o.AngularVelocity.X = full_loop_B.AngularRate_m[0];
      full_loop_B.msg_o.AngularVelocity.Y = full_loop_B.AngularRate_m[1];
      full_loop_B.msg_o.AngularVelocity.Z = full_loop_B.AngularRate_m[2];
      full_loop_B.msg_o.Orientation.X = full_loop_B.Quaternion_idx_1;
      full_loop_B.msg_o.Orientation.Y = full_loop_B.Quaternion_idx_2;
      full_loop_B.msg_o.Orientation.Z = full_loop_B.Quaternion_idx_3;
      full_loop_B.msg_o.Orientation.W = full_loop_B.Quaternion_idx_0;

      // Outputs for Atomic SubSystem: '<S38>/Publish'
      // MATLABSystem: '<S45>/SinkBlock'
      Pub_full_loop_951.publish(&full_loop_B.msg_o);

      // End of Outputs for SubSystem: '<S38>/Publish'
    }

    // End of Outputs for SubSystem: '<Root>/ROS Output'
    if (rtmIsMajorTimeStep((&full_loop_M)) &&
        (&full_loop_M)->Timing.TaskCounters.TID[5] == 0) {
      // UniformRandomNumber: '<S13>/X Drift'
      full_loop_B.XDrift = full_loop_DW.XDrift_NextOutput;

      // UniformRandomNumber: '<S13>/Y Drift'
      full_loop_B.YDrift = full_loop_DW.YDrift_NextOutput;
    }

    if (rtmIsMajorTimeStep((&full_loop_M)) &&
        (&full_loop_M)->Timing.TaskCounters.TID[1] == 0) {
      // SignalConversion generated from: '<S10>/ SFunction ' incorporates:
      //   Integrator: '<S1>/Integrator'
      //   MATLAB Function: '<S1>/AUV State Equation'

      full_loop_B.dv22[0] = full_loop_X.Integrator_CSTATE[0];
      full_loop_B.dv22[1] = full_loop_X.Integrator_CSTATE[1];
      full_loop_B.dv22[2] = full_loop_X.Integrator_CSTATE[2];
      full_loop_B.dv22[3] = full_loop_B.y_l_idx_0;
      full_loop_B.dv22[4] = full_loop_B.y_l_idx_1;
      full_loop_B.dv22[5] = full_loop_B.y_l_idx_2;
      full_loop_B.dv22[6] = full_loop_B.y_l_idx_3;
      full_loop_B.dv22[7] = full_loop_B.BodyVelocity_idx_0;
      full_loop_B.dv22[10] = full_loop_B.AngularRate[0];

      // Sin: '<S13>/X Wave' incorporates:
      //   Sin: '<S13>/Roll Wave'
      //   Sin: '<S13>/Y Wave'
      //   Sin: '<S13>/Z Wave'

      full_loop_B.rtb_TmpSignalConversionAtSFun_b = (&full_loop_M)->Timing.t[0];
      full_loop_B.BodyVelocity_idx_0 = 1.5707963267948966 *
        full_loop_B.rtb_TmpSignalConversionAtSFun_b;

      // SignalConversion generated from: '<S10>/ SFunction ' incorporates:
      //   MATLAB Function: '<S1>/AUV State Equation'
      //   Sin: '<S13>/X Wave'
      //   Sum: '<S13>/Sum2'

      full_loop_B.Gain_o[0] = std::sin(full_loop_B.BodyVelocity_idx_0) +
        full_loop_B.XDrift;

      // SignalConversion generated from: '<S10>/ SFunction ' incorporates:
      //   MATLAB Function: '<S1>/AUV State Equation'

      full_loop_B.dv22[8] = full_loop_B.BodyVelocity_idx_1;
      full_loop_B.dv22[11] = full_loop_B.AngularRate[1];

      // SignalConversion generated from: '<S10>/ SFunction ' incorporates:
      //   MATLAB Function: '<S1>/AUV State Equation'
      //   Sin: '<S13>/Y Wave'
      //   Sum: '<S13>/Sum2'

      full_loop_B.Gain_o[1] = std::sin(full_loop_B.BodyVelocity_idx_0 +
        1.5707963267948966) * 2.0 + full_loop_B.YDrift;

      // SignalConversion generated from: '<S10>/ SFunction ' incorporates:
      //   MATLAB Function: '<S1>/AUV State Equation'

      full_loop_B.dv22[9] = full_loop_B.BodyVelocity_idx_2;
      full_loop_B.dv22[12] = full_loop_B.AngularRate[2];

      // SignalConversion generated from: '<S10>/ SFunction ' incorporates:
      //   MATLAB Function: '<S1>/AUV State Equation'
      //   Sin: '<S13>/Z Wave'
      //   Sum: '<S13>/Sum2'

      full_loop_B.Gain_o[2] = std::sin(full_loop_B.BodyVelocity_idx_0 +
        3.1415926535897931) * 3.0;

      // Sin: '<S13>/Roll Wave' incorporates:
      //   Sin: '<S13>/Pitch Wave'
      //   Sin: '<S13>/Yaw Wave'

      full_loop_B.rtb_TmpSignalConversionAtSFun_b *= 1.0471975511965976;

      // SignalConversion generated from: '<S10>/ SFunction ' incorporates:
      //   MATLAB Function: '<S1>/AUV State Equation'
      //   Sin: '<S13>/Pitch Wave'
      //   Sin: '<S13>/Roll Wave'
      //   Sin: '<S13>/Yaw Wave'

      full_loop_B.Gain_o[3] = std::sin
        (full_loop_B.rtb_TmpSignalConversionAtSFun_b) * 0.5;
      full_loop_B.Gain_o[4] = std::sin
        (full_loop_B.rtb_TmpSignalConversionAtSFun_b + 1.5707963267948966) * 0.5;
      full_loop_B.Gain_o[5] = std::sin
        (full_loop_B.rtb_TmpSignalConversionAtSFun_b + 3.1415926535897931) * 0.5;

      // SignalConversion generated from: '<S10>/ SFunction ' incorporates:
      //   MATLAB Function: '<S1>/AUV State Equation'
      //   TransferFcn: '<S16>/Transfer Fcn'
      //   TransferFcn: '<S17>/Transfer Fcn'
      //   TransferFcn: '<S18>/Transfer Fcn'
      //   TransferFcn: '<S19>/Transfer Fcn'
      //   TransferFcn: '<S20>/Transfer Fcn'
      //   TransferFcn: '<S21>/Transfer Fcn'
      //   TransferFcn: '<S22>/Transfer Fcn'
      //   TransferFcn: '<S23>/Transfer Fcn'

      full_loop_B.Saturation[0] = 6.666666666666667 *
        full_loop_X.TransferFcn_CSTATE;
      full_loop_B.Saturation[1] = 6.666666666666667 *
        full_loop_X.TransferFcn_CSTATE_g;
      full_loop_B.Saturation[2] = 6.666666666666667 *
        full_loop_X.TransferFcn_CSTATE_p;
      full_loop_B.Saturation[3] = 6.666666666666667 *
        full_loop_X.TransferFcn_CSTATE_k;
      full_loop_B.Saturation[4] = 6.666666666666667 *
        full_loop_X.TransferFcn_CSTATE_e;
      full_loop_B.Saturation[5] = 6.666666666666667 *
        full_loop_X.TransferFcn_CSTATE_kk;
      full_loop_B.Saturation[6] = 6.666666666666667 *
        full_loop_X.TransferFcn_CSTATE_o;
      full_loop_B.Saturation[7] = 6.666666666666667 *
        full_loop_X.TransferFcn_CSTATE_l;

      // MATLAB Function: '<S1>/AUV State Equation'
      full_loo_AUVQuatPerturbedSimFcn(full_loop_B.dv22, full_loop_B.Gain_o,
        full_loop_B.Saturation, full_loop_B.TmpSignalConversionAtTransp);
      full_loop_B.Position_dot[0] = full_loop_B.TmpSignalConversionAtTransp[0];
      full_loop_B.Position_dot[1] = full_loop_B.TmpSignalConversionAtTransp[1];
      full_loop_B.Position_dot[2] = full_loop_B.TmpSignalConversionAtTransp[2];
      full_loop_B.Quaternion_dot[0] = full_loop_B.TmpSignalConversionAtTransp[3];
      full_loop_B.Quaternion_dot[1] = full_loop_B.TmpSignalConversionAtTransp[4];
      full_loop_B.Quaternion_dot[2] = full_loop_B.TmpSignalConversionAtTransp[5];
      full_loop_B.Quaternion_dot[3] = full_loop_B.TmpSignalConversionAtTransp[6];
      full_loop_B.BodyVelocity_dot[0] = full_loop_B.TmpSignalConversionAtTransp
        [7];
      full_loop_B.AngularRates_dot[0] = full_loop_B.TmpSignalConversionAtTransp
        [10];
      full_loop_B.BodyVelocity_dot[1] = full_loop_B.TmpSignalConversionAtTransp
        [8];
      full_loop_B.AngularRates_dot[1] = full_loop_B.TmpSignalConversionAtTransp
        [11];
      full_loop_B.BodyVelocity_dot[2] = full_loop_B.TmpSignalConversionAtTransp
        [9];
      full_loop_B.AngularRates_dot[2] = full_loop_B.TmpSignalConversionAtTransp
        [12];
    }

    // Fcn: '<S102>/fcn2' incorporates:
    //   Fcn: '<S102>/fcn5'

    full_loop_B.BodyVelocity_idx_1 = full_loop_B.scale * full_loop_B.scale;
    full_loop_B.BodyVelocity_idx_2 = full_loop_B.t_p2 * full_loop_B.t_p2;
    full_loop_B.BodyVelocity_idx_0 = full_loop_B.Product1_a5 *
      full_loop_B.Product1_a5;
    full_loop_B.Sum_b = full_loop_B.absxk * full_loop_B.absxk;

    // Trigonometry: '<S104>/Trigonometric Function1' incorporates:
    //   Fcn: '<S102>/fcn1'
    //   Fcn: '<S102>/fcn2'

    full_loop_B.AngularRate[0] = rt_atan2d_snf((full_loop_B.Product1_a5 *
      full_loop_B.absxk - full_loop_B.scale * full_loop_B.t_p2) * -2.0,
      ((full_loop_B.BodyVelocity_idx_1 - full_loop_B.BodyVelocity_idx_2) -
       full_loop_B.BodyVelocity_idx_0) + full_loop_B.Sum_b);

    // Fcn: '<S102>/fcn3'
    full_loop_B.Sum_m = (full_loop_B.t_p2 * full_loop_B.absxk +
                         full_loop_B.scale * full_loop_B.Product1_a5) * 2.0;

    // If: '<S106>/If' incorporates:
    //   Constant: '<S107>/Constant'
    //   Constant: '<S108>/Constant'
    //   Inport: '<S109>/In'

    if (rtmIsMajorTimeStep((&full_loop_M))) {
      if (full_loop_B.Sum_m > 1.0) {
        full_loop_DW.If_ActiveSubsystem = 0;
      } else if (full_loop_B.Sum_m < -1.0) {
        full_loop_DW.If_ActiveSubsystem = 1;
      } else {
        full_loop_DW.If_ActiveSubsystem = 2;
      }
    }

    switch (full_loop_DW.If_ActiveSubsystem) {
     case 0:
      // Outputs for IfAction SubSystem: '<S106>/If Action Subsystem' incorporates:
      //   ActionPort: '<S107>/Action Port'

      if (rtmIsMajorTimeStep((&full_loop_M)) &&
          (&full_loop_M)->Timing.TaskCounters.TID[1] == 0) {
        full_loop_B.Merge_b = 1.0;
      }

      // End of Outputs for SubSystem: '<S106>/If Action Subsystem'
      break;

     case 1:
      // Outputs for IfAction SubSystem: '<S106>/If Action Subsystem1' incorporates:
      //   ActionPort: '<S108>/Action Port'

      if (rtmIsMajorTimeStep((&full_loop_M)) &&
          (&full_loop_M)->Timing.TaskCounters.TID[1] == 0) {
        full_loop_B.Merge_b = 1.0;
      }

      // End of Outputs for SubSystem: '<S106>/If Action Subsystem1'
      break;

     case 2:
      // Outputs for IfAction SubSystem: '<S106>/If Action Subsystem2' incorporates:
      //   ActionPort: '<S109>/Action Port'

      full_loop_B.Merge_b = full_loop_B.Sum_m;

      // End of Outputs for SubSystem: '<S106>/If Action Subsystem2'
      break;
    }

    // End of If: '<S106>/If'

    // Trigonometry: '<S104>/trigFcn'
    if (full_loop_B.Merge_b > 1.0) {
      full_loop_B.rtb_TmpSignalConversionAtSFun_b = 1.0;
    } else if (full_loop_B.Merge_b < -1.0) {
      full_loop_B.rtb_TmpSignalConversionAtSFun_b = -1.0;
    } else {
      full_loop_B.rtb_TmpSignalConversionAtSFun_b = full_loop_B.Merge_b;
    }

    full_loop_B.AngularRate[1] = std::asin
      (full_loop_B.rtb_TmpSignalConversionAtSFun_b);

    // End of Trigonometry: '<S104>/trigFcn'

    // Trigonometry: '<S104>/Trigonometric Function3' incorporates:
    //   Fcn: '<S102>/fcn4'
    //   Fcn: '<S102>/fcn5'

    full_loop_B.AngularRate[2] = rt_atan2d_snf((full_loop_B.t_p2 *
      full_loop_B.Product1_a5 - full_loop_B.scale * full_loop_B.absxk) * -2.0,
      ((full_loop_B.BodyVelocity_idx_1 + full_loop_B.BodyVelocity_idx_2) -
       full_loop_B.BodyVelocity_idx_0) - full_loop_B.Sum_b);

    // MATLABSystem: '<S87>/MATLAB System2'
    //  Implement algorithm. Calculate y as a function of input u and
    //  discrete states.
    for (full_loop_B.ibmat = 0; full_loop_B.ibmat < 3; full_loop_B.ibmat++) {
      full_loop_B.AngularRate_m[full_loop_B.ibmat] =
        full_loop_B.AngularRate[full_loop_B.ibmat];

      //  compute roll pitch yaw
      //  appliquer la discontinuté actuelle
      if (full_loop_DW.obj_l.tcount[full_loop_B.ibmat] > 0.0) {
        full_loop_B.AngularRate_m[full_loop_B.ibmat] =
          (full_loop_B.AngularRate[full_loop_B.ibmat] + 3.1415926535897931) +
          3.1415926535897931 * full_loop_DW.obj_l.tcount[full_loop_B.ibmat];
      } else {
        full_loop_B.x_ct[0] = (full_loop_DW.obj_l.tcount[0] < 0.0);
        full_loop_B.x_ct[1] = (full_loop_DW.obj_l.tcount[1] < 0.0);
        full_loop_B.x_ct[2] = (full_loop_DW.obj_l.tcount[2] < 0.0);
        full_loop_B.didZcEventOccur = true;
        full_loop_B.i_h = 0;
        exitg1 = false;
        while ((!exitg1) && (full_loop_B.i_h < 3)) {
          if (!full_loop_B.x_ct[full_loop_B.i_h]) {
            full_loop_B.didZcEventOccur = false;
            exitg1 = true;
          } else {
            full_loop_B.i_h++;
          }
        }

        if (full_loop_B.didZcEventOccur) {
          full_loop_B.AngularRate_m[full_loop_B.ibmat] =
            (full_loop_B.AngularRate[full_loop_B.ibmat] - 3.1415926535897931) +
            3.1415926535897931 * full_loop_DW.obj_l.tcount[full_loop_B.ibmat];
        }
      }

      //  calculer la différence entre 2 point
      full_loop_B.BodyVelocity_idx_1 =
        full_loop_DW.obj_l.lastAngle[full_loop_B.ibmat] -
        full_loop_B.AngularRate_m[full_loop_B.ibmat];

      //  Verifier la discontinuité de laxe
      if (std::abs(full_loop_B.BodyVelocity_idx_1) >= 3.1415926535897931) {
        //  Determiner le sens de la discontinuité
        if (full_loop_B.BodyVelocity_idx_1 > 0.0) {
          //  Ajouter un tour
          full_loop_DW.obj_l.tcount[full_loop_B.ibmat]++;

          //  Recaluler l'angle
          if (full_loop_DW.obj_l.tcount[full_loop_B.ibmat] == 0.0) {
            full_loop_B.AngularRate_m[full_loop_B.ibmat] =
              full_loop_B.AngularRate[full_loop_B.ibmat];
          } else {
            full_loop_B.AngularRate_m[full_loop_B.ibmat] =
              (full_loop_B.AngularRate[full_loop_B.ibmat] + 3.1415926535897931)
              + 3.1415926535897931 * full_loop_DW.obj_l.tcount[full_loop_B.ibmat];
          }
        } else {
          //  Soustraire un tour
          full_loop_DW.obj_l.tcount[full_loop_B.ibmat]--;

          //  Recaluler l'angle
          if (full_loop_DW.obj_l.tcount[full_loop_B.ibmat] == 0.0) {
            full_loop_B.AngularRate_m[full_loop_B.ibmat] =
              full_loop_B.AngularRate[full_loop_B.ibmat];
          } else {
            full_loop_B.AngularRate_m[full_loop_B.ibmat] =
              (full_loop_B.AngularRate[full_loop_B.ibmat] - 3.1415926535897931)
              + 3.1415926535897931 * full_loop_DW.obj_l.tcount[full_loop_B.ibmat];
          }
        }
      }

      full_loop_DW.obj_l.lastAngle[full_loop_B.ibmat] =
        full_loop_B.AngularRate_m[full_loop_B.ibmat];
    }

    // End of MATLABSystem: '<S87>/MATLAB System2'
    if (rtmIsMajorTimeStep((&full_loop_M)) &&
        (&full_loop_M)->Timing.TaskCounters.TID[4] == 0) {
      // MATLAB Function: '<S4>/MATLAB Function1' incorporates:
      //   Constant: '<S49>/Constant'

      full_loop_B.msg = full_loop_rtZSL_Bus_full_loop_std_msgs_UInt16MultiArray;
      for (full_loop_B.i_h = 0; full_loop_B.i_h < 8; full_loop_B.i_h++) {
        full_loop_B.msg.Data[full_loop_B.i_h] =
          full_loop_B.NtoPWM[full_loop_B.i_h];
      }

      full_loop_B.msg.Data_SL_Info.CurrentLength = 8U;

      // End of MATLAB Function: '<S4>/MATLAB Function1'

      // Outputs for Atomic SubSystem: '<S4>/Publish'
      // MATLABSystem: '<S51>/SinkBlock'
      Pub_full_loop_783.publish(&full_loop_B.msg);

      // End of Outputs for SubSystem: '<S4>/Publish'

      // Outputs for Triggered SubSystem: '<Root>/Send Target Reached ' incorporates:
      //   TriggerPort: '<S5>/Trigger'

      if (rtmIsMajorTimeStep((&full_loop_M))) {
        if (((full_loop_PrevZCX.SendTargetReached_Trig_ZCE == 1) !=
             static_cast<int32_T>(full_loop_B.MATLABSystem_o2)) &&
            (full_loop_PrevZCX.SendTargetReached_Trig_ZCE != 3)) {
          // BusAssignment: '<S5>/Bus Assignment'
          full_loop_B.BusAssignment.Data = full_loop_B.MATLABSystem_o2;

          // Outputs for Atomic SubSystem: '<S5>/Publish'
          // MATLABSystem: '<S53>/SinkBlock'
          Pub_full_loop_794.publish(&full_loop_B.BusAssignment);

          // End of Outputs for SubSystem: '<S5>/Publish'
        }

        full_loop_PrevZCX.SendTargetReached_Trig_ZCE =
          full_loop_B.MATLABSystem_o2;
      }

      // End of Outputs for SubSystem: '<Root>/Send Target Reached '
    }
  }

  if (rtmIsMajorTimeStep((&full_loop_M))) {
    int32_T i;
    if (rtmIsMajorTimeStep((&full_loop_M)) &&
        (&full_loop_M)->Timing.TaskCounters.TID[1] == 0) {
      // Update for RandomNumber: '<S25>/White Noise'
      full_loop_DW.NextOutput = rt_nrand_Upu32_Yd_f_pw_snf
        (&full_loop_DW.RandSeed);

      // Update for RandomNumber: '<S24>/White Noise'
      full_loop_DW.NextOutput_m = rt_nrand_Upu32_Yd_f_pw_snf
        (&full_loop_DW.RandSeed_g);
    }

    // Update for Integrator: '<S1>/Integrator3'
    full_loop_DW.Integrator3_IWORK = 0;

    // Update for Integrator: '<S1>/Integrator2'
    full_loop_DW.Integrator2_IWORK = 0;

    // Update for Integrator: '<S1>/Integrator1'
    full_loop_DW.Integrator1_IWORK = 0;
    if (rtmIsMajorTimeStep((&full_loop_M)) &&
        (&full_loop_M)->Timing.TaskCounters.TID[3] == 0) {
      // Update for DiscreteIntegrator: '<S7>/Discrete-Time Integrator'
      full_loop_DW.DiscreteTimeIntegrator_IC_LOADI = 0U;
      full_loop_DW.DiscreteTimeIntegrator_DSTATE[0] = 0.025 * full_loop_B.Sum_a
        + full_loop_B.WorldPosition[0];
      full_loop_DW.DiscreteTimeIntegrator_DSTATE[1] = 0.025 * full_loop_B.Sum_g
        + full_loop_B.WorldPosition[1];
      full_loop_DW.DiscreteTimeIntegrator_DSTATE[2] = 0.025 * full_loop_B.Sum_e
        + full_loop_B.WorldPosition[2];
      full_loop_DW.DiscreteTimeIntegrator_PrevRese = static_cast<int8_T>
        (full_loop_B.SourceBlock_o1);
    }

    if (rtmIsMajorTimeStep((&full_loop_M)) &&
        (&full_loop_M)->Timing.TaskCounters.TID[2] == 0) {
      // Update for DiscreteIntegrator: '<S119>/Integrator'
      full_loop_DW.Integrator_PrevResetState = 0;
      for (i = 0; i < 6; i++) {
        full_loop_DW.Integrator_DSTATE[i] += 0.033333333333333333 *
          full_loop_B.Integrator[i];

        // Update for DiscreteIntegrator: '<S120>/Integrator'
        full_loop_DW.Integrator_DSTATE_h[i] += 0.033333333333333333 *
          full_loop_B.Sum[i];
      }

      // End of Update for DiscreteIntegrator: '<S119>/Integrator'

      // Update for DiscreteIntegrator: '<S120>/Integrator'
      full_loop_DW.Integrator_PrevResetState_l = 0;
    }

    // Update for Integrator: '<S1>/Integrator'
    full_loop_DW.Integrator_IWORK = 0;
    if (rtmIsMajorTimeStep((&full_loop_M)) &&
        (&full_loop_M)->Timing.TaskCounters.TID[4] == 0) {
      // Update for Memory: '<S137>/Memory'
      full_loop_DW.Memory_PreviousInput = full_loop_B.Reset;
    }

    if (rtmIsMajorTimeStep((&full_loop_M)) &&
        (&full_loop_M)->Timing.TaskCounters.TID[5] == 0) {
      // Update for UniformRandomNumber: '<S13>/X Drift'
      full_loop_DW.XDrift_NextOutput = rt_urand_Upu32_Yd_f_pw_snf
        (&full_loop_DW.RandSeed_gl) * 0.41876566120253955 + -0.12546926480153031;

      // Update for UniformRandomNumber: '<S13>/Y Drift'
      full_loop_DW.YDrift_NextOutput = rt_urand_Upu32_Yd_f_pw_snf
        (&full_loop_DW.RandSeed_n) * 3.5023974503613458 + -1.1259351064489302;
    }
  }                                    // end MajorTimeStep

  if (rtmIsMajorTimeStep((&full_loop_M))) {
    rt_ertODEUpdateContinuousStates(&(&full_loop_M)->solverInfo);

    // Update absolute time for base rate
    // The "clockTick0" counts the number of times the code of this task has
    //  been executed. The absolute time is the multiplication of "clockTick0"
    //  and "Timing.stepSize0". Size of "clockTick0" ensures timer will not
    //  overflow during the application lifespan selected.

    ++(&full_loop_M)->Timing.clockTick0;
    (&full_loop_M)->Timing.t[0] = rtsiGetSolverStopTime(&(&full_loop_M)
      ->solverInfo);

    {
      // Update absolute timer for sample time: [0.016666666666666666s, 0.0s]
      // The "clockTick1" counts the number of times the code of this task has
      //  been executed. The resolution of this integer timer is 0.016666666666666666, which is the step size
      //  of the task. Size of "clockTick1" ensures timer will not overflow during the
      //  application lifespan selected.

      (&full_loop_M)->Timing.clockTick1++;
    }

    rate_scheduler((&full_loop_M));
  }                                    // end MajorTimeStep
}

// Derivatives for root system: '<Root>'
void full_loopModelClass::full_loop_derivatives()
{
  XDot_full_loop_T *_rtXdot;
  _rtXdot = ((XDot_full_loop_T *) (&full_loop_M)->derivs);

  // Derivatives for Integrator: '<S1>/Integrator3'
  _rtXdot->Integrator3_CSTATE[0] = full_loop_B.AngularRates_dot[0];

  // Derivatives for Integrator: '<S1>/Integrator2'
  _rtXdot->Integrator2_CSTATE[0] = full_loop_B.BodyVelocity_dot[0];

  // Derivatives for Integrator: '<S1>/Integrator3'
  _rtXdot->Integrator3_CSTATE[1] = full_loop_B.AngularRates_dot[1];

  // Derivatives for Integrator: '<S1>/Integrator2'
  _rtXdot->Integrator2_CSTATE[1] = full_loop_B.BodyVelocity_dot[1];

  // Derivatives for Integrator: '<S1>/Integrator3'
  _rtXdot->Integrator3_CSTATE[2] = full_loop_B.AngularRates_dot[2];

  // Derivatives for Integrator: '<S1>/Integrator2'
  _rtXdot->Integrator2_CSTATE[2] = full_loop_B.BodyVelocity_dot[2];

  // Derivatives for Integrator: '<S1>/Integrator1'
  _rtXdot->Integrator1_CSTATE[0] = full_loop_B.Quaternion_dot[0];
  _rtXdot->Integrator1_CSTATE[1] = full_loop_B.Quaternion_dot[1];
  _rtXdot->Integrator1_CSTATE[2] = full_loop_B.Quaternion_dot[2];
  _rtXdot->Integrator1_CSTATE[3] = full_loop_B.Quaternion_dot[3];

  // Derivatives for Integrator: '<S1>/Integrator'
  _rtXdot->Integrator_CSTATE[0] = full_loop_B.Position_dot[0];
  _rtXdot->Integrator_CSTATE[1] = full_loop_B.Position_dot[1];
  _rtXdot->Integrator_CSTATE[2] = full_loop_B.Position_dot[2];

  // Derivatives for TransferFcn: '<S16>/Transfer Fcn'
  _rtXdot->TransferFcn_CSTATE = 0.0;
  _rtXdot->TransferFcn_CSTATE += -6.666666666666667 *
    full_loop_X.TransferFcn_CSTATE;
  _rtXdot->TransferFcn_CSTATE += full_loop_B.PWMtoN[0];

  // Derivatives for TransferFcn: '<S17>/Transfer Fcn'
  _rtXdot->TransferFcn_CSTATE_g = 0.0;
  _rtXdot->TransferFcn_CSTATE_g += -6.666666666666667 *
    full_loop_X.TransferFcn_CSTATE_g;
  _rtXdot->TransferFcn_CSTATE_g += full_loop_B.PWMtoN[1];

  // Derivatives for TransferFcn: '<S18>/Transfer Fcn'
  _rtXdot->TransferFcn_CSTATE_p = 0.0;
  _rtXdot->TransferFcn_CSTATE_p += -6.666666666666667 *
    full_loop_X.TransferFcn_CSTATE_p;
  _rtXdot->TransferFcn_CSTATE_p += full_loop_B.PWMtoN[2];

  // Derivatives for TransferFcn: '<S19>/Transfer Fcn'
  _rtXdot->TransferFcn_CSTATE_k = 0.0;
  _rtXdot->TransferFcn_CSTATE_k += -6.666666666666667 *
    full_loop_X.TransferFcn_CSTATE_k;
  _rtXdot->TransferFcn_CSTATE_k += full_loop_B.PWMtoN[3];

  // Derivatives for TransferFcn: '<S20>/Transfer Fcn'
  _rtXdot->TransferFcn_CSTATE_e = 0.0;
  _rtXdot->TransferFcn_CSTATE_e += -6.666666666666667 *
    full_loop_X.TransferFcn_CSTATE_e;
  _rtXdot->TransferFcn_CSTATE_e += full_loop_B.PWMtoN[4];

  // Derivatives for TransferFcn: '<S21>/Transfer Fcn'
  _rtXdot->TransferFcn_CSTATE_kk = 0.0;
  _rtXdot->TransferFcn_CSTATE_kk += -6.666666666666667 *
    full_loop_X.TransferFcn_CSTATE_kk;
  _rtXdot->TransferFcn_CSTATE_kk += full_loop_B.PWMtoN[5];

  // Derivatives for TransferFcn: '<S22>/Transfer Fcn'
  _rtXdot->TransferFcn_CSTATE_o = 0.0;
  _rtXdot->TransferFcn_CSTATE_o += -6.666666666666667 *
    full_loop_X.TransferFcn_CSTATE_o;
  _rtXdot->TransferFcn_CSTATE_o += full_loop_B.PWMtoN[6];

  // Derivatives for TransferFcn: '<S23>/Transfer Fcn'
  _rtXdot->TransferFcn_CSTATE_l = 0.0;
  _rtXdot->TransferFcn_CSTATE_l += -6.666666666666667 *
    full_loop_X.TransferFcn_CSTATE_l;
  _rtXdot->TransferFcn_CSTATE_l += full_loop_B.PWMtoN[7];

  // Derivatives for TransferFcn: '<S8>/Transfer Fcn1'
  _rtXdot->TransferFcn1_CSTATE[0] = 0.0;
  _rtXdot->TransferFcn1_CSTATE[0] += -3.0803353937430189 *
    full_loop_X.TransferFcn1_CSTATE[0];
  _rtXdot->TransferFcn1_CSTATE[1] = 0.0;
  _rtXdot->TransferFcn1_CSTATE[0] += -2.4202801086485972 *
    full_loop_X.TransferFcn1_CSTATE[1];
  _rtXdot->TransferFcn1_CSTATE[1] += full_loop_X.TransferFcn1_CSTATE[0];
}

// Model initialize function
void full_loopModelClass::initialize()
{
  // Registration code

  // initialize non-finites
  rt_InitInfAndNaN(sizeof(real_T));

  {
    // Setup solver object
    rtsiSetSimTimeStepPtr(&(&full_loop_M)->solverInfo, &(&full_loop_M)
                          ->Timing.simTimeStep);
    rtsiSetTPtr(&(&full_loop_M)->solverInfo, &rtmGetTPtr((&full_loop_M)));
    rtsiSetStepSizePtr(&(&full_loop_M)->solverInfo, &(&full_loop_M)
                       ->Timing.stepSize0);
    rtsiSetdXPtr(&(&full_loop_M)->solverInfo, &(&full_loop_M)->derivs);
    rtsiSetContStatesPtr(&(&full_loop_M)->solverInfo, (real_T **) &(&full_loop_M)
                         ->contStates);
    rtsiSetNumContStatesPtr(&(&full_loop_M)->solverInfo, &(&full_loop_M)
      ->Sizes.numContStates);
    rtsiSetNumPeriodicContStatesPtr(&(&full_loop_M)->solverInfo, &(&full_loop_M
      )->Sizes.numPeriodicContStates);
    rtsiSetPeriodicContStateIndicesPtr(&(&full_loop_M)->solverInfo,
      &(&full_loop_M)->periodicContStateIndices);
    rtsiSetPeriodicContStateRangesPtr(&(&full_loop_M)->solverInfo,
      &(&full_loop_M)->periodicContStateRanges);
    rtsiSetErrorStatusPtr(&(&full_loop_M)->solverInfo, (&rtmGetErrorStatus
      ((&full_loop_M))));
    rtsiSetRTModelPtr(&(&full_loop_M)->solverInfo, (&full_loop_M));
  }

  rtsiSetSimTimeStep(&(&full_loop_M)->solverInfo, MAJOR_TIME_STEP);
  (&full_loop_M)->intgData.y = (&full_loop_M)->odeY;
  (&full_loop_M)->intgData.f[0] = (&full_loop_M)->odeF[0];
  (&full_loop_M)->intgData.f[1] = (&full_loop_M)->odeF[1];
  (&full_loop_M)->intgData.f[2] = (&full_loop_M)->odeF[2];
  (&full_loop_M)->contStates = ((X_full_loop_T *) &full_loop_X);
  rtsiSetSolverData(&(&full_loop_M)->solverInfo, static_cast<void *>
                    (&(&full_loop_M)->intgData));
  rtsiSetSolverName(&(&full_loop_M)->solverInfo,"ode3");
  rtmSetTPtr((&full_loop_M), &(&full_loop_M)->Timing.tArray[0]);
  (&full_loop_M)->Timing.stepSize0 = 0.016666666666666666;
  rtmSetFirstInitCond((&full_loop_M), 1);

  {
    char_T *sErr;
    char_T tmp[16];
    int32_T i;
    static const char_T tmp_0[22] = { '/', 'p', 'r', 'o', 'c', '_', 'c', 'o',
      'n', 't', 'r', 'o', 'l', '/', 's', 'e', 't', '_', 'm', 'o', 'd', 'e' };

    static const char_T tmp_1[18] = { '/', 'i', 'n', 'i', 't', 'i', 'a', 'l',
      '_', 'c', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n' };

    static const char_T tmp_2[15] = { '/', 's', 'p', 'a', 'c', 'e', 'n', 'a',
      'v', '/', 't', 'w', 'i', 's', 't' };

    static const char_T tmp_3[36] = { '/', 'p', 'r', 'o', 'c', '_', 'c', 'o',
      'n', 't', 'r', 'o', 'l', '_', 'm', 'a', 't', 'l', 'a', 'b', '/', 'c', 'l',
      'e', 'a', 'r', '_', 'w', 'a', 'y', 'p', 'o', 'i', 'n', 't', 's' };

    static const char_T tmp_4[28] = { 'p', 'r', 'o', 'c', '_', 'c', 'o', 'n',
      't', 'r', 'o', 'l', '_', 'm', 'a', 't', 'l', 'a', 'b', '/', 'a', 'd', 'd',
      '_', 'p', 'o', 's', 'e' };

    static const char_T tmp_5[39] = { '/', 'p', 'r', 'o', 'c', '_', 'c', 'o',
      'n', 't', 'r', 'o', 'l', '_', 'm', 'a', 't', 'l', 'a', 'b', '/', 'c', 'o',
      'm', 'p', 'u', 't', 'e', '_', 't', 'r', 'a', 'j', 'e', 'c', 't', 'o', 'r',
      'y' };

    static const char_T tmp_6[18] = { '/', 'p', 'r', 'o', 'c', '_', 'c', 'o',
      'n', 't', 'r', 'o', 'l', '/', 'k', 'i', 'l', 'l' };

    static const char_T tmp_7[23] = { '/', 'g', 'a', 'z', 'e', 'b', 'o', '/',
      's', 'e', 't', '_', 'm', 'o', 'd', 'e', 'l', '_', 's', 't', 'a', 't', 'e'
    };

    static const char_T tmp_8[26] = { '/', 'p', 'r', 'o', 'v', 'i', 'd', 'e',
      'r', '_', 'd', 'v', 'l', '/', 'd', 'v', 'l', '_', 'v', 'e', 'l', 'o', 'c',
      'i', 't', 'y' };

    static const char_T tmp_9[22] = { '/', 'p', 'r', 'o', 'v', 'i', 'd', 'e',
      'r', '_', 'i', 'm', 'u', '/', 'i', 'm', 'u', '_', 'i', 'n', 'f', 'o' };

    static const char_T tmp_a[31] = { '/', 'p', 'r', 'o', 'v', 'i', 'd', 'e',
      'r', '_', 't', 'h', 'r', 'u', 's', 't', 'e', 'r', '/', 't', 'h', 'r', 'u',
      's', 't', 'e', 'r', '_', 'p', 'w', 'm' };

    static const char_T tmp_b[34] = { 'p', 'r', 'o', 'c', '_', 'c', 'o', 'n',
      't', 'r', 'o', 'l', '_', 'm', 'a', 't', 'l', 'a', 'b', '/', 't', 'a', 'r',
      'g', 'e', 't', '_', 'r', 'e', 'a', 'c', 'h', 'e', 'd' };

    // Start for SwitchCase: '<S8>/Switch Case'
    full_loop_DW.SwitchCase_ActiveSubsystem = -1;

    // Start for SwitchCase: '<S6>/Switch Case'
    full_loop_DW.SwitchCase_ActiveSubsystem_c = -1;

    // Start for S-Function (sdspwmmfi2): '<S1>/From Multimedia File'
    sErr = GetErrorBuffer(&full_loop_DW.FromMultimediaFile_HostLib[0U]);
    CreateHostLibrary("libmwfrommmfile.so",
                      &full_loop_DW.FromMultimediaFile_HostLib[0U]);
    createAudioInfo(&full_loop_DW.FromMultimediaFile_AudioInfo[0U], 1U, 0U,
                    44100.0, 16, 2, 1024, 0, GetNullPointer());
    createVideoInfo(&full_loop_DW.FromMultimediaFile_VideoInfo[0U], 0U, 0.0, 0.0,
                    "", 0, 0, 0, 0, 1U, 0, 0, GetNullPointer());
    if (*sErr == 0) {
      LibCreate_FromMMFile(&full_loop_DW.FromMultimediaFile_HostLib[0U], 0,
                           (void *)
                           "/home/lamarre/Documents/SONIA/catkin_ws/src/control_library/src/simulink/auv_plant/script/warning.mp3",
                           1,
                           "/usr/local/MATLAB/R2020a/toolbox/shared/multimedia/bin/glnxa64/audio/libmwaudiofilegstreaderplugin.so",
                           "/usr/local/MATLAB/R2020a/toolbox/shared/multimedia/bin/glnxa64/audioslconverter",
                           &full_loop_DW.FromMultimediaFile_AudioInfo[0U],
                           &full_loop_DW.FromMultimediaFile_VideoInfo[0U], 0U,
                           1U, 1U, 0U, 0U, 1U, 1.0, 9.2233720368547758E+18);
    }

    if (*sErr == 0) {
      LibStart(&full_loop_DW.FromMultimediaFile_HostLib[0U]);
    }

    if (*sErr != 0) {
      DestroyHostLibrary(&full_loop_DW.FromMultimediaFile_HostLib[0U]);
      if (*sErr != 0) {
        rtmSetErrorStatus((&full_loop_M), sErr);
        rtmSetStopRequested((&full_loop_M), 1);
      }
    }

    // End of Start for S-Function (sdspwmmfi2): '<S1>/From Multimedia File'

    // Start for S-Function (saudioToAudioDevice): '<S1>/Audio Device Writer'
    sErr = GetErrorBuffer(&full_loop_DW.AudioDeviceWriter_AudioDeviceLi[0U]);
    CreateHostLibrary("libmwhostlibaudio.so",
                      &full_loop_DW.AudioDeviceWriter_AudioDeviceLi[0U]);
    if (*sErr == 0) {
      LibCreate_Audio(&full_loop_DW.AudioDeviceWriter_AudioDeviceLi[0U], 0,
                      "Default", 8, 1, 2, 44100.0, 3, 1024, 10240, 1024, 0, NULL);
    }

    if (*sErr != 0) {
      DestroyHostLibrary(&full_loop_DW.AudioDeviceWriter_AudioDeviceLi[0U]);
      if (*sErr != 0) {
        rtmSetErrorStatus((&full_loop_M), sErr);
        rtmSetStopRequested((&full_loop_M), 1);
      }
    }

    // End of Start for S-Function (saudioToAudioDevice): '<S1>/Audio Device Writer' 

    // Start for If: '<S106>/If'
    full_loop_DW.If_ActiveSubsystem = -1;
    full_loop_PrevZCX.Integrator3_Reset_ZCE = UNINITIALIZED_ZCSIG;
    full_loop_PrevZCX.Integrator2_Reset_ZCE = UNINITIALIZED_ZCSIG;
    full_loop_PrevZCX.Integrator1_Reset_ZCE = UNINITIALIZED_ZCSIG;
    full_loop_PrevZCX.Integrator_Reset_ZCE = UNINITIALIZED_ZCSIG;
    full_loop_PrevZCX.SendTargetReached_Trig_ZCE = UNINITIALIZED_ZCSIG;
    full_loop_PrevZCX.Subsystem2_Trig_ZCE = POS_ZCSIG;

    // InitializeConditions for RandomNumber: '<S25>/White Noise'
    full_loop_DW.RandSeed = 1529675776U;
    full_loop_DW.NextOutput = rt_nrand_Upu32_Yd_f_pw_snf(&full_loop_DW.RandSeed);

    // InitializeConditions for Integrator: '<S1>/Integrator3' incorporates:
    //   Integrator: '<S1>/Integrator2'

    if (rtmIsFirstInitCond((&full_loop_M))) {
      full_loop_X.Integrator3_CSTATE[0] = 0.0;
      full_loop_X.Integrator3_CSTATE[1] = 0.0;
      full_loop_X.Integrator3_CSTATE[2] = 0.0;
      full_loop_X.Integrator2_CSTATE[0] = 0.0;
      full_loop_X.Integrator2_CSTATE[1] = 0.0;
      full_loop_X.Integrator2_CSTATE[2] = 0.0;
    }

    full_loop_DW.Integrator3_IWORK = 1;

    // End of InitializeConditions for Integrator: '<S1>/Integrator3'

    // InitializeConditions for Integrator: '<S1>/Integrator2'
    full_loop_DW.Integrator2_IWORK = 1;

    // InitializeConditions for Integrator: '<S1>/Integrator1'
    if (rtmIsFirstInitCond((&full_loop_M))) {
      full_loop_X.Integrator1_CSTATE[0] = 0.0;
      full_loop_X.Integrator1_CSTATE[1] = 0.0;
      full_loop_X.Integrator1_CSTATE[2] = 0.0;
      full_loop_X.Integrator1_CSTATE[3] = 0.0;
    }

    full_loop_DW.Integrator1_IWORK = 1;

    // End of InitializeConditions for Integrator: '<S1>/Integrator1'

    // InitializeConditions for RandomNumber: '<S24>/White Noise'
    full_loop_DW.RandSeed_g = 1529675776U;
    full_loop_DW.NextOutput_m = rt_nrand_Upu32_Yd_f_pw_snf
      (&full_loop_DW.RandSeed_g);

    // InitializeConditions for DiscreteIntegrator: '<S7>/Discrete-Time Integrator' 
    full_loop_DW.DiscreteTimeIntegrator_PrevRese = 2;
    full_loop_DW.DiscreteTimeIntegrator_IC_LOADI = 1U;

    // InitializeConditions for S-Function (sdspwmmfi2): '<S1>/From Multimedia File' 
    LibReset(&full_loop_DW.FromMultimediaFile_HostLib[0U]);

    // InitializeConditions for Integrator: '<S1>/Integrator'
    if (rtmIsFirstInitCond((&full_loop_M))) {
      full_loop_X.Integrator_CSTATE[0] = 0.0;
      full_loop_X.Integrator_CSTATE[1] = 0.0;
      full_loop_X.Integrator_CSTATE[2] = 0.0;
    }

    full_loop_DW.Integrator_IWORK = 1;

    // End of InitializeConditions for Integrator: '<S1>/Integrator'

    // InitializeConditions for TransferFcn: '<S16>/Transfer Fcn'
    full_loop_X.TransferFcn_CSTATE = 0.0;

    // InitializeConditions for TransferFcn: '<S17>/Transfer Fcn'
    full_loop_X.TransferFcn_CSTATE_g = 0.0;

    // InitializeConditions for TransferFcn: '<S18>/Transfer Fcn'
    full_loop_X.TransferFcn_CSTATE_p = 0.0;

    // InitializeConditions for TransferFcn: '<S19>/Transfer Fcn'
    full_loop_X.TransferFcn_CSTATE_k = 0.0;

    // InitializeConditions for TransferFcn: '<S20>/Transfer Fcn'
    full_loop_X.TransferFcn_CSTATE_e = 0.0;

    // InitializeConditions for TransferFcn: '<S21>/Transfer Fcn'
    full_loop_X.TransferFcn_CSTATE_kk = 0.0;

    // InitializeConditions for TransferFcn: '<S22>/Transfer Fcn'
    full_loop_X.TransferFcn_CSTATE_o = 0.0;

    // InitializeConditions for TransferFcn: '<S23>/Transfer Fcn'
    full_loop_X.TransferFcn_CSTATE_l = 0.0;

    // InitializeConditions for UniformRandomNumber: '<S13>/X Drift'
    full_loop_DW.RandSeed_gl = 524288U;
    full_loop_DW.XDrift_NextOutput = rt_urand_Upu32_Yd_f_pw_snf
      (&full_loop_DW.RandSeed_gl) * 0.41876566120253955 + -0.12546926480153031;

    // InitializeConditions for UniformRandomNumber: '<S13>/Y Drift'
    full_loop_DW.RandSeed_n = 655360U;
    full_loop_DW.YDrift_NextOutput = rt_urand_Upu32_Yd_f_pw_snf
      (&full_loop_DW.RandSeed_n) * 3.5023974503613458 + -1.1259351064489302;

    // InitializeConditions for TransferFcn: '<S8>/Transfer Fcn1'
    full_loop_X.TransferFcn1_CSTATE[0] = 0.0;
    full_loop_X.TransferFcn1_CSTATE[1] = 0.0;

    // SystemInitialize for Atomic SubSystem: '<S9>/Subscribe2'
    // Start for MATLABSystem: '<S136>/SourceBlock'
    full_loop_DW.obj_i.matlabCodegenIsDeleted = false;
    full_loop_DW.obj_i.isInitialized = 1;
    for (i = 0; i < 22; i++) {
      full_loop_B.cv7[i] = tmp_0[i];
    }

    full_loop_B.cv7[22] = '\x00';
    Sub_full_loop_854.createSubscriber(full_loop_B.cv7, 1);
    full_loop_DW.obj_i.isSetupComplete = true;

    // End of Start for MATLABSystem: '<S136>/SourceBlock'
    // End of SystemInitialize for SubSystem: '<S9>/Subscribe2'

    // SystemInitialize for Atomic SubSystem: '<S9>/Subscribe'
    // Start for MATLABSystem: '<S134>/SourceBlock'
    full_loop_DW.obj_iv.matlabCodegenIsDeleted = false;
    full_loop_DW.obj_iv.isInitialized = 1;
    for (i = 0; i < 18; i++) {
      full_loop_B.cv8[i] = tmp_1[i];
    }

    full_loop_B.cv8[18] = '\x00';
    Sub_full_loop_796.createSubscriber(full_loop_B.cv8, 1);
    full_loop_DW.obj_iv.isSetupComplete = true;

    // End of Start for MATLABSystem: '<S134>/SourceBlock'
    // End of SystemInitialize for SubSystem: '<S9>/Subscribe'

    // SystemInitialize for Atomic SubSystem: '<S112>/Subscribe2'
    // Start for MATLABSystem: '<S116>/SourceBlock'
    full_loop_DW.obj_l4.matlabCodegenIsDeleted = false;
    full_loop_DW.obj_l4.isInitialized = 1;
    for (i = 0; i < 15; i++) {
      tmp[i] = tmp_2[i];
    }

    tmp[15] = '\x00';
    Sub_full_loop_644_1122.createSubscriber(tmp, 2);
    full_loop_DW.obj_l4.isSetupComplete = true;

    // End of Start for MATLABSystem: '<S116>/SourceBlock'
    // End of SystemInitialize for SubSystem: '<S112>/Subscribe2'

    // SystemInitialize for IfAction SubSystem: '<S8>/SubsystemAuto'
    // SystemInitialize for Atomic SubSystem: '<S113>/Subscribe2'
    // Start for MATLABSystem: '<S125>/SourceBlock'
    full_loop_DW.obj_gw.matlabCodegenIsDeleted = false;
    full_loop_DW.obj_gw.isInitialized = 1;
    for (i = 0; i < 36; i++) {
      full_loop_B.cv1[i] = tmp_3[i];
    }

    full_loop_B.cv1[36] = '\x00';
    Sub_full_loop_644_946.createSubscriber(full_loop_B.cv1, 1);
    full_loop_DW.obj_gw.isSetupComplete = true;

    // End of Start for MATLABSystem: '<S125>/SourceBlock'
    // End of SystemInitialize for SubSystem: '<S113>/Subscribe2'

    // SystemInitialize for Atomic SubSystem: '<S113>/Subscribe'
    // Start for MATLABSystem: '<S123>/SourceBlock'
    full_loop_DW.obj_b.matlabCodegenIsDeleted = false;
    full_loop_DW.obj_b.isInitialized = 1;
    for (i = 0; i < 28; i++) {
      full_loop_B.cv4[i] = tmp_4[i];
    }

    full_loop_B.cv4[28] = '\x00';
    Sub_full_loop_644_945.createSubscriber(full_loop_B.cv4, 1);
    full_loop_DW.obj_b.isSetupComplete = true;

    // End of Start for MATLABSystem: '<S123>/SourceBlock'
    // End of SystemInitialize for SubSystem: '<S113>/Subscribe'

    // SystemInitialize for Atomic SubSystem: '<S113>/Subscribe1'
    // Start for MATLABSystem: '<S124>/SourceBlock'
    full_loop_DW.obj_mi.matlabCodegenIsDeleted = false;
    full_loop_DW.obj_mi.isInitialized = 1;
    for (i = 0; i < 39; i++) {
      full_loop_B.cv[i] = tmp_5[i];
    }

    full_loop_B.cv[39] = '\x00';
    Sub_full_loop_644_944.createSubscriber(full_loop_B.cv, 1);
    full_loop_DW.obj_mi.isSetupComplete = true;

    // End of Start for MATLABSystem: '<S124>/SourceBlock'
    // End of SystemInitialize for SubSystem: '<S113>/Subscribe1'

    // SystemInitialize for Triggered SubSystem: '<S113>/Subsystem2'
    // Start for MATLABSystem: '<S127>/MATLAB System2'
    for (i = 0; i < 7; i++) {
      full_loop_DW.obj_c.avanceRapide[i] =
        full_loop_ConstP.MATLABSystem2_avanceRapide[i];
      full_loop_DW.obj_c.avancePrecision[i] =
        full_loop_ConstP.MATLABSystem2_avancePrecision[i];
      full_loop_DW.obj_c.accRapide[i] =
        full_loop_ConstP.MATLABSystem2_accRapide[i];
    }

    full_loop_DW.obj_c.accPrecision = 0.1;
    full_loop_DW.obj_c.Ts = 0.25;
    full_loop_DW.obj_c.isInitialized = 1;

    //  untitled Add summary here
    //
    //  This template includes the minimum set of functions required
    //  to define a System object with discrete state.
    //  Public, tunable properties
    //  Vitesse Rapide
    //  Vtesse Precision
    //  acceleration Rapide
    //  acceleration Precision
    //  Public, tunable properties
    //  Taille statique
    //  Pre-computed constants
    //  Perform one-time calculations, such as computing constants
    full_loop_DW.obj_c.computeCount = 0.0;

    // End of Start for MATLABSystem: '<S127>/MATLAB System2'
    // End of SystemInitialize for SubSystem: '<S113>/Subsystem2'

    // Start for MATLABSystem: '<S113>/MATLAB System1'
    //  Initialize / reset discrete-state properties
    //  untitled Add summary here
    //
    //  This template includes the minimum set of functions required
    //  to define a System object with discrete state.
    //  Public, tunable properties
    //  Pre-computed constants
    //  Fonction appeler a l'initialisation
    //  Perform one-time calculations, such as computing constants
    for (i = 0; i < 160; i++) {
      full_loop_DW.obj_o.poseList[i] = 999.0;
    }

    full_loop_DW.obj_o.poseList[0] = 0.0;
    full_loop_DW.obj_o.poseList[20] = 0.0;
    full_loop_DW.obj_o.poseList[40] = 0.0;
    full_loop_DW.obj_o.poseList[60] = 1.0;
    full_loop_DW.obj_o.poseList[80] = 0.0;
    full_loop_DW.obj_o.poseList[100] = 0.0;
    full_loop_DW.obj_o.poseList[120] = 0.0;
    full_loop_DW.obj_o.poseList[140] = 0.0;

    // initCond(1,1:7);
    full_loop_DW.obj_o.i = 2.0;

    // End of Start for MATLABSystem: '<S113>/MATLAB System1'

    // Start for MATLABSystem: '<S113>/MATLAB System'
    //         %%
    //  Initialize / reset discrete-state properties
    full_loop_DW.obj.linearConvergence = 0.2;
    full_loop_DW.obj.quaternionConvergence = 0.1;
    full_loop_DW.obj.TargetThreshold = 3.0;
    full_loop_DW.obj.isInitialized = 1;
    ful_TrajectoryManager_setupImpl(&full_loop_DW.obj);

    // End of SystemInitialize for SubSystem: '<S8>/SubsystemAuto'

    // SystemInitialize for IfAction SubSystem: '<S6>/Quaternion Non linear MPC' 
    // InitializeConditions for Delay: '<S61>/x_Delay'
    //  Fonction reset
    //  Initialize / reset discrete-state properties
    full_loop_DW.icLoad = 1U;

    // InitializeConditions for Delay: '<S61>/mv_Delay'
    full_loop_DW.icLoad_a = 1U;

    // InitializeConditions for Delay: '<S61>/slack_delay'
    full_loop_DW.icLoad_c = 1U;

    // Start for MATLABSystem: '<S56>/MATLAB System'
    std::memcpy(&full_loop_DW.obj_g.Config10[0],
                &full_loop_ConstP.MATLABSystem_Config10[0], 29U * sizeof(real_T));
    std::memcpy(&full_loop_DW.obj_g.Config19[0],
                &full_loop_ConstP.MATLABSystem_Config19[0], 29U * sizeof(real_T));
    for (i = 0; i < 8; i++) {
      full_loop_DW.obj_g.Tmin[i] = -24.0;
      full_loop_DW.obj_g.Tmax[i] = 29.0;
    }

    std::memcpy(&full_loop_DW.obj_g.MecConst[0],
                &full_loop_ConstP.MATLABSystem_MecConst[0], 41U * sizeof(real_T));
    full_loop_DW.obj_g.isInitialized = 1;

    // End of Start for MATLABSystem: '<S56>/MATLAB System'
    // End of SystemInitialize for SubSystem: '<S6>/Quaternion Non linear MPC'

    // SystemInitialize for IfAction SubSystem: '<S6>/JoyStick OpenLoop'
    // Start for MATLABSystem: '<S55>/MATLAB System'
    //  MPC Manager. Gere les modes et les paramètre du controleur.
    //
    //  This template includes the minimum set of functions required
    //  to define a System object with discrete state.
    //  Public, tunable properties
    //  Configuration Mode 10
    //  Configuration Mode 19
    //  Force min moteur
    //  Force max moteur
    //  Constantes Modèle physique
    //  Pre-computed constants
    //  Perform one-time calculations, such as computing constants
    //  Initialize / reset discrete-state properties
    full_loop_DW.obj_m.isInitialized = 0;
    full_loop_DW.obj_m.k = 20.0;
    std::memcpy(&full_loop_DW.obj_m.binv[0],
                &full_loop_ConstP.MATLABSystem_binv[0], 48U * sizeof(real_T));
    full_loop_DW.obj_m.mass = 33.95;
    full_loop_DW.obj_m.volume = 0.037;
    full_loop_DW.obj_m.height = 0.3;
    std::memcpy(&full_loop_DW.obj_m.I[0], &full_loop_ConstP.MATLABSystem_I[0],
                9U * sizeof(real_T));
    full_loop_DW.obj_m.RG[0] = 0.001;
    full_loop_DW.obj_m.RB[0] = 0.0;
    full_loop_DW.obj_m.RG[1] = 0.002;
    full_loop_DW.obj_m.RB[1] = 0.0;
    full_loop_DW.obj_m.RG[2] = 0.018;
    full_loop_DW.obj_m.RB[2] = -0.1;
    for (i = 0; i < 6; i++) {
      full_loop_DW.obj_m.AddedMass[i] =
        full_loop_ConstP.MATLABSystem_AddedMass[i];
      full_loop_DW.obj_m.CDL[i] = full_loop_ConstP.MATLABSystem_CDL[i];
      full_loop_DW.obj_m.CDQ[i] = full_loop_ConstP.MATLABSystem_CDQ[i];
    }

    full_loop_DW.obj_m.AF[0] = 0.12;
    full_loop_DW.obj_m.AF[1] = 0.22;
    full_loop_DW.obj_m.AF[2] = 0.292;
    full_loop_DW.obj_m.g = 9.81;
    full_loop_DW.obj_m.rho = 998.0;
    full_loop_DW.obj_m.isInitialized = 1;

    // End of Start for MATLABSystem: '<S55>/MATLAB System'
    // End of SystemInitialize for SubSystem: '<S6>/JoyStick OpenLoop'

    // SystemInitialize for Atomic SubSystem: '<S9>/Subscribe1'
    // Start for MATLABSystem: '<S135>/SourceBlock'
    //  Mode manuel Sanchez
    //
    //  This template includes the minimum set of functions required
    //  to define a System object with discrete state.
    //  Public, tunable properties
    //  Gain truster sur directe inverse B
    //  Matrice pseudo inverse thruster
    //  Masse
    //  Volume
    //  Hauteur
    //  Tenseur d'inertie
    //  Centre de masse
    //  Centre de flottaison
    //  Masse ajouté
    //  Constante de drag linéaire
    //  Constante de drag quadratique
    //  Aire de surfaces
    //  constante gravitationel
    //  Masse volumique du fluide
    //  Pre-computed constants
    //  Perform one-time calculations, such as computing constants
    // [M,C,D,Gq] = AUVModelMatrices(in1,in2)
    //  Initialize / reset discrete-state properties
    full_loop_DW.obj_ft.matlabCodegenIsDeleted = false;
    full_loop_DW.obj_ft.isInitialized = 1;
    for (i = 0; i < 18; i++) {
      full_loop_B.cv8[i] = tmp_6[i];
    }

    full_loop_B.cv8[18] = '\x00';
    Sub_full_loop_819.createSubscriber(full_loop_B.cv8, 1);
    full_loop_DW.obj_ft.isSetupComplete = true;

    // End of Start for MATLABSystem: '<S135>/SourceBlock'
    // End of SystemInitialize for SubSystem: '<S9>/Subscribe1'

    // SystemInitialize for Enabled SubSystem: '<Root>/ROS Output'
    // SystemInitialize for Atomic SubSystem: '<S39>/Publish'
    // Start for MATLABSystem: '<S48>/SinkBlock'
    full_loop_DW.obj_f.matlabCodegenIsDeleted = false;
    full_loop_DW.obj_f.isInitialized = 1;
    for (i = 0; i < 23; i++) {
      full_loop_B.cv6[i] = tmp_7[i];
    }

    full_loop_B.cv6[23] = '\x00';
    Pub_full_loop_965.createPublisher(full_loop_B.cv6, 1);
    full_loop_DW.obj_f.isSetupComplete = true;

    // End of Start for MATLABSystem: '<S48>/SinkBlock'
    // End of SystemInitialize for SubSystem: '<S39>/Publish'

    // SystemInitialize for Atomic SubSystem: '<S37>/Publish'
    // Start for MATLABSystem: '<S42>/SinkBlock'
    full_loop_DW.obj_os.matlabCodegenIsDeleted = false;
    full_loop_DW.obj_os.isInitialized = 1;
    for (i = 0; i < 26; i++) {
      full_loop_B.cv5[i] = tmp_8[i];
    }

    full_loop_B.cv5[26] = '\x00';
    Pub_full_loop_945.createPublisher(full_loop_B.cv5, 1);
    full_loop_DW.obj_os.isSetupComplete = true;

    // End of Start for MATLABSystem: '<S42>/SinkBlock'
    // End of SystemInitialize for SubSystem: '<S37>/Publish'

    // SystemInitialize for Atomic SubSystem: '<S38>/Publish'
    // Start for MATLABSystem: '<S45>/SinkBlock'
    full_loop_DW.obj_f5.matlabCodegenIsDeleted = false;
    full_loop_DW.obj_f5.isInitialized = 1;
    for (i = 0; i < 22; i++) {
      full_loop_B.cv7[i] = tmp_9[i];
    }

    full_loop_B.cv7[22] = '\x00';
    Pub_full_loop_951.createPublisher(full_loop_B.cv7, 1);
    full_loop_DW.obj_f5.isSetupComplete = true;

    // End of Start for MATLABSystem: '<S45>/SinkBlock'
    // End of SystemInitialize for SubSystem: '<S38>/Publish'
    // End of SystemInitialize for SubSystem: '<Root>/ROS Output'

    // SystemInitialize for Atomic SubSystem: '<S4>/Publish'
    // Start for MATLABSystem: '<S51>/SinkBlock'
    full_loop_DW.obj_j.matlabCodegenIsDeleted = false;
    full_loop_DW.obj_j.isInitialized = 1;
    for (i = 0; i < 31; i++) {
      full_loop_B.cv3[i] = tmp_a[i];
    }

    full_loop_B.cv3[31] = '\x00';
    Pub_full_loop_783.createPublisher(full_loop_B.cv3, 1);
    full_loop_DW.obj_j.isSetupComplete = true;

    // End of Start for MATLABSystem: '<S51>/SinkBlock'
    // End of SystemInitialize for SubSystem: '<S4>/Publish'

    // SystemInitialize for Triggered SubSystem: '<Root>/Send Target Reached '
    // SystemInitialize for Atomic SubSystem: '<S5>/Publish'
    // Start for MATLABSystem: '<S53>/SinkBlock'
    full_loop_DW.obj_o5.matlabCodegenIsDeleted = false;
    full_loop_DW.obj_o5.isInitialized = 1;
    for (i = 0; i < 34; i++) {
      full_loop_B.cv2[i] = tmp_b[i];
    }

    full_loop_B.cv2[34] = '\x00';
    Pub_full_loop_794.createPublisher(full_loop_B.cv2, 1);
    full_loop_DW.obj_o5.isSetupComplete = true;

    // End of Start for MATLABSystem: '<S53>/SinkBlock'
    // End of SystemInitialize for SubSystem: '<S5>/Publish'
    // End of SystemInitialize for SubSystem: '<Root>/Send Target Reached '

    // Start for MATLABSystem: '<S87>/MATLAB System2'
    //  Cette fonction vérifie et corrige au besoin la discontinuite des angles de rotation. 
    //
    //  Nombre de tours
    //  Dernière de Position
    //  Pre-computed constants
    //  Perform one-time calculations, such as computing constants
    full_loop_DW.obj_l.tcount[0] = 0.0;
    full_loop_DW.obj_l.lastAngle[0] = 0.0;
    full_loop_DW.obj_l.tcount[1] = 0.0;
    full_loop_DW.obj_l.lastAngle[1] = 0.0;
    full_loop_DW.obj_l.tcount[2] = 0.0;
    full_loop_DW.obj_l.lastAngle[2] = 0.0;

    //  Initialize / reset discrete-state properties
  }

  // set "at time zero" to false
  if (rtmIsFirstInitCond((&full_loop_M))) {
    rtmSetFirstInitCond((&full_loop_M), 0);
  }
}

// Model terminate function
void full_loopModelClass::terminate()
{
  char_T *sErr;

  // Terminate for Atomic SubSystem: '<S9>/Subscribe2'
  // Terminate for MATLABSystem: '<S136>/SourceBlock'
  matlabCodegenHandle_matla_p43ri(&full_loop_DW.obj_i);

  // End of Terminate for SubSystem: '<S9>/Subscribe2'

  // Terminate for Atomic SubSystem: '<S9>/Subscribe'
  // Terminate for MATLABSystem: '<S134>/SourceBlock'
  matlabCodegenHandle_matla_p43ri(&full_loop_DW.obj_iv);

  // End of Terminate for SubSystem: '<S9>/Subscribe'

  // Terminate for Atomic SubSystem: '<S112>/Subscribe2'
  // Terminate for MATLABSystem: '<S116>/SourceBlock'
  matlabCodegenHandle_matla_p43ri(&full_loop_DW.obj_l4);

  // End of Terminate for SubSystem: '<S112>/Subscribe2'

  // Terminate for IfAction SubSystem: '<S8>/SubsystemAuto'
  // Terminate for Atomic SubSystem: '<S113>/Subscribe2'
  // Terminate for MATLABSystem: '<S125>/SourceBlock'
  matlabCodegenHandle_matla_p43ri(&full_loop_DW.obj_gw);

  // End of Terminate for SubSystem: '<S113>/Subscribe2'

  // Terminate for Atomic SubSystem: '<S113>/Subscribe'
  // Terminate for MATLABSystem: '<S123>/SourceBlock'
  matlabCodegenHandle_matla_p43ri(&full_loop_DW.obj_b);

  // End of Terminate for SubSystem: '<S113>/Subscribe'

  // Terminate for Atomic SubSystem: '<S113>/Subscribe1'
  // Terminate for MATLABSystem: '<S124>/SourceBlock'
  matlabCodegenHandle_matla_p43ri(&full_loop_DW.obj_mi);

  // End of Terminate for SubSystem: '<S113>/Subscribe1'
  // End of Terminate for SubSystem: '<S8>/SubsystemAuto'

  // Terminate for S-Function (sdspwmmfi2): '<S1>/From Multimedia File'
  sErr = GetErrorBuffer(&full_loop_DW.FromMultimediaFile_HostLib[0U]);
  LibTerminate(&full_loop_DW.FromMultimediaFile_HostLib[0U]);
  if (*sErr != 0) {
    rtmSetErrorStatus((&full_loop_M), sErr);
    rtmSetStopRequested((&full_loop_M), 1);
  }

  LibDestroy(&full_loop_DW.FromMultimediaFile_HostLib[0U], 0);
  DestroyHostLibrary(&full_loop_DW.FromMultimediaFile_HostLib[0U]);

  // End of Terminate for S-Function (sdspwmmfi2): '<S1>/From Multimedia File'

  // Terminate for S-Function (saudioToAudioDevice): '<S1>/Audio Device Writer'
  sErr = GetErrorBuffer(&full_loop_DW.AudioDeviceWriter_AudioDeviceLi[0U]);
  LibTerminate(&full_loop_DW.AudioDeviceWriter_AudioDeviceLi[0U]);
  if (*sErr != 0) {
    rtmSetErrorStatus((&full_loop_M), sErr);
    rtmSetStopRequested((&full_loop_M), 1);
  }

  LibDestroy_Audio(&full_loop_DW.AudioDeviceWriter_AudioDeviceLi[0U], 1, 1);
  DestroyHostLibrary(&full_loop_DW.AudioDeviceWriter_AudioDeviceLi[0U]);

  // End of Terminate for S-Function (saudioToAudioDevice): '<S1>/Audio Device Writer' 

  // Terminate for Atomic SubSystem: '<S9>/Subscribe1'
  // Terminate for MATLABSystem: '<S135>/SourceBlock'
  matlabCodegenHandle_matla_p43ri(&full_loop_DW.obj_ft);

  // End of Terminate for SubSystem: '<S9>/Subscribe1'

  // Terminate for Enabled SubSystem: '<Root>/ROS Output'
  // Terminate for Atomic SubSystem: '<S39>/Publish'
  // Terminate for MATLABSystem: '<S48>/SinkBlock'
  matlabCodegenHandle_matlabCodeg(&full_loop_DW.obj_f);

  // End of Terminate for SubSystem: '<S39>/Publish'

  // Terminate for Atomic SubSystem: '<S37>/Publish'
  // Terminate for MATLABSystem: '<S42>/SinkBlock'
  matlabCodegenHandle_matlabCodeg(&full_loop_DW.obj_os);

  // End of Terminate for SubSystem: '<S37>/Publish'

  // Terminate for Atomic SubSystem: '<S38>/Publish'
  // Terminate for MATLABSystem: '<S45>/SinkBlock'
  matlabCodegenHandle_matlabCodeg(&full_loop_DW.obj_f5);

  // End of Terminate for SubSystem: '<S38>/Publish'
  // End of Terminate for SubSystem: '<Root>/ROS Output'

  // Terminate for Atomic SubSystem: '<S4>/Publish'
  // Terminate for MATLABSystem: '<S51>/SinkBlock'
  matlabCodegenHandle_matlabCodeg(&full_loop_DW.obj_j);

  // End of Terminate for SubSystem: '<S4>/Publish'

  // Terminate for Triggered SubSystem: '<Root>/Send Target Reached '
  // Terminate for Atomic SubSystem: '<S5>/Publish'
  // Terminate for MATLABSystem: '<S53>/SinkBlock'
  matlabCodegenHandle_matlabCodeg(&full_loop_DW.obj_o5);

  // End of Terminate for SubSystem: '<S5>/Publish'
  // End of Terminate for SubSystem: '<Root>/Send Target Reached '
}

// Constructor
full_loopModelClass::full_loopModelClass():
  full_loop_B()
  ,full_loop_DW()
  ,full_loop_X()
  ,full_loop_PrevZCX()
  ,full_loop_M()
{
  // Currently there is no constructor body generated.
}

// Destructor
full_loopModelClass::~full_loopModelClass()
{
  // Currently there is no destructor body generated.
}

// Real-Time Model get method
full_loopModelClass::RT_MODEL_full_loop_T * full_loopModelClass::getRTM()
{
  return (&full_loop_M);
}

//
// File trailer for generated code.
//
// [EOF]
//
