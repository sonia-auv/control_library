//
// Academic License - for use in teaching, academic research, and meeting
// course requirements at degree granting institutions only.  Not for
// government, commercial, or other organizational use.
//
// File: proc_control_node.cpp
//
// Code generated for Simulink model 'proc_control_node'.
//
// Model version                  : 3.48
// Simulink Coder version         : 9.5 (R2021a) 14-Nov-2020
// C/C++ source code generated on : Sat Aug  7 17:14:08 2021
//
// Target selection: ert.tlc
// Embedded hardware selection: Generic->Unspecified (assume 32-bit Generic)
// Code generation objectives: Unspecified
// Validation result: Not run
//
#include "proc_control_node.h"
#include "proc_control_node_private.h"
#include "proc_control_node_dt.h"

// Block signals (default storage)
B_proc_control_node_T proc_control_node_B;

// Continuous states
X_proc_control_node_T proc_control_node_X;

// Block states (default storage)
DW_proc_control_node_T proc_control_node_DW;

// Previous zero-crossings (trigger) states
PrevZCX_proc_control_node_T proc_control_node_PrevZCX;

// Real-time model
RT_MODEL_proc_control_node_T proc_control_node_M_ = RT_MODEL_proc_control_node_T
  ();
RT_MODEL_proc_control_node_T *const proc_control_node_M = &proc_control_node_M_;

// Forward declaration for local functions
static void proc_control_node_quatmultiply(const real_T q[4], const real_T r[4],
  real_T qout[4]);
static void proc_control_n_AddPose_stepImpl(AddPose_proc_control_node_T *b_this,
  boolean_T compute, boolean_T clearBuffer, boolean_T isNew, const real_T
  waypoint[9], const real_T initCond[7], boolean_T reset, real_T waypoints[160],
  real_T *count);
static void proc_control_no_endpointpadding(const creal_T zcurrent_data[], const
  int32_T zcurrent_size[2], const creal_T varargin_1[2], creal_T *zleft, creal_T
  *zright);
static void proc_control_node_diff(const creal_T x_data[], const int32_T x_size
  [2], creal_T y_data[], int32_T y_size[2]);
static real_T proc_control_node_rt_hypotd_snf(real_T u0, real_T u1);
static void proc_control_node_abs(const creal_T x_data[], const int32_T x_size[2],
  real_T y_data[], int32_T y_size[2]);
static void proc_control_node_angle(const creal_T x_data[], const int32_T
  x_size[2], real_T y_data[], int32_T y_size[2]);
static void proc_control_node_midcurve(const creal_T Pb_data[], const int32_T
  Pb_size[2], const creal_T Vbd_data[], const real_T Lab_data[], const int32_T
  Lab_size[2], const real_T Lbd_data[], const int32_T Lbd_size[2], const real_T
  Lde_data[], const int32_T Lde_size[2], const real_T alpha_data[], const real_T
  beta_data[], creal_T Pc_data[], int32_T Pc_size[2]);
static void proc_control_no_insertCodegen_b(const creal_T zorig_data[], real_T m,
  real_T nmax, const creal_T varargin_1[2], creal_T Zout_data[], int32_T
  Zout_size[2]);
static void proc_control_node_optimize_b(const creal_T zcurrent_data[], const
  int32_T zcurrent_size[2], const creal_T zorig_data[], const int32_T
  zorig_size[2], const creal_T varargin_1[2], creal_T Zout_data[], int32_T
  Zout_size[2]);
static void proc_control_node_cloth_b(const creal_T z_data[], const int32_T
  *z_size, const creal_T varargin_1[2], real_T r_data[], int32_T r_size[2],
  real_T s_data[], int32_T s_size[2]);
static void proc_control_nod_packageCodegen(const real_T r_data[], const real_T
  s_data[], real_T n, real_T u_data[], int32_T *u_size, real_T v_data[], int32_T
  *v_size);
static void proc_control_node_dclothoidwp_b(const real_T x_data[], const int32_T
  *x_size, const real_T y_data[], const real_T varargin_1[2], const real_T
  varargin_2[2], real_T u_data[], int32_T *u_size, real_T v_data[], int32_T
  *v_size);
static void proc_control_node_angle_b(const creal_T x_data[], const int32_T
  *x_size, real_T y_data[], int32_T *y_size);
static void proc_control_node_power(const real_T a_data[], const int32_T *a_size,
  real_T y_data[], int32_T *y_size);
static void proc_control_node_repmat(const real_T a_data[], const int32_T
  *a_size, real_T b_data[], int32_T b_size[2]);
static void proc_control_n_useConstantDim_b(const real_T varargin_2_data[],
  const int32_T varargin_2_size[2], real_T varargout_1_data[], int32_T
  varargout_1_size[2]);
static void proc_control_node_fetchAgrad_b(const real_T x_data[], const int32_T *
  x_size, const real_T y_data[], real_T a_data[], int32_T *a_size, real_T
  dadx_data[], int32_T *dadx_size, real_T dady_data[], int32_T *dady_size);
static void proc_control_node_eml_find_b(const boolean_T x_data[], const int32_T
  *x_size, int32_T i_data[], int32_T *i_size);
static creal_T proc_control_node_sqrt(const creal_T x);
static void proc_control_node_abs_b(const real_T x_data[], const int32_T *x_size,
  real_T y_data[], int32_T *y_size);
static void proc_control_node_fresnelr(const real_T x_data[], const int32_T
  *x_size, creal_T z_data[], int32_T *z_size);
static void proc_control_node_fresnel(const creal_T x_data[], const int32_T
  *x_size, creal_T z_data[], int32_T *z_size);
static real_T proc_control_node_rt_powd_snf(real_T u0, real_T u1);
static void proc_control_node_power_b(const creal_T a_data[], const int32_T
  *a_size, creal_T y_data[], int32_T *y_size);
static void proc_control_node_power_b4(const creal_T a_data[], const int32_T
  *a_size, creal_T y_data[], int32_T *y_size);
static void proc_control_no_fresnelgLargea1(const real_T a_data[], const int32_T
  *a_size, const real_T d_data[], const int32_T *d_size, const real_T c_data[],
  const int32_T *c_size, creal_T rsfa_data[], int32_T *rsfa_size, creal_T
  drsfa_data[], int32_T *drsfa_size);
static void proc_control_node_power_b4n(const real_T a_data[], const int32_T
  *a_size, real_T y_data[], int32_T *y_size);
static void proc_control_no_fresnelgSmalla1(const real_T a_data[], const int32_T
  *a_size, const real_T d_data[], const int32_T *d_size, const real_T c_data[],
  const int32_T *c_size, creal_T z_data[], int32_T *z_size, creal_T dz_data[],
  int32_T *dz_size);
static void proc_control_node_fresnelg1_b(const real_T a_data[], const int32_T
  *a_size, const real_T d_data[], const int32_T *d_size, const real_T c_data[],
  creal_T z_data[], int32_T *z_size, creal_T dz_data[], int32_T *dz_size);
static void proc_control_node_abs_b4(const creal_T x_data[], const int32_T
  *x_size, real_T y_data[], int32_T *y_size);
static void proc_control_clothoidG1fit2wp_b(const creal_T z0_data[], const
  real_T theta0_data[], const int32_T *theta0_size, const creal_T z1_data[],
  const int32_T *z1_size, const real_T theta1_data[], const int32_T *theta1_size,
  real_T k0_data[], int32_T *k0_size, real_T k1_data[], int32_T *k1_size, real_T
  l_data[], int32_T *l_size, real_T dk0_dtheta0_data[], int32_T
  *dk0_dtheta0_size, real_T dk0_dtheta1_data[], int32_T *dk0_dtheta1_size,
  real_T dk1_dtheta0_data[], int32_T *dk1_dtheta0_size, real_T dk1_dtheta1_data[],
  int32_T *dk1_dtheta1_size);
static void proc_control_node_anon_b4nwk(const real_T waypoints_data[], const
  int32_T waypoints_size[2], const real_T course_data[], const int32_T
  *course_size, const real_T x_data[], real_T varargout_1_data[], int32_T
  *varargout_1_size, real_T varargout_2_data[], int32_T varargout_2_size[2]);
static void proc_control_node_mulJt_b(const real_T Jtri_data[], const int32_T
  Jtri_size[2], const real_T x_data[], const int32_T *x_size, real_T y_data[],
  int32_T *y_size);
static void proc_control_node_repmat_b(real_T varargin_1, real_T b_data[],
  int32_T *b_size);
static boolean_T proc_control_node_any_b(const boolean_T x_data[], const int32_T
  *x_size);
static void proc_control__sympentdisolve_b4(const real_T d_data[], const real_T
  e_data[], const real_T f_data[], const real_T b_data[], const int32_T b_size[2],
  real_T x_data[], int32_T x_size[2]);
static void proc_control_node_mldivide_b4(const real_T A[16], real_T B[4]);
static void proc_control__cycsympentdisolve(const real_T d_data[], const real_T
  e_data[], const real_T f_data[], const real_T b_data[], const int32_T *b_size,
  real_T x_data[], int32_T *x_size);
static void proc_control_n_sympentdisolve_b(const real_T d_data[], const real_T
  e_data[], const real_T f_data[], const real_T b_data[], const int32_T *b_size,
  real_T x_data[], int32_T *x_size);
static void proc_control_node_accumarray_b(const real_T subs_data[], const
  int32_T subs_size[2], const real_T val_data[], const int32_T *val_size, const
  real_T sz[2], real_T A_data[], int32_T A_size[2]);
static void proc_control_node_diag(const real_T v_data[], const int32_T v_size[2],
  real_T d_data[], int32_T *d_size);
static void proc_control_node_diag_b(const real_T v_data[], const int32_T
  *v_size, real_T d_data[], int32_T d_size[2]);
static void proc_control_node_xswap_b(int32_T n, const real_T x_data[], const
  int32_T x_size[2], int32_T ix0, int32_T iy0, real_T b_x_data[], int32_T
  b_x_size[2]);
static real_T proc_control_node_xnrm2_b4n(int32_T n, const real_T x_data[],
  int32_T ix0);
static void proc_control_node_xzlarfg_b4(int32_T n, real_T alpha1, const real_T
  x_data[], const int32_T x_size[2], int32_T ix0, real_T *b_alpha1, real_T
  b_x_data[], int32_T b_x_size[2], real_T *tau);
static void proc_control_no_xzlarf_b4nwkzrt(int32_T m, int32_T n, int32_T iv0,
  real_T tau, const real_T C_data[], const int32_T C_size[2], int32_T ic0,
  int32_T ldc, real_T work_data[], const int32_T *work_size, real_T b_C_data[],
  int32_T b_C_size[2]);
static void proc_control_node_qrpf_b4(const real_T A_data[], const int32_T
  A_size[2], int32_T m, int32_T n, real_T tau_data[], const int32_T jpvt_data[],
  const int32_T jpvt_size[2], real_T b_A_data[], int32_T b_A_size[2], int32_T
  b_jpvt_data[], int32_T b_jpvt_size[2]);
static void proc_control_node_mldivide_b(const real_T A_data[], const int32_T
  A_size[2], const real_T B_data[], const int32_T *B_size, real_T Y_data[],
  int32_T *Y_size);
static void proc_con_solveDampenedHessian_b(const real_T Jtri_data[], const
  int32_T Jtri_size[2], real_T lambda, const real_T v_data[], const int32_T
  *v_size, real_T dx_data[], int32_T *dx_size);
static void proc_control_node_mulJtJ(const real_T Jtri_data[], const int32_T
  Jtri_size[2], const real_T x_data[], const int32_T *x_size, real_T y_data[],
  int32_T *y_size);
static real_T proc_control_node_norm(const real_T x_data[], const int32_T
  *x_size);
static void proc_control_node_tridisolve(const real_T a_data[], real_T b_data[],
  const real_T c_data[], const real_T d_data[], const int32_T *d_size, real_T
  x_data[], int32_T *x_size);
static void proc_control_no_cyctridisolve_b(const real_T a_data[], real_T
  b_data[], const int32_T *b_size, const real_T c_data[], const real_T d_data[],
  const int32_T *d_size, real_T x_data[], int32_T *x_size);
static void proc_control_nod_solveHessian_b(const real_T Jtri_data[], const
  int32_T Jtri_size[2], const real_T v_data[], const int32_T *v_size, real_T
  dx_data[], int32_T *dx_size);
static void proc_control_node_xzggbal_b(const creal_T A_data[], const int32_T
  A_size[2], creal_T b_A_data[], int32_T b_A_size[2], int32_T *ilo, int32_T *ihi,
  int32_T rscale_data[], int32_T *rscale_size);
static void proc_control_node_xzlartg(const creal_T f, const creal_T g, real_T
  *cs, creal_T *sn, creal_T *r);
static void proc_control_node_xzgghrd_b(int32_T ilo, int32_T ihi, const creal_T
  A_data[], const int32_T A_size[2], creal_T b_A_data[], int32_T b_A_size[2]);
static void proc_control_node_xzlartg_b(const creal_T f, const creal_T g, real_T
  *cs, creal_T *sn);
static void proc_control_node_xzhgeqz_b(const creal_T A_data[], const int32_T
  A_size[2], int32_T ilo, int32_T ihi, int32_T *info, creal_T alpha1_data[],
  int32_T *alpha1_size, creal_T beta1_data[], int32_T *beta1_size);
static void proc_control_node_xzgeev_b(const real_T A_data[], const int32_T
  A_size[2], int32_T *info, creal_T alpha1_data[], int32_T *alpha1_size, creal_T
  beta1_data[], int32_T *beta1_size);
static void proc_control_n_xzlarf_b4nwkzrtq(int32_T m, int32_T n, int32_T iv0,
  real_T tau, const real_T C_data[], const int32_T C_size[2], int32_T ic0,
  int32_T ldc, real_T work_data[], real_T b_C_data[], int32_T b_C_size[2]);
static void proc_control__xzlarf_b4nwkzrtqq(int32_T m, int32_T n, int32_T iv0,
  real_T tau, const real_T C_data[], const int32_T C_size[2], int32_T ic0,
  int32_T ldc, real_T work_data[], real_T b_C_data[], int32_T b_C_size[2]);
static void proc_control_node_xgehrd_b(const real_T a_data[], const int32_T
  a_size[2], real_T b_a_data[], int32_T b_a_size[2]);
static real_T proc_control_node_xnrm2_b4(int32_T n, const real_T x[3]);
static void proc_control_node_xzlarfg_b4n(int32_T n, real_T alpha1, real_T x[3],
  real_T *b_alpha1, real_T *tau);
static void proc_control_node_xdlanv2(real_T a, real_T b, real_T c, real_T d,
  real_T *rt1r, real_T *rt1i, real_T *rt2r, real_T *rt2i, real_T *b_a, real_T
  *b_b, real_T *b_c, real_T *b_d, real_T *cs, real_T *sn);
static void proc_control_node_xrot_b(int32_T n, const real_T x_data[], const
  int32_T x_size[2], int32_T ix0, int32_T iy0, real_T c, real_T s, real_T
  b_x_data[], int32_T b_x_size[2]);
static void proc_control_node_eml_dlahqr_b(const real_T h_data[], const int32_T
  h_size[2], real_T b_h_data[], int32_T b_h_size[2], int32_T *info);
static void proc_control_node_xhseqr_b(const real_T h_data[], const int32_T
  h_size[2], real_T b_h_data[], int32_T b_h_size[2], int32_T *info);
static void proc_control_node_schur_b(real_T A_data[], int32_T A_size[2], real_T
  V_data[], int32_T V_size[2]);
static void proc_contr_eigHermitianStandard(const real_T A_data[], const int32_T
  A_size[2], real_T V_data[], int32_T *V_size);
static void proc_control_node_eig_b(const real_T A_data[], const int32_T A_size
  [2], creal_T V_data[], int32_T *V_size);
static real_T proc_control_nod_leastEigvJtJ_b(const real_T Jtri_data[], const
  int32_T Jtri_size[2], real_T n);
static void proc_control_node_fletcher_b(real_T S, real_T Snew, const real_T
  dx_data[], const int32_T *dx_size, const real_T v_data[], const real_T
  Jtri_data[], const int32_T Jtri_size[2], real_T lambda, real_T lambdac, real_T
  *b_lambda, real_T *b_lambdac);
static void proc_control_LMFsolve_b4nwkzrtq(const real_T
  FUN_workspace_waypoints_data[], const int32_T FUN_workspace_waypoints_size[2],
  const real_T FUN_workspace_course_data[], const int32_T
  *FUN_workspace_course_size, real_T x_data[], const int32_T *x_size);
static void proc_control_node_anon_b4nw(const real_T waypoints_data[], const
  int32_T waypoints_size[2], const real_T course_data[], const int32_T
  *course_size, const real_T x_data[], real_T varargout_1_data[], int32_T
  *varargout_1_size, real_T varargout_2_data[], int32_T varargout_2_size[2]);
static void proc_control__LMFsolve_b4nwkzrt(const real_T
  FUN_workspace_waypoints_data[], const int32_T FUN_workspace_waypoints_size[2],
  const real_T FUN_workspace_course_data[], const int32_T
  *FUN_workspace_course_size, real_T x_data[], const int32_T *x_size);
static void proc_control_node_anon_b4n(const real_T waypoints_data[], const
  int32_T waypoints_size[2], const real_T course_data[], const int32_T
  *course_size, const real_T x_data[], real_T varargout_1_data[], int32_T
  *varargout_1_size, real_T varargout_2_data[], int32_T varargout_2_size[2]);
static void proc_control_n_LMFsolve_b4nwkzr(const real_T
  FUN_workspace_waypoints_data[], const int32_T FUN_workspace_waypoints_size[2],
  const real_T FUN_workspace_course_data[], const int32_T
  *FUN_workspace_course_size, real_T x_data[], const int32_T *x_size);
static void proc_control_node_anon_b4(const real_T waypoints_data[], const
  int32_T waypoints_size[2], const real_T x_data[], real_T varargout_1_data[],
  int32_T *varargout_1_size, real_T varargout_2_data[], int32_T
  varargout_2_size[2]);
static void proc_control_no_LMFsolve_b4nwkz(const real_T
  FUN_workspace_waypoints_data[], const int32_T FUN_workspace_waypoints_size[2],
  real_T x_data[], const int32_T *x_size);
static void proc_control_node_fitCourse_b(const real_T waypoints_data[], const
  int32_T waypoints_size[2], real_T course_data[], int32_T *course_size);
static void proc_control_node_insertCodegen(const creal_T zorig[2561], real_T m,
  creal_T Zout_data[], int32_T Zout_size[2]);
static void proc_control_node_optimize(const creal_T zcurrent_data[], const
  int32_T zcurrent_size[2], const creal_T zorig[21], creal_T Zout_data[],
  int32_T Zout_size[2]);
static void proc_control_node_cloth(const creal_T z[21], real_T r[2561], real_T
  s[2561]);
static void proc_control_node_dclothoidwp(const real_T x[21], const real_T y[21],
  real_T u[2561], real_T v[2561]);
static void proc_control_nod_useConstantDim(const real_T varargin_2[520], real_T
  varargout_1[520]);
static void proc_control_node_fetchAgrad(const real_T x[20], const real_T y[20],
  real_T a[20], real_T dadx[20], real_T dady[20]);
static void proc_control_node_eml_find(const boolean_T x[20], int32_T i_data[],
  int32_T *i_size);
static void proc_control_node_fresnelg1(const real_T a[20], const real_T d[20],
  const real_T c[20], creal_T z[20], creal_T dz[20]);
static void proc_control_n_clothoidG1fit2wp(const creal_T z0[20], const real_T
  theta0[20], const creal_T z1[20], const real_T theta1[20], real_T k0[20],
  real_T k1[20], real_T l[20], real_T dk0_dtheta0[20], real_T dk0_dtheta1[20],
  real_T dk1_dtheta0[20], real_T dk1_dtheta1[20]);
static void proc_control_node_anon_b(const real_T waypoints[63], const real_T x
  [20], real_T varargout_1[20], real_T varargout_2[60]);
static void proc_control_node_mulJt(const real_T Jtri[60], const real_T x[20],
  real_T y[20]);
static void proc_control_nod_sympentdisolve(const real_T d[20], const real_T e
  [20], const real_T f[20], const real_T b[100], real_T x[100]);
static void proc_contr_solveDampenedHessian(const real_T Jtri[60], real_T lambda,
  const real_T v[20], real_T dx[20]);
static void proc_control_n_cyctridisolve_b4(const real_T a[20], real_T b[20],
  const real_T c[20], real_T d[20]);
static void proc_control_no_solveHessian_b4(const real_T Jtri[60], real_T v[20]);
static void proc_control_node_accumarray(const real_T val[58], real_T A[400]);
static void proc_control_node_xzggbal(const creal_T A[400], creal_T b_A[400],
  int32_T *ilo, int32_T *ihi, int32_T rscale[20]);
static void proc_control_node_xzgghrd(int32_T ilo, int32_T ihi, const creal_T A
  [400], creal_T b_A[400]);
static void proc_control_node_xzhgeqz(const creal_T A[400], int32_T ilo, int32_T
  ihi, int32_T *info, creal_T alpha1[20], creal_T beta1[20]);
static void proc_control_node_xzgeev(const real_T A[400], int32_T *info, creal_T
  alpha1[20], creal_T beta1[20]);
static real_T proc_control_node_xnrm2_b(int32_T n, const real_T x[400], int32_T
  ix0);
static void proc_control_node_xzlarf_b4nwkz(int32_T n, int32_T iv0, real_T tau,
  const real_T C[400], int32_T ic0, real_T work[20], real_T b_C[400]);
static void proc_control_nod_xzlarf_b4nwkzr(int32_T m, int32_T n, int32_T iv0,
  real_T tau, const real_T C[400], int32_T ic0, real_T work[20], real_T b_C[400]);
static void proc_control_node_xgehrd(const real_T a[400], real_T b_a[400]);
static void proc_control_node_xrot(int32_T n, const real_T x[400], int32_T ix0,
  int32_T iy0, real_T c, real_T s, real_T b_x[400]);
static void proc_control_node_eml_dlahqr(const real_T h[400], real_T b_h[400],
  int32_T *info);
static void proc_control_node_xhseqr(const real_T h[400], real_T b_h[400],
  int32_T *info);
static void proc_control_node_schur(real_T A[400], real_T V[400]);
static void proc_control_node_eig(const real_T A[400], creal_T V[20]);
static real_T proc_control_node_leastEigvJtJ(const real_T Jtri[60]);
static void proc_control_node_fletcher(real_T S, real_T Snew, const real_T dx[20],
  const real_T v[20], const real_T Jtri[60], real_T lambda, real_T lambdac,
  real_T *b_lambda, real_T *b_lambdac);
static void proc_control_nod_LMFsolve_b4nwk(const real_T
  FUN_workspace_waypoints[63], real_T x[20]);
static void proc_contr_fitPartialCourseLoop(const real_T waypoints[63], real_T
  course[21]);
static void proc_clothoidG2fitMissingCourse(const real_T waypoints[63], real_T
  course[21]);
static void proc_control_node_fetchA(const real_T x[20], const real_T y[20],
  real_T a[20]);
static void proc_control_node_fresnelg1_b4(const real_T a[20], const real_T d[20],
  const real_T c[20], creal_T z[20]);
static void proc_contro_clothoidG1fit2wp_b4(const creal_T z0[20], const real_T
  theta0[20], const creal_T z1[20], const real_T theta1[20], real_T k0[20],
  real_T k1[20], real_T l[20]);
static void proc_control_node_pchip(const real_T x[21], const real_T y[21],
  real_T v_breaks[21], real_T v_coefs[80]);
static void proc_control_node_derivpp(const real_T pp_breaks[21], const real_T
  pp_coefs[80], real_T dpp_breaks[21], real_T dpp_coefs[80]);
static void waypointTrajectory_setupPositio(waypointTrajectory_proc_contr_T *obj);
static void proc_control_n_quaternion_times(const real_T x_a[20], const real_T
  x_b[20], const real_T x_c[20], const real_T x_d[20], const real_T y_a[20],
  const real_T y_b[20], const real_T y_c[20], const real_T y_d[20], real_T o_a
  [20], real_T o_b[20], real_T o_c[20], real_T o_d[20]);
static void proc_cont_quaternionBase_rotvec(const real_T q_a[20], const real_T
  q_b[20], const real_T q_c[20], const real_T q_d[20], real_T rv[60]);
static void proc_control_node_getang(const real_T qi_a[20], const real_T qi_b[20],
  const real_T qi_c[20], const real_T qi_d[20], const real_T qf_a[20], const
  real_T qf_b[20], const real_T qf_c[20], const real_T qf_d[20], real_T dtheta
  [20], real_T e[60]);
static void proc_control_node_bd(const real_T e[3], real_T dtheta, const real_T
  xin[3], real_T xout[3]);
static void proc_control_node_bd_b(const real_T e[3], real_T dtheta, const
  real_T xin[3], real_T xout[3]);
static real_T proc_control_node_xnrm2_b4nw(int32_T n, const real_T x[57],
  int32_T ix0);
static real_T proc_control_node_xnrm2_b4nwk(const real_T x[3], int32_T ix0);
static void proc_control_node_xaxpy(int32_T n, real_T a, const real_T x[19],
  int32_T ix0, const real_T y[57], int32_T iy0, real_T b_y[57]);
static void proc_control_node_xrotg_b(real_T a, real_T b, real_T *b_a, real_T
  *b_b, real_T *c, real_T *s);
static void proc_control_node_svd(const real_T A[57], real_T U[3]);
static void proc_control_node_rates(const real_T wi[3], const real_T wf[3],
  const real_T h[20], const real_T dtheta[20], const real_T e[60], real_T w[63]);
static void proc_control_no_quaternionC2fit(const real_T y_a[21], const real_T
  y_b[21], const real_T y_c[21], const real_T y_d[21], const real_T x[21],
  real_T h[20], real_T dtheta[20], real_T e[60], real_T w[63]);
static void proc_control_node_ppval(const real_T pp_breaks[21], const real_T
  pp_coefs[80], const real_T x[21], real_T v[21]);
static real_T proc_control_node_ppval_b(const real_T pp_breaks[21], const real_T
  pp_coefs[80], real_T x);
static real_T proc_control_node_ppval_b4(const real_T pp_breaks[21], const
  real_T pp_coefs[80], real_T x);
static real_T proc_control__mapElementsToBins(real_T x, const real_T edges[21]);
static void proc_control_node_eml_find_b4(const boolean_T x_data[], const
  int32_T x_size[2], int32_T i_data[], int32_T *i_size);
static void proc_control_node_fresnel_b(const real_T x_data[], const int32_T
  x_size[2], creal_T z_data[], int32_T z_size[2]);
static void proc_control_node_fresnelgsma(const real_T x_data[], const int32_T
  x_size[2], const real_T dk_data[], const int32_T dk_size[2], const real_T
  k_data[], const int32_T k_size[2], const real_T theta_data[], const int32_T
  theta_size[2], creal_T z_data[], int32_T z_size[2]);
static void proc_control_node_bsxfun(const creal_T a_data[], const int32_T
  a_size[2], creal_T c_data[], int32_T c_size[2]);
static void proc_control_node_fresnelgzero(const real_T x_data[], const int32_T
  x_size[2], const real_T dk_data[], const int32_T dk_size[2], const real_T
  k_data[], const int32_T k_size[2], const real_T theta_data[], const int32_T
  theta_size[2], creal_T z_data[], int32_T *z_size);
static creal_T proc_control_node_fresnelg2(real_T x, real_T dk, real_T k, real_T
  theta);
static void proc_control_getPositionalState(const real_T hcd[21], const creal_T
  hip[21], const real_T hl[20], const real_T k0[20], const real_T k1[20], const
  real_T course[21], const real_T hpp_breaks[21], const real_T hpp_coefs[80],
  const real_T hspp_breaks[21], const real_T hspp_coefs[80], const real_T
  happ_breaks[21], const real_T happ_coefs[80], const real_T hjpp_breaks[21],
  const real_T hjpp_coefs[80], creal_T *position, creal_T *velocity, creal_T
  *acceleration, creal_T *jerk);
static void waypointTrajectory_fetchPositio(const
  waypointTrajectory_proc_contr_T *obj, real_T position[3], real_T velocity[3],
  real_T acceleration[3], real_T jerk[3]);
static void proc_waypointTrajectory_setPose(waypointTrajectory_proc_contr_T *obj);
static waypointTrajectory_proc_contr_T *waypointTrajectory_waypointTraj
  (waypointTrajectory_proc_contr_T *obj, const real_T varargin_1[63], const
   real_T varargin_2[21], real_T varargin_4, const real_T varargin_8_a[21],
   const real_T varargin_8_b[21], const real_T varargin_8_c[21], const real_T
   varargin_8_d[21]);
static void proc_contr_getPositionalState_b(const real_T hcd[21], const creal_T
  hip[21], const real_T hl[20], const real_T k0[20], const real_T k1[20], const
  real_T course[21], const real_T hpp_breaks[21], const real_T hpp_coefs[80],
  const real_T hspp_breaks[21], const real_T hspp_coefs[80], const real_T
  happ_breaks[21], const real_T happ_coefs[80], const real_T hjpp_breaks[21],
  const real_T hjpp_coefs[80], real_T t, creal_T *position, creal_T *velocity,
  creal_T *acceleration, creal_T *jerk);
static void waypointTrajectory_fetchPosit_b(const
  waypointTrajectory_proc_contr_T *obj, real_T simulationTime, real_T position[3],
  real_T velocity[3], real_T acceleration[3], real_T jerk[3]);
static void proc_control_node_cross(const real_T a_data[], const int32_T a_size
  [2], const real_T b_data[], real_T c_data[], int32_T c_size[2]);
static void proc_control_node_bsxmul(const real_T x_data[], const int32_T
  *x_size, const real_T y_data[], const int32_T y_size[2], real_T z_data[],
  int32_T z_size[2]);
static void proc_control_node_bsxmul_b(const real_T x_data[], const int32_T
  x_size[2], const real_T y_data[], const int32_T y_size[2], real_T z_data[],
  int32_T z_size[2]);
static void proc_control_node_slew3_init(real_T dt, real_T dtheta, const real_T
  e[3], const real_T wi[3], const real_T wf[3], real_T aa[9], real_T bb[9],
  real_T cc[6], real_T dd[3]);
static void proc_control_node_bsxdiv(const real_T x_data[], const int32_T
  x_size[2], const real_T y_data[], const int32_T y_size[2], real_T z_data[],
  int32_T z_size[2]);
static void proc_control_node_sum(const real_T x_data[], const int32_T x_size[2],
  real_T y_data[], int32_T *y_size);
static void proc_control_node_angDeriv(const real_T ang_data[], const int32_T
  ang_size[2], const real_T th1_data[], const int32_T th1_size[2], const real_T
  th2_data[], const real_T th3_data[], const real_T u_data[], const int32_T
  u_size[2], real_T angVel_data[], int32_T angVel_size[2], real_T angAcc_data[],
  int32_T angAcc_size[2], real_T angJerk_data[], int32_T angJerk_size[2]);
static void proc_control_node_slew3(real_T t, real_T dt, real_T qi_a, real_T
  qi_b, real_T qi_c, real_T qi_d, const real_T a[9], const real_T b[9], const
  real_T c[6], const real_T d[3], real_T *q_a, real_T *q_b, real_T *q_c, real_T *
  q_d, real_T angVel[3], real_T angAcc[3], real_T angJerk[3]);
static void proc_cont_quaternionBase_rotmat(real_T q_a, real_T q_b, real_T q_c,
  real_T q_d, real_T r[9]);
static void proc_contr_SystemCore_step_b4nw(waypointTrajectory_proc_contr_T *obj,
  real_T varargout_1[3], real_T *varargout_2_a, real_T *varargout_2_b, real_T
  *varargout_2_c, real_T *varargout_2_d, real_T varargout_3[3], real_T
  varargout_4[3], real_T varargout_5[3]);
static void pr_TrajectoryGenerator_stepImpl(TrajectoryGenerator_proc_cont_T
  *b_this, const real_T wpts[160], real_T wpt_count, real_T pose[13000], real_T
  b_new[2]);
static void proc_contro_SystemCore_step_b4n(TrajectoryGenerator_proc_cont_T *obj,
  const real_T varargin_1[160], real_T varargin_2, real_T varargout_1[13000],
  real_T varargout_2[2]);
static void proc_contr_quaternionBase_slerp(real_T q1_a, real_T q1_b, real_T
  q1_c, real_T q1_d, real_T q2_a, real_T q2_b, real_T q2_c, real_T q2_d, real_T
  t, real_T *qo_a, real_T *qo_b, real_T *qo_c, real_T *qo_d);
static void proc_control_quaternionBase_log(real_T q_a, real_T q_b, real_T q_c,
  real_T q_d, real_T *b_q_a, real_T *b_q_b, real_T *b_q_c, real_T *b_q_d);
static void proc_cont_SystemCore_step_b4nwk(robotics_slcore_internal_bl_b_T *obj,
  real_T varargin_1, const real_T varargin_2[4], const real_T varargin_3[4],
  const real_T varargin_4[2], real_T varargout_1[4], real_T varargout_2[3],
  real_T varargout_3[3]);
static void proc_control_node_ppval_b4n(const real_T pp_breaks[4], const real_T
  pp_coefs[36], const real_T x[2], real_T v[6]);
static void proc_control_node_cubicpolytraj(const real_T wayPoints[6], const
  real_T timePoints[2], const real_T t[2], const real_T varargin_2[6], real_T q
  [6], real_T qd[6], real_T qdd[6], real_T pp_breaks[4], real_T pp_coefs[36]);
static void proc_control_node_ppval_b4nw(const real_T pp_breaks[4], const real_T
  pp_coefs[36], real_T x, real_T v[3]);
static void TrajectoryManager_SendCurrentPo(TrajectoryManager_proc_contro_T
  *b_this, real_T currPose[52]);
static real_T proc_control_node_norm_b(const real_T x[3]);
static boolean_T proc_control_node_isequal_b(const real_T varargin_1[29], const
  real_T varargin_2[29]);
static boolean_T proc_control_node_isequal_b4(const real_T varargin_1[8], const
  real_T varargin_2[8]);
static void proc_contro_znlmpc_setDecisions(const real_T X[52], const real_T
  Umv[32], real_T e, real_T z[69]);
static void proc_co_structConstructorHelper(const real_T varargin_2[13], const
  real_T varargin_4[8], const real_T varargin_6[52], const real_T varargin_10[52],
  const real_T varargin_12[32], const real_T varargin_14[32], const real_T
  varargin_18[52], const real_T varargin_20[52], const real_T varargin_22[52],
  const real_T varargin_24[52], const real_T varargin_26[32], const real_T
  varargin_28[32], const real_T varargin_30[32], const real_T varargin_32[32],
  const real_T varargin_34[32], s_REWc8VgrfSKVLBFK433XbH_proc_T *s);
static void proc_znlmpc_generateRuntimeData(const real_T x[13], const real_T
  lastMV[8], const real_T ref0[52], const real_T OutputWeights0[13], const
  real_T MVWeights0[8], const real_T MVRateWeights0[8], const real_T MVMin0[8],
  const real_T MVMax0[8], const real_T X0[13], const real_T MV0[8], real_T
  Slack0, s_REWc8VgrfSKVLBFK433XbH_proc_T *runtimedata,
  sACkMJ1zT2VJOHR6eMwwEPC_proc__T *userdata, real_T z0[69]);
static void proc_control__znlmpc_getZBounds(const
  s_REWc8VgrfSKVLBFK433XbH_proc_T *runtimedata, real_T zLB[69], real_T zUB[69]);
static void proc_control_node_isfinite(const real_T x[8], boolean_T b[8]);
static void proc_control_node_mtimes(const real_T A_data[], const int32_T
  A_size[2], real_T C_data[], int32_T C_size[2]);
static void proc_control__znlmpc_getUBounds(const
  s_REWc8VgrfSKVLBFK433XbH_proc_T *runtimedata, real_T A_data[], int32_T A_size
  [2], real_T Bu_data[], int32_T *Bu_size);
static void proc_contro_znlmpc_getDecisions(const real_T z[69], real_T X[52],
  real_T Umv[32], real_T *e);
static void proc_control_node_znlmpc_getXUe(const real_T z[69], const real_T x
  [13], real_T X[65], real_T U[40], real_T *e);
static void proc_cont_AUVQuatJacobianMatrix(const real_T in1[13], real_T Anqv
  [169]);
static void proc_control_node_AUVQuatSimFcn(const real_T in1[13], const real_T
  in2[8], real_T out1[13]);
static void proc_control_nod_stateEvolution(const real_T X[65], const real_T U
  [40], real_T c[52], real_T J[3588]);
static void proc_control_node_all(const boolean_T x[52], boolean_T y[13]);
static void proc_control_node_isfinite_m(const real_T x[13], boolean_T b[13]);
static boolean_T proc_control_node_any(const boolean_T x[26]);
static void proc_cont_znlmpc_reformJacobian(const real_T Jx_data[], const
  int32_T Jx_size[3], const real_T Jmv_data[], const real_T Je_data[], const
  int32_T *Je_size, real_T Jc_data[], int32_T Jc_size[2]);
static void proc_control_node_outputBounds(const real_T runtimedata_OutputMin[52],
  const real_T runtimedata_OutputMax[52], const real_T X[65], real_T e, real_T
  c_data[], int32_T c_size[2], real_T Jc_data[], int32_T Jc_size[2]);
static void proc_control_node_anon(const real_T runtimedata_x[13], const real_T
  runtimedata_OutputMin[52], const real_T runtimedata_OutputMax[52], const
  real_T z[69], real_T varargout_1_data[], int32_T varargout_1_size[2], real_T
  varargout_2[52], real_T varargout_3_data[], int32_T varargout_3_size[2],
  real_T varargout_4[3588]);
static void proc_control_n_factoryConstruct(int32_T nVarMax, int32_T mConstrMax,
  int32_T mIneq, int32_T mNonlinIneq, s_YLC2gJhPBjEs8VvOTvcE4B_proc_T *obj);
static void proc_cont_factoryConstruct_cntp(int32_T MaxVars, int32_T
  *obj_grad_size, int32_T *obj_Hx_size, boolean_T *obj_hasLinear, int32_T
  *obj_nvar, int32_T *obj_maxVar, real_T *obj_beta, real_T *obj_rho, int32_T
  *obj_objtype, int32_T *obj_prev_objtype, int32_T *obj_prev_nvar, boolean_T
  *obj_prev_hasLinear, real_T *obj_gammaScalar);
static void proc_con_factoryConstruct_cntp2(int32_T mIneqMax, int32_T nVarMax,
  int32_T mConstrMax, s_MFLHEgKtV7gODWBOEr7maD_proc_T *obj);
static void proc_control_node_loadProblem(s_MFLHEgKtV7gODWBOEr7maD_proc_T *obj,
  int32_T mIneq, int32_T mLinIneq, const real_T Aineq_data[], int32_T mLB,
  int32_T mUB, int32_T mFixed, int32_T mConstrMax);
static void proc_control_quadraticObjective(const real_T runtimedata_lastMV[8],
  const real_T runtimedata_ref[52], const real_T runtimedata_OutputWeights[52],
  const real_T runtimedata_MVWeights[32], const real_T
  runtimedata_MVRateWeights[32], const real_T runtimedata_MVScaledTarget[32],
  const real_T X[65], const real_T U[40], real_T e, real_T *f, real_T gfx[52],
  real_T gfu[32], real_T *gfe);
static void proc_control_node_anon_e(const real_T runtimedata_x[13], const
  real_T runtimedata_lastMV[8], const real_T runtimedata_ref[52], const real_T
  runtimedata_OutputWeights[52], const real_T runtimedata_MVWeights[32], const
  real_T runtimedata_MVRateWeights[32], const real_T runtimedata_MVScaledTarget
  [32], const real_T z[69], real_T *varargout_1, real_T varargout_2[69]);
static int32_T proc_contr_checkVectorNonFinite(int32_T N, const real_T vec_data[],
  int32_T iv0);
static void computeObjectiveAndUserGradient(const real_T
  obj_objfun_workspace_runtimedat[13], const real_T
  obj_objfun_workspace_runtimed_0[8], const real_T
  obj_objfun_workspace_runtimed_1[52], const real_T
  obj_objfun_workspace_runtimed_2[52], const real_T
  obj_objfun_workspace_runtimed_3[32], const real_T
  obj_objfun_workspace_runtimed_4[32], const real_T
  obj_objfun_workspace_runtimed_5[32], const real_T x[69], real_T
  grad_workspace_data[], real_T *fval, int32_T *status);
static int32_T proc_con_checkVectorNonFinite_e(const real_T vec[52]);
static int32_T proc_contr_checkMatrixNonFinite(int32_T ncols, const real_T
  mat_data[], int32_T col0, int32_T ldm);
static int32_T computeConstraintsAndUserJacobi(const real_T
  obj_nonlcon_workspace_runtimeda[13], const real_T
  obj_nonlcon_workspace_runtime_0[52], const real_T
  obj_nonlcon_workspace_runtime_1[52], int32_T obj_mCineq, const real_T x[69],
  real_T Cineq_workspace_data[], int32_T ineq0, real_T Ceq_workspace[52], real_T
  JacIneqTrans_workspace_data[], int32_T iJI_col, int32_T ldJI, real_T
  JacEqTrans_workspace_data[], int32_T ldJE);
static void evalObjAndConstrAndDerivatives(const real_T
  obj_objfun_workspace_runtimedat[13], const real_T
  obj_objfun_workspace_runtimed_0[8], const real_T
  obj_objfun_workspace_runtimed_1[52], const real_T
  obj_objfun_workspace_runtimed_2[52], const real_T
  obj_objfun_workspace_runtimed_3[32], const real_T
  obj_objfun_workspace_runtimed_4[32], const real_T
  obj_objfun_workspace_runtimed_5[32], const real_T
  obj_nonlcon_workspace_runtimeda[13], const real_T
  obj_nonlcon_workspace_runtime_0[52], const real_T
  obj_nonlcon_workspace_runtime_1[52], int32_T obj_mCineq, const real_T x[69],
  real_T grad_workspace_data[], real_T Cineq_workspace_data[], int32_T ineq0,
  real_T Ceq_workspace[52], real_T JacIneqTrans_workspace_data[], int32_T
  iJI_col, int32_T ldJI, real_T JacEqTrans_workspace_data[], int32_T ldJE,
  real_T *fval, int32_T *status);
static void proc_c_updateWorkingSetForNewQP(const real_T xk[69],
  s_MFLHEgKtV7gODWBOEr7maD_proc_T *WorkingSet, int32_T mIneq, const real_T
  cIneq_data[], const real_T cEq[52], int32_T mLB, const real_T lb[69], int32_T
  mUB, int32_T mFixed);
static void proc_co_modifyOverheadPhaseOne_(s_MFLHEgKtV7gODWBOEr7maD_proc_T *obj);
static void proc_control_nod_setProblemType(s_MFLHEgKtV7gODWBOEr7maD_proc_T *obj,
  int32_T PROBLEM_TYPE);
static void proc_control_node_initActiveSet(s_MFLHEgKtV7gODWBOEr7maD_proc_T *obj);
static void proc_contro_factoryConstruct_cn(int32_T maxRows, int32_T maxCols,
  int32_T *obj_ldq, int32_T obj_QR_size[2], real_T obj_Q_data[], int32_T
  obj_Q_size[2], int32_T obj_jpvt_data[], int32_T *obj_jpvt_size, int32_T
  *obj_mrows, int32_T *obj_ncols, int32_T *obj_tau_size, int32_T *obj_minRowCol,
  boolean_T *obj_usedPivoting);
static void proc_contr_factoryConstruct_cnt(int32_T MaxDims, int32_T
  obj_FMat_size[2], int32_T *obj_ldm, int32_T *obj_ndims, int32_T *obj_info,
  real_T *obj_scaleFactor, boolean_T *obj_ConvexCheck, real_T *obj_regTol_,
  real_T *obj_workspace_, real_T *obj_workspace2_);
static void proc_control_node_xgemv(int32_T m, int32_T n, const real_T A_data[],
  int32_T lda, const real_T x_data[], int32_T ix0, real_T y_data[]);
static void proc_control_nod_computeGradLag(real_T workspace_data[], int32_T ldA,
  int32_T nVar, const real_T grad_data[], int32_T mIneq, const real_T
  AineqTrans_data[], const real_T AeqTrans_data[], const int32_T
  finiteFixed_data[], int32_T mFixed, const int32_T finiteLB_data[], int32_T mLB,
  const int32_T finiteUB_data[], int32_T mUB, const real_T lambda_data[]);
static real_T proc_con_computePrimalFeasError(const real_T x[69], int32_T
  mLinIneq, int32_T mNonlinIneq, const real_T cIneq_data[], const real_T cEq[52],
  const int32_T finiteLB_data[], int32_T mLB, const real_T lb[69], const int32_T
  finiteUB_data[], int32_T mUB);
static void proc_contr_computeDualFeasError(int32_T nVar, const real_T
  gradLag_data[], boolean_T *gradOK, real_T *val);
static void proc_control_node_saveJacobian(s_YLC2gJhPBjEs8VvOTvcE4B_proc_T *obj,
  int32_T nVar, int32_T mIneq, const real_T JacCineqTrans_data[], int32_T
  ineqCol0, const real_T JacCeqTrans_data[], int32_T ldJ);
static void proc_control_node_saveState(s_YLC2gJhPBjEs8VvOTvcE4B_proc_T *obj);
static real_T proc_control__computeComplError(const int32_T
  *fscales_lineq_constraint_size, const int32_T *fscales_cineq_constraint_size,
  const real_T xCurrent[69], int32_T mIneq, const real_T cIneq_data[], const
  int32_T finiteLB_data[], int32_T mLB, const real_T lb[69], const int32_T
  finiteUB_data[], int32_T mUB, const real_T lambda_data[], int32_T iL0);
static void proc_control_node_xgemv_j(int32_T m, int32_T n, const real_T A_data[],
  int32_T lda, const real_T x_data[], int32_T ix0, real_T y_data[]);
static void proc_control_n_computeGradLag_a(real_T workspace_data[], int32_T ldA,
  int32_T nVar, const real_T grad_data[], int32_T mIneq, const real_T
  AineqTrans_data[], const real_T AeqTrans_data[], const int32_T
  finiteFixed_data[], int32_T mFixed, const int32_T finiteLB_data[], int32_T mLB,
  const int32_T finiteUB_data[], int32_T mUB, const real_T lambda_data[]);
static void proc_con_computeDualFeasError_m(int32_T nVar, const real_T
  gradLag_data[], boolean_T *gradOK, real_T *val);
static void proc_updateWorkingSetForNewQP_h(const real_T xk[69],
  s_MFLHEgKtV7gODWBOEr7maD_proc_T *WorkingSet, int32_T mIneq, int32_T
  mNonlinIneq, const real_T cIneq_data[], const real_T cEq[52], int32_T mLB,
  const real_T lb[69], int32_T mUB, int32_T mFixed);
static real_T proc_control_node_xnrm2(int32_T n, const real_T x_data[], int32_T
  ix0);
static real_T proc_control_node_xzlarfg(int32_T n, real_T *alpha1, real_T
  x_data[], int32_T ix0);
static void proc_control_node_xgemv_jh(int32_T m, int32_T n, const real_T
  A_data[], int32_T ia0, int32_T lda, const real_T x_data[], int32_T ix0, real_T
  y_data[]);
static void proc_control_node_xgerc(int32_T m, int32_T n, real_T alpha1, int32_T
  ix0, const real_T y_data[], real_T A_data[], int32_T ia0, int32_T lda);
static void proc_control_node_xzlarf(int32_T m, int32_T n, int32_T iv0, real_T
  tau, real_T C_data[], int32_T ic0, int32_T ldc, real_T work_data[]);
static void proc_control_node_qrf(real_T A_data[], const int32_T A_size[2],
  int32_T m, int32_T n, int32_T nfxd, real_T tau_data[]);
static void proc_control_node_xswap(int32_T n, real_T x_data[], int32_T ix0,
  int32_T iy0);
static void proc_control_node_qrpf(real_T A_data[], const int32_T A_size[2],
  int32_T m, int32_T n, int32_T nfxd, real_T tau_data[], int32_T jpvt_data[]);
static void proc_control_node_xgeqp3(real_T A_data[], const int32_T A_size[2],
  int32_T m, int32_T n, int32_T jpvt_data[], real_T tau_data[], int32_T
  *tau_size);
static void proc_control_node_factorQRE(s_1UhBFHxHKUXshhZtLgMUHE_proc_T *obj,
  const real_T A_data[], int32_T mrows, int32_T ncols, int32_T ldA);
static void proc_control_node_xorgqr(int32_T m, int32_T n, int32_T k, real_T
  A_data[], const int32_T A_size[2], int32_T lda, const real_T tau_data[]);
static void proc_control_node_computeQ_(s_1UhBFHxHKUXshhZtLgMUHE_proc_T *obj,
  int32_T nrows);
static void proc_control_node_xgemv_jhg(int32_T m, int32_T n, const real_T
  A_data[], int32_T lda, const real_T x_data[], real_T y_data[]);
static void proc_control_node_xtrsv(int32_T n, const real_T A_data[], int32_T
  lda, real_T x_data[]);
static void proc_control_node_sortLambdaQP(real_T lambda_data[], int32_T
  WorkingSet_nActiveConstr, const int32_T WorkingSet_sizes[5], const int32_T
  WorkingSet_isActiveIdx[6], const int32_T WorkingSet_Wid_data[], const int32_T
  WorkingSet_Wlocalidx_data[], real_T workspace_data[]);
static int32_T proc_control_node_ixamax(int32_T n, const real_T x_data[]);
static void proc_control_node_test_exit(s7RdrPWkr8UPAUyTdDJkLaG_proc__T *Flags,
  s_JXDNdI64oJvyHGrBwTBHI_proc__T *memspace, sG8JZ69axY52WWR6RKyApQC_proc__T
  *MeritFunction, const int32_T *fscales_lineq_constraint_size, const int32_T
  *fscales_cineq_constraint_size, s_MFLHEgKtV7gODWBOEr7maD_proc_T *WorkingSet,
  s_YLC2gJhPBjEs8VvOTvcE4B_proc_T *TrialState, s_1UhBFHxHKUXshhZtLgMUHE_proc_T
  *QRManager, const real_T lb[69]);
static void proc_control_xgemv_jhgj1v0ny5es(int32_T m, int32_T n, const real_T
  A_data[], int32_T ia0, int32_T lda, const real_T x_data[], int32_T ix0, real_T
  y_data[]);
static boolean_T proc_control_node_BFGSUpdate(int32_T nvar, real_T Bk[4761],
  const real_T sk_data[], real_T yk_data[], real_T workspace_data[]);
static void proc_control_node_factorQRE_n(s_1UhBFHxHKUXshhZtLgMUHE_proc_T *obj,
  int32_T mrows, int32_T ncols);
static void proc_control_node_countsort(int32_T x_data[], int32_T xLen, int32_T
  workspace_data[], int32_T xMin, int32_T xMax);
static void proc_control_node_removeConstr(s_MFLHEgKtV7gODWBOEr7maD_proc_T *obj,
  int32_T idx_global);
static int32_T proc_control_RemoveDependentEq_(s_JXDNdI64oJvyHGrBwTBHI_proc__T
  *memspace, s_MFLHEgKtV7gODWBOEr7maD_proc_T *workingset,
  s_1UhBFHxHKUXshhZtLgMUHE_proc_T *qrmanager);
static void proc_contro_removeAllIneqConstr(s_MFLHEgKtV7gODWBOEr7maD_proc_T *obj);
static void proc_contr_RemoveDependentIneq_(s_MFLHEgKtV7gODWBOEr7maD_proc_T
  *workingset, s_1UhBFHxHKUXshhZtLgMUHE_proc_T *qrmanager,
  s_JXDNdI64oJvyHGrBwTBHI_proc__T *memspace);
static void proc_control_node_xgeqrf(real_T A_data[], const int32_T A_size[2],
  int32_T m, int32_T n, real_T tau_data[], int32_T *tau_size);
static void proc_control_node_factorQR_i(s_1UhBFHxHKUXshhZtLgMUHE_proc_T *obj,
  const real_T A_data[], int32_T mrows, int32_T ncols, int32_T ldA);
static void proc_control_node_factorQR(s_1UhBFHxHKUXshhZtLgMUHE_proc_T *obj,
  int32_T mrows, int32_T ncols);
static void proc_control_node_xgemv_jhgj1(int32_T m, int32_T n, const real_T
  A_data[], int32_T lda, const real_T x_data[], real_T y_data[]);
static void proc_control_node_xgemv_jhgj(int32_T n, const real_T A_data[],
  int32_T lda, const real_T x_data[], real_T y_data[]);
static real_T proc_con_maxConstraintViolation(s_MFLHEgKtV7gODWBOEr7maD_proc_T
  *obj, const real_T x_data[]);
static void proc_control_node_xgemv_jhgj1v(int32_T m, int32_T n, const real_T
  A_data[], int32_T lda, const real_T x_data[], int32_T ix0, real_T y_data[]);
static real_T proc_c_maxConstraintViolation_a(s_MFLHEgKtV7gODWBOEr7maD_proc_T
  *obj, const real_T x_data[], int32_T ix0);
static boolean_T proc_co_feasibleX0ForWorkingSet(real_T workspace_data[], const
  int32_T workspace_size[2], real_T xCurrent_data[],
  s_MFLHEgKtV7gODWBOEr7maD_proc_T *workingset, s_1UhBFHxHKUXshhZtLgMUHE_proc_T
  *qrmanager);
static void proc_con_RemoveDependentIneq__d(s_MFLHEgKtV7gODWBOEr7maD_proc_T
  *workingset, s_1UhBFHxHKUXshhZtLgMUHE_proc_T *qrmanager,
  s_JXDNdI64oJvyHGrBwTBHI_proc__T *memspace);
static void proc_control_nod_xgemv_jhgj1v0n(int32_T m, int32_T n, const real_T
  A_data[], int32_T lda, const real_T x_data[], real_T y_data[]);
static void proc_control_node_xgemv_jhgj1v0(int32_T n, const real_T A_data[],
  int32_T lda, const real_T x_data[], real_T y_data[]);
static real_T proc__maxConstraintViolation_ae(s_MFLHEgKtV7gODWBOEr7maD_proc_T
  *obj, const real_T x_data[]);
static void proc_control_PresolveWorkingSet(s_YLC2gJhPBjEs8VvOTvcE4B_proc_T
  *solution, s_JXDNdI64oJvyHGrBwTBHI_proc__T *memspace,
  s_MFLHEgKtV7gODWBOEr7maD_proc_T *workingset, s_1UhBFHxHKUXshhZtLgMUHE_proc_T
  *qrmanager);
static void proc_control_no_xgemv_jhgj1v0ny(int32_T m, int32_T n, const real_T
  A[4761], int32_T lda, const real_T x_data[], real_T y_data[]);
static void proc_contro_computeGrad_StoreHx(s_jPVC6k54fKlkrevS6u11qC_proc_T *obj,
  const real_T H[4761], const real_T f_data[], const real_T x_data[]);
static real_T proc_contro_computeFval_ReuseHx(const
  s_jPVC6k54fKlkrevS6u11qC_proc_T *obj, real_T workspace_data[], const real_T
  f_data[], const real_T x_data[]);
static void proc_control_node_xrotg(real_T *a, real_T *b, real_T *c, real_T *s);
static void proc_control_n_deleteColMoveEnd(s_1UhBFHxHKUXshhZtLgMUHE_proc_T *obj,
  int32_T idx);
static boolean_T proc_control_node_strcmp(const char_T a[7]);
static void proc_control_node_xgemm(int32_T m, int32_T n, int32_T k, const
  real_T A[4761], int32_T lda, const real_T B_data[], int32_T ib0, int32_T ldb,
  real_T C_data[], int32_T ldc);
static void proc_control_node_xgemm_g(int32_T m, int32_T n, int32_T k, const
  real_T A_data[], int32_T ia0, int32_T lda, const real_T B_data[], int32_T ldb,
  real_T C_data[], int32_T ldc);
static int32_T proc_control_node_ixamax_l(int32_T n, const real_T x_data[],
  int32_T incx);
static void proc_control_node_fullColLDL2_(s_B2KneB7ks2RV0bvoJc0bxC_proc_T *obj,
  int32_T LD_offset, int32_T NColsRemain);
static void proc_control_no_partialColLDL3_(s_B2KneB7ks2RV0bvoJc0bxC_proc_T *obj,
  int32_T LD_offset, int32_T NColsRemain);
static int32_T proc_control_node_xpotrf(int32_T n, real_T A_data[], int32_T lda);
static void proc_control_n_xgemv_jhgj1v0ny5(int32_T m, int32_T n, const real_T
  A_data[], int32_T ia0, int32_T lda, const real_T x_data[], real_T y_data[]);
static void proc_control_node_factor(s_B2KneB7ks2RV0bvoJc0bxC_proc_T *obj, const
  real_T A[4761], int32_T ndims, int32_T ldA);
static void proc_control_node_solve(const s_B2KneB7ks2RV0bvoJc0bxC_proc_T *obj,
  real_T rhs_data[]);
static void proc_control_node_factor_a(s_B2KneB7ks2RV0bvoJc0bxC_proc_T *obj,
  const real_T A[4761], int32_T ndims, int32_T ldA);
static void proc_control_node_solve_k(const s_B2KneB7ks2RV0bvoJc0bxC_proc_T *obj,
  real_T rhs_data[]);
static void proc_control_nod_compute_deltax(const real_T H[4761],
  s_YLC2gJhPBjEs8VvOTvcE4B_proc_T *solution, s_JXDNdI64oJvyHGrBwTBHI_proc__T
  *memspace, const s_1UhBFHxHKUXshhZtLgMUHE_proc_T *qrmanager,
  s_B2KneB7ks2RV0bvoJc0bxC_proc_T *cholmanager, const
  s_jPVC6k54fKlkrevS6u11qC_proc_T *objective, boolean_T alwaysPositiveDef);
static real_T proc_control_node_xnrm2_n(int32_T n, const real_T x_data[]);
static void proc_control__xgemv_jhgj1v0ny5e(int32_T m, int32_T n, const real_T
  A_data[], int32_T lda, const real_T x_data[], real_T y_data[]);
static void proc_control__feasibleratiotest(const real_T solution_xstar_data[],
  const real_T solution_searchDir_data[], real_T workspace_data[], const int32_T
  workspace_size[2], int32_T workingset_nVar, int32_T workingset_ldA, const
  real_T workingset_Aineq_data[], const real_T workingset_bineq_data[], const
  real_T workingset_lb_data[], const int32_T workingset_indexLB_data[], const
  int32_T workingset_sizes[5], const int32_T workingset_isActiveIdx[6], const
  boolean_T workingset_isActiveConstr_data[], const int32_T workingset_nWConstr
  [5], boolean_T isPhaseOne, real_T *alpha, boolean_T *newBlocking, int32_T
  *constrType, int32_T *constrIdx);
static void proc_c_checkUnboundedOrIllPosed(s_YLC2gJhPBjEs8VvOTvcE4B_proc_T
  *solution, const s_jPVC6k54fKlkrevS6u11qC_proc_T *objective);
static void proc_addBoundToActiveSetMatrix_(s_MFLHEgKtV7gODWBOEr7maD_proc_T *obj,
  int32_T TYPE, int32_T idx_local);
static void proc_control_nod_addAineqConstr(s_MFLHEgKtV7gODWBOEr7maD_proc_T *obj,
  int32_T idx_local);
static void proc_checkStoppingAndUpdateFval(int32_T *activeSetChangeID, const
  real_T f_data[], s_YLC2gJhPBjEs8VvOTvcE4B_proc_T *solution,
  s_JXDNdI64oJvyHGrBwTBHI_proc__T *memspace, const
  s_jPVC6k54fKlkrevS6u11qC_proc_T *objective, s_MFLHEgKtV7gODWBOEr7maD_proc_T
  *workingset, s_1UhBFHxHKUXshhZtLgMUHE_proc_T *qrmanager, real_T
  options_ObjectiveLimit, int32_T runTimeOptions_MaxIterations, boolean_T
  updateFval);
static void proc_control_node_iterate(const real_T H[4761], const real_T f_data[],
  s_YLC2gJhPBjEs8VvOTvcE4B_proc_T *solution, s_JXDNdI64oJvyHGrBwTBHI_proc__T
  *memspace, s_MFLHEgKtV7gODWBOEr7maD_proc_T *workingset,
  s_1UhBFHxHKUXshhZtLgMUHE_proc_T *qrmanager, s_B2KneB7ks2RV0bvoJc0bxC_proc_T
  *cholmanager, s_jPVC6k54fKlkrevS6u11qC_proc_T *objective, const char_T
  options_SolverName[7], real_T options_StepTolerance, real_T
  options_ObjectiveLimit, int32_T runTimeOptions_MaxIterations);
static void proc_control_node_linearForm_(boolean_T obj_hasLinear, int32_T
  obj_nvar, real_T workspace_data[], const real_T H[4761], const real_T f_data[],
  const real_T x_data[]);
static real_T proc_control_node_computeFval(const
  s_jPVC6k54fKlkrevS6u11qC_proc_T *obj, real_T workspace_data[], const real_T H
  [4761], const real_T f_data[], const real_T x_data[]);
static void proc_control_node_phaseone(const real_T H[4761], const real_T
  f_data[], s_YLC2gJhPBjEs8VvOTvcE4B_proc_T *solution,
  s_JXDNdI64oJvyHGrBwTBHI_proc__T *memspace, s_MFLHEgKtV7gODWBOEr7maD_proc_T
  *workingset, s_1UhBFHxHKUXshhZtLgMUHE_proc_T *qrmanager,
  s_B2KneB7ks2RV0bvoJc0bxC_proc_T *cholmanager, s_jPVC6k54fKlkrevS6u11qC_proc_T *
  objective, s1TgE9KstXgkd2qJxO1bF4F_proc__T *options, const
  s1TgE9KstXgkd2qJxO1bF4F_proc__T *runTimeOptions);
static void proc_control_node_driver_e(const real_T H[4761], const real_T
  f_data[], s_YLC2gJhPBjEs8VvOTvcE4B_proc_T *solution,
  s_JXDNdI64oJvyHGrBwTBHI_proc__T *memspace, s_MFLHEgKtV7gODWBOEr7maD_proc_T
  *workingset, s_1UhBFHxHKUXshhZtLgMUHE_proc_T *qrmanager,
  s_B2KneB7ks2RV0bvoJc0bxC_proc_T *cholmanager, s_jPVC6k54fKlkrevS6u11qC_proc_T *
  objective, s1TgE9KstXgkd2qJxO1bF4F_proc__T *options,
  s1TgE9KstXgkd2qJxO1bF4F_proc__T *runTimeOptions);
static void proc_control_node_addAeqConstr(s_MFLHEgKtV7gODWBOEr7maD_proc_T *obj,
  int32_T idx_local);
static boolean_T proc_control_node_soc(const real_T Hessian[4761], const real_T
  grad_data[], s_YLC2gJhPBjEs8VvOTvcE4B_proc_T *TrialState,
  s_JXDNdI64oJvyHGrBwTBHI_proc__T *memspace, s_MFLHEgKtV7gODWBOEr7maD_proc_T
  *WorkingSet, s_1UhBFHxHKUXshhZtLgMUHE_proc_T *QRManager,
  s_B2KneB7ks2RV0bvoJc0bxC_proc_T *CholManager, s_jPVC6k54fKlkrevS6u11qC_proc_T *
  QPObjective, const s1TgE9KstXgkd2qJxO1bF4F_proc__T *qpoptions);
static void proc_control_node_normal(const real_T Hessian[4761], const real_T
  grad_data[], s_YLC2gJhPBjEs8VvOTvcE4B_proc_T *TrialState,
  sG8JZ69axY52WWR6RKyApQC_proc__T *MeritFunction,
  s_JXDNdI64oJvyHGrBwTBHI_proc__T *memspace, s_MFLHEgKtV7gODWBOEr7maD_proc_T
  *WorkingSet, s_1UhBFHxHKUXshhZtLgMUHE_proc_T *QRManager,
  s_B2KneB7ks2RV0bvoJc0bxC_proc_T *CholManager, s_jPVC6k54fKlkrevS6u11qC_proc_T *
  QPObjective, const s1TgE9KstXgkd2qJxO1bF4F_proc__T *qpoptions);
static void proc_control_node_relaxed(const real_T Hessian[4761], const real_T
  grad_data[], s_YLC2gJhPBjEs8VvOTvcE4B_proc_T *TrialState,
  sG8JZ69axY52WWR6RKyApQC_proc__T *MeritFunction,
  s_JXDNdI64oJvyHGrBwTBHI_proc__T *memspace, s_MFLHEgKtV7gODWBOEr7maD_proc_T
  *WorkingSet, s_1UhBFHxHKUXshhZtLgMUHE_proc_T *QRManager,
  s_B2KneB7ks2RV0bvoJc0bxC_proc_T *CholManager, s_jPVC6k54fKlkrevS6u11qC_proc_T *
  QPObjective, s1TgE9KstXgkd2qJxO1bF4F_proc__T *qpoptions);
static boolean_T proc_control_node_step_n(int32_T *STEP_TYPE, real_T Hessian
  [4761], const real_T lb[69], s_YLC2gJhPBjEs8VvOTvcE4B_proc_T *TrialState,
  sG8JZ69axY52WWR6RKyApQC_proc__T *MeritFunction,
  s_JXDNdI64oJvyHGrBwTBHI_proc__T *memspace, s_MFLHEgKtV7gODWBOEr7maD_proc_T
  *WorkingSet, s_1UhBFHxHKUXshhZtLgMUHE_proc_T *QRManager,
  s_B2KneB7ks2RV0bvoJc0bxC_proc_T *CholManager, s_jPVC6k54fKlkrevS6u11qC_proc_T *
  QPObjective, s1TgE9KstXgkd2qJxO1bF4F_proc__T *qpoptions);
static real_T proc_control_node_anon_ep(const real_T runtimedata_x[13], const
  real_T runtimedata_lastMV[8], const real_T runtimedata_ref[52], const real_T
  runtimedata_OutputWeights[52], const real_T runtimedata_MVWeights[32], const
  real_T runtimedata_MVRateWeights[32], const real_T runtimedata_MVScaledTarget
  [32], const real_T z[69]);
static void proc_control__computeObjective_(const real_T
  obj_objfun_workspace_runtimedat[13], const real_T
  obj_objfun_workspace_runtimed_0[8], const real_T
  obj_objfun_workspace_runtimed_1[52], const real_T
  obj_objfun_workspace_runtimed_2[52], const real_T
  obj_objfun_workspace_runtimed_3[32], const real_T
  obj_objfun_workspace_runtimed_4[32], const real_T
  obj_objfun_workspace_runtimed_5[32], const real_T x[69], real_T *fval, int32_T
  *status);
static void proc_control_n_stateEvolution_b(const real_T X[65], const real_T U
  [40], real_T c[52]);
static void proc_control_nod_outputBounds_p(const real_T runtimedata_OutputMin
  [52], const real_T runtimedata_OutputMax[52], const real_T X[65], real_T e,
  real_T c_data[], int32_T c_size[2]);
static void proc_control_node_anon_epa(const real_T runtimedata_x[13], const
  real_T runtimedata_OutputMin[52], const real_T runtimedata_OutputMax[52],
  const real_T z[69], real_T varargout_1_data[], int32_T varargout_1_size[2],
  real_T varargout_2[52]);
static int32_T proc_contro_computeConstraints_(const real_T
  obj_nonlcon_workspace_runtimeda[13], const real_T
  obj_nonlcon_workspace_runtime_0[52], const real_T
  obj_nonlcon_workspace_runtime_1[52], int32_T obj_mCineq, const real_T x[69],
  real_T Cineq_workspace_data[], int32_T ineq0, real_T Ceq_workspace[52]);
static void proc_control_n_evalObjAndConstr(const real_T
  obj_objfun_workspace_runtimedat[13], const real_T
  obj_objfun_workspace_runtimed_0[8], const real_T
  obj_objfun_workspace_runtimed_1[52], const real_T
  obj_objfun_workspace_runtimed_2[52], const real_T
  obj_objfun_workspace_runtimed_3[32], const real_T
  obj_objfun_workspace_runtimed_4[32], const real_T
  obj_objfun_workspace_runtimed_5[32], const real_T
  obj_nonlcon_workspace_runtimeda[13], const real_T
  obj_nonlcon_workspace_runtime_0[52], const real_T
  obj_nonlcon_workspace_runtime_1[52], int32_T obj_mCineq, const real_T x[69],
  real_T Cineq_workspace_data[], int32_T ineq0, real_T Ceq_workspace[52], real_T
  *fval, int32_T *status);
static void proc_con_computeLinearResiduals(const real_T x[69], int32_T nVar,
  real_T workspaceIneq_data[], const int32_T *workspaceIneq_size, int32_T
  mLinIneq, const real_T AineqT_data[], const real_T bineq_data[], int32_T ldAi);
static real_T proc_control_no_computeMeritFcn(real_T obj_penaltyParam, real_T
  fval, const real_T Cineq_workspace_data[], int32_T mIneq, const real_T
  Ceq_workspace[52], boolean_T evalWellDefined);
static void proc_control_node_linesearch(boolean_T *evalWellDefined, const
  real_T bineq_data[], int32_T WorkingSet_nVar, int32_T WorkingSet_ldA, const
  real_T WorkingSet_Aineq_data[], s_YLC2gJhPBjEs8VvOTvcE4B_proc_T *TrialState,
  real_T MeritFunction_penaltyParam, real_T MeritFunction_phi, real_T
  MeritFunction_phiPrimePlus, real_T MeritFunction_phiFullStep, const
  s_REWc8VgrfSKVLBFK433XbH_proc_T *FcnEvaluator_objfun_workspace_r, const
  s_REWc8VgrfSKVLBFK433XbH_proc_T *FcnEvaluator_nonlcon_workspace_, int32_T
  FcnEvaluator_mCineq, boolean_T socTaken, real_T *alpha, int32_T *exitflag);
static void proc_control_node_driver(const real_T bineq_data[], const real_T lb
  [69], s_YLC2gJhPBjEs8VvOTvcE4B_proc_T *TrialState,
  sG8JZ69axY52WWR6RKyApQC_proc__T *MeritFunction, const
  s_51JXCAVDTNAZBtNXKIWdnB_proc_T *FcnEvaluator, s_JXDNdI64oJvyHGrBwTBHI_proc__T
  *memspace, s_MFLHEgKtV7gODWBOEr7maD_proc_T *WorkingSet,
  s_1UhBFHxHKUXshhZtLgMUHE_proc_T *QRManager, s_B2KneB7ks2RV0bvoJc0bxC_proc_T
  *CholManager, s_jPVC6k54fKlkrevS6u11qC_proc_T *QPObjective, const int32_T
  *fscales_lineq_constraint_size, const int32_T *fscales_cineq_constraint_size,
  real_T Hessian[4761]);
static void proc_control_node_fmincon(const s_REWc8VgrfSKVLBFK433XbH_proc_T
  *fun_workspace_runtimedata, const sACkMJ1zT2VJOHR6eMwwEPC_proc__T
  *fun_workspace_userdata, const real_T x0[69], const real_T Aineq_data[], const
  real_T bineq_data[], const int32_T *bineq_size, const real_T lb[69], const
  s_REWc8VgrfSKVLBFK433XbH_proc_T *nonlcon_workspace_runtimedata, const
  sACkMJ1zT2VJOHR6eMwwEPC_proc__T *nonlcon_workspace_userdata, real_T x[69],
  real_T *fval, real_T *exitflag, real_T *output_iterations, real_T
  *output_funcCount, char_T output_algorithm[3], real_T *output_constrviolation,
  real_T *output_stepsize, real_T *output_lssteplength, real_T
  *output_firstorderopt);
static boolean_T proc_control_node_isequal(const real_T varargin_1[3], const
  real_T varargin_2[3]);
static boolean_T proc_control_node_isequal_b4nw(const real_T varargin_1[6],
  const real_T varargin_2[6]);
static real_T proc_control_node_erf(real_T x);
static void imuSensor_set_MagneticFieldNED(fusion_simulink_imuSensor_pro_T *obj,
  const real_T val[3]);
static void IMUSensorParameters_updateSyste(real_T obj_MeasurementRange, real_T
  obj_Resolution, const real_T obj_ConstantBias[3], const real_T
  obj_AxesMisalignment[3], const real_T obj_NoiseDensity[3], const real_T
  obj_BiasInstability[3], const real_T obj_RandomWalk[3], const real_T
  obj_TemperatureBias[3], const real_T obj_TemperatureScaleFactor[3],
  h_fusion_internal_Acceleromet_T *sobj);
static void IMUSensorParameters_updateSys_b(real_T obj_MeasurementRange, real_T
  obj_Resolution, const real_T obj_ConstantBias[3], const real_T
  obj_AxesMisalignment[3], const real_T obj_NoiseDensity[3], const real_T
  obj_BiasInstability[3], const real_T obj_RandomWalk[3], const real_T
  obj_TemperatureBias[3], const real_T obj_TemperatureScaleFactor[3], const
  real_T obj_AccelerationBias[3], h_fusion_internal_GyroscopeSi_T *sobj);
static void IMUSensorParameters_updateSy_b4(real_T obj_MeasurementRange, real_T
  obj_Resolution, const real_T obj_ConstantBias[3], const real_T
  obj_AxesMisalignment[3], const real_T obj_NoiseDensity[3], const real_T
  obj_BiasInstability[3], const real_T obj_RandomWalk[3], const real_T
  obj_TemperatureBias[3], const real_T obj_TemperatureScaleFactor[3],
  h_fusion_internal_Magnetomete_T *sobj);
static boolean_T proc_control_node_vectorAny(const boolean_T x_data[], const
  int32_T x_size[2]);
static void proc_co_genrand_uint32_vector_b(uint32_T mt[625], uint32_T u[2]);
static real_T proc_control_node_genrandu_b(uint32_T mt[625]);
static real_T proc_contr_eml_rand_mt19937ar_b(uint32_T state[625]);
static void IMUSensorBase_stepRandomStream(fusion_simulink_imuSensor_pro_T *obj,
  real_T whiteNoise[27]);
static void proc_control_node_filter(real_T b, real_T a[2], const real_T x[3],
  const real_T zi[3], real_T y[3], real_T zf[3]);
static void proc_control__SystemCore_step_b(h_fusion_internal_Acceleromet_T *obj,
  const real_T varargin_1[3], const real_T varargin_2[9], const real_T
  varargin_3[9], real_T varargout_1[3]);
static void proc_control_SystemCore_step_b4(h_fusion_internal_GyroscopeSi_T *obj,
  const real_T varargin_1[3], const real_T varargin_2[3], const real_T
  varargin_3[9], const real_T varargin_4[9], real_T varargout_1[3]);
static void proc_control_no_SystemCore_step(fusion_simulink_imuSensor_pro_T *obj,
  const real_T varargin_1[3], const real_T varargin_2[3], const real_T
  varargin_3[4], real_T varargout_1[3], real_T varargout_2[3], real_T
  varargout_3[3]);
static void IMUFusionCommon_computeAngularV(const real_T gfast[3], const real_T
  offset[3], real_T av[3]);
static void proc_control_node_NED_ecompass(const real_T a[3], const real_T m[3],
  real_T R[9]);
static void proc_cont_quaternion_quaternion(const real_T varargin_1[9], real_T
  *obj_a, real_T *obj_b, real_T *obj_c, real_T *obj_d);
static void proc_co_quaternion_quaternion_b(const real_T varargin_1[3], real_T
  *obj_a, real_T *obj_b, real_T *obj_c, real_T *obj_d);
static void IMUFusionCommon_predictOrientat(const
  fusion_simulink_ahrsfilter_pr_T *obj, const real_T gfast[3], const real_T
  offset[3], real_T qorient_a, real_T qorient_b, real_T qorient_c, real_T
  qorient_d, real_T *b_qorient_a, real_T *b_qorient_b, real_T *b_qorient_c,
  real_T *b_qorient_d);
static void proc_control_node_mrdiv(const real_T A[72], const real_T B[36],
  real_T Y[72]);
static void proc_contro_ahrsfilter_stepImpl(fusion_simulink_ahrsfilter_pr_T *obj,
  const real_T accelIn[3], const real_T gyroIn[3], const real_T magIn[3], real_T
  orientOut[4], real_T av[3]);
static void pro_TrajectoryManager_setupImpl(TrajectoryManager_proc_contro_T
  *b_this);
static void proc_control_n_SystemCore_setup(fusion_simulink_imuSensor_pro_T *obj);
static void proc_co_IMUSensorBase_resetImpl(fusion_simulink_imuSensor_pro_T *obj);
static void proc_c_AHRSFilterBase_resetImpl(fusion_simulink_ahrsfilter_pr_T *obj);
static void rate_scheduler(void);
uint32_T plook_u32d_binckpan(real_T u, const real_T bp[], uint32_T maxIndex,
  uint32_T *prevIndex)
{
  uint32_T bpIndex;

  // Prelookup - Index only
  // Index Search method: 'binary'
  // Interpolation method: 'Use nearest'
  // Extrapolation method: 'Clip'
  // Use previous index: 'on'
  // Use last breakpoint for index at or above upper limit: 'on'
  // Remove protection against out-of-range input in generated code: 'off'

  if (u <= bp[0U]) {
    bpIndex = 0U;
  } else if (u < bp[maxIndex]) {
    bpIndex = binsearch_u32d_prevIdx(u, bp, *prevIndex, maxIndex);
    if ((bpIndex < maxIndex) && (bp[bpIndex + 1U] - u <= u - bp[bpIndex])) {
      bpIndex++;
    }
  } else {
    bpIndex = maxIndex;
  }

  *prevIndex = bpIndex;
  return bpIndex;
}

uint32_T plook_u32u16_binckpan(uint16_T u, const uint16_T bp[], uint32_T
  maxIndex, uint32_T *prevIndex)
{
  uint32_T bpIndex;

  // Prelookup - Index only
  // Index Search method: 'binary'
  // Interpolation method: 'Use nearest'
  // Extrapolation method: 'Clip'
  // Use previous index: 'on'
  // Use last breakpoint for index at or above upper limit: 'on'
  // Remove protection against out-of-range input in generated code: 'off'

  if (u <= bp[0U]) {
    bpIndex = 0U;
  } else if (u < bp[maxIndex]) {
    bpIndex = binsearch_u32u16_prevIdx(u, bp, *prevIndex, maxIndex);
    if ((bpIndex < maxIndex) && (static_cast<uint16_T>(static_cast<uint32_T>
          (bp[bpIndex + 1U]) - u) <= static_cast<uint16_T>(static_cast<uint32_T>
          (u) - bp[bpIndex]))) {
      bpIndex++;
    }
  } else {
    bpIndex = maxIndex;
  }

  *prevIndex = bpIndex;
  return bpIndex;
}

uint32_T binsearch_u32d_prevIdx(real_T u, const real_T bp[], uint32_T startIndex,
  uint32_T maxIndex)
{
  uint32_T bpIndex;
  uint32_T found;
  uint32_T iLeft;
  uint32_T iRght;

  // Binary Search using Previous Index
  bpIndex = startIndex;
  iLeft = 0U;
  iRght = maxIndex;
  found = 0U;
  while (found == 0U) {
    if (u < bp[bpIndex]) {
      iRght = bpIndex - 1U;
      bpIndex = ((bpIndex + iLeft) - 1U) >> 1U;
    } else if (u < bp[bpIndex + 1U]) {
      found = 1U;
    } else {
      iLeft = bpIndex + 1U;
      bpIndex = ((bpIndex + iRght) + 1U) >> 1U;
    }
  }

  return bpIndex;
}

uint32_T binsearch_u32u16_prevIdx(uint16_T u, const uint16_T bp[], uint32_T
  startIndex, uint32_T maxIndex)
{
  uint32_T bpIndex;
  uint32_T found;
  uint32_T iLeft;
  uint32_T iRght;

  // Binary Search using Previous Index
  bpIndex = startIndex;
  iLeft = 0U;
  iRght = maxIndex;
  found = 0U;
  while (found == 0U) {
    if (u < bp[bpIndex]) {
      iRght = bpIndex - 1U;
      bpIndex = ((bpIndex + iLeft) - 1U) >> 1U;
    } else if (u < bp[bpIndex + 1U]) {
      found = 1U;
    } else {
      iLeft = bpIndex + 1U;
      bpIndex = ((bpIndex + iRght) + 1U) >> 1U;
    }
  }

  return bpIndex;
}

int32_T div_nzp_s32(int32_T numerator, int32_T denominator)
{
  uint32_T tempAbsQuotient;
  tempAbsQuotient = (numerator < 0 ? ~static_cast<uint32_T>(numerator) + 1U :
                     static_cast<uint32_T>(numerator)) / (denominator < 0 ? ~
    static_cast<uint32_T>(denominator) + 1U : static_cast<uint32_T>(denominator));
  return (numerator < 0) != (denominator < 0) ? -static_cast<int32_T>
    (tempAbsQuotient) : static_cast<int32_T>(tempAbsQuotient);
}

int32_T div_s32_floor(int32_T numerator, int32_T denominator)
{
  int32_T quotient;
  uint32_T absDenominator;
  uint32_T absNumerator;
  uint32_T tempAbsQuotient;
  boolean_T quotientNeedsNegation;
  if (denominator == 0) {
    quotient = numerator >= 0 ? MAX_int32_T : MIN_int32_T;

    // Divide by zero handler
  } else {
    absNumerator = numerator < 0 ? ~static_cast<uint32_T>(numerator) + 1U :
      static_cast<uint32_T>(numerator);
    absDenominator = denominator < 0 ? ~static_cast<uint32_T>(denominator) + 1U :
      static_cast<uint32_T>(denominator);
    quotientNeedsNegation = ((numerator < 0) != (denominator < 0));
    tempAbsQuotient = absNumerator / absDenominator;
    if (quotientNeedsNegation) {
      absNumerator %= absDenominator;
      if (absNumerator > 0U) {
        tempAbsQuotient++;
      }
    }

    quotient = quotientNeedsNegation ? -static_cast<int32_T>(tempAbsQuotient) :
      static_cast<int32_T>(tempAbsQuotient);
  }

  return quotient;
}

int32_T div_nzp_s32_floor(int32_T numerator, int32_T denominator)
{
  uint32_T absDenominator;
  uint32_T absNumerator;
  uint32_T tempAbsQuotient;
  boolean_T quotientNeedsNegation;
  absNumerator = numerator < 0 ? ~static_cast<uint32_T>(numerator) + 1U :
    static_cast<uint32_T>(numerator);
  absDenominator = denominator < 0 ? ~static_cast<uint32_T>(denominator) + 1U :
    static_cast<uint32_T>(denominator);
  quotientNeedsNegation = ((numerator < 0) != (denominator < 0));
  tempAbsQuotient = absNumerator / absDenominator;
  if (quotientNeedsNegation) {
    absNumerator %= absDenominator;
    if (absNumerator > 0U) {
      tempAbsQuotient++;
    }
  }

  return quotientNeedsNegation ? -static_cast<int32_T>(tempAbsQuotient) :
    static_cast<int32_T>(tempAbsQuotient);
}

//
//   This function updates active task flag for each subrate.
// The function is called at model base rate, hence the
// generated code self-manages all its subrates.
//
static void rate_scheduler(void)
{
  // Compute which subrates run during the next base time step.  Subrates
  //  are an integer multiple of the base rate counter.  Therefore, the subtask
  //  counter is reset when it reaches its limit (zero means run).

  (proc_control_node_M->Timing.TaskCounters.TID[2])++;
  if ((proc_control_node_M->Timing.TaskCounters.TID[2]) > 1) {// Sample time: [0.02s, 0.0s] 
    proc_control_node_M->Timing.TaskCounters.TID[2] = 0;
  }

  (proc_control_node_M->Timing.TaskCounters.TID[3])++;
  if ((proc_control_node_M->Timing.TaskCounters.TID[3]) > 3) {// Sample time: [0.04s, 0.0s] 
    proc_control_node_M->Timing.TaskCounters.TID[3] = 0;
  }

  (proc_control_node_M->Timing.TaskCounters.TID[4])++;
  if ((proc_control_node_M->Timing.TaskCounters.TID[4]) > 4) {// Sample time: [0.05s, 0.0s] 
    proc_control_node_M->Timing.TaskCounters.TID[4] = 0;
  }

  (proc_control_node_M->Timing.TaskCounters.TID[5])++;
  if ((proc_control_node_M->Timing.TaskCounters.TID[5]) > 24) {// Sample time: [0.25s, 0.0s] 
    proc_control_node_M->Timing.TaskCounters.TID[5] = 0;
  }

  (proc_control_node_M->Timing.TaskCounters.TID[6])++;
  if ((proc_control_node_M->Timing.TaskCounters.TID[6]) > 499) {// Sample time: [5.0s, 0.0s] 
    proc_control_node_M->Timing.TaskCounters.TID[6] = 0;
  }
}

//
// This function updates continuous states using the ODE3 fixed-step
// solver algorithm
//
static void rt_ertODEUpdateContinuousStates(RTWSolverInfo *si )
{
  // Solver Matrices
  static const real_T rt_ODE3_A[3] = {
    1.0/2.0, 3.0/4.0, 1.0
  };

  static const real_T rt_ODE3_B[3][3] = {
    { 1.0/2.0, 0.0, 0.0 },

    { 0.0, 3.0/4.0, 0.0 },

    { 2.0/9.0, 1.0/3.0, 4.0/9.0 }
  };

  time_T t = rtsiGetT(si);
  time_T tnew = rtsiGetSolverStopTime(si);
  time_T h = rtsiGetStepSize(si);
  real_T *x = rtsiGetContStates(si);
  ODE3_IntgData *id = static_cast<ODE3_IntgData *>(rtsiGetSolverData(si));
  real_T *y = id->y;
  real_T *f0 = id->f[0];
  real_T *f1 = id->f[1];
  real_T *f2 = id->f[2];
  real_T hB[3];
  int_T i;
  int_T nXc = 21;
  rtsiSetSimTimeStep(si,MINOR_TIME_STEP);

  // Save the state values at time t in y, we'll use x as ynew.
  (void) memcpy(y, x,
                static_cast<uint_T>(nXc)*sizeof(real_T));

  // Assumes that rtsiSetT and ModelOutputs are up-to-date
  // f0 = f(t,y)
  rtsiSetdX(si, f0);
  proc_control_node_derivatives();

  // f(:,2) = feval(odefile, t + hA(1), y + f*hB(:,1), args(:)(*));
  hB[0] = h * rt_ODE3_B[0][0];
  for (i = 0; i < nXc; i++) {
    x[i] = y[i] + (f0[i]*hB[0]);
  }

  rtsiSetT(si, t + h*rt_ODE3_A[0]);
  rtsiSetdX(si, f1);
  proc_control_node_step();
  proc_control_node_derivatives();

  // f(:,3) = feval(odefile, t + hA(2), y + f*hB(:,2), args(:)(*));
  for (i = 0; i <= 1; i++) {
    hB[i] = h * rt_ODE3_B[1][i];
  }

  for (i = 0; i < nXc; i++) {
    x[i] = y[i] + (f0[i]*hB[0] + f1[i]*hB[1]);
  }

  rtsiSetT(si, t + h*rt_ODE3_A[1]);
  rtsiSetdX(si, f2);
  proc_control_node_step();
  proc_control_node_derivatives();

  // tnew = t + hA(3);
  // ynew = y + f*hB(:,3);
  for (i = 0; i <= 2; i++) {
    hB[i] = h * rt_ODE3_B[2][i];
  }

  for (i = 0; i < nXc; i++) {
    x[i] = y[i] + (f0[i]*hB[0] + f1[i]*hB[1] + f2[i]*hB[2]);
  }

  rtsiSetT(si, tnew);
  rtsiSetSimTimeStep(si,MAJOR_TIME_STEP);
}

//
// Output and update for atomic system:
//    '<S3>/Quaternion Normalise'
//    '<S12>/Quaternion Normalise'
//
void proc_contro_QuaternionNormalise(real_T rtu_u, real_T rtu_u_o, real_T
  rtu_u_l, real_T rtu_u_d, real_T rty_y[4])
{
  real_T absxk;
  real_T d;
  real_T scale;
  real_T t;
  int32_T b_k;
  boolean_T b[4];
  boolean_T exitg1;
  boolean_T y;

  // SignalConversion generated from: '<S45>/ SFunction '
  rty_y[0] = rtu_u;
  rty_y[1] = rtu_u_o;
  rty_y[2] = rtu_u_l;
  rty_y[3] = rtu_u_d;
  scale = 3.3121686421112381E-170;
  absxk = fabs(rty_y[0]);
  if (absxk > 3.3121686421112381E-170) {
    d = 1.0;
    scale = absxk;
  } else {
    t = absxk / 3.3121686421112381E-170;
    d = t * t;
  }

  absxk = fabs(rty_y[1]);
  if (absxk > scale) {
    t = scale / absxk;
    d = d * t * t + 1.0;
    scale = absxk;
  } else {
    t = absxk / scale;
    d += t * t;
  }

  absxk = fabs(rty_y[2]);
  if (absxk > scale) {
    t = scale / absxk;
    d = d * t * t + 1.0;
    scale = absxk;
  } else {
    t = absxk / scale;
    d += t * t;
  }

  absxk = fabs(rty_y[3]);
  if (absxk > scale) {
    t = scale / absxk;
    d = d * t * t + 1.0;
    scale = absxk;
  } else {
    t = absxk / scale;
    d += t * t;
  }

  d = scale * sqrt(d);
  rty_y[0] /= d;
  b[0] = rtIsNaN(rty_y[0]);
  rty_y[1] /= d;
  b[1] = rtIsNaN(rty_y[1]);
  rty_y[2] /= d;
  b[2] = rtIsNaN(rty_y[2]);
  rty_y[3] /= d;
  b[3] = rtIsNaN(rty_y[3]);
  y = true;
  b_k = 0;
  exitg1 = false;
  while ((!exitg1) && (b_k < 4)) {
    if (!b[b_k]) {
      y = false;
      exitg1 = true;
    } else {
      b_k++;
    }
  }

  if (y) {
    rty_y[0] = 1.0;
    rty_y[1] = 0.0;
    rty_y[2] = 0.0;
    rty_y[3] = 0.0;
  }
}

//
// Output and update for atomic system:
//    '<S149>/MATLAB Function1'
//    '<S146>/MATLAB Function1'
//
void proc_control_no_MATLABFunction1(const real_T rtu_matrix[13], real_T rty_y
  [52], B_MATLABFunction1_proc_contro_T *localB)
{
  real_T matrix;
  int32_T ibmat;
  int32_T jcol;
  memcpy(&localB->matrix[0], &rtu_matrix[0], 13U * sizeof(real_T));
  localB->matrix[9] = -rtu_matrix[9];
  for (jcol = 0; jcol < 13; jcol++) {
    matrix = localB->matrix[jcol];
    ibmat = jcol << 2;
    rty_y[ibmat] = matrix;
    rty_y[ibmat + 1] = matrix;
    rty_y[ibmat + 2] = matrix;
    rty_y[ibmat + 3] = matrix;
  }
}

//
// System initialize for enable system:
//    '<S148>/Subsystem1'
//    '<S150>/Subsystem1'
//
void proc_control_no_Subsystem1_Init(real_T rty_Out1[6], real_T rty_Out1_h[2],
  real_T *rty_Out1_g, P_Subsystem1_proc_control_nod_T *localP)
{
  int32_T i;

  // SystemInitialize for Outport: '<S163>/Out1'
  for (i = 0; i < 6; i++) {
    rty_Out1[i] = localP->Out1_Y0;
  }

  rty_Out1_h[0] = localP->Out1_Y0;
  rty_Out1_h[1] = localP->Out1_Y0;
  *rty_Out1_g = localP->Out1_Y0;

  // End of SystemInitialize for Outport: '<S163>/Out1'
}

//
// Output and update for enable system:
//    '<S148>/Subsystem1'
//    '<S150>/Subsystem1'
//
void proc_control_node_Subsystem1(boolean_T rtu_Enable, const
  SL_Bus_proc_control_node_sonia_common_AddPose *rtu_In1, real_T rty_Out1[6],
  real_T rty_Out1_h[2], real_T *rty_Out1_g, DW_Subsystem1_proc_control_no_T
  *localDW)
{
  // Outputs for Enabled SubSystem: '<S148>/Subsystem1' incorporates:
  //   EnablePort: '<S163>/Enable'

  if (rtu_Enable) {
    // DataTypeConversion: '<S163>/Data Type Conversion'
    rty_Out1[0] = rtu_In1->Position.X;
    rty_Out1[1] = rtu_In1->Position.Y;
    rty_Out1[2] = rtu_In1->Position.Z;
    rty_Out1[3] = rtu_In1->Orientation.Z;
    rty_Out1[4] = rtu_In1->Orientation.Y;
    rty_Out1[5] = rtu_In1->Orientation.X;

    // DataTypeConversion: '<S163>/Data Type Conversion1'
    rty_Out1_h[0] = rtu_In1->Frame;
    rty_Out1_h[1] = rtu_In1->Speed;

    // DataTypeConversion: '<S163>/Data Type Conversion2'
    *rty_Out1_g = rtu_In1->Fine;
    srUpdateBC(localDW->Subsystem1_SubsysRanBC);
  }

  // End of Outputs for SubSystem: '<S148>/Subsystem1'
}

real_T rt_atan2d_snf(real_T u0, real_T u1)
{
  real_T y;
  int32_T u0_0;
  int32_T u1_0;
  if (rtIsNaN(u0) || rtIsNaN(u1)) {
    y = (rtNaN);
  } else if (rtIsInf(u0) && rtIsInf(u1)) {
    if (u0 > 0.0) {
      u0_0 = 1;
    } else {
      u0_0 = -1;
    }

    if (u1 > 0.0) {
      u1_0 = 1;
    } else {
      u1_0 = -1;
    }

    y = atan2(static_cast<real_T>(u0_0), static_cast<real_T>(u1_0));
  } else if (u1 == 0.0) {
    if (u0 > 0.0) {
      y = RT_PI / 2.0;
    } else if (u0 < 0.0) {
      y = -(RT_PI / 2.0);
    } else {
      y = 0.0;
    }
  } else {
    y = atan2(u0, u1);
  }

  return y;
}

static void proc_control_node_quatmultiply(const real_T q[4], const real_T r[4],
  real_T qout[4])
{
  qout[0] = ((q[0] * r[0] - q[1] * r[1]) - q[2] * r[2]) - q[3] * r[3];
  qout[1] = (q[0] * r[1] + r[0] * q[1]) + (q[2] * r[3] - r[2] * q[3]);
  qout[2] = (q[0] * r[2] + r[0] * q[2]) + (r[1] * q[3] - q[1] * r[3]);
  qout[3] = (q[0] * r[3] + r[0] * q[3]) + (q[1] * r[2] - r[1] * q[2]);
}

real_T rt_roundd_snf(real_T u)
{
  real_T y;
  if (fabs(u) < 4.503599627370496E+15) {
    if (u >= 0.5) {
      y = floor(u + 0.5);
    } else if (u > -0.5) {
      y = u * 0.0;
    } else {
      y = ceil(u - 0.5);
    }
  } else {
    y = u;
  }

  return y;
}

static void proc_control_n_AddPose_stepImpl(AddPose_proc_control_node_T *b_this,
  boolean_T compute, boolean_T clearBuffer, boolean_T isNew, const real_T
  waypoint[9], const real_T initCond[7], boolean_T reset, real_T waypoints[160],
  real_T *count)
{
  real_T q_tmp;
  int32_T b_k;
  int32_T b_this_0;
  int32_T i;
  uint8_T tmp;

  //  Main appeller à chaque exécution
  //  Suppression du buffer.
  //  ========================================================================
  //  Sous Routines
  // ==========================================================================         
  //  Fonction qui interprete les message ROS
  if (clearBuffer) {
    //  supprimer le buffer de way points
    for (b_k = 0; b_k < 8; b_k++) {
      for (i = 0; i < 19; i++) {
        b_this->poseList[((i + 2) + 20 * b_k) - 1] = 999.0;
      }
    }

    b_this->i = 2.0;
  }

  //  Ajout d'un waypoint provenant de ROS.
  if (isNew && (b_this->i <= 20.0)) {
    // this.poseList(this.i-1,:) = this.processWpt(waypoint.').';
    //  Fonction qui interprete les waypoints reçu par ROS
    //  Determiner le quaternion en fonction des angles d'euler.
    //  Orde de rotation : ZYX.
    //  Reel
    proc_control_node_B.twpt_n[7] = waypoint[7];

    //  Pre calculs
    proc_control_node_B.s_idx_2 = 0.017453292519943295 * waypoint[3] / 2.0;
    proc_control_node_B.c_idx_0 = proc_control_node_B.s_idx_2;
    proc_control_node_B.s_idx_0_h = proc_control_node_B.s_idx_2;
    proc_control_node_B.s_idx_2 = 0.017453292519943295 * waypoint[4] / 2.0;
    proc_control_node_B.c_idx_1 = proc_control_node_B.s_idx_2;
    proc_control_node_B.s_idx_1_b = proc_control_node_B.s_idx_2;
    proc_control_node_B.s_idx_2 = 0.017453292519943295 * waypoint[5] / 2.0;
    proc_control_node_B.c_idx_0 = cos(proc_control_node_B.c_idx_0);
    proc_control_node_B.s_idx_0_h = sin(proc_control_node_B.s_idx_0_h);
    proc_control_node_B.c_idx_1 = cos(proc_control_node_B.c_idx_1);
    proc_control_node_B.s_idx_1_b = sin(proc_control_node_B.s_idx_1_b);
    proc_control_node_B.c_idx_2 = cos(proc_control_node_B.s_idx_2);
    proc_control_node_B.s_idx_2 = sin(proc_control_node_B.s_idx_2);
    proc_control_node_B.q_tmp = proc_control_node_B.c_idx_0 *
      proc_control_node_B.c_idx_1;
    q_tmp = proc_control_node_B.s_idx_0_h * proc_control_node_B.s_idx_1_b;
    proc_control_node_B.q_j[0] = proc_control_node_B.q_tmp *
      proc_control_node_B.c_idx_2 + q_tmp * proc_control_node_B.s_idx_2;
    proc_control_node_B.q_j[1] = proc_control_node_B.q_tmp *
      proc_control_node_B.s_idx_2 - q_tmp * proc_control_node_B.c_idx_2;
    proc_control_node_B.q_tmp = proc_control_node_B.s_idx_0_h *
      proc_control_node_B.c_idx_1;
    q_tmp = proc_control_node_B.c_idx_0 * proc_control_node_B.s_idx_1_b;
    proc_control_node_B.q_j[2] = q_tmp * proc_control_node_B.c_idx_2 +
      proc_control_node_B.q_tmp * proc_control_node_B.s_idx_2;
    proc_control_node_B.q_j[3] = proc_control_node_B.q_tmp *
      proc_control_node_B.c_idx_2 - q_tmp * proc_control_node_B.s_idx_2;

    //  rp = quatrotate(quatinv(lq),wpt(1:3)) + lp;
    // rp = rotatepoint(quatinv(lq),wpt(1:3)) + lp;
    //  quaternion partie scalaire
    //  quaternion partie vectoriel
    proc_control_node_B.c_idx_2 = 0.0;
    proc_control_node_B.s_idx_0_h = 0.0;
    for (b_k = 0; b_k < 3; b_k++) {
      proc_control_node_B.c_idx_0 = b_this->poseList[((b_k + 4) * 20 +
        static_cast<int32_T>(b_this->i - 1.0)) - 1];
      proc_control_node_B.c_idx_2 += proc_control_node_B.c_idx_0 * waypoint[b_k];
      proc_control_node_B.s_idx_0_h += proc_control_node_B.c_idx_0 *
        proc_control_node_B.c_idx_0;
    }

    proc_control_node_B.c_idx_0 = 2.0 * proc_control_node_B.c_idx_2;
    proc_control_node_B.s_idx_1_b = b_this->poseList[static_cast<int32_T>
      (b_this->i - 1.0) + 59];
    proc_control_node_B.s_idx_0_h = proc_control_node_B.s_idx_1_b *
      proc_control_node_B.s_idx_1_b - proc_control_node_B.s_idx_0_h;
    proc_control_node_B.c_idx_1 = proc_control_node_B.s_idx_1_b * 2.0;

    //  Prendre le quaternion le plus cours
    proc_control_node_B.c_idx_2 = 0.0;
    for (b_k = 0; b_k < 4; b_k++) {
      proc_control_node_B.c_idx_2 += b_this->poseList[((b_k + 3) * 20 +
        static_cast<int32_T>(b_this->i - 1.0)) - 1] *
        proc_control_node_B.q_j[b_k];
    }

    if (proc_control_node_B.c_idx_2 > 1.0) {
      proc_control_node_B.c_idx_2 = ((proc_control_node_B.q_j[0] *
        proc_control_node_B.q_j[0] + -proc_control_node_B.q_j[1] *
        -proc_control_node_B.q_j[1]) + -proc_control_node_B.q_j[2] *
        -proc_control_node_B.q_j[2]) + -proc_control_node_B.q_j[3] *
        -proc_control_node_B.q_j[3];
      proc_control_node_B.b_q_i[0] = proc_control_node_B.q_j[0] /
        proc_control_node_B.c_idx_2;
      proc_control_node_B.b_q_i[1] = proc_control_node_B.q_j[1] /
        proc_control_node_B.c_idx_2;
      proc_control_node_B.b_q_i[2] = proc_control_node_B.q_j[2] /
        proc_control_node_B.c_idx_2;
      proc_control_node_B.b_q_i[3] = proc_control_node_B.q_j[3] /
        proc_control_node_B.c_idx_2;
      proc_control_node_B.b_this_b[0] = proc_control_node_B.s_idx_1_b;
      proc_control_node_B.b_this_b[1] = b_this->poseList[static_cast<int32_T>
        (b_this->i - 1.0) + 79];
      proc_control_node_B.b_this_b[2] = b_this->poseList[static_cast<int32_T>
        (b_this->i - 1.0) + 99];
      proc_control_node_B.b_this_b[3] = b_this->poseList[static_cast<int32_T>
        (b_this->i - 1.0) + 119];
      proc_control_node_quatmultiply(proc_control_node_B.b_this_b,
        proc_control_node_B.b_q_i, proc_control_node_B.rq_m);

      //  rq= quatmultiply(quatinv(lq),quatconj(q));
    } else {
      proc_control_node_B.c_idx_2 = ((proc_control_node_B.q_j[0] *
        proc_control_node_B.q_j[0] + proc_control_node_B.q_j[1] *
        proc_control_node_B.q_j[1]) + proc_control_node_B.q_j[2] *
        proc_control_node_B.q_j[2]) + proc_control_node_B.q_j[3] *
        proc_control_node_B.q_j[3];
      proc_control_node_B.b_q_i[0] = proc_control_node_B.q_j[0] /
        proc_control_node_B.c_idx_2;
      proc_control_node_B.b_q_i[1] = -proc_control_node_B.q_j[1] /
        proc_control_node_B.c_idx_2;
      proc_control_node_B.b_q_i[2] = -proc_control_node_B.q_j[2] /
        proc_control_node_B.c_idx_2;
      proc_control_node_B.b_q_i[3] = -proc_control_node_B.q_j[3] /
        proc_control_node_B.c_idx_2;
      proc_control_node_B.b_this_b[0] = proc_control_node_B.s_idx_1_b;
      proc_control_node_B.b_this_b[1] = b_this->poseList[static_cast<int32_T>
        (b_this->i - 1.0) + 79];
      proc_control_node_B.b_this_b[2] = b_this->poseList[static_cast<int32_T>
        (b_this->i - 1.0) + 99];
      proc_control_node_B.b_this_b[3] = b_this->poseList[static_cast<int32_T>
        (b_this->i - 1.0) + 119];
      proc_control_node_quatmultiply(proc_control_node_B.b_this_b,
        proc_control_node_B.b_q_i, proc_control_node_B.rq_m);

      //  rq = quatmultiply(quatinv(lq),q);
    }

    //  transformer le point en fonction du frame
    proc_control_node_B.c_idx_2 = rt_roundd_snf(waypoint[6]);
    if (proc_control_node_B.c_idx_2 < 256.0) {
      if (proc_control_node_B.c_idx_2 >= 0.0) {
        tmp = static_cast<uint8_T>(proc_control_node_B.c_idx_2);
      } else {
        tmp = 0U;
      }
    } else {
      tmp = MAX_uint8_T;
    }

    switch (tmp) {
     case 0U:
      //  position et angle absolue
      proc_control_node_B.twpt_n[0] = waypoint[0];
      proc_control_node_B.twpt_n[1] = waypoint[1];
      proc_control_node_B.twpt_n[2] = waypoint[2];
      proc_control_node_B.twpt_n[3] = proc_control_node_B.q_j[0];
      proc_control_node_B.twpt_n[4] = proc_control_node_B.q_j[1];
      proc_control_node_B.twpt_n[5] = proc_control_node_B.q_j[2];
      proc_control_node_B.twpt_n[6] = proc_control_node_B.q_j[3];
      break;

     case 1U:
      //  position et angle relatif
      proc_control_node_B.s_idx_1_b = b_this->poseList[static_cast<int32_T>
        (b_this->i - 1.0) + 99];
      proc_control_node_B.c_idx_2 = b_this->poseList[static_cast<int32_T>
        (b_this->i - 1.0) + 119];
      proc_control_node_B.s_idx_2 = b_this->poseList[static_cast<int32_T>
        (b_this->i - 1.0) + 79];
      proc_control_node_B.twpt_n[0] = ((proc_control_node_B.s_idx_2 *
        proc_control_node_B.c_idx_0 + b_this->poseList[static_cast<int32_T>
        (b_this->i - 1.0) - 1]) + proc_control_node_B.s_idx_0_h * waypoint[0]) +
        (proc_control_node_B.s_idx_1_b * waypoint[2] -
         proc_control_node_B.c_idx_2 * waypoint[1]) *
        proc_control_node_B.c_idx_1;
      proc_control_node_B.twpt_n[1] = ((proc_control_node_B.s_idx_1_b *
        proc_control_node_B.c_idx_0 + b_this->poseList[static_cast<int32_T>
        (b_this->i - 1.0) + 19]) + proc_control_node_B.s_idx_0_h * waypoint[1])
        + (proc_control_node_B.c_idx_2 * waypoint[0] -
           proc_control_node_B.s_idx_2 * waypoint[2]) *
        proc_control_node_B.c_idx_1;
      proc_control_node_B.twpt_n[2] = b_this->poseList[static_cast<int32_T>
        (b_this->i - 1.0) + 39];
      proc_control_node_B.twpt_n[3] = proc_control_node_B.rq_m[0];
      proc_control_node_B.twpt_n[4] = proc_control_node_B.rq_m[1];
      proc_control_node_B.twpt_n[5] = proc_control_node_B.rq_m[2];
      proc_control_node_B.twpt_n[6] = proc_control_node_B.rq_m[3];
      break;

     case 2U:
      //  position relatif et angle absolue
      proc_control_node_B.s_idx_2 = b_this->poseList[static_cast<int32_T>
        (b_this->i - 1.0) + 99];
      proc_control_node_B.s_idx_1_b = b_this->poseList[static_cast<int32_T>
        (b_this->i - 1.0) + 119];
      proc_control_node_B.c_idx_2 = b_this->poseList[static_cast<int32_T>
        (b_this->i - 1.0) + 79];
      proc_control_node_B.twpt_n[0] = ((proc_control_node_B.c_idx_2 *
        proc_control_node_B.c_idx_0 + b_this->poseList[static_cast<int32_T>
        (b_this->i - 1.0) - 1]) + proc_control_node_B.s_idx_0_h * waypoint[0]) +
        (proc_control_node_B.s_idx_2 * waypoint[2] -
         proc_control_node_B.s_idx_1_b * waypoint[1]) *
        proc_control_node_B.c_idx_1;
      proc_control_node_B.twpt_n[1] = ((proc_control_node_B.s_idx_2 *
        proc_control_node_B.c_idx_0 + b_this->poseList[static_cast<int32_T>
        (b_this->i - 1.0) + 19]) + proc_control_node_B.s_idx_0_h * waypoint[1])
        + (proc_control_node_B.s_idx_1_b * waypoint[0] -
           proc_control_node_B.c_idx_2 * waypoint[2]) *
        proc_control_node_B.c_idx_1;
      proc_control_node_B.twpt_n[2] = ((proc_control_node_B.s_idx_1_b *
        proc_control_node_B.c_idx_0 + b_this->poseList[static_cast<int32_T>
        (b_this->i - 1.0) + 39]) + proc_control_node_B.s_idx_0_h * waypoint[2])
        + (proc_control_node_B.c_idx_2 * waypoint[1] -
           proc_control_node_B.s_idx_2 * waypoint[0]) *
        proc_control_node_B.c_idx_1;
      proc_control_node_B.twpt_n[3] = proc_control_node_B.q_j[0];
      proc_control_node_B.twpt_n[4] = proc_control_node_B.q_j[1];
      proc_control_node_B.twpt_n[5] = proc_control_node_B.q_j[2];
      proc_control_node_B.twpt_n[6] = proc_control_node_B.q_j[3];
      break;

     case 3U:
      //  position absolue et angle relatif
      proc_control_node_B.twpt_n[0] = waypoint[0];
      proc_control_node_B.twpt_n[1] = waypoint[1];
      proc_control_node_B.twpt_n[2] = waypoint[2];
      proc_control_node_B.twpt_n[3] = proc_control_node_B.rq_m[0];
      proc_control_node_B.twpt_n[4] = proc_control_node_B.rq_m[1];
      proc_control_node_B.twpt_n[5] = proc_control_node_B.rq_m[2];
      proc_control_node_B.twpt_n[6] = proc_control_node_B.rq_m[3];
      break;

     default:
      //  retourne le point précédent
      proc_control_node_B.twpt_n[0] = b_this->poseList[static_cast<int32_T>
        (b_this->i - 1.0) - 1];
      proc_control_node_B.twpt_n[1] = b_this->poseList[static_cast<int32_T>
        (b_this->i - 1.0) + 19];
      proc_control_node_B.twpt_n[2] = b_this->poseList[static_cast<int32_T>
        (b_this->i - 1.0) + 39];
      proc_control_node_B.twpt_n[3] = proc_control_node_B.s_idx_1_b;
      proc_control_node_B.twpt_n[4] = b_this->poseList[static_cast<int32_T>
        (b_this->i - 1.0) + 79];
      proc_control_node_B.twpt_n[5] = b_this->poseList[static_cast<int32_T>
        (b_this->i - 1.0) + 99];
      proc_control_node_B.twpt_n[6] = b_this->poseList[static_cast<int32_T>
        (b_this->i - 1.0) + 119];
      break;
    }

    b_this_0 = static_cast<int32_T>(b_this->i);
    for (b_k = 0; b_k < 8; b_k++) {
      b_this->poseList[(b_this_0 + 20 * b_k) - 1] =
        proc_control_node_B.twpt_n[b_k];
    }

    b_this->i++;
  }

  if (compute) {
    b_this_0 = static_cast<int32_T>(b_this->i - 1.0);
    for (b_k = 0; b_k < 8; b_k++) {
      b_this->poseList[20 * b_k] = b_this->poseList[(20 * b_k + b_this_0) - 1];
      for (i = 0; i < 19; i++) {
        b_this->poseList[((i + 2) + 20 * b_k) - 1] = 999.0;
      }
    }

    b_this->i = 2.0;
  }

  if (reset) {
    for (b_k = 0; b_k < 8; b_k++) {
      for (i = 0; i < 19; i++) {
        b_this->poseList[((i + 2) + 20 * b_k) - 1] = 999.0;
      }
    }

    b_this->poseList[140] = 0.0;
    for (b_k = 0; b_k < 7; b_k++) {
      proc_control_node_B.c_idx_0 = initCond[b_k];
      b_this->poseList[20 * b_k] = proc_control_node_B.c_idx_0;
      b_this->poseList[20 * b_k + 1] = proc_control_node_B.c_idx_0;
    }

    b_this->poseList[141] = 1.0;
    b_this->i = 2.0;
  }

  *count = b_this->i;
  memcpy(&waypoints[0], &b_this->poseList[0], 160U * sizeof(real_T));
}

static void proc_control_no_endpointpadding(const creal_T zcurrent_data[], const
  int32_T zcurrent_size[2], const creal_T varargin_1[2], creal_T *zleft, creal_T
  *zright)
{
  int32_T zleft_tmp;
  int32_T zleft_tmp_0;
  if (rtIsNaN(varargin_1[0].re) || rtIsNaN(varargin_1[0].im)) {
    zleft->re = (zcurrent_data[0].re - zcurrent_data[1].re) * 100.0 +
      zcurrent_data[0].re;
    zleft->im = (zcurrent_data[0].im - zcurrent_data[1].im) * 100.0 +
      zcurrent_data[0].im;
  } else {
    zleft->re = (rtNaN);
    zleft->im = 0.0;
  }

  if (rtIsNaN(varargin_1[1].re) || rtIsNaN(varargin_1[1].im)) {
    zleft_tmp = zcurrent_size[1] - 1;
    zleft_tmp_0 = zcurrent_size[1] - 2;
    zright->re = (zcurrent_data[zleft_tmp].re - zcurrent_data[zleft_tmp_0].re) *
      100.0 + zcurrent_data[zleft_tmp].re;
    zright->im = (zcurrent_data[zleft_tmp].im - zcurrent_data[zleft_tmp_0].im) *
      100.0 + zcurrent_data[zleft_tmp].im;
  } else {
    zright->re = (rtNaN);
    zright->im = 0.0;
  }
}

static void proc_control_node_diff(const creal_T x_data[], const int32_T x_size
  [2], creal_T y_data[], int32_T y_size[2])
{
  int32_T dimSize;
  int32_T dimSize_tmp;
  dimSize_tmp = x_size[1] - 1;
  proc_control_node_B.work_data_idx_0 = x_data[0];
  for (dimSize = 2; dimSize <= dimSize_tmp + 1; dimSize++) {
    proc_control_node_B.tmp1_re = x_data[dimSize - 1].re;
    proc_control_node_B.tmp1_im = x_data[dimSize - 1].im;
    proc_control_node_B.work_c.re = proc_control_node_B.tmp1_re;
    proc_control_node_B.work_c.im = proc_control_node_B.tmp1_im;
    proc_control_node_B.b_y1_data[dimSize - 2].re = proc_control_node_B.tmp1_re
      - proc_control_node_B.work_data_idx_0.re;
    proc_control_node_B.b_y1_data[dimSize - 2].im = proc_control_node_B.tmp1_im
      - proc_control_node_B.work_data_idx_0.im;
    proc_control_node_B.work_data_idx_0 = proc_control_node_B.work_c;
  }

  y_size[0] = 1;
  y_size[1] = x_size[1] - 1;
  dimSize = x_size[1] - 2;
  if (0 <= dimSize) {
    memcpy(&y_data[0], &proc_control_node_B.b_y1_data[0], (dimSize + 1) * sizeof
           (creal_T));
  }
}

static real_T proc_control_node_rt_hypotd_snf(real_T u0, real_T u1)
{
  real_T y;
  proc_control_node_B.a_m = fabs(u0);
  y = fabs(u1);
  if (proc_control_node_B.a_m < y) {
    proc_control_node_B.a_m /= y;
    y *= sqrt(proc_control_node_B.a_m * proc_control_node_B.a_m + 1.0);
  } else if (proc_control_node_B.a_m > y) {
    y /= proc_control_node_B.a_m;
    y = sqrt(y * y + 1.0) * proc_control_node_B.a_m;
  } else if (!rtIsNaN(y)) {
    y = proc_control_node_B.a_m * 1.4142135623730951;
  }

  return y;
}

static void proc_control_node_abs(const creal_T x_data[], const int32_T x_size[2],
  real_T y_data[], int32_T y_size[2])
{
  int32_T b_k;
  int32_T nx;
  nx = x_size[1] - 1;
  y_size[0] = 1;
  y_size[1] = x_size[1];
  for (b_k = 0; b_k <= nx; b_k++) {
    y_data[b_k] = proc_control_node_rt_hypotd_snf(x_data[b_k].re, x_data[b_k].im);
  }
}

static void proc_control_node_angle(const creal_T x_data[], const int32_T
  x_size[2], real_T y_data[], int32_T y_size[2])
{
  int32_T b_k;
  int32_T nx;
  nx = x_size[1] - 1;
  y_size[0] = 1;
  y_size[1] = x_size[1];
  for (b_k = 0; b_k <= nx; b_k++) {
    y_data[b_k] = rt_atan2d_snf(x_data[b_k].im, x_data[b_k].re);
  }
}

static void proc_control_node_midcurve(const creal_T Pb_data[], const int32_T
  Pb_size[2], const creal_T Vbd_data[], const real_T Lab_data[], const int32_T
  Lab_size[2], const real_T Lbd_data[], const int32_T Lbd_size[2], const real_T
  Lde_data[], const int32_T Lde_size[2], const real_T alpha_data[], const real_T
  beta_data[], creal_T Pc_data[], int32_T Pc_size[2])
{
  int32_T a_data_tmp;
  int32_T b_k;
  int32_T nx;
  nx = Lde_size[1] - 1;
  for (b_k = 0; b_k <= nx; b_k++) {
    proc_control_node_B.a_data[b_k] = 2.0 * Lde_data[b_k] + Lbd_data[b_k];
  }

  nx = Lab_size[1];
  for (b_k = 0; b_k < nx; b_k++) {
    proc_control_node_B.b_data_cz[b_k] = Lab_data[b_k] * 2.0 + Lbd_data[b_k];
  }

  a_data_tmp = Lbd_size[1] - 1;
  for (b_k = 0; b_k <= a_data_tmp; b_k++) {
    proc_control_node_B.b_pw = proc_control_node_B.b_data_cz[b_k];
    proc_control_node_B.a_bc = proc_control_node_B.a_data[b_k];
    proc_control_node_B.Lbd = Lbd_data[b_k];
    proc_control_node_B.b_gamma_data[b_k] = (alpha_data[b_k] *
      proc_control_node_B.a_bc + beta_data[b_k] * proc_control_node_B.b_pw) *
      proc_control_node_B.Lbd / (proc_control_node_B.a_bc *
      proc_control_node_B.b_pw * 2.0 + (proc_control_node_B.a_bc +
      proc_control_node_B.b_pw) * proc_control_node_B.Lbd);
  }

  if (0 <= a_data_tmp) {
    memcpy(&proc_control_node_B.b_data_cz[0], &proc_control_node_B.b_gamma_data
           [0], (a_data_tmp + 1) * sizeof(real_T));
  }

  for (b_k = 0; b_k <= a_data_tmp; b_k++) {
    proc_control_node_B.b_data_cz[b_k] = tan(proc_control_node_B.b_data_cz[b_k]);
  }

  Pc_size[0] = 1;
  Pc_size[1] = Pb_size[1];
  nx = Pb_size[1] - 1;
  for (b_k = 0; b_k <= nx; b_k++) {
    proc_control_node_B.b_pw = proc_control_node_B.b_data_cz[b_k];
    proc_control_node_B.a_bc = 0.0 * proc_control_node_B.b_pw + 1.0;
    proc_control_node_B.Lbd = proc_control_node_B.a_bc * Vbd_data[b_k].re -
      proc_control_node_B.b_pw * Vbd_data[b_k].im;
    proc_control_node_B.b_pw = proc_control_node_B.a_bc * Vbd_data[b_k].im +
      proc_control_node_B.b_pw * Vbd_data[b_k].re;
    if (proc_control_node_B.b_pw == 0.0) {
      proc_control_node_B.a_bc = proc_control_node_B.Lbd / 2.0;
      proc_control_node_B.b_pw = 0.0;
    } else if (proc_control_node_B.Lbd == 0.0) {
      proc_control_node_B.a_bc = 0.0;
      proc_control_node_B.b_pw /= 2.0;
    } else {
      proc_control_node_B.a_bc = proc_control_node_B.Lbd / 2.0;
      proc_control_node_B.b_pw /= 2.0;
    }

    Pc_data[b_k].re = Pb_data[b_k].re + proc_control_node_B.a_bc;
    Pc_data[b_k].im = Pb_data[b_k].im + proc_control_node_B.b_pw;
  }

  for (b_k = 0; b_k <= a_data_tmp; b_k++) {
    if (Lbd_data[b_k] == 0.0) {
      Pc_data[b_k] = Pb_data[b_k];
    }
  }
}

static void proc_control_no_insertCodegen_b(const creal_T zorig_data[], real_T m,
  real_T nmax, const creal_T varargin_1[2], creal_T Zout_data[], int32_T
  Zout_size[2])
{
  int32_T dz_re_tmp;
  int32_T z_data_tmp;
  proc_control_node_B.loop_ub_tmp_tmp_b = static_cast<int32_T>(m);
  proc_control_node_B.zorig_size[0] = 1;
  proc_control_node_B.zorig_size[1] = static_cast<int32_T>(m);
  if (0 <= proc_control_node_B.loop_ub_tmp_tmp_b - 1) {
    memcpy(&proc_control_node_B.zorig_data[0], &zorig_data[0],
           proc_control_node_B.loop_ub_tmp_tmp_b * sizeof(creal_T));
  }

  proc_control_no_endpointpadding(proc_control_node_B.zorig_data,
    proc_control_node_B.zorig_size, varargin_1, &proc_control_node_B.zleft,
    &proc_control_node_B.zright);
  proc_control_node_B.z_size[0] = 1;
  proc_control_node_B.z_size[1] = static_cast<int32_T>(m) + 2;
  proc_control_node_B.z_data_p[0] = proc_control_node_B.zleft;
  if (0 <= proc_control_node_B.loop_ub_tmp_tmp_b - 1) {
    memcpy(&proc_control_node_B.z_data_p[1], &zorig_data[0],
           proc_control_node_B.loop_ub_tmp_tmp_b * sizeof(creal_T));
  }

  proc_control_node_B.z_data_p[static_cast<int32_T>(m) + 1] =
    proc_control_node_B.zright;
  proc_control_node_diff(proc_control_node_B.z_data_p,
    proc_control_node_B.z_size, proc_control_node_B.dz_data_f,
    proc_control_node_B.dz_size);
  proc_control_node_abs(proc_control_node_B.dz_data_f,
                        proc_control_node_B.dz_size,
                        proc_control_node_B.l_data_d, proc_control_node_B.z_size);
  if (2 > proc_control_node_B.dz_size[1]) {
    proc_control_node_B.f_c = 0;
    proc_control_node_B.e_kr = -1;
  } else {
    proc_control_node_B.f_c = 1;
    proc_control_node_B.e_kr = proc_control_node_B.dz_size[1] - 1;
  }

  proc_control_node_B.zorig_size[0] = 1;
  proc_control_node_B.loop_ub_cs = proc_control_node_B.e_kr -
    proc_control_node_B.f_c;
  proc_control_node_B.zorig_size[1] = proc_control_node_B.loop_ub_cs + 1;
  for (proc_control_node_B.e_kr = 0; proc_control_node_B.e_kr <=
       proc_control_node_B.loop_ub_cs; proc_control_node_B.e_kr++) {
    dz_re_tmp = proc_control_node_B.f_c + proc_control_node_B.e_kr;
    proc_control_node_B.dz_re = proc_control_node_B.dz_data_f[dz_re_tmp].re;
    proc_control_node_B.dz_im = -proc_control_node_B.dz_data_f[dz_re_tmp].im;
    dz_re_tmp = proc_control_node_B.e_kr;
    proc_control_node_B.zorig_data[dz_re_tmp].re = proc_control_node_B.dz_re *
      proc_control_node_B.dz_data_f[dz_re_tmp].re - proc_control_node_B.dz_im *
      proc_control_node_B.dz_data_f[dz_re_tmp].im;
    proc_control_node_B.zorig_data[dz_re_tmp].im = proc_control_node_B.dz_re *
      proc_control_node_B.dz_data_f[dz_re_tmp].im + proc_control_node_B.dz_im *
      proc_control_node_B.dz_data_f[dz_re_tmp].re;
  }

  proc_control_node_angle(proc_control_node_B.zorig_data,
    proc_control_node_B.zorig_size, proc_control_node_B.alpha_data_o,
    proc_control_node_B.alpha_size);
  if ((!rtIsNaN(varargin_1[0].re)) && (!rtIsNaN(varargin_1[0].im))) {
    proc_control_node_B.l_data_d[0] = 0.0;
    proc_control_node_B.e_kr = 1;
    proc_control_node_B.alpha_data_o[0] = rt_atan2d_snf
      (proc_control_node_B.dz_data_f[proc_control_node_B.e_kr].re * varargin_1[0]
       .im + -proc_control_node_B.dz_data_f[proc_control_node_B.e_kr].im *
       varargin_1[0].re, proc_control_node_B.dz_data_f[proc_control_node_B.e_kr]
       .re * varargin_1[0].re -
       -proc_control_node_B.dz_data_f[proc_control_node_B.e_kr].im * varargin_1
       [0].im);
  }

  if ((!rtIsNaN(varargin_1[1].re)) && (!rtIsNaN(varargin_1[1].im))) {
    proc_control_node_B.l_data_d[proc_control_node_B.z_size[1] - 1] = 0.0;
    proc_control_node_B.e_kr = proc_control_node_B.dz_size[1] - 2;
    proc_control_node_B.alpha_data_o[proc_control_node_B.alpha_size[1] - 1] =
      rt_atan2d_snf(proc_control_node_B.dz_data_f[proc_control_node_B.e_kr].im *
                    varargin_1[1].re +
                    proc_control_node_B.dz_data_f[proc_control_node_B.e_kr].re *
                    -varargin_1[1].im,
                    proc_control_node_B.dz_data_f[proc_control_node_B.e_kr].re *
                    varargin_1[1].re -
                    proc_control_node_B.dz_data_f[proc_control_node_B.e_kr].im *
                    -varargin_1[1].im);
  }

  if (2 > static_cast<int32_T>(m)) {
    proc_control_node_B.f_c = 0;
    proc_control_node_B.e_kr = -1;
  } else {
    proc_control_node_B.f_c = 1;
    proc_control_node_B.e_kr = static_cast<int32_T>(m) - 1;
  }

  if (2 > proc_control_node_B.dz_size[1] - 1) {
    dz_re_tmp = 0;
    z_data_tmp = -1;
  } else {
    dz_re_tmp = 1;
    z_data_tmp = proc_control_node_B.dz_size[1] - 2;
  }

  if (1 > proc_control_node_B.z_size[1] - 2) {
    proc_control_node_B.t_huh = -1;
  } else {
    proc_control_node_B.t_huh = proc_control_node_B.z_size[1] - 3;
  }

  if (2 > proc_control_node_B.z_size[1] - 1) {
    proc_control_node_B.w_d = 0;
    proc_control_node_B.v_hi = -1;
  } else {
    proc_control_node_B.w_d = 1;
    proc_control_node_B.v_hi = proc_control_node_B.z_size[1] - 2;
  }

  if (3 > proc_control_node_B.z_size[1]) {
    proc_control_node_B.ab = 0;
    proc_control_node_B.y_bl = -1;
  } else {
    proc_control_node_B.ab = 2;
    proc_control_node_B.y_bl = proc_control_node_B.z_size[1] - 1;
  }

  if (1 > proc_control_node_B.alpha_size[1] - 1) {
    proc_control_node_B.cb_p = -1;
  } else {
    proc_control_node_B.cb_p = proc_control_node_B.alpha_size[1] - 2;
  }

  if (2 > proc_control_node_B.alpha_size[1]) {
    proc_control_node_B.fb = 0;
    proc_control_node_B.eb = -1;
  } else {
    proc_control_node_B.fb = 1;
    proc_control_node_B.eb = proc_control_node_B.alpha_size[1] - 1;
  }

  proc_control_node_B.z_size_p[0] = 1;
  proc_control_node_B.loop_ub_cs = proc_control_node_B.e_kr -
    proc_control_node_B.f_c;
  proc_control_node_B.z_size_p[1] = proc_control_node_B.loop_ub_cs + 1;
  for (proc_control_node_B.e_kr = 0; proc_control_node_B.e_kr <=
       proc_control_node_B.loop_ub_cs; proc_control_node_B.e_kr++) {
    proc_control_node_B.z_data_pp[proc_control_node_B.e_kr] =
      proc_control_node_B.z_data_p[proc_control_node_B.f_c +
      proc_control_node_B.e_kr];
  }

  proc_control_node_B.loop_ub_cs = z_data_tmp - dz_re_tmp;
  for (proc_control_node_B.e_kr = 0; proc_control_node_B.e_kr <=
       proc_control_node_B.loop_ub_cs; proc_control_node_B.e_kr++) {
    proc_control_node_B.zorig_data[proc_control_node_B.e_kr] =
      proc_control_node_B.dz_data_f[dz_re_tmp + proc_control_node_B.e_kr];
  }

  proc_control_node_B.l_size[0] = 1;
  proc_control_node_B.l_size[1] = proc_control_node_B.t_huh + 1;
  if (0 <= proc_control_node_B.t_huh) {
    memcpy(&proc_control_node_B.l_data_m[0], &proc_control_node_B.l_data_d[0],
           (proc_control_node_B.t_huh + 1) * sizeof(real_T));
  }

  proc_control_node_B.l_size_k[0] = 1;
  proc_control_node_B.loop_ub_cs = proc_control_node_B.v_hi -
    proc_control_node_B.w_d;
  proc_control_node_B.l_size_k[1] = proc_control_node_B.loop_ub_cs + 1;
  for (proc_control_node_B.e_kr = 0; proc_control_node_B.e_kr <=
       proc_control_node_B.loop_ub_cs; proc_control_node_B.e_kr++) {
    proc_control_node_B.l_data_n[proc_control_node_B.e_kr] =
      proc_control_node_B.l_data_d[proc_control_node_B.w_d +
      proc_control_node_B.e_kr];
  }

  proc_control_node_B.l_size_g[0] = 1;
  proc_control_node_B.loop_ub_cs = proc_control_node_B.y_bl -
    proc_control_node_B.ab;
  proc_control_node_B.l_size_g[1] = proc_control_node_B.loop_ub_cs + 1;
  for (proc_control_node_B.e_kr = 0; proc_control_node_B.e_kr <=
       proc_control_node_B.loop_ub_cs; proc_control_node_B.e_kr++) {
    proc_control_node_B.l_data_e[proc_control_node_B.e_kr] =
      proc_control_node_B.l_data_d[proc_control_node_B.ab +
      proc_control_node_B.e_kr];
  }

  if (0 <= proc_control_node_B.cb_p) {
    memcpy(&proc_control_node_B.alpha_data_j[0],
           &proc_control_node_B.alpha_data_o[0], (proc_control_node_B.cb_p + 1) *
           sizeof(real_T));
  }

  proc_control_node_B.loop_ub_cs = proc_control_node_B.eb -
    proc_control_node_B.fb;
  for (proc_control_node_B.e_kr = 0; proc_control_node_B.e_kr <=
       proc_control_node_B.loop_ub_cs; proc_control_node_B.e_kr++) {
    proc_control_node_B.alpha_data_i[proc_control_node_B.e_kr] =
      proc_control_node_B.alpha_data_o[proc_control_node_B.fb +
      proc_control_node_B.e_kr];
  }

  proc_control_node_midcurve(proc_control_node_B.z_data_pp,
    proc_control_node_B.z_size_p, proc_control_node_B.zorig_data,
    proc_control_node_B.l_data_m, proc_control_node_B.l_size,
    proc_control_node_B.l_data_n, proc_control_node_B.l_size_k,
    proc_control_node_B.l_data_e, proc_control_node_B.l_size_g,
    proc_control_node_B.alpha_data_j, proc_control_node_B.alpha_data_i,
    proc_control_node_B.znew_data_g, proc_control_node_B.dz_size);
  proc_control_node_B.loop_ub_cs = static_cast<int32_T>(nmax) - 1;
  if (0 <= proc_control_node_B.loop_ub_cs) {
    memset(&Zout_data[0], 0, (proc_control_node_B.loop_ub_cs + 1) * sizeof
           (creal_T));
  }

  for (proc_control_node_B.e_kr = 0; proc_control_node_B.e_kr <
       proc_control_node_B.loop_ub_tmp_tmp_b; proc_control_node_B.e_kr++) {
    Zout_data[proc_control_node_B.e_kr << 1] =
      zorig_data[proc_control_node_B.e_kr];
  }

  if (2 > (proc_control_node_B.dz_size[1] << 1) + 1) {
    proc_control_node_B.loop_ub_tmp_tmp_b = 0;
    proc_control_node_B.f_c = 1;
  } else {
    proc_control_node_B.loop_ub_tmp_tmp_b = 1;
    proc_control_node_B.f_c = 2;
  }

  proc_control_node_B.loop_ub_cs = proc_control_node_B.dz_size[1];
  for (proc_control_node_B.e_kr = 0; proc_control_node_B.e_kr <
       proc_control_node_B.loop_ub_cs; proc_control_node_B.e_kr++) {
    Zout_data[proc_control_node_B.loop_ub_tmp_tmp_b + proc_control_node_B.f_c *
      proc_control_node_B.e_kr] =
      proc_control_node_B.znew_data_g[proc_control_node_B.e_kr];
  }

  proc_control_node_B.loop_ub_cs = static_cast<int32_T>(2.0 * m - 1.0);
  for (proc_control_node_B.e_kr = 0; proc_control_node_B.e_kr <
       proc_control_node_B.loop_ub_cs; proc_control_node_B.e_kr++) {
  }

  Zout_size[0] = 1;
  Zout_size[1] = proc_control_node_B.loop_ub_cs;
}

static void proc_control_node_optimize_b(const creal_T zcurrent_data[], const
  int32_T zcurrent_size[2], const creal_T zorig_data[], const int32_T
  zorig_size[2], const creal_T varargin_1[2], creal_T Zout_data[], int32_T
  Zout_size[2])
{
  proc_control_no_endpointpadding(zcurrent_data, zcurrent_size, varargin_1,
    &proc_control_node_B.zleft_l, &proc_control_node_B.zright_g);
  proc_control_node_B.z_size_d[0] = 1;
  proc_control_node_B.z_size_d[1] = zcurrent_size[1] + 2;
  proc_control_node_B.loop_ub_hv = zcurrent_size[1] - 1;
  proc_control_node_B.z_data_tmp = 0;
  proc_control_node_B.z_data_c[proc_control_node_B.z_data_tmp] =
    proc_control_node_B.zleft_l;
  if (0 <= proc_control_node_B.loop_ub_hv) {
    memcpy(&proc_control_node_B.z_data_c[1], &zcurrent_data[0],
           (proc_control_node_B.loop_ub_hv + 1) * sizeof(creal_T));
  }

  proc_control_node_B.z_data_c[zcurrent_size[1] + 1] =
    proc_control_node_B.zright_g;
  proc_control_node_diff(proc_control_node_B.z_data_c,
    proc_control_node_B.z_size_d, proc_control_node_B.d1_data_g,
    proc_control_node_B.d1_size_p);
  proc_control_node_abs(proc_control_node_B.d1_data_g,
                        proc_control_node_B.d1_size_p,
                        proc_control_node_B.l1_data_bj,
                        proc_control_node_B.z_size_d);
  proc_control_node_B.loop_ub_hv = zcurrent_size[1] - 1;
  for (proc_control_node_B.i_j = 0; proc_control_node_B.i_j <=
       proc_control_node_B.loop_ub_hv; proc_control_node_B.i_j++) {
    proc_control_node_B.d2_re_tmp_c = proc_control_node_B.i_j;
    proc_control_node_B.fb_e = proc_control_node_B.i_j + 2;
    proc_control_node_B.d2_data_l[proc_control_node_B.d2_re_tmp_c].re =
      proc_control_node_B.z_data_c[proc_control_node_B.fb_e].re -
      proc_control_node_B.z_data_c[proc_control_node_B.d2_re_tmp_c].re;
    proc_control_node_B.d2_data_l[proc_control_node_B.d2_re_tmp_c].im =
      proc_control_node_B.z_data_c[proc_control_node_B.fb_e].im -
      proc_control_node_B.z_data_c[proc_control_node_B.d2_re_tmp_c].im;
  }

  if (2 > zcurrent_size[1] - 1) {
    proc_control_node_B.j_my = 0;
    proc_control_node_B.i_j = -1;
  } else {
    proc_control_node_B.j_my = 1;
    proc_control_node_B.i_j = zcurrent_size[1] - 2;
  }

  proc_control_node_B.d2_size_b[0] = 1;
  proc_control_node_B.loop_ub_hv = proc_control_node_B.i_j -
    proc_control_node_B.j_my;
  proc_control_node_B.d2_size_b[1] = proc_control_node_B.loop_ub_hv + 1;
  for (proc_control_node_B.i_j = 0; proc_control_node_B.i_j <=
       proc_control_node_B.loop_ub_hv; proc_control_node_B.i_j++) {
    proc_control_node_B.d2_re_tmp = proc_control_node_B.j_my +
      proc_control_node_B.i_j;
    proc_control_node_B.d2_re =
      proc_control_node_B.d2_data_l[proc_control_node_B.d2_re_tmp].re;
    proc_control_node_B.d2_im =
      -proc_control_node_B.d2_data_l[proc_control_node_B.d2_re_tmp].im;
    proc_control_node_B.d2_re_tmp_c = proc_control_node_B.i_j;
    proc_control_node_B.d2_data_b[proc_control_node_B.d2_re_tmp_c].re =
      proc_control_node_B.d2_re *
      proc_control_node_B.d1_data_g[proc_control_node_B.d2_re_tmp_c].re -
      proc_control_node_B.d2_im *
      proc_control_node_B.d1_data_g[proc_control_node_B.d2_re_tmp_c].im;
    proc_control_node_B.d2_data_b[proc_control_node_B.d2_re_tmp_c].im =
      proc_control_node_B.d2_re *
      proc_control_node_B.d1_data_g[proc_control_node_B.d2_re_tmp_c].im +
      proc_control_node_B.d2_im *
      proc_control_node_B.d1_data_g[proc_control_node_B.d2_re_tmp_c].re;
  }

  proc_control_node_angle(proc_control_node_B.d2_data_b,
    proc_control_node_B.d2_size_b, proc_control_node_B.tmp_data_o,
    proc_control_node_B.tmp_size_d);
  proc_control_node_B.loop_ub_hv = proc_control_node_B.tmp_size_d[1];
  if (0 <= proc_control_node_B.loop_ub_hv - 1) {
    memcpy(&proc_control_node_B.alpha_data_c[0],
           &proc_control_node_B.tmp_data_o[0], proc_control_node_B.loop_ub_hv *
           sizeof(real_T));
  }

  if (4 > proc_control_node_B.d1_size_p[1]) {
    proc_control_node_B.j_my = 0;
    proc_control_node_B.i_j = -1;
  } else {
    proc_control_node_B.j_my = 3;
    proc_control_node_B.i_j = proc_control_node_B.d1_size_p[1] - 1;
  }

  if (2 > zcurrent_size[1] - 1) {
    proc_control_node_B.d2_re_tmp = 0;
  } else {
    proc_control_node_B.d2_re_tmp = 1;
  }

  proc_control_node_B.d1_size_o[0] = 1;
  proc_control_node_B.loop_ub_hv = proc_control_node_B.i_j -
    proc_control_node_B.j_my;
  proc_control_node_B.d1_size_o[1] = proc_control_node_B.loop_ub_hv + 1;
  for (proc_control_node_B.i_j = 0; proc_control_node_B.i_j <=
       proc_control_node_B.loop_ub_hv; proc_control_node_B.i_j++) {
    proc_control_node_B.d2_re_tmp_c = proc_control_node_B.j_my +
      proc_control_node_B.i_j;
    proc_control_node_B.d2_re =
      proc_control_node_B.d1_data_g[proc_control_node_B.d2_re_tmp_c].re;
    proc_control_node_B.d2_im =
      -proc_control_node_B.d1_data_g[proc_control_node_B.d2_re_tmp_c].im;
    proc_control_node_B.d2_re_tmp_c = proc_control_node_B.d2_re_tmp +
      proc_control_node_B.i_j;
    proc_control_node_B.fb_e = proc_control_node_B.i_j;
    proc_control_node_B.d1_data_d[proc_control_node_B.fb_e].re =
      proc_control_node_B.d2_data_l[proc_control_node_B.d2_re_tmp_c].re *
      proc_control_node_B.d2_re -
      proc_control_node_B.d2_data_l[proc_control_node_B.d2_re_tmp_c].im *
      proc_control_node_B.d2_im;
    proc_control_node_B.d1_data_d[proc_control_node_B.fb_e].im =
      proc_control_node_B.d2_data_l[proc_control_node_B.d2_re_tmp_c].im *
      proc_control_node_B.d2_re +
      proc_control_node_B.d2_data_l[proc_control_node_B.d2_re_tmp_c].re *
      proc_control_node_B.d2_im;
  }

  proc_control_node_angle(proc_control_node_B.d1_data_d,
    proc_control_node_B.d1_size_o, proc_control_node_B.tmp_data_o,
    proc_control_node_B.tmp_size_d);
  proc_control_node_B.loop_ub_hv = proc_control_node_B.tmp_size_d[1];
  if (0 <= proc_control_node_B.loop_ub_hv - 1) {
    memcpy(&proc_control_node_B.beta_data[0], &proc_control_node_B.tmp_data_o[0],
           proc_control_node_B.loop_ub_hv * sizeof(real_T));
  }

  if ((!rtIsNaN(varargin_1[0].re)) && (!rtIsNaN(varargin_1[0].im))) {
    proc_control_node_B.l1_data_bj[proc_control_node_B.z_data_tmp] = 0.0;
    proc_control_node_B.i_j = 1;
    proc_control_node_B.alpha_data_c[proc_control_node_B.z_data_tmp] =
      rt_atan2d_snf(proc_control_node_B.d2_data_l[proc_control_node_B.i_j].re *
                    varargin_1[0].im +
                    -proc_control_node_B.d2_data_l[proc_control_node_B.i_j].im *
                    varargin_1[0].re,
                    proc_control_node_B.d2_data_l[proc_control_node_B.i_j].re *
                    varargin_1[0].re -
                    -proc_control_node_B.d2_data_l[proc_control_node_B.i_j].im *
                    varargin_1[0].im);
  }

  if ((!rtIsNaN(varargin_1[1].re)) && (!rtIsNaN(varargin_1[1].im))) {
    proc_control_node_B.l1_data_bj[proc_control_node_B.z_size_d[1] - 1] = 0.0;
    proc_control_node_B.i_j = zcurrent_size[1] - 2;
    proc_control_node_B.beta_data[proc_control_node_B.tmp_size_d[1] - 1] =
      rt_atan2d_snf(proc_control_node_B.d2_data_l[proc_control_node_B.i_j].im *
                    varargin_1[1].re +
                    proc_control_node_B.d2_data_l[proc_control_node_B.i_j].re *
                    -varargin_1[1].im,
                    proc_control_node_B.d2_data_l[proc_control_node_B.i_j].re *
                    varargin_1[1].re -
                    proc_control_node_B.d2_data_l[proc_control_node_B.i_j].im *
                    -varargin_1[1].im);
  }

  if (1 > zcurrent_size[1] - 2) {
    proc_control_node_B.loop_ub_hv = -1;
  } else {
    proc_control_node_B.loop_ub_hv = zcurrent_size[1] - 3;
  }

  if (2 > zcurrent_size[1] - 1) {
    proc_control_node_B.j_my = 0;
    proc_control_node_B.i_j = -1;
  } else {
    proc_control_node_B.j_my = 1;
    proc_control_node_B.i_j = zcurrent_size[1] - 2;
  }

  if (1 > proc_control_node_B.z_size_d[1] - 3) {
    proc_control_node_B.d2_re_tmp = -1;
  } else {
    proc_control_node_B.d2_re_tmp = proc_control_node_B.z_size_d[1] - 4;
  }

  if (2 > proc_control_node_B.z_size_d[1] - 2) {
    proc_control_node_B.d2_re_tmp_c = 0;
    proc_control_node_B.fb_e = -1;
  } else {
    proc_control_node_B.d2_re_tmp_c = 1;
    proc_control_node_B.fb_e = proc_control_node_B.z_size_d[1] - 3;
  }

  if (3 > proc_control_node_B.z_size_d[1] - 1) {
    proc_control_node_B.jb = 0;
  } else {
    proc_control_node_B.jb = 2;
  }

  if (4 > proc_control_node_B.z_size_d[1]) {
    proc_control_node_B.ob = 0;
    proc_control_node_B.nb = -1;
  } else {
    proc_control_node_B.ob = 3;
    proc_control_node_B.nb = proc_control_node_B.z_size_d[1] - 1;
  }

  proc_control_node_B.d2_size_b[0] = 1;
  proc_control_node_B.d2_size_b[1] = proc_control_node_B.loop_ub_hv + 1;
  if (0 <= proc_control_node_B.loop_ub_hv) {
    memcpy(&proc_control_node_B.d2_data_b[0], &zcurrent_data[0],
           (proc_control_node_B.loop_ub_hv + 1) * sizeof(creal_T));
  }

  proc_control_node_B.loop_ub_hv = proc_control_node_B.i_j -
    proc_control_node_B.j_my;
  for (proc_control_node_B.i_j = 0; proc_control_node_B.i_j <=
       proc_control_node_B.loop_ub_hv; proc_control_node_B.i_j++) {
    proc_control_node_B.d1_data_d[proc_control_node_B.i_j] =
      proc_control_node_B.d2_data_l[proc_control_node_B.j_my +
      proc_control_node_B.i_j];
  }

  proc_control_node_B.l1_size_j[0] = 1;
  proc_control_node_B.l1_size_j[1] = proc_control_node_B.d2_re_tmp + 1;
  if (0 <= proc_control_node_B.d2_re_tmp) {
    memcpy(&proc_control_node_B.l1_data_p[0], &proc_control_node_B.l1_data_bj[0],
           (proc_control_node_B.d2_re_tmp + 1) * sizeof(real_T));
  }

  proc_control_node_B.l1_size_p[0] = 1;
  proc_control_node_B.loop_ub_hv = proc_control_node_B.fb_e -
    proc_control_node_B.d2_re_tmp_c;
  proc_control_node_B.l1_size_p[1] = proc_control_node_B.loop_ub_hv + 1;
  for (proc_control_node_B.i_j = 0; proc_control_node_B.i_j <=
       proc_control_node_B.loop_ub_hv; proc_control_node_B.i_j++) {
    proc_control_node_B.l1_data_h[proc_control_node_B.i_j] =
      proc_control_node_B.l1_data_bj[proc_control_node_B.d2_re_tmp_c +
      proc_control_node_B.i_j] +
      proc_control_node_B.l1_data_bj[proc_control_node_B.jb +
      proc_control_node_B.i_j];
  }

  proc_control_node_B.l1_size_l[0] = 1;
  proc_control_node_B.loop_ub_hv = proc_control_node_B.nb -
    proc_control_node_B.ob;
  proc_control_node_B.l1_size_l[1] = proc_control_node_B.loop_ub_hv + 1;
  for (proc_control_node_B.i_j = 0; proc_control_node_B.i_j <=
       proc_control_node_B.loop_ub_hv; proc_control_node_B.i_j++) {
    proc_control_node_B.l1_data_j[proc_control_node_B.i_j] =
      proc_control_node_B.l1_data_bj[proc_control_node_B.ob +
      proc_control_node_B.i_j];
  }

  proc_control_node_midcurve(proc_control_node_B.d2_data_b,
    proc_control_node_B.d2_size_b, proc_control_node_B.d1_data_d,
    proc_control_node_B.l1_data_p, proc_control_node_B.l1_size_j,
    proc_control_node_B.l1_data_h, proc_control_node_B.l1_size_p,
    proc_control_node_B.l1_data_j, proc_control_node_B.l1_size_l,
    proc_control_node_B.alpha_data_c, proc_control_node_B.beta_data,
    proc_control_node_B.tmp_data_l, proc_control_node_B.tmp_size_d);
  Zout_size[0] = 1;
  Zout_size[1] = proc_control_node_B.tmp_size_d[1] + 2;
  Zout_data[proc_control_node_B.z_data_tmp] =
    zorig_data[proc_control_node_B.z_data_tmp];
  proc_control_node_B.loop_ub_hv = proc_control_node_B.tmp_size_d[1];
  if (0 <= proc_control_node_B.loop_ub_hv - 1) {
    memcpy(&Zout_data[1], &proc_control_node_B.tmp_data_l[0],
           proc_control_node_B.loop_ub_hv * sizeof(creal_T));
  }

  Zout_data[proc_control_node_B.tmp_size_d[1] + 1] = zorig_data[zorig_size[1] -
    1];
  proc_control_node_B.d2_re = static_cast<real_T>(zcurrent_size[1] - zorig_size
    [1]) / (static_cast<real_T>(zorig_size[1]) - 1.0) + 1.0;
  if ((proc_control_node_B.d2_re == 0.0) || (0.0 > proc_control_node_B.d2_re)) {
    proc_control_node_B.j_my = 1;
  } else {
    proc_control_node_B.j_my = static_cast<int32_T>(proc_control_node_B.d2_re);
  }

  proc_control_node_B.loop_ub_hv = zorig_size[1];
  for (proc_control_node_B.i_j = 0; proc_control_node_B.i_j <
       proc_control_node_B.loop_ub_hv; proc_control_node_B.i_j++) {
    Zout_data[proc_control_node_B.j_my * proc_control_node_B.i_j] =
      zorig_data[proc_control_node_B.i_j];
  }
}

static void proc_control_node_cloth_b(const creal_T z_data[], const int32_T
  *z_size, const creal_T varargin_1[2], real_T r_data[], int32_T r_size[2],
  real_T s_data[], int32_T s_size[2])
{
  proc_control_node_B.nmax = ((*z_size - 1) << 7) + 1;
  proc_control_node_B.loop_ub_me = proc_control_node_B.nmax - 1;
  if (0 <= proc_control_node_B.loop_ub_me) {
    memset(&proc_control_node_B.Zout_data_m[0], 0,
           (proc_control_node_B.loop_ub_me + 1) * sizeof(creal_T));
  }

  proc_control_node_B.m_p = *z_size;
  proc_control_node_B.loop_ub_me = *z_size;
  if (0 <= proc_control_node_B.loop_ub_me - 1) {
    memcpy(&proc_control_node_B.Zout_data_m[0], &z_data[0],
           proc_control_node_B.loop_ub_me * sizeof(creal_T));
  }

  proc_control_node_B.iv5[0] = 1;
  proc_control_node_B.iv5[1] = *z_size;
  proc_control_node_B.iv6[0] = 1;
  proc_control_node_B.iv6[1] = *z_size;
  proc_control_node_B.iv7[0] = 1;
  proc_control_node_B.iv7[1] = *z_size;
  for (proc_control_node_B.i_h = 0; proc_control_node_B.i_h < 7;
       proc_control_node_B.i_h++) {
    proc_control_node_B.mnew = 2.0 * proc_control_node_B.m_p - 1.0;
    proc_control_no_insertCodegen_b(proc_control_node_B.Zout_data_m,
      proc_control_node_B.m_p, static_cast<real_T>(proc_control_node_B.nmax),
      varargin_1, proc_control_node_B.Zout_data_n, proc_control_node_B.Zout_size);
    proc_control_node_B.loop_ub_me = proc_control_node_B.Zout_size[1];
    if (0 <= proc_control_node_B.loop_ub_me - 1) {
      memcpy(&proc_control_node_B.Zout_data_m[0],
             &proc_control_node_B.Zout_data_n[0], proc_control_node_B.loop_ub_me
             * sizeof(creal_T));
    }

    proc_control_node_B.loop_ub_tmp_tmp = static_cast<int32_T>
      (proc_control_node_B.mnew);
    proc_control_node_B.Zout_size[0] = 1;
    proc_control_node_B.Zout_size[1] = static_cast<int32_T>
      (proc_control_node_B.mnew);
    if (0 <= proc_control_node_B.loop_ub_tmp_tmp - 1) {
      memcpy(&proc_control_node_B.Zout_data_n[0],
             &proc_control_node_B.Zout_data_m[0],
             proc_control_node_B.loop_ub_tmp_tmp * sizeof(creal_T));
    }

    proc_control_node_optimize_b(proc_control_node_B.Zout_data_n,
      proc_control_node_B.Zout_size, z_data, proc_control_node_B.iv5, varargin_1,
      proc_control_node_B.tmp_data, proc_control_node_B.tmp_size_k5);
    proc_control_node_B.loop_ub_me = proc_control_node_B.tmp_size_k5[1];
    if (0 <= proc_control_node_B.loop_ub_me - 1) {
      memcpy(&proc_control_node_B.Zout_data_m[0], &proc_control_node_B.tmp_data
             [0], proc_control_node_B.loop_ub_me * sizeof(creal_T));
    }

    proc_control_node_B.Zout_size[0] = 1;
    proc_control_node_B.Zout_size[1] = static_cast<int32_T>
      (proc_control_node_B.mnew);
    if (0 <= proc_control_node_B.loop_ub_tmp_tmp - 1) {
      memcpy(&proc_control_node_B.Zout_data_n[0],
             &proc_control_node_B.Zout_data_m[0],
             proc_control_node_B.loop_ub_tmp_tmp * sizeof(creal_T));
    }

    proc_control_node_optimize_b(proc_control_node_B.Zout_data_n,
      proc_control_node_B.Zout_size, z_data, proc_control_node_B.iv6, varargin_1,
      proc_control_node_B.tmp_data, proc_control_node_B.tmp_size_k5);
    proc_control_node_B.loop_ub_me = proc_control_node_B.tmp_size_k5[1];
    if (0 <= proc_control_node_B.loop_ub_me - 1) {
      memcpy(&proc_control_node_B.Zout_data_m[0], &proc_control_node_B.tmp_data
             [0], proc_control_node_B.loop_ub_me * sizeof(creal_T));
    }

    proc_control_node_B.Zout_size[0] = 1;
    proc_control_node_B.Zout_size[1] = static_cast<int32_T>
      (proc_control_node_B.mnew);
    if (0 <= proc_control_node_B.loop_ub_tmp_tmp - 1) {
      memcpy(&proc_control_node_B.Zout_data_n[0],
             &proc_control_node_B.Zout_data_m[0],
             proc_control_node_B.loop_ub_tmp_tmp * sizeof(creal_T));
    }

    proc_control_node_optimize_b(proc_control_node_B.Zout_data_n,
      proc_control_node_B.Zout_size, z_data, proc_control_node_B.iv7, varargin_1,
      proc_control_node_B.tmp_data, proc_control_node_B.tmp_size_k5);
    proc_control_node_B.loop_ub_me = proc_control_node_B.tmp_size_k5[1];
    if (0 <= proc_control_node_B.loop_ub_me - 1) {
      memcpy(&proc_control_node_B.Zout_data_m[0], &proc_control_node_B.tmp_data
             [0], proc_control_node_B.loop_ub_me * sizeof(creal_T));
    }

    proc_control_node_B.m_p = proc_control_node_B.mnew;
  }

  r_size[0] = 1;
  r_size[1] = proc_control_node_B.nmax;
  proc_control_node_B.loop_ub_me = proc_control_node_B.nmax - 1;
  for (proc_control_node_B.i_h = 0; proc_control_node_B.i_h <=
       proc_control_node_B.loop_ub_me; proc_control_node_B.i_h++) {
    proc_control_node_B.loop_ub_tmp_tmp = proc_control_node_B.i_h;
    r_data[proc_control_node_B.loop_ub_tmp_tmp] =
      proc_control_node_B.Zout_data_m[proc_control_node_B.loop_ub_tmp_tmp].re;
  }

  s_size[0] = 1;
  s_size[1] = proc_control_node_B.nmax;
  for (proc_control_node_B.i_h = 0; proc_control_node_B.i_h <=
       proc_control_node_B.loop_ub_me; proc_control_node_B.i_h++) {
    proc_control_node_B.nmax = proc_control_node_B.i_h;
    s_data[proc_control_node_B.nmax] =
      proc_control_node_B.Zout_data_m[proc_control_node_B.nmax].im;
  }
}

static void proc_control_nod_packageCodegen(const real_T r_data[], const real_T
  s_data[], real_T n, real_T u_data[], int32_T *u_size, real_T v_data[], int32_T
  *v_size)
{
  int32_T loop_ub_tmp;
  int32_T u_data_tmp;
  loop_ub_tmp = static_cast<int32_T>(n);
  *u_size = static_cast<int32_T>(n);
  *v_size = static_cast<int32_T>(n);
  for (u_data_tmp = 0; u_data_tmp < loop_ub_tmp; u_data_tmp++) {
    u_data[u_data_tmp] = 0.0;
    v_data[u_data_tmp] = 0.0;
    u_data[u_data_tmp] = r_data[u_data_tmp];
    v_data[u_data_tmp] = s_data[u_data_tmp];
  }
}

static void proc_control_node_dclothoidwp_b(const real_T x_data[], const int32_T
  *x_size, const real_T y_data[], const real_T varargin_1[2], const real_T
  varargin_2[2], real_T u_data[], int32_T *u_size, real_T v_data[], int32_T
  *v_size)
{
  proc_control_node_B.x_size_g1 = *x_size;
  proc_control_node_B.loop_ub_k = *x_size;
  for (proc_control_node_B.i16 = 0; proc_control_node_B.i16 <
       proc_control_node_B.loop_ub_k; proc_control_node_B.i16++) {
    proc_control_node_B.x_data_g[proc_control_node_B.i16].re =
      x_data[proc_control_node_B.i16];
    proc_control_node_B.x_data_g[proc_control_node_B.i16].im =
      y_data[proc_control_node_B.i16];
  }

  proc_control_node_B.varargin_1[0].re = varargin_1[0];
  proc_control_node_B.varargin_1[0].im = varargin_2[0];
  proc_control_node_B.varargin_1[1].re = varargin_1[1];
  proc_control_node_B.varargin_1[1].im = varargin_2[1];
  proc_control_node_cloth_b(proc_control_node_B.x_data_g,
    &proc_control_node_B.x_size_g1, proc_control_node_B.varargin_1,
    proc_control_node_B.r_data, proc_control_node_B.r_size,
    proc_control_node_B.s_data, proc_control_node_B.s_size);
  proc_control_nod_packageCodegen(proc_control_node_B.r_data,
    proc_control_node_B.s_data, 128.0 * (static_cast<real_T>(*x_size) - 1.0) +
    1.0, u_data, u_size, v_data, v_size);
}

static void proc_control_node_angle_b(const creal_T x_data[], const int32_T
  *x_size, real_T y_data[], int32_T *y_size)
{
  int32_T b_k;
  int32_T nx;
  nx = *x_size - 1;
  *y_size = *x_size;
  for (b_k = 0; b_k <= nx; b_k++) {
    y_data[b_k] = rt_atan2d_snf(x_data[b_k].im, x_data[b_k].re);
  }
}

static void proc_control_node_power(const real_T a_data[], const int32_T *a_size,
  real_T y_data[], int32_T *y_size)
{
  int32_T b_k;
  int32_T nx;
  *y_size = *a_size;
  nx = *a_size - 1;
  for (b_k = 0; b_k <= nx; b_k++) {
    proc_control_node_B.a_k = a_data[b_k];
    y_data[b_k] = proc_control_node_B.a_k * proc_control_node_B.a_k;
  }
}

static void proc_control_node_repmat(const real_T a_data[], const int32_T
  *a_size, real_T b_data[], int32_T b_size[2])
{
  int32_T b_jtilecol;
  int32_T b_k;
  int32_T ibtile;
  int32_T nrows;
  b_size[0] = *a_size;
  b_size[1] = 25;
  nrows = *a_size;
  for (b_jtilecol = 0; b_jtilecol < 25; b_jtilecol++) {
    ibtile = b_jtilecol * *a_size - 1;
    for (b_k = 0; b_k < nrows; b_k++) {
      b_data[(ibtile + b_k) + 1] = a_data[b_k];
    }
  }
}

static void proc_control_n_useConstantDim_b(const real_T varargin_2_data[],
  const int32_T varargin_2_size[2], real_T varargout_1_data[], int32_T
  varargout_1_size[2])
{
  int32_T varargout_1;
  int32_T varargout_1_0;
  int32_T varargout_1_data_tmp;
  varargout_1_size[0] = varargin_2_size[0];
  varargout_1_size[1] = varargin_2_size[1];
  proc_control_node_B.loop_ub_fq = varargin_2_size[0] * varargin_2_size[1];
  if (0 <= proc_control_node_B.loop_ub_fq - 1) {
    memcpy(&varargout_1_data[0], &varargin_2_data[0],
           proc_control_node_B.loop_ub_fq * sizeof(real_T));
  }

  if ((varargin_2_size[0] != 0) && (varargin_2_size[1] != 0)) {
    proc_control_node_B.loop_ub_fq = varargin_2_size[1] - 2;
    for (varargout_1 = 0; varargout_1 <= proc_control_node_B.loop_ub_fq;
         varargout_1++) {
      varargout_1_0 = varargout_1_size[0] - 1;
      for (proc_control_node_B.b_k_n1 = 0; proc_control_node_B.b_k_n1 <=
           varargout_1_0; proc_control_node_B.b_k_n1++) {
        varargout_1_data_tmp = proc_control_node_B.b_k_n1 + varargout_1_size[0] *
          (varargout_1 + 1);
        varargout_1_data[varargout_1_data_tmp] *=
          varargout_1_data[proc_control_node_B.b_k_n1 + varargout_1_size[0] *
          varargout_1];
      }
    }
  }
}

static void proc_control_node_fetchAgrad_b(const real_T x_data[], const int32_T *
  x_size, const real_T y_data[], real_T a_data[], int32_T *a_size, real_T
  dadx_data[], int32_T *dadx_size, real_T dady_data[], int32_T *dady_size)
{
  boolean_T result;
  static const real_T tmp[351] = { -1.5361481088532109E-40,
    -5.1782003708968662E-38, 5.8080516979367073E-38, -6.2922109794702842E-36,
    1.7744129415359022E-35, -9.8266873453160865E-36, -3.0557011816989596E-34,
    1.9988681524430764E-33, -2.7007621230825949E-33, 9.6497076628562535E-34,
    -8.50146594503621E-33, 8.7613736854720049E-32, -2.8258679893784358E-31,
    2.3637604856716169E-31, -5.8556266604372106E-32, -1.2863962524996432E-31,
    2.229093841830142E-30, -1.1057059963507232E-29, 2.3139349101185755E-29,
    -1.2630223562649489E-29, 2.0068564650639364E-30, -1.1052377502159136E-30,
    3.0309726719642508E-29, -2.57153235020298E-28, 7.9357820762496212E-28,
    -1.1834423538462616E-27, 3.7518152500494656E-28, -9.5988758699827141E-30,
    -5.8444661902772888E-30, 2.2799302267031842E-28, -3.118708591261201E-27,
    1.6937953593997347E-26, -3.4234259338177584E-26, 3.675290577810477E-26,
    -1.6183294340108731E-27, -2.9209077909746285E-27, -2.0493494333051533E-29,
    1.0232091530758262E-27, -2.0119872415420161E-26, 1.8157191663212143E-25,
    -6.8278782273948665E-25, 7.9289707228553727E-25, -5.1713140278139824E-25,
    -3.5757401738269863E-25, 1.7191521549607673E-25, -5.001307006229815E-29,
    2.9234616420394369E-27, -7.3372627735809734E-26, 9.6978563886575261E-25,
    -6.3976458551757164E-24, 1.6073455072306433E-23, -7.37463587795066E-25,
    -7.0522343048774666E-24, 1.4805755563608624E-23, -5.1965352404273039E-24,
    -8.5391792173019132E-29, 5.4962692899068422E-27, -1.5546891778194411E-25,
    2.6049795261751296E-24, -2.6172058881327836E-23, 1.2985982037510549E-22,
    -1.423772303418446E-22, -5.8282903661876709E-22, 4.1133508360308628E-22,
    -1.742659308147939E-22, 8.07786256209318E-23, -9.7738126735700558E-29,
    6.6212355845436972E-27, -1.7707072436748613E-25, 2.8057133511879665E-24,
    -3.4869970759687543E-23, 3.0241871214865029E-22, -9.92012310209099E-22,
    -3.2149566866116185E-21, 1.8710249707031661E-20, -1.2453541845369618E-21,
    -7.5062472154050874E-21, 2.8499865852964518E-22, -6.9207112182904389E-29,
    4.4179830835754724E-27, -4.4762524882779791E-26, -2.450817653228083E-24,
    7.1914140604820392E-23, -7.2673875098954476E-22, 3.3571441047866719E-21,
    -1.5906878744538782E-20, 1.0715370660853569E-19, -2.1813900762258771E-19,
    -3.7882773476137619E-19, 4.4188357957185649E-19, -5.2046323054922296E-20,
    -2.8170935396816464E-29, 7.8914114794548443E-28, 1.528966070127476E-25,
    -1.1332880987718864E-23, 3.3104475572268851E-22, -4.9647512138578754E-21,
    3.9715384015216385E-20, -1.6290821269847189E-19, 3.36612516663913E-19,
    -3.36275918384194E-19, -2.8323208988729979E-18, 1.5348780107717589E-17,
    -1.2231243924447674E-17, 1.5460269152965008E-18, -1.0350259940425787E-29,
    -4.7414043171551787E-28, 1.9707672417753685E-25, -1.4495788889042659E-23,
    5.1378340796211685E-22, -1.0210774519786583E-20, 1.165542649503511E-19,
    -7.1421779330877591E-19, 1.6365283191176908E-18, 4.9170568130837211E-18,
    -4.4186234291063853E-17, 1.6247947613884891E-16, -3.4187835062780104E-16,
    2.2495563268135524E-16, -2.8304172442233909E-17, -9.54190907880087E-30,
    4.33416352213585E-28, 7.30606772876727E-26, -8.4789175470441986E-24,
    3.9746370968729408E-22, -1.0350198533651566E-20, 1.589371276512773E-19,
    -1.3721089740423357E-18, 4.7868869804965763E-18, 1.9699426816042335E-17,
    -2.7595647699194014E-16, 1.2612122765846683E-15, -3.3199758280144047E-15,
    5.1284109097493322E-15, -2.9773954125181772E-15, 3.6686222388116938E-16,
    -7.13761114432792E-30, 8.6070327678610011E-28, -2.5253411261423782E-26,
    -1.429985806399278E-24, 1.4200678258817658E-22, -5.2901273901739912E-21,
    1.0879148930261737E-19, -1.2468905412479112E-18, 5.651703115185149E-18,
    4.073824764700649E-17, -7.7193016891576893E-16, 5.1280294092344238E-15,
    -1.8830251965098877E-14, 4.2082102420983456E-14, -5.4816521831539046E-14,
    2.9056289127761095E-14, -3.5049036301087839E-15, -2.7032712394278119E-30,
    4.4439845217679321E-28, -2.8561533629781625E-26, 7.4263493149653183E-25,
    7.7648205291611823E-24, -1.1313407629960782E-21, 3.4992489982228452E-20,
    -5.11237062122324E-19, 1.9082838069139238E-18, 6.02161124473958E-17,
    -1.1855133738581856E-15, 1.0647602057665829E-14, -5.5915318620809614E-14,
    1.8096099090326831E-13, -3.6385985586845819E-13, 4.2410069501559273E-13,
    -2.106362282048389E-13, 2.4385529408308407E-14, -4.8547818044528891E-31,
    9.5570081279537094E-29, -7.8572054752482576E-27, 3.3174769183447452E-25,
    -6.2142341258768858E-24, -5.0991712996566211E-23, 5.1392990708290932E-21,
    -8.807706142947147E-20, -5.8182766640448854E-19, 5.1419279154935842E-17,
    -1.04407697522146E-15, 1.1898094238539857E-14, -8.5367937011271162E-14,
    3.9513126620957262E-13, -1.1748533341492665E-12, 2.1917257282808794E-12,
    -2.3566809884820566E-12, 1.0795020408261728E-12, -1.5837465906955864E-13,
    -2.7533507225420422E-32, 5.7619182837708977E-30, -4.6471657116787863E-28,
    1.4048422360791874E-26, 3.7650962241144584E-25, -4.9228435831327322E-23,
    1.9071729205179347E-21, -3.3490783882201909E-20, -7.018689437542322E-20,
    1.8324124104655822E-17, -4.7883976550407734E-16, 7.0487303907715931E-15,
    -6.735734123826801E-14, 4.3114382655453385E-13, -1.8436618496422663E-12,
    5.1655481921478335E-12, -9.1498502333527442E-12, 9.53768065186612E-12,
    -5.5096965823391316E-12, -1.9256688414961511E-12, 2.6993907913031997E-33,
    -8.3658508533748674E-31, 1.2360111759498158E-28, -1.1391057286564071E-26,
    7.1943116140837765E-25, -3.2278401611187206E-23, 1.0313736180462972E-21,
    -2.2595952680170383E-20, 2.9013328570466337E-19, -1.4189880636575127E-19,
    -8.2575877751974837E-17, 1.9535524420193836E-15, -2.60333162544509E-14,
    2.2905798368369833E-13, -1.3730942326110817E-12, 5.5797967300488639E-12,
    -1.5044456366394642E-11, 2.5612747661164289E-11, -1.9627816796196334E-11,
    -2.8036172295220303E-11, -1.9615478304946413E-10, 3.8934925377973957E-34,
    -1.2639609126235819E-31, 1.9287682878359229E-29, -1.8332237204928374E-27,
    1.2092531131064511E-25, -5.8236835135326278E-24, 2.0915581782354698E-22,
    -5.5964099612773872E-21, 1.0833579869797173E-19, -1.3736666335311385E-18,
    6.6209633655847283E-18, 1.4362053626673917E-16, -4.0159095765450877E-15,
    5.320276578988179E-14, -4.5399145021925304E-13, 2.6343951113716903E-12,
    -1.0426603808524378E-11, 2.7378813158203465E-11, -2.4213032965198892E-11,
    -6.43589148489966E-11, 8.7111108876109732E-11, -1.58880825805031E-8,
    1.2049379324305816E-35, -4.3610770108214582E-33, 7.4936434757448969E-31,
    -8.1105245364317889E-29, 6.1705088386370215E-27, -3.480752271664829E-25,
    1.4948191338667704E-23, -4.9368146563727049E-22, 1.2499110582545291E-20,
    -2.3793207120554828E-19, 3.2322327482741956E-18, -2.6498507726404211E-17,
    7.8731033015748051E-18, 3.2775331491296092E-15, -5.1807698267687295E-14,
    4.62732644627914E-13, -2.7239785524170987E-12, 1.0896716883650769E-11,
    -1.8645986337651637E-11, 2.5459617591435155E-12, -1.3347654837468073E-8,
    1.3161132276731047E-7, -1.3227534741608429E-6, -9.7984625010885519E-38,
    3.2900432333335651E-35, -4.4581754057254838E-33, 2.5824817729473294E-31,
    5.2049615357860253E-30, -2.1583876518311414E-27, 1.9476950757610683E-25,
    -1.0716316264212252E-23, 4.1440657240625748E-22, -1.1817624319451798E-20,
    2.5249339155046378E-19, -4.0233948389965105E-18, 4.64169135391771E-17,
    -3.5476759515651092E-16, 1.1999262837080123E-15, 8.516412269170767E-15,
    -1.527199343162684E-13, 1.1449867637138848E-12, -3.6599461401055181E-12,
    -4.6103940452468584E-11, -4.7424213964325014E-9, 1.4095535848735113E-8,
    1.1415162393763462E-5, -0.00011904761791914855, -7.7487127476207258E-39,
    3.1576790378728681E-36, -5.9250135047007422E-34, 6.7643789484475193E-32,
    -5.220570875188387E-30, 2.8506788574160792E-28, -1.1098370767710674E-26,
    2.9468645436878283E-25, -4.2328657438375513E-24, -3.3901276335768838E-23,
    3.8407990599986091E-21, -1.1933448342985106E-19, 2.3702576054378613E-18,
    -3.3709086299905129E-17, 3.5240422748635714E-16, -2.688297081936284E-15,
    1.4426938768292247E-14, -4.5785087028675909E-14, 1.6710103243486247E-14,
    -1.1024143067873009E-11, -3.3079062392811025E-10, 2.8376658214791753E-8,
    2.8265347449301076E-6, 3.9682541488440042E-5, -0.016666666666889381,
    -8.6841596356231729E-42, 3.1939131296905081E-39, -4.8490390875687847E-37,
    3.2729122440862841E-35, 5.3980586162289553E-34, -3.3686936226391223E-31,
    3.7197707807256541E-29, -2.5380412938111731E-27, 1.2494404817163045E-25,
    -4.6966036280739172E-24, 1.3852307187625331E-22, -3.2509821682467773E-21,
    6.1100085267801761E-20, -9.20594856358596E-19, 1.1081925404564449E-17,
    -1.0575868027372313E-16, 7.920139233623936E-16, -4.5514965597202215E-15,
    1.3296256931854534E-14, -3.345171633728989E-13, 1.7101904098836834E-11,
    2.4300392651460408E-9, 4.6155748216027864E-8, -1.5460729722609369E-5,
    -0.00238095238099261, 1.0000000000000047 };

  const real_T *c;
  proc_control_node_B.u_size_i = *x_size;
  proc_control_node_B.i_fj = *x_size;
  for (proc_control_node_B.result_m = 0; proc_control_node_B.result_m <
       proc_control_node_B.i_fj; proc_control_node_B.result_m++) {
    proc_control_node_B.u_data_f[proc_control_node_B.result_m] =
      x_data[proc_control_node_B.result_m] - y_data[proc_control_node_B.result_m];
  }

  proc_control_node_B.v_size_k = *x_size;
  proc_control_node_B.i_fj = *x_size;
  for (proc_control_node_B.result_m = 0; proc_control_node_B.result_m <
       proc_control_node_B.i_fj; proc_control_node_B.result_m++) {
    proc_control_node_B.v_data_g[proc_control_node_B.result_m] =
      x_data[proc_control_node_B.result_m] + y_data[proc_control_node_B.result_m];
  }

  c = &tmp[0];
  proc_control_node_B.n_oh = 351;
  proc_control_node_B.b_idx_0_o = *x_size;
  proc_control_node_power(proc_control_node_B.u_data_f,
    &proc_control_node_B.u_size_i, proc_control_node_B.tmp_data_f,
    &proc_control_node_B.tmp_size_kgg);
  proc_control_node_repmat(proc_control_node_B.tmp_data_f,
    &proc_control_node_B.tmp_size_kgg, proc_control_node_B.varargin_2_data_f,
    proc_control_node_B.varargin_2_size);
  if (*x_size != 0) {
    proc_control_node_B.result_k = *x_size;
  } else if (proc_control_node_B.varargin_2_size[0] != 0) {
    proc_control_node_B.result_k = proc_control_node_B.varargin_2_size[0];
  } else {
    proc_control_node_B.result_k = *x_size;
  }

  result = (proc_control_node_B.result_k == 0);
  if (result || (*x_size != 0)) {
    proc_control_node_B.i_fj = 1;
  } else {
    proc_control_node_B.i_fj = 0;
  }

  if (result || (proc_control_node_B.varargin_2_size[0] != 0)) {
    proc_control_node_B.result_m = 25;
  } else {
    proc_control_node_B.result_m = 0;
  }

  proc_control_node_B.result_size[0] = proc_control_node_B.result_k;
  proc_control_node_B.result_size[1] = proc_control_node_B.i_fj +
    proc_control_node_B.result_m;
  proc_control_node_B.i_fj *= proc_control_node_B.result_k;
  proc_control_node_B.result_k *= proc_control_node_B.result_m;
  for (proc_control_node_B.result_m = 0; proc_control_node_B.result_m <
       proc_control_node_B.i_fj; proc_control_node_B.result_m++) {
    proc_control_node_B.result_data[proc_control_node_B.result_m] = 1.0;
  }

  for (proc_control_node_B.result_m = 0; proc_control_node_B.result_m <
       proc_control_node_B.result_k; proc_control_node_B.result_m++) {
    proc_control_node_B.result_data[proc_control_node_B.result_m +
      proc_control_node_B.i_fj] =
      proc_control_node_B.varargin_2_data_f[proc_control_node_B.result_m];
  }

  proc_control_n_useConstantDim_b(proc_control_node_B.result_data,
    proc_control_node_B.result_size, proc_control_node_B.x_data,
    proc_control_node_B.x_size);
  proc_control_node_power(proc_control_node_B.v_data_g,
    &proc_control_node_B.v_size_k, proc_control_node_B.tmp_data_f,
    &proc_control_node_B.tmp_size_kgg);
  proc_control_node_repmat(proc_control_node_B.tmp_data_f,
    &proc_control_node_B.tmp_size_kgg, proc_control_node_B.varargin_2_data_f,
    proc_control_node_B.varargin_2_size);
  if (*x_size != 0) {
    proc_control_node_B.result_k = *x_size;
  } else if (proc_control_node_B.varargin_2_size[0] != 0) {
    proc_control_node_B.result_k = proc_control_node_B.varargin_2_size[0];
  } else {
    proc_control_node_B.result_k = *x_size;
  }

  result = (proc_control_node_B.result_k == 0);
  if (result || (*x_size != 0)) {
    proc_control_node_B.i_fj = 1;
  } else {
    proc_control_node_B.i_fj = 0;
  }

  if (result || (proc_control_node_B.varargin_2_size[0] != 0)) {
    proc_control_node_B.result_m = 25;
  } else {
    proc_control_node_B.result_m = 0;
  }

  proc_control_node_B.result_size[0] = proc_control_node_B.result_k;
  proc_control_node_B.result_size[1] = proc_control_node_B.i_fj +
    proc_control_node_B.result_m;
  proc_control_node_B.i_fj *= proc_control_node_B.result_k;
  proc_control_node_B.result_k *= proc_control_node_B.result_m;
  for (proc_control_node_B.result_m = 0; proc_control_node_B.result_m <
       proc_control_node_B.i_fj; proc_control_node_B.result_m++) {
    proc_control_node_B.result_data[proc_control_node_B.result_m] = 1.0;
  }

  for (proc_control_node_B.result_m = 0; proc_control_node_B.result_m <
       proc_control_node_B.result_k; proc_control_node_B.result_m++) {
    proc_control_node_B.result_data[proc_control_node_B.result_m +
      proc_control_node_B.i_fj] =
      proc_control_node_B.varargin_2_data_f[proc_control_node_B.result_m];
  }

  proc_control_n_useConstantDim_b(proc_control_node_B.result_data,
    proc_control_node_B.result_size, proc_control_node_B.x_data_m,
    proc_control_node_B.varargin_2_size);
  *a_size = *x_size;
  proc_control_node_B.result_k = *x_size;
  *dady_size = *x_size;
  if (0 <= proc_control_node_B.b_idx_0_o - 1) {
    memset(&a_data[0], 0, proc_control_node_B.b_idx_0_o * sizeof(real_T));
  }

  if (0 <= proc_control_node_B.b_idx_0_o - 1) {
    memset(&proc_control_node_B.dadr_data[0], 0, proc_control_node_B.b_idx_0_o *
           sizeof(real_T));
  }

  if (0 <= proc_control_node_B.b_idx_0_o - 1) {
    memset(&dady_data[0], 0, proc_control_node_B.b_idx_0_o * sizeof(real_T));
  }

  proc_control_node_B.i = 0.0;
  proc_control_node_B.j_j = 0.0;
  while (proc_control_node_B.n_oh > 0) {
    proc_control_node_B.c_tmp = c[proc_control_node_B.n_oh - 1];
    proc_control_node_B.i_fj = *a_size;
    for (proc_control_node_B.result_m = 0; proc_control_node_B.result_m <
         proc_control_node_B.i_fj; proc_control_node_B.result_m++) {
      a_data[proc_control_node_B.result_m] +=
        proc_control_node_B.x_data[proc_control_node_B.result_m +
        proc_control_node_B.x_size[0] * (static_cast<int32_T>
        (proc_control_node_B.i + 1.0) - 1)] * proc_control_node_B.c_tmp *
        proc_control_node_B.x_data_m[proc_control_node_B.result_m +
        proc_control_node_B.varargin_2_size[0] * (static_cast<int32_T>
        (proc_control_node_B.j_j + 1.0) - 1)];
    }

    if (proc_control_node_B.i > 0.0) {
      proc_control_node_B.i_g = (proc_control_node_B.i + 1.0) *
        proc_control_node_B.c_tmp;
      for (proc_control_node_B.result_m = 0; proc_control_node_B.result_m <
           proc_control_node_B.result_k; proc_control_node_B.result_m++) {
        proc_control_node_B.dadr_data[proc_control_node_B.result_m] +=
          proc_control_node_B.x_data[proc_control_node_B.result_m +
          proc_control_node_B.x_size[0] * (static_cast<int32_T>
          (proc_control_node_B.i) - 1)] * proc_control_node_B.i_g *
          proc_control_node_B.x_data_m[proc_control_node_B.result_m +
          proc_control_node_B.varargin_2_size[0] * (static_cast<int32_T>
          (proc_control_node_B.j_j + 1.0) - 1)];
      }
    }

    if (proc_control_node_B.j_j > 0.0) {
      proc_control_node_B.c_tmp *= proc_control_node_B.j_j + 1.0;
      proc_control_node_B.i_fj = *dady_size;
      for (proc_control_node_B.result_m = 0; proc_control_node_B.result_m <
           proc_control_node_B.i_fj; proc_control_node_B.result_m++) {
        dady_data[proc_control_node_B.result_m] +=
          proc_control_node_B.x_data[proc_control_node_B.result_m +
          proc_control_node_B.x_size[0] * (static_cast<int32_T>
          (proc_control_node_B.i + 1.0) - 1)] * proc_control_node_B.c_tmp *
          proc_control_node_B.x_data_m[proc_control_node_B.result_m +
          proc_control_node_B.varargin_2_size[0] * (static_cast<int32_T>
          (proc_control_node_B.j_j) - 1)];
      }
    }

    proc_control_node_B.j_j++;
    if (proc_control_node_B.i + proc_control_node_B.j_j > 25.0) {
      proc_control_node_B.i++;
      proc_control_node_B.j_j = 0.0;
    }

    proc_control_node_B.n_oh--;
  }

  proc_control_node_B.i_fj = *x_size;
  for (proc_control_node_B.result_m = 0; proc_control_node_B.result_m <
       proc_control_node_B.i_fj; proc_control_node_B.result_m++) {
    dady_data[proc_control_node_B.result_m] *=
      proc_control_node_B.v_data_g[proc_control_node_B.result_m];
  }

  for (proc_control_node_B.result_m = 0; proc_control_node_B.result_m <
       proc_control_node_B.result_k; proc_control_node_B.result_m++) {
    proc_control_node_B.dadr_data[proc_control_node_B.result_m] *=
      proc_control_node_B.u_data_f[proc_control_node_B.result_m];
  }

  *dadx_size = *x_size;
  proc_control_node_B.i_fj = *x_size;
  for (proc_control_node_B.result_m = 0; proc_control_node_B.result_m <
       proc_control_node_B.i_fj; proc_control_node_B.result_m++) {
    dadx_data[proc_control_node_B.result_m] = (2.0 *
      proc_control_node_B.v_data_g[proc_control_node_B.result_m] *
      (dady_data[proc_control_node_B.result_m] +
       proc_control_node_B.dadr_data[proc_control_node_B.result_m]) +
      a_data[proc_control_node_B.result_m]) * 3.0;
  }

  *dady_size = *x_size;
  proc_control_node_B.i_fj = *x_size;
  for (proc_control_node_B.result_m = 0; proc_control_node_B.result_m <
       proc_control_node_B.i_fj; proc_control_node_B.result_m++) {
    dady_data[proc_control_node_B.result_m] = (2.0 *
      proc_control_node_B.v_data_g[proc_control_node_B.result_m] *
      (dady_data[proc_control_node_B.result_m] -
       proc_control_node_B.dadr_data[proc_control_node_B.result_m]) +
      a_data[proc_control_node_B.result_m]) * 3.0;
  }

  *a_size = *x_size;
  proc_control_node_B.i_fj = *x_size;
  for (proc_control_node_B.result_m = 0; proc_control_node_B.result_m <
       proc_control_node_B.i_fj; proc_control_node_B.result_m++) {
    a_data[proc_control_node_B.result_m] *= 3.0 *
      proc_control_node_B.v_data_g[proc_control_node_B.result_m];
  }
}

static void proc_control_node_eml_find_b(const boolean_T x_data[], const int32_T
  *x_size, int32_T i_data[], int32_T *i_size)
{
  boolean_T exitg1;
  proc_control_node_B.nx_n = *x_size;
  proc_control_node_B.idx_e = 0;
  *i_size = *x_size;
  proc_control_node_B.b_ii = 1;
  exitg1 = false;
  while ((!exitg1) && (proc_control_node_B.b_ii - 1 <= proc_control_node_B.nx_n
                       - 1)) {
    if (x_data[proc_control_node_B.b_ii - 1]) {
      proc_control_node_B.idx_e++;
      i_data[proc_control_node_B.idx_e - 1] = proc_control_node_B.b_ii;
      if (proc_control_node_B.idx_e >= proc_control_node_B.nx_n) {
        exitg1 = true;
      } else {
        proc_control_node_B.b_ii++;
      }
    } else {
      proc_control_node_B.b_ii++;
    }
  }

  if (*x_size == 1) {
    if (proc_control_node_B.idx_e == 0) {
      *i_size = 0;
    }
  } else {
    if (1 > proc_control_node_B.idx_e) {
      proc_control_node_B.idx_e = 0;
    }

    *i_size = proc_control_node_B.idx_e;
  }
}

static creal_T proc_control_node_sqrt(const creal_T x)
{
  creal_T b_x;
  if (x.im == 0.0) {
    if (x.re < 0.0) {
      proc_control_node_B.absxr = 0.0;
      proc_control_node_B.absxi = sqrt(-x.re);
    } else {
      proc_control_node_B.absxr = sqrt(x.re);
      proc_control_node_B.absxi = 0.0;
    }
  } else if (x.re == 0.0) {
    if (x.im < 0.0) {
      proc_control_node_B.absxr = sqrt(-x.im / 2.0);
      proc_control_node_B.absxi = -proc_control_node_B.absxr;
    } else {
      proc_control_node_B.absxr = sqrt(x.im / 2.0);
      proc_control_node_B.absxi = proc_control_node_B.absxr;
    }
  } else if (rtIsNaN(x.re)) {
    proc_control_node_B.absxr = x.re;
    proc_control_node_B.absxi = x.re;
  } else if (rtIsNaN(x.im)) {
    proc_control_node_B.absxr = x.im;
    proc_control_node_B.absxi = x.im;
  } else if (rtIsInf(x.im)) {
    proc_control_node_B.absxr = fabs(x.im);
    proc_control_node_B.absxi = x.im;
  } else if (rtIsInf(x.re)) {
    if (x.re < 0.0) {
      proc_control_node_B.absxr = 0.0;
      proc_control_node_B.absxi = x.im * -x.re;
    } else {
      proc_control_node_B.absxr = x.re;
      proc_control_node_B.absxi = 0.0;
    }
  } else {
    proc_control_node_B.absxr = fabs(x.re);
    proc_control_node_B.absxi = fabs(x.im);
    if ((proc_control_node_B.absxr > 4.4942328371557893E+307) ||
        (proc_control_node_B.absxi > 4.4942328371557893E+307)) {
      proc_control_node_B.absxr *= 0.5;
      proc_control_node_B.absxi = proc_control_node_rt_hypotd_snf
        (proc_control_node_B.absxr, proc_control_node_B.absxi * 0.5);
      if (proc_control_node_B.absxi > proc_control_node_B.absxr) {
        proc_control_node_B.absxr = sqrt(proc_control_node_B.absxr /
          proc_control_node_B.absxi + 1.0) * sqrt(proc_control_node_B.absxi);
      } else {
        proc_control_node_B.absxr = sqrt(proc_control_node_B.absxi) *
          1.4142135623730951;
      }
    } else {
      proc_control_node_B.absxr = sqrt((proc_control_node_rt_hypotd_snf
        (proc_control_node_B.absxr, proc_control_node_B.absxi) +
        proc_control_node_B.absxr) * 0.5);
    }

    if (x.re > 0.0) {
      proc_control_node_B.absxi = x.im / proc_control_node_B.absxr * 0.5;
    } else {
      if (x.im < 0.0) {
        proc_control_node_B.absxi = -proc_control_node_B.absxr;
      } else {
        proc_control_node_B.absxi = proc_control_node_B.absxr;
      }

      proc_control_node_B.absxr = x.im / proc_control_node_B.absxi * 0.5;
    }
  }

  b_x.re = proc_control_node_B.absxr;
  b_x.im = proc_control_node_B.absxi;
  return b_x;
}

static void proc_control_node_abs_b(const real_T x_data[], const int32_T *x_size,
  real_T y_data[], int32_T *y_size)
{
  proc_control_node_B.nx_pn = *x_size - 1;
  *y_size = *x_size;
  for (proc_control_node_B.b_k_e2 = 0; proc_control_node_B.b_k_e2 <=
       proc_control_node_B.nx_pn; proc_control_node_B.b_k_e2++) {
    y_data[proc_control_node_B.b_k_e2] = fabs(x_data[proc_control_node_B.b_k_e2]);
  }
}

static void proc_control_node_fresnelr(const real_T x_data[], const int32_T
  *x_size, creal_T z_data[], int32_T *z_size)
{
  static const real_T tmp[11] = { 0.50444207364338323, 0.19710283352552341,
    0.018764858409257526, 0.00068407938091539307, 1.1513882611188428E-5,
    9.8285244368842225E-8, 4.4534441586175015E-10, 1.0826804113902088E-12,
    1.375554606332618E-15, 8.3635443563067741E-19, 1.8695871016278324E-22 };

  static const real_T tmp_0[11] = { 1.0, 0.75158639835337893,
    0.11688892585919138, 0.0064405152650885865, 0.00015593440916415301,
    1.8462756734893055E-6, 1.1269922476399903E-8, 3.6014002958937136E-11,
    5.8875453362157839E-14, 4.5200143407412973E-17, 1.2544323709001127E-20 };

  static const real_T tmp_1[12] = { 1.0, 1.4749575992512833, 0.33774898912002,
    0.025360374142033879, 0.00081467910718430615, 1.2754507566772912E-5,
    1.0431458965757199E-7, 4.6068072814652043E-10, 1.1027321506624028E-12,
    1.3879653125957886E-15, 8.3915881628311874E-19, 1.8695871016278324E-22 };

  const real_T *fd;
  const real_T *gd;
  const real_T *gn;
  gn = &tmp[0];
  fd = &tmp_0[0];
  gd = &tmp_1[0];
  proc_control_node_B.b_idx_0_l = *x_size;
  *z_size = *x_size;
  for (proc_control_node_B.i_p = 0; proc_control_node_B.i_p <
       proc_control_node_B.b_idx_0_l; proc_control_node_B.i_p++) {
    z_data[proc_control_node_B.i_p].re = (rtNaN);
    z_data[proc_control_node_B.i_p].im = 0.0;
  }

  proc_control_node_abs_b(x_data, x_size, proc_control_node_B.tmp_data_l4,
    &proc_control_node_B.tmp_size_do);
  proc_control_node_B.xabs_size_idx_0 = proc_control_node_B.tmp_size_do;
  proc_control_node_B.b_idx_0_l = proc_control_node_B.tmp_size_do;
  if (0 <= proc_control_node_B.b_idx_0_l - 1) {
    memcpy(&proc_control_node_B.xabs_data[0], &proc_control_node_B.tmp_data_l4[0],
           proc_control_node_B.b_idx_0_l * sizeof(real_T));
  }

  for (proc_control_node_B.i_p = 0; proc_control_node_B.i_p <
       proc_control_node_B.xabs_size_idx_0; proc_control_node_B.i_p++) {
    proc_control_node_B.xabs =
      proc_control_node_B.xabs_data[proc_control_node_B.i_p];
    proc_control_node_B.ibig_data[proc_control_node_B.i_p] =
      proc_control_node_B.xabs * proc_control_node_B.xabs;
  }

  proc_control_node_B.ibig_size = proc_control_node_B.tmp_size_do;
  for (proc_control_node_B.i_p = 0; proc_control_node_B.i_p <
       proc_control_node_B.xabs_size_idx_0; proc_control_node_B.i_p++) {
    proc_control_node_B.ibig_data_j[proc_control_node_B.i_p] =
      (proc_control_node_B.ibig_data[proc_control_node_B.i_p] < 2.5625);
  }

  proc_control_node_eml_find_b(proc_control_node_B.ibig_data_j,
    &proc_control_node_B.ibig_size, proc_control_node_B.tmp_data_gr,
    &proc_control_node_B.tmp_size_lt);
  proc_control_node_B.ismall_size_idx_0_a = proc_control_node_B.tmp_size_lt;
  proc_control_node_B.b_idx_0_l = proc_control_node_B.tmp_size_lt;
  for (proc_control_node_B.i_p = 0; proc_control_node_B.i_p <
       proc_control_node_B.b_idx_0_l; proc_control_node_B.i_p++) {
    proc_control_node_B.ismall_data[proc_control_node_B.i_p] =
      proc_control_node_B.tmp_data_gr[proc_control_node_B.i_p];
  }

  for (proc_control_node_B.i_p = 0; proc_control_node_B.i_p <
       proc_control_node_B.ismall_size_idx_0_a; proc_control_node_B.i_p++) {
    proc_control_node_B.xabs = proc_control_node_B.xabs_data[static_cast<int32_T>
      (proc_control_node_B.ismall_data[proc_control_node_B.i_p]) - 1];
    proc_control_node_B.x4_data[proc_control_node_B.i_p] =
      proc_control_node_B.xabs * proc_control_node_B.xabs;
  }

  for (proc_control_node_B.i_p = 0; proc_control_node_B.i_p <
       proc_control_node_B.ismall_size_idx_0_a; proc_control_node_B.i_p++) {
    proc_control_node_B.x4 = proc_control_node_B.x4_data[proc_control_node_B.i_p];
    proc_control_node_B.x4_data[proc_control_node_B.i_p] =
      proc_control_node_B.x4 * proc_control_node_B.x4;
  }

  for (proc_control_node_B.i_p = 0; proc_control_node_B.i_p <
       proc_control_node_B.ismall_size_idx_0_a; proc_control_node_B.i_p++) {
    proc_control_node_B.x4 = proc_control_node_B.x4_data[proc_control_node_B.i_p];
    proc_control_node_B.ismall = static_cast<int32_T>
      (proc_control_node_B.ismall_data[proc_control_node_B.i_p]);
    proc_control_node_B.xabs =
      proc_control_node_B.xabs_data[proc_control_node_B.ismall - 1];
    z_data[proc_control_node_B.ismall - 1].re = (((((-4.9884311457357354E-8 *
      proc_control_node_B.x4 + 9.5042806282985963E-6) * proc_control_node_B.x4 +
      -0.00064519143568396507) * proc_control_node_B.x4 + 0.018884331939670384) *
      proc_control_node_B.x4 + -0.20552590095501388) * proc_control_node_B.x4 +
      1.0) / ((((((3.99982968972496E-12 * proc_control_node_B.x4 +
                   9.1543921577465745E-10) * proc_control_node_B.x4 +
                  1.2500186247959882E-7) * proc_control_node_B.x4 +
                 1.2226278902417902E-5) * proc_control_node_B.x4 +
                0.00086802954294178428) * proc_control_node_B.x4 +
               0.041214209072219982) * proc_control_node_B.x4 + 1.0) *
      proc_control_node_B.xabs;
    z_data[proc_control_node_B.ismall - 1].im = (((((-2991.8191940101983 *
      proc_control_node_B.x4 + 708840.04525773856) * proc_control_node_B.x4 +
      -6.2974148620586254E+7) * proc_control_node_B.x4 + 2.5489088057337637E+9) *
      proc_control_node_B.x4 + -4.429795180596978E+10) * proc_control_node_B.x4
      + 3.1801629787656781E+11) * (proc_control_node_B.xabs *
      proc_control_node_B.xabs) / ((((((proc_control_node_B.x4 +
      281.37626888999432) * proc_control_node_B.x4 + 45584.781080653258) *
      proc_control_node_B.x4 + 5.1734388877009638E+6) * proc_control_node_B.x4 +
      4.1932024589811122E+8) * proc_control_node_B.x4 + 2.2441179564534092E+10) *
      proc_control_node_B.x4 + 6.0736638949008459E+11) *
      proc_control_node_B.xabs;
  }

  proc_control_node_B.ibig_size = proc_control_node_B.tmp_size_do;
  for (proc_control_node_B.i_p = 0; proc_control_node_B.i_p <
       proc_control_node_B.xabs_size_idx_0; proc_control_node_B.i_p++) {
    proc_control_node_B.xabs =
      proc_control_node_B.ibig_data[proc_control_node_B.i_p];
    proc_control_node_B.ibig_data_j[proc_control_node_B.i_p] = ((2.5625 <=
      proc_control_node_B.xabs) && (proc_control_node_B.xabs <= 1.367076676E+9));
  }

  proc_control_node_eml_find_b(proc_control_node_B.ibig_data_j,
    &proc_control_node_B.ibig_size, proc_control_node_B.tmp_data_gr,
    &proc_control_node_B.tmp_size_lt);
  proc_control_node_B.xabs_size_idx_0 = proc_control_node_B.tmp_size_lt;
  proc_control_node_B.b_idx_0_l = proc_control_node_B.tmp_size_lt;
  for (proc_control_node_B.i_p = 0; proc_control_node_B.i_p <
       proc_control_node_B.b_idx_0_l; proc_control_node_B.i_p++) {
    proc_control_node_B.ibig_data[proc_control_node_B.i_p] =
      proc_control_node_B.tmp_data_gr[proc_control_node_B.i_p];
  }

  for (proc_control_node_B.i_p = 0; proc_control_node_B.i_p <
       proc_control_node_B.xabs_size_idx_0; proc_control_node_B.i_p++) {
    proc_control_node_B.xabs = proc_control_node_B.xabs_data[static_cast<int32_T>
      (proc_control_node_B.ibig_data[proc_control_node_B.i_p]) - 1];
    proc_control_node_B.ismall_data[proc_control_node_B.i_p] = 1.0 /
      (proc_control_node_B.xabs * proc_control_node_B.xabs * 3.1415926535897931);
  }

  for (proc_control_node_B.i_p = 0; proc_control_node_B.i_p <
       proc_control_node_B.xabs_size_idx_0; proc_control_node_B.i_p++) {
    proc_control_node_B.xabs =
      proc_control_node_B.ismall_data[proc_control_node_B.i_p];
    proc_control_node_B.x4_data[proc_control_node_B.i_p] =
      proc_control_node_B.xabs * proc_control_node_B.xabs;
  }

  for (proc_control_node_B.i_p = 0; proc_control_node_B.i_p <
       proc_control_node_B.xabs_size_idx_0; proc_control_node_B.i_p++) {
    proc_control_node_B.xabs = proc_control_node_B.xabs_data[static_cast<int32_T>
      (proc_control_node_B.ibig_data[proc_control_node_B.i_p]) - 1];
    proc_control_node_B.xabs *= proc_control_node_B.xabs;
    proc_control_node_B.x_data_k[proc_control_node_B.i_p].re =
      proc_control_node_B.xabs * 0.0;
    proc_control_node_B.x_data_k[proc_control_node_B.i_p].im =
      proc_control_node_B.xabs * 1.5707963267948966;
  }

  proc_control_node_B.i_p = proc_control_node_B.tmp_size_lt - 1;
  for (proc_control_node_B.b_idx_0_l = 0; proc_control_node_B.b_idx_0_l <=
       proc_control_node_B.i_p; proc_control_node_B.b_idx_0_l++) {
    proc_control_node_B.x_po =
      proc_control_node_B.x_data_k[proc_control_node_B.b_idx_0_l];
    if (proc_control_node_B.x_po.im == 0.0) {
      proc_control_node_B.xabs = exp(proc_control_node_B.x_po.re);
      proc_control_node_B.r_l = 0.0;
    } else if (rtIsInf(proc_control_node_B.x_po.im) && rtIsInf
               (proc_control_node_B.x_po.re) && (proc_control_node_B.x_po.re <
                0.0)) {
      proc_control_node_B.xabs = 0.0;
      proc_control_node_B.r_l = 0.0;
    } else {
      proc_control_node_B.r_l = exp(proc_control_node_B.x_po.re / 2.0);
      proc_control_node_B.xabs = proc_control_node_B.r_l * cos
        (proc_control_node_B.x_po.im) * proc_control_node_B.r_l;
      proc_control_node_B.r_l *= proc_control_node_B.r_l * sin
        (proc_control_node_B.x_po.im);
    }

    proc_control_node_B.x_po.re = proc_control_node_B.xabs;
    proc_control_node_B.x_po.im = proc_control_node_B.r_l;
    proc_control_node_B.x_data_k[proc_control_node_B.b_idx_0_l] =
      proc_control_node_B.x_po;
  }

  proc_control_node_B.xabs = fd[0];
  proc_control_node_B.r_l = fd[1];
  proc_control_node_B.fd = fd[2];
  proc_control_node_B.fd_c = fd[3];
  proc_control_node_B.fd_e = fd[4];
  proc_control_node_B.fd_d = fd[5];
  proc_control_node_B.fd_o = fd[6];
  proc_control_node_B.fd_l = fd[7];
  proc_control_node_B.fd_h = fd[8];
  proc_control_node_B.fd_ln = fd[9];
  proc_control_node_B.fd_c5 = fd[10];
  proc_control_node_B.gn = gn[0];
  proc_control_node_B.gn_c = gn[1];
  proc_control_node_B.gn_a = gn[2];
  proc_control_node_B.gn_i = gn[3];
  proc_control_node_B.gn_l = gn[4];
  proc_control_node_B.gn_iy = gn[5];
  proc_control_node_B.gn_az = gn[6];
  proc_control_node_B.gn_ix = gn[7];
  proc_control_node_B.gn_c3 = gn[8];
  proc_control_node_B.gn_m = gn[9];
  proc_control_node_B.gn_n = gn[10];
  proc_control_node_B.gd = gd[0];
  proc_control_node_B.gd_c = gd[1];
  proc_control_node_B.gd_n = gd[2];
  proc_control_node_B.gd_h = gd[3];
  proc_control_node_B.gd_i = gd[4];
  proc_control_node_B.gd_e = gd[5];
  proc_control_node_B.gd_p = gd[6];
  proc_control_node_B.gd_k = gd[7];
  proc_control_node_B.gd_i3 = gd[8];
  proc_control_node_B.gd_nl = gd[9];
  proc_control_node_B.gd_o = gd[10];
  proc_control_node_B.gd_l = gd[11];
  for (proc_control_node_B.i_p = 0; proc_control_node_B.i_p <
       proc_control_node_B.xabs_size_idx_0; proc_control_node_B.i_p++) {
    proc_control_node_B.ismall = static_cast<int32_T>
      (proc_control_node_B.ibig_data[proc_control_node_B.i_p]);
    proc_control_node_B.x4 = proc_control_node_B.x4_data[proc_control_node_B.i_p];
    proc_control_node_B.x4_re = (((((((((0.42154355504367752 *
      proc_control_node_B.x4 + 0.1434079197807589) * proc_control_node_B.x4 +
      0.011522095507358577) * proc_control_node_B.x4 + 0.000345017939782574) *
      proc_control_node_B.x4 + 4.6361374928786735E-6) * proc_control_node_B.x4 +
      3.0556898379025758E-8) * proc_control_node_B.x4 + 1.0230451416490724E-10) *
      proc_control_node_B.x4 + 1.7201074326816183E-13) * proc_control_node_B.x4
      + 1.3428327623306275E-16) * proc_control_node_B.x4 + 3.763297112699879E-20)
      * proc_control_node_B.x4 / ((((((((((proc_control_node_B.xabs *
      proc_control_node_B.x4 + proc_control_node_B.r_l) * proc_control_node_B.x4
      + proc_control_node_B.fd) * proc_control_node_B.x4 +
      proc_control_node_B.fd_c) * proc_control_node_B.x4 +
      proc_control_node_B.fd_e) * proc_control_node_B.x4 +
      proc_control_node_B.fd_d) * proc_control_node_B.x4 +
      proc_control_node_B.fd_o) * proc_control_node_B.x4 +
      proc_control_node_B.fd_l) * proc_control_node_B.x4 +
      proc_control_node_B.fd_h) * proc_control_node_B.x4 +
      proc_control_node_B.fd_ln) * proc_control_node_B.x4 +
      proc_control_node_B.fd_c5) - 1.0;
    proc_control_node_B.x4_im = ((((((((((proc_control_node_B.gn *
      proc_control_node_B.x4 + proc_control_node_B.gn_c) *
      proc_control_node_B.x4 + proc_control_node_B.gn_a) *
      proc_control_node_B.x4 + proc_control_node_B.gn_i) *
      proc_control_node_B.x4 + proc_control_node_B.gn_l) *
      proc_control_node_B.x4 + proc_control_node_B.gn_iy) *
      proc_control_node_B.x4 + proc_control_node_B.gn_az) *
      proc_control_node_B.x4 + proc_control_node_B.gn_ix) *
      proc_control_node_B.x4 + proc_control_node_B.gn_c3) *
      proc_control_node_B.x4 + proc_control_node_B.gn_m) *
      proc_control_node_B.x4 + proc_control_node_B.gn_n) *
      proc_control_node_B.ismall_data[proc_control_node_B.i_p] /
      (((((((((((proc_control_node_B.gd * proc_control_node_B.x4 +
                 proc_control_node_B.gd_c) * proc_control_node_B.x4 +
                proc_control_node_B.gd_n) * proc_control_node_B.x4 +
               proc_control_node_B.gd_h) * proc_control_node_B.x4 +
              proc_control_node_B.gd_i) * proc_control_node_B.x4 +
             proc_control_node_B.gd_e) * proc_control_node_B.x4 +
            proc_control_node_B.gd_p) * proc_control_node_B.x4 +
           proc_control_node_B.gd_k) * proc_control_node_B.x4 +
          proc_control_node_B.gd_i3) * proc_control_node_B.x4 +
         proc_control_node_B.gd_nl) * proc_control_node_B.x4 +
        proc_control_node_B.gd_o) * proc_control_node_B.x4 +
       proc_control_node_B.gd_l);
    proc_control_node_B.x4 = 0.0 * proc_control_node_B.x4_re -
      proc_control_node_B.x4_im;
    proc_control_node_B.x4_re += 0.0 * proc_control_node_B.x4_im;
    proc_control_node_B.x4_im = proc_control_node_B.x4 *
      proc_control_node_B.x_data_k[proc_control_node_B.i_p].re -
      proc_control_node_B.x4_re *
      proc_control_node_B.x_data_k[proc_control_node_B.i_p].im;
    proc_control_node_B.x4_re = proc_control_node_B.x4 *
      proc_control_node_B.x_data_k[proc_control_node_B.i_p].im +
      proc_control_node_B.x4_re *
      proc_control_node_B.x_data_k[proc_control_node_B.i_p].re;
    proc_control_node_B.br_p =
      proc_control_node_B.xabs_data[proc_control_node_B.ismall - 1] *
      3.1415926535897931;
    if (proc_control_node_B.x4_re == 0.0) {
      proc_control_node_B.x4 = proc_control_node_B.x4_im /
        proc_control_node_B.br_p;
      proc_control_node_B.x4_re = 0.0;
    } else if (proc_control_node_B.x4_im == 0.0) {
      proc_control_node_B.x4 = 0.0;
      proc_control_node_B.x4_re /= proc_control_node_B.br_p;
    } else {
      proc_control_node_B.x4 = proc_control_node_B.x4_im /
        proc_control_node_B.br_p;
      proc_control_node_B.x4_re /= proc_control_node_B.br_p;
    }

    z_data[proc_control_node_B.ismall - 1].re = 0.5 + proc_control_node_B.x4;
    z_data[proc_control_node_B.ismall - 1].im = 0.5 + proc_control_node_B.x4_re;
  }

  proc_control_node_B.i_p = proc_control_node_B.tmp_size_do - 1;
  proc_control_node_B.b_idx_0_l = 0;
  for (proc_control_node_B.ismall = 0; proc_control_node_B.ismall <=
       proc_control_node_B.i_p; proc_control_node_B.ismall++) {
    proc_control_node_B.xabs =
      proc_control_node_B.xabs_data[proc_control_node_B.ismall];
    if (proc_control_node_B.xabs * proc_control_node_B.xabs > 1.367076676E+9) {
      proc_control_node_B.b_idx_0_l++;
    }
  }

  proc_control_node_B.xabs_size_idx_0 = proc_control_node_B.b_idx_0_l;
  proc_control_node_B.b_idx_0_l = 0;
  for (proc_control_node_B.ismall = 0; proc_control_node_B.ismall <=
       proc_control_node_B.i_p; proc_control_node_B.ismall++) {
    proc_control_node_B.xabs =
      proc_control_node_B.xabs_data[proc_control_node_B.ismall];
    if (proc_control_node_B.xabs * proc_control_node_B.xabs > 1.367076676E+9) {
      proc_control_node_B.ad_data[proc_control_node_B.b_idx_0_l] =
        static_cast<int8_T>(proc_control_node_B.ismall + 1);
      proc_control_node_B.b_idx_0_l++;
    }
  }

  for (proc_control_node_B.i_p = 0; proc_control_node_B.i_p <
       proc_control_node_B.xabs_size_idx_0; proc_control_node_B.i_p++) {
    proc_control_node_B.ad = proc_control_node_B.ad_data[proc_control_node_B.i_p];
    z_data[proc_control_node_B.ad - 1].re = 0.5;
    z_data[proc_control_node_B.ad - 1].im = 0.5;
  }

  proc_control_node_B.i_p = *x_size - 1;
  proc_control_node_B.b_idx_0_l = 0;
  for (proc_control_node_B.ismall = 0; proc_control_node_B.ismall <=
       proc_control_node_B.i_p; proc_control_node_B.ismall++) {
    if (x_data[proc_control_node_B.ismall] < 0.0) {
      proc_control_node_B.b_idx_0_l++;
    }
  }

  proc_control_node_B.xabs_size_idx_0 = proc_control_node_B.b_idx_0_l;
  proc_control_node_B.b_idx_0_l = 0;
  for (proc_control_node_B.ismall = 0; proc_control_node_B.ismall <=
       proc_control_node_B.i_p; proc_control_node_B.ismall++) {
    if (x_data[proc_control_node_B.ismall] < 0.0) {
      proc_control_node_B.bd_data[proc_control_node_B.b_idx_0_l] =
        static_cast<int8_T>(proc_control_node_B.ismall + 1);
      proc_control_node_B.b_idx_0_l++;
    }
  }

  for (proc_control_node_B.i_p = 0; proc_control_node_B.i_p <
       proc_control_node_B.xabs_size_idx_0; proc_control_node_B.i_p++) {
    proc_control_node_B.ad = proc_control_node_B.bd_data[proc_control_node_B.i_p];
    proc_control_node_B.x_data_k[proc_control_node_B.i_p].re =
      -z_data[proc_control_node_B.ad - 1].re;
    proc_control_node_B.x_data_k[proc_control_node_B.i_p].im =
      -z_data[proc_control_node_B.ad - 1].im;
  }

  for (proc_control_node_B.i_p = 0; proc_control_node_B.i_p <
       proc_control_node_B.xabs_size_idx_0; proc_control_node_B.i_p++) {
    z_data[proc_control_node_B.bd_data[proc_control_node_B.i_p] - 1] =
      proc_control_node_B.x_data_k[proc_control_node_B.i_p];
  }
}

static void proc_control_node_fresnel(const creal_T x_data[], const int32_T
  *x_size, creal_T z_data[], int32_T *z_size)
{
  proc_control_node_B.x_size_o = *x_size;
  proc_control_node_B.loop_ub_dw = *x_size;
  for (proc_control_node_B.i2 = 0; proc_control_node_B.i2 <
       proc_control_node_B.loop_ub_dw; proc_control_node_B.i2++) {
    proc_control_node_B.x_data_d[proc_control_node_B.i2] =
      x_data[proc_control_node_B.i2].re;
  }

  proc_control_node_fresnelr(proc_control_node_B.x_data_d,
    &proc_control_node_B.x_size_o, z_data, z_size);
  proc_control_node_B.x_size_o = *x_size;
  proc_control_node_B.loop_ub_dw = *x_size;
  for (proc_control_node_B.i2 = 0; proc_control_node_B.i2 <
       proc_control_node_B.loop_ub_dw; proc_control_node_B.i2++) {
    proc_control_node_B.x_data_d[proc_control_node_B.i2] =
      -x_data[proc_control_node_B.i2].im;
  }

  proc_control_node_fresnelr(proc_control_node_B.x_data_d,
    &proc_control_node_B.x_size_o, proc_control_node_B.tmp_data_jp,
    &proc_control_node_B.tmp_size_bc);
  proc_control_node_B.loop_ub_dw = *z_size;
  for (proc_control_node_B.i2 = 0; proc_control_node_B.i2 <
       proc_control_node_B.loop_ub_dw; proc_control_node_B.i2++) {
    proc_control_node_B.z_b = z_data[proc_control_node_B.i2];
    proc_control_node_B.re =
      proc_control_node_B.tmp_data_jp[proc_control_node_B.i2].re;
    proc_control_node_B.im =
      -proc_control_node_B.tmp_data_jp[proc_control_node_B.i2].im;
    proc_control_node_B.z_b.re += 0.0 * proc_control_node_B.re -
      proc_control_node_B.im;
    proc_control_node_B.z_b.im += 0.0 * proc_control_node_B.im +
      proc_control_node_B.re;
    z_data[proc_control_node_B.i2] = proc_control_node_B.z_b;
  }
}

static real_T proc_control_node_rt_powd_snf(real_T u0, real_T u1)
{
  real_T y;
  if (rtIsNaN(u0) || rtIsNaN(u1)) {
    y = (rtNaN);
  } else {
    proc_control_node_B.d_p = fabs(u0);
    proc_control_node_B.d1 = fabs(u1);
    if (rtIsInf(u1)) {
      if (proc_control_node_B.d_p == 1.0) {
        y = 1.0;
      } else if (proc_control_node_B.d_p > 1.0) {
        if (u1 > 0.0) {
          y = (rtInf);
        } else {
          y = 0.0;
        }
      } else if (u1 > 0.0) {
        y = 0.0;
      } else {
        y = (rtInf);
      }
    } else if (proc_control_node_B.d1 == 0.0) {
      y = 1.0;
    } else if (proc_control_node_B.d1 == 1.0) {
      if (u1 > 0.0) {
        y = u0;
      } else {
        y = 1.0 / u0;
      }
    } else if (u1 == 2.0) {
      y = u0 * u0;
    } else if ((u1 == 0.5) && (u0 >= 0.0)) {
      y = sqrt(u0);
    } else if ((u0 < 0.0) && (u1 > floor(u1))) {
      y = (rtNaN);
    } else {
      y = pow(u0, u1);
    }
  }

  return y;
}

static void proc_control_node_power_b(const creal_T a_data[], const int32_T
  *a_size, creal_T y_data[], int32_T *y_size)
{
  int32_T b_k;
  int32_T nx;
  *y_size = *a_size;
  nx = *a_size - 1;
  for (b_k = 0; b_k <= nx; b_k++) {
    proc_control_node_B.ar_k = a_data[b_k].re;
    proc_control_node_B.ai_e = a_data[b_k].im;
    if ((proc_control_node_B.ai_e == 0.0) && (proc_control_node_B.ar_k >= 0.0))
    {
      y_data[b_k].re = proc_control_node_rt_powd_snf(proc_control_node_B.ar_k,
        3.0);
      y_data[b_k].im = 0.0;
    } else if (proc_control_node_B.ar_k == 0.0) {
      y_data[b_k].re = 0.0;
      y_data[b_k].im = -proc_control_node_rt_powd_snf(proc_control_node_B.ai_e,
        3.0);
    } else {
      if (a_data[b_k].im == 0.0) {
        if (a_data[b_k].re < 0.0) {
          proc_control_node_B.ai_e = log(fabs(a_data[b_k].re));
          proc_control_node_B.ar_k = 3.1415926535897931;
        } else {
          proc_control_node_B.ai_e = log(fabs(a_data[b_k].re));
          proc_control_node_B.ar_k = 0.0;
        }
      } else if ((fabs(a_data[b_k].re) > 8.9884656743115785E+307) || (fabs
                  (a_data[b_k].im) > 8.9884656743115785E+307)) {
        proc_control_node_B.ai_e = log(proc_control_node_rt_hypotd_snf
          (a_data[b_k].re / 2.0, a_data[b_k].im / 2.0)) + 0.69314718055994529;
        proc_control_node_B.ar_k = rt_atan2d_snf(a_data[b_k].im, a_data[b_k].re);
      } else {
        proc_control_node_B.ai_e = log(proc_control_node_rt_hypotd_snf
          (a_data[b_k].re, a_data[b_k].im));
        proc_control_node_B.ar_k = rt_atan2d_snf(a_data[b_k].im, a_data[b_k].re);
      }

      proc_control_node_B.ai_e *= 3.0;
      proc_control_node_B.ar_k *= 3.0;
      if (proc_control_node_B.ar_k == 0.0) {
        y_data[b_k].re = exp(proc_control_node_B.ai_e);
        y_data[b_k].im = 0.0;
      } else if (rtIsInf(proc_control_node_B.ar_k) && rtIsInf
                 (proc_control_node_B.ai_e) && (proc_control_node_B.ai_e < 0.0))
      {
        y_data[b_k].re = 0.0;
        y_data[b_k].im = 0.0;
      } else {
        proc_control_node_B.ai_e = exp(proc_control_node_B.ai_e / 2.0);
        y_data[b_k].re = proc_control_node_B.ai_e * cos(proc_control_node_B.ar_k)
          * proc_control_node_B.ai_e;
        y_data[b_k].im = proc_control_node_B.ai_e * sin(proc_control_node_B.ar_k)
          * proc_control_node_B.ai_e;
      }
    }
  }
}

static void proc_control_node_power_b4(const creal_T a_data[], const int32_T
  *a_size, creal_T y_data[], int32_T *y_size)
{
  real_T tmp;
  int32_T b_k;
  int32_T nx;
  *y_size = *a_size;
  nx = *a_size - 1;
  for (b_k = 0; b_k <= nx; b_k++) {
    y_data[b_k].re = a_data[b_k].re * a_data[b_k].re - a_data[b_k].im *
      a_data[b_k].im;
    tmp = a_data[b_k].re * a_data[b_k].im;
    y_data[b_k].im = tmp + tmp;
  }
}

static void proc_control_no_fresnelgLargea1(const real_T a_data[], const int32_T
  *a_size, const real_T d_data[], const int32_T *d_size, const real_T c_data[],
  const int32_T *c_size, creal_T rsfa_data[], int32_T *rsfa_size, creal_T
  drsfa_data[], int32_T *drsfa_size)
{
  proc_control_node_B.a1_size = *a_size;
  proc_control_node_B.nx_l3 = *a_size;
  for (proc_control_node_B.b_k_e = 0; proc_control_node_B.b_k_e <
       proc_control_node_B.nx_l3; proc_control_node_B.b_k_e++) {
    proc_control_node_B.a1_data[proc_control_node_B.b_k_e].re = 2.0 *
      a_data[proc_control_node_B.b_k_e] / 3.1415926535897931;
    proc_control_node_B.a1_data[proc_control_node_B.b_k_e].im = 0.0;
  }

  proc_control_node_B.nx_l3 = *a_size - 1;
  for (proc_control_node_B.b_k_e = 0; proc_control_node_B.b_k_e <=
       proc_control_node_B.nx_l3; proc_control_node_B.b_k_e++) {
    proc_control_node_B.a1_data[proc_control_node_B.b_k_e] =
      proc_control_node_sqrt
      (proc_control_node_B.a1_data[proc_control_node_B.b_k_e]);
  }

  proc_control_node_B.nx_l3 = *a_size;
  for (proc_control_node_B.b_k_e = 0; proc_control_node_B.b_k_e <
       proc_control_node_B.nx_l3; proc_control_node_B.b_k_e++) {
    proc_control_node_B.a2_data[proc_control_node_B.b_k_e].re =
      6.2831853071795862 * a_data[proc_control_node_B.b_k_e];
    proc_control_node_B.a2_data[proc_control_node_B.b_k_e].im = 0.0;
  }

  proc_control_node_B.nx_l3 = *a_size - 1;
  for (proc_control_node_B.b_k_e = 0; proc_control_node_B.b_k_e <=
       proc_control_node_B.nx_l3; proc_control_node_B.b_k_e++) {
    proc_control_node_B.a2_data[proc_control_node_B.b_k_e] =
      proc_control_node_sqrt
      (proc_control_node_B.a2_data[proc_control_node_B.b_k_e]);
  }

  proc_control_node_B.a2_size = *d_size;
  proc_control_node_B.nx_l3 = *d_size;
  for (proc_control_node_B.b_k_e = 0; proc_control_node_B.b_k_e <
       proc_control_node_B.nx_l3; proc_control_node_B.b_k_e++) {
    proc_control_node_B.a2 =
      proc_control_node_B.a2_data[proc_control_node_B.b_k_e];
    proc_control_node_B.ar = d_data[proc_control_node_B.b_k_e] -
      a_data[proc_control_node_B.b_k_e];
    if (proc_control_node_B.a2.im == 0.0) {
      proc_control_node_B.a2.re = proc_control_node_B.ar /
        proc_control_node_B.a2.re;
      proc_control_node_B.a2.im = 0.0;
    } else if (proc_control_node_B.a2.re == 0.0) {
      if (proc_control_node_B.ar == 0.0) {
        proc_control_node_B.a2.re = 0.0 / proc_control_node_B.a2.im;
        proc_control_node_B.a2.im = 0.0;
      } else {
        proc_control_node_B.a2.re = 0.0;
        proc_control_node_B.a2.im = -(proc_control_node_B.ar /
          proc_control_node_B.a2.im);
      }
    } else {
      proc_control_node_B.brm_b = fabs(proc_control_node_B.a2.re);
      proc_control_node_B.bim_e = fabs(proc_control_node_B.a2.im);
      if (proc_control_node_B.brm_b > proc_control_node_B.bim_e) {
        proc_control_node_B.brm_b = proc_control_node_B.a2.im /
          proc_control_node_B.a2.re;
        proc_control_node_B.bim_e = proc_control_node_B.brm_b *
          proc_control_node_B.a2.im + proc_control_node_B.a2.re;
        proc_control_node_B.a2.re = (proc_control_node_B.brm_b * 0.0 +
          proc_control_node_B.ar) / proc_control_node_B.bim_e;
        proc_control_node_B.a2.im = (0.0 - proc_control_node_B.brm_b *
          proc_control_node_B.ar) / proc_control_node_B.bim_e;
      } else if (proc_control_node_B.bim_e == proc_control_node_B.brm_b) {
        proc_control_node_B.bim_e = proc_control_node_B.a2.re > 0.0 ? 0.5 : -0.5;
        proc_control_node_B.sgnbi = proc_control_node_B.a2.im > 0.0 ? 0.5 : -0.5;
        proc_control_node_B.a2.re = (proc_control_node_B.ar *
          proc_control_node_B.bim_e + 0.0 * proc_control_node_B.sgnbi) /
          proc_control_node_B.brm_b;
        proc_control_node_B.a2.im = (0.0 * proc_control_node_B.bim_e -
          proc_control_node_B.ar * proc_control_node_B.sgnbi) /
          proc_control_node_B.brm_b;
      } else {
        proc_control_node_B.brm_b = proc_control_node_B.a2.re /
          proc_control_node_B.a2.im;
        proc_control_node_B.bim_e = proc_control_node_B.brm_b *
          proc_control_node_B.a2.re + proc_control_node_B.a2.im;
        proc_control_node_B.a2.re = proc_control_node_B.brm_b *
          proc_control_node_B.ar / proc_control_node_B.bim_e;
        proc_control_node_B.a2.im = (proc_control_node_B.brm_b * 0.0 -
          proc_control_node_B.ar) / proc_control_node_B.bim_e;
      }
    }

    proc_control_node_B.a2_data[proc_control_node_B.b_k_e] =
      proc_control_node_B.a2;
  }

  proc_control_node_B.nx_l3 = *a_size;
  for (proc_control_node_B.b_k_e = 0; proc_control_node_B.b_k_e <
       proc_control_node_B.nx_l3; proc_control_node_B.b_k_e++) {
    proc_control_node_B.a2 =
      proc_control_node_B.a1_data[proc_control_node_B.b_k_e];
    proc_control_node_B.a2.re +=
      proc_control_node_B.a2_data[proc_control_node_B.b_k_e].re;
    proc_control_node_B.a2.im +=
      proc_control_node_B.a2_data[proc_control_node_B.b_k_e].im;
    proc_control_node_B.a1_data[proc_control_node_B.b_k_e] =
      proc_control_node_B.a2;
  }

  proc_control_node_fresnel(proc_control_node_B.a1_data,
    &proc_control_node_B.a1_size, proc_control_node_B.fa_data,
    &proc_control_node_B.fa_size);
  proc_control_node_fresnel(proc_control_node_B.a2_data,
    &proc_control_node_B.a2_size, proc_control_node_B.tmp_data_m,
    &proc_control_node_B.tmp_size_f);
  proc_control_node_B.nx_l3 = proc_control_node_B.fa_size;
  for (proc_control_node_B.b_k_e = 0; proc_control_node_B.b_k_e <
       proc_control_node_B.nx_l3; proc_control_node_B.b_k_e++) {
    proc_control_node_B.a2 =
      proc_control_node_B.fa_data[proc_control_node_B.b_k_e];
    proc_control_node_B.a2.re -=
      proc_control_node_B.tmp_data_m[proc_control_node_B.b_k_e].re;
    proc_control_node_B.a2.im -=
      proc_control_node_B.tmp_data_m[proc_control_node_B.b_k_e].im;
    proc_control_node_B.fa_data[proc_control_node_B.b_k_e] =
      proc_control_node_B.a2;
  }

  proc_control_node_B.s_size_idx_0 = *a_size;
  proc_control_node_B.nx_l3 = *a_size;
  for (proc_control_node_B.b_k_e = 0; proc_control_node_B.b_k_e <
       proc_control_node_B.nx_l3; proc_control_node_B.b_k_e++) {
    proc_control_node_B.s_data_n[proc_control_node_B.b_k_e].re =
      3.1415926535897931 / (2.0 * a_data[proc_control_node_B.b_k_e]);
    proc_control_node_B.s_data_n[proc_control_node_B.b_k_e].im = 0.0;
  }

  proc_control_node_B.nx_l3 = *a_size - 1;
  for (proc_control_node_B.b_k_e = 0; proc_control_node_B.b_k_e <=
       proc_control_node_B.nx_l3; proc_control_node_B.b_k_e++) {
    proc_control_node_B.s_data_n[proc_control_node_B.b_k_e] =
      proc_control_node_sqrt
      (proc_control_node_B.s_data_n[proc_control_node_B.b_k_e]);
  }

  proc_control_node_B.ratio_size = *d_size;
  proc_control_node_B.nx_l3 = *d_size;
  for (proc_control_node_B.b_k_e = 0; proc_control_node_B.b_k_e <
       proc_control_node_B.nx_l3; proc_control_node_B.b_k_e++) {
    proc_control_node_B.ratio_data[proc_control_node_B.b_k_e] =
      d_data[proc_control_node_B.b_k_e] - a_data[proc_control_node_B.b_k_e];
  }

  proc_control_node_power(proc_control_node_B.ratio_data,
    &proc_control_node_B.ratio_size, proc_control_node_B.tmp_data_iu,
    &proc_control_node_B.tmp_size_f);
  proc_control_node_B.nx_l3 = *c_size;
  for (proc_control_node_B.b_k_e = 0; proc_control_node_B.b_k_e <
       proc_control_node_B.nx_l3; proc_control_node_B.b_k_e++) {
    proc_control_node_B.a_re_e = c_data[proc_control_node_B.b_k_e] -
      proc_control_node_B.tmp_data_iu[proc_control_node_B.b_k_e] / (4.0 *
      a_data[proc_control_node_B.b_k_e]);
    proc_control_node_B.r_data_o[proc_control_node_B.b_k_e].re =
      proc_control_node_B.a_re_e * 0.0;
    proc_control_node_B.r_data_o[proc_control_node_B.b_k_e].im =
      proc_control_node_B.a_re_e;
  }

  proc_control_node_B.nx_l3 = *c_size - 1;
  for (proc_control_node_B.b_k_e = 0; proc_control_node_B.b_k_e <=
       proc_control_node_B.nx_l3; proc_control_node_B.b_k_e++) {
    proc_control_node_B.a2 =
      proc_control_node_B.r_data_o[proc_control_node_B.b_k_e];
    if (proc_control_node_B.a2.im == 0.0) {
      proc_control_node_B.a_re_e = exp(proc_control_node_B.a2.re);
      proc_control_node_B.r_gn = 0.0;
    } else if (rtIsInf(proc_control_node_B.a2.im) && rtIsInf
               (proc_control_node_B.a2.re) && (proc_control_node_B.a2.re < 0.0))
    {
      proc_control_node_B.a_re_e = 0.0;
      proc_control_node_B.r_gn = 0.0;
    } else {
      proc_control_node_B.r_gn = exp(proc_control_node_B.a2.re / 2.0);
      proc_control_node_B.a_re_e = proc_control_node_B.r_gn * cos
        (proc_control_node_B.a2.im) * proc_control_node_B.r_gn;
      proc_control_node_B.r_gn *= proc_control_node_B.r_gn * sin
        (proc_control_node_B.a2.im);
    }

    proc_control_node_B.a2.re = proc_control_node_B.a_re_e;
    proc_control_node_B.a2.im = proc_control_node_B.r_gn;
    proc_control_node_B.r_data_o[proc_control_node_B.b_k_e] =
      proc_control_node_B.a2;
  }

  *drsfa_size = *a_size;
  for (proc_control_node_B.b_k_e = 0; proc_control_node_B.b_k_e <
       proc_control_node_B.s_size_idx_0; proc_control_node_B.b_k_e++) {
    drsfa_data[proc_control_node_B.b_k_e].re =
      proc_control_node_B.s_data_n[proc_control_node_B.b_k_e].re *
      proc_control_node_B.r_data_o[proc_control_node_B.b_k_e].re -
      proc_control_node_B.s_data_n[proc_control_node_B.b_k_e].im *
      proc_control_node_B.r_data_o[proc_control_node_B.b_k_e].im;
    drsfa_data[proc_control_node_B.b_k_e].im =
      proc_control_node_B.s_data_n[proc_control_node_B.b_k_e].re *
      proc_control_node_B.r_data_o[proc_control_node_B.b_k_e].im +
      proc_control_node_B.s_data_n[proc_control_node_B.b_k_e].im *
      proc_control_node_B.r_data_o[proc_control_node_B.b_k_e].re;
  }

  *rsfa_size = *a_size;
  proc_control_node_B.nx_l3 = *a_size;
  for (proc_control_node_B.b_k_e = 0; proc_control_node_B.b_k_e <
       proc_control_node_B.nx_l3; proc_control_node_B.b_k_e++) {
    rsfa_data[proc_control_node_B.b_k_e].re =
      drsfa_data[proc_control_node_B.b_k_e].re *
      proc_control_node_B.fa_data[proc_control_node_B.b_k_e].re -
      drsfa_data[proc_control_node_B.b_k_e].im *
      proc_control_node_B.fa_data[proc_control_node_B.b_k_e].im;
    rsfa_data[proc_control_node_B.b_k_e].im =
      drsfa_data[proc_control_node_B.b_k_e].re *
      proc_control_node_B.fa_data[proc_control_node_B.b_k_e].im +
      drsfa_data[proc_control_node_B.b_k_e].im *
      proc_control_node_B.fa_data[proc_control_node_B.b_k_e].re;
  }

  proc_control_node_B.nx_l3 = *a_size;
  for (proc_control_node_B.b_k_e = 0; proc_control_node_B.b_k_e <
       proc_control_node_B.nx_l3; proc_control_node_B.b_k_e++) {
    proc_control_node_B.x_data_c[proc_control_node_B.b_k_e].re =
      6.2831853071795862 * a_data[proc_control_node_B.b_k_e];
    proc_control_node_B.x_data_c[proc_control_node_B.b_k_e].im = 0.0;
  }

  proc_control_node_B.nx_l3 = *a_size - 1;
  for (proc_control_node_B.b_k_e = 0; proc_control_node_B.b_k_e <=
       proc_control_node_B.nx_l3; proc_control_node_B.b_k_e++) {
    proc_control_node_B.x_data_c[proc_control_node_B.b_k_e] =
      proc_control_node_sqrt
      (proc_control_node_B.x_data_c[proc_control_node_B.b_k_e]);
  }

  proc_control_node_B.x_size_e = *a_size;
  proc_control_node_B.nx_l3 = *a_size;
  for (proc_control_node_B.b_k_e = 0; proc_control_node_B.b_k_e <
       proc_control_node_B.nx_l3; proc_control_node_B.b_k_e++) {
    proc_control_node_B.x_data_cj[proc_control_node_B.b_k_e].re =
      6.2831853071795862 * a_data[proc_control_node_B.b_k_e];
    proc_control_node_B.x_data_cj[proc_control_node_B.b_k_e].im = 0.0;
  }

  proc_control_node_B.nx_l3 = *a_size - 1;
  for (proc_control_node_B.b_k_e = 0; proc_control_node_B.b_k_e <=
       proc_control_node_B.nx_l3; proc_control_node_B.b_k_e++) {
    proc_control_node_B.x_data_cj[proc_control_node_B.b_k_e] =
      proc_control_node_sqrt
      (proc_control_node_B.x_data_cj[proc_control_node_B.b_k_e]);
  }

  proc_control_node_B.nx_l3 = *a_size;
  for (proc_control_node_B.b_k_e = 0; proc_control_node_B.b_k_e <
       proc_control_node_B.nx_l3; proc_control_node_B.b_k_e++) {
    proc_control_node_B.da2_data[proc_control_node_B.b_k_e].re =
      6.2831853071795862 * a_data[proc_control_node_B.b_k_e];
    proc_control_node_B.da2_data[proc_control_node_B.b_k_e].im = 0.0;
  }

  proc_control_node_B.nx_l3 = *a_size - 1;
  for (proc_control_node_B.b_k_e = 0; proc_control_node_B.b_k_e <=
       proc_control_node_B.nx_l3; proc_control_node_B.b_k_e++) {
    proc_control_node_B.da2_data[proc_control_node_B.b_k_e] =
      proc_control_node_sqrt
      (proc_control_node_B.da2_data[proc_control_node_B.b_k_e]);
  }

  proc_control_node_power_b(proc_control_node_B.x_data_cj,
    &proc_control_node_B.x_size_e, proc_control_node_B.tmp_data_m,
    &proc_control_node_B.tmp_size_f);
  proc_control_node_B.nx_l3 = *d_size;
  for (proc_control_node_B.b_k_e = 0; proc_control_node_B.b_k_e <
       proc_control_node_B.nx_l3; proc_control_node_B.b_k_e++) {
    proc_control_node_B.ratio =
      proc_control_node_B.ratio_data[proc_control_node_B.b_k_e];
    proc_control_node_B.a2 =
      proc_control_node_B.da2_data[proc_control_node_B.b_k_e];
    proc_control_node_B.ar =
      proc_control_node_B.tmp_data_m[proc_control_node_B.b_k_e].re;
    proc_control_node_B.bi_o =
      proc_control_node_B.tmp_data_m[proc_control_node_B.b_k_e].im;
    if (proc_control_node_B.bi_o == 0.0) {
      proc_control_node_B.ar = -3.1415926535897931 / proc_control_node_B.ar;
      proc_control_node_B.bi_o = 0.0;
    } else if (proc_control_node_B.ar == 0.0) {
      proc_control_node_B.ar = 0.0;
      proc_control_node_B.bi_o = -(-3.1415926535897931 /
        proc_control_node_B.bi_o);
    } else {
      proc_control_node_B.brm_b = fabs(proc_control_node_B.ar);
      proc_control_node_B.bim_e = fabs(proc_control_node_B.bi_o);
      if (proc_control_node_B.brm_b > proc_control_node_B.bim_e) {
        proc_control_node_B.brm_b = proc_control_node_B.bi_o /
          proc_control_node_B.ar;
        proc_control_node_B.bim_e = proc_control_node_B.brm_b *
          proc_control_node_B.bi_o + proc_control_node_B.ar;
        proc_control_node_B.ar = (proc_control_node_B.brm_b * 0.0 +
          -3.1415926535897931) / proc_control_node_B.bim_e;
        proc_control_node_B.bi_o = (0.0 - proc_control_node_B.brm_b *
          -3.1415926535897931) / proc_control_node_B.bim_e;
      } else if (proc_control_node_B.bim_e == proc_control_node_B.brm_b) {
        proc_control_node_B.bim_e = proc_control_node_B.ar > 0.0 ? 0.5 : -0.5;
        proc_control_node_B.sgnbi = proc_control_node_B.bi_o > 0.0 ? 0.5 : -0.5;
        proc_control_node_B.ar = (-3.1415926535897931 *
          proc_control_node_B.bim_e + 0.0 * proc_control_node_B.sgnbi) /
          proc_control_node_B.brm_b;
        proc_control_node_B.bi_o = (0.0 * proc_control_node_B.bim_e -
          -3.1415926535897931 * proc_control_node_B.sgnbi) /
          proc_control_node_B.brm_b;
      } else {
        proc_control_node_B.brm_b = proc_control_node_B.ar /
          proc_control_node_B.bi_o;
        proc_control_node_B.bim_e = proc_control_node_B.brm_b *
          proc_control_node_B.ar + proc_control_node_B.bi_o;
        proc_control_node_B.ar = proc_control_node_B.brm_b * -3.1415926535897931
          / proc_control_node_B.bim_e;
        proc_control_node_B.bi_o = (proc_control_node_B.brm_b * 0.0 -
          -3.1415926535897931) / proc_control_node_B.bim_e;
      }
    }

    if (proc_control_node_B.a2.im == 0.0) {
      proc_control_node_B.a_re_e = 1.0 / proc_control_node_B.a2.re;
      proc_control_node_B.r_gn = 0.0;
    } else if (proc_control_node_B.a2.re == 0.0) {
      proc_control_node_B.a_re_e = 0.0;
      proc_control_node_B.r_gn = -(1.0 / proc_control_node_B.a2.im);
    } else {
      proc_control_node_B.brm_b = fabs(proc_control_node_B.a2.re);
      proc_control_node_B.bim_e = fabs(proc_control_node_B.a2.im);
      if (proc_control_node_B.brm_b > proc_control_node_B.bim_e) {
        proc_control_node_B.brm_b = proc_control_node_B.a2.im /
          proc_control_node_B.a2.re;
        proc_control_node_B.bim_e = proc_control_node_B.brm_b *
          proc_control_node_B.a2.im + proc_control_node_B.a2.re;
        proc_control_node_B.a_re_e = (proc_control_node_B.brm_b * 0.0 + 1.0) /
          proc_control_node_B.bim_e;
        proc_control_node_B.r_gn = (0.0 - proc_control_node_B.brm_b) /
          proc_control_node_B.bim_e;
      } else if (proc_control_node_B.bim_e == proc_control_node_B.brm_b) {
        proc_control_node_B.bim_e = proc_control_node_B.a2.re > 0.0 ? 0.5 : -0.5;
        proc_control_node_B.sgnbi = proc_control_node_B.a2.im > 0.0 ? 0.5 : -0.5;
        proc_control_node_B.a_re_e = (0.0 * proc_control_node_B.sgnbi +
          proc_control_node_B.bim_e) / proc_control_node_B.brm_b;
        proc_control_node_B.r_gn = (0.0 * proc_control_node_B.bim_e -
          proc_control_node_B.sgnbi) / proc_control_node_B.brm_b;
      } else {
        proc_control_node_B.brm_b = proc_control_node_B.a2.re /
          proc_control_node_B.a2.im;
        proc_control_node_B.bim_e = proc_control_node_B.brm_b *
          proc_control_node_B.a2.re + proc_control_node_B.a2.im;
        proc_control_node_B.a_re_e = proc_control_node_B.brm_b /
          proc_control_node_B.bim_e;
        proc_control_node_B.r_gn = (proc_control_node_B.brm_b * 0.0 - 1.0) /
          proc_control_node_B.bim_e;
      }
    }

    proc_control_node_B.a2.re = proc_control_node_B.ratio *
      proc_control_node_B.ar - proc_control_node_B.a_re_e;
    proc_control_node_B.a2.im = proc_control_node_B.ratio *
      proc_control_node_B.bi_o - proc_control_node_B.r_gn;
    proc_control_node_B.da2_data[proc_control_node_B.b_k_e] =
      proc_control_node_B.a2;
  }

  proc_control_node_power_b4(proc_control_node_B.a1_data,
    &proc_control_node_B.a1_size, proc_control_node_B.y_data_gg,
    &proc_control_node_B.fa_size);
  proc_control_node_B.nx_l3 = proc_control_node_B.fa_size;
  for (proc_control_node_B.b_k_e = 0; proc_control_node_B.b_k_e <
       proc_control_node_B.nx_l3; proc_control_node_B.b_k_e++) {
    proc_control_node_B.a2 =
      proc_control_node_B.y_data_gg[proc_control_node_B.b_k_e];
    proc_control_node_B.a_re_e = proc_control_node_B.a2.re;
    proc_control_node_B.a2.re = 0.0 * proc_control_node_B.a2.re -
      1.5707963267948966 * proc_control_node_B.a2.im;
    proc_control_node_B.a2.im = 0.0 * proc_control_node_B.a2.im +
      1.5707963267948966 * proc_control_node_B.a_re_e;
    proc_control_node_B.y_data_gg[proc_control_node_B.b_k_e] =
      proc_control_node_B.a2;
  }

  proc_control_node_B.nx_l3 = proc_control_node_B.fa_size - 1;
  for (proc_control_node_B.b_k_e = 0; proc_control_node_B.b_k_e <=
       proc_control_node_B.nx_l3; proc_control_node_B.b_k_e++) {
    proc_control_node_B.a2 =
      proc_control_node_B.y_data_gg[proc_control_node_B.b_k_e];
    if (proc_control_node_B.a2.im == 0.0) {
      proc_control_node_B.a_re_e = exp(proc_control_node_B.a2.re);
      proc_control_node_B.r_gn = 0.0;
    } else if (rtIsInf(proc_control_node_B.a2.im) && rtIsInf
               (proc_control_node_B.a2.re) && (proc_control_node_B.a2.re < 0.0))
    {
      proc_control_node_B.a_re_e = 0.0;
      proc_control_node_B.r_gn = 0.0;
    } else {
      proc_control_node_B.r_gn = exp(proc_control_node_B.a2.re / 2.0);
      proc_control_node_B.a_re_e = proc_control_node_B.r_gn * cos
        (proc_control_node_B.a2.im) * proc_control_node_B.r_gn;
      proc_control_node_B.r_gn *= proc_control_node_B.r_gn * sin
        (proc_control_node_B.a2.im);
    }

    proc_control_node_B.a2.re = proc_control_node_B.a_re_e;
    proc_control_node_B.a2.im = proc_control_node_B.r_gn;
    proc_control_node_B.y_data_gg[proc_control_node_B.b_k_e] =
      proc_control_node_B.a2;
  }

  proc_control_node_power_b4(proc_control_node_B.a2_data,
    &proc_control_node_B.a2_size, proc_control_node_B.a1_data,
    &proc_control_node_B.a1_size);
  proc_control_node_B.nx_l3 = proc_control_node_B.a1_size;
  for (proc_control_node_B.b_k_e = 0; proc_control_node_B.b_k_e <
       proc_control_node_B.nx_l3; proc_control_node_B.b_k_e++) {
    proc_control_node_B.a2 =
      proc_control_node_B.a1_data[proc_control_node_B.b_k_e];
    proc_control_node_B.a_re_e = proc_control_node_B.a2.re;
    proc_control_node_B.a2.re = 0.0 * proc_control_node_B.a2.re -
      1.5707963267948966 * proc_control_node_B.a2.im;
    proc_control_node_B.a2.im = 0.0 * proc_control_node_B.a2.im +
      1.5707963267948966 * proc_control_node_B.a_re_e;
    proc_control_node_B.a1_data[proc_control_node_B.b_k_e] =
      proc_control_node_B.a2;
  }

  proc_control_node_B.nx_l3 = proc_control_node_B.a1_size - 1;
  for (proc_control_node_B.b_k_e = 0; proc_control_node_B.b_k_e <=
       proc_control_node_B.nx_l3; proc_control_node_B.b_k_e++) {
    proc_control_node_B.a2 =
      proc_control_node_B.a1_data[proc_control_node_B.b_k_e];
    if (proc_control_node_B.a2.im == 0.0) {
      proc_control_node_B.a_re_e = exp(proc_control_node_B.a2.re);
      proc_control_node_B.r_gn = 0.0;
    } else if (rtIsInf(proc_control_node_B.a2.im) && rtIsInf
               (proc_control_node_B.a2.re) && (proc_control_node_B.a2.re < 0.0))
    {
      proc_control_node_B.a_re_e = 0.0;
      proc_control_node_B.r_gn = 0.0;
    } else {
      proc_control_node_B.r_gn = exp(proc_control_node_B.a2.re / 2.0);
      proc_control_node_B.a_re_e = proc_control_node_B.r_gn * cos
        (proc_control_node_B.a2.im) * proc_control_node_B.r_gn;
      proc_control_node_B.r_gn *= proc_control_node_B.r_gn * sin
        (proc_control_node_B.a2.im);
    }

    proc_control_node_B.a2.re = proc_control_node_B.a_re_e;
    proc_control_node_B.a2.im = proc_control_node_B.r_gn;
    proc_control_node_B.a1_data[proc_control_node_B.b_k_e] =
      proc_control_node_B.a2;
  }

  proc_control_node_B.nx_l3 = *a_size;
  if (0 <= proc_control_node_B.nx_l3 - 1) {
    memcpy(&proc_control_node_B.j_data[0], &a_data[0], proc_control_node_B.nx_l3
           * sizeof(real_T));
  }

  proc_control_node_B.nx_l3 = *a_size - 1;
  for (proc_control_node_B.b_k_e = 0; proc_control_node_B.b_k_e <=
       proc_control_node_B.nx_l3; proc_control_node_B.b_k_e++) {
    proc_control_node_B.j = proc_control_node_B.j_data[proc_control_node_B.b_k_e];
    if (proc_control_node_B.j < 0.0) {
      proc_control_node_B.j = -1.0;
    } else if (proc_control_node_B.j > 0.0) {
      proc_control_node_B.j = 1.0;
    } else if (proc_control_node_B.j == 0.0) {
      proc_control_node_B.j = 0.0;
    } else {
      proc_control_node_B.j = (rtNaN);
    }

    proc_control_node_B.j_data[proc_control_node_B.b_k_e] =
      proc_control_node_B.j;
  }

  proc_control_node_B.x_size_e = *a_size;
  proc_control_node_B.nx_l3 = *a_size;
  for (proc_control_node_B.b_k_e = 0; proc_control_node_B.b_k_e <
       proc_control_node_B.nx_l3; proc_control_node_B.b_k_e++) {
    proc_control_node_B.x_data_cj[proc_control_node_B.b_k_e].re =
      3.1415926535897931 / (2.0 * a_data[proc_control_node_B.b_k_e]);
    proc_control_node_B.x_data_cj[proc_control_node_B.b_k_e].im = 0.0;
  }

  proc_control_node_B.nx_l3 = *a_size - 1;
  for (proc_control_node_B.b_k_e = 0; proc_control_node_B.b_k_e <=
       proc_control_node_B.nx_l3; proc_control_node_B.b_k_e++) {
    proc_control_node_B.x_data_cj[proc_control_node_B.b_k_e] =
      proc_control_node_sqrt
      (proc_control_node_B.x_data_cj[proc_control_node_B.b_k_e]);
  }

  proc_control_node_B.nx_l3 = *d_size;
  for (proc_control_node_B.b_k_e = 0; proc_control_node_B.b_k_e <
       proc_control_node_B.nx_l3; proc_control_node_B.b_k_e++) {
    proc_control_node_B.ratio_data[proc_control_node_B.b_k_e] /= 4.0 *
      a_data[proc_control_node_B.b_k_e];
  }

  proc_control_node_power_b(proc_control_node_B.x_data_cj,
    &proc_control_node_B.x_size_e, proc_control_node_B.tmp_data_m,
    &proc_control_node_B.tmp_size_f);
  proc_control_node_B.nx_l3 = *a_size;
  for (proc_control_node_B.b_k_e = 0; proc_control_node_B.b_k_e <
       proc_control_node_B.nx_l3; proc_control_node_B.b_k_e++) {
    proc_control_node_B.j = proc_control_node_B.j_data[proc_control_node_B.b_k_e];
    proc_control_node_B.a2 = drsfa_data[proc_control_node_B.b_k_e];
    proc_control_node_B.ratio =
      proc_control_node_B.ratio_data[proc_control_node_B.b_k_e];
    proc_control_node_B.r_gn =
      proc_control_node_B.r_data_o[proc_control_node_B.b_k_e].re;
    proc_control_node_B.r_im =
      proc_control_node_B.r_data_o[proc_control_node_B.b_k_e].im;
    proc_control_node_B.da2_re =
      proc_control_node_B.da2_data[proc_control_node_B.b_k_e].re;
    proc_control_node_B.da2_im =
      proc_control_node_B.da2_data[proc_control_node_B.b_k_e].im;
    proc_control_node_B.a_re_e = proc_control_node_B.a2.re;
    proc_control_node_B.ar =
      proc_control_node_B.x_data_c[proc_control_node_B.b_k_e].re;
    proc_control_node_B.bi_o =
      proc_control_node_B.x_data_c[proc_control_node_B.b_k_e].im;
    if (proc_control_node_B.bi_o == 0.0) {
      proc_control_node_B.ar = 1.0 / proc_control_node_B.ar;
      proc_control_node_B.bi_o = 0.0;
    } else if (proc_control_node_B.ar == 0.0) {
      proc_control_node_B.ar = 0.0;
      proc_control_node_B.bi_o = -(1.0 / proc_control_node_B.bi_o);
    } else {
      proc_control_node_B.brm_b = fabs(proc_control_node_B.ar);
      proc_control_node_B.bim_e = fabs(proc_control_node_B.bi_o);
      if (proc_control_node_B.brm_b > proc_control_node_B.bim_e) {
        proc_control_node_B.brm_b = proc_control_node_B.bi_o /
          proc_control_node_B.ar;
        proc_control_node_B.bim_e = proc_control_node_B.brm_b *
          proc_control_node_B.bi_o + proc_control_node_B.ar;
        proc_control_node_B.ar = (proc_control_node_B.brm_b * 0.0 + 1.0) /
          proc_control_node_B.bim_e;
        proc_control_node_B.bi_o = (0.0 - proc_control_node_B.brm_b) /
          proc_control_node_B.bim_e;
      } else if (proc_control_node_B.bim_e == proc_control_node_B.brm_b) {
        proc_control_node_B.bim_e = proc_control_node_B.ar > 0.0 ? 0.5 : -0.5;
        proc_control_node_B.sgnbi = proc_control_node_B.bi_o > 0.0 ? 0.5 : -0.5;
        proc_control_node_B.ar = (0.0 * proc_control_node_B.sgnbi +
          proc_control_node_B.bim_e) / proc_control_node_B.brm_b;
        proc_control_node_B.bi_o = (0.0 * proc_control_node_B.bim_e -
          proc_control_node_B.sgnbi) / proc_control_node_B.brm_b;
      } else {
        proc_control_node_B.brm_b = proc_control_node_B.ar /
          proc_control_node_B.bi_o;
        proc_control_node_B.bim_e = proc_control_node_B.brm_b *
          proc_control_node_B.ar + proc_control_node_B.bi_o;
        proc_control_node_B.ar = proc_control_node_B.brm_b /
          proc_control_node_B.bim_e;
        proc_control_node_B.bi_o = (proc_control_node_B.brm_b * 0.0 - 1.0) /
          proc_control_node_B.bim_e;
      }
    }

    proc_control_node_B.ar += proc_control_node_B.da2_re;
    proc_control_node_B.bi_o += proc_control_node_B.da2_im;
    proc_control_node_B.brm_b =
      ((proc_control_node_B.y_data_gg[proc_control_node_B.b_k_e].re *
        proc_control_node_B.ar -
        proc_control_node_B.y_data_gg[proc_control_node_B.b_k_e].im *
        proc_control_node_B.bi_o) -
       (proc_control_node_B.a1_data[proc_control_node_B.b_k_e].re *
        proc_control_node_B.da2_re -
        proc_control_node_B.a1_data[proc_control_node_B.b_k_e].im *
        proc_control_node_B.da2_im)) * proc_control_node_B.j;
    proc_control_node_B.j *=
      (proc_control_node_B.y_data_gg[proc_control_node_B.b_k_e].re *
       proc_control_node_B.bi_o +
       proc_control_node_B.y_data_gg[proc_control_node_B.b_k_e].im *
       proc_control_node_B.ar) -
      (proc_control_node_B.a1_data[proc_control_node_B.b_k_e].re *
       proc_control_node_B.da2_im +
       proc_control_node_B.a1_data[proc_control_node_B.b_k_e].im *
       proc_control_node_B.da2_re);
    proc_control_node_B.ar = 2.0 * proc_control_node_B.ratio + 1.0;
    proc_control_node_B.da2_re = (proc_control_node_B.r_gn * 0.0 -
      proc_control_node_B.r_im * 2.0) * proc_control_node_B.ratio *
      proc_control_node_B.ar;
    proc_control_node_B.ratio = (proc_control_node_B.r_gn * 2.0 +
      proc_control_node_B.r_im * 0.0) * proc_control_node_B.ratio *
      proc_control_node_B.ar;
    proc_control_node_B.ar =
      -proc_control_node_B.tmp_data_m[proc_control_node_B.b_k_e].re;
    proc_control_node_B.bi_o =
      -proc_control_node_B.tmp_data_m[proc_control_node_B.b_k_e].im;
    if (proc_control_node_B.bi_o == 0.0) {
      proc_control_node_B.ar /= 3.1415926535897931;
      proc_control_node_B.bi_o = 0.0;
    } else if (proc_control_node_B.ar == 0.0) {
      proc_control_node_B.ar = 0.0;
      proc_control_node_B.bi_o /= 3.1415926535897931;
    } else {
      proc_control_node_B.ar /= 3.1415926535897931;
      proc_control_node_B.bi_o /= 3.1415926535897931;
    }

    proc_control_node_B.da2_im =
      (proc_control_node_B.s_data_n[proc_control_node_B.b_k_e].re *
       proc_control_node_B.da2_re -
       proc_control_node_B.s_data_n[proc_control_node_B.b_k_e].im *
       proc_control_node_B.ratio) + (proc_control_node_B.r_gn *
      proc_control_node_B.ar - proc_control_node_B.r_im *
      proc_control_node_B.bi_o);
    proc_control_node_B.r_gn =
      (proc_control_node_B.s_data_n[proc_control_node_B.b_k_e].re *
       proc_control_node_B.ratio +
       proc_control_node_B.s_data_n[proc_control_node_B.b_k_e].im *
       proc_control_node_B.da2_re) + (proc_control_node_B.r_gn *
      proc_control_node_B.bi_o + proc_control_node_B.r_im *
      proc_control_node_B.ar);
    proc_control_node_B.a2.re = (proc_control_node_B.a2.re *
      proc_control_node_B.brm_b - proc_control_node_B.a2.im *
      proc_control_node_B.j) +
      (proc_control_node_B.fa_data[proc_control_node_B.b_k_e].re *
       proc_control_node_B.da2_im -
       proc_control_node_B.fa_data[proc_control_node_B.b_k_e].im *
       proc_control_node_B.r_gn);
    proc_control_node_B.a2.im = (proc_control_node_B.a_re_e *
      proc_control_node_B.j + proc_control_node_B.a2.im *
      proc_control_node_B.brm_b) +
      (proc_control_node_B.fa_data[proc_control_node_B.b_k_e].re *
       proc_control_node_B.r_gn +
       proc_control_node_B.fa_data[proc_control_node_B.b_k_e].im *
       proc_control_node_B.da2_im);
    drsfa_data[proc_control_node_B.b_k_e] = proc_control_node_B.a2;
  }
}

static void proc_control_node_power_b4n(const real_T a_data[], const int32_T
  *a_size, real_T y_data[], int32_T *y_size)
{
  int32_T b_k;
  int32_T nx;
  *y_size = *a_size;
  nx = *a_size - 1;
  for (b_k = 0; b_k <= nx; b_k++) {
    y_data[b_k] = proc_control_node_rt_powd_snf(a_data[b_k], 3.0);
  }
}

static void proc_control_no_fresnelgSmalla1(const real_T a_data[], const int32_T
  *a_size, const real_T d_data[], const int32_T *d_size, const real_T c_data[],
  const int32_T *c_size, creal_T z_data[], int32_T *z_size, creal_T dz_data[],
  int32_T *dz_size)
{
  int32_T dp_size_idx_0;
  int32_T t_size_idx_0;
  proc_control_node_B.y_size_idx_0 = *a_size;
  proc_control_node_B.nx_g = *a_size;
  for (proc_control_node_B.b_k_b = 0; proc_control_node_B.b_k_b <
       proc_control_node_B.nx_g; proc_control_node_B.b_k_b++) {
    proc_control_node_B.y_data_eh[proc_control_node_B.b_k_b] = 2.0 *
      a_data[proc_control_node_B.b_k_b];
  }

  proc_control_node_B.k_size_j = *d_size;
  proc_control_node_B.nx_g = *d_size;
  for (proc_control_node_B.b_k_b = 0; proc_control_node_B.b_k_b <
       proc_control_node_B.nx_g; proc_control_node_B.b_k_b++) {
    proc_control_node_B.k_data[proc_control_node_B.b_k_b] =
      d_data[proc_control_node_B.b_k_b] - a_data[proc_control_node_B.b_k_b];
  }

  proc_control_node_B.nik_size_idx_0 = *d_size;
  proc_control_node_B.nx_g = *d_size;
  for (proc_control_node_B.b_k_b = 0; proc_control_node_B.b_k_b <
       proc_control_node_B.nx_g; proc_control_node_B.b_k_b++) {
    proc_control_node_B.k = proc_control_node_B.k_data[proc_control_node_B.b_k_b];
    proc_control_node_B.nik_data[proc_control_node_B.b_k_b].re =
      proc_control_node_B.k * -0.0;
    proc_control_node_B.nik_data[proc_control_node_B.b_k_b].im =
      -proc_control_node_B.k;
  }

  for (proc_control_node_B.b_k_b = 0; proc_control_node_B.b_k_b <
       proc_control_node_B.nik_size_idx_0; proc_control_node_B.b_k_b++) {
    proc_control_node_B.e_data_g[proc_control_node_B.b_k_b].re =
      -proc_control_node_B.nik_data[proc_control_node_B.b_k_b].re;
    proc_control_node_B.e_data_g[proc_control_node_B.b_k_b].im =
      -proc_control_node_B.nik_data[proc_control_node_B.b_k_b].im;
  }

  proc_control_node_B.nx_g = *d_size - 1;
  for (proc_control_node_B.b_k_b = 0; proc_control_node_B.b_k_b <=
       proc_control_node_B.nx_g; proc_control_node_B.b_k_b++) {
    proc_control_node_B.e_b =
      proc_control_node_B.e_data_g[proc_control_node_B.b_k_b];
    if (proc_control_node_B.e_b.im == 0.0) {
      proc_control_node_B.k = exp(proc_control_node_B.e_b.re);
      proc_control_node_B.r_lb = 0.0;
    } else if (rtIsInf(proc_control_node_B.e_b.im) && rtIsInf
               (proc_control_node_B.e_b.re) && (proc_control_node_B.e_b.re < 0.0))
    {
      proc_control_node_B.k = 0.0;
      proc_control_node_B.r_lb = 0.0;
    } else {
      proc_control_node_B.r_lb = exp(proc_control_node_B.e_b.re / 2.0);
      proc_control_node_B.k = proc_control_node_B.r_lb * cos
        (proc_control_node_B.e_b.im) * proc_control_node_B.r_lb;
      proc_control_node_B.r_lb *= proc_control_node_B.r_lb * sin
        (proc_control_node_B.e_b.im);
    }

    proc_control_node_B.e_b.re = proc_control_node_B.k;
    proc_control_node_B.e_b.im = proc_control_node_B.r_lb;
    proc_control_node_B.e_data_g[proc_control_node_B.b_k_b] =
      proc_control_node_B.e_b;
  }

  for (proc_control_node_B.b_k_b = 0; proc_control_node_B.b_k_b <
       proc_control_node_B.y_size_idx_0; proc_control_node_B.b_k_b++) {
    proc_control_node_B.y_e =
      proc_control_node_B.y_data_eh[proc_control_node_B.b_k_b];
    proc_control_node_B.A_data_c3[proc_control_node_B.b_k_b].re =
      proc_control_node_B.y_e * 0.0;
    proc_control_node_B.A_data_c3[proc_control_node_B.b_k_b].im =
      proc_control_node_B.y_e * 0.5;
  }

  proc_control_node_power(proc_control_node_B.k_data,
    &proc_control_node_B.k_size_j, proc_control_node_B.tmp_data_bs,
    &proc_control_node_B.tmp_size_fp);
  for (proc_control_node_B.b_k_b = 0; proc_control_node_B.b_k_b <
       proc_control_node_B.y_size_idx_0; proc_control_node_B.b_k_b++) {
    proc_control_node_B.y_e =
      proc_control_node_B.y_data_eh[proc_control_node_B.b_k_b];
    proc_control_node_B.r_lb = 0.5 * proc_control_node_B.y_e;
    proc_control_node_B.br_e =
      proc_control_node_B.tmp_data_bs[proc_control_node_B.b_k_b];
    if (proc_control_node_B.r_lb == 0.0) {
      proc_control_node_B.k = 0.0 * proc_control_node_B.y_e /
        proc_control_node_B.br_e;
      proc_control_node_B.r_lb = 0.0;
    } else if (0.0 * proc_control_node_B.y_e == 0.0) {
      proc_control_node_B.k = 0.0;
      proc_control_node_B.r_lb /= proc_control_node_B.br_e;
    } else {
      proc_control_node_B.k = (rtNaN);
      proc_control_node_B.r_lb /= proc_control_node_B.br_e;
    }

    proc_control_node_B.y_data_j[proc_control_node_B.b_k_b].re = -2.0 *
      proc_control_node_B.k;
    proc_control_node_B.y_data_j[proc_control_node_B.b_k_b].im = -2.0 *
      proc_control_node_B.r_lb;
  }

  proc_control_node_power_b4n(proc_control_node_B.k_data,
    &proc_control_node_B.k_size_j, proc_control_node_B.tmp_data_mg,
    &proc_control_node_B.tmp_size_fp);
  for (proc_control_node_B.b_k_b = 0; proc_control_node_B.b_k_b <
       proc_control_node_B.y_size_idx_0; proc_control_node_B.b_k_b++) {
    proc_control_node_B.k = proc_control_node_B.k_data[proc_control_node_B.b_k_b];
    proc_control_node_B.y_e =
      proc_control_node_B.y_data_eh[proc_control_node_B.b_k_b];
    proc_control_node_B.r_lb = -(2.0 * proc_control_node_B.y_e + 2.0 *
      proc_control_node_B.k);
    proc_control_node_B.br_e =
      proc_control_node_B.tmp_data_mg[proc_control_node_B.b_k_b];
    if (proc_control_node_B.r_lb == 0.0) {
      proc_control_node_B.dm2C_data[proc_control_node_B.b_k_b].re = -(0.0 *
        proc_control_node_B.y_e + 0.0 * proc_control_node_B.k) /
        proc_control_node_B.br_e;
      proc_control_node_B.dm2C_data[proc_control_node_B.b_k_b].im = 0.0;
    } else if (-(0.0 * proc_control_node_B.y_e + 0.0 * proc_control_node_B.k) ==
               0.0) {
      proc_control_node_B.dm2C_data[proc_control_node_B.b_k_b].re = 0.0;
      proc_control_node_B.dm2C_data[proc_control_node_B.b_k_b].im =
        proc_control_node_B.r_lb / proc_control_node_B.br_e;
    } else {
      proc_control_node_B.dm2C_data[proc_control_node_B.b_k_b].re = (rtNaN);
      proc_control_node_B.dm2C_data[proc_control_node_B.b_k_b].im =
        proc_control_node_B.r_lb / proc_control_node_B.br_e;
    }
  }

  t_size_idx_0 = *d_size;
  for (proc_control_node_B.b_k_b = 0; proc_control_node_B.b_k_b <
       proc_control_node_B.nik_size_idx_0; proc_control_node_B.b_k_b++) {
    proc_control_node_B.y_e = 1.0 -
      proc_control_node_B.e_data_g[proc_control_node_B.b_k_b].re;
    proc_control_node_B.r_lb = 0.0 -
      proc_control_node_B.e_data_g[proc_control_node_B.b_k_b].im;
    proc_control_node_B.br_e =
      proc_control_node_B.nik_data[proc_control_node_B.b_k_b].re;
    proc_control_node_B.k =
      proc_control_node_B.nik_data[proc_control_node_B.b_k_b].im;
    if (proc_control_node_B.k == 0.0) {
      if (proc_control_node_B.r_lb == 0.0) {
        proc_control_node_B.t_data[proc_control_node_B.b_k_b].re =
          proc_control_node_B.y_e / proc_control_node_B.br_e;
        proc_control_node_B.t_data[proc_control_node_B.b_k_b].im = 0.0;
      } else if (proc_control_node_B.y_e == 0.0) {
        proc_control_node_B.t_data[proc_control_node_B.b_k_b].re = 0.0;
        proc_control_node_B.t_data[proc_control_node_B.b_k_b].im =
          proc_control_node_B.r_lb / proc_control_node_B.br_e;
      } else {
        proc_control_node_B.t_data[proc_control_node_B.b_k_b].re =
          proc_control_node_B.y_e / proc_control_node_B.br_e;
        proc_control_node_B.t_data[proc_control_node_B.b_k_b].im =
          proc_control_node_B.r_lb / proc_control_node_B.br_e;
      }
    } else if (proc_control_node_B.br_e == 0.0) {
      if (proc_control_node_B.y_e == 0.0) {
        proc_control_node_B.t_data[proc_control_node_B.b_k_b].re =
          proc_control_node_B.r_lb / proc_control_node_B.k;
        proc_control_node_B.t_data[proc_control_node_B.b_k_b].im = 0.0;
      } else if (proc_control_node_B.r_lb == 0.0) {
        proc_control_node_B.t_data[proc_control_node_B.b_k_b].re = 0.0;
        proc_control_node_B.t_data[proc_control_node_B.b_k_b].im =
          -(proc_control_node_B.y_e / proc_control_node_B.k);
      } else {
        proc_control_node_B.t_data[proc_control_node_B.b_k_b].re =
          proc_control_node_B.r_lb / proc_control_node_B.k;
        proc_control_node_B.t_data[proc_control_node_B.b_k_b].im =
          -(proc_control_node_B.y_e / proc_control_node_B.k);
      }
    } else {
      proc_control_node_B.t_data[proc_control_node_B.b_k_b].re = (rtNaN);
      proc_control_node_B.t_data[proc_control_node_B.b_k_b].im = (rtNaN);
    }
  }

  proc_control_node_B.nx_g = *d_size;
  for (proc_control_node_B.b_k_b = 0; proc_control_node_B.b_k_b <
       proc_control_node_B.nx_g; proc_control_node_B.b_k_b++) {
    proc_control_node_B.k = proc_control_node_B.k_data[proc_control_node_B.b_k_b];
    proc_control_node_B.dt_data[proc_control_node_B.b_k_b].re =
      proc_control_node_B.k * 0.0;
    proc_control_node_B.dt_data[proc_control_node_B.b_k_b].im =
      proc_control_node_B.k;
  }

  proc_control_node_B.nx_g = *d_size - 1;
  for (proc_control_node_B.b_k_b = 0; proc_control_node_B.b_k_b <=
       proc_control_node_B.nx_g; proc_control_node_B.b_k_b++) {
    proc_control_node_B.e_b =
      proc_control_node_B.dt_data[proc_control_node_B.b_k_b];
    if (proc_control_node_B.e_b.im == 0.0) {
      proc_control_node_B.k = exp(proc_control_node_B.e_b.re);
      proc_control_node_B.r_lb = 0.0;
    } else if (rtIsInf(proc_control_node_B.e_b.im) && rtIsInf
               (proc_control_node_B.e_b.re) && (proc_control_node_B.e_b.re < 0.0))
    {
      proc_control_node_B.k = 0.0;
      proc_control_node_B.r_lb = 0.0;
    } else {
      proc_control_node_B.r_lb = exp(proc_control_node_B.e_b.re / 2.0);
      proc_control_node_B.k = proc_control_node_B.r_lb * cos
        (proc_control_node_B.e_b.im) * proc_control_node_B.r_lb;
      proc_control_node_B.r_lb *= proc_control_node_B.r_lb * sin
        (proc_control_node_B.e_b.im);
    }

    proc_control_node_B.e_b.re = proc_control_node_B.k;
    proc_control_node_B.e_b.im = proc_control_node_B.r_lb;
    proc_control_node_B.dt_data[proc_control_node_B.b_k_b] =
      proc_control_node_B.e_b;
  }

  proc_control_node_B.nx_g = *d_size;
  for (proc_control_node_B.b_k_b = 0; proc_control_node_B.b_k_b <
       proc_control_node_B.nx_g; proc_control_node_B.b_k_b++) {
    proc_control_node_B.k = proc_control_node_B.k_data[proc_control_node_B.b_k_b];
    proc_control_node_B.dp_data[proc_control_node_B.b_k_b].re =
      proc_control_node_B.k * 0.0;
    proc_control_node_B.dp_data[proc_control_node_B.b_k_b].im =
      proc_control_node_B.k;
  }

  proc_control_node_B.nx_g = *d_size - 1;
  for (proc_control_node_B.b_k_b = 0; proc_control_node_B.b_k_b <=
       proc_control_node_B.nx_g; proc_control_node_B.b_k_b++) {
    proc_control_node_B.dp =
      proc_control_node_B.dp_data[proc_control_node_B.b_k_b];
    if (proc_control_node_B.dp.im == 0.0) {
      proc_control_node_B.k = exp(proc_control_node_B.dp.re);
      proc_control_node_B.r_lb = 0.0;
    } else if (rtIsInf(proc_control_node_B.dp.im) && rtIsInf
               (proc_control_node_B.dp.re) && (proc_control_node_B.dp.re < 0.0))
    {
      proc_control_node_B.k = 0.0;
      proc_control_node_B.r_lb = 0.0;
    } else {
      proc_control_node_B.r_lb = exp(proc_control_node_B.dp.re / 2.0);
      proc_control_node_B.k = proc_control_node_B.r_lb * cos
        (proc_control_node_B.dp.im) * proc_control_node_B.r_lb;
      proc_control_node_B.r_lb *= proc_control_node_B.r_lb * sin
        (proc_control_node_B.dp.im);
    }

    proc_control_node_B.dp.re = proc_control_node_B.k;
    proc_control_node_B.dp.im = proc_control_node_B.r_lb;
    proc_control_node_B.dp_data[proc_control_node_B.b_k_b] =
      proc_control_node_B.dp;
  }

  proc_control_node_power(proc_control_node_B.k_data,
    &proc_control_node_B.k_size_j, proc_control_node_B.tmp_data_bs,
    &proc_control_node_B.tmp_size_fp);
  proc_control_node_B.nx_g = *d_size;
  for (proc_control_node_B.b_k_b = 0; proc_control_node_B.b_k_b <
       proc_control_node_B.nx_g; proc_control_node_B.b_k_b++) {
    proc_control_node_B.e_b =
      proc_control_node_B.dt_data[proc_control_node_B.b_k_b];
    proc_control_node_B.k = proc_control_node_B.k_data[proc_control_node_B.b_k_b];
    proc_control_node_B.r_lb =
      proc_control_node_B.dp_data[proc_control_node_B.b_k_b].re - 1.0;
    proc_control_node_B.br_e =
      proc_control_node_B.dp_data[proc_control_node_B.b_k_b].im;
    proc_control_node_B.y_e = -((0.0 * proc_control_node_B.r_lb -
      proc_control_node_B.br_e) + proc_control_node_B.k *
      proc_control_node_B.e_b.re);
    proc_control_node_B.r_lb = -((0.0 * proc_control_node_B.br_e +
      proc_control_node_B.r_lb) + proc_control_node_B.k *
      proc_control_node_B.e_b.im);
    proc_control_node_B.br_e =
      proc_control_node_B.tmp_data_bs[proc_control_node_B.b_k_b];
    if (proc_control_node_B.r_lb == 0.0) {
      proc_control_node_B.e_b.re = proc_control_node_B.y_e /
        proc_control_node_B.br_e;
      proc_control_node_B.e_b.im = 0.0;
    } else if (proc_control_node_B.y_e == 0.0) {
      proc_control_node_B.e_b.re = 0.0;
      proc_control_node_B.e_b.im = proc_control_node_B.r_lb /
        proc_control_node_B.br_e;
    } else {
      proc_control_node_B.e_b.re = proc_control_node_B.y_e /
        proc_control_node_B.br_e;
      proc_control_node_B.e_b.im = proc_control_node_B.r_lb /
        proc_control_node_B.br_e;
    }

    proc_control_node_B.dt_data[proc_control_node_B.b_k_b] =
      proc_control_node_B.e_b;
  }

  for (proc_control_node_B.b_k_b = 0; proc_control_node_B.b_k_b <
       proc_control_node_B.nik_size_idx_0; proc_control_node_B.b_k_b++) {
    proc_control_node_B.e_b =
      proc_control_node_B.nik_data[proc_control_node_B.b_k_b];
    if (proc_control_node_B.e_b.im == 0.0) {
      proc_control_node_B.k = proc_control_node_B.e_b.re / 2.0;
      proc_control_node_B.r_lb = 0.0;
    } else if (proc_control_node_B.e_b.re == 0.0) {
      proc_control_node_B.k = 0.0;
      proc_control_node_B.r_lb = proc_control_node_B.e_b.im / 2.0;
    } else {
      proc_control_node_B.k = (rtNaN);
      proc_control_node_B.r_lb = proc_control_node_B.e_b.im / 2.0;
    }

    proc_control_node_B.e_b.re = proc_control_node_B.k;
    proc_control_node_B.e_b.im = proc_control_node_B.r_lb;
    proc_control_node_B.nik_data[proc_control_node_B.b_k_b] =
      proc_control_node_B.e_b;
  }

  for (proc_control_node_B.b_k_b = 0; proc_control_node_B.b_k_b <
       proc_control_node_B.nik_size_idx_0; proc_control_node_B.b_k_b++) {
    proc_control_node_B.e_b =
      proc_control_node_B.e_data_g[proc_control_node_B.b_k_b];
    proc_control_node_B.e_b.re = -proc_control_node_B.e_b.re;
    proc_control_node_B.e_b.im = -proc_control_node_B.e_b.im;
    proc_control_node_B.e_data_g[proc_control_node_B.b_k_b] =
      proc_control_node_B.e_b;
  }

  dp_size_idx_0 = *d_size;
  proc_control_node_B.nx_g = *d_size;
  for (proc_control_node_B.b_k_b = 0; proc_control_node_B.b_k_b <
       proc_control_node_B.nx_g; proc_control_node_B.b_k_b++) {
    proc_control_node_B.k = proc_control_node_B.k_data[proc_control_node_B.b_k_b];
    proc_control_node_B.dp_data[proc_control_node_B.b_k_b].re =
      proc_control_node_B.k * 0.0;
    proc_control_node_B.dp_data[proc_control_node_B.b_k_b].im =
      proc_control_node_B.k;
  }

  proc_control_node_B.nx_g = *d_size - 1;
  for (proc_control_node_B.b_k_b = 0; proc_control_node_B.b_k_b <=
       proc_control_node_B.nx_g; proc_control_node_B.b_k_b++) {
    proc_control_node_B.dp =
      proc_control_node_B.dp_data[proc_control_node_B.b_k_b];
    if (proc_control_node_B.dp.im == 0.0) {
      proc_control_node_B.k = exp(proc_control_node_B.dp.re);
      proc_control_node_B.r_lb = 0.0;
    } else if (rtIsInf(proc_control_node_B.dp.im) && rtIsInf
               (proc_control_node_B.dp.re) && (proc_control_node_B.dp.re < 0.0))
    {
      proc_control_node_B.k = 0.0;
      proc_control_node_B.r_lb = 0.0;
    } else {
      proc_control_node_B.r_lb = exp(proc_control_node_B.dp.re / 2.0);
      proc_control_node_B.k = proc_control_node_B.r_lb * cos
        (proc_control_node_B.dp.im) * proc_control_node_B.r_lb;
      proc_control_node_B.r_lb *= proc_control_node_B.r_lb * sin
        (proc_control_node_B.dp.im);
    }

    proc_control_node_B.dp.re = proc_control_node_B.k;
    proc_control_node_B.dp.im = proc_control_node_B.r_lb;
    proc_control_node_B.dp_data[proc_control_node_B.b_k_b] =
      proc_control_node_B.dp;
  }

  for (proc_control_node_B.b_k_b = 0; proc_control_node_B.b_k_b < dp_size_idx_0;
       proc_control_node_B.b_k_b++) {
    proc_control_node_B.dp =
      proc_control_node_B.dp_data[proc_control_node_B.b_k_b];
    proc_control_node_B.r_lb = proc_control_node_B.dp.re;
    proc_control_node_B.dp.re = 0.0 * proc_control_node_B.dp.re -
      proc_control_node_B.dp.im;
    proc_control_node_B.dp.im = 0.0 * proc_control_node_B.dp.im +
      proc_control_node_B.r_lb;
    proc_control_node_B.dp_data[proc_control_node_B.b_k_b] =
      proc_control_node_B.dp;
  }

  *z_size = *d_size;
  if (0 <= proc_control_node_B.nik_size_idx_0 - 1) {
    memcpy(&z_data[0], &proc_control_node_B.t_data[0],
           proc_control_node_B.nik_size_idx_0 * sizeof(creal_T));
  }

  *dz_size = *d_size;
  if (0 <= *d_size - 1) {
    memcpy(&dz_data[0], &proc_control_node_B.dt_data[0], *d_size * sizeof
           (creal_T));
  }

  for (proc_control_node_B.nx_g = 0; proc_control_node_B.nx_g < 20;
       proc_control_node_B.nx_g++) {
    proc_control_node_B.b_k_b = ((proc_control_node_B.nx_g + 1) << 1) - 1;
    for (dp_size_idx_0 = 0; dp_size_idx_0 < t_size_idx_0; dp_size_idx_0++) {
      proc_control_node_B.e_b = proc_control_node_B.t_data[dp_size_idx_0];
      proc_control_node_B.r_lb = static_cast<real_T>(proc_control_node_B.nx_g +
        1) + proc_control_node_B.nik_data[dp_size_idx_0].re;
      proc_control_node_B.br_e = proc_control_node_B.nik_data[dp_size_idx_0].im;
      proc_control_node_B.e_b.re = (proc_control_node_B.r_lb *
        proc_control_node_B.e_data_g[dp_size_idx_0].re -
        proc_control_node_B.br_e * proc_control_node_B.e_data_g[dp_size_idx_0].
        im) + static_cast<real_T>(proc_control_node_B.b_k_b) *
        proc_control_node_B.e_b.re;
      proc_control_node_B.e_b.im = (proc_control_node_B.r_lb *
        proc_control_node_B.e_data_g[dp_size_idx_0].im +
        proc_control_node_B.br_e * proc_control_node_B.e_data_g[dp_size_idx_0].
        re) + static_cast<real_T>(proc_control_node_B.b_k_b) *
        proc_control_node_B.e_b.im;
      proc_control_node_B.t_data[dp_size_idx_0] = proc_control_node_B.e_b;
    }

    for (dp_size_idx_0 = 0; dp_size_idx_0 < proc_control_node_B.y_size_idx_0;
         dp_size_idx_0++) {
      proc_control_node_B.e_b = proc_control_node_B.dt_data[dp_size_idx_0];
      proc_control_node_B.r_lb = static_cast<real_T>(proc_control_node_B.nx_g +
        1) + proc_control_node_B.nik_data[dp_size_idx_0].re;
      proc_control_node_B.br_e = proc_control_node_B.nik_data[dp_size_idx_0].im;
      proc_control_node_B.k = ((0.0 * proc_control_node_B.e_data_g[dp_size_idx_0]
        .re - 0.5 * proc_control_node_B.e_data_g[dp_size_idx_0].im) +
        static_cast<real_T>(proc_control_node_B.b_k_b) *
        proc_control_node_B.e_b.re) + (proc_control_node_B.dp_data[dp_size_idx_0]
        .re * proc_control_node_B.r_lb -
        proc_control_node_B.dp_data[dp_size_idx_0].im * proc_control_node_B.br_e);
      proc_control_node_B.r_lb = ((0.0 *
        proc_control_node_B.e_data_g[dp_size_idx_0].im + 0.5 *
        proc_control_node_B.e_data_g[dp_size_idx_0].re) + static_cast<real_T>
        (proc_control_node_B.b_k_b) * proc_control_node_B.e_b.im) +
        (proc_control_node_B.dp_data[dp_size_idx_0].re *
         proc_control_node_B.br_e + proc_control_node_B.dp_data[dp_size_idx_0].
         im * proc_control_node_B.r_lb);
      proc_control_node_B.e_b.re = (proc_control_node_B.y_data_j[dp_size_idx_0].
        re * proc_control_node_B.k - proc_control_node_B.y_data_j[dp_size_idx_0]
        .im * proc_control_node_B.r_lb) +
        (proc_control_node_B.t_data[dp_size_idx_0].re *
         proc_control_node_B.dm2C_data[dp_size_idx_0].re -
         proc_control_node_B.t_data[dp_size_idx_0].im *
         proc_control_node_B.dm2C_data[dp_size_idx_0].im);
      proc_control_node_B.e_b.im = (proc_control_node_B.y_data_j[dp_size_idx_0].
        re * proc_control_node_B.r_lb +
        proc_control_node_B.y_data_j[dp_size_idx_0].im * proc_control_node_B.k)
        + (proc_control_node_B.t_data[dp_size_idx_0].re *
           proc_control_node_B.dm2C_data[dp_size_idx_0].im +
           proc_control_node_B.t_data[dp_size_idx_0].im *
           proc_control_node_B.dm2C_data[dp_size_idx_0].re);
      proc_control_node_B.dt_data[dp_size_idx_0] = proc_control_node_B.e_b;
    }

    t_size_idx_0 = proc_control_node_B.y_size_idx_0;
    for (proc_control_node_B.b_k_b = 0; proc_control_node_B.b_k_b <
         proc_control_node_B.y_size_idx_0; proc_control_node_B.b_k_b++) {
      proc_control_node_B.e_b =
        proc_control_node_B.t_data[proc_control_node_B.b_k_b];
      proc_control_node_B.k = proc_control_node_B.e_b.re;
      proc_control_node_B.e_b.re =
        proc_control_node_B.y_data_j[proc_control_node_B.b_k_b].re *
        proc_control_node_B.e_b.re -
        proc_control_node_B.y_data_j[proc_control_node_B.b_k_b].im *
        proc_control_node_B.e_b.im;
      proc_control_node_B.e_b.im =
        proc_control_node_B.y_data_j[proc_control_node_B.b_k_b].re *
        proc_control_node_B.e_b.im +
        proc_control_node_B.y_data_j[proc_control_node_B.b_k_b].im *
        proc_control_node_B.k;
      proc_control_node_B.t_data[proc_control_node_B.b_k_b] =
        proc_control_node_B.e_b;
    }

    dp_size_idx_0 = *dz_size;
    for (proc_control_node_B.b_k_b = 0; proc_control_node_B.b_k_b <
         dp_size_idx_0; proc_control_node_B.b_k_b++) {
      proc_control_node_B.e_b = dz_data[proc_control_node_B.b_k_b];
      proc_control_node_B.e_b.re +=
        proc_control_node_B.dt_data[proc_control_node_B.b_k_b].re;
      proc_control_node_B.e_b.im +=
        proc_control_node_B.dt_data[proc_control_node_B.b_k_b].im;
      dz_data[proc_control_node_B.b_k_b] = proc_control_node_B.e_b;
    }

    for (proc_control_node_B.b_k_b = 0; proc_control_node_B.b_k_b <
         proc_control_node_B.nik_size_idx_0; proc_control_node_B.b_k_b++) {
      proc_control_node_B.e_b = z_data[proc_control_node_B.b_k_b];
      proc_control_node_B.e_b.re +=
        proc_control_node_B.t_data[proc_control_node_B.b_k_b].re;
      proc_control_node_B.e_b.im +=
        proc_control_node_B.t_data[proc_control_node_B.b_k_b].im;
      z_data[proc_control_node_B.b_k_b] = proc_control_node_B.e_b;
    }

    for (proc_control_node_B.b_k_b = 0; proc_control_node_B.b_k_b <
         proc_control_node_B.nik_size_idx_0; proc_control_node_B.b_k_b++) {
      proc_control_node_B.e_b =
        proc_control_node_B.e_data_g[proc_control_node_B.b_k_b];
      proc_control_node_B.dp =
        proc_control_node_B.dp_data[proc_control_node_B.b_k_b];
      proc_control_node_B.y_e = (proc_control_node_B.e_b.re * 0.0 -
        proc_control_node_B.e_b.im) +
        (proc_control_node_B.A_data_c3[proc_control_node_B.b_k_b].re *
         proc_control_node_B.dp.re -
         proc_control_node_B.A_data_c3[proc_control_node_B.b_k_b].im *
         proc_control_node_B.dp.im);
      proc_control_node_B.r_lb = (proc_control_node_B.e_b.im * 0.0 +
        proc_control_node_B.e_b.re) +
        (proc_control_node_B.A_data_c3[proc_control_node_B.b_k_b].re *
         proc_control_node_B.dp.im +
         proc_control_node_B.A_data_c3[proc_control_node_B.b_k_b].im *
         proc_control_node_B.dp.re);
      if (proc_control_node_B.r_lb == 0.0) {
        proc_control_node_B.dp.re = proc_control_node_B.y_e / static_cast<real_T>
          (proc_control_node_B.nx_g + 2);
        proc_control_node_B.dp.im = 0.0;
      } else if (proc_control_node_B.y_e == 0.0) {
        proc_control_node_B.dp.re = 0.0;
        proc_control_node_B.dp.im = proc_control_node_B.r_lb /
          static_cast<real_T>(proc_control_node_B.nx_g + 2);
      } else {
        proc_control_node_B.dp.re = proc_control_node_B.y_e / static_cast<real_T>
          (proc_control_node_B.nx_g + 2);
        proc_control_node_B.dp.im = proc_control_node_B.r_lb /
          static_cast<real_T>(proc_control_node_B.nx_g + 2);
      }

      proc_control_node_B.k = proc_control_node_B.e_b.re *
        proc_control_node_B.A_data_c3[proc_control_node_B.b_k_b].re -
        proc_control_node_B.e_b.im *
        proc_control_node_B.A_data_c3[proc_control_node_B.b_k_b].im;
      proc_control_node_B.r_lb = proc_control_node_B.e_b.re *
        proc_control_node_B.A_data_c3[proc_control_node_B.b_k_b].im +
        proc_control_node_B.e_b.im *
        proc_control_node_B.A_data_c3[proc_control_node_B.b_k_b].re;
      if (proc_control_node_B.r_lb == 0.0) {
        proc_control_node_B.e_b.re = proc_control_node_B.k / static_cast<real_T>
          (proc_control_node_B.nx_g + 2);
        proc_control_node_B.e_b.im = 0.0;
      } else if (proc_control_node_B.k == 0.0) {
        proc_control_node_B.e_b.re = 0.0;
        proc_control_node_B.e_b.im = proc_control_node_B.r_lb /
          static_cast<real_T>(proc_control_node_B.nx_g + 2);
      } else {
        proc_control_node_B.e_b.re = proc_control_node_B.k / static_cast<real_T>
          (proc_control_node_B.nx_g + 2);
        proc_control_node_B.e_b.im = proc_control_node_B.r_lb /
          static_cast<real_T>(proc_control_node_B.nx_g + 2);
      }

      proc_control_node_B.dp_data[proc_control_node_B.b_k_b] =
        proc_control_node_B.dp;
      proc_control_node_B.e_data_g[proc_control_node_B.b_k_b] =
        proc_control_node_B.e_b;
    }
  }

  proc_control_node_B.nx_g = *c_size;
  for (proc_control_node_B.b_k_b = 0; proc_control_node_B.b_k_b <
       proc_control_node_B.nx_g; proc_control_node_B.b_k_b++) {
    proc_control_node_B.k = c_data[proc_control_node_B.b_k_b];
    proc_control_node_B.dp_data[proc_control_node_B.b_k_b].re =
      proc_control_node_B.k * 0.0;
    proc_control_node_B.dp_data[proc_control_node_B.b_k_b].im =
      proc_control_node_B.k;
  }

  proc_control_node_B.nx_g = *c_size - 1;
  for (proc_control_node_B.b_k_b = 0; proc_control_node_B.b_k_b <=
       proc_control_node_B.nx_g; proc_control_node_B.b_k_b++) {
    proc_control_node_B.dp =
      proc_control_node_B.dp_data[proc_control_node_B.b_k_b];
    if (proc_control_node_B.dp.im == 0.0) {
      proc_control_node_B.k = exp(proc_control_node_B.dp.re);
      proc_control_node_B.r_lb = 0.0;
    } else if (rtIsInf(proc_control_node_B.dp.im) && rtIsInf
               (proc_control_node_B.dp.re) && (proc_control_node_B.dp.re < 0.0))
    {
      proc_control_node_B.k = 0.0;
      proc_control_node_B.r_lb = 0.0;
    } else {
      proc_control_node_B.r_lb = exp(proc_control_node_B.dp.re / 2.0);
      proc_control_node_B.k = proc_control_node_B.r_lb * cos
        (proc_control_node_B.dp.im) * proc_control_node_B.r_lb;
      proc_control_node_B.r_lb *= proc_control_node_B.r_lb * sin
        (proc_control_node_B.dp.im);
    }

    proc_control_node_B.dp.re = proc_control_node_B.k;
    proc_control_node_B.dp.im = proc_control_node_B.r_lb;
    proc_control_node_B.dp_data[proc_control_node_B.b_k_b] =
      proc_control_node_B.dp;
  }

  proc_control_node_B.nx_g = *d_size;
  for (proc_control_node_B.b_k_b = 0; proc_control_node_B.b_k_b <
       proc_control_node_B.nx_g; proc_control_node_B.b_k_b++) {
    proc_control_node_B.e_b = z_data[proc_control_node_B.b_k_b];
    proc_control_node_B.k = proc_control_node_B.e_b.re;
    proc_control_node_B.e_b.re = proc_control_node_B.e_b.re *
      proc_control_node_B.dp_data[proc_control_node_B.b_k_b].re -
      proc_control_node_B.e_b.im *
      proc_control_node_B.dp_data[proc_control_node_B.b_k_b].im;
    proc_control_node_B.e_b.im = proc_control_node_B.k *
      proc_control_node_B.dp_data[proc_control_node_B.b_k_b].im +
      proc_control_node_B.e_b.im *
      proc_control_node_B.dp_data[proc_control_node_B.b_k_b].re;
    z_data[proc_control_node_B.b_k_b] = proc_control_node_B.e_b;
  }

  proc_control_node_B.nx_g = *c_size;
  for (proc_control_node_B.b_k_b = 0; proc_control_node_B.b_k_b <
       proc_control_node_B.nx_g; proc_control_node_B.b_k_b++) {
    proc_control_node_B.k = c_data[proc_control_node_B.b_k_b];
    proc_control_node_B.dp_data[proc_control_node_B.b_k_b].re =
      proc_control_node_B.k * 0.0;
    proc_control_node_B.dp_data[proc_control_node_B.b_k_b].im =
      proc_control_node_B.k;
  }

  proc_control_node_B.nx_g = *c_size - 1;
  for (proc_control_node_B.b_k_b = 0; proc_control_node_B.b_k_b <=
       proc_control_node_B.nx_g; proc_control_node_B.b_k_b++) {
    proc_control_node_B.dp =
      proc_control_node_B.dp_data[proc_control_node_B.b_k_b];
    if (proc_control_node_B.dp.im == 0.0) {
      proc_control_node_B.k = exp(proc_control_node_B.dp.re);
      proc_control_node_B.r_lb = 0.0;
    } else if (rtIsInf(proc_control_node_B.dp.im) && rtIsInf
               (proc_control_node_B.dp.re) && (proc_control_node_B.dp.re < 0.0))
    {
      proc_control_node_B.k = 0.0;
      proc_control_node_B.r_lb = 0.0;
    } else {
      proc_control_node_B.r_lb = exp(proc_control_node_B.dp.re / 2.0);
      proc_control_node_B.k = proc_control_node_B.r_lb * cos
        (proc_control_node_B.dp.im) * proc_control_node_B.r_lb;
      proc_control_node_B.r_lb *= proc_control_node_B.r_lb * sin
        (proc_control_node_B.dp.im);
    }

    proc_control_node_B.dp.re = proc_control_node_B.k;
    proc_control_node_B.dp.im = proc_control_node_B.r_lb;
    proc_control_node_B.dp_data[proc_control_node_B.b_k_b] =
      proc_control_node_B.dp;
  }

  proc_control_node_B.nx_g = *d_size;
  for (proc_control_node_B.b_k_b = 0; proc_control_node_B.b_k_b <
       proc_control_node_B.nx_g; proc_control_node_B.b_k_b++) {
    proc_control_node_B.e_b = dz_data[proc_control_node_B.b_k_b];
    proc_control_node_B.k = proc_control_node_B.e_b.re;
    proc_control_node_B.e_b.re = proc_control_node_B.e_b.re *
      proc_control_node_B.dp_data[proc_control_node_B.b_k_b].re -
      proc_control_node_B.e_b.im *
      proc_control_node_B.dp_data[proc_control_node_B.b_k_b].im;
    proc_control_node_B.e_b.im = proc_control_node_B.k *
      proc_control_node_B.dp_data[proc_control_node_B.b_k_b].im +
      proc_control_node_B.e_b.im *
      proc_control_node_B.dp_data[proc_control_node_B.b_k_b].re;
    dz_data[proc_control_node_B.b_k_b] = proc_control_node_B.e_b;
  }
}

static void proc_control_node_fresnelg1_b(const real_T a_data[], const int32_T
  *a_size, const real_T d_data[], const int32_T *d_size, const real_T c_data[],
  creal_T z_data[], int32_T *z_size, creal_T dz_data[], int32_T *dz_size)
{
  proc_control_node_B.h_idx_0 = *a_size;
  *z_size = *a_size;
  *dz_size = *a_size;
  if (0 <= proc_control_node_B.h_idx_0 - 1) {
    memset(&z_data[0], 0, proc_control_node_B.h_idx_0 * sizeof(creal_T));
  }

  if (0 <= proc_control_node_B.h_idx_0 - 1) {
    memset(&dz_data[0], 0, proc_control_node_B.h_idx_0 * sizeof(creal_T));
  }

  proc_control_node_B.a_size_idx_0 = *d_size;
  proc_control_node_B.h_idx_0 = *d_size;
  for (proc_control_node_B.nx_f = 0; proc_control_node_B.nx_f <
       proc_control_node_B.h_idx_0; proc_control_node_B.nx_f++) {
    proc_control_node_B.a_data_n[proc_control_node_B.nx_f] =
      d_data[proc_control_node_B.nx_f] - a_data[proc_control_node_B.nx_f];
  }

  proc_control_node_B.nx_f = *d_size - 1;
  for (proc_control_node_B.h_idx_0 = 0; proc_control_node_B.h_idx_0 <=
       proc_control_node_B.nx_f; proc_control_node_B.h_idx_0++) {
    proc_control_node_B.a_b3 =
      proc_control_node_B.a_data_n[proc_control_node_B.h_idx_0];
    proc_control_node_B.y_data_fq[proc_control_node_B.h_idx_0] =
      proc_control_node_B.a_b3 * proc_control_node_B.a_b3;
  }

  for (proc_control_node_B.nx_f = 0; proc_control_node_B.nx_f <
       proc_control_node_B.a_size_idx_0; proc_control_node_B.nx_f++) {
    proc_control_node_B.ilarge_data[proc_control_node_B.nx_f] =
      proc_control_node_B.y_data_fq[proc_control_node_B.nx_f] / (4.0 *
      a_data[proc_control_node_B.nx_f]);
  }

  proc_control_node_B.nx_f = *d_size - 1;
  for (proc_control_node_B.h_idx_0 = 0; proc_control_node_B.h_idx_0 <=
       proc_control_node_B.nx_f; proc_control_node_B.h_idx_0++) {
    proc_control_node_B.y_data_fq[proc_control_node_B.h_idx_0] = fabs
      (proc_control_node_B.ilarge_data[proc_control_node_B.h_idx_0]);
  }

  proc_control_node_B.criteria_size = *d_size;
  for (proc_control_node_B.nx_f = 0; proc_control_node_B.nx_f <
       proc_control_node_B.a_size_idx_0; proc_control_node_B.nx_f++) {
    proc_control_node_B.criteria_data[proc_control_node_B.nx_f] =
      (proc_control_node_B.y_data_fq[proc_control_node_B.nx_f] <
       628.31853071795865);
  }

  proc_control_node_eml_find_b(proc_control_node_B.criteria_data,
    &proc_control_node_B.criteria_size, proc_control_node_B.y_tmp_data,
    &proc_control_node_B.y_tmp_size);
  proc_control_node_B.ilarge_size_idx_0 = proc_control_node_B.y_tmp_size;
  proc_control_node_B.h_idx_0 = proc_control_node_B.y_tmp_size;
  for (proc_control_node_B.nx_f = 0; proc_control_node_B.nx_f <
       proc_control_node_B.h_idx_0; proc_control_node_B.nx_f++) {
    proc_control_node_B.ilarge_data[proc_control_node_B.nx_f] =
      proc_control_node_B.y_tmp_data[proc_control_node_B.nx_f];
  }

  proc_control_node_B.criteria_size_a = *d_size;
  proc_control_node_B.h_idx_0 = *d_size;
  for (proc_control_node_B.nx_f = 0; proc_control_node_B.nx_f <
       proc_control_node_B.h_idx_0; proc_control_node_B.nx_f++) {
    proc_control_node_B.criteria_data_i[proc_control_node_B.nx_f] =
      !proc_control_node_B.criteria_data[proc_control_node_B.nx_f];
  }

  proc_control_node_eml_find_b(proc_control_node_B.criteria_data_i,
    &proc_control_node_B.criteria_size_a, proc_control_node_B.y_tmp_data,
    &proc_control_node_B.y_tmp_size);
  proc_control_node_B.ismall_size_idx_0 = proc_control_node_B.y_tmp_size;
  proc_control_node_B.h_idx_0 = proc_control_node_B.y_tmp_size;
  if (0 <= proc_control_node_B.h_idx_0 - 1) {
    memcpy(&proc_control_node_B.ismall_data_g[0],
           &proc_control_node_B.y_tmp_data[0], proc_control_node_B.h_idx_0 *
           sizeof(int32_T));
  }

  proc_control_node_B.criteria_size = *d_size;
  proc_control_node_B.h_idx_0 = *d_size;
  for (proc_control_node_B.nx_f = 0; proc_control_node_B.nx_f <
       proc_control_node_B.h_idx_0; proc_control_node_B.nx_f++) {
    proc_control_node_B.criteria_data[proc_control_node_B.nx_f] =
      ((d_data[proc_control_node_B.nx_f] == 0.0) &&
       (a_data[proc_control_node_B.nx_f] == 0.0));
  }

  proc_control_node_eml_find_b(proc_control_node_B.criteria_data,
    &proc_control_node_B.criteria_size, proc_control_node_B.y_tmp_data,
    &proc_control_node_B.y_tmp_size);
  proc_control_node_B.a_size_idx_0 = proc_control_node_B.y_tmp_size;
  proc_control_node_B.h_idx_0 = proc_control_node_B.y_tmp_size;
  if (0 <= proc_control_node_B.h_idx_0 - 1) {
    memcpy(&proc_control_node_B.izero_data[0], &proc_control_node_B.y_tmp_data[0],
           proc_control_node_B.h_idx_0 * sizeof(int32_T));
  }

  if (proc_control_node_B.ilarge_size_idx_0 != 0) {
    proc_control_node_B.a_size = proc_control_node_B.ilarge_size_idx_0;
    for (proc_control_node_B.nx_f = 0; proc_control_node_B.nx_f <
         proc_control_node_B.ilarge_size_idx_0; proc_control_node_B.nx_f++) {
      proc_control_node_B.a_data_j[proc_control_node_B.nx_f] = a_data[
        static_cast<int32_T>
        (proc_control_node_B.ilarge_data[proc_control_node_B.nx_f]) - 1];
    }

    proc_control_node_B.d_size_g = proc_control_node_B.ilarge_size_idx_0;
    for (proc_control_node_B.nx_f = 0; proc_control_node_B.nx_f <
         proc_control_node_B.ilarge_size_idx_0; proc_control_node_B.nx_f++) {
      proc_control_node_B.d_data_h[proc_control_node_B.nx_f] = d_data[
        static_cast<int32_T>
        (proc_control_node_B.ilarge_data[proc_control_node_B.nx_f]) - 1];
    }

    proc_control_node_B.c_size_k = proc_control_node_B.ilarge_size_idx_0;
    for (proc_control_node_B.nx_f = 0; proc_control_node_B.nx_f <
         proc_control_node_B.ilarge_size_idx_0; proc_control_node_B.nx_f++) {
      proc_control_node_B.c_data_f[proc_control_node_B.nx_f] = c_data[
        static_cast<int32_T>
        (proc_control_node_B.ilarge_data[proc_control_node_B.nx_f]) - 1];
    }

    proc_control_no_fresnelgLargea1(proc_control_node_B.a_data_j,
      &proc_control_node_B.a_size, proc_control_node_B.d_data_h,
      &proc_control_node_B.d_size_g, proc_control_node_B.c_data_f,
      &proc_control_node_B.c_size_k, proc_control_node_B.b_data_n,
      &proc_control_node_B.criteria_size, proc_control_node_B.e_data_k,
      &proc_control_node_B.criteria_size_a);
    proc_control_node_B.h_idx_0 = proc_control_node_B.criteria_size;
    for (proc_control_node_B.nx_f = 0; proc_control_node_B.nx_f <
         proc_control_node_B.h_idx_0; proc_control_node_B.nx_f++) {
      z_data[static_cast<int32_T>
        (proc_control_node_B.ilarge_data[proc_control_node_B.nx_f]) - 1] =
        proc_control_node_B.b_data_n[proc_control_node_B.nx_f];
    }

    proc_control_node_B.h_idx_0 = proc_control_node_B.criteria_size_a;
    for (proc_control_node_B.nx_f = 0; proc_control_node_B.nx_f <
         proc_control_node_B.h_idx_0; proc_control_node_B.nx_f++) {
      dz_data[static_cast<int32_T>
        (proc_control_node_B.ilarge_data[proc_control_node_B.nx_f]) - 1] =
        proc_control_node_B.e_data_k[proc_control_node_B.nx_f];
    }
  }

  if (proc_control_node_B.ismall_size_idx_0 != 0) {
    proc_control_node_B.a_size = proc_control_node_B.ismall_size_idx_0;
    for (proc_control_node_B.nx_f = 0; proc_control_node_B.nx_f <
         proc_control_node_B.ismall_size_idx_0; proc_control_node_B.nx_f++) {
      proc_control_node_B.a_data_j[proc_control_node_B.nx_f] =
        a_data[proc_control_node_B.ismall_data_g[proc_control_node_B.nx_f] - 1];
    }

    proc_control_node_B.d_size_g = proc_control_node_B.ismall_size_idx_0;
    for (proc_control_node_B.nx_f = 0; proc_control_node_B.nx_f <
         proc_control_node_B.ismall_size_idx_0; proc_control_node_B.nx_f++) {
      proc_control_node_B.d_data_h[proc_control_node_B.nx_f] =
        d_data[proc_control_node_B.ismall_data_g[proc_control_node_B.nx_f] - 1];
    }

    proc_control_node_B.c_size_k = proc_control_node_B.ismall_size_idx_0;
    for (proc_control_node_B.nx_f = 0; proc_control_node_B.nx_f <
         proc_control_node_B.ismall_size_idx_0; proc_control_node_B.nx_f++) {
      proc_control_node_B.c_data_f[proc_control_node_B.nx_f] =
        c_data[proc_control_node_B.ismall_data_g[proc_control_node_B.nx_f] - 1];
    }

    proc_control_no_fresnelgSmalla1(proc_control_node_B.a_data_j,
      &proc_control_node_B.a_size, proc_control_node_B.d_data_h,
      &proc_control_node_B.d_size_g, proc_control_node_B.c_data_f,
      &proc_control_node_B.c_size_k, proc_control_node_B.b_data_n,
      &proc_control_node_B.criteria_size, proc_control_node_B.e_data_k,
      &proc_control_node_B.criteria_size_a);
    proc_control_node_B.h_idx_0 = proc_control_node_B.criteria_size;
    for (proc_control_node_B.nx_f = 0; proc_control_node_B.nx_f <
         proc_control_node_B.h_idx_0; proc_control_node_B.nx_f++) {
      z_data[proc_control_node_B.ismall_data_g[proc_control_node_B.nx_f] - 1] =
        proc_control_node_B.b_data_n[proc_control_node_B.nx_f];
    }

    proc_control_node_B.h_idx_0 = proc_control_node_B.criteria_size_a;
    for (proc_control_node_B.nx_f = 0; proc_control_node_B.nx_f <
         proc_control_node_B.h_idx_0; proc_control_node_B.nx_f++) {
      dz_data[proc_control_node_B.ismall_data_g[proc_control_node_B.nx_f] - 1] =
        proc_control_node_B.e_data_k[proc_control_node_B.nx_f];
    }
  }

  if (proc_control_node_B.y_tmp_size != 0) {
    if (0 <= proc_control_node_B.a_size_idx_0 - 1) {
      memcpy(&proc_control_node_B.y_tmp_data[0],
             &proc_control_node_B.izero_data[0],
             proc_control_node_B.a_size_idx_0 * sizeof(int32_T));
    }

    for (proc_control_node_B.nx_f = 0; proc_control_node_B.nx_f <
         proc_control_node_B.a_size_idx_0; proc_control_node_B.nx_f++) {
      proc_control_node_B.a_b3 =
        c_data[proc_control_node_B.y_tmp_data[proc_control_node_B.nx_f] - 1];
      proc_control_node_B.b_data_n[proc_control_node_B.nx_f].re =
        proc_control_node_B.a_b3 * 0.0;
      proc_control_node_B.b_data_n[proc_control_node_B.nx_f].im =
        proc_control_node_B.a_b3;
    }

    proc_control_node_B.nx_f = proc_control_node_B.y_tmp_size - 1;
    for (proc_control_node_B.h_idx_0 = 0; proc_control_node_B.h_idx_0 <=
         proc_control_node_B.nx_f; proc_control_node_B.h_idx_0++) {
      proc_control_node_B.b_g =
        proc_control_node_B.b_data_n[proc_control_node_B.h_idx_0];
      if (proc_control_node_B.b_g.im == 0.0) {
        proc_control_node_B.a_b3 = exp(proc_control_node_B.b_g.re);
        proc_control_node_B.r_i1 = 0.0;
      } else if (rtIsInf(proc_control_node_B.b_g.im) && rtIsInf
                 (proc_control_node_B.b_g.re) && (proc_control_node_B.b_g.re <
                  0.0)) {
        proc_control_node_B.a_b3 = 0.0;
        proc_control_node_B.r_i1 = 0.0;
      } else {
        proc_control_node_B.r_i1 = exp(proc_control_node_B.b_g.re / 2.0);
        proc_control_node_B.a_b3 = proc_control_node_B.r_i1 * cos
          (proc_control_node_B.b_g.im) * proc_control_node_B.r_i1;
        proc_control_node_B.r_i1 *= proc_control_node_B.r_i1 * sin
          (proc_control_node_B.b_g.im);
      }

      proc_control_node_B.b_g.re = proc_control_node_B.a_b3;
      proc_control_node_B.b_g.im = proc_control_node_B.r_i1;
      proc_control_node_B.b_data_n[proc_control_node_B.h_idx_0] =
        proc_control_node_B.b_g;
    }

    proc_control_node_B.h_idx_0 = proc_control_node_B.y_tmp_size;
    for (proc_control_node_B.nx_f = 0; proc_control_node_B.nx_f <
         proc_control_node_B.h_idx_0; proc_control_node_B.nx_f++) {
      z_data[proc_control_node_B.izero_data[proc_control_node_B.nx_f] - 1] =
        proc_control_node_B.b_data_n[proc_control_node_B.nx_f];
    }

    for (proc_control_node_B.nx_f = 0; proc_control_node_B.nx_f <
         proc_control_node_B.a_size_idx_0; proc_control_node_B.nx_f++) {
      proc_control_node_B.h_idx_0 =
        proc_control_node_B.y_tmp_data[proc_control_node_B.nx_f];
      dz_data[proc_control_node_B.h_idx_0 - 1].re = 0.0;
      dz_data[proc_control_node_B.h_idx_0 - 1].im = 0.0;
    }
  }
}

static void proc_control_node_abs_b4(const creal_T x_data[], const int32_T
  *x_size, real_T y_data[], int32_T *y_size)
{
  int32_T b_k;
  int32_T nx;
  nx = *x_size - 1;
  *y_size = *x_size;
  for (b_k = 0; b_k <= nx; b_k++) {
    y_data[b_k] = proc_control_node_rt_hypotd_snf(x_data[b_k].re, x_data[b_k].im);
  }
}

static void proc_control_clothoidG1fit2wp_b(const creal_T z0_data[], const
  real_T theta0_data[], const int32_T *theta0_size, const creal_T z1_data[],
  const int32_T *z1_size, const real_T theta1_data[], const int32_T *theta1_size,
  real_T k0_data[], int32_T *k0_size, real_T k1_data[], int32_T *k1_size, real_T
  l_data[], int32_T *l_size, real_T dk0_dtheta0_data[], int32_T
  *dk0_dtheta0_size, real_T dk0_dtheta1_data[], int32_T *dk0_dtheta1_size,
  real_T dk1_dtheta0_data[], int32_T *dk1_dtheta0_size, real_T dk1_dtheta1_data[],
  int32_T *dk1_dtheta1_size)
{
  proc_control_node_B.z_size_o = *z1_size;
  proc_control_node_B.nx_lo = *z1_size;
  for (proc_control_node_B.b_k_m = 0; proc_control_node_B.b_k_m <
       proc_control_node_B.nx_lo; proc_control_node_B.b_k_m++) {
    proc_control_node_B.z_data_pm[proc_control_node_B.b_k_m].re =
      z1_data[proc_control_node_B.b_k_m].re - z0_data[proc_control_node_B.b_k_m]
      .re;
    proc_control_node_B.z_data_pm[proc_control_node_B.b_k_m].im =
      z1_data[proc_control_node_B.b_k_m].im - z0_data[proc_control_node_B.b_k_m]
      .im;
  }

  proc_control_node_angle_b(proc_control_node_B.z_data_pm,
    &proc_control_node_B.z_size_o, proc_control_node_B.phi_data,
    &proc_control_node_B.phi_size);
  proc_control_node_B.y_size_a = *theta0_size;
  proc_control_node_B.nx_lo = *theta0_size;
  for (proc_control_node_B.b_k_m = 0; proc_control_node_B.b_k_m <
       proc_control_node_B.nx_lo; proc_control_node_B.b_k_m++) {
    proc_control_node_B.a_re = theta0_data[proc_control_node_B.b_k_m] -
      proc_control_node_B.phi_data[proc_control_node_B.b_k_m];
    proc_control_node_B.y_data_p2[proc_control_node_B.b_k_m].re =
      proc_control_node_B.a_re * 0.0;
    proc_control_node_B.y_data_p2[proc_control_node_B.b_k_m].im =
      proc_control_node_B.a_re;
  }

  proc_control_node_B.nx_lo = *theta0_size - 1;
  for (proc_control_node_B.b_k_m = 0; proc_control_node_B.b_k_m <=
       proc_control_node_B.nx_lo; proc_control_node_B.b_k_m++) {
    proc_control_node_B.y_ch =
      proc_control_node_B.y_data_p2[proc_control_node_B.b_k_m];
    if (proc_control_node_B.y_ch.im == 0.0) {
      proc_control_node_B.a_re = exp(proc_control_node_B.y_ch.re);
      proc_control_node_B.r_i = 0.0;
    } else if (rtIsInf(proc_control_node_B.y_ch.im) && rtIsInf
               (proc_control_node_B.y_ch.re) && (proc_control_node_B.y_ch.re <
                0.0)) {
      proc_control_node_B.a_re = 0.0;
      proc_control_node_B.r_i = 0.0;
    } else {
      proc_control_node_B.r_i = exp(proc_control_node_B.y_ch.re / 2.0);
      proc_control_node_B.a_re = proc_control_node_B.r_i * cos
        (proc_control_node_B.y_ch.im) * proc_control_node_B.r_i;
      proc_control_node_B.r_i *= proc_control_node_B.r_i * sin
        (proc_control_node_B.y_ch.im);
    }

    proc_control_node_B.y_ch.re = proc_control_node_B.a_re;
    proc_control_node_B.y_ch.im = proc_control_node_B.r_i;
    proc_control_node_B.y_data_p2[proc_control_node_B.b_k_m] =
      proc_control_node_B.y_ch;
  }

  proc_control_node_angle_b(proc_control_node_B.y_data_p2,
    &proc_control_node_B.y_size_a, proc_control_node_B.phi0_data,
    &proc_control_node_B.phi0_size);
  proc_control_node_B.y_size_a = *theta1_size;
  proc_control_node_B.nx_lo = *theta1_size;
  for (proc_control_node_B.b_k_m = 0; proc_control_node_B.b_k_m <
       proc_control_node_B.nx_lo; proc_control_node_B.b_k_m++) {
    proc_control_node_B.a_re = theta1_data[proc_control_node_B.b_k_m] -
      proc_control_node_B.phi_data[proc_control_node_B.b_k_m];
    proc_control_node_B.y_data_p2[proc_control_node_B.b_k_m].re =
      proc_control_node_B.a_re * 0.0;
    proc_control_node_B.y_data_p2[proc_control_node_B.b_k_m].im =
      proc_control_node_B.a_re;
  }

  proc_control_node_B.nx_lo = *theta1_size - 1;
  for (proc_control_node_B.b_k_m = 0; proc_control_node_B.b_k_m <=
       proc_control_node_B.nx_lo; proc_control_node_B.b_k_m++) {
    proc_control_node_B.y_ch =
      proc_control_node_B.y_data_p2[proc_control_node_B.b_k_m];
    if (proc_control_node_B.y_ch.im == 0.0) {
      proc_control_node_B.a_re = exp(proc_control_node_B.y_ch.re);
      proc_control_node_B.r_i = 0.0;
    } else if (rtIsInf(proc_control_node_B.y_ch.im) && rtIsInf
               (proc_control_node_B.y_ch.re) && (proc_control_node_B.y_ch.re <
                0.0)) {
      proc_control_node_B.a_re = 0.0;
      proc_control_node_B.r_i = 0.0;
    } else {
      proc_control_node_B.r_i = exp(proc_control_node_B.y_ch.re / 2.0);
      proc_control_node_B.a_re = proc_control_node_B.r_i * cos
        (proc_control_node_B.y_ch.im) * proc_control_node_B.r_i;
      proc_control_node_B.r_i *= proc_control_node_B.r_i * sin
        (proc_control_node_B.y_ch.im);
    }

    proc_control_node_B.y_ch.re = proc_control_node_B.a_re;
    proc_control_node_B.y_ch.im = proc_control_node_B.r_i;
    proc_control_node_B.y_data_p2[proc_control_node_B.b_k_m] =
      proc_control_node_B.y_ch;
  }

  proc_control_node_angle_b(proc_control_node_B.y_data_p2,
    &proc_control_node_B.y_size_a, proc_control_node_B.phi1_data,
    &proc_control_node_B.phi1_size);
  *k1_size = proc_control_node_B.phi1_size;
  proc_control_node_B.nx_lo = proc_control_node_B.phi1_size;
  for (proc_control_node_B.b_k_m = 0; proc_control_node_B.b_k_m <
       proc_control_node_B.nx_lo; proc_control_node_B.b_k_m++) {
    k1_data[proc_control_node_B.b_k_m] =
      proc_control_node_B.phi1_data[proc_control_node_B.b_k_m] -
      proc_control_node_B.phi0_data[proc_control_node_B.b_k_m];
  }

  proc_control_node_fetchAgrad_b(proc_control_node_B.phi0_data,
    &proc_control_node_B.phi0_size, proc_control_node_B.phi1_data,
    proc_control_node_B.phi_data, &proc_control_node_B.phi_size,
    proc_control_node_B.da_dphi0_data, &proc_control_node_B.y_size_a,
    proc_control_node_B.da_dphi1_data, &proc_control_node_B.da_dphi1_size);
  proc_control_node_fresnelg1_b(proc_control_node_B.phi_data,
    &proc_control_node_B.phi_size, k1_data, k1_size,
    proc_control_node_B.phi0_data, proc_control_node_B.y_data_p2,
    &proc_control_node_B.y_size_a, proc_control_node_B.df_da_data,
    &proc_control_node_B.da_dphi1_size);
  proc_control_node_abs_b4(proc_control_node_B.z_data_pm,
    &proc_control_node_B.z_size_o, proc_control_node_B.tmp_data_c,
    &proc_control_node_B.phi_size);
  *dk1_dtheta1_size = proc_control_node_B.phi_size;
  proc_control_node_B.nx_lo = proc_control_node_B.phi_size;
  if (0 <= proc_control_node_B.nx_lo - 1) {
    memcpy(&dk1_dtheta1_data[0], &proc_control_node_B.tmp_data_c[0],
           proc_control_node_B.nx_lo * sizeof(real_T));
  }

  *l_size = proc_control_node_B.phi_size;
  proc_control_node_B.nx_lo = proc_control_node_B.phi_size;
  for (proc_control_node_B.b_k_m = 0; proc_control_node_B.b_k_m <
       proc_control_node_B.nx_lo; proc_control_node_B.b_k_m++) {
    l_data[proc_control_node_B.b_k_m] =
      dk1_dtheta1_data[proc_control_node_B.b_k_m] /
      proc_control_node_B.y_data_p2[proc_control_node_B.b_k_m].re;
  }

  proc_control_node_power_b4(proc_control_node_B.y_data_p2,
    &proc_control_node_B.y_size_a, proc_control_node_B.z_data_pm,
    &proc_control_node_B.z_size_o);
  proc_control_node_B.nx_lo = proc_control_node_B.phi_size;
  for (proc_control_node_B.b_k_m = 0; proc_control_node_B.b_k_m <
       proc_control_node_B.nx_lo; proc_control_node_B.b_k_m++) {
    proc_control_node_B.a_re =
      proc_control_node_B.df_da_data[proc_control_node_B.b_k_m].re;
    proc_control_node_B.r_i =
      proc_control_node_B.df_da_data[proc_control_node_B.b_k_m].im;
    proc_control_node_B.br_m =
      proc_control_node_B.z_data_pm[proc_control_node_B.b_k_m].re;
    proc_control_node_B.bi_c =
      proc_control_node_B.z_data_pm[proc_control_node_B.b_k_m].im;
    if (proc_control_node_B.bi_c == 0.0) {
      if (proc_control_node_B.r_i == 0.0) {
        proc_control_node_B.a_re /= proc_control_node_B.br_m;
      } else if (proc_control_node_B.a_re == 0.0) {
        proc_control_node_B.a_re = 0.0;
      } else {
        proc_control_node_B.a_re /= proc_control_node_B.br_m;
      }
    } else if (proc_control_node_B.br_m == 0.0) {
      if (proc_control_node_B.a_re == 0.0) {
        proc_control_node_B.a_re = proc_control_node_B.r_i /
          proc_control_node_B.bi_c;
      } else if (proc_control_node_B.r_i == 0.0) {
        proc_control_node_B.a_re = 0.0;
      } else {
        proc_control_node_B.a_re = proc_control_node_B.r_i /
          proc_control_node_B.bi_c;
      }
    } else {
      proc_control_node_B.brm_l = fabs(proc_control_node_B.br_m);
      proc_control_node_B.bim_p = fabs(proc_control_node_B.bi_c);
      if (proc_control_node_B.brm_l > proc_control_node_B.bim_p) {
        proc_control_node_B.brm_l = proc_control_node_B.bi_c /
          proc_control_node_B.br_m;
        proc_control_node_B.a_re = (proc_control_node_B.brm_l *
          proc_control_node_B.r_i + proc_control_node_B.a_re) /
          (proc_control_node_B.brm_l * proc_control_node_B.bi_c +
           proc_control_node_B.br_m);
      } else if (proc_control_node_B.bim_p == proc_control_node_B.brm_l) {
        proc_control_node_B.a_re = ((proc_control_node_B.br_m > 0.0 ? 0.5 : -0.5)
          * proc_control_node_B.a_re + (proc_control_node_B.bi_c > 0.0 ? 0.5 :
          -0.5) * proc_control_node_B.r_i) / proc_control_node_B.brm_l;
      } else {
        proc_control_node_B.brm_l = proc_control_node_B.br_m /
          proc_control_node_B.bi_c;
        proc_control_node_B.a_re = (proc_control_node_B.brm_l *
          proc_control_node_B.a_re + proc_control_node_B.r_i) /
          (proc_control_node_B.brm_l * proc_control_node_B.br_m +
           proc_control_node_B.bi_c);
      }
    }

    dk1_dtheta1_data[proc_control_node_B.b_k_m] =
      -dk1_dtheta1_data[proc_control_node_B.b_k_m] * proc_control_node_B.a_re;
  }

  proc_control_node_power(l_data, l_size, proc_control_node_B.tmp_data_c,
    &proc_control_node_B.phi_size);
  proc_control_node_B.nx_lo = proc_control_node_B.phi_size;
  if (0 <= proc_control_node_B.nx_lo - 1) {
    memcpy(&proc_control_node_B.phi0_data[0], &proc_control_node_B.tmp_data_c[0],
           proc_control_node_B.nx_lo * sizeof(real_T));
  }

  *k0_size = proc_control_node_B.phi1_size;
  proc_control_node_B.nx_lo = proc_control_node_B.phi1_size;
  for (proc_control_node_B.b_k_m = 0; proc_control_node_B.b_k_m <
       proc_control_node_B.nx_lo; proc_control_node_B.b_k_m++) {
    k0_data[proc_control_node_B.b_k_m] = k1_data[proc_control_node_B.b_k_m] -
      proc_control_node_B.phi_data[proc_control_node_B.b_k_m];
  }

  proc_control_node_B.nx_lo = *dk1_dtheta1_size;
  for (proc_control_node_B.b_k_m = 0; proc_control_node_B.b_k_m <
       proc_control_node_B.nx_lo; proc_control_node_B.b_k_m++) {
    dk1_dtheta0_data[proc_control_node_B.b_k_m] =
      -dk1_dtheta1_data[proc_control_node_B.b_k_m] *
      proc_control_node_B.da_dphi0_data[proc_control_node_B.b_k_m] /
      proc_control_node_B.phi0_data[proc_control_node_B.b_k_m];
  }

  *dk0_dtheta0_size = proc_control_node_B.phi1_size;
  proc_control_node_B.nx_lo = proc_control_node_B.phi1_size;
  for (proc_control_node_B.b_k_m = 0; proc_control_node_B.b_k_m <
       proc_control_node_B.nx_lo; proc_control_node_B.b_k_m++) {
    dk0_dtheta0_data[proc_control_node_B.b_k_m] = (-1.0 -
      proc_control_node_B.da_dphi0_data[proc_control_node_B.b_k_m]) /
      l_data[proc_control_node_B.b_k_m] + k0_data[proc_control_node_B.b_k_m] *
      dk1_dtheta0_data[proc_control_node_B.b_k_m];
  }

  proc_control_node_B.nx_lo = *dk1_dtheta1_size;
  for (proc_control_node_B.b_k_m = 0; proc_control_node_B.b_k_m <
       proc_control_node_B.nx_lo; proc_control_node_B.b_k_m++) {
    dk1_dtheta1_data[proc_control_node_B.b_k_m] =
      -dk1_dtheta1_data[proc_control_node_B.b_k_m] *
      proc_control_node_B.da_dphi1_data[proc_control_node_B.b_k_m] /
      proc_control_node_B.phi0_data[proc_control_node_B.b_k_m];
  }

  *dk0_dtheta1_size = proc_control_node_B.phi1_size;
  proc_control_node_B.nx_lo = proc_control_node_B.phi1_size;
  for (proc_control_node_B.b_k_m = 0; proc_control_node_B.b_k_m <
       proc_control_node_B.nx_lo; proc_control_node_B.b_k_m++) {
    dk0_dtheta1_data[proc_control_node_B.b_k_m] = (1.0 -
      proc_control_node_B.da_dphi1_data[proc_control_node_B.b_k_m]) /
      l_data[proc_control_node_B.b_k_m] + k0_data[proc_control_node_B.b_k_m] *
      dk1_dtheta1_data[proc_control_node_B.b_k_m];
  }

  proc_control_node_B.nx_lo = proc_control_node_B.phi1_size;
  for (proc_control_node_B.b_k_m = 0; proc_control_node_B.b_k_m <
       proc_control_node_B.nx_lo; proc_control_node_B.b_k_m++) {
    k1_data[proc_control_node_B.b_k_m] +=
      proc_control_node_B.phi_data[proc_control_node_B.b_k_m];
  }

  *dk1_dtheta0_size = proc_control_node_B.phi1_size;
  proc_control_node_B.nx_lo = proc_control_node_B.phi1_size;
  for (proc_control_node_B.b_k_m = 0; proc_control_node_B.b_k_m <
       proc_control_node_B.nx_lo; proc_control_node_B.b_k_m++) {
    dk1_dtheta0_data[proc_control_node_B.b_k_m] =
      (proc_control_node_B.da_dphi0_data[proc_control_node_B.b_k_m] + -1.0) /
      l_data[proc_control_node_B.b_k_m] + k1_data[proc_control_node_B.b_k_m] *
      dk1_dtheta0_data[proc_control_node_B.b_k_m];
  }

  *dk1_dtheta1_size = proc_control_node_B.phi1_size;
  proc_control_node_B.nx_lo = proc_control_node_B.phi1_size;
  for (proc_control_node_B.b_k_m = 0; proc_control_node_B.b_k_m <
       proc_control_node_B.nx_lo; proc_control_node_B.b_k_m++) {
    dk1_dtheta1_data[proc_control_node_B.b_k_m] =
      (proc_control_node_B.da_dphi1_data[proc_control_node_B.b_k_m] + 1.0) /
      l_data[proc_control_node_B.b_k_m] + k1_data[proc_control_node_B.b_k_m] *
      dk1_dtheta1_data[proc_control_node_B.b_k_m];
  }

  proc_control_node_B.nx_tmp_i = *l_size - 1;
  for (proc_control_node_B.b_k_m = 0; proc_control_node_B.b_k_m <=
       proc_control_node_B.nx_tmp_i; proc_control_node_B.b_k_m++) {
    if (l_data[proc_control_node_B.b_k_m] == 0.0) {
      dk0_dtheta0_data[proc_control_node_B.b_k_m] = 0.0;
    }
  }

  for (proc_control_node_B.b_k_m = 0; proc_control_node_B.b_k_m <=
       proc_control_node_B.nx_tmp_i; proc_control_node_B.b_k_m++) {
    if (l_data[proc_control_node_B.b_k_m] == 0.0) {
      dk0_dtheta1_data[proc_control_node_B.b_k_m] = 0.0;
    }
  }

  for (proc_control_node_B.b_k_m = 0; proc_control_node_B.b_k_m <=
       proc_control_node_B.nx_tmp_i; proc_control_node_B.b_k_m++) {
    if (l_data[proc_control_node_B.b_k_m] == 0.0) {
      dk1_dtheta0_data[proc_control_node_B.b_k_m] = 0.0;
    }
  }

  for (proc_control_node_B.b_k_m = 0; proc_control_node_B.b_k_m <=
       proc_control_node_B.nx_tmp_i; proc_control_node_B.b_k_m++) {
    if (l_data[proc_control_node_B.b_k_m] == 0.0) {
      dk1_dtheta1_data[proc_control_node_B.b_k_m] = 0.0;
    }
  }

  proc_control_node_B.nx_lo = proc_control_node_B.phi1_size;
  for (proc_control_node_B.b_k_m = 0; proc_control_node_B.b_k_m <
       proc_control_node_B.nx_lo; proc_control_node_B.b_k_m++) {
    k0_data[proc_control_node_B.b_k_m] /= l_data[proc_control_node_B.b_k_m];
  }

  proc_control_node_B.nx_lo = proc_control_node_B.phi1_size;
  for (proc_control_node_B.b_k_m = 0; proc_control_node_B.b_k_m <
       proc_control_node_B.nx_lo; proc_control_node_B.b_k_m++) {
    k1_data[proc_control_node_B.b_k_m] /= l_data[proc_control_node_B.b_k_m];
  }

  for (proc_control_node_B.b_k_m = 0; proc_control_node_B.b_k_m <=
       proc_control_node_B.nx_tmp_i; proc_control_node_B.b_k_m++) {
    if (l_data[proc_control_node_B.b_k_m] == 0.0) {
      k0_data[proc_control_node_B.b_k_m] = 0.0;
    }
  }

  for (proc_control_node_B.b_k_m = 0; proc_control_node_B.b_k_m <=
       proc_control_node_B.nx_tmp_i; proc_control_node_B.b_k_m++) {
    if (l_data[proc_control_node_B.b_k_m] == 0.0) {
      k1_data[proc_control_node_B.b_k_m] = 0.0;
    }
  }
}

static void proc_control_node_anon_b4nwk(const real_T waypoints_data[], const
  int32_T waypoints_size[2], const real_T course_data[], const int32_T
  *course_size, const real_T x_data[], real_T varargout_1_data[], int32_T
  *varargout_1_size, real_T varargout_2_data[], int32_T varargout_2_size[2])
{
  proc_control_node_B.loop_ub_m = *course_size;
  if (0 <= proc_control_node_B.loop_ub_m - 1) {
    memcpy(&proc_control_node_B.course_data_a[0], &course_data[0],
           proc_control_node_B.loop_ub_m * sizeof(real_T));
  }

  proc_control_node_B.loop_ub_m = waypoints_size[0];
  for (proc_control_node_B.e_co = 0; proc_control_node_B.e_co <
       proc_control_node_B.loop_ub_m; proc_control_node_B.e_co++) {
    proc_control_node_B.hip_data_e[proc_control_node_B.e_co].re =
      waypoints_data[proc_control_node_B.e_co];
    proc_control_node_B.hip_data_e[proc_control_node_B.e_co].im =
      waypoints_data[proc_control_node_B.e_co + waypoints_size[0]];
  }

  if (2 > *course_size - 1) {
    proc_control_node_B.f_f = 0;
    proc_control_node_B.e_co = 0;
  } else {
    proc_control_node_B.f_f = 1;
    proc_control_node_B.e_co = *course_size - 1;
  }

  proc_control_node_B.loop_ub_m = proc_control_node_B.e_co -
    proc_control_node_B.f_f;
  for (proc_control_node_B.e_co = 0; proc_control_node_B.e_co <
       proc_control_node_B.loop_ub_m; proc_control_node_B.e_co++) {
    proc_control_node_B.course_data_a[proc_control_node_B.f_f +
      proc_control_node_B.e_co] = x_data[proc_control_node_B.e_co];
  }

  if (1 > waypoints_size[0] - 1) {
    proc_control_node_B.loop_ub_m = -1;
    proc_control_node_B.k_b = -1;
  } else {
    proc_control_node_B.loop_ub_m = waypoints_size[0] - 2;
    proc_control_node_B.k_b = waypoints_size[0] - 2;
  }

  if (2 > waypoints_size[0]) {
    proc_control_node_B.f_f = 0;
    proc_control_node_B.l_d = -1;
    proc_control_node_B.p_o = 0;
    proc_control_node_B.o_j = -1;
  } else {
    proc_control_node_B.f_f = 1;
    proc_control_node_B.l_d = waypoints_size[0] - 1;
    proc_control_node_B.p_o = 1;
    proc_control_node_B.o_j = waypoints_size[0] - 1;
  }

  if (0 <= proc_control_node_B.loop_ub_m) {
    memcpy(&proc_control_node_B.hip_data_c[0], &proc_control_node_B.hip_data_e[0],
           (proc_control_node_B.loop_ub_m + 1) * sizeof(creal_T));
  }

  proc_control_node_B.course_size_h = proc_control_node_B.k_b + 1;
  if (0 <= proc_control_node_B.k_b) {
    memcpy(&proc_control_node_B.course_data_m[0],
           &proc_control_node_B.course_data_a[0], (proc_control_node_B.k_b + 1) *
           sizeof(real_T));
  }

  proc_control_node_B.loop_ub_m = proc_control_node_B.l_d -
    proc_control_node_B.f_f;
  proc_control_node_B.hip_size_b = proc_control_node_B.loop_ub_m + 1;
  for (proc_control_node_B.e_co = 0; proc_control_node_B.e_co <=
       proc_control_node_B.loop_ub_m; proc_control_node_B.e_co++) {
    proc_control_node_B.hip_data_mv[proc_control_node_B.e_co] =
      proc_control_node_B.hip_data_e[proc_control_node_B.f_f +
      proc_control_node_B.e_co];
  }

  proc_control_node_B.loop_ub_m = proc_control_node_B.o_j -
    proc_control_node_B.p_o;
  proc_control_node_B.course_size_dm = proc_control_node_B.loop_ub_m + 1;
  for (proc_control_node_B.e_co = 0; proc_control_node_B.e_co <=
       proc_control_node_B.loop_ub_m; proc_control_node_B.e_co++) {
    proc_control_node_B.course_data_i[proc_control_node_B.e_co] =
      proc_control_node_B.course_data_a[proc_control_node_B.p_o +
      proc_control_node_B.e_co];
  }

  proc_control_clothoidG1fit2wp_b(proc_control_node_B.hip_data_c,
    proc_control_node_B.course_data_m, &proc_control_node_B.course_size_h,
    proc_control_node_B.hip_data_mv, &proc_control_node_B.hip_size_b,
    proc_control_node_B.course_data_i, &proc_control_node_B.course_size_dm,
    proc_control_node_B.k0_data_g, &proc_control_node_B.k0_size_g,
    proc_control_node_B.k1_data_l, &proc_control_node_B.k1_size_a,
    proc_control_node_B.a__4_data, &proc_control_node_B.a__4_size,
    proc_control_node_B.dk0_dc0_data_m, &proc_control_node_B.dk0_dc0_size_e,
    proc_control_node_B.dk0_dc1_data_n, &proc_control_node_B.dk0_dc1_size_b,
    proc_control_node_B.dk1_dc0_data_g, &proc_control_node_B.dk1_dc0_size_e,
    proc_control_node_B.dk1_dc1_data_d, &proc_control_node_B.dk1_dc1_size_m);
  if (1 > proc_control_node_B.k1_size_a - 1) {
    proc_control_node_B.loop_ub_m = -1;
  } else {
    proc_control_node_B.loop_ub_m = proc_control_node_B.k1_size_a - 2;
  }

  if (2 > proc_control_node_B.k0_size_g) {
    proc_control_node_B.u_l = 0;
  } else {
    proc_control_node_B.u_l = 1;
  }

  if (2 > proc_control_node_B.dk0_dc1_size_b - 1) {
    proc_control_node_B.f_f = 0;
    proc_control_node_B.p_o = -1;
  } else {
    proc_control_node_B.f_f = 1;
    proc_control_node_B.p_o = proc_control_node_B.dk0_dc1_size_b - 2;
  }

  if (2 > proc_control_node_B.dk1_dc0_size_e - 1) {
    proc_control_node_B.o_j = 0;
    proc_control_node_B.cb_g = -1;
  } else {
    proc_control_node_B.o_j = 1;
    proc_control_node_B.cb_g = proc_control_node_B.dk1_dc0_size_e - 2;
  }

  if (1 > waypoints_size[0] - 2) {
    proc_control_node_B.k_b = -1;
  } else {
    proc_control_node_B.k_b = waypoints_size[0] - 3;
  }

  if (2 > waypoints_size[0] - 1) {
    proc_control_node_B.l_d = 0;
  } else {
    proc_control_node_B.l_d = 1;
  }

  *varargout_1_size = proc_control_node_B.loop_ub_m + 1;
  for (proc_control_node_B.e_co = 0; proc_control_node_B.e_co <=
       proc_control_node_B.loop_ub_m; proc_control_node_B.e_co++) {
    varargout_1_data[proc_control_node_B.e_co] =
      proc_control_node_B.k1_data_l[proc_control_node_B.e_co] -
      proc_control_node_B.k0_data_g[proc_control_node_B.u_l +
      proc_control_node_B.e_co];
  }

  proc_control_node_B.loop_ub_m = proc_control_node_B.cb_g -
    proc_control_node_B.o_j;
  varargout_2_size[0] = proc_control_node_B.loop_ub_m + 2;
  varargout_2_size[1] = 3;
  for (proc_control_node_B.e_co = 0; proc_control_node_B.e_co <=
       proc_control_node_B.loop_ub_m; proc_control_node_B.e_co++) {
    varargout_2_data[proc_control_node_B.e_co] =
      proc_control_node_B.dk1_dc0_data_g[proc_control_node_B.o_j +
      proc_control_node_B.e_co];
  }

  varargout_2_data[proc_control_node_B.loop_ub_m + 1] = 0.0;
  for (proc_control_node_B.e_co = 0; proc_control_node_B.e_co <=
       proc_control_node_B.k_b; proc_control_node_B.e_co++) {
    varargout_2_data[(proc_control_node_B.e_co + proc_control_node_B.loop_ub_m)
      + 2] = proc_control_node_B.dk1_dc1_data_d[proc_control_node_B.e_co] -
      proc_control_node_B.dk0_dc0_data_m[proc_control_node_B.l_d +
      proc_control_node_B.e_co];
  }

  proc_control_node_B.loop_ub_m = proc_control_node_B.p_o -
    proc_control_node_B.f_f;
  for (proc_control_node_B.e_co = 0; proc_control_node_B.e_co <=
       proc_control_node_B.loop_ub_m; proc_control_node_B.e_co++) {
    varargout_2_data[proc_control_node_B.e_co + (varargout_2_size[0] << 1)] =
      -proc_control_node_B.dk0_dc1_data_n[proc_control_node_B.f_f +
      proc_control_node_B.e_co];
  }

  varargout_2_data[(proc_control_node_B.loop_ub_m + (varargout_2_size[0] << 1))
    + 1] = 0.0;
}

static void proc_control_node_mulJt_b(const real_T Jtri_data[], const int32_T
  Jtri_size[2], const real_T x_data[], const int32_T *x_size, real_T y_data[],
  int32_T *y_size)
{
  int32_T i;
  int32_T loop_ub;
  int32_T loop_ub_tmp;
  int32_T y_size_idx_1;
  int32_T y_size_idx_1_0;
  if (*x_size < 2) {
    y_size_idx_1_0 = 0;
  } else {
    y_size_idx_1_0 = *x_size - 1;
    loop_ub = *x_size - 2;
    for (i = 0; i <= loop_ub; i++) {
      proc_control_node_B.y_data_j3[i] = static_cast<real_T>(i) + 2.0;
    }
  }

  if (*x_size - 1 < 1) {
    loop_ub = 0;
    y_size_idx_1 = 0;
  } else {
    loop_ub = *x_size - 1;
    loop_ub_tmp = *x_size - 2;
    for (i = 0; i <= loop_ub_tmp; i++) {
      proc_control_node_B.y_data_hn[i] = static_cast<real_T>(i) + 1.0;
    }

    y_size_idx_1 = *x_size - 1;
    for (i = 0; i <= loop_ub_tmp; i++) {
      proc_control_node_B.y_data_k[i] = static_cast<real_T>(i) + 1.0;
    }
  }

  for (i = 0; i < y_size_idx_1_0; i++) {
    proc_control_node_B.y_data_bw[i] = static_cast<int8_T>(static_cast<int32_T>
      (proc_control_node_B.y_data_j3[i]) - 1);
  }

  proc_control_node_B.y_data_bw[y_size_idx_1_0] = 0;
  proc_control_node_B.x_data_e[0] = static_cast<int8_T>(*x_size - 1);
  for (i = 0; i < loop_ub; i++) {
    proc_control_node_B.x_data_e[i + 1] = static_cast<int8_T>
      (static_cast<int32_T>(proc_control_node_B.y_data_hn[i]) - 1);
  }

  proc_control_node_B.x_data_n[0] = static_cast<int8_T>(*x_size - 1);
  for (i = 0; i < y_size_idx_1; i++) {
    proc_control_node_B.x_data_n[i + 1] = static_cast<int8_T>
      (static_cast<int32_T>(proc_control_node_B.y_data_k[i]) - 1);
  }

  loop_ub = Jtri_size[0];
  *y_size = Jtri_size[0];
  for (i = 0; i < loop_ub; i++) {
    y_data[i] = (Jtri_data[i + Jtri_size[0]] * x_data[i] + Jtri_data[i] *
                 x_data[proc_control_node_B.y_data_bw[i]]) +
      Jtri_data[proc_control_node_B.x_data_e[i] + (Jtri_size[0] << 1)] *
      x_data[proc_control_node_B.x_data_n[i]];
  }
}

static void proc_control_node_repmat_b(real_T varargin_1, real_T b_data[],
  int32_T *b_size)
{
  int32_T i;
  int32_T outsize_idx_0_tmp_tmp;
  outsize_idx_0_tmp_tmp = static_cast<int32_T>(varargin_1);
  *b_size = static_cast<int32_T>(varargin_1);
  for (i = 0; i < outsize_idx_0_tmp_tmp; i++) {
    b_data[i] = 1.0E-7;
  }
}

static boolean_T proc_control_node_any_b(const boolean_T x_data[], const int32_T
  *x_size)
{
  int32_T ix;
  boolean_T exitg1;
  boolean_T y;
  y = false;
  ix = 0;
  exitg1 = false;
  while ((!exitg1) && (ix + 1 <= *x_size)) {
    if (!x_data[ix]) {
      ix++;
    } else {
      y = true;
      exitg1 = true;
    }
  }

  return y;
}

static void proc_control__sympentdisolve_b4(const real_T d_data[], const real_T
  e_data[], const real_T f_data[], const real_T b_data[], const int32_T b_size[2],
  real_T x_data[], int32_T x_size[2])
{
  int32_T acoef_tmp;
  int32_T b_gamma_size_idx_0_tmp;
  int32_T c_size_idx_0;
  int32_T z_size_idx_0;
  int32_T z_size_idx_1;
  x_size[0] = b_size[0];
  x_size[1] = b_size[1];
  acoef_tmp = b_size[0] * b_size[1] - 1;
  if (0 <= acoef_tmp) {
    memset(&x_data[0], 0, (acoef_tmp + 1) * sizeof(real_T));
  }

  proc_control_node_B.alpha_size_idx_0 = b_size[0];
  proc_control_node_B.acoef = b_size[0];
  if (0 <= proc_control_node_B.acoef - 1) {
    memset(&proc_control_node_B.alpha_data_ji[0], 0, proc_control_node_B.acoef *
           sizeof(real_T));
  }

  b_gamma_size_idx_0_tmp = b_size[0] - 1;
  if (0 <= b_gamma_size_idx_0_tmp - 1) {
    memset(&proc_control_node_B.b_gamma_data_e[0], 0, b_gamma_size_idx_0_tmp *
           sizeof(real_T));
  }

  proc_control_node_B.ia_j = b_size[0] - 2;
  if (0 <= proc_control_node_B.ia_j - 1) {
    memset(&proc_control_node_B.delta_data[0], 0, proc_control_node_B.ia_j *
           sizeof(real_T));
  }

  proc_control_node_B.alpha_data_ji[0] = d_data[0];
  proc_control_node_B.b_gamma_data_e[0] = e_data[0] / d_data[0];
  proc_control_node_B.delta_data[0] = f_data[0] / d_data[0];
  proc_control_node_B.alpha_data_ji[1] = d_data[1] - e_data[0] *
    proc_control_node_B.b_gamma_data_e[0];
  proc_control_node_B.b_gamma_data_e[1] = (e_data[1] - f_data[0] *
    proc_control_node_B.b_gamma_data_e[0]) / proc_control_node_B.alpha_data_ji[1];
  proc_control_node_B.delta_data[1] = f_data[1] /
    proc_control_node_B.alpha_data_ji[1];
  proc_control_node_B.acoef = b_size[0] - 5;
  for (proc_control_node_B.b_k_l = 0; proc_control_node_B.b_k_l <=
       proc_control_node_B.acoef; proc_control_node_B.b_k_l++) {
    proc_control_node_B.alpha_tmp_i =
      proc_control_node_B.b_gamma_data_e[proc_control_node_B.b_k_l + 1];
    proc_control_node_B.alpha_data_ji[proc_control_node_B.b_k_l + 2] =
      (d_data[proc_control_node_B.b_k_l + 2] - f_data[proc_control_node_B.b_k_l]
       * proc_control_node_B.delta_data[proc_control_node_B.b_k_l]) -
      proc_control_node_B.alpha_tmp_i * proc_control_node_B.alpha_tmp_i *
      proc_control_node_B.alpha_data_ji[proc_control_node_B.b_k_l + 1];
    proc_control_node_B.b_gamma_tmp_k =
      proc_control_node_B.alpha_data_ji[proc_control_node_B.b_k_l + 2];
    proc_control_node_B.b_gamma_data_e[proc_control_node_B.b_k_l + 2] =
      (e_data[proc_control_node_B.b_k_l + 2] - f_data[proc_control_node_B.b_k_l
       + 1] * proc_control_node_B.alpha_tmp_i) /
      proc_control_node_B.b_gamma_tmp_k;
    proc_control_node_B.delta_data[proc_control_node_B.b_k_l + 2] =
      f_data[proc_control_node_B.b_k_l + 2] / proc_control_node_B.b_gamma_tmp_k;
  }

  proc_control_node_B.alpha_data_tmp =
    proc_control_node_B.b_gamma_data_e[b_size[0] - 3];
  proc_control_node_B.alpha_data_ji[b_size[0] - 2] = (d_data[b_size[0] - 2] -
    f_data[b_size[0] - 4] * proc_control_node_B.delta_data[b_size[0] - 4]) -
    proc_control_node_B.alpha_data_tmp * proc_control_node_B.alpha_data_tmp *
    proc_control_node_B.alpha_data_ji[b_size[0] - 3];
  proc_control_node_B.alpha_tmp_i = f_data[b_size[0] - 3];
  proc_control_node_B.b_gamma_tmp_k = proc_control_node_B.alpha_data_ji[b_size[0]
    - 2];
  proc_control_node_B.b_gamma_data_e[b_size[0] - 2] = (e_data[b_size[0] - 2] -
    proc_control_node_B.alpha_tmp_i * proc_control_node_B.alpha_data_tmp) /
    proc_control_node_B.b_gamma_tmp_k;
  proc_control_node_B.alpha_data_tmp =
    proc_control_node_B.b_gamma_data_e[b_size[0] - 2];
  proc_control_node_B.alpha_data_ji[b_size[0] - 1] = (d_data[b_size[0] - 1] -
    proc_control_node_B.alpha_tmp_i * proc_control_node_B.delta_data[b_size[0] -
    3]) - proc_control_node_B.alpha_data_tmp *
    proc_control_node_B.alpha_data_tmp * proc_control_node_B.b_gamma_tmp_k;
  z_size_idx_0 = b_size[0];
  z_size_idx_1 = b_size[1];
  if (0 <= acoef_tmp) {
    memset(&proc_control_node_B.z_data_p4[0], 0, (acoef_tmp + 1) * sizeof(real_T));
  }

  proc_control_node_B.acoef = b_size[1];
  for (proc_control_node_B.b_k_l = 0; proc_control_node_B.b_k_l <
       proc_control_node_B.acoef; proc_control_node_B.b_k_l++) {
    proc_control_node_B.z_data_p4[z_size_idx_0 * proc_control_node_B.b_k_l] =
      b_data[b_size[0] * proc_control_node_B.b_k_l];
  }

  proc_control_node_B.alpha_tmp_i = proc_control_node_B.b_gamma_data_e[0];
  proc_control_node_B.acoef = b_size[1];
  proc_control_node_B.acoef_j = b_size[1];
  for (proc_control_node_B.b_k_l = 0; proc_control_node_B.b_k_l <
       proc_control_node_B.acoef; proc_control_node_B.b_k_l++) {
    proc_control_node_B.b_data_fj[proc_control_node_B.b_k_l] = b_data[1 +
      b_size[0] * proc_control_node_B.b_k_l] - proc_control_node_B.alpha_tmp_i *
      proc_control_node_B.z_data_p4[z_size_idx_0 * proc_control_node_B.b_k_l];
  }

  for (proc_control_node_B.b_k_l = 0; proc_control_node_B.b_k_l <
       proc_control_node_B.acoef_j; proc_control_node_B.b_k_l++) {
    proc_control_node_B.z_data_p4[1 + z_size_idx_0 * proc_control_node_B.b_k_l] =
      proc_control_node_B.b_data_fj[proc_control_node_B.b_k_l];
  }

  acoef_tmp = b_size[0] - 3;
  for (proc_control_node_B.ia_j = 0; proc_control_node_B.ia_j <= acoef_tmp;
       proc_control_node_B.ia_j++) {
    proc_control_node_B.alpha_tmp_i =
      proc_control_node_B.b_gamma_data_e[proc_control_node_B.ia_j + 1];
    proc_control_node_B.b_gamma_tmp_k =
      proc_control_node_B.delta_data[proc_control_node_B.ia_j];
    proc_control_node_B.acoef = b_size[1];
    proc_control_node_B.acoef_j = b_size[1];
    for (proc_control_node_B.b_k_l = 0; proc_control_node_B.b_k_l <
         proc_control_node_B.acoef; proc_control_node_B.b_k_l++) {
      proc_control_node_B.bcoef = z_size_idx_0 * proc_control_node_B.b_k_l;
      proc_control_node_B.b_data_fj[proc_control_node_B.b_k_l] = (b_data
        [(proc_control_node_B.ia_j + b_size[0] * proc_control_node_B.b_k_l) + 2]
        - proc_control_node_B.z_data_p4[(proc_control_node_B.ia_j +
        proc_control_node_B.bcoef) + 1] * proc_control_node_B.alpha_tmp_i) -
        proc_control_node_B.z_data_p4[proc_control_node_B.ia_j +
        proc_control_node_B.bcoef] * proc_control_node_B.b_gamma_tmp_k;
    }

    for (proc_control_node_B.b_k_l = 0; proc_control_node_B.b_k_l <
         proc_control_node_B.acoef_j; proc_control_node_B.b_k_l++) {
      proc_control_node_B.z_data_p4[(proc_control_node_B.ia_j + z_size_idx_0 *
        proc_control_node_B.b_k_l) + 2] =
        proc_control_node_B.b_data_fj[proc_control_node_B.b_k_l];
    }
  }

  if (b_size[0] == 1) {
    c_size_idx_0 = b_size[0];
  } else if (b_size[0] == 1) {
    c_size_idx_0 = b_size[0];
  } else {
    c_size_idx_0 = b_size[0];
  }

  if (b_size[1] != 0) {
    proc_control_node_B.acoef = (b_size[1] != 1);
    for (acoef_tmp = 0; acoef_tmp < z_size_idx_1; acoef_tmp++) {
      proc_control_node_B.ia_j = proc_control_node_B.acoef * acoef_tmp;
      proc_control_node_B.acoef_j = (z_size_idx_0 != 1);
      proc_control_node_B.bcoef = (proc_control_node_B.alpha_size_idx_0 != 1);
      for (proc_control_node_B.b_k_l = 0; proc_control_node_B.b_k_l <
           c_size_idx_0; proc_control_node_B.b_k_l++) {
        proc_control_node_B.c_data_a[proc_control_node_B.b_k_l + c_size_idx_0 *
          acoef_tmp] = proc_control_node_B.z_data_p4[proc_control_node_B.acoef_j
          * proc_control_node_B.b_k_l + z_size_idx_0 * proc_control_node_B.ia_j]
          / proc_control_node_B.alpha_data_ji[proc_control_node_B.bcoef *
          proc_control_node_B.b_k_l];
      }
    }
  }

  acoef_tmp = b_size[0];
  proc_control_node_B.ia_j = b_size[0];
  for (proc_control_node_B.b_k_l = 0; proc_control_node_B.b_k_l < z_size_idx_1;
       proc_control_node_B.b_k_l++) {
    x_data[(proc_control_node_B.ia_j + x_size[0] * proc_control_node_B.b_k_l) -
      1] = proc_control_node_B.c_data_a[(acoef_tmp + c_size_idx_0 *
      proc_control_node_B.b_k_l) - 1];
  }

  proc_control_node_B.ia_j = b_size[0];
  for (proc_control_node_B.b_k_l = 0; proc_control_node_B.b_k_l < z_size_idx_1;
       proc_control_node_B.b_k_l++) {
    proc_control_node_B.b_data_fj[proc_control_node_B.b_k_l] =
      proc_control_node_B.c_data_a[(b_gamma_size_idx_0_tmp + c_size_idx_0 *
      proc_control_node_B.b_k_l) - 1] - x_data[(proc_control_node_B.ia_j +
      x_size[0] * proc_control_node_B.b_k_l) - 1] *
      proc_control_node_B.alpha_data_tmp;
  }

  for (proc_control_node_B.b_k_l = 0; proc_control_node_B.b_k_l < z_size_idx_1;
       proc_control_node_B.b_k_l++) {
    x_data[(b_gamma_size_idx_0_tmp + x_size[0] * proc_control_node_B.b_k_l) - 1]
      = proc_control_node_B.b_data_fj[proc_control_node_B.b_k_l];
  }

  proc_control_node_B.ia_j = static_cast<int32_T>(((-1.0 - (static_cast<real_T>
    (b_size[0]) - 2.0)) + 1.0) / -1.0) - 1;
  for (proc_control_node_B.acoef_j = 0; proc_control_node_B.acoef_j <=
       proc_control_node_B.ia_j; proc_control_node_B.acoef_j++) {
    acoef_tmp = (b_size[0] - proc_control_node_B.acoef_j) - 2;
    proc_control_node_B.alpha_tmp_i =
      proc_control_node_B.b_gamma_data_e[acoef_tmp - 1];
    proc_control_node_B.b_gamma_tmp_k = proc_control_node_B.delta_data[acoef_tmp
      - 1];
    for (proc_control_node_B.b_k_l = 0; proc_control_node_B.b_k_l < z_size_idx_1;
         proc_control_node_B.b_k_l++) {
      proc_control_node_B.bcoef = x_size[0] * proc_control_node_B.b_k_l;
      proc_control_node_B.b_data_fj[proc_control_node_B.b_k_l] =
        (proc_control_node_B.c_data_a[(acoef_tmp + c_size_idx_0 *
          proc_control_node_B.b_k_l) - 1] - x_data[acoef_tmp +
         proc_control_node_B.bcoef] * proc_control_node_B.alpha_tmp_i) - x_data
        [(acoef_tmp + proc_control_node_B.bcoef) + 1] *
        proc_control_node_B.b_gamma_tmp_k;
    }

    for (proc_control_node_B.b_k_l = 0; proc_control_node_B.b_k_l < z_size_idx_1;
         proc_control_node_B.b_k_l++) {
      x_data[(acoef_tmp + x_size[0] * proc_control_node_B.b_k_l) - 1] =
        proc_control_node_B.b_data_fj[proc_control_node_B.b_k_l];
    }
  }
}

static void proc_control_node_mldivide_b4(const real_T A[16], real_T B[4])
{
  int32_T c;
  int32_T ijA;
  int32_T jA;
  int32_T k;
  int32_T kAcol;
  memcpy(&proc_control_node_B.c_A_e[0], &A[0], sizeof(real_T) << 4U);
  proc_control_node_B.b_ipiv_i[0] = 1;
  proc_control_node_B.b_ipiv_i[1] = 2;
  proc_control_node_B.b_ipiv_i[2] = 3;
  for (kAcol = 0; kAcol < 3; kAcol++) {
    proc_control_node_B.c_nz = kAcol * 5 + 2;
    proc_control_node_B.jj_l = kAcol * 5;
    proc_control_node_B.c_en = 4 - kAcol;
    proc_control_node_B.a_c = 1;
    proc_control_node_B.smax_p = fabs
      (proc_control_node_B.c_A_e[proc_control_node_B.jj_l]);
    for (k = 2; k <= proc_control_node_B.c_en; k++) {
      proc_control_node_B.s_n = fabs(proc_control_node_B.c_A_e
        [(proc_control_node_B.c_nz + k) - 3]);
      if (proc_control_node_B.s_n > proc_control_node_B.smax_p) {
        proc_control_node_B.a_c = k;
        proc_control_node_B.smax_p = proc_control_node_B.s_n;
      }
    }

    if (proc_control_node_B.c_A_e[(proc_control_node_B.c_nz +
         proc_control_node_B.a_c) - 3] != 0.0) {
      if (proc_control_node_B.a_c - 1 != 0) {
        proc_control_node_B.a_c += kAcol;
        proc_control_node_B.b_ipiv_i[kAcol] = static_cast<int8_T>
          (proc_control_node_B.a_c);
        proc_control_node_B.smax_p = proc_control_node_B.c_A_e[kAcol];
        proc_control_node_B.c_A_e[kAcol] =
          proc_control_node_B.c_A_e[proc_control_node_B.a_c - 1];
        proc_control_node_B.c_A_e[proc_control_node_B.a_c - 1] =
          proc_control_node_B.smax_p;
        proc_control_node_B.smax_p = proc_control_node_B.c_A_e[kAcol + 4];
        proc_control_node_B.c_A_e[kAcol + 4] =
          proc_control_node_B.c_A_e[proc_control_node_B.a_c + 3];
        proc_control_node_B.c_A_e[proc_control_node_B.a_c + 3] =
          proc_control_node_B.smax_p;
        proc_control_node_B.smax_p = proc_control_node_B.c_A_e[kAcol + 8];
        proc_control_node_B.c_A_e[kAcol + 8] =
          proc_control_node_B.c_A_e[proc_control_node_B.a_c + 7];
        proc_control_node_B.c_A_e[proc_control_node_B.a_c + 7] =
          proc_control_node_B.smax_p;
        proc_control_node_B.smax_p = proc_control_node_B.c_A_e[kAcol + 12];
        proc_control_node_B.c_A_e[kAcol + 12] =
          proc_control_node_B.c_A_e[proc_control_node_B.a_c + 11];
        proc_control_node_B.c_A_e[proc_control_node_B.a_c + 11] =
          proc_control_node_B.smax_p;
      }

      proc_control_node_B.a_c = proc_control_node_B.c_nz - kAcol;
      for (proc_control_node_B.c_en = proc_control_node_B.c_nz;
           proc_control_node_B.c_en <= proc_control_node_B.a_c + 2;
           proc_control_node_B.c_en++) {
        proc_control_node_B.c_A_e[proc_control_node_B.c_en - 1] /=
          proc_control_node_B.c_A_e[proc_control_node_B.jj_l];
      }
    }

    proc_control_node_B.c_en = 3 - kAcol;
    jA = proc_control_node_B.jj_l;
    for (k = 0; k < proc_control_node_B.c_en; k++) {
      proc_control_node_B.smax_p = proc_control_node_B.c_A_e
        [(proc_control_node_B.jj_l + (k << 2)) + 4];
      if (proc_control_node_B.smax_p != 0.0) {
        proc_control_node_B.a_c = jA + 6;
        c = jA - kAcol;
        for (ijA = proc_control_node_B.a_c; ijA <= c + 8; ijA++) {
          proc_control_node_B.c_A_e[ijA - 1] += proc_control_node_B.c_A_e
            [((proc_control_node_B.c_nz + ijA) - jA) - 7] *
            -proc_control_node_B.smax_p;
        }
      }

      jA += 4;
    }
  }

  if (proc_control_node_B.b_ipiv_i[0] != 1) {
    proc_control_node_B.smax_p = B[0];
    B[0] = B[proc_control_node_B.b_ipiv_i[0] - 1];
    B[proc_control_node_B.b_ipiv_i[0] - 1] = proc_control_node_B.smax_p;
  }

  if (proc_control_node_B.b_ipiv_i[1] != 2) {
    proc_control_node_B.smax_p = B[1];
    B[1] = B[proc_control_node_B.b_ipiv_i[1] - 1];
    B[proc_control_node_B.b_ipiv_i[1] - 1] = proc_control_node_B.smax_p;
  }

  if (proc_control_node_B.b_ipiv_i[2] != 3) {
    proc_control_node_B.smax_p = B[2];
    B[2] = B[proc_control_node_B.b_ipiv_i[2] - 1];
    B[proc_control_node_B.b_ipiv_i[2] - 1] = proc_control_node_B.smax_p;
  }

  for (proc_control_node_B.c_nz = 0; proc_control_node_B.c_nz < 4;
       proc_control_node_B.c_nz++) {
    kAcol = (proc_control_node_B.c_nz << 2) - 1;
    if (B[proc_control_node_B.c_nz] != 0.0) {
      for (proc_control_node_B.c_en = proc_control_node_B.c_nz + 2;
           proc_control_node_B.c_en < 5; proc_control_node_B.c_en++) {
        B[proc_control_node_B.c_en - 1] -=
          proc_control_node_B.c_A_e[proc_control_node_B.c_en + kAcol] *
          B[proc_control_node_B.c_nz];
      }
    }
  }

  for (k = 3; k >= 0; k--) {
    kAcol = k << 2;
    if (B[k] != 0.0) {
      B[k] /= proc_control_node_B.c_A_e[k + kAcol];
      proc_control_node_B.a_c = k - 1;
      for (proc_control_node_B.c_nz = 0; proc_control_node_B.c_nz <=
           proc_control_node_B.a_c; proc_control_node_B.c_nz++) {
        B[proc_control_node_B.c_nz] -=
          proc_control_node_B.c_A_e[proc_control_node_B.c_nz + kAcol] * B[k];
      }
    }
  }
}

static void proc_control__cycsympentdisolve(const real_T d_data[], const real_T
  e_data[], const real_T f_data[], const real_T b_data[], const int32_T *b_size,
  real_T x_data[], int32_T *x_size)
{
  proc_control_node_B.inner_k = *b_size << 2;
  proc_control_node_B.boffset_e = proc_control_node_B.inner_k - 1;
  if (0 <= proc_control_node_B.boffset_e) {
    memset(&proc_control_node_B.u_data_e[0], 0, (proc_control_node_B.boffset_e +
            1) * sizeof(real_T));
  }

  proc_control_node_B.u_data_e[0] = 1.0;
  proc_control_node_B.u_data_e[1 + *b_size] = 1.0;
  proc_control_node_B.u_data_e[(*b_size + (*b_size << 1)) - 2] = 1.0;
  proc_control_node_B.u_data_e[(*b_size + *b_size * 3) - 1] = 1.0;
  if ((*b_size == 0) || (*b_size != 0)) {
    proc_control_node_B.u_b = 5;
  } else {
    proc_control_node_B.u_b = 4;
  }

  proc_control_node_B.result_size_n[0] = *b_size;
  proc_control_node_B.result_size_n[1] = proc_control_node_B.u_b;
  proc_control_node_B.coffset_p = (proc_control_node_B.u_b - 4) * *b_size;
  for (proc_control_node_B.inner_k2 = 0; proc_control_node_B.inner_k2 <
       proc_control_node_B.inner_k; proc_control_node_B.inner_k2++) {
    proc_control_node_B.result_data_o[proc_control_node_B.inner_k2] =
      static_cast<int8_T>
      (proc_control_node_B.u_data_e[proc_control_node_B.inner_k2]);
  }

  for (proc_control_node_B.inner_k2 = 0; proc_control_node_B.inner_k2 <
       proc_control_node_B.coffset_p; proc_control_node_B.inner_k2++) {
    proc_control_node_B.result_data_o[proc_control_node_B.inner_k2 +
      proc_control_node_B.inner_k] = b_data[proc_control_node_B.inner_k2];
  }

  proc_control__sympentdisolve_b4(d_data, e_data, f_data,
    proc_control_node_B.result_data_o, proc_control_node_B.result_size_n,
    proc_control_node_B.zy_data, proc_control_node_B.zy_size);
  proc_control_node_B.inner_k = proc_control_node_B.zy_size[0];
  proc_control_node_B.coffset_p = proc_control_node_B.zy_size[0];
  for (proc_control_node_B.inner_k2 = 0; proc_control_node_B.inner_k2 < 4;
       proc_control_node_B.inner_k2++) {
    for (proc_control_node_B.u_b = 0; proc_control_node_B.u_b <
         proc_control_node_B.inner_k; proc_control_node_B.u_b++) {
      proc_control_node_B.u_data_e[proc_control_node_B.u_b +
        proc_control_node_B.coffset_p * proc_control_node_B.inner_k2] =
        proc_control_node_B.zy_data[proc_control_node_B.u_b +
        proc_control_node_B.zy_size[0] * proc_control_node_B.inner_k2];
    }
  }

  proc_control_node_B.v_size_idx_0 = *b_size;
  if (0 <= proc_control_node_B.boffset_e) {
    memset(&proc_control_node_B.v_data_f[0], 0, (proc_control_node_B.boffset_e +
            1) * sizeof(real_T));
  }

  proc_control_node_B.bkj_g = f_data[*b_size - 2];
  proc_control_node_B.v_data_f[*b_size - 2] = proc_control_node_B.bkj_g;
  proc_control_node_B.v_data_tmp = e_data[*b_size - 1];
  proc_control_node_B.v_data_f[*b_size - 1] = proc_control_node_B.v_data_tmp;
  proc_control_node_B.v_data_tmp_c = f_data[*b_size - 1];
  proc_control_node_B.v_data_f[(*b_size + *b_size) - 1] =
    proc_control_node_B.v_data_tmp_c;
  proc_control_node_B.v_data_f[*b_size << 1] = proc_control_node_B.bkj_g;
  proc_control_node_B.v_data_f[*b_size * 3] = proc_control_node_B.v_data_tmp;
  proc_control_node_B.v_data_f[1 + *b_size * 3] =
    proc_control_node_B.v_data_tmp_c;
  proc_control_node_B.inner_k = *b_size - 1;
  for (proc_control_node_B.u_b = 0; proc_control_node_B.u_b < 4;
       proc_control_node_B.u_b++) {
    proc_control_node_B.coffset_p = (proc_control_node_B.u_b << 2) - 1;
    proc_control_node_B.boffset_e = proc_control_node_B.u_b *
      proc_control_node_B.zy_size[0] - 1;
    proc_control_node_B.y_j[proc_control_node_B.coffset_p + 1] = 0.0;
    proc_control_node_B.y_j[proc_control_node_B.coffset_p + 2] = 0.0;
    proc_control_node_B.y_j[proc_control_node_B.coffset_p + 3] = 0.0;
    proc_control_node_B.y_j[proc_control_node_B.coffset_p + 4] = 0.0;
    for (proc_control_node_B.inner_k2 = 0; proc_control_node_B.inner_k2 <=
         proc_control_node_B.inner_k; proc_control_node_B.inner_k2++) {
      proc_control_node_B.bkj_g = proc_control_node_B.u_data_e
        [(proc_control_node_B.boffset_e + proc_control_node_B.inner_k2) + 1];
      proc_control_node_B.y_j[proc_control_node_B.coffset_p + 1] +=
        proc_control_node_B.v_data_f[proc_control_node_B.inner_k2] *
        proc_control_node_B.bkj_g;
      proc_control_node_B.y_j[proc_control_node_B.coffset_p + 2] +=
        proc_control_node_B.v_data_f[proc_control_node_B.v_size_idx_0 +
        proc_control_node_B.inner_k2] * proc_control_node_B.bkj_g;
      proc_control_node_B.y_j[proc_control_node_B.coffset_p + 3] +=
        proc_control_node_B.v_data_f[(proc_control_node_B.v_size_idx_0 << 1) +
        proc_control_node_B.inner_k2] * proc_control_node_B.bkj_g;
      proc_control_node_B.y_j[proc_control_node_B.coffset_p + 4] +=
        proc_control_node_B.v_data_f[3 * proc_control_node_B.v_size_idx_0 +
        proc_control_node_B.inner_k2] * proc_control_node_B.bkj_g;
    }

    proc_control_node_B.y_c[proc_control_node_B.u_b] = 0.0;
  }

  for (proc_control_node_B.inner_k2 = 0; proc_control_node_B.inner_k2 <=
       proc_control_node_B.inner_k; proc_control_node_B.inner_k2++) {
    proc_control_node_B.bkj_g =
      proc_control_node_B.zy_data[proc_control_node_B.inner_k2 +
      (proc_control_node_B.zy_size[0] << 2)];
    proc_control_node_B.y_c[0] +=
      proc_control_node_B.v_data_f[proc_control_node_B.inner_k2] *
      proc_control_node_B.bkj_g;
    proc_control_node_B.y_c[1] +=
      proc_control_node_B.v_data_f[proc_control_node_B.v_size_idx_0 +
      proc_control_node_B.inner_k2] * proc_control_node_B.bkj_g;
    proc_control_node_B.y_c[2] += proc_control_node_B.v_data_f
      [(proc_control_node_B.v_size_idx_0 << 1) + proc_control_node_B.inner_k2] *
      proc_control_node_B.bkj_g;
    proc_control_node_B.y_c[3] += proc_control_node_B.v_data_f[3 *
      proc_control_node_B.v_size_idx_0 + proc_control_node_B.inner_k2] *
      proc_control_node_B.bkj_g;
  }

  for (proc_control_node_B.inner_k2 = 0; proc_control_node_B.inner_k2 < 16;
       proc_control_node_B.inner_k2++) {
    proc_control_node_B.b_I_i[proc_control_node_B.inner_k2] = 0;
  }

  proc_control_node_B.b_I_i[0] = 1;
  proc_control_node_B.b_I_i[5] = 1;
  proc_control_node_B.b_I_i[10] = 1;
  proc_control_node_B.b_I_i[15] = 1;
  for (proc_control_node_B.inner_k2 = 0; proc_control_node_B.inner_k2 < 16;
       proc_control_node_B.inner_k2++) {
    proc_control_node_B.b_I_o[proc_control_node_B.inner_k2] = static_cast<real_T>
      (proc_control_node_B.b_I_i[proc_control_node_B.inner_k2]) +
      proc_control_node_B.y_j[proc_control_node_B.inner_k2];
  }

  proc_control_node_mldivide_b4(proc_control_node_B.b_I_o,
    proc_control_node_B.y_c);
  proc_control_node_B.inner_k = proc_control_node_B.zy_size[0] - 1;
  for (proc_control_node_B.inner_k2 = 0; proc_control_node_B.inner_k2 <=
       proc_control_node_B.inner_k; proc_control_node_B.inner_k2++) {
    x_data[proc_control_node_B.inner_k2] =
      ((proc_control_node_B.u_data_e[proc_control_node_B.inner_k2] *
        proc_control_node_B.y_c[0] +
        proc_control_node_B.u_data_e[proc_control_node_B.zy_size[0] +
        proc_control_node_B.inner_k2] * proc_control_node_B.y_c[1]) +
       proc_control_node_B.u_data_e[(proc_control_node_B.zy_size[0] << 1) +
       proc_control_node_B.inner_k2] * proc_control_node_B.y_c[2]) +
      proc_control_node_B.u_data_e[3 * proc_control_node_B.zy_size[0] +
      proc_control_node_B.inner_k2] * proc_control_node_B.y_c[3];
  }

  proc_control_node_B.inner_k = proc_control_node_B.zy_size[0];
  *x_size = proc_control_node_B.zy_size[0];
  for (proc_control_node_B.inner_k2 = 0; proc_control_node_B.inner_k2 <
       proc_control_node_B.inner_k; proc_control_node_B.inner_k2++) {
    x_data[proc_control_node_B.inner_k2] =
      proc_control_node_B.zy_data[proc_control_node_B.inner_k2 +
      (proc_control_node_B.zy_size[0] << 2)] -
      x_data[proc_control_node_B.inner_k2];
  }
}

static void proc_control_n_sympentdisolve_b(const real_T d_data[], const real_T
  e_data[], const real_T f_data[], const real_T b_data[], const int32_T *b_size,
  real_T x_data[], int32_T *x_size)
{
  int32_T acoef;
  int32_T bcoef;
  int32_T csz_idx_0;
  int32_T loop_ub;
  *x_size = *b_size;
  if (0 <= *b_size - 1) {
    memset(&x_data[0], 0, *b_size * sizeof(real_T));
  }

  if (0 <= *b_size - 1) {
    memset(&proc_control_node_B.alpha_data_f[0], 0, *b_size * sizeof(real_T));
  }

  if (0 <= (*b_size - 1) - 1) {
    memset(&proc_control_node_B.b_gamma_data_o[0], 0, (*b_size - 1) * sizeof
           (real_T));
  }

  if (0 <= (*b_size - 2) - 1) {
    memset(&proc_control_node_B.delta_data_i[0], 0, (*b_size - 2) * sizeof
           (real_T));
  }

  proc_control_node_B.alpha_data_f[0] = d_data[0];
  proc_control_node_B.b_gamma_data_o[0] = e_data[0] / d_data[0];
  proc_control_node_B.delta_data_i[0] = f_data[0] / d_data[0];
  proc_control_node_B.alpha_data_f[1] = d_data[1] - e_data[0] *
    proc_control_node_B.b_gamma_data_o[0];
  proc_control_node_B.b_gamma_data_o[1] = (e_data[1] - f_data[0] *
    proc_control_node_B.b_gamma_data_o[0]) / proc_control_node_B.alpha_data_f[1];
  proc_control_node_B.delta_data_i[1] = f_data[1] /
    proc_control_node_B.alpha_data_f[1];
  loop_ub = *b_size - 5;
  for (csz_idx_0 = 0; csz_idx_0 <= loop_ub; csz_idx_0++) {
    proc_control_node_B.alpha_tmp_b =
      proc_control_node_B.b_gamma_data_o[csz_idx_0 + 1];
    proc_control_node_B.alpha_data_f[csz_idx_0 + 2] = (d_data[csz_idx_0 + 2] -
      f_data[csz_idx_0] * proc_control_node_B.delta_data_i[csz_idx_0]) -
      proc_control_node_B.alpha_tmp_b * proc_control_node_B.alpha_tmp_b *
      proc_control_node_B.alpha_data_f[csz_idx_0 + 1];
    proc_control_node_B.b_gamma_tmp_f =
      proc_control_node_B.alpha_data_f[csz_idx_0 + 2];
    proc_control_node_B.b_gamma_data_o[csz_idx_0 + 2] = (e_data[csz_idx_0 + 2] -
      f_data[csz_idx_0 + 1] * proc_control_node_B.alpha_tmp_b) /
      proc_control_node_B.b_gamma_tmp_f;
    proc_control_node_B.delta_data_i[csz_idx_0 + 2] = f_data[csz_idx_0 + 2] /
      proc_control_node_B.b_gamma_tmp_f;
  }

  proc_control_node_B.alpha_tmp_b = proc_control_node_B.b_gamma_data_o[*b_size -
    3];
  proc_control_node_B.alpha_data_f[*b_size - 2] = (d_data[*b_size - 2] - f_data[*
    b_size - 4] * proc_control_node_B.delta_data_i[*b_size - 4]) -
    proc_control_node_B.alpha_tmp_b * proc_control_node_B.alpha_tmp_b *
    proc_control_node_B.alpha_data_f[*b_size - 3];
  proc_control_node_B.b_gamma_tmp_f = f_data[*b_size - 3];
  proc_control_node_B.b_gamma_data_tmp = proc_control_node_B.alpha_data_f
    [*b_size - 2];
  proc_control_node_B.b_gamma_data_o[*b_size - 2] = (e_data[*b_size - 2] -
    proc_control_node_B.b_gamma_tmp_f * proc_control_node_B.alpha_tmp_b) /
    proc_control_node_B.b_gamma_data_tmp;
  proc_control_node_B.alpha_tmp_b = proc_control_node_B.b_gamma_data_o[*b_size -
    2];
  proc_control_node_B.alpha_data_f[*b_size - 1] = (d_data[*b_size - 1] -
    proc_control_node_B.b_gamma_tmp_f * proc_control_node_B.delta_data_i[*b_size
    - 3]) - proc_control_node_B.alpha_tmp_b * proc_control_node_B.alpha_tmp_b *
    proc_control_node_B.b_gamma_data_tmp;
  if (0 <= *b_size - 1) {
    memset(&proc_control_node_B.z_data_jz[0], 0, *b_size * sizeof(real_T));
  }

  proc_control_node_B.z_data_jz[0] = b_data[0];
  proc_control_node_B.z_data_jz[1] = b_data[1] -
    proc_control_node_B.b_gamma_data_o[0] * b_data[0];
  loop_ub = *b_size - 3;
  for (csz_idx_0 = 0; csz_idx_0 <= loop_ub; csz_idx_0++) {
    proc_control_node_B.z_data_jz[csz_idx_0 + 2] = (b_data[csz_idx_0 + 2] -
      proc_control_node_B.b_gamma_data_o[csz_idx_0 + 1] *
      proc_control_node_B.z_data_jz[csz_idx_0 + 1]) -
      proc_control_node_B.delta_data_i[csz_idx_0] *
      proc_control_node_B.z_data_jz[csz_idx_0];
  }

  if (*b_size == 1) {
    csz_idx_0 = *b_size;
  } else if (*b_size == 1) {
    csz_idx_0 = *b_size;
  } else {
    csz_idx_0 = *b_size;
  }

  acoef = (*b_size != 1);
  bcoef = (*b_size != 1);
  for (loop_ub = 0; loop_ub < csz_idx_0; loop_ub++) {
    proc_control_node_B.c_data_k[loop_ub] = proc_control_node_B.z_data_jz[acoef *
      loop_ub] / proc_control_node_B.alpha_data_f[bcoef * loop_ub];
  }

  x_data[*b_size - 1] = proc_control_node_B.c_data_k[*b_size - 1];
  x_data[*b_size - 2] = proc_control_node_B.c_data_k[*b_size - 2] -
    proc_control_node_B.alpha_tmp_b * x_data[*b_size - 1];
  csz_idx_0 = static_cast<int32_T>(((-1.0 - (static_cast<real_T>(*b_size) - 2.0))
    + 1.0) / -1.0) - 1;
  for (acoef = 0; acoef <= csz_idx_0; acoef++) {
    loop_ub = (*b_size - acoef) - 2;
    x_data[loop_ub - 1] = (proc_control_node_B.c_data_k[loop_ub - 1] -
      proc_control_node_B.b_gamma_data_o[loop_ub - 1] * x_data[loop_ub]) -
      proc_control_node_B.delta_data_i[loop_ub - 1] * x_data[loop_ub + 1];
  }
}

static void proc_control_node_accumarray_b(const real_T subs_data[], const
  int32_T subs_size[2], const real_T val_data[], const int32_T *val_size, const
  real_T sz[2], real_T A_data[], int32_T A_size[2])
{
  int32_T SZ_idx_0_tmp_tmp;
  int32_T b_k;
  int32_T counts_data_tmp;
  int32_T loop_ub_tmp;
  int32_T nsubs;
  SZ_idx_0_tmp_tmp = static_cast<int32_T>(sz[0]);
  if (*val_size == 1) {
    nsubs = subs_size[0] - 1;
    loop_ub_tmp = static_cast<int32_T>(sz[0]) * static_cast<int32_T>(sz[1]) - 1;
    if (0 <= loop_ub_tmp) {
      memset(&proc_control_node_B.counts_data[0], 0, (loop_ub_tmp + 1) * sizeof
             (int32_T));
    }

    for (b_k = 0; b_k <= nsubs; b_k++) {
      counts_data_tmp = (static_cast<int32_T>(subs_data[b_k]) + SZ_idx_0_tmp_tmp
                         * (static_cast<int32_T>(subs_data[b_k + subs_size[0]])
                            - 1)) - 1;
      proc_control_node_B.counts_data[counts_data_tmp]++;
    }

    for (b_k = 0; b_k <= loop_ub_tmp; b_k++) {
      if (proc_control_node_B.counts_data[b_k] == 0) {
        proc_control_node_B.A_data_c[b_k] = 0.0;
      } else {
        proc_control_node_B.A_data_c[b_k] = static_cast<real_T>
          (proc_control_node_B.counts_data[b_k]) * val_data[0];
      }
    }

    A_size[0] = static_cast<int32_T>(sz[0]);
    A_size[1] = static_cast<int32_T>(sz[1]);
    nsubs = static_cast<int32_T>(sz[0]) * static_cast<int32_T>(sz[1]);
    if (0 <= nsubs - 1) {
      memcpy(&A_data[0], &proc_control_node_B.A_data_c[0], nsubs * sizeof(real_T));
    }
  } else {
    nsubs = subs_size[0] - 1;
    loop_ub_tmp = static_cast<int32_T>(sz[0]) * static_cast<int32_T>(sz[1]) - 1;
    A_size[0] = static_cast<int32_T>(sz[0]);
    A_size[1] = static_cast<int32_T>(sz[1]);
    for (b_k = 0; b_k <= loop_ub_tmp; b_k++) {
      proc_control_node_B.filled_data[b_k] = true;
      A_data[b_k] = 0.0;
    }

    for (b_k = 0; b_k <= nsubs; b_k++) {
      proc_control_node_B.s_idx_0 = subs_data[b_k];
      proc_control_node_B.s_idx_1 = subs_data[b_k + subs_size[0]];
      loop_ub_tmp = (static_cast<int32_T>(proc_control_node_B.s_idx_0) +
                     SZ_idx_0_tmp_tmp * (static_cast<int32_T>
        (proc_control_node_B.s_idx_1) - 1)) - 1;
      if (proc_control_node_B.filled_data[loop_ub_tmp]) {
        proc_control_node_B.filled_data[loop_ub_tmp] = false;
        A_data[(static_cast<int32_T>(proc_control_node_B.s_idx_0) +
                SZ_idx_0_tmp_tmp * (static_cast<int32_T>
                 (proc_control_node_B.s_idx_1) - 1)) - 1] = val_data[b_k];
      } else {
        loop_ub_tmp = (static_cast<int32_T>(proc_control_node_B.s_idx_0) +
                       SZ_idx_0_tmp_tmp * (static_cast<int32_T>
          (proc_control_node_B.s_idx_1) - 1)) - 1;
        A_data[loop_ub_tmp] += val_data[b_k];
      }
    }
  }
}

static void proc_control_node_diag(const real_T v_data[], const int32_T v_size[2],
  real_T d_data[], int32_T *d_size)
{
  int32_T dlen;
  int32_T k;
  if ((v_size[0] == 1) && (v_size[1] == 1)) {
    *d_size = 1;
    d_data[0] = v_data[0];
  } else {
    if (v_size[0] < v_size[1]) {
      dlen = v_size[0];
    } else {
      dlen = v_size[1];
    }

    *d_size = dlen;
    for (k = 0; k < dlen; k++) {
      d_data[k] = v_data[k + v_size[0] * k];
    }
  }
}

static void proc_control_node_diag_b(const real_T v_data[], const int32_T
  *v_size, real_T d_data[], int32_T d_size[2])
{
  int32_T loop_ub;
  int32_T nv;
  nv = *v_size - 1;
  d_size[0] = *v_size;
  d_size[1] = *v_size;
  loop_ub = *v_size * *v_size - 1;
  if (0 <= loop_ub) {
    memset(&d_data[0], 0, (loop_ub + 1) * sizeof(real_T));
  }

  for (loop_ub = 0; loop_ub <= nv; loop_ub++) {
    d_data[loop_ub + d_size[0] * loop_ub] = v_data[loop_ub];
  }
}

static void proc_control_node_xswap_b(int32_T n, const real_T x_data[], const
  int32_T x_size[2], int32_T ix0, int32_T iy0, real_T b_x_data[], int32_T
  b_x_size[2])
{
  int32_T c_x;
  int32_T loop_ub;
  int32_T loop_ub_tmp;
  int32_T tmp;
  loop_ub_tmp = x_size[0] * x_size[1];
  if (0 <= loop_ub_tmp - 1) {
    memcpy(&proc_control_node_B.c_x_data_i[0], &x_data[0], loop_ub_tmp * sizeof
           (real_T));
  }

  for (loop_ub = 0; loop_ub < n; loop_ub++) {
    c_x = (ix0 + loop_ub) - 1;
    proc_control_node_B.temp_d = proc_control_node_B.c_x_data_i[c_x];
    tmp = (iy0 + loop_ub) - 1;
    proc_control_node_B.c_x_data_i[c_x] = proc_control_node_B.c_x_data_i[tmp];
    proc_control_node_B.c_x_data_i[tmp] = proc_control_node_B.temp_d;
  }

  b_x_size[0] = x_size[0];
  b_x_size[1] = x_size[1];
  if (0 <= loop_ub_tmp - 1) {
    memcpy(&b_x_data[0], &proc_control_node_B.c_x_data_i[0], loop_ub_tmp *
           sizeof(real_T));
  }
}

static real_T proc_control_node_xnrm2_b4n(int32_T n, const real_T x_data[],
  int32_T ix0)
{
  real_T y;
  int32_T k;
  int32_T kend;
  y = 0.0;
  if (n < 1) {
  } else if (n == 1) {
    y = fabs(x_data[ix0 - 1]);
  } else {
    proc_control_node_B.scale_n = 3.3121686421112381E-170;
    kend = ix0 + n;
    for (k = ix0; k < kend; k++) {
      proc_control_node_B.absxk_p = fabs(x_data[k - 1]);
      if (proc_control_node_B.absxk_p > proc_control_node_B.scale_n) {
        proc_control_node_B.t_o = proc_control_node_B.scale_n /
          proc_control_node_B.absxk_p;
        y = y * proc_control_node_B.t_o * proc_control_node_B.t_o + 1.0;
        proc_control_node_B.scale_n = proc_control_node_B.absxk_p;
      } else {
        proc_control_node_B.t_o = proc_control_node_B.absxk_p /
          proc_control_node_B.scale_n;
        y += proc_control_node_B.t_o * proc_control_node_B.t_o;
      }
    }

    y = proc_control_node_B.scale_n * sqrt(y);
  }

  return y;
}

static void proc_control_node_xzlarfg_b4(int32_T n, real_T alpha1, const real_T
  x_data[], const int32_T x_size[2], int32_T ix0, real_T *b_alpha1, real_T
  b_x_data[], int32_T b_x_size[2], real_T *tau)
{
  int32_T b_x;
  int32_T knt;
  int32_T loop_ub_tmp;
  b_x_size[0] = x_size[0];
  b_x_size[1] = x_size[1];
  loop_ub_tmp = x_size[0] * x_size[1];
  if (0 <= loop_ub_tmp - 1) {
    memcpy(&b_x_data[0], &x_data[0], loop_ub_tmp * sizeof(real_T));
  }

  *b_alpha1 = alpha1;
  *tau = 0.0;
  if (n > 0) {
    proc_control_node_B.xnorm_b = proc_control_node_xnrm2_b4n(n - 1, x_data, ix0);
    if (proc_control_node_B.xnorm_b != 0.0) {
      proc_control_node_B.xnorm_b = proc_control_node_rt_hypotd_snf(alpha1,
        proc_control_node_B.xnorm_b);
      if (alpha1 >= 0.0) {
        proc_control_node_B.xnorm_b = -proc_control_node_B.xnorm_b;
      }

      if (fabs(proc_control_node_B.xnorm_b) < 1.0020841800044864E-292) {
        knt = -1;
        b_x = ix0 + n;
        do {
          knt++;
          for (loop_ub_tmp = ix0; loop_ub_tmp <= b_x - 2; loop_ub_tmp++) {
            b_x_data[loop_ub_tmp - 1] *= 9.9792015476736E+291;
          }

          proc_control_node_B.xnorm_b *= 9.9792015476736E+291;
          *b_alpha1 *= 9.9792015476736E+291;
        } while (!(fabs(proc_control_node_B.xnorm_b) >= 1.0020841800044864E-292));

        proc_control_node_B.xnorm_b = proc_control_node_rt_hypotd_snf(*b_alpha1,
          proc_control_node_xnrm2_b4n(n - 1, b_x_data, ix0));
        if (*b_alpha1 >= 0.0) {
          proc_control_node_B.xnorm_b = -proc_control_node_B.xnorm_b;
        }

        *tau = (proc_control_node_B.xnorm_b - *b_alpha1) /
          proc_control_node_B.xnorm_b;
        *b_alpha1 = 1.0 / (*b_alpha1 - proc_control_node_B.xnorm_b);
        for (loop_ub_tmp = ix0; loop_ub_tmp <= b_x - 2; loop_ub_tmp++) {
          b_x_data[loop_ub_tmp - 1] *= *b_alpha1;
        }

        for (loop_ub_tmp = 0; loop_ub_tmp <= knt; loop_ub_tmp++) {
          proc_control_node_B.xnorm_b *= 1.0020841800044864E-292;
        }

        *b_alpha1 = proc_control_node_B.xnorm_b;
      } else {
        *tau = (proc_control_node_B.xnorm_b - alpha1) /
          proc_control_node_B.xnorm_b;
        *b_alpha1 = 1.0 / (alpha1 - proc_control_node_B.xnorm_b);
        b_x_size[0] = x_size[0];
        b_x_size[1] = x_size[1];
        if (0 <= loop_ub_tmp - 1) {
          memcpy(&b_x_data[0], &x_data[0], loop_ub_tmp * sizeof(real_T));
        }

        knt = ix0 + n;
        for (loop_ub_tmp = ix0; loop_ub_tmp <= knt - 2; loop_ub_tmp++) {
          b_x_data[loop_ub_tmp - 1] *= *b_alpha1;
        }

        *b_alpha1 = proc_control_node_B.xnorm_b;
      }
    }
  }
}

static void proc_control_no_xzlarf_b4nwkzrt(int32_T m, int32_T n, int32_T iv0,
  real_T tau, const real_T C_data[], const int32_T C_size[2], int32_T ic0,
  int32_T ldc, real_T work_data[], const int32_T *work_size, real_T b_C_data[],
  int32_T b_C_size[2])
{
  int32_T b_y_size_idx_0;
  int32_T exitg1;
  boolean_T exitg2;
  b_C_size[0] = C_size[0];
  b_C_size[1] = C_size[1];
  proc_control_node_B.jA_h = C_size[0] * C_size[1];
  if (0 <= proc_control_node_B.jA_h - 1) {
    memcpy(&b_C_data[0], &C_data[0], proc_control_node_B.jA_h * sizeof(real_T));
  }

  if (tau != 0.0) {
    proc_control_node_B.lastv_g = m;
    proc_control_node_B.lastc_e = (iv0 + m) - 2;
    while ((proc_control_node_B.lastv_g > 0) &&
           (C_data[proc_control_node_B.lastc_e] == 0.0)) {
      proc_control_node_B.lastv_g--;
      proc_control_node_B.lastc_e--;
    }

    proc_control_node_B.lastc_e = n;
    exitg2 = false;
    while ((!exitg2) && (proc_control_node_B.lastc_e > 0)) {
      proc_control_node_B.coltop = (proc_control_node_B.lastc_e - 1) * ldc + ic0;
      proc_control_node_B.ia_a = proc_control_node_B.coltop;
      do {
        exitg1 = 0;
        if (proc_control_node_B.ia_a <= (proc_control_node_B.coltop +
             proc_control_node_B.lastv_g) - 1) {
          if (C_data[proc_control_node_B.ia_a - 1] != 0.0) {
            exitg1 = 1;
          } else {
            proc_control_node_B.ia_a++;
          }
        } else {
          proc_control_node_B.lastc_e--;
          exitg1 = 2;
        }
      } while (exitg1 == 0);

      if (exitg1 == 1) {
        exitg2 = true;
      }
    }

    proc_control_node_B.lastc_e--;
    b_C_size[0] = C_size[0];
    b_C_size[1] = C_size[1];
    if (0 <= proc_control_node_B.jA_h - 1) {
      memcpy(&b_C_data[0], &C_data[0], proc_control_node_B.jA_h * sizeof(real_T));
    }
  } else {
    proc_control_node_B.lastv_g = 0;
    proc_control_node_B.lastc_e = -1;
  }

  if (proc_control_node_B.lastv_g > 0) {
    proc_control_node_B.coltop = *work_size;
    if (0 <= proc_control_node_B.coltop - 1) {
      memcpy(&proc_control_node_B.b_y_data_k[0], &work_data[0],
             proc_control_node_B.coltop * sizeof(real_T));
    }

    if (proc_control_node_B.lastc_e + 1 != 0) {
      if (0 <= proc_control_node_B.lastc_e) {
        memset(&proc_control_node_B.b_y_data_k[0], 0,
               (proc_control_node_B.lastc_e + 1) * sizeof(real_T));
      }

      proc_control_node_B.jA_h = 0;
      proc_control_node_B.b_C = ldc * proc_control_node_B.lastc_e + ic0;
      for (proc_control_node_B.coltop = ic0; ldc < 0 ?
           proc_control_node_B.coltop >= proc_control_node_B.b_C :
           proc_control_node_B.coltop <= proc_control_node_B.b_C;
           proc_control_node_B.coltop += ldc) {
        proc_control_node_B.c_d2 = 0.0;
        proc_control_node_B.d_e = proc_control_node_B.coltop +
          proc_control_node_B.lastv_g;
        for (proc_control_node_B.ia_a = proc_control_node_B.coltop;
             proc_control_node_B.ia_a < proc_control_node_B.d_e;
             proc_control_node_B.ia_a++) {
          proc_control_node_B.c_d2 += b_C_data[((iv0 + proc_control_node_B.ia_a)
            - proc_control_node_B.coltop) - 1] *
            b_C_data[proc_control_node_B.ia_a - 1];
        }

        proc_control_node_B.b_y_data_k[proc_control_node_B.jA_h] +=
          proc_control_node_B.c_d2;
        proc_control_node_B.jA_h++;
      }
    }

    if (0 <= *work_size - 1) {
      memcpy(&work_data[0], &proc_control_node_B.b_y_data_k[0], *work_size *
             sizeof(real_T));
    }

    b_y_size_idx_0 = b_C_size[0];
    proc_control_node_B.d_e = b_C_size[1];
    proc_control_node_B.jA_h = b_C_size[0] * b_C_size[1];
    if (0 <= proc_control_node_B.jA_h - 1) {
      memcpy(&proc_control_node_B.b_A_data_m[0], &b_C_data[0],
             proc_control_node_B.jA_h * sizeof(real_T));
    }

    if (!(-tau == 0.0)) {
      proc_control_node_B.jA_h = ic0;
      for (proc_control_node_B.ia_a = 0; proc_control_node_B.ia_a <=
           proc_control_node_B.lastc_e; proc_control_node_B.ia_a++) {
        proc_control_node_B.c_d2 =
          proc_control_node_B.b_y_data_k[proc_control_node_B.ia_a];
        if (proc_control_node_B.c_d2 != 0.0) {
          proc_control_node_B.c_d2 *= -tau;
          proc_control_node_B.b_C = (proc_control_node_B.lastv_g +
            proc_control_node_B.jA_h) - 1;
          for (proc_control_node_B.coltop = proc_control_node_B.jA_h;
               proc_control_node_B.coltop <= proc_control_node_B.b_C;
               proc_control_node_B.coltop++) {
            proc_control_node_B.b_A_data_m[proc_control_node_B.coltop - 1] +=
              proc_control_node_B.b_A_data_m[((iv0 + proc_control_node_B.coltop)
              - proc_control_node_B.jA_h) - 1] * proc_control_node_B.c_d2;
          }
        }

        proc_control_node_B.jA_h += ldc;
      }
    }

    proc_control_node_B.coltop = b_y_size_idx_0 * proc_control_node_B.d_e;
    if (0 <= proc_control_node_B.coltop - 1) {
      memcpy(&b_C_data[0], &proc_control_node_B.b_A_data_m[0],
             proc_control_node_B.coltop * sizeof(real_T));
    }
  }
}

static void proc_control_node_qrpf_b4(const real_T A_data[], const int32_T
  A_size[2], int32_T m, int32_T n, real_T tau_data[], const int32_T jpvt_data[],
  const int32_T jpvt_size[2], real_T b_A_data[], int32_T b_A_size[2], int32_T
  b_jpvt_data[], int32_T b_jpvt_size[2])
{
  b_jpvt_size[0] = 1;
  b_jpvt_size[1] = jpvt_size[1];
  proc_control_node_B.itemp = jpvt_size[1] - 1;
  if (0 <= proc_control_node_B.itemp) {
    memcpy(&b_jpvt_data[0], &jpvt_data[0], (proc_control_node_B.itemp + 1) *
           sizeof(int32_T));
  }

  b_A_size[0] = A_size[0];
  b_A_size[1] = A_size[1];
  proc_control_node_B.itemp = A_size[0] * A_size[1];
  if (0 <= proc_control_node_B.itemp - 1) {
    memcpy(&b_A_data[0], &A_data[0], proc_control_node_B.itemp * sizeof(real_T));
  }

  proc_control_node_B.ma = A_size[0];
  if (m < n) {
    proc_control_node_B.minmn = m;
  } else {
    proc_control_node_B.minmn = n;
  }

  proc_control_node_B.minmn--;
  proc_control_node_B.work_size = A_size[1];
  proc_control_node_B.itemp = A_size[1];
  if (0 <= proc_control_node_B.itemp - 1) {
    memset(&proc_control_node_B.work_data_c[0], 0, proc_control_node_B.itemp *
           sizeof(real_T));
  }

  proc_control_node_B.itemp = A_size[1];
  if (0 <= proc_control_node_B.itemp - 1) {
    memset(&proc_control_node_B.vn1_data_d[0], 0, proc_control_node_B.itemp *
           sizeof(real_T));
  }

  proc_control_node_B.itemp = A_size[1];
  if (0 <= proc_control_node_B.itemp - 1) {
    memset(&proc_control_node_B.vn2_data_k[0], 0, proc_control_node_B.itemp *
           sizeof(real_T));
  }

  for (proc_control_node_B.b_j_h = 0; proc_control_node_B.b_j_h < n;
       proc_control_node_B.b_j_h++) {
    proc_control_node_B.mmi = proc_control_node_B.b_j_h * proc_control_node_B.ma;
    proc_control_node_B.smax = 0.0;
    if (m < 1) {
    } else if (m == 1) {
      proc_control_node_B.smax = fabs(A_data[proc_control_node_B.mmi]);
    } else {
      proc_control_node_B.scale_a = 3.3121686421112381E-170;
      proc_control_node_B.kend = proc_control_node_B.mmi + m;
      for (proc_control_node_B.pvt = proc_control_node_B.mmi + 1;
           proc_control_node_B.pvt <= proc_control_node_B.kend;
           proc_control_node_B.pvt++) {
        proc_control_node_B.absxk_d = fabs(A_data[proc_control_node_B.pvt - 1]);
        if (proc_control_node_B.absxk_d > proc_control_node_B.scale_a) {
          proc_control_node_B.t_pz = proc_control_node_B.scale_a /
            proc_control_node_B.absxk_d;
          proc_control_node_B.smax = proc_control_node_B.smax *
            proc_control_node_B.t_pz * proc_control_node_B.t_pz + 1.0;
          proc_control_node_B.scale_a = proc_control_node_B.absxk_d;
        } else {
          proc_control_node_B.t_pz = proc_control_node_B.absxk_d /
            proc_control_node_B.scale_a;
          proc_control_node_B.smax += proc_control_node_B.t_pz *
            proc_control_node_B.t_pz;
        }
      }

      proc_control_node_B.smax = proc_control_node_B.scale_a * sqrt
        (proc_control_node_B.smax);
    }

    proc_control_node_B.vn2_data_k[proc_control_node_B.b_j_h] =
      proc_control_node_B.smax;
    proc_control_node_B.vn1_data_d[proc_control_node_B.b_j_h] =
      proc_control_node_B.smax;
  }

  for (proc_control_node_B.b_j_h = 0; proc_control_node_B.b_j_h <=
       proc_control_node_B.minmn; proc_control_node_B.b_j_h++) {
    proc_control_node_B.itemp = proc_control_node_B.b_j_h *
      proc_control_node_B.ma;
    proc_control_node_B.kend = proc_control_node_B.itemp +
      proc_control_node_B.b_j_h;
    proc_control_node_B.nmi = n - proc_control_node_B.b_j_h;
    proc_control_node_B.mmi = (m - proc_control_node_B.b_j_h) - 1;
    if (proc_control_node_B.nmi < 1) {
      proc_control_node_B.b_A_c = 0;
    } else {
      proc_control_node_B.b_A_c = 1;
      if (proc_control_node_B.nmi > 1) {
        proc_control_node_B.smax =
          proc_control_node_B.vn1_data_d[proc_control_node_B.b_j_h];
        for (proc_control_node_B.pvt = 2; proc_control_node_B.pvt <=
             proc_control_node_B.nmi; proc_control_node_B.pvt++) {
          proc_control_node_B.scale_a = proc_control_node_B.vn1_data_d
            [(proc_control_node_B.b_j_h + proc_control_node_B.pvt) - 1];
          if (proc_control_node_B.scale_a > proc_control_node_B.smax) {
            proc_control_node_B.b_A_c = proc_control_node_B.pvt;
            proc_control_node_B.smax = proc_control_node_B.scale_a;
          }
        }
      }
    }

    proc_control_node_B.pvt = (proc_control_node_B.b_j_h +
      proc_control_node_B.b_A_c) - 1;
    if (proc_control_node_B.pvt + 1 != proc_control_node_B.b_j_h + 1) {
      proc_control_node_B.b_A_size[0] = b_A_size[0];
      proc_control_node_B.b_A_size[1] = b_A_size[1];
      proc_control_node_B.b_A_c = b_A_size[0] * b_A_size[1] - 1;
      if (0 <= proc_control_node_B.b_A_c) {
        memcpy(&proc_control_node_B.b_A_data_n[0], &b_A_data[0],
               (proc_control_node_B.b_A_c + 1) * sizeof(real_T));
      }

      proc_control_node_xswap_b(m, proc_control_node_B.b_A_data_n,
        proc_control_node_B.b_A_size, proc_control_node_B.pvt *
        proc_control_node_B.ma + 1, proc_control_node_B.itemp + 1, b_A_data,
        b_A_size);
      proc_control_node_B.b_A_c = proc_control_node_B.pvt;
      proc_control_node_B.itemp = b_jpvt_data[proc_control_node_B.b_A_c];
      proc_control_node_B.b_jpvt_data_tmp = proc_control_node_B.b_j_h;
      b_jpvt_data[proc_control_node_B.b_A_c] =
        b_jpvt_data[proc_control_node_B.b_jpvt_data_tmp];
      b_jpvt_data[proc_control_node_B.b_jpvt_data_tmp] =
        proc_control_node_B.itemp;
      proc_control_node_B.vn1_data_d[proc_control_node_B.pvt] =
        proc_control_node_B.vn1_data_d[proc_control_node_B.b_j_h];
      proc_control_node_B.vn2_data_k[proc_control_node_B.pvt] =
        proc_control_node_B.vn2_data_k[proc_control_node_B.b_j_h];
    }

    if (proc_control_node_B.b_j_h + 1 < m) {
      proc_control_node_xzlarfg_b4(proc_control_node_B.mmi + 1,
        b_A_data[proc_control_node_B.kend], b_A_data, b_A_size,
        proc_control_node_B.kend + 2, &proc_control_node_B.smax,
        proc_control_node_B.e_A_data, proc_control_node_B.e_A_size,
        &tau_data[proc_control_node_B.b_j_h]);
      b_A_size[0] = proc_control_node_B.e_A_size[0];
      b_A_size[1] = proc_control_node_B.e_A_size[1];
      proc_control_node_B.itemp = proc_control_node_B.e_A_size[0] *
        proc_control_node_B.e_A_size[1];
      if (0 <= proc_control_node_B.itemp - 1) {
        memcpy(&b_A_data[0], &proc_control_node_B.e_A_data[0],
               proc_control_node_B.itemp * sizeof(real_T));
      }

      b_A_data[proc_control_node_B.kend] = proc_control_node_B.smax;
    } else {
      tau_data[proc_control_node_B.b_j_h] = 0.0;
    }

    if (proc_control_node_B.b_j_h + 1 < n) {
      proc_control_node_B.smax = b_A_data[proc_control_node_B.kend];
      b_A_data[proc_control_node_B.kend] = 1.0;
      proc_control_no_xzlarf_b4nwkzrt(proc_control_node_B.mmi + 1,
        proc_control_node_B.nmi - 1, proc_control_node_B.kend + 1,
        tau_data[proc_control_node_B.b_j_h], b_A_data, b_A_size,
        (proc_control_node_B.kend + proc_control_node_B.ma) + 1,
        proc_control_node_B.ma, proc_control_node_B.work_data_c,
        &proc_control_node_B.work_size, proc_control_node_B.b_A_data_n,
        proc_control_node_B.e_A_size);
      b_A_size[0] = proc_control_node_B.e_A_size[0];
      b_A_size[1] = proc_control_node_B.e_A_size[1];
      proc_control_node_B.itemp = proc_control_node_B.e_A_size[0] *
        proc_control_node_B.e_A_size[1];
      if (0 <= proc_control_node_B.itemp - 1) {
        memcpy(&b_A_data[0], &proc_control_node_B.b_A_data_n[0],
               proc_control_node_B.itemp * sizeof(real_T));
      }

      b_A_data[proc_control_node_B.kend] = proc_control_node_B.smax;
    }

    for (proc_control_node_B.nmi = proc_control_node_B.b_j_h + 2;
         proc_control_node_B.nmi <= n; proc_control_node_B.nmi++) {
      proc_control_node_B.itemp = ((proc_control_node_B.nmi - 1) *
        proc_control_node_B.ma + proc_control_node_B.b_j_h) + 1;
      proc_control_node_B.smax =
        proc_control_node_B.vn1_data_d[proc_control_node_B.nmi - 1];
      if (proc_control_node_B.smax != 0.0) {
        proc_control_node_B.scale_a = fabs(b_A_data[proc_control_node_B.itemp -
          1]) / proc_control_node_B.smax;
        proc_control_node_B.scale_a = 1.0 - proc_control_node_B.scale_a *
          proc_control_node_B.scale_a;
        if (proc_control_node_B.scale_a < 0.0) {
          proc_control_node_B.scale_a = 0.0;
        }

        proc_control_node_B.absxk_d = proc_control_node_B.smax /
          proc_control_node_B.vn2_data_k[proc_control_node_B.nmi - 1];
        proc_control_node_B.absxk_d = proc_control_node_B.absxk_d *
          proc_control_node_B.absxk_d * proc_control_node_B.scale_a;
        if (proc_control_node_B.absxk_d <= 1.4901161193847656E-8) {
          if (proc_control_node_B.b_j_h + 1 < m) {
            proc_control_node_B.smax = 0.0;
            if (proc_control_node_B.mmi < 1) {
            } else if (proc_control_node_B.mmi == 1) {
              proc_control_node_B.smax = fabs(b_A_data[proc_control_node_B.itemp]);
            } else {
              proc_control_node_B.scale_a = 3.3121686421112381E-170;
              proc_control_node_B.kend = proc_control_node_B.itemp +
                proc_control_node_B.mmi;
              for (proc_control_node_B.pvt = proc_control_node_B.itemp + 1;
                   proc_control_node_B.pvt <= proc_control_node_B.kend;
                   proc_control_node_B.pvt++) {
                proc_control_node_B.absxk_d = fabs
                  (b_A_data[proc_control_node_B.pvt - 1]);
                if (proc_control_node_B.absxk_d > proc_control_node_B.scale_a) {
                  proc_control_node_B.t_pz = proc_control_node_B.scale_a /
                    proc_control_node_B.absxk_d;
                  proc_control_node_B.smax = proc_control_node_B.smax *
                    proc_control_node_B.t_pz * proc_control_node_B.t_pz + 1.0;
                  proc_control_node_B.scale_a = proc_control_node_B.absxk_d;
                } else {
                  proc_control_node_B.t_pz = proc_control_node_B.absxk_d /
                    proc_control_node_B.scale_a;
                  proc_control_node_B.smax += proc_control_node_B.t_pz *
                    proc_control_node_B.t_pz;
                }
              }

              proc_control_node_B.smax = proc_control_node_B.scale_a * sqrt
                (proc_control_node_B.smax);
            }

            proc_control_node_B.vn1_data_d[proc_control_node_B.nmi - 1] =
              proc_control_node_B.smax;
            proc_control_node_B.vn2_data_k[proc_control_node_B.nmi - 1] =
              proc_control_node_B.vn1_data_d[proc_control_node_B.nmi - 1];
          } else {
            proc_control_node_B.vn1_data_d[proc_control_node_B.nmi - 1] = 0.0;
            proc_control_node_B.vn2_data_k[proc_control_node_B.nmi - 1] = 0.0;
          }
        } else {
          proc_control_node_B.vn1_data_d[proc_control_node_B.nmi - 1] =
            proc_control_node_B.smax * sqrt(proc_control_node_B.scale_a);
        }
      }
    }
  }
}

static void proc_control_node_mldivide_b(const real_T A_data[], const int32_T
  A_size[2], const real_T B_data[], const int32_T *B_size, real_T Y_data[],
  int32_T *Y_size)
{
  if (A_size[0] == A_size[1]) {
    if (A_size[0] < A_size[1]) {
      proc_control_node_B.na = A_size[0];
    } else {
      proc_control_node_B.na = A_size[1];
    }

    if (*B_size < proc_control_node_B.na) {
      proc_control_node_B.na = *B_size;
    }

    proc_control_node_B.minmana = A_size[0];
    proc_control_node_B.d_A_size[0] = A_size[0];
    proc_control_node_B.d_A_size[1] = A_size[1];
    proc_control_node_B.loop_ub_j = A_size[0] * A_size[1];
    if (0 <= proc_control_node_B.loop_ub_j - 1) {
      memcpy(&proc_control_node_B.d_A_data[0], &A_data[0],
             proc_control_node_B.loop_ub_j * sizeof(real_T));
    }

    proc_control_node_B.b_jpvt_data[0] = 1;
    proc_control_node_B.maxmn = 1;
    for (proc_control_node_B.loop_ub_j = 2; proc_control_node_B.loop_ub_j <=
         proc_control_node_B.na; proc_control_node_B.loop_ub_j++) {
      proc_control_node_B.maxmn++;
      proc_control_node_B.b_jpvt_data[proc_control_node_B.loop_ub_j - 1] =
        proc_control_node_B.maxmn;
    }

    proc_control_node_B.ldap1 = A_size[0];
    if (proc_control_node_B.na - 1 < proc_control_node_B.na) {
      proc_control_node_B.maxmn = proc_control_node_B.na - 1;
    } else {
      proc_control_node_B.maxmn = proc_control_node_B.na;
    }

    proc_control_node_B.mn = proc_control_node_B.maxmn - 1;
    for (proc_control_node_B.maxmn = 0; proc_control_node_B.maxmn <=
         proc_control_node_B.mn; proc_control_node_B.maxmn++) {
      proc_control_node_B.mmj_tmp = proc_control_node_B.na -
        proc_control_node_B.maxmn;
      proc_control_node_B.c_tmp_h = (proc_control_node_B.ldap1 + 1) *
        proc_control_node_B.maxmn;
      proc_control_node_B.b_k_n = proc_control_node_B.c_tmp_h + 2;
      if (proc_control_node_B.mmj_tmp < 1) {
        proc_control_node_B.i_br = 0;
      } else {
        proc_control_node_B.i_br = 1;
        if (proc_control_node_B.mmj_tmp > 1) {
          proc_control_node_B.tol = fabs
            (proc_control_node_B.d_A_data[proc_control_node_B.c_tmp_h]);
          for (proc_control_node_B.loop_ub_j = 2; proc_control_node_B.loop_ub_j <=
               proc_control_node_B.mmj_tmp; proc_control_node_B.loop_ub_j++) {
            proc_control_node_B.wj = fabs(proc_control_node_B.d_A_data
              [(proc_control_node_B.c_tmp_h + proc_control_node_B.loop_ub_j) - 1]);
            if (proc_control_node_B.wj > proc_control_node_B.tol) {
              proc_control_node_B.i_br = proc_control_node_B.loop_ub_j;
              proc_control_node_B.tol = proc_control_node_B.wj;
            }
          }
        }
      }

      if (proc_control_node_B.d_A_data[(proc_control_node_B.c_tmp_h +
           proc_control_node_B.i_br) - 1] != 0.0) {
        if (proc_control_node_B.i_br - 1 != 0) {
          proc_control_node_B.jA_f = proc_control_node_B.maxmn +
            proc_control_node_B.i_br;
          proc_control_node_B.b_jpvt_data[proc_control_node_B.maxmn] =
            proc_control_node_B.jA_f;
          proc_control_node_B.c_x_size_idx_0 = proc_control_node_B.d_A_size[0];
          proc_control_node_B.c_x_size_idx_1 = proc_control_node_B.d_A_size[1];
          proc_control_node_B.loop_ub_j = proc_control_node_B.d_A_size[0] *
            proc_control_node_B.d_A_size[1];
          if (0 <= proc_control_node_B.loop_ub_j - 1) {
            memcpy(&proc_control_node_B.c_x_data_p[0],
                   &proc_control_node_B.d_A_data[0],
                   proc_control_node_B.loop_ub_j * sizeof(real_T));
          }

          for (proc_control_node_B.loop_ub_j = 0; proc_control_node_B.loop_ub_j <
               proc_control_node_B.na; proc_control_node_B.loop_ub_j++) {
            proc_control_node_B.i_br = proc_control_node_B.loop_ub_j *
              proc_control_node_B.minmana;
            proc_control_node_B.jy = proc_control_node_B.i_br +
              proc_control_node_B.maxmn;
            proc_control_node_B.tol =
              proc_control_node_B.c_x_data_p[proc_control_node_B.jy];
            proc_control_node_B.i_br = (proc_control_node_B.i_br +
              proc_control_node_B.jA_f) - 1;
            proc_control_node_B.c_x_data_p[proc_control_node_B.jy] =
              proc_control_node_B.c_x_data_p[proc_control_node_B.i_br];
            proc_control_node_B.c_x_data_p[proc_control_node_B.i_br] =
              proc_control_node_B.tol;
          }

          proc_control_node_B.loop_ub_j = proc_control_node_B.c_x_size_idx_0 *
            proc_control_node_B.c_x_size_idx_1;
          if (0 <= proc_control_node_B.loop_ub_j - 1) {
            memcpy(&proc_control_node_B.d_A_data[0],
                   &proc_control_node_B.c_x_data_p[0],
                   proc_control_node_B.loop_ub_j * sizeof(real_T));
          }
        }

        proc_control_node_B.loop_ub_j = (proc_control_node_B.c_tmp_h +
          proc_control_node_B.mmj_tmp) + 2;
        for (proc_control_node_B.i_br = proc_control_node_B.b_k_n;
             proc_control_node_B.i_br <= proc_control_node_B.loop_ub_j - 2;
             proc_control_node_B.i_br++) {
          proc_control_node_B.d_A_data[proc_control_node_B.i_br - 1] /=
            proc_control_node_B.d_A_data[proc_control_node_B.c_tmp_h];
        }
      }

      proc_control_node_B.b_k_n = proc_control_node_B.mmj_tmp - 1;
      proc_control_node_B.jA_f = proc_control_node_B.c_tmp_h +
        proc_control_node_B.ldap1;
      proc_control_node_B.jy = proc_control_node_B.c_tmp_h +
        proc_control_node_B.minmana;
      for (proc_control_node_B.i_br = 0; proc_control_node_B.i_br <
           proc_control_node_B.b_k_n; proc_control_node_B.i_br++) {
        proc_control_node_B.loop_ub_j = proc_control_node_B.i_br *
          proc_control_node_B.minmana + proc_control_node_B.jy;
        proc_control_node_B.tol =
          proc_control_node_B.d_A_data[proc_control_node_B.loop_ub_j];
        if (proc_control_node_B.d_A_data[proc_control_node_B.loop_ub_j] != 0.0)
        {
          proc_control_node_B.c_x_size_idx_1 = proc_control_node_B.jA_f + 2;
          proc_control_node_B.loop_ub_j = proc_control_node_B.mmj_tmp +
            proc_control_node_B.jA_f;
          for (proc_control_node_B.c_x_size_idx_0 =
               proc_control_node_B.c_x_size_idx_1;
               proc_control_node_B.c_x_size_idx_0 <=
               proc_control_node_B.loop_ub_j; proc_control_node_B.c_x_size_idx_0
               ++) {
            proc_control_node_B.d_A_data[proc_control_node_B.c_x_size_idx_0 - 1]
              += proc_control_node_B.d_A_data[((proc_control_node_B.c_tmp_h +
              proc_control_node_B.c_x_size_idx_0) - proc_control_node_B.jA_f) -
              1] * -proc_control_node_B.tol;
          }
        }

        proc_control_node_B.jA_f += proc_control_node_B.minmana;
      }
    }

    *Y_size = *B_size;
    proc_control_node_B.loop_ub_j = *B_size;
    if (0 <= proc_control_node_B.loop_ub_j - 1) {
      memcpy(&Y_data[0], &B_data[0], proc_control_node_B.loop_ub_j * sizeof
             (real_T));
    }

    proc_control_node_B.minmana = proc_control_node_B.d_A_size[0];
    proc_control_node_B.mn = proc_control_node_B.na - 2;
    for (proc_control_node_B.b_k_n = 0; proc_control_node_B.b_k_n <=
         proc_control_node_B.mn; proc_control_node_B.b_k_n++) {
      proc_control_node_B.maxmn =
        proc_control_node_B.b_jpvt_data[proc_control_node_B.b_k_n];
      if (proc_control_node_B.b_k_n + 1 != proc_control_node_B.maxmn) {
        proc_control_node_B.tol = Y_data[proc_control_node_B.b_k_n];
        Y_data[proc_control_node_B.b_k_n] = Y_data[proc_control_node_B.maxmn - 1];
        Y_data[proc_control_node_B.maxmn - 1] = proc_control_node_B.tol;
      }
    }

    for (proc_control_node_B.b_k_n = 0; proc_control_node_B.b_k_n <
         proc_control_node_B.na; proc_control_node_B.b_k_n++) {
      proc_control_node_B.maxmn = proc_control_node_B.minmana *
        proc_control_node_B.b_k_n - 1;
      if (Y_data[proc_control_node_B.b_k_n] != 0.0) {
        for (proc_control_node_B.i_br = proc_control_node_B.b_k_n + 2;
             proc_control_node_B.i_br <= proc_control_node_B.na;
             proc_control_node_B.i_br++) {
          Y_data[proc_control_node_B.i_br - 1] -=
            proc_control_node_B.d_A_data[proc_control_node_B.i_br +
            proc_control_node_B.maxmn] * Y_data[proc_control_node_B.b_k_n];
        }
      }
    }

    for (proc_control_node_B.loop_ub_j = proc_control_node_B.na;
         proc_control_node_B.loop_ub_j >= 1; proc_control_node_B.loop_ub_j--) {
      proc_control_node_B.maxmn = (proc_control_node_B.loop_ub_j - 1) *
        proc_control_node_B.minmana - 1;
      proc_control_node_B.tol = Y_data[proc_control_node_B.loop_ub_j - 1];
      if (proc_control_node_B.tol != 0.0) {
        Y_data[proc_control_node_B.loop_ub_j - 1] = proc_control_node_B.tol /
          proc_control_node_B.d_A_data[proc_control_node_B.loop_ub_j +
          proc_control_node_B.maxmn];
        proc_control_node_B.mn = proc_control_node_B.loop_ub_j - 2;
        for (proc_control_node_B.b_k_n = 0; proc_control_node_B.b_k_n <=
             proc_control_node_B.mn; proc_control_node_B.b_k_n++) {
          Y_data[proc_control_node_B.b_k_n] -= proc_control_node_B.d_A_data
            [(proc_control_node_B.b_k_n + proc_control_node_B.maxmn) + 1] *
            Y_data[proc_control_node_B.loop_ub_j - 1];
        }
      }
    }
  } else {
    proc_control_node_B.maxmn = A_size[1] - 1;
    if (A_size[0] < A_size[1]) {
      proc_control_node_B.minmana = A_size[0];
    } else {
      proc_control_node_B.minmana = A_size[1];
    }

    proc_control_node_B.b_jpvt_size[0] = 1;
    proc_control_node_B.b_jpvt_size[1] = A_size[1];
    if (0 <= proc_control_node_B.maxmn) {
      memset(&proc_control_node_B.b_jpvt_data[0], 0, (proc_control_node_B.maxmn
              + 1) * sizeof(int32_T));
    }

    for (proc_control_node_B.b_k_n = 0; proc_control_node_B.b_k_n <=
         proc_control_node_B.maxmn; proc_control_node_B.b_k_n++) {
      proc_control_node_B.b_jpvt_data[proc_control_node_B.b_k_n] =
        proc_control_node_B.b_k_n + 1;
    }

    if (0 <= proc_control_node_B.minmana - 1) {
      memset(&proc_control_node_B.c_tau_data[0], 0, proc_control_node_B.minmana *
             sizeof(real_T));
    }

    proc_control_node_qrpf_b4(A_data, A_size, A_size[0], A_size[1],
      proc_control_node_B.c_tau_data, proc_control_node_B.b_jpvt_data,
      proc_control_node_B.b_jpvt_size, proc_control_node_B.d_A_data,
      proc_control_node_B.d_A_size, proc_control_node_B.b_jpvt_data_k,
      proc_control_node_B.b_jpvt_size_p);
    proc_control_node_B.na = 0;
    if (proc_control_node_B.d_A_size[0] < proc_control_node_B.d_A_size[1]) {
      proc_control_node_B.minmana = proc_control_node_B.d_A_size[0];
      proc_control_node_B.maxmn = proc_control_node_B.d_A_size[1];
    } else {
      proc_control_node_B.minmana = proc_control_node_B.d_A_size[1];
      proc_control_node_B.maxmn = proc_control_node_B.d_A_size[0];
    }

    proc_control_node_B.tol = 2.2204460492503131E-15 * static_cast<real_T>
      (proc_control_node_B.maxmn) * fabs(proc_control_node_B.d_A_data[0]);
    while ((proc_control_node_B.na < proc_control_node_B.minmana) && (!(fabs
             (proc_control_node_B.d_A_data[proc_control_node_B.na +
              proc_control_node_B.d_A_size[0] * proc_control_node_B.na]) <=
             proc_control_node_B.tol))) {
      proc_control_node_B.na++;
    }

    proc_control_node_B.minmana = proc_control_node_B.d_A_size[1];
    *Y_size = proc_control_node_B.d_A_size[1];
    if (0 <= proc_control_node_B.minmana - 1) {
      memset(&Y_data[0], 0, proc_control_node_B.minmana * sizeof(real_T));
    }

    proc_control_node_B.loop_ub_j = *B_size;
    if (0 <= proc_control_node_B.loop_ub_j - 1) {
      memcpy(&proc_control_node_B.B_data_n[0], &B_data[0],
             proc_control_node_B.loop_ub_j * sizeof(real_T));
    }

    proc_control_node_B.minmana = proc_control_node_B.d_A_size[0];
    if (proc_control_node_B.d_A_size[0] < proc_control_node_B.d_A_size[1]) {
      proc_control_node_B.jA_f = proc_control_node_B.d_A_size[0];
    } else {
      proc_control_node_B.jA_f = proc_control_node_B.d_A_size[1];
    }

    proc_control_node_B.mn = proc_control_node_B.jA_f - 1;
    for (proc_control_node_B.maxmn = 0; proc_control_node_B.maxmn <=
         proc_control_node_B.mn; proc_control_node_B.maxmn++) {
      proc_control_node_B.tol =
        proc_control_node_B.c_tau_data[proc_control_node_B.maxmn];
      if (proc_control_node_B.tol != 0.0) {
        proc_control_node_B.wj =
          proc_control_node_B.B_data_n[proc_control_node_B.maxmn];
        for (proc_control_node_B.i_br = proc_control_node_B.maxmn + 2;
             proc_control_node_B.i_br <= proc_control_node_B.minmana;
             proc_control_node_B.i_br++) {
          proc_control_node_B.wj += proc_control_node_B.d_A_data
            [(proc_control_node_B.i_br + proc_control_node_B.d_A_size[0] *
              proc_control_node_B.maxmn) - 1] *
            proc_control_node_B.B_data_n[proc_control_node_B.i_br - 1];
        }

        proc_control_node_B.wj *= proc_control_node_B.tol;
        if (proc_control_node_B.wj != 0.0) {
          proc_control_node_B.B_data_n[proc_control_node_B.maxmn] -=
            proc_control_node_B.wj;
          for (proc_control_node_B.b_k_n = proc_control_node_B.maxmn + 2;
               proc_control_node_B.b_k_n <= proc_control_node_B.minmana;
               proc_control_node_B.b_k_n++) {
            proc_control_node_B.B_data_n[proc_control_node_B.b_k_n - 1] -=
              proc_control_node_B.d_A_data[(proc_control_node_B.b_k_n +
              proc_control_node_B.d_A_size[0] * proc_control_node_B.maxmn) - 1] *
              proc_control_node_B.wj;
          }
        }
      }
    }

    for (proc_control_node_B.b_k_n = 0; proc_control_node_B.b_k_n <
         proc_control_node_B.na; proc_control_node_B.b_k_n++) {
      Y_data[proc_control_node_B.b_jpvt_data_k[proc_control_node_B.b_k_n] - 1] =
        proc_control_node_B.B_data_n[proc_control_node_B.b_k_n];
    }

    for (proc_control_node_B.i_br = proc_control_node_B.na;
         proc_control_node_B.i_br >= 1; proc_control_node_B.i_br--) {
      proc_control_node_B.minmana =
        proc_control_node_B.b_jpvt_data_k[proc_control_node_B.i_br - 1] - 1;
      Y_data[proc_control_node_B.minmana] /= proc_control_node_B.d_A_data
        [(proc_control_node_B.i_br + proc_control_node_B.d_A_size[0] *
          (proc_control_node_B.i_br - 1)) - 1];
      proc_control_node_B.b_k_n = proc_control_node_B.i_br - 2;
      for (proc_control_node_B.maxmn = 0; proc_control_node_B.maxmn <=
           proc_control_node_B.b_k_n; proc_control_node_B.maxmn++) {
        proc_control_node_B.loop_ub_j =
          proc_control_node_B.b_jpvt_data_k[proc_control_node_B.maxmn] - 1;
        Y_data[proc_control_node_B.loop_ub_j] -=
          Y_data[proc_control_node_B.minmana] *
          proc_control_node_B.d_A_data[proc_control_node_B.maxmn +
          proc_control_node_B.d_A_size[0] * (proc_control_node_B.i_br - 1)];
      }
    }
  }
}

static void proc_con_solveDampenedHessian_b(const real_T Jtri_data[], const
  int32_T Jtri_size[2], real_T lambda, const real_T v_data[], const int32_T
  *v_size, real_T dx_data[], int32_T *dx_size)
{
  if (*v_size - 1 < 1) {
    proc_control_node_B.inner = 0;
  } else {
    proc_control_node_B.inner = *v_size - 1;
    proc_control_node_B.m_c = *v_size - 2;
    for (proc_control_node_B.b_i_pj = 0; proc_control_node_B.b_i_pj <=
         proc_control_node_B.m_c; proc_control_node_B.b_i_pj++) {
      proc_control_node_B.f_data[proc_control_node_B.b_i_pj] =
        static_cast<real_T>(proc_control_node_B.b_i_pj) + 1.0;
    }
  }

  proc_control_node_B.m_c = Jtri_size[0];
  proc_control_node_B.Jtri_size_c = Jtri_size[0];
  if (0 <= proc_control_node_B.m_c - 1) {
    memcpy(&proc_control_node_B.Jtri_data_l[0], &Jtri_data[0],
           proc_control_node_B.m_c * sizeof(real_T));
  }

  proc_control_node_power(proc_control_node_B.Jtri_data_l,
    &proc_control_node_B.Jtri_size_c, proc_control_node_B.d_data,
    &proc_control_node_B.d_size_i);
  proc_control_node_B.m_c = Jtri_size[0];
  proc_control_node_B.Jtri_size_c = Jtri_size[0];
  for (proc_control_node_B.b_i_pj = 0; proc_control_node_B.b_i_pj <
       proc_control_node_B.m_c; proc_control_node_B.b_i_pj++) {
    proc_control_node_B.Jtri_data_l[proc_control_node_B.b_i_pj] =
      Jtri_data[proc_control_node_B.b_i_pj + Jtri_size[0]];
  }

  proc_control_node_power(proc_control_node_B.Jtri_data_l,
    &proc_control_node_B.Jtri_size_c, proc_control_node_B.e_data_o,
    &proc_control_node_B.e_size_j);
  proc_control_node_B.m_c = proc_control_node_B.inner + 1;
  proc_control_node_B.v_data_pn[0] = static_cast<int8_T>(*v_size - 1);
  for (proc_control_node_B.b_i_pj = 0; proc_control_node_B.b_i_pj <
       proc_control_node_B.inner; proc_control_node_B.b_i_pj++) {
    proc_control_node_B.v_data_pn[proc_control_node_B.b_i_pj + 1] =
      static_cast<int8_T>(static_cast<int32_T>
                          (proc_control_node_B.f_data[proc_control_node_B.b_i_pj])
                          - 1);
  }

  proc_control_node_B.Jtri_size_c = proc_control_node_B.inner + 1;
  for (proc_control_node_B.b_i_pj = 0; proc_control_node_B.b_i_pj <
       proc_control_node_B.m_c; proc_control_node_B.b_i_pj++) {
    proc_control_node_B.Jtri_data_l[proc_control_node_B.b_i_pj] =
      Jtri_data[proc_control_node_B.v_data_pn[proc_control_node_B.b_i_pj] +
      (Jtri_size[0] << 1)];
  }

  proc_control_node_power(proc_control_node_B.Jtri_data_l,
    &proc_control_node_B.Jtri_size_c, proc_control_node_B.f_data,
    &proc_control_node_B.e_size_j);
  proc_control_node_B.m_c = proc_control_node_B.d_size_i;
  for (proc_control_node_B.b_i_pj = 0; proc_control_node_B.b_i_pj <
       proc_control_node_B.m_c; proc_control_node_B.b_i_pj++) {
    proc_control_node_B.d_data[proc_control_node_B.b_i_pj] =
      ((proc_control_node_B.d_data[proc_control_node_B.b_i_pj] +
        proc_control_node_B.e_data_o[proc_control_node_B.b_i_pj]) +
       proc_control_node_B.f_data[proc_control_node_B.b_i_pj]) * (lambda + 1.0);
  }

  if (*v_size < 2) {
    proc_control_node_B.n_g = 0;
  } else {
    proc_control_node_B.n_g = *v_size - 1;
    proc_control_node_B.m_c = *v_size - 2;
    for (proc_control_node_B.b_i_pj = 0; proc_control_node_B.b_i_pj <=
         proc_control_node_B.m_c; proc_control_node_B.b_i_pj++) {
      proc_control_node_B.y_data_hz[proc_control_node_B.b_i_pj] =
        static_cast<real_T>(proc_control_node_B.b_i_pj) + 2.0;
    }
  }

  for (proc_control_node_B.b_i_pj = 0; proc_control_node_B.b_i_pj <
       proc_control_node_B.n_g; proc_control_node_B.b_i_pj++) {
    proc_control_node_B.v_data_pn[proc_control_node_B.b_i_pj] =
      static_cast<int8_T>(static_cast<int32_T>
                          (proc_control_node_B.y_data_hz[proc_control_node_B.b_i_pj])
                          - 1);
  }

  proc_control_node_B.v_data_pn[proc_control_node_B.n_g] = 0;
  proc_control_node_B.m_c = Jtri_size[0];
  for (proc_control_node_B.b_i_pj = 0; proc_control_node_B.b_i_pj <
       proc_control_node_B.m_c; proc_control_node_B.b_i_pj++) {
    proc_control_node_B.e_data_o[proc_control_node_B.b_i_pj] =
      Jtri_data[proc_control_node_B.b_i_pj] *
      Jtri_data[proc_control_node_B.v_data_pn[proc_control_node_B.b_i_pj] +
      Jtri_size[0]] + Jtri_data[proc_control_node_B.b_i_pj + Jtri_size[0]] *
      Jtri_data[proc_control_node_B.b_i_pj + (Jtri_size[0] << 1)];
  }

  if (*v_size < 2) {
    proc_control_node_B.n_g = 0;
  } else {
    proc_control_node_B.n_g = *v_size - 1;
    proc_control_node_B.m_c = *v_size - 2;
    for (proc_control_node_B.b_i_pj = 0; proc_control_node_B.b_i_pj <=
         proc_control_node_B.m_c; proc_control_node_B.b_i_pj++) {
      proc_control_node_B.y_data_hz[proc_control_node_B.b_i_pj] =
        static_cast<real_T>(proc_control_node_B.b_i_pj) + 2.0;
    }
  }

  for (proc_control_node_B.b_i_pj = 0; proc_control_node_B.b_i_pj <
       proc_control_node_B.n_g; proc_control_node_B.b_i_pj++) {
    proc_control_node_B.v_data_pn[proc_control_node_B.b_i_pj] =
      static_cast<int8_T>(static_cast<int32_T>
                          (proc_control_node_B.y_data_hz[proc_control_node_B.b_i_pj])
                          - 1);
  }

  proc_control_node_B.v_data_pn[proc_control_node_B.n_g] = 0;
  proc_control_node_B.m_c = Jtri_size[0];
  for (proc_control_node_B.b_i_pj = 0; proc_control_node_B.b_i_pj <
       proc_control_node_B.m_c; proc_control_node_B.b_i_pj++) {
    proc_control_node_B.f_data[proc_control_node_B.b_i_pj] =
      Jtri_data[proc_control_node_B.b_i_pj] *
      Jtri_data[proc_control_node_B.v_data_pn[proc_control_node_B.b_i_pj] +
      (Jtri_size[0] << 1)];
  }

  if (*v_size < 5) {
    if (*v_size < 1) {
      proc_control_node_B.inner = 0;
      proc_control_node_B.y_size_idx_1_d = 0;
    } else {
      proc_control_node_B.inner = *v_size;
      proc_control_node_B.m_c = *v_size - 1;
      for (proc_control_node_B.b_i_pj = 0; proc_control_node_B.b_i_pj <=
           proc_control_node_B.m_c; proc_control_node_B.b_i_pj++) {
        proc_control_node_B.f_data[proc_control_node_B.b_i_pj] =
          static_cast<real_T>(proc_control_node_B.b_i_pj) + 1.0;
      }

      proc_control_node_B.y_size_idx_1_d = *v_size;
      proc_control_node_B.m_c = *v_size - 1;
      for (proc_control_node_B.b_i_pj = 0; proc_control_node_B.b_i_pj <=
           proc_control_node_B.m_c; proc_control_node_B.b_i_pj++) {
        proc_control_node_B.Jtri_data_l[proc_control_node_B.b_i_pj] =
          static_cast<real_T>(proc_control_node_B.b_i_pj) + 1.0;
      }
    }

    if (*v_size < 2) {
      proc_control_node_B.n_g = 0;
      proc_control_node_B.y_size_idx_1_f = 0;
    } else {
      proc_control_node_B.n_g = *v_size - 1;
      proc_control_node_B.m_c = *v_size - 2;
      for (proc_control_node_B.b_i_pj = 0; proc_control_node_B.b_i_pj <=
           proc_control_node_B.m_c; proc_control_node_B.b_i_pj++) {
        proc_control_node_B.y_data_hz[proc_control_node_B.b_i_pj] =
          static_cast<real_T>(proc_control_node_B.b_i_pj) + 2.0;
      }

      proc_control_node_B.y_size_idx_1_f = *v_size - 1;
      for (proc_control_node_B.b_i_pj = 0; proc_control_node_B.b_i_pj <=
           proc_control_node_B.m_c; proc_control_node_B.b_i_pj++) {
        proc_control_node_B.y_data_b[proc_control_node_B.b_i_pj] =
          static_cast<real_T>(proc_control_node_B.b_i_pj) + 2.0;
      }
    }

    if (*v_size < 1) {
      proc_control_node_B.coffset = 0;
      proc_control_node_B.boffset = 0;
    } else {
      proc_control_node_B.coffset = *v_size;
      proc_control_node_B.m_c = *v_size - 1;
      for (proc_control_node_B.b_i_pj = 0; proc_control_node_B.b_i_pj <=
           proc_control_node_B.m_c; proc_control_node_B.b_i_pj++) {
        proc_control_node_B.d_data[proc_control_node_B.b_i_pj] =
          static_cast<real_T>(proc_control_node_B.b_i_pj) + 1.0;
      }

      proc_control_node_B.boffset = *v_size;
      proc_control_node_B.m_c = *v_size - 1;
      for (proc_control_node_B.b_i_pj = 0; proc_control_node_B.b_i_pj <=
           proc_control_node_B.m_c; proc_control_node_B.b_i_pj++) {
        proc_control_node_B.e_data_o[proc_control_node_B.b_i_pj] =
          static_cast<real_T>(proc_control_node_B.b_i_pj) + 1.0;
      }
    }

    proc_control_node_B.m_c = (proc_control_node_B.inner +
      proc_control_node_B.y_size_idx_1_d) + proc_control_node_B.n_g;
    proc_control_node_B.y_size_k[0] = proc_control_node_B.m_c + 1;
    proc_control_node_B.y_size_k[1] = 2;
    if (0 <= proc_control_node_B.inner - 1) {
      memcpy(&proc_control_node_B.y_data_c[0], &proc_control_node_B.f_data[0],
             proc_control_node_B.inner * sizeof(real_T));
    }

    for (proc_control_node_B.b_i_pj = 0; proc_control_node_B.b_i_pj <
         proc_control_node_B.y_size_idx_1_d; proc_control_node_B.b_i_pj++) {
      proc_control_node_B.y_data_c[proc_control_node_B.b_i_pj +
        proc_control_node_B.inner] =
        proc_control_node_B.Jtri_data_l[proc_control_node_B.b_i_pj];
    }

    for (proc_control_node_B.b_i_pj = 0; proc_control_node_B.b_i_pj <
         proc_control_node_B.n_g; proc_control_node_B.b_i_pj++) {
      proc_control_node_B.y_data_c[(proc_control_node_B.b_i_pj +
        proc_control_node_B.inner) + proc_control_node_B.y_size_idx_1_d] =
        proc_control_node_B.y_data_hz[proc_control_node_B.b_i_pj];
    }

    proc_control_node_B.y_data_c[proc_control_node_B.m_c] = 1.0;
    for (proc_control_node_B.b_i_pj = 0; proc_control_node_B.b_i_pj <
         proc_control_node_B.y_size_idx_1_f; proc_control_node_B.b_i_pj++) {
      proc_control_node_B.y_data_c[(proc_control_node_B.b_i_pj +
        proc_control_node_B.m_c) + 1] =
        proc_control_node_B.y_data_b[proc_control_node_B.b_i_pj];
    }

    proc_control_node_B.y_data_c[(proc_control_node_B.y_size_idx_1_f +
      proc_control_node_B.m_c) + 1] = 1.0;
    for (proc_control_node_B.b_i_pj = 0; proc_control_node_B.b_i_pj <
         proc_control_node_B.coffset; proc_control_node_B.b_i_pj++) {
      proc_control_node_B.y_data_c[((proc_control_node_B.b_i_pj +
        proc_control_node_B.y_size_idx_1_f) + proc_control_node_B.m_c) + 2] =
        proc_control_node_B.d_data[proc_control_node_B.b_i_pj];
    }

    for (proc_control_node_B.b_i_pj = 0; proc_control_node_B.b_i_pj <
         proc_control_node_B.boffset; proc_control_node_B.b_i_pj++) {
      proc_control_node_B.y_data_c[(((proc_control_node_B.b_i_pj +
        proc_control_node_B.y_size_idx_1_f) + proc_control_node_B.coffset) +
        proc_control_node_B.m_c) + 2] =
        proc_control_node_B.e_data_o[proc_control_node_B.b_i_pj];
    }

    proc_control_node_B.m_c = Jtri_size[0];
    proc_control_node_B.inner = Jtri_size[0];
    proc_control_node_B.n_g = Jtri_size[0];
    proc_control_node_B.Jtri_size_ce = (Jtri_size[0] + Jtri_size[0]) +
      Jtri_size[0];
    if (0 <= proc_control_node_B.m_c - 1) {
      memcpy(&proc_control_node_B.Jtri_data[0], &Jtri_data[0],
             proc_control_node_B.m_c * sizeof(real_T));
    }

    for (proc_control_node_B.b_i_pj = 0; proc_control_node_B.b_i_pj <
         proc_control_node_B.inner; proc_control_node_B.b_i_pj++) {
      proc_control_node_B.Jtri_data[proc_control_node_B.b_i_pj +
        proc_control_node_B.m_c] = Jtri_data[proc_control_node_B.b_i_pj +
        Jtri_size[0]];
    }

    for (proc_control_node_B.b_i_pj = 0; proc_control_node_B.b_i_pj <
         proc_control_node_B.n_g; proc_control_node_B.b_i_pj++) {
      proc_control_node_B.Jtri_data[(proc_control_node_B.b_i_pj +
        proc_control_node_B.m_c) + proc_control_node_B.inner] =
        Jtri_data[proc_control_node_B.b_i_pj + (Jtri_size[0] << 1)];
    }

    proc_control_node_B.v_dd[0] = *v_size;
    proc_control_node_B.v_dd[1] = *v_size;
    proc_control_node_accumarray_b(proc_control_node_B.y_data_c,
      proc_control_node_B.y_size_k, proc_control_node_B.Jtri_data,
      &proc_control_node_B.Jtri_size_ce, proc_control_node_B.v_dd,
      proc_control_node_B.tmp_data_h, proc_control_node_B.tmp_size_g);
    proc_control_node_B.J_size[0] = proc_control_node_B.tmp_size_g[0];
    proc_control_node_B.m_c = proc_control_node_B.tmp_size_g[0] *
      proc_control_node_B.tmp_size_g[1];
    if (0 <= proc_control_node_B.m_c - 1) {
      memcpy(&proc_control_node_B.J_data[0], &proc_control_node_B.tmp_data_h[0],
             proc_control_node_B.m_c * sizeof(real_T));
    }

    proc_control_node_B.m_c = proc_control_node_B.tmp_size_g[1] - 1;
    proc_control_node_B.inner = proc_control_node_B.tmp_size_g[0] - 1;
    proc_control_node_B.A_size_o[0] = proc_control_node_B.tmp_size_g[1];
    proc_control_node_B.A_size_o[1] = proc_control_node_B.tmp_size_g[1];
    for (proc_control_node_B.n_g = 0; proc_control_node_B.n_g <=
         proc_control_node_B.m_c; proc_control_node_B.n_g++) {
      proc_control_node_B.coffset = (proc_control_node_B.m_c + 1) *
        proc_control_node_B.n_g - 1;
      proc_control_node_B.boffset = proc_control_node_B.n_g *
        proc_control_node_B.J_size[0] - 1;
      if (0 <= proc_control_node_B.m_c) {
        memset(&proc_control_node_B.A_data_b[proc_control_node_B.coffset + 1], 0,
               (((proc_control_node_B.m_c + proc_control_node_B.coffset) -
                 proc_control_node_B.coffset) + 1) * sizeof(real_T));
      }

      for (proc_control_node_B.y_size_idx_1_d = 0;
           proc_control_node_B.y_size_idx_1_d <= proc_control_node_B.inner;
           proc_control_node_B.y_size_idx_1_d++) {
        proc_control_node_B.bkj = proc_control_node_B.J_data
          [(proc_control_node_B.boffset + proc_control_node_B.y_size_idx_1_d) +
          1];
        for (proc_control_node_B.y_size_idx_1_f = 0;
             proc_control_node_B.y_size_idx_1_f <= proc_control_node_B.m_c;
             proc_control_node_B.y_size_idx_1_f++) {
          proc_control_node_B.b_i_pj = (proc_control_node_B.coffset +
            proc_control_node_B.y_size_idx_1_f) + 1;
          proc_control_node_B.A_data_b[proc_control_node_B.b_i_pj] +=
            proc_control_node_B.J_data[proc_control_node_B.y_size_idx_1_f *
            proc_control_node_B.J_size[0] + proc_control_node_B.y_size_idx_1_d] *
            proc_control_node_B.bkj;
        }
      }
    }

    proc_control_node_diag(proc_control_node_B.A_data_b,
      proc_control_node_B.A_size_o, proc_control_node_B.tmp_data_gu,
      &proc_control_node_B.Jtri_size_c);
    proc_control_node_B.lambda_size = proc_control_node_B.Jtri_size_c;
    proc_control_node_B.m_c = proc_control_node_B.Jtri_size_c;
    for (proc_control_node_B.b_i_pj = 0; proc_control_node_B.b_i_pj <
         proc_control_node_B.m_c; proc_control_node_B.b_i_pj++) {
      proc_control_node_B.lambda_data[proc_control_node_B.b_i_pj] = lambda *
        proc_control_node_B.tmp_data_gu[proc_control_node_B.b_i_pj];
    }

    proc_control_node_diag_b(proc_control_node_B.lambda_data,
      &proc_control_node_B.lambda_size, proc_control_node_B.J_data,
      proc_control_node_B.J_size);
    proc_control_node_B.A_size_j[0] = proc_control_node_B.tmp_size_g[1];
    proc_control_node_B.A_size_j[1] = proc_control_node_B.tmp_size_g[1];
    proc_control_node_B.m_c = proc_control_node_B.tmp_size_g[1] *
      proc_control_node_B.tmp_size_g[1];
    for (proc_control_node_B.b_i_pj = 0; proc_control_node_B.b_i_pj <
         proc_control_node_B.m_c; proc_control_node_B.b_i_pj++) {
      proc_control_node_B.A_data_hj[proc_control_node_B.b_i_pj] =
        proc_control_node_B.A_data_b[proc_control_node_B.b_i_pj] +
        proc_control_node_B.J_data[proc_control_node_B.b_i_pj];
    }

    proc_control_node_mldivide_b(proc_control_node_B.A_data_hj,
      proc_control_node_B.A_size_j, v_data, v_size,
      proc_control_node_B.tmp_data_gu, &proc_control_node_B.Jtri_size_c);
    *dx_size = proc_control_node_B.Jtri_size_c;
    proc_control_node_B.m_c = proc_control_node_B.Jtri_size_c;
    if (0 <= proc_control_node_B.m_c - 1) {
      memcpy(&dx_data[0], &proc_control_node_B.tmp_data_gu[0],
             proc_control_node_B.m_c * sizeof(real_T));
    }
  } else if ((Jtri_data[Jtri_size[0] - 1] == 0.0) && (Jtri_data[(Jtri_size[0] +
               (Jtri_size[0] << 1)) - 1] == 0.0)) {
    proc_control_n_sympentdisolve_b(proc_control_node_B.d_data,
      proc_control_node_B.e_data_o, proc_control_node_B.f_data, v_data, v_size,
      dx_data, dx_size);
  } else {
    proc_control__cycsympentdisolve(proc_control_node_B.d_data,
      proc_control_node_B.e_data_o, proc_control_node_B.f_data, v_data, v_size,
      dx_data, dx_size);
  }
}

static void proc_control_node_mulJtJ(const real_T Jtri_data[], const int32_T
  Jtri_size[2], const real_T x_data[], const int32_T *x_size, real_T y_data[],
  int32_T *y_size)
{
  int32_T i;
  int32_T loop_ub;
  int32_T loop_ub_tmp;
  int32_T y_size_idx_1;
  int32_T y_size_idx_1_0;
  if (*x_size < 2) {
    y_size_idx_1_0 = 0;
  } else {
    y_size_idx_1_0 = *x_size - 1;
    loop_ub = *x_size - 2;
    for (i = 0; i <= loop_ub; i++) {
      proc_control_node_B.y_data_hnt[i] = static_cast<real_T>(i) + 2.0;
    }
  }

  if (*x_size - 1 < 1) {
    loop_ub = 0;
    y_size_idx_1 = 0;
  } else {
    loop_ub = *x_size - 1;
    loop_ub_tmp = *x_size - 2;
    for (i = 0; i <= loop_ub_tmp; i++) {
      proc_control_node_B.y_data_h[i] = static_cast<real_T>(i) + 1.0;
    }

    y_size_idx_1 = *x_size - 1;
    for (i = 0; i <= loop_ub_tmp; i++) {
      proc_control_node_B.y_data_eg[i] = static_cast<real_T>(i) + 1.0;
    }
  }

  for (i = 0; i < y_size_idx_1_0; i++) {
    proc_control_node_B.y_data_hl[i] = static_cast<int8_T>(static_cast<int32_T>
      (proc_control_node_B.y_data_hnt[i]) - 1);
  }

  proc_control_node_B.y_data_hl[y_size_idx_1_0] = 0;
  proc_control_node_B.x_data_mv[0] = static_cast<int8_T>(*x_size - 1);
  for (i = 0; i < loop_ub; i++) {
    proc_control_node_B.x_data_mv[i + 1] = static_cast<int8_T>
      (static_cast<int32_T>(proc_control_node_B.y_data_h[i]) - 1);
  }

  proc_control_node_B.x_data_f5[0] = static_cast<int8_T>(*x_size - 1);
  for (i = 0; i < y_size_idx_1; i++) {
    proc_control_node_B.x_data_f5[i + 1] = static_cast<int8_T>
      (static_cast<int32_T>(proc_control_node_B.y_data_eg[i]) - 1);
  }

  loop_ub = Jtri_size[0];
  for (i = 0; i < loop_ub; i++) {
    proc_control_node_B.z_data_bn[i] = (Jtri_data[i + Jtri_size[0]] * x_data[i]
      + Jtri_data[i + (Jtri_size[0] << 1)] *
      x_data[proc_control_node_B.y_data_hl[i]]) +
      Jtri_data[proc_control_node_B.x_data_mv[i]] *
      x_data[proc_control_node_B.x_data_f5[i]];
  }

  if (*x_size < 2) {
    y_size_idx_1_0 = 0;
  } else {
    y_size_idx_1_0 = *x_size - 1;
    loop_ub = *x_size - 2;
    for (i = 0; i <= loop_ub; i++) {
      proc_control_node_B.y_data_hnt[i] = static_cast<real_T>(i) + 2.0;
    }
  }

  if (*x_size - 1 < 1) {
    loop_ub = 0;
    y_size_idx_1 = 0;
  } else {
    loop_ub = *x_size - 1;
    loop_ub_tmp = *x_size - 2;
    for (i = 0; i <= loop_ub_tmp; i++) {
      proc_control_node_B.y_data_h[i] = static_cast<real_T>(i) + 1.0;
    }

    y_size_idx_1 = *x_size - 1;
    for (i = 0; i <= loop_ub_tmp; i++) {
      proc_control_node_B.y_data_eg[i] = static_cast<real_T>(i) + 1.0;
    }
  }

  for (i = 0; i < y_size_idx_1_0; i++) {
    proc_control_node_B.y_data_hl[i] = static_cast<int8_T>(static_cast<int32_T>
      (proc_control_node_B.y_data_hnt[i]) - 1);
  }

  proc_control_node_B.y_data_hl[y_size_idx_1_0] = 0;
  proc_control_node_B.x_data_mv[0] = static_cast<int8_T>(*x_size - 1);
  for (i = 0; i < loop_ub; i++) {
    proc_control_node_B.x_data_mv[i + 1] = static_cast<int8_T>
      (static_cast<int32_T>(proc_control_node_B.y_data_h[i]) - 1);
  }

  proc_control_node_B.x_data_f5[0] = static_cast<int8_T>(*x_size - 1);
  for (i = 0; i < y_size_idx_1; i++) {
    proc_control_node_B.x_data_f5[i + 1] = static_cast<int8_T>
      (static_cast<int32_T>(proc_control_node_B.y_data_eg[i]) - 1);
  }

  loop_ub = Jtri_size[0];
  *y_size = Jtri_size[0];
  for (i = 0; i < loop_ub; i++) {
    y_data[i] = (Jtri_data[i + Jtri_size[0]] * proc_control_node_B.z_data_bn[i]
                 + Jtri_data[i] *
                 proc_control_node_B.z_data_bn[proc_control_node_B.y_data_hl[i]])
      + Jtri_data[proc_control_node_B.x_data_mv[i] + (Jtri_size[0] << 1)] *
      proc_control_node_B.z_data_bn[proc_control_node_B.x_data_f5[i]];
  }
}

static real_T proc_control_node_norm(const real_T x_data[], const int32_T
  *x_size)
{
  real_T absxk;
  real_T scale;
  real_T t;
  real_T y;
  int32_T b_k;
  int32_T kend;
  y = 0.0;
  if (*x_size == 1) {
    y = fabs(x_data[0]);
  } else {
    scale = 3.3121686421112381E-170;
    kend = *x_size - 1;
    for (b_k = 0; b_k <= kend; b_k++) {
      absxk = fabs(x_data[b_k]);
      if (absxk > scale) {
        t = scale / absxk;
        y = y * t * t + 1.0;
        scale = absxk;
      } else {
        t = absxk / scale;
        y += t * t;
      }
    }

    y = scale * sqrt(y);
  }

  return y;
}

static void proc_control_node_tridisolve(const real_T a_data[], real_T b_data[],
  const real_T c_data[], const real_T d_data[], const int32_T *d_size, real_T
  x_data[], int32_T *x_size)
{
  int32_T b_j;
  int32_T j;
  int32_T loop_ub;
  *x_size = *d_size;
  if (0 <= *d_size - 1) {
    memcpy(&x_data[0], &d_data[0], *d_size * sizeof(real_T));
  }

  loop_ub = *d_size - 2;
  for (b_j = 0; b_j <= loop_ub; b_j++) {
    proc_control_node_B.mu = a_data[b_j] / b_data[b_j];
    b_data[b_j + 1] -= proc_control_node_B.mu * c_data[b_j];
    x_data[b_j + 1] -= proc_control_node_B.mu * x_data[b_j];
  }

  x_data[*d_size - 1] /= b_data[*d_size - 1];
  loop_ub = static_cast<int32_T>(((-1.0 - (static_cast<real_T>(*d_size) - 1.0))
    + 1.0) / -1.0) - 1;
  for (b_j = 0; b_j <= loop_ub; b_j++) {
    j = (*d_size - b_j) - 1;
    x_data[j - 1] = (x_data[j - 1] - c_data[j - 1] * x_data[j]) / b_data[j - 1];
  }
}

static void proc_control_no_cyctridisolve_b(const real_T a_data[], real_T
  b_data[], const int32_T *b_size, const real_T c_data[], const real_T d_data[],
  const int32_T *d_size, real_T x_data[], int32_T *x_size)
{
  int32_T loop_ub_tmp;
  proc_control_node_B.b_gamma_b = -b_data[0];
  b_data[0] -= -b_data[0];
  proc_control_node_B.d3 = c_data[*d_size - 1];
  proc_control_node_B.d4 = a_data[*d_size - 1];
  b_data[*d_size - 1] -= proc_control_node_B.d4 * proc_control_node_B.d3 /
    proc_control_node_B.b_gamma_b;
  loop_ub_tmp = *b_size - 1;
  if (0 <= loop_ub_tmp) {
    memcpy(&proc_control_node_B.b_data_a[0], &b_data[0], (loop_ub_tmp + 1) *
           sizeof(real_T));
  }

  proc_control_node_tridisolve(a_data, proc_control_node_B.b_data_a, c_data,
    d_data, d_size, x_data, x_size);
  proc_control_node_B.u_size_b = *d_size;
  proc_control_node_B.loop_ub_mz = *d_size;
  if (0 <= proc_control_node_B.loop_ub_mz - 1) {
    memset(&proc_control_node_B.u_data_n[0], 0, proc_control_node_B.loop_ub_mz *
           sizeof(real_T));
  }

  proc_control_node_B.u_data_n[0] = proc_control_node_B.b_gamma_b;
  proc_control_node_B.u_data_n[*d_size - 1] = proc_control_node_B.d3;
  if (2 > *d_size - 1) {
    proc_control_node_B.loop_ub_mz = 0;
    proc_control_node_B.f_n = 0;
  } else {
    proc_control_node_B.loop_ub_mz = 1;
    proc_control_node_B.f_n = *d_size - 1;
  }

  proc_control_node_B.f_n -= proc_control_node_B.loop_ub_mz;
  if (0 <= proc_control_node_B.f_n - 1) {
    memset(&proc_control_node_B.u_data_n[proc_control_node_B.loop_ub_mz], 0,
           ((proc_control_node_B.f_n + proc_control_node_B.loop_ub_mz) -
            proc_control_node_B.loop_ub_mz) * sizeof(real_T));
  }

  if (0 <= loop_ub_tmp) {
    memcpy(&proc_control_node_B.b_data_a[0], &b_data[0], (loop_ub_tmp + 1) *
           sizeof(real_T));
  }

  proc_control_node_tridisolve(a_data, proc_control_node_B.b_data_a, c_data,
    proc_control_node_B.u_data_n, &proc_control_node_B.u_size_b,
    proc_control_node_B.z_data_k, &loop_ub_tmp);
  proc_control_node_B.b_gamma_b = (proc_control_node_B.d4 * x_data[*d_size - 1] /
    proc_control_node_B.b_gamma_b + x_data[0]) / (proc_control_node_B.d4 *
    proc_control_node_B.z_data_k[*d_size - 1] / proc_control_node_B.b_gamma_b +
    (proc_control_node_B.z_data_k[0] + 1.0));
  proc_control_node_B.loop_ub_mz = *x_size;
  for (proc_control_node_B.f_n = 0; proc_control_node_B.f_n <
       proc_control_node_B.loop_ub_mz; proc_control_node_B.f_n++) {
    x_data[proc_control_node_B.f_n] -= proc_control_node_B.b_gamma_b *
      proc_control_node_B.z_data_k[proc_control_node_B.f_n];
  }
}

static void proc_control_nod_solveHessian_b(const real_T Jtri_data[], const
  int32_T Jtri_size[2], const real_T v_data[], const int32_T *v_size, real_T
  dx_data[], int32_T *dx_size)
{
  if ((Jtri_data[Jtri_size[0] - 1] == 0.0) && (Jtri_data[(Jtri_size[0] +
        (Jtri_size[0] << 1)) - 1] == 0.0)) {
    proc_control_node_B.loop_ub_e = Jtri_size[0];
    for (proc_control_node_B.i11 = 0; proc_control_node_B.i11 <
         proc_control_node_B.loop_ub_e; proc_control_node_B.i11++) {
      proc_control_node_B.Jtri_data_d[proc_control_node_B.i11] =
        Jtri_data[proc_control_node_B.i11 + (Jtri_size[0] << 1)];
    }

    proc_control_node_B.loop_ub_e = Jtri_size[0];
    for (proc_control_node_B.i11 = 0; proc_control_node_B.i11 <
         proc_control_node_B.loop_ub_e; proc_control_node_B.i11++) {
      proc_control_node_B.Jtri_data_dv[proc_control_node_B.i11] =
        Jtri_data[proc_control_node_B.i11 + Jtri_size[0]];
    }

    proc_control_node_B.loop_ub_e = Jtri_size[0];
    if (0 <= proc_control_node_B.loop_ub_e - 1) {
      memcpy(&proc_control_node_B.Jtri_data_j[0], &Jtri_data[0],
             proc_control_node_B.loop_ub_e * sizeof(real_T));
    }

    proc_control_node_B.loop_ub_e = Jtri_size[0];
    if (0 <= proc_control_node_B.loop_ub_e - 1) {
      memcpy(&proc_control_node_B.Jtri_data_f[0], &Jtri_data[0],
             proc_control_node_B.loop_ub_e * sizeof(real_T));
    }

    proc_control_node_B.loop_ub_e = Jtri_size[0];
    for (proc_control_node_B.i11 = 0; proc_control_node_B.i11 <
         proc_control_node_B.loop_ub_e; proc_control_node_B.i11++) {
      proc_control_node_B.Jtri_data_js[proc_control_node_B.i11] =
        Jtri_data[proc_control_node_B.i11 + Jtri_size[0]];
    }

    proc_control_node_B.loop_ub_e = Jtri_size[0];
    for (proc_control_node_B.i11 = 0; proc_control_node_B.i11 <
         proc_control_node_B.loop_ub_e; proc_control_node_B.i11++) {
      proc_control_node_B.Jtri_data_h[proc_control_node_B.i11] =
        Jtri_data[proc_control_node_B.i11 + (Jtri_size[0] << 1)];
    }

    proc_control_node_tridisolve(proc_control_node_B.Jtri_data_d,
      proc_control_node_B.Jtri_data_dv, proc_control_node_B.Jtri_data_j, v_data,
      v_size, proc_control_node_B.tmp_data_cf, &proc_control_node_B.tmp_size_ei);
    proc_control_node_tridisolve(proc_control_node_B.Jtri_data_f,
      proc_control_node_B.Jtri_data_js, proc_control_node_B.Jtri_data_h,
      proc_control_node_B.tmp_data_cf, &proc_control_node_B.tmp_size_ei, dx_data,
      dx_size);
  } else {
    proc_control_node_B.loop_ub_e = Jtri_size[0];
    for (proc_control_node_B.i11 = 0; proc_control_node_B.i11 <
         proc_control_node_B.loop_ub_e; proc_control_node_B.i11++) {
      proc_control_node_B.Jtri_data_d[proc_control_node_B.i11] =
        Jtri_data[proc_control_node_B.i11 + (Jtri_size[0] << 1)];
    }

    proc_control_node_B.loop_ub_e = Jtri_size[0];
    proc_control_node_B.Jtri_size_g = Jtri_size[0];
    for (proc_control_node_B.i11 = 0; proc_control_node_B.i11 <
         proc_control_node_B.loop_ub_e; proc_control_node_B.i11++) {
      proc_control_node_B.Jtri_data_dv[proc_control_node_B.i11] =
        Jtri_data[proc_control_node_B.i11 + Jtri_size[0]];
    }

    proc_control_node_B.loop_ub_e = Jtri_size[0];
    if (0 <= proc_control_node_B.loop_ub_e - 1) {
      memcpy(&proc_control_node_B.Jtri_data_j[0], &Jtri_data[0],
             proc_control_node_B.loop_ub_e * sizeof(real_T));
    }

    proc_control_node_B.loop_ub_e = Jtri_size[0];
    if (0 <= proc_control_node_B.loop_ub_e - 1) {
      memcpy(&proc_control_node_B.Jtri_data_f[0], &Jtri_data[0],
             proc_control_node_B.loop_ub_e * sizeof(real_T));
    }

    proc_control_node_B.loop_ub_e = Jtri_size[0];
    proc_control_node_B.Jtri_size_f = Jtri_size[0];
    for (proc_control_node_B.i11 = 0; proc_control_node_B.i11 <
         proc_control_node_B.loop_ub_e; proc_control_node_B.i11++) {
      proc_control_node_B.Jtri_data_js[proc_control_node_B.i11] =
        Jtri_data[proc_control_node_B.i11 + Jtri_size[0]];
    }

    proc_control_node_B.loop_ub_e = Jtri_size[0];
    for (proc_control_node_B.i11 = 0; proc_control_node_B.i11 <
         proc_control_node_B.loop_ub_e; proc_control_node_B.i11++) {
      proc_control_node_B.Jtri_data_h[proc_control_node_B.i11] =
        Jtri_data[proc_control_node_B.i11 + (Jtri_size[0] << 1)];
    }

    proc_control_no_cyctridisolve_b(proc_control_node_B.Jtri_data_d,
      proc_control_node_B.Jtri_data_dv, &proc_control_node_B.Jtri_size_g,
      proc_control_node_B.Jtri_data_j, v_data, v_size,
      proc_control_node_B.tmp_data_cf, &proc_control_node_B.tmp_size_ei);
    proc_control_no_cyctridisolve_b(proc_control_node_B.Jtri_data_f,
      proc_control_node_B.Jtri_data_js, &proc_control_node_B.Jtri_size_f,
      proc_control_node_B.Jtri_data_h, proc_control_node_B.tmp_data_cf,
      &proc_control_node_B.tmp_size_ei, dx_data, dx_size);
  }
}

static void proc_control_node_xzggbal_b(const creal_T A_data[], const int32_T
  A_size[2], creal_T b_A_data[], int32_T b_A_size[2], int32_T *ilo, int32_T *ihi,
  int32_T rscale_data[], int32_T *rscale_size)
{
  int32_T atmp_re_tmp;
  int32_T atmp_re_tmp_tmp;
  int32_T b_A;
  int32_T c_A_size_idx_1;
  int32_T exitg1;
  int32_T exitg2;
  boolean_T exitg3;
  boolean_T exitg4;
  boolean_T found;
  b_A_size[0] = A_size[0];
  b_A_size[1] = A_size[1];
  proc_control_node_B.ii_a = A_size[0] * A_size[1];
  if (0 <= proc_control_node_B.ii_a - 1) {
    memcpy(&b_A_data[0], &A_data[0], proc_control_node_B.ii_a * sizeof(creal_T));
  }

  *rscale_size = A_size[0];
  proc_control_node_B.ii_a = A_size[0];
  for (proc_control_node_B.nzcount = 0; proc_control_node_B.nzcount <
       proc_control_node_B.ii_a; proc_control_node_B.nzcount++) {
    rscale_data[proc_control_node_B.nzcount] = 1;
  }

  *ilo = 1;
  *ihi = A_size[0];
  if (A_size[0] <= 1) {
    *ihi = 1;
  } else {
    do {
      exitg2 = 0;
      proc_control_node_B.b_A_e = -1;
      proc_control_node_B.j_h = 0;
      found = false;
      proc_control_node_B.ii_a = *ihi;
      exitg3 = false;
      while ((!exitg3) && (proc_control_node_B.ii_a > 0)) {
        proc_control_node_B.nzcount = 0;
        proc_control_node_B.b_A_e = proc_control_node_B.ii_a - 1;
        proc_control_node_B.j_h = *ihi;
        b_A = 1;
        exitg4 = false;
        while ((!exitg4) && (b_A - 1 <= *ihi - 1)) {
          atmp_re_tmp = (proc_control_node_B.ii_a + b_A_size[0] * (b_A - 1)) - 1;
          if ((b_A_data[atmp_re_tmp].re != 0.0) || (b_A_data[atmp_re_tmp].im !=
               0.0) || (proc_control_node_B.ii_a == b_A)) {
            if (proc_control_node_B.nzcount == 0) {
              proc_control_node_B.j_h = b_A;
              proc_control_node_B.nzcount = 1;
              b_A++;
            } else {
              proc_control_node_B.nzcount = 2;
              exitg4 = true;
            }
          } else {
            b_A++;
          }
        }

        if (proc_control_node_B.nzcount < 2) {
          found = true;
          exitg3 = true;
        } else {
          proc_control_node_B.ii_a--;
        }
      }

      if (!found) {
        exitg2 = 2;
      } else {
        b_A = b_A_size[0];
        c_A_size_idx_1 = b_A_size[1];
        proc_control_node_B.ii_a = b_A_size[0] * b_A_size[1];
        if (0 <= proc_control_node_B.ii_a - 1) {
          memcpy(&proc_control_node_B.c_A_data[0], &b_A_data[0],
                 proc_control_node_B.ii_a * sizeof(creal_T));
        }

        proc_control_node_B.ii_a = b_A_size[0];
        if (proc_control_node_B.b_A_e + 1 != *ihi) {
          for (proc_control_node_B.nzcount = 1; proc_control_node_B.nzcount <=
               proc_control_node_B.ii_a; proc_control_node_B.nzcount++) {
            atmp_re_tmp_tmp = b_A * (proc_control_node_B.nzcount - 1);
            atmp_re_tmp = proc_control_node_B.b_A_e + atmp_re_tmp_tmp;
            proc_control_node_B.atmp_re =
              proc_control_node_B.c_A_data[atmp_re_tmp].re;
            proc_control_node_B.atmp_im =
              proc_control_node_B.c_A_data[atmp_re_tmp].im;
            proc_control_node_B.c_A_data[atmp_re_tmp] =
              proc_control_node_B.c_A_data[(*ihi + atmp_re_tmp_tmp) - 1];
            proc_control_node_B.c_A_data[(*ihi + b_A *
              (proc_control_node_B.nzcount - 1)) - 1].re =
              proc_control_node_B.atmp_re;
            proc_control_node_B.c_A_data[(*ihi + b_A *
              (proc_control_node_B.nzcount - 1)) - 1].im =
              proc_control_node_B.atmp_im;
          }
        }

        if (proc_control_node_B.j_h != *ihi) {
          for (proc_control_node_B.b_A_e = 0; proc_control_node_B.b_A_e < *ihi;
               proc_control_node_B.b_A_e++) {
            atmp_re_tmp = proc_control_node_B.b_A_e + b_A *
              (proc_control_node_B.j_h - 1);
            proc_control_node_B.atmp_re =
              proc_control_node_B.c_A_data[atmp_re_tmp].re;
            proc_control_node_B.atmp_im =
              proc_control_node_B.c_A_data[atmp_re_tmp].im;
            atmp_re_tmp_tmp = b_A * (*ihi - 1);
            proc_control_node_B.c_A_data[atmp_re_tmp] =
              proc_control_node_B.c_A_data[proc_control_node_B.b_A_e +
              atmp_re_tmp_tmp];
            atmp_re_tmp = proc_control_node_B.b_A_e + atmp_re_tmp_tmp;
            proc_control_node_B.c_A_data[atmp_re_tmp].re =
              proc_control_node_B.atmp_re;
            proc_control_node_B.c_A_data[atmp_re_tmp].im =
              proc_control_node_B.atmp_im;
          }
        }

        proc_control_node_B.ii_a = b_A * c_A_size_idx_1;
        if (0 <= proc_control_node_B.ii_a - 1) {
          memcpy(&b_A_data[0], &proc_control_node_B.c_A_data[0],
                 proc_control_node_B.ii_a * sizeof(creal_T));
        }

        rscale_data[*ihi - 1] = proc_control_node_B.j_h;
        (*ihi)--;
        if (*ihi == 1) {
          rscale_data[0] = 1;
          exitg2 = 1;
        }
      }
    } while (exitg2 == 0);

    if (exitg2 == 1) {
    } else {
      do {
        exitg1 = 0;
        proc_control_node_B.b_A_e = 0;
        proc_control_node_B.j_h = 0;
        found = false;
        b_A = *ilo;
        exitg3 = false;
        while ((!exitg3) && (b_A <= *ihi)) {
          proc_control_node_B.nzcount = 0;
          proc_control_node_B.b_A_e = *ihi;
          proc_control_node_B.j_h = b_A;
          proc_control_node_B.ii_a = *ilo;
          exitg4 = false;
          while ((!exitg4) && (proc_control_node_B.ii_a <= *ihi)) {
            atmp_re_tmp = (proc_control_node_B.ii_a + b_A_size[0] * (b_A - 1)) -
              1;
            if ((b_A_data[atmp_re_tmp].re != 0.0) || (b_A_data[atmp_re_tmp].im
                 != 0.0) || (proc_control_node_B.ii_a == b_A)) {
              if (proc_control_node_B.nzcount == 0) {
                proc_control_node_B.b_A_e = proc_control_node_B.ii_a;
                proc_control_node_B.nzcount = 1;
                proc_control_node_B.ii_a++;
              } else {
                proc_control_node_B.nzcount = 2;
                exitg4 = true;
              }
            } else {
              proc_control_node_B.ii_a++;
            }
          }

          if (proc_control_node_B.nzcount < 2) {
            found = true;
            exitg3 = true;
          } else {
            b_A++;
          }
        }

        if (!found) {
          exitg1 = 1;
        } else {
          b_A = b_A_size[0];
          c_A_size_idx_1 = b_A_size[1];
          proc_control_node_B.nzcount = b_A_size[0] * b_A_size[1];
          if (0 <= proc_control_node_B.nzcount - 1) {
            memcpy(&proc_control_node_B.c_A_data[0], &b_A_data[0],
                   proc_control_node_B.nzcount * sizeof(creal_T));
          }

          proc_control_node_B.ii_a = b_A_size[0];
          if (proc_control_node_B.b_A_e != *ilo) {
            for (proc_control_node_B.nzcount = *ilo; proc_control_node_B.nzcount
                 <= proc_control_node_B.ii_a; proc_control_node_B.nzcount++) {
              atmp_re_tmp_tmp = b_A * (proc_control_node_B.nzcount - 1);
              atmp_re_tmp = (proc_control_node_B.b_A_e + atmp_re_tmp_tmp) - 1;
              proc_control_node_B.atmp_re =
                proc_control_node_B.c_A_data[atmp_re_tmp].re;
              proc_control_node_B.atmp_im =
                proc_control_node_B.c_A_data[atmp_re_tmp].im;
              atmp_re_tmp_tmp = (*ilo + atmp_re_tmp_tmp) - 1;
              proc_control_node_B.c_A_data[atmp_re_tmp] =
                proc_control_node_B.c_A_data[atmp_re_tmp_tmp];
              proc_control_node_B.c_A_data[atmp_re_tmp_tmp].re =
                proc_control_node_B.atmp_re;
              proc_control_node_B.c_A_data[atmp_re_tmp_tmp].im =
                proc_control_node_B.atmp_im;
            }
          }

          if (proc_control_node_B.j_h != *ilo) {
            for (proc_control_node_B.b_A_e = 0; proc_control_node_B.b_A_e < *ihi;
                 proc_control_node_B.b_A_e++) {
              atmp_re_tmp = proc_control_node_B.b_A_e + b_A *
                (proc_control_node_B.j_h - 1);
              proc_control_node_B.atmp_re =
                proc_control_node_B.c_A_data[atmp_re_tmp].re;
              proc_control_node_B.atmp_im =
                proc_control_node_B.c_A_data[atmp_re_tmp].im;
              atmp_re_tmp_tmp = b_A * (*ilo - 1);
              proc_control_node_B.c_A_data[atmp_re_tmp] =
                proc_control_node_B.c_A_data[proc_control_node_B.b_A_e +
                atmp_re_tmp_tmp];
              atmp_re_tmp = proc_control_node_B.b_A_e + atmp_re_tmp_tmp;
              proc_control_node_B.c_A_data[atmp_re_tmp].re =
                proc_control_node_B.atmp_re;
              proc_control_node_B.c_A_data[atmp_re_tmp].im =
                proc_control_node_B.atmp_im;
            }
          }

          atmp_re_tmp = b_A * c_A_size_idx_1;
          if (0 <= atmp_re_tmp - 1) {
            memcpy(&b_A_data[0], &proc_control_node_B.c_A_data[0], atmp_re_tmp *
                   sizeof(creal_T));
          }

          rscale_data[*ilo - 1] = proc_control_node_B.j_h;
          (*ilo)++;
          if (*ilo == *ihi) {
            rscale_data[*ilo - 1] = *ilo;
            exitg1 = 1;
          }
        }
      } while (exitg1 == 0);
    }
  }
}

static void proc_control_node_xzlartg(const creal_T f, const creal_T g, real_T
  *cs, creal_T *sn, creal_T *r)
{
  int32_T count;
  int32_T rescaledir;
  boolean_T guard1 = false;
  proc_control_node_B.f2s = fabs(f.re);
  proc_control_node_B.di = fabs(f.im);
  proc_control_node_B.scale_bt = proc_control_node_B.f2s;
  if (proc_control_node_B.di > proc_control_node_B.f2s) {
    proc_control_node_B.scale_bt = proc_control_node_B.di;
  }

  proc_control_node_B.gs_re = fabs(g.re);
  proc_control_node_B.gs_im = fabs(g.im);
  if (proc_control_node_B.gs_im > proc_control_node_B.gs_re) {
    proc_control_node_B.gs_re = proc_control_node_B.gs_im;
  }

  if (proc_control_node_B.gs_re > proc_control_node_B.scale_bt) {
    proc_control_node_B.scale_bt = proc_control_node_B.gs_re;
  }

  proc_control_node_B.fs_re = f.re;
  proc_control_node_B.fs_im = f.im;
  proc_control_node_B.gs_re = g.re;
  proc_control_node_B.gs_im = g.im;
  count = -1;
  rescaledir = 0;
  guard1 = false;
  if (proc_control_node_B.scale_bt >= 7.4428285367870146E+137) {
    do {
      count++;
      proc_control_node_B.fs_re *= 1.3435752215134178E-138;
      proc_control_node_B.fs_im *= 1.3435752215134178E-138;
      proc_control_node_B.gs_re *= 1.3435752215134178E-138;
      proc_control_node_B.gs_im *= 1.3435752215134178E-138;
      proc_control_node_B.scale_bt *= 1.3435752215134178E-138;
    } while (!(proc_control_node_B.scale_bt < 7.4428285367870146E+137));

    rescaledir = 1;
    guard1 = true;
  } else if (proc_control_node_B.scale_bt <= 1.3435752215134178E-138) {
    if ((g.re == 0.0) && (g.im == 0.0)) {
      *cs = 1.0;
      sn->re = 0.0;
      sn->im = 0.0;
      *r = f;
    } else {
      do {
        count++;
        proc_control_node_B.fs_re *= 7.4428285367870146E+137;
        proc_control_node_B.fs_im *= 7.4428285367870146E+137;
        proc_control_node_B.gs_re *= 7.4428285367870146E+137;
        proc_control_node_B.gs_im *= 7.4428285367870146E+137;
        proc_control_node_B.scale_bt *= 7.4428285367870146E+137;
      } while (!(proc_control_node_B.scale_bt > 1.3435752215134178E-138));

      rescaledir = -1;
      guard1 = true;
    }
  } else {
    guard1 = true;
  }

  if (guard1) {
    proc_control_node_B.scale_bt = proc_control_node_B.fs_re *
      proc_control_node_B.fs_re + proc_control_node_B.fs_im *
      proc_control_node_B.fs_im;
    proc_control_node_B.g2 = proc_control_node_B.gs_re *
      proc_control_node_B.gs_re + proc_control_node_B.gs_im *
      proc_control_node_B.gs_im;
    proc_control_node_B.b_x_o = proc_control_node_B.g2;
    if (1.0 > proc_control_node_B.g2) {
      proc_control_node_B.b_x_o = 1.0;
    }

    if (proc_control_node_B.scale_bt <= proc_control_node_B.b_x_o *
        2.0041683600089728E-292) {
      if ((f.re == 0.0) && (f.im == 0.0)) {
        *cs = 0.0;
        r->re = proc_control_node_rt_hypotd_snf(g.re, g.im);
        r->im = 0.0;
        proc_control_node_B.f2s = proc_control_node_rt_hypotd_snf
          (proc_control_node_B.gs_re, proc_control_node_B.gs_im);
        sn->re = proc_control_node_B.gs_re / proc_control_node_B.f2s;
        sn->im = -proc_control_node_B.gs_im / proc_control_node_B.f2s;
      } else {
        proc_control_node_B.scale_bt = sqrt(proc_control_node_B.g2);
        *cs = proc_control_node_rt_hypotd_snf(proc_control_node_B.fs_re,
          proc_control_node_B.fs_im) / proc_control_node_B.scale_bt;
        if (proc_control_node_B.di > proc_control_node_B.f2s) {
          proc_control_node_B.f2s = proc_control_node_B.di;
        }

        if (proc_control_node_B.f2s > 1.0) {
          proc_control_node_B.f2s = proc_control_node_rt_hypotd_snf(f.re, f.im);
          proc_control_node_B.fs_re = f.re / proc_control_node_B.f2s;
          proc_control_node_B.fs_im = f.im / proc_control_node_B.f2s;
        } else {
          proc_control_node_B.fs_re = 7.4428285367870146E+137 * f.re;
          proc_control_node_B.di = 7.4428285367870146E+137 * f.im;
          proc_control_node_B.f2s = proc_control_node_rt_hypotd_snf
            (proc_control_node_B.fs_re, proc_control_node_B.di);
          proc_control_node_B.fs_re /= proc_control_node_B.f2s;
          proc_control_node_B.fs_im = proc_control_node_B.di /
            proc_control_node_B.f2s;
        }

        proc_control_node_B.gs_re /= proc_control_node_B.scale_bt;
        proc_control_node_B.gs_im = -proc_control_node_B.gs_im /
          proc_control_node_B.scale_bt;
        sn->re = proc_control_node_B.fs_re * proc_control_node_B.gs_re -
          proc_control_node_B.fs_im * proc_control_node_B.gs_im;
        sn->im = proc_control_node_B.fs_re * proc_control_node_B.gs_im +
          proc_control_node_B.fs_im * proc_control_node_B.gs_re;
        r->re = (sn->re * g.re - sn->im * g.im) + *cs * f.re;
        r->im = (sn->re * g.im + sn->im * g.re) + *cs * f.im;
      }
    } else {
      proc_control_node_B.f2s = sqrt(proc_control_node_B.g2 /
        proc_control_node_B.scale_bt + 1.0);
      r->re = proc_control_node_B.f2s * proc_control_node_B.fs_re;
      r->im = proc_control_node_B.f2s * proc_control_node_B.fs_im;
      *cs = 1.0 / proc_control_node_B.f2s;
      proc_control_node_B.f2s = proc_control_node_B.scale_bt +
        proc_control_node_B.g2;
      proc_control_node_B.fs_re = r->re / proc_control_node_B.f2s;
      proc_control_node_B.f2s = r->im / proc_control_node_B.f2s;
      sn->re = proc_control_node_B.fs_re * proc_control_node_B.gs_re -
        proc_control_node_B.f2s * -proc_control_node_B.gs_im;
      sn->im = proc_control_node_B.fs_re * -proc_control_node_B.gs_im +
        proc_control_node_B.f2s * proc_control_node_B.gs_re;
      if (rescaledir > 0) {
        for (rescaledir = 0; rescaledir <= count; rescaledir++) {
          r->re *= 7.4428285367870146E+137;
          r->im *= 7.4428285367870146E+137;
        }
      } else if (rescaledir < 0) {
        for (rescaledir = 0; rescaledir <= count; rescaledir++) {
          r->re *= 1.3435752215134178E-138;
          r->im *= 1.3435752215134178E-138;
        }
      }
    }
  }
}

static void proc_control_node_xzgghrd_b(int32_T ilo, int32_T ihi, const creal_T
  A_data[], const int32_T A_size[2], creal_T b_A_data[], int32_T b_A_size[2])
{
  int32_T j;
  int32_T stemp_re_tmp;
  int32_T stemp_re_tmp_tmp;
  b_A_size[0] = A_size[0];
  b_A_size[1] = A_size[1];
  proc_control_node_B.n_d = A_size[0] * A_size[1];
  if (0 <= proc_control_node_B.n_d - 1) {
    memcpy(&b_A_data[0], &A_data[0], proc_control_node_B.n_d * sizeof(creal_T));
  }

  proc_control_node_B.n_d = A_size[0];
  if ((A_size[0] <= 1) || (ihi < ilo + 2)) {
  } else {
    proc_control_node_B.jcol = ilo - 1;
    while (proc_control_node_B.jcol + 1 < ihi - 1) {
      proc_control_node_B.jrow = ihi - 2;
      while (proc_control_node_B.jrow + 2 > proc_control_node_B.jcol + 2) {
        proc_control_node_xzlartg(b_A_data[proc_control_node_B.jrow + b_A_size[0]
          * proc_control_node_B.jcol], b_A_data[(proc_control_node_B.jrow +
          b_A_size[0] * proc_control_node_B.jcol) + 1],
          &proc_control_node_B.c_kp, &proc_control_node_B.s_l,
          &b_A_data[proc_control_node_B.jrow + b_A_size[0] *
          proc_control_node_B.jcol]);
        j = (proc_control_node_B.jrow + b_A_size[0] * proc_control_node_B.jcol)
          + 1;
        b_A_data[j].re = 0.0;
        b_A_data[j].im = 0.0;
        for (j = proc_control_node_B.jcol + 2; j <= proc_control_node_B.n_d; j++)
        {
          stemp_re_tmp_tmp = b_A_size[0] * (j - 1);
          stemp_re_tmp = (proc_control_node_B.jrow + stemp_re_tmp_tmp) + 1;
          stemp_re_tmp_tmp += proc_control_node_B.jrow;
          proc_control_node_B.stemp_re = (b_A_data[stemp_re_tmp].re *
            proc_control_node_B.s_l.re - b_A_data[stemp_re_tmp].im *
            proc_control_node_B.s_l.im) + b_A_data[stemp_re_tmp_tmp].re *
            proc_control_node_B.c_kp;
          proc_control_node_B.stemp_im = (b_A_data[stemp_re_tmp].im *
            proc_control_node_B.s_l.re + b_A_data[stemp_re_tmp].re *
            proc_control_node_B.s_l.im) + b_A_data[stemp_re_tmp_tmp].im *
            proc_control_node_B.c_kp;
          proc_control_node_B.d6 = b_A_data[stemp_re_tmp_tmp].re;
          b_A_data[stemp_re_tmp].re = b_A_data[stemp_re_tmp].re *
            proc_control_node_B.c_kp - (b_A_data[stemp_re_tmp_tmp].re *
            proc_control_node_B.s_l.re + b_A_data[stemp_re_tmp_tmp].im *
            proc_control_node_B.s_l.im);
          b_A_data[stemp_re_tmp].im = b_A_data[stemp_re_tmp].im *
            proc_control_node_B.c_kp - (b_A_data[stemp_re_tmp_tmp].im *
            proc_control_node_B.s_l.re - proc_control_node_B.s_l.im *
            proc_control_node_B.d6);
          b_A_data[stemp_re_tmp_tmp].re = proc_control_node_B.stemp_re;
          b_A_data[stemp_re_tmp_tmp].im = proc_control_node_B.stemp_im;
        }

        proc_control_node_B.s_l.re = -proc_control_node_B.s_l.re;
        proc_control_node_B.s_l.im = -proc_control_node_B.s_l.im;
        for (j = 1; j <= ihi; j++) {
          stemp_re_tmp = (j + b_A_size[0] * proc_control_node_B.jrow) - 1;
          stemp_re_tmp_tmp = (j + b_A_size[0] * (proc_control_node_B.jrow + 1))
            - 1;
          proc_control_node_B.stemp_re = (b_A_data[stemp_re_tmp].re *
            proc_control_node_B.s_l.re - b_A_data[stemp_re_tmp].im *
            proc_control_node_B.s_l.im) + b_A_data[stemp_re_tmp_tmp].re *
            proc_control_node_B.c_kp;
          proc_control_node_B.stemp_im = (b_A_data[stemp_re_tmp].im *
            proc_control_node_B.s_l.re + b_A_data[stemp_re_tmp].re *
            proc_control_node_B.s_l.im) + b_A_data[stemp_re_tmp_tmp].im *
            proc_control_node_B.c_kp;
          proc_control_node_B.d6 = b_A_data[stemp_re_tmp_tmp].re;
          b_A_data[stemp_re_tmp].re = b_A_data[stemp_re_tmp].re *
            proc_control_node_B.c_kp - (b_A_data[stemp_re_tmp_tmp].re *
            proc_control_node_B.s_l.re + b_A_data[stemp_re_tmp_tmp].im *
            proc_control_node_B.s_l.im);
          b_A_data[stemp_re_tmp].im = b_A_data[stemp_re_tmp].im *
            proc_control_node_B.c_kp - (b_A_data[stemp_re_tmp_tmp].im *
            proc_control_node_B.s_l.re - proc_control_node_B.s_l.im *
            proc_control_node_B.d6);
          b_A_data[stemp_re_tmp_tmp].re = proc_control_node_B.stemp_re;
          b_A_data[stemp_re_tmp_tmp].im = proc_control_node_B.stemp_im;
        }

        proc_control_node_B.jrow--;
      }

      proc_control_node_B.jcol++;
    }
  }
}

static void proc_control_node_xzlartg_b(const creal_T f, const creal_T g, real_T
  *cs, creal_T *sn)
{
  boolean_T guard1 = false;
  proc_control_node_B.d_j = fabs(f.re);
  proc_control_node_B.f2s_d = fabs(f.im);
  proc_control_node_B.scale_j = proc_control_node_B.d_j;
  if (proc_control_node_B.f2s_d > proc_control_node_B.d_j) {
    proc_control_node_B.scale_j = proc_control_node_B.f2s_d;
  }

  proc_control_node_B.gs_re_j = fabs(g.re);
  proc_control_node_B.gs_im_h = fabs(g.im);
  if (proc_control_node_B.gs_im_h > proc_control_node_B.gs_re_j) {
    proc_control_node_B.gs_re_j = proc_control_node_B.gs_im_h;
  }

  if (proc_control_node_B.gs_re_j > proc_control_node_B.scale_j) {
    proc_control_node_B.scale_j = proc_control_node_B.gs_re_j;
  }

  proc_control_node_B.fs_re_c = f.re;
  proc_control_node_B.fs_im_k = f.im;
  proc_control_node_B.gs_re_j = g.re;
  proc_control_node_B.gs_im_h = g.im;
  guard1 = false;
  if (proc_control_node_B.scale_j >= 7.4428285367870146E+137) {
    do {
      proc_control_node_B.fs_re_c *= 1.3435752215134178E-138;
      proc_control_node_B.fs_im_k *= 1.3435752215134178E-138;
      proc_control_node_B.gs_re_j *= 1.3435752215134178E-138;
      proc_control_node_B.gs_im_h *= 1.3435752215134178E-138;
      proc_control_node_B.scale_j *= 1.3435752215134178E-138;
    } while (!(proc_control_node_B.scale_j < 7.4428285367870146E+137));

    guard1 = true;
  } else if (proc_control_node_B.scale_j <= 1.3435752215134178E-138) {
    if ((g.re == 0.0) && (g.im == 0.0)) {
      *cs = 1.0;
      sn->re = 0.0;
      sn->im = 0.0;
    } else {
      do {
        proc_control_node_B.fs_re_c *= 7.4428285367870146E+137;
        proc_control_node_B.fs_im_k *= 7.4428285367870146E+137;
        proc_control_node_B.gs_re_j *= 7.4428285367870146E+137;
        proc_control_node_B.gs_im_h *= 7.4428285367870146E+137;
        proc_control_node_B.scale_j *= 7.4428285367870146E+137;
      } while (!(proc_control_node_B.scale_j > 1.3435752215134178E-138));

      guard1 = true;
    }
  } else {
    guard1 = true;
  }

  if (guard1) {
    proc_control_node_B.scale_j = proc_control_node_B.fs_re_c *
      proc_control_node_B.fs_re_c + proc_control_node_B.fs_im_k *
      proc_control_node_B.fs_im_k;
    proc_control_node_B.g2_k = proc_control_node_B.gs_re_j *
      proc_control_node_B.gs_re_j + proc_control_node_B.gs_im_h *
      proc_control_node_B.gs_im_h;
    proc_control_node_B.b_x_g = proc_control_node_B.g2_k;
    if (1.0 > proc_control_node_B.g2_k) {
      proc_control_node_B.b_x_g = 1.0;
    }

    if (proc_control_node_B.scale_j <= proc_control_node_B.b_x_g *
        2.0041683600089728E-292) {
      if ((f.re == 0.0) && (f.im == 0.0)) {
        *cs = 0.0;
        proc_control_node_B.d_j = proc_control_node_rt_hypotd_snf
          (proc_control_node_B.gs_re_j, proc_control_node_B.gs_im_h);
        sn->re = proc_control_node_B.gs_re_j / proc_control_node_B.d_j;
        sn->im = -proc_control_node_B.gs_im_h / proc_control_node_B.d_j;
      } else {
        proc_control_node_B.scale_j = sqrt(proc_control_node_B.g2_k);
        *cs = proc_control_node_rt_hypotd_snf(proc_control_node_B.fs_re_c,
          proc_control_node_B.fs_im_k) / proc_control_node_B.scale_j;
        if (proc_control_node_B.f2s_d > proc_control_node_B.d_j) {
          proc_control_node_B.d_j = proc_control_node_B.f2s_d;
        }

        if (proc_control_node_B.d_j > 1.0) {
          proc_control_node_B.d_j = proc_control_node_rt_hypotd_snf(f.re, f.im);
          proc_control_node_B.fs_re_c = f.re / proc_control_node_B.d_j;
          proc_control_node_B.fs_im_k = f.im / proc_control_node_B.d_j;
        } else {
          proc_control_node_B.fs_re_c = 7.4428285367870146E+137 * f.re;
          proc_control_node_B.f2s_d = 7.4428285367870146E+137 * f.im;
          proc_control_node_B.d_j = proc_control_node_rt_hypotd_snf
            (proc_control_node_B.fs_re_c, proc_control_node_B.f2s_d);
          proc_control_node_B.fs_re_c /= proc_control_node_B.d_j;
          proc_control_node_B.fs_im_k = proc_control_node_B.f2s_d /
            proc_control_node_B.d_j;
        }

        proc_control_node_B.gs_re_j /= proc_control_node_B.scale_j;
        proc_control_node_B.gs_im_h = -proc_control_node_B.gs_im_h /
          proc_control_node_B.scale_j;
        sn->re = proc_control_node_B.fs_re_c * proc_control_node_B.gs_re_j -
          proc_control_node_B.fs_im_k * proc_control_node_B.gs_im_h;
        sn->im = proc_control_node_B.fs_re_c * proc_control_node_B.gs_im_h +
          proc_control_node_B.fs_im_k * proc_control_node_B.gs_re_j;
      }
    } else {
      proc_control_node_B.f2s_d = sqrt(proc_control_node_B.g2_k /
        proc_control_node_B.scale_j + 1.0);
      *cs = 1.0 / proc_control_node_B.f2s_d;
      proc_control_node_B.d_j = proc_control_node_B.scale_j +
        proc_control_node_B.g2_k;
      proc_control_node_B.fs_re_c = proc_control_node_B.f2s_d *
        proc_control_node_B.fs_re_c / proc_control_node_B.d_j;
      proc_control_node_B.fs_im_k = proc_control_node_B.f2s_d *
        proc_control_node_B.fs_im_k / proc_control_node_B.d_j;
      sn->re = proc_control_node_B.fs_re_c * proc_control_node_B.gs_re_j -
        proc_control_node_B.fs_im_k * -proc_control_node_B.gs_im_h;
      sn->im = proc_control_node_B.fs_re_c * -proc_control_node_B.gs_im_h +
        proc_control_node_B.fs_im_k * proc_control_node_B.gs_re_j;
    }
  }
}

static void proc_control_node_xzhgeqz_b(const creal_T A_data[], const int32_T
  A_size[2], int32_T ilo, int32_T ihi, int32_T *info, creal_T alpha1_data[],
  int32_T *alpha1_size, creal_T beta1_data[], int32_T *beta1_size)
{
  int32_T colssq_tmp;
  int32_T ctemp_tmp_tmp;
  int32_T exitg1;
  boolean_T exitg2;
  boolean_T failed;
  boolean_T goto60;
  boolean_T goto70;
  boolean_T goto90;
  boolean_T guard1 = false;
  boolean_T guard11 = false;
  boolean_T guard2 = false;
  boolean_T guard3 = false;
  proc_control_node_B.b_A_size_idx_0 = A_size[0];
  proc_control_node_B.istart_n = A_size[0] * A_size[1];
  if (0 <= proc_control_node_B.istart_n - 1) {
    memcpy(&proc_control_node_B.b_A_data[0], &A_data[0],
           proc_control_node_B.istart_n * sizeof(creal_T));
  }

  *info = 0;
  if ((A_size[0] == 1) && (A_size[1] == 1)) {
    ihi = 1;
  }

  proc_control_node_B.n_h = A_size[0];
  *alpha1_size = A_size[0];
  proc_control_node_B.istart_n = A_size[0];
  if (0 <= proc_control_node_B.istart_n - 1) {
    memset(&alpha1_data[0], 0, proc_control_node_B.istart_n * sizeof(creal_T));
  }

  *beta1_size = A_size[0];
  proc_control_node_B.istart_n = A_size[0];
  for (proc_control_node_B.nm1 = 0; proc_control_node_B.nm1 <
       proc_control_node_B.istart_n; proc_control_node_B.nm1++) {
    beta1_data[proc_control_node_B.nm1].re = 1.0;
    beta1_data[proc_control_node_B.nm1].im = 0.0;
  }

  proc_control_node_B.eshift_re = 0.0;
  proc_control_node_B.eshift_im = 0.0;
  proc_control_node_B.ctemp.re = 0.0;
  proc_control_node_B.ctemp.im = 0.0;
  proc_control_node_B.anorm = 0.0;
  if (ilo <= ihi) {
    proc_control_node_B.scale_e = 3.3121686421112381E-170;
    proc_control_node_B.anorm = 0.0;
    proc_control_node_B.nm1 = ihi - ilo;
    for (proc_control_node_B.istart_n = 0; proc_control_node_B.istart_n <=
         proc_control_node_B.nm1; proc_control_node_B.istart_n++) {
      proc_control_node_B.colscale = 3.3121686421112381E-170;
      proc_control_node_B.colssq = 0.0;
      proc_control_node_B.col = (ilo + proc_control_node_B.istart_n) - 1;
      if (proc_control_node_B.istart_n + 1 < proc_control_node_B.nm1) {
        proc_control_node_B.ilastm = proc_control_node_B.istart_n + 1;
      } else {
        proc_control_node_B.ilastm = proc_control_node_B.nm1;
      }

      proc_control_node_B.ilastm += ilo;
      for (proc_control_node_B.iiter = ilo; proc_control_node_B.iiter <=
           proc_control_node_B.ilastm; proc_control_node_B.iiter++) {
        proc_control_node_B.absxk_lb = fabs(A_data[(proc_control_node_B.iiter +
          A_size[0] * proc_control_node_B.col) - 1].re);
        if (proc_control_node_B.absxk_lb > proc_control_node_B.colscale) {
          proc_control_node_B.t_h = proc_control_node_B.colscale /
            proc_control_node_B.absxk_lb;
          proc_control_node_B.colssq = proc_control_node_B.colssq *
            proc_control_node_B.t_h * proc_control_node_B.t_h + 1.0;
          proc_control_node_B.colscale = proc_control_node_B.absxk_lb;
        } else {
          proc_control_node_B.t_h = proc_control_node_B.absxk_lb /
            proc_control_node_B.colscale;
          proc_control_node_B.colssq += proc_control_node_B.t_h *
            proc_control_node_B.t_h;
        }

        proc_control_node_B.absxk_lb = fabs(A_data[(proc_control_node_B.iiter +
          A_size[0] * proc_control_node_B.col) - 1].im);
        if (proc_control_node_B.absxk_lb > proc_control_node_B.colscale) {
          proc_control_node_B.t_h = proc_control_node_B.colscale /
            proc_control_node_B.absxk_lb;
          proc_control_node_B.colssq = proc_control_node_B.colssq *
            proc_control_node_B.t_h * proc_control_node_B.t_h + 1.0;
          proc_control_node_B.colscale = proc_control_node_B.absxk_lb;
        } else {
          proc_control_node_B.t_h = proc_control_node_B.absxk_lb /
            proc_control_node_B.colscale;
          proc_control_node_B.colssq += proc_control_node_B.t_h *
            proc_control_node_B.t_h;
        }
      }

      if (proc_control_node_B.scale_e >= proc_control_node_B.colscale) {
        proc_control_node_B.absxk_lb = proc_control_node_B.colscale /
          proc_control_node_B.scale_e;
        proc_control_node_B.anorm += proc_control_node_B.absxk_lb *
          proc_control_node_B.absxk_lb * proc_control_node_B.colssq;
      } else {
        proc_control_node_B.absxk_lb = proc_control_node_B.scale_e /
          proc_control_node_B.colscale;
        proc_control_node_B.anorm = proc_control_node_B.absxk_lb *
          proc_control_node_B.absxk_lb * proc_control_node_B.anorm +
          proc_control_node_B.colssq;
        proc_control_node_B.scale_e = proc_control_node_B.colscale;
      }
    }

    proc_control_node_B.anorm = proc_control_node_B.scale_e * sqrt
      (proc_control_node_B.anorm);
  }

  proc_control_node_B.colscale = 2.2204460492503131E-16 *
    proc_control_node_B.anorm;
  proc_control_node_B.scale_e = 2.2250738585072014E-308;
  if (proc_control_node_B.colscale > 2.2250738585072014E-308) {
    proc_control_node_B.scale_e = proc_control_node_B.colscale;
  }

  proc_control_node_B.colscale = 2.2250738585072014E-308;
  if (proc_control_node_B.anorm > 2.2250738585072014E-308) {
    proc_control_node_B.colscale = proc_control_node_B.anorm;
  }

  proc_control_node_B.anorm = 1.0 / proc_control_node_B.colscale;
  proc_control_node_B.colscale = 1.0 / sqrt(static_cast<real_T>(A_size[0]));
  failed = true;
  for (proc_control_node_B.istart_n = ihi + 1; proc_control_node_B.istart_n <=
       proc_control_node_B.n_h; proc_control_node_B.istart_n++) {
    alpha1_data[proc_control_node_B.istart_n - 1] = A_data
      [(proc_control_node_B.istart_n + A_size[0] * (proc_control_node_B.istart_n
         - 1)) - 1];
  }

  guard1 = false;
  guard2 = false;
  if (ihi >= ilo) {
    proc_control_node_B.nm1 = ilo;
    proc_control_node_B.istart_n = ilo;
    proc_control_node_B.n_h = ihi - 1;
    proc_control_node_B.col = ihi - 2;
    proc_control_node_B.ilastm = ihi;
    proc_control_node_B.iiter = 0;
    goto60 = false;
    goto70 = false;
    goto90 = false;
    proc_control_node_B.jiter = 0;
    do {
      exitg1 = 0;
      if (proc_control_node_B.jiter <= ((ihi - ilo) + 1) * 30 - 1) {
        guard11 = false;
        if (proc_control_node_B.n_h + 1 == ilo) {
          goto60 = true;
          guard11 = true;
        } else {
          ctemp_tmp_tmp = proc_control_node_B.n_h +
            proc_control_node_B.b_A_size_idx_0 * proc_control_node_B.col;
          if (fabs(proc_control_node_B.b_A_data[ctemp_tmp_tmp].re) + fabs
              (proc_control_node_B.b_A_data[ctemp_tmp_tmp].im) <=
              proc_control_node_B.scale_e) {
            proc_control_node_B.b_A_data[ctemp_tmp_tmp].re = 0.0;
            proc_control_node_B.b_A_data[ctemp_tmp_tmp].im = 0.0;
            goto60 = true;
            guard11 = true;
          } else {
            proc_control_node_B.j_f = proc_control_node_B.col + 1;
            guard3 = false;
            exitg2 = false;
            while ((!exitg2) && (proc_control_node_B.j_f >= ilo)) {
              if (proc_control_node_B.j_f == ilo) {
                guard3 = true;
                exitg2 = true;
              } else {
                ctemp_tmp_tmp = (proc_control_node_B.j_f +
                                 proc_control_node_B.b_A_size_idx_0 *
                                 (proc_control_node_B.j_f - 2)) - 1;
                if (fabs(proc_control_node_B.b_A_data[ctemp_tmp_tmp].re) + fabs
                    (proc_control_node_B.b_A_data[ctemp_tmp_tmp].im) <=
                    proc_control_node_B.scale_e) {
                  proc_control_node_B.b_A_data[ctemp_tmp_tmp].re = 0.0;
                  proc_control_node_B.b_A_data[ctemp_tmp_tmp].im = 0.0;
                  guard3 = true;
                  exitg2 = true;
                } else {
                  proc_control_node_B.j_f--;
                  guard3 = false;
                }
              }
            }

            if (guard3) {
              proc_control_node_B.nm1 = proc_control_node_B.j_f;
              goto70 = true;
            }

            if (goto70) {
              guard11 = true;
            } else {
              proc_control_node_B.n_h = *alpha1_size;
              for (proc_control_node_B.nm1 = 0; proc_control_node_B.nm1 <
                   proc_control_node_B.n_h; proc_control_node_B.nm1++) {
                alpha1_data[proc_control_node_B.nm1].re = (rtNaN);
                alpha1_data[proc_control_node_B.nm1].im = 0.0;
              }

              proc_control_node_B.n_h = *beta1_size;
              for (proc_control_node_B.nm1 = 0; proc_control_node_B.nm1 <
                   proc_control_node_B.n_h; proc_control_node_B.nm1++) {
                beta1_data[proc_control_node_B.nm1].re = (rtNaN);
                beta1_data[proc_control_node_B.nm1].im = 0.0;
              }

              *info = 1;
              exitg1 = 1;
            }
          }
        }

        if (guard11) {
          if (goto60) {
            goto60 = false;
            alpha1_data[proc_control_node_B.n_h] =
              proc_control_node_B.b_A_data[proc_control_node_B.n_h +
              proc_control_node_B.b_A_size_idx_0 * proc_control_node_B.n_h];
            proc_control_node_B.n_h = proc_control_node_B.col;
            proc_control_node_B.col--;
            if (proc_control_node_B.n_h + 1 < ilo) {
              failed = false;
              guard2 = true;
              exitg1 = 1;
            } else {
              proc_control_node_B.iiter = 0;
              proc_control_node_B.eshift_re = 0.0;
              proc_control_node_B.eshift_im = 0.0;
              proc_control_node_B.ilastm = proc_control_node_B.n_h + 1;
              proc_control_node_B.jiter++;
            }
          } else {
            if (goto70) {
              goto70 = false;
              proc_control_node_B.iiter++;
              if (proc_control_node_B.iiter - div_nzp_s32
                  (proc_control_node_B.iiter, 10) * 10 != 0) {
                proc_control_node_B.j_f = proc_control_node_B.col +
                  proc_control_node_B.b_A_size_idx_0 * proc_control_node_B.col;
                proc_control_node_B.ar_n = proc_control_node_B.anorm *
                  proc_control_node_B.b_A_data[proc_control_node_B.j_f].re;
                proc_control_node_B.ai_k = proc_control_node_B.anorm *
                  proc_control_node_B.b_A_data[proc_control_node_B.j_f].im;
                if (proc_control_node_B.ai_k == 0.0) {
                  proc_control_node_B.ad11.re = proc_control_node_B.ar_n /
                    proc_control_node_B.colscale;
                  proc_control_node_B.ad11.im = 0.0;
                } else if (proc_control_node_B.ar_n == 0.0) {
                  proc_control_node_B.ad11.re = 0.0;
                  proc_control_node_B.ad11.im = proc_control_node_B.ai_k /
                    proc_control_node_B.colscale;
                } else {
                  proc_control_node_B.ad11.re = proc_control_node_B.ar_n /
                    proc_control_node_B.colscale;
                  proc_control_node_B.ad11.im = proc_control_node_B.ai_k /
                    proc_control_node_B.colscale;
                }

                proc_control_node_B.j_f = proc_control_node_B.n_h +
                  proc_control_node_B.b_A_size_idx_0 * proc_control_node_B.n_h;
                proc_control_node_B.ar_n = proc_control_node_B.anorm *
                  proc_control_node_B.b_A_data[proc_control_node_B.j_f].re;
                proc_control_node_B.ai_k = proc_control_node_B.anorm *
                  proc_control_node_B.b_A_data[proc_control_node_B.j_f].im;
                if (proc_control_node_B.ai_k == 0.0) {
                  proc_control_node_B.shift.re = proc_control_node_B.ar_n /
                    proc_control_node_B.colscale;
                  proc_control_node_B.shift.im = 0.0;
                } else if (proc_control_node_B.ar_n == 0.0) {
                  proc_control_node_B.shift.re = 0.0;
                  proc_control_node_B.shift.im = proc_control_node_B.ai_k /
                    proc_control_node_B.colscale;
                } else {
                  proc_control_node_B.shift.re = proc_control_node_B.ar_n /
                    proc_control_node_B.colscale;
                  proc_control_node_B.shift.im = proc_control_node_B.ai_k /
                    proc_control_node_B.colscale;
                }

                proc_control_node_B.colssq = (proc_control_node_B.ad11.re +
                  proc_control_node_B.shift.re) * 0.5;
                proc_control_node_B.absxk_lb = (proc_control_node_B.ad11.im +
                  proc_control_node_B.shift.im) * 0.5;
                proc_control_node_B.j_f = proc_control_node_B.col +
                  proc_control_node_B.b_A_size_idx_0 * proc_control_node_B.n_h;
                proc_control_node_B.ar_n = proc_control_node_B.anorm *
                  proc_control_node_B.b_A_data[proc_control_node_B.j_f].re;
                proc_control_node_B.ai_k = proc_control_node_B.anorm *
                  proc_control_node_B.b_A_data[proc_control_node_B.j_f].im;
                if (proc_control_node_B.ai_k == 0.0) {
                  proc_control_node_B.t_h = proc_control_node_B.ar_n /
                    proc_control_node_B.colscale;
                  proc_control_node_B.ascale_im = 0.0;
                } else if (proc_control_node_B.ar_n == 0.0) {
                  proc_control_node_B.t_h = 0.0;
                  proc_control_node_B.ascale_im = proc_control_node_B.ai_k /
                    proc_control_node_B.colscale;
                } else {
                  proc_control_node_B.t_h = proc_control_node_B.ar_n /
                    proc_control_node_B.colscale;
                  proc_control_node_B.ascale_im = proc_control_node_B.ai_k /
                    proc_control_node_B.colscale;
                }

                proc_control_node_B.j_f = proc_control_node_B.n_h +
                  proc_control_node_B.b_A_size_idx_0 * proc_control_node_B.col;
                proc_control_node_B.ar_n = proc_control_node_B.anorm *
                  proc_control_node_B.b_A_data[proc_control_node_B.j_f].re;
                proc_control_node_B.ai_k = proc_control_node_B.anorm *
                  proc_control_node_B.b_A_data[proc_control_node_B.j_f].im;
                if (proc_control_node_B.ai_k == 0.0) {
                  proc_control_node_B.ar_n /= proc_control_node_B.colscale;
                  proc_control_node_B.ai_k = 0.0;
                } else if (proc_control_node_B.ar_n == 0.0) {
                  proc_control_node_B.ar_n = 0.0;
                  proc_control_node_B.ai_k /= proc_control_node_B.colscale;
                } else {
                  proc_control_node_B.ar_n /= proc_control_node_B.colscale;
                  proc_control_node_B.ai_k /= proc_control_node_B.colscale;
                }

                proc_control_node_B.t1.re = ((proc_control_node_B.colssq *
                  proc_control_node_B.colssq - proc_control_node_B.absxk_lb *
                  proc_control_node_B.absxk_lb) + (proc_control_node_B.t_h *
                  proc_control_node_B.ar_n - proc_control_node_B.ascale_im *
                  proc_control_node_B.ai_k)) - (proc_control_node_B.ad11.re *
                  proc_control_node_B.shift.re - proc_control_node_B.ad11.im *
                  proc_control_node_B.shift.im);
                proc_control_node_B.t1_tmp = proc_control_node_B.colssq *
                  proc_control_node_B.absxk_lb;
                proc_control_node_B.t1.im = ((proc_control_node_B.t1_tmp +
                  proc_control_node_B.t1_tmp) + (proc_control_node_B.t_h *
                  proc_control_node_B.ai_k + proc_control_node_B.ascale_im *
                  proc_control_node_B.ar_n)) - (proc_control_node_B.ad11.re *
                  proc_control_node_B.shift.im + proc_control_node_B.ad11.im *
                  proc_control_node_B.shift.re);
                proc_control_node_B.ad11 = proc_control_node_sqrt
                  (proc_control_node_B.t1);
                if ((proc_control_node_B.colssq - proc_control_node_B.shift.re) *
                    proc_control_node_B.ad11.re + (proc_control_node_B.absxk_lb
                     - proc_control_node_B.shift.im) *
                    proc_control_node_B.ad11.im <= 0.0) {
                  proc_control_node_B.shift.re = proc_control_node_B.colssq +
                    proc_control_node_B.ad11.re;
                  proc_control_node_B.shift.im = proc_control_node_B.absxk_lb +
                    proc_control_node_B.ad11.im;
                } else {
                  proc_control_node_B.shift.re = proc_control_node_B.colssq -
                    proc_control_node_B.ad11.re;
                  proc_control_node_B.shift.im = proc_control_node_B.absxk_lb -
                    proc_control_node_B.ad11.im;
                }
              } else {
                proc_control_node_B.j_f = proc_control_node_B.n_h +
                  proc_control_node_B.b_A_size_idx_0 * proc_control_node_B.col;
                proc_control_node_B.ar_n = proc_control_node_B.anorm *
                  proc_control_node_B.b_A_data[proc_control_node_B.j_f].re;
                proc_control_node_B.ai_k = proc_control_node_B.anorm *
                  proc_control_node_B.b_A_data[proc_control_node_B.j_f].im;
                if (proc_control_node_B.ai_k == 0.0) {
                  proc_control_node_B.t_h = proc_control_node_B.ar_n /
                    proc_control_node_B.colscale;
                  proc_control_node_B.ascale_im = 0.0;
                } else if (proc_control_node_B.ar_n == 0.0) {
                  proc_control_node_B.t_h = 0.0;
                  proc_control_node_B.ascale_im = proc_control_node_B.ai_k /
                    proc_control_node_B.colscale;
                } else {
                  proc_control_node_B.t_h = proc_control_node_B.ar_n /
                    proc_control_node_B.colscale;
                  proc_control_node_B.ascale_im = proc_control_node_B.ai_k /
                    proc_control_node_B.colscale;
                }

                proc_control_node_B.eshift_re += proc_control_node_B.t_h;
                proc_control_node_B.eshift_im += proc_control_node_B.ascale_im;
                proc_control_node_B.shift.re = proc_control_node_B.eshift_re;
                proc_control_node_B.shift.im = proc_control_node_B.eshift_im;
              }

              proc_control_node_B.j_f = proc_control_node_B.col;
              proc_control_node_B.jp1 = proc_control_node_B.col + 1;
              exitg2 = false;
              while ((!exitg2) && (proc_control_node_B.j_f + 1 >
                                   proc_control_node_B.nm1)) {
                proc_control_node_B.istart_n = proc_control_node_B.j_f + 1;
                ctemp_tmp_tmp = proc_control_node_B.b_A_size_idx_0 *
                  proc_control_node_B.j_f;
                proc_control_node_B.ctemp_tmp = proc_control_node_B.j_f +
                  ctemp_tmp_tmp;
                proc_control_node_B.ctemp.re = proc_control_node_B.anorm *
                  proc_control_node_B.b_A_data[proc_control_node_B.ctemp_tmp].re
                  - proc_control_node_B.shift.re * proc_control_node_B.colscale;
                proc_control_node_B.ctemp.im = proc_control_node_B.anorm *
                  proc_control_node_B.b_A_data[proc_control_node_B.ctemp_tmp].im
                  - proc_control_node_B.shift.im * proc_control_node_B.colscale;
                proc_control_node_B.colssq = fabs(proc_control_node_B.ctemp.re)
                  + fabs(proc_control_node_B.ctemp.im);
                proc_control_node_B.jp1 += ctemp_tmp_tmp;
                proc_control_node_B.absxk_lb = (fabs
                  (proc_control_node_B.b_A_data[proc_control_node_B.jp1].re) +
                  fabs(proc_control_node_B.b_A_data[proc_control_node_B.jp1].im))
                  * proc_control_node_B.anorm;
                proc_control_node_B.t_h = proc_control_node_B.colssq;
                if (proc_control_node_B.absxk_lb > proc_control_node_B.colssq) {
                  proc_control_node_B.t_h = proc_control_node_B.absxk_lb;
                }

                if ((proc_control_node_B.t_h < 1.0) && (proc_control_node_B.t_h
                     != 0.0)) {
                  proc_control_node_B.colssq /= proc_control_node_B.t_h;
                  proc_control_node_B.absxk_lb /= proc_control_node_B.t_h;
                }

                ctemp_tmp_tmp = proc_control_node_B.j_f +
                  proc_control_node_B.b_A_size_idx_0 * (proc_control_node_B.j_f
                  - 1);
                if ((fabs(proc_control_node_B.b_A_data[ctemp_tmp_tmp].re) + fabs
                     (proc_control_node_B.b_A_data[ctemp_tmp_tmp].im)) *
                    proc_control_node_B.absxk_lb <= proc_control_node_B.colssq *
                    proc_control_node_B.scale_e) {
                  goto90 = true;
                  exitg2 = true;
                } else {
                  proc_control_node_B.jp1 = proc_control_node_B.j_f;
                  proc_control_node_B.j_f--;
                }
              }

              if (!goto90) {
                proc_control_node_B.istart_n = proc_control_node_B.nm1;
                proc_control_node_B.ctemp_tmp = (proc_control_node_B.nm1 +
                  proc_control_node_B.b_A_size_idx_0 * (proc_control_node_B.nm1
                  - 1)) - 1;
                proc_control_node_B.ctemp.re =
                  proc_control_node_B.b_A_data[proc_control_node_B.ctemp_tmp].re
                  * proc_control_node_B.anorm - proc_control_node_B.shift.re *
                  proc_control_node_B.colscale;
                proc_control_node_B.ctemp.im =
                  proc_control_node_B.b_A_data[proc_control_node_B.ctemp_tmp].im
                  * proc_control_node_B.anorm - proc_control_node_B.shift.im *
                  proc_control_node_B.colscale;
              }

              goto90 = false;
              proc_control_node_B.j_f = proc_control_node_B.istart_n +
                proc_control_node_B.b_A_size_idx_0 *
                (proc_control_node_B.istart_n - 1);
              proc_control_node_B.ascale.re =
                proc_control_node_B.b_A_data[proc_control_node_B.j_f].re *
                proc_control_node_B.anorm;
              proc_control_node_B.ascale.im =
                proc_control_node_B.b_A_data[proc_control_node_B.j_f].im *
                proc_control_node_B.anorm;
              proc_control_node_xzlartg_b(proc_control_node_B.ctemp,
                proc_control_node_B.ascale, &proc_control_node_B.t_h,
                &proc_control_node_B.shift);
              proc_control_node_B.j_f = proc_control_node_B.istart_n;
              proc_control_node_B.jp1 = proc_control_node_B.istart_n - 2;
              while (proc_control_node_B.j_f < proc_control_node_B.n_h + 1) {
                if (proc_control_node_B.j_f > proc_control_node_B.istart_n) {
                  proc_control_node_xzlartg(proc_control_node_B.b_A_data
                    [(proc_control_node_B.j_f +
                      proc_control_node_B.b_A_size_idx_0 *
                      proc_control_node_B.jp1) - 1],
                    proc_control_node_B.b_A_data[proc_control_node_B.j_f +
                    proc_control_node_B.b_A_size_idx_0 * proc_control_node_B.jp1],
                    &proc_control_node_B.t_h, &proc_control_node_B.shift,
                    &proc_control_node_B.b_A_data[(proc_control_node_B.j_f +
                    proc_control_node_B.b_A_size_idx_0 * proc_control_node_B.jp1)
                    - 1]);
                  ctemp_tmp_tmp = proc_control_node_B.j_f +
                    proc_control_node_B.b_A_size_idx_0 * proc_control_node_B.jp1;
                  proc_control_node_B.b_A_data[ctemp_tmp_tmp].re = 0.0;
                  proc_control_node_B.b_A_data[ctemp_tmp_tmp].im = 0.0;
                }

                for (proc_control_node_B.jp1 = proc_control_node_B.j_f;
                     proc_control_node_B.jp1 <= proc_control_node_B.ilastm;
                     proc_control_node_B.jp1++) {
                  proc_control_node_B.ctemp_tmp =
                    proc_control_node_B.b_A_size_idx_0 *
                    (proc_control_node_B.jp1 - 1);
                  ctemp_tmp_tmp = proc_control_node_B.j_f +
                    proc_control_node_B.ctemp_tmp;
                  colssq_tmp = (proc_control_node_B.j_f +
                                proc_control_node_B.ctemp_tmp) - 1;
                  proc_control_node_B.colssq =
                    (proc_control_node_B.b_A_data[ctemp_tmp_tmp].re *
                     proc_control_node_B.shift.re -
                     proc_control_node_B.b_A_data[ctemp_tmp_tmp].im *
                     proc_control_node_B.shift.im) +
                    proc_control_node_B.b_A_data[colssq_tmp].re *
                    proc_control_node_B.t_h;
                  proc_control_node_B.absxk_lb =
                    (proc_control_node_B.b_A_data[ctemp_tmp_tmp].im *
                     proc_control_node_B.shift.re +
                     proc_control_node_B.b_A_data[ctemp_tmp_tmp].re *
                     proc_control_node_B.shift.im) +
                    proc_control_node_B.b_A_data[colssq_tmp].im *
                    proc_control_node_B.t_h;
                  ctemp_tmp_tmp = proc_control_node_B.b_A_size_idx_0 *
                    (proc_control_node_B.jp1 - 1);
                  proc_control_node_B.ctemp_tmp = (proc_control_node_B.j_f +
                    ctemp_tmp_tmp) - 1;
                  proc_control_node_B.ascale_im =
                    proc_control_node_B.b_A_data[proc_control_node_B.ctemp_tmp].
                    re;
                  ctemp_tmp_tmp += proc_control_node_B.j_f;
                  proc_control_node_B.b_A_data[ctemp_tmp_tmp].re =
                    proc_control_node_B.b_A_data[ctemp_tmp_tmp].re *
                    proc_control_node_B.t_h -
                    (proc_control_node_B.b_A_data[proc_control_node_B.ctemp_tmp]
                     .re * proc_control_node_B.shift.re +
                     proc_control_node_B.b_A_data[proc_control_node_B.ctemp_tmp]
                     .im * proc_control_node_B.shift.im);
                  ctemp_tmp_tmp = proc_control_node_B.b_A_size_idx_0 *
                    (proc_control_node_B.jp1 - 1);
                  proc_control_node_B.ctemp_tmp = proc_control_node_B.j_f +
                    ctemp_tmp_tmp;
                  ctemp_tmp_tmp = (proc_control_node_B.j_f + ctemp_tmp_tmp) - 1;
                  proc_control_node_B.b_A_data[proc_control_node_B.ctemp_tmp].im
                    = proc_control_node_B.b_A_data[proc_control_node_B.ctemp_tmp]
                    .im * proc_control_node_B.t_h -
                    (proc_control_node_B.b_A_data[ctemp_tmp_tmp].im *
                     proc_control_node_B.shift.re - proc_control_node_B.shift.im
                     * proc_control_node_B.ascale_im);
                  proc_control_node_B.b_A_data[ctemp_tmp_tmp].re =
                    proc_control_node_B.colssq;
                  proc_control_node_B.b_A_data[ctemp_tmp_tmp].im =
                    proc_control_node_B.absxk_lb;
                }

                proc_control_node_B.shift.re = -proc_control_node_B.shift.re;
                proc_control_node_B.shift.im = -proc_control_node_B.shift.im;
                proc_control_node_B.jp1 = proc_control_node_B.j_f + 2;
                if (proc_control_node_B.n_h + 1 < proc_control_node_B.j_f + 2) {
                  proc_control_node_B.jp1 = proc_control_node_B.n_h + 1;
                }

                for (proc_control_node_B.ctemp_tmp = proc_control_node_B.nm1;
                     proc_control_node_B.ctemp_tmp <= proc_control_node_B.jp1;
                     proc_control_node_B.ctemp_tmp++) {
                  ctemp_tmp_tmp = (proc_control_node_B.ctemp_tmp +
                                   proc_control_node_B.b_A_size_idx_0 *
                                   (proc_control_node_B.j_f - 1)) - 1;
                  colssq_tmp = (proc_control_node_B.ctemp_tmp +
                                proc_control_node_B.b_A_size_idx_0 *
                                proc_control_node_B.j_f) - 1;
                  proc_control_node_B.colssq =
                    (proc_control_node_B.b_A_data[ctemp_tmp_tmp].re *
                     proc_control_node_B.shift.re -
                     proc_control_node_B.b_A_data[ctemp_tmp_tmp].im *
                     proc_control_node_B.shift.im) +
                    proc_control_node_B.b_A_data[colssq_tmp].re *
                    proc_control_node_B.t_h;
                  proc_control_node_B.absxk_lb =
                    (proc_control_node_B.b_A_data[ctemp_tmp_tmp].im *
                     proc_control_node_B.shift.re +
                     proc_control_node_B.b_A_data[ctemp_tmp_tmp].re *
                     proc_control_node_B.shift.im) +
                    proc_control_node_B.b_A_data[colssq_tmp].im *
                    proc_control_node_B.t_h;
                  proc_control_node_B.ascale_im =
                    proc_control_node_B.b_A_data[colssq_tmp].re;
                  proc_control_node_B.b_A_data[ctemp_tmp_tmp].re =
                    proc_control_node_B.b_A_data[ctemp_tmp_tmp].re *
                    proc_control_node_B.t_h -
                    (proc_control_node_B.b_A_data[colssq_tmp].re *
                     proc_control_node_B.shift.re +
                     proc_control_node_B.b_A_data[colssq_tmp].im *
                     proc_control_node_B.shift.im);
                  proc_control_node_B.b_A_data[ctemp_tmp_tmp].im =
                    proc_control_node_B.b_A_data[ctemp_tmp_tmp].im *
                    proc_control_node_B.t_h -
                    (proc_control_node_B.b_A_data[colssq_tmp].im *
                     proc_control_node_B.shift.re - proc_control_node_B.shift.im
                     * proc_control_node_B.ascale_im);
                  proc_control_node_B.b_A_data[colssq_tmp].re =
                    proc_control_node_B.colssq;
                  proc_control_node_B.b_A_data[colssq_tmp].im =
                    proc_control_node_B.absxk_lb;
                }

                proc_control_node_B.jp1 = proc_control_node_B.j_f - 1;
                proc_control_node_B.j_f++;
              }
            }

            proc_control_node_B.jiter++;
          }
        }
      } else {
        guard2 = true;
        exitg1 = 1;
      }
    } while (exitg1 == 0);
  } else {
    guard1 = true;
  }

  if (guard2) {
    if (failed) {
      *info = proc_control_node_B.n_h + 1;
      for (proc_control_node_B.nm1 = 0; proc_control_node_B.nm1 <=
           proc_control_node_B.n_h; proc_control_node_B.nm1++) {
        alpha1_data[proc_control_node_B.nm1].re = (rtNaN);
        alpha1_data[proc_control_node_B.nm1].im = 0.0;
        beta1_data[proc_control_node_B.nm1].re = (rtNaN);
        beta1_data[proc_control_node_B.nm1].im = 0.0;
      }
    } else {
      guard1 = true;
    }
  }

  if (guard1) {
    proc_control_node_B.n_h = ilo - 2;
    for (proc_control_node_B.nm1 = 0; proc_control_node_B.nm1 <=
         proc_control_node_B.n_h; proc_control_node_B.nm1++) {
      alpha1_data[proc_control_node_B.nm1] =
        proc_control_node_B.b_A_data[proc_control_node_B.nm1 +
        proc_control_node_B.b_A_size_idx_0 * proc_control_node_B.nm1];
    }
  }
}

static void proc_control_node_xzgeev_b(const real_T A_data[], const int32_T
  A_size[2], int32_T *info, creal_T alpha1_data[], int32_T *alpha1_size, creal_T
  beta1_data[], int32_T *beta1_size)
{
  boolean_T exitg1;
  boolean_T guard1 = false;
  boolean_T ilascl;
  boolean_T notdone;
  proc_control_node_B.loop_ub_cp = A_size[0] * A_size[1];
  for (proc_control_node_B.b_k_ds = 0; proc_control_node_B.b_k_ds <
       proc_control_node_B.loop_ub_cp; proc_control_node_B.b_k_ds++) {
    proc_control_node_B.At_data[proc_control_node_B.b_k_ds].re =
      A_data[proc_control_node_B.b_k_ds];
    proc_control_node_B.At_data[proc_control_node_B.b_k_ds].im = 0.0;
  }

  proc_control_node_B.b_At_size[0] = A_size[0];
  proc_control_node_B.b_At_size[1] = A_size[1];
  proc_control_node_B.loop_ub_cp = A_size[0] * A_size[1];
  if (0 <= proc_control_node_B.loop_ub_cp - 1) {
    memcpy(&proc_control_node_B.b_At_data[0], &proc_control_node_B.At_data[0],
           proc_control_node_B.loop_ub_cp * sizeof(creal_T));
  }

  *info = 0;
  proc_control_node_B.anrm = 0.0;
  proc_control_node_B.b_k_ds = 0;
  exitg1 = false;
  while ((!exitg1) && (proc_control_node_B.b_k_ds <=
                       proc_control_node_B.loop_ub_cp - 1)) {
    proc_control_node_B.absxk_h = proc_control_node_rt_hypotd_snf
      (proc_control_node_B.At_data[proc_control_node_B.b_k_ds].re,
       proc_control_node_B.At_data[proc_control_node_B.b_k_ds].im);
    if (rtIsNaN(proc_control_node_B.absxk_h)) {
      proc_control_node_B.anrm = (rtNaN);
      exitg1 = true;
    } else {
      if (proc_control_node_B.absxk_h > proc_control_node_B.anrm) {
        proc_control_node_B.anrm = proc_control_node_B.absxk_h;
      }

      proc_control_node_B.b_k_ds++;
    }
  }

  if (rtIsInf(proc_control_node_B.anrm) || rtIsNaN(proc_control_node_B.anrm)) {
    *alpha1_size = A_size[0];
    proc_control_node_B.loop_ub_cp = A_size[0];
    for (proc_control_node_B.b_k_ds = 0; proc_control_node_B.b_k_ds <
         proc_control_node_B.loop_ub_cp; proc_control_node_B.b_k_ds++) {
      alpha1_data[proc_control_node_B.b_k_ds].re = (rtNaN);
      alpha1_data[proc_control_node_B.b_k_ds].im = 0.0;
    }

    *beta1_size = A_size[0];
    proc_control_node_B.loop_ub_cp = A_size[0];
    for (proc_control_node_B.b_k_ds = 0; proc_control_node_B.b_k_ds <
         proc_control_node_B.loop_ub_cp; proc_control_node_B.b_k_ds++) {
      beta1_data[proc_control_node_B.b_k_ds].re = (rtNaN);
      beta1_data[proc_control_node_B.b_k_ds].im = 0.0;
    }
  } else {
    ilascl = false;
    proc_control_node_B.absxk_h = proc_control_node_B.anrm;
    guard1 = false;
    if ((proc_control_node_B.anrm > 0.0) && (proc_control_node_B.anrm <
         6.7178761075670888E-139)) {
      proc_control_node_B.absxk_h = 6.7178761075670888E-139;
      ilascl = true;
      guard1 = true;
    } else if (proc_control_node_B.anrm > 1.4885657073574029E+138) {
      proc_control_node_B.absxk_h = 1.4885657073574029E+138;
      ilascl = true;
      guard1 = true;
    }

    if (guard1) {
      proc_control_node_B.b_At_size[0] = A_size[0];
      proc_control_node_B.b_At_size[1] = A_size[1];
      if (0 <= proc_control_node_B.loop_ub_cp - 1) {
        memcpy(&proc_control_node_B.b_At_data[0], &proc_control_node_B.At_data[0],
               proc_control_node_B.loop_ub_cp * sizeof(creal_T));
      }

      proc_control_node_B.cfromc = proc_control_node_B.anrm;
      proc_control_node_B.ctoc = proc_control_node_B.absxk_h;
      notdone = true;
      while (notdone) {
        proc_control_node_B.cfrom1 = proc_control_node_B.cfromc *
          2.0041683600089728E-292;
        proc_control_node_B.cto1 = proc_control_node_B.ctoc /
          4.9896007738368E+291;
        if ((proc_control_node_B.cfrom1 > proc_control_node_B.ctoc) &&
            (proc_control_node_B.ctoc != 0.0)) {
          proc_control_node_B.mul = 2.0041683600089728E-292;
          proc_control_node_B.cfromc = proc_control_node_B.cfrom1;
        } else if (proc_control_node_B.cto1 > proc_control_node_B.cfromc) {
          proc_control_node_B.mul = 4.9896007738368E+291;
          proc_control_node_B.ctoc = proc_control_node_B.cto1;
        } else {
          proc_control_node_B.mul = proc_control_node_B.ctoc /
            proc_control_node_B.cfromc;
          notdone = false;
        }

        proc_control_node_B.loop_ub_cp = proc_control_node_B.b_At_size[0] *
          proc_control_node_B.b_At_size[1];
        for (proc_control_node_B.b_k_ds = 0; proc_control_node_B.b_k_ds <
             proc_control_node_B.loop_ub_cp; proc_control_node_B.b_k_ds++) {
          proc_control_node_B.b_At_data[proc_control_node_B.b_k_ds].re *=
            proc_control_node_B.mul;
          proc_control_node_B.b_At_data[proc_control_node_B.b_k_ds].im *=
            proc_control_node_B.mul;
        }
      }
    }

    proc_control_node_xzggbal_b(proc_control_node_B.b_At_data,
      proc_control_node_B.b_At_size, proc_control_node_B.At_data,
      proc_control_node_B.At_size, &proc_control_node_B.loop_ub_cp,
      &proc_control_node_B.b_k_ds, proc_control_node_B.rscale_data,
      &proc_control_node_B.rscale_size);
    proc_control_node_xzgghrd_b(proc_control_node_B.loop_ub_cp,
      proc_control_node_B.b_k_ds, proc_control_node_B.At_data,
      proc_control_node_B.At_size, proc_control_node_B.b_At_data,
      proc_control_node_B.b_At_size);
    proc_control_node_xzhgeqz_b(proc_control_node_B.b_At_data,
      proc_control_node_B.b_At_size, proc_control_node_B.loop_ub_cp,
      proc_control_node_B.b_k_ds, info, alpha1_data, alpha1_size, beta1_data,
      beta1_size);
    if ((*info != 0) || (!ilascl)) {
    } else {
      notdone = true;
      while (notdone) {
        proc_control_node_B.cfrom1 = proc_control_node_B.absxk_h *
          2.0041683600089728E-292;
        proc_control_node_B.cto1 = proc_control_node_B.anrm /
          4.9896007738368E+291;
        if ((proc_control_node_B.cfrom1 > proc_control_node_B.anrm) &&
            (proc_control_node_B.anrm != 0.0)) {
          proc_control_node_B.mul = 2.0041683600089728E-292;
          proc_control_node_B.absxk_h = proc_control_node_B.cfrom1;
        } else if (proc_control_node_B.cto1 > proc_control_node_B.absxk_h) {
          proc_control_node_B.mul = 4.9896007738368E+291;
          proc_control_node_B.anrm = proc_control_node_B.cto1;
        } else {
          proc_control_node_B.mul = proc_control_node_B.anrm /
            proc_control_node_B.absxk_h;
          notdone = false;
        }

        proc_control_node_B.loop_ub_cp = *alpha1_size;
        for (proc_control_node_B.b_k_ds = 0; proc_control_node_B.b_k_ds <
             proc_control_node_B.loop_ub_cp; proc_control_node_B.b_k_ds++) {
          proc_control_node_B.alpha1 = alpha1_data[proc_control_node_B.b_k_ds];
          proc_control_node_B.alpha1.re *= proc_control_node_B.mul;
          proc_control_node_B.alpha1.im *= proc_control_node_B.mul;
          alpha1_data[proc_control_node_B.b_k_ds] = proc_control_node_B.alpha1;
        }
      }
    }
  }
}

static void proc_control_n_xzlarf_b4nwkzrtq(int32_T m, int32_T n, int32_T iv0,
  real_T tau, const real_T C_data[], const int32_T C_size[2], int32_T ic0,
  int32_T ldc, real_T work_data[], real_T b_C_data[], int32_T b_C_size[2])
{
  int32_T b;
  int32_T d;
  int32_T exitg1;
  int32_T jA;
  int32_T rowleft;
  int32_T rowright;
  boolean_T exitg2;
  b_C_size[0] = C_size[0];
  b_C_size[1] = C_size[1];
  jA = C_size[0] * C_size[1];
  if (0 <= jA - 1) {
    memcpy(&b_C_data[0], &C_data[0], jA * sizeof(real_T));
  }

  if (tau != 0.0) {
    proc_control_node_B.lastv_f = n;
    proc_control_node_B.lastc_jn = (iv0 + n) - 2;
    while ((proc_control_node_B.lastv_f > 0) &&
           (C_data[proc_control_node_B.lastc_jn] == 0.0)) {
      proc_control_node_B.lastv_f--;
      proc_control_node_B.lastc_jn--;
    }

    proc_control_node_B.lastc_jn = m;
    exitg2 = false;
    while ((!exitg2) && (proc_control_node_B.lastc_jn > 0)) {
      rowleft = (ic0 + proc_control_node_B.lastc_jn) - 1;
      rowright = (proc_control_node_B.lastv_f - 1) * ldc + rowleft;
      do {
        exitg1 = 0;
        if (((ldc > 0) && (rowleft <= rowright)) || ((ldc < 0) && (rowleft >=
              rowright))) {
          if (C_data[rowleft - 1] != 0.0) {
            exitg1 = 1;
          } else {
            rowleft += ldc;
          }
        } else {
          proc_control_node_B.lastc_jn--;
          exitg1 = 2;
        }
      } while (exitg1 == 0);

      if (exitg1 == 1) {
        exitg2 = true;
      }
    }

    b_C_size[0] = C_size[0];
    b_C_size[1] = C_size[1];
    if (0 <= jA - 1) {
      memcpy(&b_C_data[0], &C_data[0], jA * sizeof(real_T));
    }
  } else {
    proc_control_node_B.lastv_f = 0;
    proc_control_node_B.lastc_jn = 0;
  }

  if (proc_control_node_B.lastv_f > 0) {
    if (proc_control_node_B.lastc_jn != 0) {
      if (0 <= proc_control_node_B.lastc_jn - 1) {
        memset(&work_data[0], 0, proc_control_node_B.lastc_jn * sizeof(real_T));
      }

      proc_control_node_B.ix_ie = iv0 - 1;
      b = (proc_control_node_B.lastv_f - 1) * ldc + ic0;
      for (rowright = ic0; ldc < 0 ? rowright >= b : rowright <= b; rowright +=
           ldc) {
        d = rowright + proc_control_node_B.lastc_jn;
        for (jA = rowright; jA < d; jA++) {
          rowleft = jA - rowright;
          work_data[rowleft] += b_C_data[jA - 1] *
            b_C_data[proc_control_node_B.ix_ie];
        }

        proc_control_node_B.ix_ie++;
      }
    }

    if (!(-tau == 0.0)) {
      jA = ic0;
      for (rowright = 0; rowright < proc_control_node_B.lastv_f; rowright++) {
        rowleft = (iv0 + rowright) - 1;
        if (b_C_data[rowleft] != 0.0) {
          proc_control_node_B.temp_m = b_C_data[rowleft] * -tau;
          proc_control_node_B.ix_ie = (proc_control_node_B.lastc_jn + jA) - 1;
          for (rowleft = jA; rowleft <= proc_control_node_B.ix_ie; rowleft++) {
            b_C_data[rowleft - 1] += work_data[rowleft - jA] *
              proc_control_node_B.temp_m;
          }
        }

        jA += ldc;
      }
    }
  }
}

static void proc_control__xzlarf_b4nwkzrtqq(int32_T m, int32_T n, int32_T iv0,
  real_T tau, const real_T C_data[], const int32_T C_size[2], int32_T ic0,
  int32_T ldc, real_T work_data[], real_T b_C_data[], int32_T b_C_size[2])
{
  int32_T b_C;
  int32_T coltop;
  int32_T d;
  int32_T exitg1;
  int32_T ia;
  int32_T jA;
  boolean_T exitg2;
  b_C_size[0] = C_size[0];
  b_C_size[1] = C_size[1];
  jA = C_size[0] * C_size[1];
  if (0 <= jA - 1) {
    memcpy(&b_C_data[0], &C_data[0], jA * sizeof(real_T));
  }

  if (tau != 0.0) {
    proc_control_node_B.lastv_k = m;
    proc_control_node_B.lastc_n = (iv0 + m) - 2;
    while ((proc_control_node_B.lastv_k > 0) &&
           (C_data[proc_control_node_B.lastc_n] == 0.0)) {
      proc_control_node_B.lastv_k--;
      proc_control_node_B.lastc_n--;
    }

    proc_control_node_B.lastc_n = n;
    exitg2 = false;
    while ((!exitg2) && (proc_control_node_B.lastc_n > 0)) {
      coltop = (proc_control_node_B.lastc_n - 1) * ldc + ic0;
      ia = coltop;
      do {
        exitg1 = 0;
        if (ia <= (coltop + proc_control_node_B.lastv_k) - 1) {
          if (C_data[ia - 1] != 0.0) {
            exitg1 = 1;
          } else {
            ia++;
          }
        } else {
          proc_control_node_B.lastc_n--;
          exitg1 = 2;
        }
      } while (exitg1 == 0);

      if (exitg1 == 1) {
        exitg2 = true;
      }
    }

    proc_control_node_B.lastc_n--;
    b_C_size[0] = C_size[0];
    b_C_size[1] = C_size[1];
    if (0 <= jA - 1) {
      memcpy(&b_C_data[0], &C_data[0], jA * sizeof(real_T));
    }
  } else {
    proc_control_node_B.lastv_k = 0;
    proc_control_node_B.lastc_n = -1;
  }

  if (proc_control_node_B.lastv_k > 0) {
    if (proc_control_node_B.lastc_n + 1 != 0) {
      if (0 <= proc_control_node_B.lastc_n) {
        memset(&work_data[0], 0, (proc_control_node_B.lastc_n + 1) * sizeof
               (real_T));
      }

      jA = 0;
      b_C = ldc * proc_control_node_B.lastc_n + ic0;
      for (coltop = ic0; ldc < 0 ? coltop >= b_C : coltop <= b_C; coltop += ldc)
      {
        proc_control_node_B.c_ea = 0.0;
        d = coltop + proc_control_node_B.lastv_k;
        for (ia = coltop; ia < d; ia++) {
          proc_control_node_B.c_ea += b_C_data[((iv0 + ia) - coltop) - 1] *
            b_C_data[ia - 1];
        }

        work_data[jA] += proc_control_node_B.c_ea;
        jA++;
      }
    }

    if (!(-tau == 0.0)) {
      jA = ic0;
      for (ia = 0; ia <= proc_control_node_B.lastc_n; ia++) {
        if (work_data[ia] != 0.0) {
          proc_control_node_B.c_ea = work_data[ia] * -tau;
          b_C = (proc_control_node_B.lastv_k + jA) - 1;
          for (coltop = jA; coltop <= b_C; coltop++) {
            b_C_data[coltop - 1] += b_C_data[((iv0 + coltop) - jA) - 1] *
              proc_control_node_B.c_ea;
          }
        }

        jA += ldc;
      }
    }
  }
}

static void proc_control_node_xgehrd_b(const real_T a_data[], const int32_T
  a_size[2], real_T b_a_data[], int32_T b_a_size[2])
{
  proc_control_node_B.c_a_size[0] = a_size[0];
  proc_control_node_B.c_a_size[1] = a_size[1];
  proc_control_node_B.n_c = a_size[0] * a_size[1];
  if (0 <= proc_control_node_B.n_c - 1) {
    memcpy(&proc_control_node_B.c_a_data[0], &a_data[0], proc_control_node_B.n_c
           * sizeof(real_T));
  }

  proc_control_node_B.n_c = a_size[0];
  proc_control_node_B.c_a_ez = a_size[0];
  if (0 <= proc_control_node_B.c_a_ez - 1) {
    memset(&proc_control_node_B.work_data_e[0], 0, proc_control_node_B.c_a_ez *
           sizeof(real_T));
  }

  proc_control_node_B.e_bv = a_size[0] - 2;
  for (proc_control_node_B.c_a_ez = 0; proc_control_node_B.c_a_ez <=
       proc_control_node_B.e_bv; proc_control_node_B.c_a_ez++) {
    proc_control_node_B.im1n_k = proc_control_node_B.c_a_ez *
      proc_control_node_B.n_c + 2;
    proc_control_node_B.in_h = (proc_control_node_B.c_a_ez + 1) *
      proc_control_node_B.n_c + 1;
    if (proc_control_node_B.c_a_ez + 3 < proc_control_node_B.n_c) {
      proc_control_node_B.b_i_c = proc_control_node_B.c_a_ez + 3;
    } else {
      proc_control_node_B.b_i_c = proc_control_node_B.n_c;
    }

    proc_control_node_B.c_a_size_k[0] = proc_control_node_B.c_a_size[0];
    proc_control_node_B.c_a_size_k[1] = proc_control_node_B.c_a_size[1];
    proc_control_node_B.loop_ub_om = proc_control_node_B.c_a_size[0] *
      proc_control_node_B.c_a_size[1] - 1;
    if (0 <= proc_control_node_B.loop_ub_om) {
      memcpy(&proc_control_node_B.c_a_data_m[0], &proc_control_node_B.c_a_data[0],
             (proc_control_node_B.loop_ub_om + 1) * sizeof(real_T));
    }

    proc_control_node_xzlarfg_b4((proc_control_node_B.n_c -
      proc_control_node_B.c_a_ez) - 1, proc_control_node_B.c_a_data
      [(proc_control_node_B.c_a_ez + proc_control_node_B.c_a_size[0] *
        proc_control_node_B.c_a_ez) + 1], proc_control_node_B.c_a_data_m,
      proc_control_node_B.c_a_size_k, proc_control_node_B.b_i_c +
      proc_control_node_B.c_a_ez * proc_control_node_B.n_c,
      &proc_control_node_B.b_alpha1, proc_control_node_B.c_a_data,
      proc_control_node_B.c_a_size, &proc_control_node_B.tau_i);
    proc_control_node_B.c_a_data[(proc_control_node_B.c_a_ez +
      proc_control_node_B.c_a_size[0] * proc_control_node_B.c_a_ez) + 1] = 1.0;
    proc_control_n_xzlarf_b4nwkzrtq(proc_control_node_B.n_c,
      (proc_control_node_B.n_c - proc_control_node_B.c_a_ez) - 1,
      proc_control_node_B.c_a_ez + proc_control_node_B.im1n_k,
      proc_control_node_B.tau_i, proc_control_node_B.c_a_data,
      proc_control_node_B.c_a_size, proc_control_node_B.in_h,
      proc_control_node_B.n_c, proc_control_node_B.work_data_e,
      proc_control_node_B.c_a_data_m, proc_control_node_B.d_a_size);
    proc_control__xzlarf_b4nwkzrtqq((proc_control_node_B.n_c -
      proc_control_node_B.c_a_ez) - 1, (proc_control_node_B.n_c -
      proc_control_node_B.c_a_ez) - 1, proc_control_node_B.c_a_ez +
      proc_control_node_B.im1n_k, proc_control_node_B.tau_i,
      proc_control_node_B.c_a_data_m, proc_control_node_B.d_a_size,
      (proc_control_node_B.c_a_ez + proc_control_node_B.in_h) + 1,
      proc_control_node_B.n_c, proc_control_node_B.work_data_e,
      proc_control_node_B.c_a_data, proc_control_node_B.c_a_size);
    proc_control_node_B.c_a_data[(proc_control_node_B.c_a_ez +
      proc_control_node_B.c_a_size[0] * proc_control_node_B.c_a_ez) + 1] =
      proc_control_node_B.b_alpha1;
  }

  b_a_size[0] = proc_control_node_B.c_a_size[0];
  b_a_size[1] = proc_control_node_B.c_a_size[1];
  proc_control_node_B.n_c = proc_control_node_B.c_a_size[0] *
    proc_control_node_B.c_a_size[1];
  if (0 <= proc_control_node_B.n_c - 1) {
    memcpy(&b_a_data[0], &proc_control_node_B.c_a_data[0],
           proc_control_node_B.n_c * sizeof(real_T));
  }
}

static real_T proc_control_node_xnrm2_b4(int32_T n, const real_T x[3])
{
  real_T y;
  y = 0.0;
  if (n < 1) {
  } else if (n == 1) {
    y = fabs(x[1]);
  } else {
    proc_control_node_B.scale_g = 3.3121686421112381E-170;
    proc_control_node_B.absxk_c = fabs(x[1]);
    if (proc_control_node_B.absxk_c > 3.3121686421112381E-170) {
      y = 1.0;
      proc_control_node_B.scale_g = proc_control_node_B.absxk_c;
    } else {
      proc_control_node_B.t_a = proc_control_node_B.absxk_c /
        3.3121686421112381E-170;
      y = proc_control_node_B.t_a * proc_control_node_B.t_a;
    }

    proc_control_node_B.absxk_c = fabs(x[2]);
    if (proc_control_node_B.absxk_c > proc_control_node_B.scale_g) {
      proc_control_node_B.t_a = proc_control_node_B.scale_g /
        proc_control_node_B.absxk_c;
      y = y * proc_control_node_B.t_a * proc_control_node_B.t_a + 1.0;
      proc_control_node_B.scale_g = proc_control_node_B.absxk_c;
    } else {
      proc_control_node_B.t_a = proc_control_node_B.absxk_c /
        proc_control_node_B.scale_g;
      y += proc_control_node_B.t_a * proc_control_node_B.t_a;
    }

    y = proc_control_node_B.scale_g * sqrt(y);
  }

  return y;
}

static void proc_control_node_xzlarfg_b4n(int32_T n, real_T alpha1, real_T x[3],
  real_T *b_alpha1, real_T *tau)
{
  int32_T k;
  int32_T knt;
  *b_alpha1 = alpha1;
  *tau = 0.0;
  if (n > 0) {
    proc_control_node_B.xnorm_h = proc_control_node_xnrm2_b4(n - 1, x);
    if (proc_control_node_B.xnorm_h != 0.0) {
      proc_control_node_B.xnorm_h = proc_control_node_rt_hypotd_snf(alpha1,
        proc_control_node_B.xnorm_h);
      if (alpha1 >= 0.0) {
        proc_control_node_B.xnorm_h = -proc_control_node_B.xnorm_h;
      }

      if (fabs(proc_control_node_B.xnorm_h) < 1.0020841800044864E-292) {
        knt = -1;
        do {
          knt++;
          for (k = 2; k <= n; k++) {
            x[k - 1] *= 9.9792015476736E+291;
          }

          proc_control_node_B.xnorm_h *= 9.9792015476736E+291;
          *b_alpha1 *= 9.9792015476736E+291;
        } while (!(fabs(proc_control_node_B.xnorm_h) >= 1.0020841800044864E-292));

        proc_control_node_B.xnorm_h = proc_control_node_rt_hypotd_snf(*b_alpha1,
          proc_control_node_xnrm2_b4(n - 1, x));
        if (*b_alpha1 >= 0.0) {
          proc_control_node_B.xnorm_h = -proc_control_node_B.xnorm_h;
        }

        *tau = (proc_control_node_B.xnorm_h - *b_alpha1) /
          proc_control_node_B.xnorm_h;
        *b_alpha1 = 1.0 / (*b_alpha1 - proc_control_node_B.xnorm_h);
        for (k = 2; k <= n; k++) {
          x[k - 1] *= *b_alpha1;
        }

        for (k = 0; k <= knt; k++) {
          proc_control_node_B.xnorm_h *= 1.0020841800044864E-292;
        }

        *b_alpha1 = proc_control_node_B.xnorm_h;
      } else {
        *tau = (proc_control_node_B.xnorm_h - alpha1) /
          proc_control_node_B.xnorm_h;
        *b_alpha1 = 1.0 / (alpha1 - proc_control_node_B.xnorm_h);
        for (k = 2; k <= n; k++) {
          x[k - 1] *= *b_alpha1;
        }

        *b_alpha1 = proc_control_node_B.xnorm_h;
      }
    }
  }
}

static void proc_control_node_xdlanv2(real_T a, real_T b, real_T c, real_T d,
  real_T *rt1r, real_T *rt1i, real_T *rt2r, real_T *rt2i, real_T *b_a, real_T
  *b_b, real_T *b_c, real_T *b_d, real_T *cs, real_T *sn)
{
  int32_T b_0;
  int32_T c_0;
  boolean_T tmp;
  *b_d = d;
  *b_c = c;
  *b_b = b;
  *b_a = a;
  if (c == 0.0) {
    *cs = 1.0;
    *sn = 0.0;
  } else if (b == 0.0) {
    *cs = 0.0;
    *sn = 1.0;
    *b_d = a;
    *b_a = d;
    *b_b = -c;
    *b_c = 0.0;
  } else {
    proc_control_node_B.tau_a = a - d;
    if ((proc_control_node_B.tau_a == 0.0) && ((b < 0.0) != (c < 0.0))) {
      *cs = 1.0;
      *sn = 0.0;
    } else {
      proc_control_node_B.p_i = 0.5 * proc_control_node_B.tau_a;
      proc_control_node_B.z_kq = fabs(b);
      proc_control_node_B.bcmis = fabs(c);
      tmp = rtIsNaN(proc_control_node_B.bcmis);
      if ((proc_control_node_B.z_kq > proc_control_node_B.bcmis) || tmp) {
        proc_control_node_B.bcmax = proc_control_node_B.z_kq;
      } else {
        proc_control_node_B.bcmax = proc_control_node_B.bcmis;
      }

      if ((proc_control_node_B.z_kq < proc_control_node_B.bcmis) || tmp) {
        proc_control_node_B.bcmis = proc_control_node_B.z_kq;
      }

      if (!(b < 0.0)) {
        b_0 = 1;
      } else {
        b_0 = -1;
      }

      if (!(c < 0.0)) {
        c_0 = 1;
      } else {
        c_0 = -1;
      }

      proc_control_node_B.bcmis = proc_control_node_B.bcmis * static_cast<real_T>
        (b_0) * static_cast<real_T>(c_0);
      proc_control_node_B.scale_i = fabs(proc_control_node_B.p_i);
      if ((!(proc_control_node_B.scale_i > proc_control_node_B.bcmax)) &&
          (!rtIsNaN(proc_control_node_B.bcmax))) {
        proc_control_node_B.scale_i = proc_control_node_B.bcmax;
      }

      proc_control_node_B.z_kq = proc_control_node_B.p_i /
        proc_control_node_B.scale_i * proc_control_node_B.p_i +
        proc_control_node_B.bcmax / proc_control_node_B.scale_i *
        proc_control_node_B.bcmis;
      if (proc_control_node_B.z_kq >= 8.8817841970012523E-16) {
        if (!(proc_control_node_B.p_i < 0.0)) {
          proc_control_node_B.tau_a = sqrt(proc_control_node_B.scale_i) * sqrt
            (proc_control_node_B.z_kq);
        } else {
          proc_control_node_B.tau_a = -(sqrt(proc_control_node_B.scale_i) * sqrt
            (proc_control_node_B.z_kq));
        }

        proc_control_node_B.z_kq = proc_control_node_B.p_i +
          proc_control_node_B.tau_a;
        *b_a = d + proc_control_node_B.z_kq;
        *b_d = d - proc_control_node_B.bcmax / proc_control_node_B.z_kq *
          proc_control_node_B.bcmis;
        proc_control_node_B.tau_a = proc_control_node_rt_hypotd_snf(c,
          proc_control_node_B.z_kq);
        *cs = proc_control_node_B.z_kq / proc_control_node_B.tau_a;
        *sn = c / proc_control_node_B.tau_a;
        *b_b = b - c;
        *b_c = 0.0;
      } else {
        proc_control_node_B.bcmax = b + c;
        proc_control_node_B.tau_a = proc_control_node_rt_hypotd_snf
          (proc_control_node_B.bcmax, proc_control_node_B.tau_a);
        *cs = sqrt((fabs(proc_control_node_B.bcmax) / proc_control_node_B.tau_a
                    + 1.0) * 0.5);
        if (!(proc_control_node_B.bcmax < 0.0)) {
          b_0 = 1;
        } else {
          b_0 = -1;
        }

        *sn = -(proc_control_node_B.p_i / (proc_control_node_B.tau_a * *cs)) *
          static_cast<real_T>(b_0);
        proc_control_node_B.p_i = a * *cs + b * *sn;
        proc_control_node_B.tau_a = -a * *sn + b * *cs;
        proc_control_node_B.bcmax = c * *cs + d * *sn;
        proc_control_node_B.z_kq = -c * *sn + d * *cs;
        *b_b = proc_control_node_B.tau_a * *cs + proc_control_node_B.z_kq * *sn;
        *b_c = -proc_control_node_B.p_i * *sn + proc_control_node_B.bcmax * *cs;
        proc_control_node_B.bcmax = ((proc_control_node_B.p_i * *cs +
          proc_control_node_B.bcmax * *sn) + (-proc_control_node_B.tau_a * *sn +
          proc_control_node_B.z_kq * *cs)) * 0.5;
        *b_a = proc_control_node_B.bcmax;
        *b_d = proc_control_node_B.bcmax;
        if (*b_c != 0.0) {
          if (*b_b != 0.0) {
            if ((*b_b < 0.0) == (*b_c < 0.0)) {
              proc_control_node_B.bcmis = sqrt(fabs(*b_b));
              proc_control_node_B.z_kq = sqrt(fabs(*b_c));
              if (!(*b_c < 0.0)) {
                proc_control_node_B.p_i = proc_control_node_B.bcmis *
                  proc_control_node_B.z_kq;
              } else {
                proc_control_node_B.p_i = -(proc_control_node_B.bcmis *
                  proc_control_node_B.z_kq);
              }

              proc_control_node_B.tau_a = 1.0 / sqrt(fabs(*b_b + *b_c));
              *b_a = proc_control_node_B.bcmax + proc_control_node_B.p_i;
              *b_d = proc_control_node_B.bcmax - proc_control_node_B.p_i;
              *b_b -= *b_c;
              *b_c = 0.0;
              proc_control_node_B.p_i = proc_control_node_B.bcmis *
                proc_control_node_B.tau_a;
              proc_control_node_B.tau_a *= proc_control_node_B.z_kq;
              proc_control_node_B.bcmax = *cs * proc_control_node_B.p_i - *sn *
                proc_control_node_B.tau_a;
              *sn = *cs * proc_control_node_B.tau_a + *sn *
                proc_control_node_B.p_i;
              *cs = proc_control_node_B.bcmax;
            }
          } else {
            *b_b = -*b_c;
            *b_c = 0.0;
            proc_control_node_B.bcmax = *cs;
            *cs = -*sn;
            *sn = proc_control_node_B.bcmax;
          }
        }
      }
    }
  }

  *rt1r = *b_a;
  *rt2r = *b_d;
  if (*b_c == 0.0) {
    *rt1i = 0.0;
    *rt2i = 0.0;
  } else {
    *rt1i = sqrt(fabs(*b_b)) * sqrt(fabs(*b_c));
    *rt2i = -*rt1i;
  }
}

static void proc_control_node_xrot_b(int32_T n, const real_T x_data[], const
  int32_T x_size[2], int32_T ix0, int32_T iy0, real_T c, real_T s, real_T
  b_x_data[], int32_T b_x_size[2])
{
  proc_control_node_B.loop_ub_tmp_p = x_size[0] * x_size[1];
  if (0 <= proc_control_node_B.loop_ub_tmp_p - 1) {
    memcpy(&proc_control_node_B.c_x_data_l[0], &x_data[0],
           proc_control_node_B.loop_ub_tmp_p * sizeof(real_T));
  }

  if (n >= 1) {
    for (proc_control_node_B.loop_ub_d = 0; proc_control_node_B.loop_ub_d < n;
         proc_control_node_B.loop_ub_d++) {
      proc_control_node_B.temp_tmp_d = (iy0 + proc_control_node_B.loop_ub_d) - 1;
      proc_control_node_B.c_x = (ix0 + proc_control_node_B.loop_ub_d) - 1;
      proc_control_node_B.temp =
        proc_control_node_B.c_x_data_l[proc_control_node_B.c_x] * c +
        proc_control_node_B.c_x_data_l[proc_control_node_B.temp_tmp_d] * s;
      proc_control_node_B.c_x_data_l[proc_control_node_B.temp_tmp_d] =
        proc_control_node_B.c_x_data_l[proc_control_node_B.temp_tmp_d] * c -
        proc_control_node_B.c_x_data_l[proc_control_node_B.c_x] * s;
      proc_control_node_B.c_x_data_l[proc_control_node_B.c_x] =
        proc_control_node_B.temp;
    }
  }

  b_x_size[0] = x_size[0];
  b_x_size[1] = x_size[1];
  if (0 <= proc_control_node_B.loop_ub_tmp_p - 1) {
    memcpy(&b_x_data[0], &proc_control_node_B.c_x_data_l[0],
           proc_control_node_B.loop_ub_tmp_p * sizeof(real_T));
  }
}

static void proc_control_node_eml_dlahqr_b(const real_T h_data[], const int32_T
  h_size[2], real_T b_h_data[], int32_T b_h_size[2], int32_T *info)
{
  boolean_T exitg1;
  boolean_T exitg2;
  boolean_T exitg3;
  boolean_T goto150;
  b_h_size[0] = h_size[0];
  b_h_size[1] = h_size[1];
  proc_control_node_B.k_o = h_size[0] * h_size[1];
  if (0 <= proc_control_node_B.k_o - 1) {
    memcpy(&b_h_data[0], &h_data[0], proc_control_node_B.k_o * sizeof(real_T));
  }

  proc_control_node_B.n_j4 = h_size[0];
  proc_control_node_B.ldh = h_size[0];
  *info = 0;
  if (1 == proc_control_node_B.n_j4) {
  } else {
    proc_control_node_B.v_d[0] = 0.0;
    proc_control_node_B.v_d[1] = 0.0;
    proc_control_node_B.v_d[2] = 0.0;
    proc_control_node_B.itmax = proc_control_node_B.n_j4 - 4;
    for (proc_control_node_B.i_k = 0; proc_control_node_B.i_k <=
         proc_control_node_B.itmax; proc_control_node_B.i_k++) {
      proc_control_node_B.b_h_data_tmp = b_h_size[0] * proc_control_node_B.i_k;
      b_h_data[(proc_control_node_B.i_k + proc_control_node_B.b_h_data_tmp) + 2]
        = 0.0;
      b_h_data[(proc_control_node_B.i_k + proc_control_node_B.b_h_data_tmp) + 3]
        = 0.0;
    }

    if (1 <= proc_control_node_B.n_j4 - 2) {
      b_h_data[(proc_control_node_B.n_j4 + b_h_size[0] *
                (proc_control_node_B.n_j4 - 3)) - 1] = 0.0;
    }

    if (10.0 > proc_control_node_B.n_j4) {
      proc_control_node_B.SMLNUM = 10.0;
    } else {
      proc_control_node_B.SMLNUM = proc_control_node_B.n_j4;
    }

    proc_control_node_B.itmax = 30 * static_cast<int32_T>
      (proc_control_node_B.SMLNUM);
    proc_control_node_B.SMLNUM = static_cast<real_T>(proc_control_node_B.n_j4) /
      2.2204460492503131E-16 * 2.2250738585072014E-308;
    proc_control_node_B.i_k = proc_control_node_B.n_j4 - 1;
    exitg1 = false;
    while ((!exitg1) && (proc_control_node_B.i_k + 1 >= 1)) {
      proc_control_node_B.L = 1;
      goto150 = false;
      proc_control_node_B.b_h_b = 0;
      exitg2 = false;
      while ((!exitg2) && (proc_control_node_B.b_h_b <=
                           proc_control_node_B.itmax)) {
        proc_control_node_B.k_o = proc_control_node_B.i_k;
        exitg3 = false;
        while ((!exitg3) && (proc_control_node_B.k_o + 1 > proc_control_node_B.L))
        {
          proc_control_node_B.m_n = b_h_size[0] * (proc_control_node_B.k_o - 1);
          proc_control_node_B.ba = fabs(b_h_data[proc_control_node_B.k_o +
            proc_control_node_B.m_n]);
          if (proc_control_node_B.ba <= proc_control_node_B.SMLNUM) {
            exitg3 = true;
          } else {
            proc_control_node_B.b_h_data_tmp = b_h_size[0] *
              proc_control_node_B.k_o;
            proc_control_node_B.aa = b_h_data[proc_control_node_B.k_o +
              proc_control_node_B.b_h_data_tmp];
            proc_control_node_B.bb = fabs(proc_control_node_B.aa);
            proc_control_node_B.s_d = b_h_data[(proc_control_node_B.k_o +
              proc_control_node_B.m_n) - 1];
            proc_control_node_B.tst = fabs(proc_control_node_B.s_d) +
              proc_control_node_B.bb;
            if (proc_control_node_B.tst == 0.0) {
              if (proc_control_node_B.k_o - 1 >= 1) {
                proc_control_node_B.tst = fabs(b_h_data[(proc_control_node_B.k_o
                  + b_h_size[0] * (proc_control_node_B.k_o - 2)) - 1]);
              }

              if (proc_control_node_B.k_o + 2 <= proc_control_node_B.n_j4) {
                proc_control_node_B.tst += fabs(b_h_data
                  [(proc_control_node_B.k_o + b_h_size[0] *
                    proc_control_node_B.k_o) + 1]);
              }
            }

            if (proc_control_node_B.ba <= 2.2204460492503131E-16 *
                proc_control_node_B.tst) {
              proc_control_node_B.htmp2 = fabs(b_h_data[(proc_control_node_B.k_o
                + proc_control_node_B.b_h_data_tmp) - 1]);
              if (proc_control_node_B.ba > proc_control_node_B.htmp2) {
                proc_control_node_B.tst = proc_control_node_B.ba;
                proc_control_node_B.ba = proc_control_node_B.htmp2;
              } else {
                proc_control_node_B.tst = proc_control_node_B.htmp2;
              }

              proc_control_node_B.htmp2 = fabs(proc_control_node_B.s_d -
                proc_control_node_B.aa);
              if (proc_control_node_B.bb > proc_control_node_B.htmp2) {
                proc_control_node_B.aa = proc_control_node_B.bb;
                proc_control_node_B.bb = proc_control_node_B.htmp2;
              } else {
                proc_control_node_B.aa = proc_control_node_B.htmp2;
              }

              proc_control_node_B.s_d = proc_control_node_B.aa +
                proc_control_node_B.tst;
              proc_control_node_B.bb = proc_control_node_B.aa /
                proc_control_node_B.s_d * proc_control_node_B.bb *
                2.2204460492503131E-16;
              if ((proc_control_node_B.SMLNUM > proc_control_node_B.bb) ||
                  rtIsNaN(proc_control_node_B.bb)) {
                proc_control_node_B.bb = proc_control_node_B.SMLNUM;
              }

              if (proc_control_node_B.tst / proc_control_node_B.s_d *
                  proc_control_node_B.ba <= proc_control_node_B.bb) {
                exitg3 = true;
              } else {
                proc_control_node_B.k_o--;
              }
            } else {
              proc_control_node_B.k_o--;
            }
          }
        }

        proc_control_node_B.L = proc_control_node_B.k_o + 1;
        if (proc_control_node_B.k_o + 1 > 1) {
          b_h_data[proc_control_node_B.k_o + b_h_size[0] *
            (proc_control_node_B.k_o - 1)] = 0.0;
        }

        if (proc_control_node_B.k_o + 1 >= proc_control_node_B.i_k) {
          goto150 = true;
          exitg2 = true;
        } else {
          if (proc_control_node_B.b_h_b == 10) {
            proc_control_node_B.s_d = fabs(b_h_data[(proc_control_node_B.k_o +
              b_h_size[0] * proc_control_node_B.k_o) + 1]) + fabs(b_h_data
              [(proc_control_node_B.k_o + b_h_size[0] * (proc_control_node_B.k_o
              + 1)) + 2]);
            proc_control_node_B.ba = 0.75 * proc_control_node_B.s_d +
              b_h_data[proc_control_node_B.k_o + b_h_size[0] *
              proc_control_node_B.k_o];
            proc_control_node_B.aa = -0.4375 * proc_control_node_B.s_d;
            proc_control_node_B.htmp2 = proc_control_node_B.s_d;
            proc_control_node_B.bb = proc_control_node_B.ba;
          } else if (proc_control_node_B.b_h_b == 20) {
            proc_control_node_B.s_d = fabs(b_h_data[proc_control_node_B.i_k +
              b_h_size[0] * (proc_control_node_B.i_k - 1)]) + fabs(b_h_data
              [(proc_control_node_B.i_k + b_h_size[0] * (proc_control_node_B.i_k
              - 2)) - 1]);
            proc_control_node_B.ba = 0.75 * proc_control_node_B.s_d +
              b_h_data[proc_control_node_B.i_k + b_h_size[0] *
              proc_control_node_B.i_k];
            proc_control_node_B.aa = -0.4375 * proc_control_node_B.s_d;
            proc_control_node_B.htmp2 = proc_control_node_B.s_d;
            proc_control_node_B.bb = proc_control_node_B.ba;
          } else {
            proc_control_node_B.ba = b_h_data[(proc_control_node_B.i_k +
              b_h_size[0] * (proc_control_node_B.i_k - 1)) - 1];
            proc_control_node_B.htmp2 = b_h_data[proc_control_node_B.i_k +
              b_h_size[0] * (proc_control_node_B.i_k - 1)];
            proc_control_node_B.aa = b_h_data[(proc_control_node_B.i_k +
              b_h_size[0] * proc_control_node_B.i_k) - 1];
            proc_control_node_B.bb = b_h_data[proc_control_node_B.i_k +
              b_h_size[0] * proc_control_node_B.i_k];
          }

          proc_control_node_B.s_d = ((fabs(proc_control_node_B.ba) + fabs
            (proc_control_node_B.aa)) + fabs(proc_control_node_B.htmp2)) + fabs
            (proc_control_node_B.bb);
          if (proc_control_node_B.s_d == 0.0) {
            proc_control_node_B.ba = 0.0;
            proc_control_node_B.bb = 0.0;
            proc_control_node_B.tst = 0.0;
            proc_control_node_B.htmp2 = 0.0;
          } else {
            proc_control_node_B.ba /= proc_control_node_B.s_d;
            proc_control_node_B.bb /= proc_control_node_B.s_d;
            proc_control_node_B.tst = (proc_control_node_B.ba +
              proc_control_node_B.bb) / 2.0;
            proc_control_node_B.ba = (proc_control_node_B.ba -
              proc_control_node_B.tst) * (proc_control_node_B.bb -
              proc_control_node_B.tst) - proc_control_node_B.aa /
              proc_control_node_B.s_d * (proc_control_node_B.htmp2 /
              proc_control_node_B.s_d);
            proc_control_node_B.htmp2 = sqrt(fabs(proc_control_node_B.ba));
            if (proc_control_node_B.ba >= 0.0) {
              proc_control_node_B.ba = proc_control_node_B.tst *
                proc_control_node_B.s_d;
              proc_control_node_B.tst = proc_control_node_B.ba;
              proc_control_node_B.bb = proc_control_node_B.htmp2 *
                proc_control_node_B.s_d;
              proc_control_node_B.htmp2 = -proc_control_node_B.bb;
            } else {
              proc_control_node_B.ba = proc_control_node_B.tst +
                proc_control_node_B.htmp2;
              proc_control_node_B.tst -= proc_control_node_B.htmp2;
              if (fabs(proc_control_node_B.ba - proc_control_node_B.bb) <= fabs
                  (proc_control_node_B.tst - proc_control_node_B.bb)) {
                proc_control_node_B.ba *= proc_control_node_B.s_d;
                proc_control_node_B.tst = proc_control_node_B.ba;
              } else {
                proc_control_node_B.tst *= proc_control_node_B.s_d;
                proc_control_node_B.ba = proc_control_node_B.tst;
              }

              proc_control_node_B.bb = 0.0;
              proc_control_node_B.htmp2 = 0.0;
            }
          }

          proc_control_node_B.m_n = proc_control_node_B.i_k - 2;
          exitg3 = false;
          while ((!exitg3) && (proc_control_node_B.m_n + 1 >=
                               proc_control_node_B.k_o + 1)) {
            proc_control_node_B.h21s_tmp = b_h_size[0] * proc_control_node_B.m_n;
            proc_control_node_B.h21s = b_h_data[(proc_control_node_B.m_n +
              proc_control_node_B.h21s_tmp) + 1];
            proc_control_node_B.aa_tmp = b_h_data[proc_control_node_B.m_n +
              proc_control_node_B.h21s_tmp];
            proc_control_node_B.aa = proc_control_node_B.aa_tmp -
              proc_control_node_B.tst;
            proc_control_node_B.s_d = (fabs(proc_control_node_B.aa) + fabs
              (proc_control_node_B.htmp2)) + fabs(proc_control_node_B.h21s);
            proc_control_node_B.h21s /= proc_control_node_B.s_d;
            proc_control_node_B.h21s_tmp = b_h_size[0] *
              (proc_control_node_B.m_n + 1);
            proc_control_node_B.v_d[0] = (proc_control_node_B.aa /
              proc_control_node_B.s_d * (proc_control_node_B.aa_tmp -
              proc_control_node_B.ba) + b_h_data[proc_control_node_B.m_n +
              proc_control_node_B.h21s_tmp] * proc_control_node_B.h21s) -
              proc_control_node_B.htmp2 / proc_control_node_B.s_d *
              proc_control_node_B.bb;
            proc_control_node_B.aa = b_h_data[(proc_control_node_B.m_n +
              proc_control_node_B.h21s_tmp) + 1];
            proc_control_node_B.v_d[1] = (((proc_control_node_B.aa +
              proc_control_node_B.aa_tmp) - proc_control_node_B.ba) -
              proc_control_node_B.tst) * proc_control_node_B.h21s;
            proc_control_node_B.v_d[2] = b_h_data[(proc_control_node_B.m_n +
              proc_control_node_B.h21s_tmp) + 2] * proc_control_node_B.h21s;
            proc_control_node_B.s_d = (fabs(proc_control_node_B.v_d[0]) + fabs
              (proc_control_node_B.v_d[1])) + fabs(proc_control_node_B.v_d[2]);
            proc_control_node_B.v_d[0] /= proc_control_node_B.s_d;
            proc_control_node_B.v_d[1] /= proc_control_node_B.s_d;
            proc_control_node_B.v_d[2] /= proc_control_node_B.s_d;
            if (proc_control_node_B.m_n + 1 == proc_control_node_B.k_o + 1) {
              exitg3 = true;
            } else {
              proc_control_node_B.h21s_tmp = b_h_size[0] *
                (proc_control_node_B.m_n - 1);
              if (fabs(b_h_data[proc_control_node_B.m_n +
                       proc_control_node_B.h21s_tmp]) * (fabs
                   (proc_control_node_B.v_d[1]) + fabs(proc_control_node_B.v_d[2]))
                  <= ((fabs(b_h_data[(proc_control_node_B.m_n +
                                      proc_control_node_B.h21s_tmp) - 1]) + fabs
                       (proc_control_node_B.aa_tmp)) + fabs
                      (proc_control_node_B.aa)) * (2.2204460492503131E-16 * fabs
                   (proc_control_node_B.v_d[0]))) {
                exitg3 = true;
              } else {
                proc_control_node_B.m_n--;
              }
            }
          }

          for (proc_control_node_B.h21s_tmp = proc_control_node_B.m_n + 1;
               proc_control_node_B.h21s_tmp <= proc_control_node_B.i_k;
               proc_control_node_B.h21s_tmp++) {
            proc_control_node_B.nr = (proc_control_node_B.i_k -
              proc_control_node_B.h21s_tmp) + 2;
            if (3 < proc_control_node_B.nr) {
              proc_control_node_B.nr = 3;
            }

            if (proc_control_node_B.h21s_tmp > proc_control_node_B.m_n + 1) {
              proc_control_node_B.hoffset = ((proc_control_node_B.h21s_tmp - 2) *
                proc_control_node_B.ldh + proc_control_node_B.h21s_tmp) - 2;
              for (proc_control_node_B.b_h_data_tmp = 0;
                   proc_control_node_B.b_h_data_tmp < proc_control_node_B.nr;
                   proc_control_node_B.b_h_data_tmp++) {
                proc_control_node_B.v_d[proc_control_node_B.b_h_data_tmp] =
                  b_h_data[(proc_control_node_B.b_h_data_tmp +
                            proc_control_node_B.hoffset) + 1];
              }
            }

            proc_control_node_xzlarfg_b4n(proc_control_node_B.nr,
              proc_control_node_B.v_d[0], proc_control_node_B.v_d,
              &proc_control_node_B.ba, &proc_control_node_B.s_d);
            proc_control_node_B.v_d[0] = proc_control_node_B.ba;
            if (proc_control_node_B.h21s_tmp > proc_control_node_B.m_n + 1) {
              proc_control_node_B.b_h_data_tmp = b_h_size[0] *
                (proc_control_node_B.h21s_tmp - 2);
              b_h_data[(proc_control_node_B.h21s_tmp +
                        proc_control_node_B.b_h_data_tmp) - 1] =
                proc_control_node_B.ba;
              b_h_data[proc_control_node_B.h21s_tmp +
                proc_control_node_B.b_h_data_tmp] = 0.0;
              if (proc_control_node_B.h21s_tmp < proc_control_node_B.i_k) {
                b_h_data[(proc_control_node_B.h21s_tmp +
                          proc_control_node_B.b_h_data_tmp) + 1] = 0.0;
              }
            } else if (proc_control_node_B.m_n + 1 > proc_control_node_B.k_o + 1)
            {
              proc_control_node_B.b_h_data_tmp = (proc_control_node_B.h21s_tmp +
                b_h_size[0] * (proc_control_node_B.h21s_tmp - 2)) - 1;
              b_h_data[proc_control_node_B.b_h_data_tmp] *= 1.0 -
                proc_control_node_B.s_d;
            }

            proc_control_node_B.ba = proc_control_node_B.v_d[1];
            proc_control_node_B.tst = proc_control_node_B.s_d *
              proc_control_node_B.v_d[1];
            if (proc_control_node_B.nr == 3) {
              proc_control_node_B.aa = proc_control_node_B.v_d[2];
              proc_control_node_B.h21s = proc_control_node_B.s_d *
                proc_control_node_B.v_d[2];
              for (proc_control_node_B.nr = proc_control_node_B.h21s_tmp;
                   proc_control_node_B.nr <= proc_control_node_B.n_j4;
                   proc_control_node_B.nr++) {
                proc_control_node_B.bb = b_h_data[(proc_control_node_B.h21s_tmp
                  + b_h_size[0] * (proc_control_node_B.nr - 1)) - 1];
                proc_control_node_B.htmp2_tmp = b_h_size[0] *
                  (proc_control_node_B.nr - 1);
                proc_control_node_B.htmp2 =
                  (b_h_data[proc_control_node_B.h21s_tmp +
                   proc_control_node_B.htmp2_tmp] * proc_control_node_B.ba +
                   proc_control_node_B.bb) + b_h_data
                  [(proc_control_node_B.h21s_tmp + proc_control_node_B.htmp2_tmp)
                  + 1] * proc_control_node_B.aa;
                b_h_data[(proc_control_node_B.h21s_tmp +
                          proc_control_node_B.htmp2_tmp) - 1] =
                  proc_control_node_B.bb - proc_control_node_B.htmp2 *
                  proc_control_node_B.s_d;
                proc_control_node_B.hoffset = b_h_size[0] *
                  (proc_control_node_B.nr - 1);
                proc_control_node_B.b_h_data_tmp = proc_control_node_B.h21s_tmp
                  + proc_control_node_B.hoffset;
                b_h_data[proc_control_node_B.b_h_data_tmp] -=
                  proc_control_node_B.htmp2 * proc_control_node_B.tst;
                proc_control_node_B.b_h_data_tmp = (proc_control_node_B.h21s_tmp
                  + proc_control_node_B.hoffset) + 1;
                b_h_data[proc_control_node_B.b_h_data_tmp] -=
                  proc_control_node_B.htmp2 * proc_control_node_B.h21s;
              }

              if (proc_control_node_B.h21s_tmp + 3 < proc_control_node_B.i_k + 1)
              {
                proc_control_node_B.nr = proc_control_node_B.h21s_tmp + 3;
              } else {
                proc_control_node_B.nr = proc_control_node_B.i_k + 1;
              }

              proc_control_node_B.nr--;
              for (proc_control_node_B.hoffset = 0; proc_control_node_B.hoffset <=
                   proc_control_node_B.nr; proc_control_node_B.hoffset++) {
                proc_control_node_B.b_h_data_tmp = proc_control_node_B.hoffset +
                  b_h_size[0] * (proc_control_node_B.h21s_tmp - 1);
                proc_control_node_B.bb =
                  b_h_data[proc_control_node_B.b_h_data_tmp];
                proc_control_node_B.htmp2_tmp = proc_control_node_B.hoffset +
                  b_h_size[0] * proc_control_node_B.h21s_tmp;
                proc_control_node_B.htmp2_tmp_i = proc_control_node_B.hoffset +
                  b_h_size[0] * (proc_control_node_B.h21s_tmp + 1);
                proc_control_node_B.htmp2 = (proc_control_node_B.bb +
                  proc_control_node_B.ba *
                  b_h_data[proc_control_node_B.htmp2_tmp]) +
                  b_h_data[proc_control_node_B.htmp2_tmp_i] *
                  proc_control_node_B.aa;
                b_h_data[proc_control_node_B.b_h_data_tmp] =
                  proc_control_node_B.bb - proc_control_node_B.htmp2 *
                  proc_control_node_B.s_d;
                b_h_data[proc_control_node_B.htmp2_tmp] -=
                  proc_control_node_B.htmp2 * proc_control_node_B.tst;
                b_h_data[proc_control_node_B.htmp2_tmp_i] -=
                  proc_control_node_B.htmp2 * proc_control_node_B.h21s;
              }
            } else if (proc_control_node_B.nr == 2) {
              for (proc_control_node_B.nr = proc_control_node_B.h21s_tmp;
                   proc_control_node_B.nr <= proc_control_node_B.n_j4;
                   proc_control_node_B.nr++) {
                proc_control_node_B.b_h_data_tmp = b_h_size[0] *
                  (proc_control_node_B.nr - 1);
                proc_control_node_B.hoffset = (proc_control_node_B.h21s_tmp +
                  proc_control_node_B.b_h_data_tmp) - 1;
                proc_control_node_B.bb = b_h_data[proc_control_node_B.hoffset];
                proc_control_node_B.htmp2 =
                  b_h_data[proc_control_node_B.h21s_tmp +
                  proc_control_node_B.b_h_data_tmp] * proc_control_node_B.ba +
                  proc_control_node_B.bb;
                b_h_data[proc_control_node_B.hoffset] = proc_control_node_B.bb -
                  proc_control_node_B.htmp2 * proc_control_node_B.s_d;
                proc_control_node_B.b_h_data_tmp = proc_control_node_B.h21s_tmp
                  + b_h_size[0] * (proc_control_node_B.nr - 1);
                b_h_data[proc_control_node_B.b_h_data_tmp] -=
                  proc_control_node_B.htmp2 * proc_control_node_B.tst;
              }

              for (proc_control_node_B.nr = 0; proc_control_node_B.nr <=
                   proc_control_node_B.i_k; proc_control_node_B.nr++) {
                proc_control_node_B.b_h_data_tmp = b_h_size[0] *
                  (proc_control_node_B.h21s_tmp - 1);
                proc_control_node_B.bb = b_h_data[proc_control_node_B.nr +
                  proc_control_node_B.b_h_data_tmp];
                proc_control_node_B.htmp2_tmp = b_h_size[0] *
                  proc_control_node_B.h21s_tmp;
                proc_control_node_B.htmp2 = proc_control_node_B.bb +
                  proc_control_node_B.ba * b_h_data[proc_control_node_B.nr +
                  proc_control_node_B.htmp2_tmp];
                b_h_data[proc_control_node_B.nr +
                  proc_control_node_B.b_h_data_tmp] = proc_control_node_B.bb -
                  proc_control_node_B.htmp2 * proc_control_node_B.s_d;
                proc_control_node_B.b_h_data_tmp = proc_control_node_B.nr +
                  proc_control_node_B.htmp2_tmp;
                b_h_data[proc_control_node_B.b_h_data_tmp] -=
                  proc_control_node_B.htmp2 * proc_control_node_B.tst;
              }
            }
          }

          proc_control_node_B.b_h_b++;
        }
      }

      if (!goto150) {
        *info = proc_control_node_B.i_k + 1;
        exitg1 = true;
      } else {
        if ((proc_control_node_B.i_k + 1 != proc_control_node_B.L) &&
            (proc_control_node_B.L == proc_control_node_B.i_k)) {
          proc_control_node_xdlanv2(b_h_data[(proc_control_node_B.i_k +
            b_h_size[0] * (proc_control_node_B.i_k - 1)) - 1], b_h_data
            [(proc_control_node_B.i_k + b_h_size[0] * proc_control_node_B.i_k) -
            1], b_h_data[proc_control_node_B.i_k + b_h_size[0] *
            (proc_control_node_B.i_k - 1)], b_h_data[proc_control_node_B.i_k +
            b_h_size[0] * proc_control_node_B.i_k], &proc_control_node_B.tst,
            &proc_control_node_B.bb, &proc_control_node_B.htmp2,
            &proc_control_node_B.aa, &b_h_data[(proc_control_node_B.i_k +
            b_h_size[0] * (proc_control_node_B.i_k - 1)) - 1],
            &proc_control_node_B.h21s, &proc_control_node_B.aa_tmp,
            &proc_control_node_B.e_n, &proc_control_node_B.s_d,
            &proc_control_node_B.ba);
          proc_control_node_B.b_h_data_tmp = b_h_size[0] *
            proc_control_node_B.i_k;
          b_h_data[(proc_control_node_B.i_k + proc_control_node_B.b_h_data_tmp)
            - 1] = proc_control_node_B.h21s;
          b_h_data[proc_control_node_B.i_k + b_h_size[0] *
            (proc_control_node_B.i_k - 1)] = proc_control_node_B.aa_tmp;
          b_h_data[proc_control_node_B.i_k + proc_control_node_B.b_h_data_tmp] =
            proc_control_node_B.e_n;
          if (proc_control_node_B.n_j4 > proc_control_node_B.i_k + 1) {
            proc_control_node_B.b_h_b = (proc_control_node_B.n_j4 -
              proc_control_node_B.i_k) - 1;
            proc_control_node_B.b_h_data_tmp = b_h_size[0];
            proc_control_node_B.hoffset = b_h_size[1];
            proc_control_node_B.k_o = b_h_size[0] * b_h_size[1];
            if (0 <= proc_control_node_B.k_o - 1) {
              memcpy(&proc_control_node_B.c_x_data[0], &b_h_data[0],
                     proc_control_node_B.k_o * sizeof(real_T));
            }

            if (proc_control_node_B.b_h_b >= 1) {
              proc_control_node_B.m_n = (proc_control_node_B.i_k + 1) *
                proc_control_node_B.ldh + proc_control_node_B.i_k;
              for (proc_control_node_B.k_o = 0; proc_control_node_B.k_o <
                   proc_control_node_B.b_h_b; proc_control_node_B.k_o++) {
                proc_control_node_B.h21s_tmp = proc_control_node_B.k_o *
                  proc_control_node_B.ldh;
                proc_control_node_B.nr = proc_control_node_B.h21s_tmp +
                  proc_control_node_B.m_n;
                proc_control_node_B.h21s_tmp = (proc_control_node_B.h21s_tmp +
                  proc_control_node_B.m_n) - 1;
                proc_control_node_B.tst =
                  proc_control_node_B.c_x_data[proc_control_node_B.h21s_tmp] *
                  proc_control_node_B.s_d +
                  proc_control_node_B.c_x_data[proc_control_node_B.nr] *
                  proc_control_node_B.ba;
                proc_control_node_B.c_x_data[proc_control_node_B.nr] =
                  proc_control_node_B.c_x_data[proc_control_node_B.nr] *
                  proc_control_node_B.s_d -
                  proc_control_node_B.c_x_data[proc_control_node_B.h21s_tmp] *
                  proc_control_node_B.ba;
                proc_control_node_B.c_x_data[proc_control_node_B.h21s_tmp] =
                  proc_control_node_B.tst;
              }
            }

            proc_control_node_B.k_o = proc_control_node_B.b_h_data_tmp *
              proc_control_node_B.hoffset;
            if (0 <= proc_control_node_B.k_o - 1) {
              memcpy(&b_h_data[0], &proc_control_node_B.c_x_data[0],
                     proc_control_node_B.k_o * sizeof(real_T));
            }
          }

          proc_control_node_B.b_h_size[0] = b_h_size[0];
          proc_control_node_B.b_h_size[1] = b_h_size[1];
          proc_control_node_B.k_o = b_h_size[0] * b_h_size[1] - 1;
          if (0 <= proc_control_node_B.k_o) {
            memcpy(&proc_control_node_B.c_x_data[0], &b_h_data[0],
                   (proc_control_node_B.k_o + 1) * sizeof(real_T));
          }

          proc_control_node_xrot_b(proc_control_node_B.i_k - 1,
            proc_control_node_B.c_x_data, proc_control_node_B.b_h_size,
            (proc_control_node_B.i_k - 1) * proc_control_node_B.ldh + 1,
            proc_control_node_B.i_k * proc_control_node_B.ldh + 1,
            proc_control_node_B.s_d, proc_control_node_B.ba, b_h_data, b_h_size);
        }

        proc_control_node_B.i_k = proc_control_node_B.L - 2;
      }
    }
  }
}

static void proc_control_node_xhseqr_b(const real_T h_data[], const int32_T
  h_size[2], real_T b_h_data[], int32_T b_h_size[2], int32_T *info)
{
  proc_control_node_eml_dlahqr_b(h_data, h_size, proc_control_node_B.c_h_data,
    proc_control_node_B.c_h_size, info);
  b_h_size[0] = proc_control_node_B.c_h_size[0];
  b_h_size[1] = proc_control_node_B.c_h_size[1];
  proc_control_node_B.m_j = proc_control_node_B.c_h_size[0] *
    proc_control_node_B.c_h_size[1];
  if (0 <= proc_control_node_B.m_j - 1) {
    memcpy(&b_h_data[0], &proc_control_node_B.c_h_data[0],
           proc_control_node_B.m_j * sizeof(real_T));
  }

  proc_control_node_B.m_j = proc_control_node_B.c_h_size[0];
  if (3 < proc_control_node_B.c_h_size[0]) {
    proc_control_node_B.istart_m = 4;
    if (proc_control_node_B.c_h_size[0] - 4 < proc_control_node_B.c_h_size[1] -
        1) {
      proc_control_node_B.jend_j = proc_control_node_B.c_h_size[0] - 3;
    } else {
      proc_control_node_B.jend_j = proc_control_node_B.c_h_size[1];
    }

    proc_control_node_B.jend_j--;
    for (proc_control_node_B.b_j_e = 0; proc_control_node_B.b_j_e <=
         proc_control_node_B.jend_j; proc_control_node_B.b_j_e++) {
      for (proc_control_node_B.i_d = proc_control_node_B.istart_m;
           proc_control_node_B.i_d <= proc_control_node_B.m_j;
           proc_control_node_B.i_d++) {
        b_h_data[(proc_control_node_B.i_d + b_h_size[0] *
                  proc_control_node_B.b_j_e) - 1] = 0.0;
      }

      proc_control_node_B.istart_m++;
    }
  }
}

static void proc_control_node_schur_b(real_T A_data[], int32_T A_size[2], real_T
  V_data[], int32_T V_size[2])
{
  boolean_T p;
  proc_control_node_B.nx_tmp = A_size[0] * A_size[1] - 1;
  p = true;
  for (proc_control_node_B.istart = 0; proc_control_node_B.istart <=
       proc_control_node_B.nx_tmp; proc_control_node_B.istart++) {
    if (p) {
      proc_control_node_B.x_gk = A_data[proc_control_node_B.istart];
      if ((!rtIsInf(proc_control_node_B.x_gk)) && (!rtIsNaN
           (proc_control_node_B.x_gk))) {
      } else {
        p = false;
      }
    } else {
      p = false;
    }
  }

  if (!p) {
    proc_control_node_B.nx_l = A_size[0];
    V_size[0] = A_size[0];
    V_size[1] = A_size[1];
    for (proc_control_node_B.b_j_k = 0; proc_control_node_B.b_j_k <=
         proc_control_node_B.nx_tmp; proc_control_node_B.b_j_k++) {
      V_data[proc_control_node_B.b_j_k] = (rtNaN);
    }

    if (1 < A_size[0]) {
      proc_control_node_B.istart = 2;
      if (A_size[0] - 2 < A_size[1] - 1) {
        proc_control_node_B.jend = A_size[0] - 1;
      } else {
        proc_control_node_B.jend = A_size[1];
      }

      proc_control_node_B.jend--;
      for (proc_control_node_B.b_j_k = 0; proc_control_node_B.b_j_k <=
           proc_control_node_B.jend; proc_control_node_B.b_j_k++) {
        for (proc_control_node_B.nx_tmp = proc_control_node_B.istart;
             proc_control_node_B.nx_tmp <= proc_control_node_B.nx_l;
             proc_control_node_B.nx_tmp++) {
          V_data[(proc_control_node_B.nx_tmp + V_size[0] *
                  proc_control_node_B.b_j_k) - 1] = 0.0;
        }

        proc_control_node_B.istart++;
      }
    }
  } else {
    proc_control_node_B.A_size_n[0] = A_size[0];
    proc_control_node_B.A_size_n[1] = A_size[1];
    proc_control_node_B.istart = A_size[0] * A_size[1] - 1;
    if (0 <= proc_control_node_B.istart) {
      memcpy(&proc_control_node_B.A_data_h[0], &A_data[0],
             (proc_control_node_B.istart + 1) * sizeof(real_T));
    }

    proc_control_node_xgehrd_b(proc_control_node_B.A_data_h,
      proc_control_node_B.A_size_n, A_data, A_size);
    proc_control_node_xhseqr_b(A_data, A_size, V_data, V_size,
      &proc_control_node_B.nx_l);
  }
}

static void proc_contr_eigHermitianStandard(const real_T A_data[], const int32_T
  A_size[2], real_T V_data[], int32_T *V_size)
{
  proc_control_node_B.A_size_c[0] = A_size[0];
  proc_control_node_B.A_size_c[1] = A_size[1];
  proc_control_node_B.loop_ub_i = A_size[0] * A_size[1] - 1;
  if (0 <= proc_control_node_B.loop_ub_i) {
    memcpy(&proc_control_node_B.A_data_o[0], &A_data[0],
           (proc_control_node_B.loop_ub_i + 1) * sizeof(real_T));
  }

  proc_control_node_schur_b(proc_control_node_B.A_data_o,
    proc_control_node_B.A_size_c, proc_control_node_B.T_data,
    proc_control_node_B.T_size);
  proc_control_node_B.n_bd = proc_control_node_B.T_size[0] - 1;
  *V_size = proc_control_node_B.T_size[0];
  for (proc_control_node_B.loop_ub_i = 0; proc_control_node_B.loop_ub_i <=
       proc_control_node_B.n_bd; proc_control_node_B.loop_ub_i++) {
    V_data[proc_control_node_B.loop_ub_i] =
      proc_control_node_B.T_data[proc_control_node_B.loop_ub_i +
      proc_control_node_B.T_size[0] * proc_control_node_B.loop_ub_i];
  }
}

static void proc_control_node_eig_b(const real_T A_data[], const int32_T A_size
  [2], creal_T V_data[], int32_T *V_size)
{
  int32_T exitg1;
  boolean_T exitg2;
  boolean_T p;
  proc_control_node_B.nx = A_size[0] * A_size[1] - 1;
  p = true;
  for (proc_control_node_B.b_k_c = 0; proc_control_node_B.b_k_c <=
       proc_control_node_B.nx; proc_control_node_B.b_k_c++) {
    if (p) {
      proc_control_node_B.x_g = A_data[proc_control_node_B.b_k_c];
      if ((!rtIsInf(proc_control_node_B.x_g)) && (!rtIsNaN
           (proc_control_node_B.x_g))) {
      } else {
        p = false;
      }
    } else {
      p = false;
    }
  }

  if (!p) {
    proc_control_node_B.b_k_c = A_size[0];
    *V_size = A_size[0];
    for (proc_control_node_B.nx = 0; proc_control_node_B.nx <
         proc_control_node_B.b_k_c; proc_control_node_B.nx++) {
      V_data[proc_control_node_B.nx].re = (rtNaN);
      V_data[proc_control_node_B.nx].im = 0.0;
    }
  } else {
    p = (A_size[0] == A_size[1]);
    if (p) {
      proc_control_node_B.nx = 0;
      exitg2 = false;
      while ((!exitg2) && (proc_control_node_B.nx <= A_size[1] - 1)) {
        proc_control_node_B.b_k_c = 0;
        do {
          exitg1 = 0;
          if (proc_control_node_B.b_k_c <= proc_control_node_B.nx) {
            if (!(A_data[proc_control_node_B.b_k_c + A_size[0] *
                  proc_control_node_B.nx] == A_data[proc_control_node_B.nx +
                  A_size[0] * proc_control_node_B.b_k_c])) {
              p = false;
              exitg1 = 1;
            } else {
              proc_control_node_B.b_k_c++;
            }
          } else {
            proc_control_node_B.nx++;
            exitg1 = 2;
          }
        } while (exitg1 == 0);

        if (exitg1 == 1) {
          exitg2 = true;
        }
      }
    }

    if (p) {
      proc_contr_eigHermitianStandard(A_data, A_size,
        proc_control_node_B.tmp_data_ow, &proc_control_node_B.beta1_size);
      *V_size = proc_control_node_B.beta1_size;
      proc_control_node_B.b_k_c = proc_control_node_B.beta1_size;
      for (proc_control_node_B.nx = 0; proc_control_node_B.nx <
           proc_control_node_B.b_k_c; proc_control_node_B.nx++) {
        V_data[proc_control_node_B.nx].re =
          proc_control_node_B.tmp_data_ow[proc_control_node_B.nx];
        V_data[proc_control_node_B.nx].im = 0.0;
      }
    } else {
      proc_control_node_xzgeev_b(A_data, A_size, &proc_control_node_B.nx, V_data,
        V_size, proc_control_node_B.beta1_data, &proc_control_node_B.beta1_size);
      proc_control_node_B.b_k_c = *V_size;
      for (proc_control_node_B.nx = 0; proc_control_node_B.nx <
           proc_control_node_B.b_k_c; proc_control_node_B.nx++) {
        proc_control_node_B.V = V_data[proc_control_node_B.nx];
        proc_control_node_B.x_g = proc_control_node_B.V.re;
        proc_control_node_B.br =
          proc_control_node_B.beta1_data[proc_control_node_B.nx].re;
        proc_control_node_B.bi =
          proc_control_node_B.beta1_data[proc_control_node_B.nx].im;
        if (proc_control_node_B.bi == 0.0) {
          if (proc_control_node_B.V.im == 0.0) {
            proc_control_node_B.V.re /= proc_control_node_B.br;
            proc_control_node_B.V.im = 0.0;
          } else if (proc_control_node_B.V.re == 0.0) {
            proc_control_node_B.V.re = 0.0;
            proc_control_node_B.V.im /= proc_control_node_B.br;
          } else {
            proc_control_node_B.V.re /= proc_control_node_B.br;
            proc_control_node_B.V.im /= proc_control_node_B.br;
          }
        } else if (proc_control_node_B.br == 0.0) {
          if (proc_control_node_B.V.re == 0.0) {
            proc_control_node_B.V.re = proc_control_node_B.V.im /
              proc_control_node_B.bi;
            proc_control_node_B.V.im = 0.0;
          } else if (proc_control_node_B.V.im == 0.0) {
            proc_control_node_B.V.re = 0.0;
            proc_control_node_B.V.im = -(proc_control_node_B.x_g /
              proc_control_node_B.bi);
          } else {
            proc_control_node_B.V.re = proc_control_node_B.V.im /
              proc_control_node_B.bi;
            proc_control_node_B.V.im = -(proc_control_node_B.x_g /
              proc_control_node_B.bi);
          }
        } else {
          proc_control_node_B.brm = fabs(proc_control_node_B.br);
          proc_control_node_B.bim = fabs(proc_control_node_B.bi);
          if (proc_control_node_B.brm > proc_control_node_B.bim) {
            proc_control_node_B.brm = proc_control_node_B.bi /
              proc_control_node_B.br;
            proc_control_node_B.bi = proc_control_node_B.brm *
              proc_control_node_B.bi + proc_control_node_B.br;
            proc_control_node_B.V.re = (proc_control_node_B.brm *
              proc_control_node_B.V.im + proc_control_node_B.V.re) /
              proc_control_node_B.bi;
            proc_control_node_B.V.im = (proc_control_node_B.V.im -
              proc_control_node_B.brm * proc_control_node_B.x_g) /
              proc_control_node_B.bi;
          } else if (proc_control_node_B.bim == proc_control_node_B.brm) {
            proc_control_node_B.br = proc_control_node_B.br > 0.0 ? 0.5 : -0.5;
            proc_control_node_B.bi = proc_control_node_B.bi > 0.0 ? 0.5 : -0.5;
            proc_control_node_B.V.re = (proc_control_node_B.V.re *
              proc_control_node_B.br + proc_control_node_B.V.im *
              proc_control_node_B.bi) / proc_control_node_B.brm;
            proc_control_node_B.V.im = (proc_control_node_B.V.im *
              proc_control_node_B.br - proc_control_node_B.x_g *
              proc_control_node_B.bi) / proc_control_node_B.brm;
          } else {
            proc_control_node_B.brm = proc_control_node_B.br /
              proc_control_node_B.bi;
            proc_control_node_B.bi += proc_control_node_B.brm *
              proc_control_node_B.br;
            proc_control_node_B.V.re = (proc_control_node_B.brm *
              proc_control_node_B.V.re + proc_control_node_B.V.im) /
              proc_control_node_B.bi;
            proc_control_node_B.V.im = (proc_control_node_B.brm *
              proc_control_node_B.V.im - proc_control_node_B.x_g) /
              proc_control_node_B.bi;
          }
        }

        V_data[proc_control_node_B.nx] = proc_control_node_B.V;
      }
    }
  }
}

static real_T proc_control_nod_leastEigvJtJ_b(const real_T Jtri_data[], const
  int32_T Jtri_size[2], real_T n)
{
  real_T lev;
  boolean_T exitg1;
  proc_control_node_B.bet = 0.0;
  proc_control_node_B.last = Jtri_size[0];
  if (0 <= proc_control_node_B.last - 1) {
    memset(&proc_control_node_B.oldq_data[0], 0, proc_control_node_B.last *
           sizeof(real_T));
  }

  proc_control_node_B.b_size_n = Jtri_size[0];
  proc_control_node_B.last = Jtri_size[0];
  for (proc_control_node_B.b_idx = 0; proc_control_node_B.b_idx <
       proc_control_node_B.last; proc_control_node_B.b_idx++) {
    proc_control_node_B.b_data_c5[proc_control_node_B.b_idx] = 1.0;
  }

  proc_control_node_B.q_e = proc_control_node_norm(proc_control_node_B.b_data_c5,
    &proc_control_node_B.b_size_n);
  proc_control_node_B.q_size = Jtri_size[0];
  proc_control_node_B.last = Jtri_size[0];
  for (proc_control_node_B.b_idx = 0; proc_control_node_B.b_idx <
       proc_control_node_B.last; proc_control_node_B.b_idx++) {
    proc_control_node_B.q_data[proc_control_node_B.b_idx] = 1.0 /
      proc_control_node_B.q_e;
  }

  proc_control_node_B.c_ix = static_cast<int32_T>(n) - 1;
  for (proc_control_node_B.b_i_p = 0; proc_control_node_B.b_i_p <=
       proc_control_node_B.c_ix; proc_control_node_B.b_i_p++) {
    proc_control_nod_solveHessian_b(Jtri_data, Jtri_size,
      proc_control_node_B.q_data, &proc_control_node_B.q_size,
      proc_control_node_B.v_data_p, &proc_control_node_B.b_size_n);
    proc_control_node_B.q_e = 0.0;
    proc_control_node_B.last = proc_control_node_B.q_size;
    for (proc_control_node_B.b_idx = 0; proc_control_node_B.b_idx <
         proc_control_node_B.last; proc_control_node_B.b_idx++) {
      proc_control_node_B.q_e +=
        proc_control_node_B.q_data[proc_control_node_B.b_idx] *
        proc_control_node_B.v_data_p[proc_control_node_B.b_idx];
    }

    proc_control_node_B.last = proc_control_node_B.b_size_n;
    for (proc_control_node_B.b_idx = 0; proc_control_node_B.b_idx <
         proc_control_node_B.last; proc_control_node_B.b_idx++) {
      proc_control_node_B.v_data_p[proc_control_node_B.b_idx] =
        (proc_control_node_B.v_data_p[proc_control_node_B.b_idx] -
         proc_control_node_B.bet *
         proc_control_node_B.oldq_data[proc_control_node_B.b_idx]) -
        proc_control_node_B.q_e *
        proc_control_node_B.q_data[proc_control_node_B.b_idx];
    }

    proc_control_node_B.bet = proc_control_node_norm
      (proc_control_node_B.v_data_p, &proc_control_node_B.b_size_n);
    proc_control_node_B.last = proc_control_node_B.q_size;
    if (0 <= proc_control_node_B.last - 1) {
      memcpy(&proc_control_node_B.oldq_data[0], &proc_control_node_B.q_data[0],
             proc_control_node_B.last * sizeof(real_T));
    }

    proc_control_node_B.q_size = proc_control_node_B.b_size_n;
    proc_control_node_B.last = proc_control_node_B.b_size_n;
    for (proc_control_node_B.b_idx = 0; proc_control_node_B.b_idx <
         proc_control_node_B.last; proc_control_node_B.b_idx++) {
      proc_control_node_B.q_data[proc_control_node_B.b_idx] =
        proc_control_node_B.v_data_p[proc_control_node_B.b_idx] /
        proc_control_node_B.bet;
    }

    proc_control_node_B.beta_data_p[proc_control_node_B.b_i_p] =
      proc_control_node_B.bet;
    proc_control_node_B.b_data_c5[proc_control_node_B.b_i_p] =
      proc_control_node_B.q_e;
  }

  if (1.0 > n - 1.0) {
    proc_control_node_B.c_ix = -1;
    proc_control_node_B.b_i_p = -1;
  } else {
    proc_control_node_B.c_ix = static_cast<int32_T>(n - 1.0) - 1;
    proc_control_node_B.b_i_p = static_cast<int32_T>(n - 1.0) - 1;
  }

  if (rtIsNaN(n - 1.0)) {
    proc_control_node_B.y_size_idx_1 = 1;
    proc_control_node_B.oldq_data[0] = (rtNaN);
  } else if (n - 1.0 < 1.0) {
    proc_control_node_B.y_size_idx_1 = 0;
  } else if (rtIsInf(n - 1.0) && (n - 1.0 == 1.0)) {
    proc_control_node_B.y_size_idx_1 = 1;
    proc_control_node_B.oldq_data[0] = (rtNaN);
  } else {
    proc_control_node_B.last = static_cast<int32_T>(floor((n - 1.0) - 1.0));
    proc_control_node_B.y_size_idx_1 = proc_control_node_B.last + 1;
    for (proc_control_node_B.b_idx = 0; proc_control_node_B.b_idx <=
         proc_control_node_B.last; proc_control_node_B.b_idx++) {
      proc_control_node_B.oldq_data[proc_control_node_B.b_idx] = static_cast<
        real_T>(proc_control_node_B.b_idx) + 1.0;
    }
  }

  if (rtIsNaN(n)) {
    proc_control_node_B.y_size_idx_1_c = 1;
    proc_control_node_B.b_idx = 0;
    proc_control_node_B.q_data[proc_control_node_B.b_idx] = (rtNaN);
    proc_control_node_B.y_size_idx_1_e = 1;
    proc_control_node_B.y_data_n[proc_control_node_B.b_idx] = (rtNaN);
    proc_control_node_B.y_size_idx_1_j = 1;
    proc_control_node_B.y_data_ho[proc_control_node_B.b_idx] = (rtNaN);
    proc_control_node_B.y_size_idx_1_l = 1;
    proc_control_node_B.v_data_p[proc_control_node_B.b_idx] = (rtNaN);
  } else {
    if (n < 1.0) {
      proc_control_node_B.y_size_idx_1_c = 0;
    } else if (rtIsInf(n) && (1.0 == n)) {
      proc_control_node_B.y_size_idx_1_c = 1;
      proc_control_node_B.q_data[0] = (rtNaN);
    } else {
      proc_control_node_B.last = static_cast<int32_T>(floor(n - 1.0));
      proc_control_node_B.y_size_idx_1_c = proc_control_node_B.last + 1;
      for (proc_control_node_B.b_idx = 0; proc_control_node_B.b_idx <=
           proc_control_node_B.last; proc_control_node_B.b_idx++) {
        proc_control_node_B.q_data[proc_control_node_B.b_idx] =
          static_cast<real_T>(proc_control_node_B.b_idx) + 1.0;
      }
    }

    if (n < 2.0) {
      proc_control_node_B.y_size_idx_1_e = 0;
      proc_control_node_B.y_size_idx_1_j = 0;
    } else {
      if (rtIsInf(n) && (2.0 == n)) {
        proc_control_node_B.y_size_idx_1_e = 1;
        proc_control_node_B.y_data_n[0] = (rtNaN);
      } else {
        proc_control_node_B.last = static_cast<int32_T>(floor(n - 2.0));
        proc_control_node_B.y_size_idx_1_e = proc_control_node_B.last + 1;
        for (proc_control_node_B.b_idx = 0; proc_control_node_B.b_idx <=
             proc_control_node_B.last; proc_control_node_B.b_idx++) {
          proc_control_node_B.y_data_n[proc_control_node_B.b_idx] = static_cast<
            real_T>(proc_control_node_B.b_idx) + 2.0;
        }
      }

      if (rtIsInf(n) && (2.0 == n)) {
        proc_control_node_B.y_size_idx_1_j = 1;
        proc_control_node_B.y_data_ho[0] = (rtNaN);
      } else {
        proc_control_node_B.y_size_idx_1_j = static_cast<int32_T>(floor(n - 2.0))
          + 1;
        proc_control_node_B.last = static_cast<int32_T>(floor(n - 2.0));
        for (proc_control_node_B.b_idx = 0; proc_control_node_B.b_idx <=
             proc_control_node_B.last; proc_control_node_B.b_idx++) {
          proc_control_node_B.y_data_ho[proc_control_node_B.b_idx] =
            static_cast<real_T>(proc_control_node_B.b_idx) + 2.0;
        }
      }
    }

    if (n < 1.0) {
      proc_control_node_B.y_size_idx_1_l = 0;
    } else if (rtIsInf(n) && (1.0 == n)) {
      proc_control_node_B.y_size_idx_1_l = 1;
      proc_control_node_B.v_data_p[0] = (rtNaN);
    } else {
      proc_control_node_B.last = static_cast<int32_T>(floor(n - 1.0));
      proc_control_node_B.y_size_idx_1_l = proc_control_node_B.last + 1;
      for (proc_control_node_B.b_idx = 0; proc_control_node_B.b_idx <=
           proc_control_node_B.last; proc_control_node_B.b_idx++) {
        proc_control_node_B.v_data_p[proc_control_node_B.b_idx] =
          static_cast<real_T>(proc_control_node_B.b_idx) + 1.0;
      }
    }
  }

  if (rtIsNaN(n - 1.0)) {
    proc_control_node_B.y_size_idx_1_jt = 1;
    proc_control_node_B.y_data_a4[0] = (rtNaN);
  } else if (n - 1.0 < 1.0) {
    proc_control_node_B.y_size_idx_1_jt = 0;
  } else if (rtIsInf(n - 1.0) && (n - 1.0 == 1.0)) {
    proc_control_node_B.y_size_idx_1_jt = 1;
    proc_control_node_B.y_data_a4[0] = (rtNaN);
  } else {
    proc_control_node_B.y_size_idx_1_jt = static_cast<int32_T>(floor((n - 1.0) -
      1.0)) + 1;
    proc_control_node_B.last = static_cast<int32_T>(floor((n - 1.0) - 1.0));
    for (proc_control_node_B.b_idx = 0; proc_control_node_B.b_idx <=
         proc_control_node_B.last; proc_control_node_B.b_idx++) {
      proc_control_node_B.y_data_a4[proc_control_node_B.b_idx] = static_cast<
        real_T>(proc_control_node_B.b_idx) + 1.0;
    }
  }

  proc_control_node_B.y_size[0] = (proc_control_node_B.y_size_idx_1 +
    proc_control_node_B.y_size_idx_1_c) + proc_control_node_B.y_size_idx_1_e;
  proc_control_node_B.y_size[1] = 2;
  if (0 <= proc_control_node_B.y_size_idx_1 - 1) {
    memcpy(&proc_control_node_B.y_data_p[0], &proc_control_node_B.oldq_data[0],
           proc_control_node_B.y_size_idx_1 * sizeof(real_T));
  }

  for (proc_control_node_B.b_idx = 0; proc_control_node_B.b_idx <
       proc_control_node_B.y_size_idx_1_c; proc_control_node_B.b_idx++) {
    proc_control_node_B.y_data_p[proc_control_node_B.b_idx +
      proc_control_node_B.y_size_idx_1] =
      proc_control_node_B.q_data[proc_control_node_B.b_idx];
  }

  for (proc_control_node_B.b_idx = 0; proc_control_node_B.b_idx <
       proc_control_node_B.y_size_idx_1_e; proc_control_node_B.b_idx++) {
    proc_control_node_B.y_data_p[(proc_control_node_B.b_idx +
      proc_control_node_B.y_size_idx_1) + proc_control_node_B.y_size_idx_1_c] =
      proc_control_node_B.y_data_n[proc_control_node_B.b_idx];
  }

  for (proc_control_node_B.b_idx = 0; proc_control_node_B.b_idx <
       proc_control_node_B.y_size_idx_1_j; proc_control_node_B.b_idx++) {
    proc_control_node_B.y_data_p[proc_control_node_B.b_idx +
      proc_control_node_B.y_size[0]] =
      proc_control_node_B.y_data_ho[proc_control_node_B.b_idx];
  }

  for (proc_control_node_B.b_idx = 0; proc_control_node_B.b_idx <
       proc_control_node_B.y_size_idx_1_l; proc_control_node_B.b_idx++) {
    proc_control_node_B.y_data_p[(proc_control_node_B.b_idx +
      proc_control_node_B.y_size_idx_1_j) + proc_control_node_B.y_size[0]] =
      proc_control_node_B.v_data_p[proc_control_node_B.b_idx];
  }

  for (proc_control_node_B.b_idx = 0; proc_control_node_B.b_idx <
       proc_control_node_B.y_size_idx_1_jt; proc_control_node_B.b_idx++) {
    proc_control_node_B.y_data_p[((proc_control_node_B.b_idx +
      proc_control_node_B.y_size_idx_1_j) + proc_control_node_B.y_size_idx_1_l)
      + proc_control_node_B.y_size[0]] =
      proc_control_node_B.y_data_a4[proc_control_node_B.b_idx];
  }

  proc_control_node_B.last = proc_control_node_B.c_ix + 1;
  proc_control_node_B.beta_size = ((proc_control_node_B.c_ix +
    static_cast<int32_T>(n)) + proc_control_node_B.b_i_p) + 2;
  if (0 <= proc_control_node_B.last - 1) {
    memcpy(&proc_control_node_B.beta_data_f[0],
           &proc_control_node_B.beta_data_p[0], proc_control_node_B.last *
           sizeof(real_T));
  }

  proc_control_node_B.last = static_cast<int32_T>(n);
  for (proc_control_node_B.b_idx = 0; proc_control_node_B.b_idx <
       proc_control_node_B.last; proc_control_node_B.b_idx++) {
    proc_control_node_B.beta_data_f[(proc_control_node_B.b_idx +
      proc_control_node_B.c_ix) + 1] =
      proc_control_node_B.b_data_c5[proc_control_node_B.b_idx];
  }

  for (proc_control_node_B.b_idx = 0; proc_control_node_B.b_idx <=
       proc_control_node_B.b_i_p; proc_control_node_B.b_idx++) {
    proc_control_node_B.beta_data_f[((proc_control_node_B.b_idx +
      proc_control_node_B.c_ix) + static_cast<int32_T>(n)) + 1] =
      proc_control_node_B.beta_data_p[proc_control_node_B.b_idx];
  }

  proc_control_node_B.n_o[0] = n;
  proc_control_node_B.n_o[1] = n;
  proc_control_node_accumarray_b(proc_control_node_B.y_data_p,
    proc_control_node_B.y_size, proc_control_node_B.beta_data_f,
    &proc_control_node_B.beta_size, proc_control_node_B.n_o,
    proc_control_node_B.tmp_data_e, proc_control_node_B.tmp_size);
  proc_control_node_eig_b(proc_control_node_B.tmp_data_e,
    proc_control_node_B.tmp_size, proc_control_node_B.tmp_data_i,
    &proc_control_node_B.q_size);
  proc_control_node_abs_b4(proc_control_node_B.tmp_data_i,
    &proc_control_node_B.q_size, proc_control_node_B.oldq_data,
    &proc_control_node_B.beta_size);
  proc_control_node_B.last = proc_control_node_B.beta_size;
  if (proc_control_node_B.beta_size <= 2) {
    if (proc_control_node_B.beta_size == 1) {
      proc_control_node_B.bet = proc_control_node_B.oldq_data[0];
    } else {
      proc_control_node_B.bet =
        proc_control_node_B.oldq_data[proc_control_node_B.beta_size - 1];
      if ((proc_control_node_B.oldq_data[0] > proc_control_node_B.bet) ||
          (rtIsNaN(proc_control_node_B.oldq_data[0]) && (!rtIsNaN
            (proc_control_node_B.bet)))) {
      } else {
        proc_control_node_B.bet = proc_control_node_B.oldq_data[0];
      }
    }
  } else {
    if (!rtIsNaN(proc_control_node_B.oldq_data[0])) {
      proc_control_node_B.b_idx = 1;
    } else {
      proc_control_node_B.b_idx = 0;
      proc_control_node_B.c_ix = 2;
      exitg1 = false;
      while ((!exitg1) && (proc_control_node_B.c_ix <= proc_control_node_B.last))
      {
        if (!rtIsNaN(proc_control_node_B.oldq_data[proc_control_node_B.c_ix - 1]))
        {
          proc_control_node_B.b_idx = proc_control_node_B.c_ix;
          exitg1 = true;
        } else {
          proc_control_node_B.c_ix++;
        }
      }
    }

    if (proc_control_node_B.b_idx == 0) {
      proc_control_node_B.bet = proc_control_node_B.oldq_data[0];
    } else {
      proc_control_node_B.bet =
        proc_control_node_B.oldq_data[proc_control_node_B.b_idx - 1];
      for (proc_control_node_B.c_ix = proc_control_node_B.b_idx + 1;
           proc_control_node_B.c_ix <= proc_control_node_B.last;
           proc_control_node_B.c_ix++) {
        proc_control_node_B.q_e =
          proc_control_node_B.oldq_data[proc_control_node_B.c_ix - 1];
        if (proc_control_node_B.bet > proc_control_node_B.q_e) {
          proc_control_node_B.bet = proc_control_node_B.q_e;
        }
      }
    }
  }

  lev = 1.0 / proc_control_node_B.bet;
  return lev;
}

static void proc_control_node_fletcher_b(real_T S, real_T Snew, const real_T
  dx_data[], const int32_T *dx_size, const real_T v_data[], const real_T
  Jtri_data[], const int32_T Jtri_size[2], real_T lambda, real_T lambdac, real_T
  *b_lambda, real_T *b_lambdac)
{
  *b_lambdac = lambdac;
  *b_lambda = lambda;
  proc_control_node_mulJtJ(Jtri_data, Jtri_size, dx_data, dx_size,
    proc_control_node_B.tmp_data_da, &proc_control_node_B.tmp_size_o);
  proc_control_node_B.R = 0.0;
  proc_control_node_B.loop_ub_l = *dx_size;
  for (proc_control_node_B.i_m = 0; proc_control_node_B.i_m <
       proc_control_node_B.loop_ub_l; proc_control_node_B.i_m++) {
    proc_control_node_B.R += (2.0 * v_data[proc_control_node_B.i_m] -
      proc_control_node_B.tmp_data_da[proc_control_node_B.i_m]) *
      dx_data[proc_control_node_B.i_m];
  }

  proc_control_node_B.R = (S - Snew) / proc_control_node_B.R;
  if (proc_control_node_B.R > 0.75) {
    *b_lambda = lambda / 2.0;
    if (*b_lambda < lambdac) {
      *b_lambda = 0.0;
    }
  } else if (proc_control_node_B.R < 0.25) {
    proc_control_node_B.R = 0.0;
    proc_control_node_B.loop_ub_l = *dx_size;
    for (proc_control_node_B.i_m = 0; proc_control_node_B.i_m <
         proc_control_node_B.loop_ub_l; proc_control_node_B.i_m++) {
      proc_control_node_B.R += dx_data[proc_control_node_B.i_m] *
        v_data[proc_control_node_B.i_m];
    }

    proc_control_node_B.R = (Snew - S) / proc_control_node_B.R + 2.0;
    if ((2.0 > proc_control_node_B.R) || rtIsNaN(proc_control_node_B.R)) {
      proc_control_node_B.R = 2.0;
    }

    if (!(proc_control_node_B.R < 10.0)) {
      proc_control_node_B.R = 10.0;
    }

    if (lambda == 0.0) {
      *b_lambdac = proc_control_nod_leastEigvJtJ_b(Jtri_data, Jtri_size,
        static_cast<real_T>(Jtri_size[0]));
      *b_lambda = *b_lambdac;
      proc_control_node_B.R /= 2.0;
    }

    *b_lambda *= proc_control_node_B.R;
  }
}

static void proc_control_LMFsolve_b4nwkzrtq(const real_T
  FUN_workspace_waypoints_data[], const int32_T FUN_workspace_waypoints_size[2],
  const real_T FUN_workspace_course_data[], const int32_T
  *FUN_workspace_course_size, real_T x_data[], const int32_T *x_size)
{
  boolean_T exitg1;
  proc_control_node_B.maxiter_a = 100 * *x_size;
  proc_control_node_anon_b4nwk(FUN_workspace_waypoints_data,
    FUN_workspace_waypoints_size, FUN_workspace_course_data,
    FUN_workspace_course_size, x_data, proc_control_node_B.b_r_data_np,
    &proc_control_node_B.b_r_size_d, proc_control_node_B.b_varargout_2_data_c,
    proc_control_node_B.b_varargout_2_size_k);
  proc_control_node_B.Jtri_size_j[0] = proc_control_node_B.b_varargout_2_size_k
    [0];
  proc_control_node_B.Jtri_size_j[1] = 3;
  proc_control_node_B.loop_ub_tmp_b = proc_control_node_B.b_varargout_2_size_k[0]
    * 3;
  if (0 <= proc_control_node_B.loop_ub_tmp_b - 1) {
    memcpy(&proc_control_node_B.Jtri_data_m[0],
           &proc_control_node_B.b_varargout_2_data_c[0],
           proc_control_node_B.loop_ub_tmp_b * sizeof(real_T));
  }

  proc_control_node_mulJt_b(proc_control_node_B.b_varargout_2_data_c,
    proc_control_node_B.b_varargout_2_size_k, proc_control_node_B.b_r_data_np,
    &proc_control_node_B.b_r_size_d, proc_control_node_B.tmp_data_pi,
    &proc_control_node_B.tmp_size_h);
  proc_control_node_B.v_size_n = proc_control_node_B.tmp_size_h;
  proc_control_node_B.loop_ub_o = proc_control_node_B.tmp_size_h;
  if (0 <= proc_control_node_B.loop_ub_o - 1) {
    memcpy(&proc_control_node_B.v_data_d[0], &proc_control_node_B.tmp_data_pi[0],
           proc_control_node_B.loop_ub_o * sizeof(real_T));
  }

  proc_control_node_B.S_n = 0.0;
  proc_control_node_B.loop_ub_o = proc_control_node_B.b_r_size_d;
  for (proc_control_node_B.loop_ub_tmp_b = 0; proc_control_node_B.loop_ub_tmp_b <
       proc_control_node_B.loop_ub_o; proc_control_node_B.loop_ub_tmp_b++) {
    proc_control_node_B.lambda_d =
      proc_control_node_B.b_r_data_np[proc_control_node_B.loop_ub_tmp_b];
    proc_control_node_B.S_n += proc_control_node_B.lambda_d *
      proc_control_node_B.lambda_d;
  }

  proc_control_node_B.lambda_d = 0.0;
  proc_control_node_B.lambdac_j = 0.75;
  proc_control_node_B.iter_o = 0;
  proc_control_node_repmat_b(static_cast<real_T>(*x_size),
    proc_control_node_B.tmp_data_pi, &proc_control_node_B.tmp_size_h);
  proc_control_node_B.loop_ub_tmp_b = proc_control_node_B.tmp_size_h;
  proc_control_node_B.loop_ub_o = proc_control_node_B.tmp_size_h;
  if (0 <= proc_control_node_B.loop_ub_o - 1) {
    memcpy(&proc_control_node_B.epsx_data_h[0],
           &proc_control_node_B.tmp_data_pi[0], proc_control_node_B.loop_ub_o *
           sizeof(real_T));
  }

  proc_control_node_repmat_b(static_cast<real_T>(*x_size),
    proc_control_node_B.tmp_data_pi, &proc_control_node_B.tmp_size_h);
  proc_control_node_B.loop_ub_o = proc_control_node_B.tmp_size_h;
  if (0 <= proc_control_node_B.loop_ub_o - 1) {
    memcpy(&proc_control_node_B.epsr_data_k[0],
           &proc_control_node_B.tmp_data_pi[0], proc_control_node_B.loop_ub_o *
           sizeof(real_T));
  }

  proc_control_node_B.dx_size_k = proc_control_node_B.loop_ub_tmp_b;
  if (0 <= proc_control_node_B.loop_ub_tmp_b - 1) {
    memcpy(&proc_control_node_B.dx_data_j[0], &proc_control_node_B.epsx_data_h[0],
           proc_control_node_B.loop_ub_tmp_b * sizeof(real_T));
  }

  exitg1 = false;
  while ((!exitg1) && (proc_control_node_B.iter_o <
                       proc_control_node_B.maxiter_a)) {
    proc_control_node_abs_b(proc_control_node_B.dx_data_j,
      &proc_control_node_B.dx_size_k, proc_control_node_B.tmp_data_pi,
      &proc_control_node_B.tmp_size_h);
    proc_control_node_B.tmp_size_cc = proc_control_node_B.tmp_size_h;
    proc_control_node_B.loop_ub_o = proc_control_node_B.tmp_size_h;
    for (proc_control_node_B.loop_ub_tmp_b = 0;
         proc_control_node_B.loop_ub_tmp_b < proc_control_node_B.loop_ub_o;
         proc_control_node_B.loop_ub_tmp_b++) {
      proc_control_node_B.tmp_data_cg[proc_control_node_B.loop_ub_tmp_b] =
        (proc_control_node_B.tmp_data_pi[proc_control_node_B.loop_ub_tmp_b] >=
         proc_control_node_B.epsx_data_h[proc_control_node_B.loop_ub_tmp_b]);
    }

    if (proc_control_node_any_b(proc_control_node_B.tmp_data_cg,
         &proc_control_node_B.tmp_size_cc)) {
      proc_control_node_abs_b(proc_control_node_B.b_r_data_np,
        &proc_control_node_B.b_r_size_d, proc_control_node_B.tmp_data_pi,
        &proc_control_node_B.tmp_size_h);
      proc_control_node_B.tmp_size_cc = proc_control_node_B.tmp_size_h;
      proc_control_node_B.loop_ub_o = proc_control_node_B.tmp_size_h;
      for (proc_control_node_B.loop_ub_tmp_b = 0;
           proc_control_node_B.loop_ub_tmp_b < proc_control_node_B.loop_ub_o;
           proc_control_node_B.loop_ub_tmp_b++) {
        proc_control_node_B.tmp_data_cg[proc_control_node_B.loop_ub_tmp_b] =
          (proc_control_node_B.tmp_data_pi[proc_control_node_B.loop_ub_tmp_b] >=
           proc_control_node_B.epsr_data_k[proc_control_node_B.loop_ub_tmp_b]);
      }

      if (proc_control_node_any_b(proc_control_node_B.tmp_data_cg,
           &proc_control_node_B.tmp_size_cc)) {
        proc_control_node_B.iter_o++;
        proc_con_solveDampenedHessian_b(proc_control_node_B.Jtri_data_m,
          proc_control_node_B.Jtri_size_j, proc_control_node_B.lambda_d,
          proc_control_node_B.v_data_d, &proc_control_node_B.v_size_n,
          proc_control_node_B.dx_data_j, &proc_control_node_B.dx_size_k);
        proc_control_node_B.xnew_size_h = *x_size;
        proc_control_node_B.loop_ub_o = *x_size;
        for (proc_control_node_B.loop_ub_tmp_b = 0;
             proc_control_node_B.loop_ub_tmp_b < proc_control_node_B.loop_ub_o;
             proc_control_node_B.loop_ub_tmp_b++) {
          proc_control_node_B.xnew_data_n[proc_control_node_B.loop_ub_tmp_b] =
            x_data[proc_control_node_B.loop_ub_tmp_b] -
            proc_control_node_B.dx_data_j[proc_control_node_B.loop_ub_tmp_b];
        }

        proc_control_node_anon_b4nwk(FUN_workspace_waypoints_data,
          FUN_workspace_waypoints_size, FUN_workspace_course_data,
          FUN_workspace_course_size, proc_control_node_B.xnew_data_n,
          proc_control_node_B.b_varargout_1_data_j,
          &proc_control_node_B.b_varargout_1_size_a,
          proc_control_node_B.b_varargout_2_data_c,
          proc_control_node_B.b_varargout_2_size_k);
        proc_control_node_B.b_varargout_1_ju = 0.0;
        proc_control_node_B.loop_ub_o = proc_control_node_B.b_varargout_1_size_a;
        for (proc_control_node_B.loop_ub_tmp_b = 0;
             proc_control_node_B.loop_ub_tmp_b < proc_control_node_B.loop_ub_o;
             proc_control_node_B.loop_ub_tmp_b++) {
          proc_control_node_B.b_varargout_1_p =
            proc_control_node_B.b_varargout_1_data_j[proc_control_node_B.loop_ub_tmp_b];
          proc_control_node_B.b_varargout_1_ju +=
            proc_control_node_B.b_varargout_1_p *
            proc_control_node_B.b_varargout_1_p;
        }

        proc_control_node_fletcher_b(proc_control_node_B.S_n,
          proc_control_node_B.b_varargout_1_ju, proc_control_node_B.dx_data_j,
          &proc_control_node_B.dx_size_k, proc_control_node_B.v_data_d,
          proc_control_node_B.Jtri_data_m, proc_control_node_B.Jtri_size_j,
          proc_control_node_B.lambda_d, proc_control_node_B.lambdac_j,
          &proc_control_node_B.lambda_d, &proc_control_node_B.lambdac_j);
        if (proc_control_node_B.b_varargout_1_ju < proc_control_node_B.S_n) {
          proc_control_node_B.S_n = proc_control_node_B.b_varargout_1_ju;
          proc_control_node_B.loop_ub_o = proc_control_node_B.xnew_size_h;
          if (0 <= proc_control_node_B.loop_ub_o - 1) {
            memcpy(&x_data[0], &proc_control_node_B.xnew_data_n[0],
                   proc_control_node_B.loop_ub_o * sizeof(real_T));
          }

          proc_control_node_B.b_r_size_d =
            proc_control_node_B.b_varargout_1_size_a;
          proc_control_node_B.loop_ub_o =
            proc_control_node_B.b_varargout_1_size_a;
          if (0 <= proc_control_node_B.loop_ub_o - 1) {
            memcpy(&proc_control_node_B.b_r_data_np[0],
                   &proc_control_node_B.b_varargout_1_data_j[0],
                   proc_control_node_B.loop_ub_o * sizeof(real_T));
          }

          proc_control_node_B.Jtri_size_j[0] =
            proc_control_node_B.b_varargout_2_size_k[0];
          proc_control_node_B.Jtri_size_j[1] = 3;
          proc_control_node_B.loop_ub_o =
            proc_control_node_B.b_varargout_2_size_k[0] * 3;
          if (0 <= proc_control_node_B.loop_ub_o - 1) {
            memcpy(&proc_control_node_B.Jtri_data_m[0],
                   &proc_control_node_B.b_varargout_2_data_c[0],
                   proc_control_node_B.loop_ub_o * sizeof(real_T));
          }

          proc_control_node_mulJt_b(proc_control_node_B.b_varargout_2_data_c,
            proc_control_node_B.b_varargout_2_size_k,
            proc_control_node_B.b_varargout_1_data_j,
            &proc_control_node_B.b_varargout_1_size_a,
            proc_control_node_B.tmp_data_pi, &proc_control_node_B.tmp_size_h);
          proc_control_node_B.v_size_n = proc_control_node_B.tmp_size_h;
          proc_control_node_B.loop_ub_o = proc_control_node_B.tmp_size_h;
          if (0 <= proc_control_node_B.loop_ub_o - 1) {
            memcpy(&proc_control_node_B.v_data_d[0],
                   &proc_control_node_B.tmp_data_pi[0],
                   proc_control_node_B.loop_ub_o * sizeof(real_T));
          }
        }
      } else {
        exitg1 = true;
      }
    } else {
      exitg1 = true;
    }
  }
}

static void proc_control_node_anon_b4nw(const real_T waypoints_data[], const
  int32_T waypoints_size[2], const real_T course_data[], const int32_T
  *course_size, const real_T x_data[], real_T varargout_1_data[], int32_T
  *varargout_1_size, real_T varargout_2_data[], int32_T varargout_2_size[2])
{
  proc_control_node_B.loop_ub_on = *course_size;
  if (0 <= proc_control_node_B.loop_ub_on - 1) {
    memcpy(&proc_control_node_B.course_data[0], &course_data[0],
           proc_control_node_B.loop_ub_on * sizeof(real_T));
  }

  proc_control_node_B.loop_ub_on = waypoints_size[0];
  for (proc_control_node_B.e_k = 0; proc_control_node_B.e_k <
       proc_control_node_B.loop_ub_on; proc_control_node_B.e_k++) {
    proc_control_node_B.hip_data[proc_control_node_B.e_k].re =
      waypoints_data[proc_control_node_B.e_k];
    proc_control_node_B.hip_data[proc_control_node_B.e_k].im =
      waypoints_data[proc_control_node_B.e_k + waypoints_size[0]];
  }

  if (2 > *course_size) {
    proc_control_node_B.f_h = 0;
    proc_control_node_B.e_k = 0;
  } else {
    proc_control_node_B.f_h = 1;
    proc_control_node_B.e_k = *course_size;
  }

  proc_control_node_B.loop_ub_on = proc_control_node_B.e_k -
    proc_control_node_B.f_h;
  for (proc_control_node_B.e_k = 0; proc_control_node_B.e_k <
       proc_control_node_B.loop_ub_on; proc_control_node_B.e_k++) {
    proc_control_node_B.course_data[proc_control_node_B.f_h +
      proc_control_node_B.e_k] = x_data[proc_control_node_B.e_k];
  }

  if (1 > waypoints_size[0] - 1) {
    proc_control_node_B.loop_ub_on = -1;
    proc_control_node_B.k_d = -1;
  } else {
    proc_control_node_B.loop_ub_on = waypoints_size[0] - 2;
    proc_control_node_B.k_d = waypoints_size[0] - 2;
  }

  if (2 > waypoints_size[0]) {
    proc_control_node_B.f_h = 0;
    proc_control_node_B.l_o = -1;
    proc_control_node_B.p_k = 0;
    proc_control_node_B.o = -1;
  } else {
    proc_control_node_B.f_h = 1;
    proc_control_node_B.l_o = waypoints_size[0] - 1;
    proc_control_node_B.p_k = 1;
    proc_control_node_B.o = waypoints_size[0] - 1;
  }

  if (0 <= proc_control_node_B.loop_ub_on) {
    memcpy(&proc_control_node_B.hip_data_fx[0], &proc_control_node_B.hip_data[0],
           (proc_control_node_B.loop_ub_on + 1) * sizeof(creal_T));
  }

  proc_control_node_B.course_size = proc_control_node_B.k_d + 1;
  if (0 <= proc_control_node_B.k_d) {
    memcpy(&proc_control_node_B.course_data_k[0],
           &proc_control_node_B.course_data[0], (proc_control_node_B.k_d + 1) *
           sizeof(real_T));
  }

  proc_control_node_B.loop_ub_on = proc_control_node_B.l_o -
    proc_control_node_B.f_h;
  proc_control_node_B.hip_size = proc_control_node_B.loop_ub_on + 1;
  for (proc_control_node_B.e_k = 0; proc_control_node_B.e_k <=
       proc_control_node_B.loop_ub_on; proc_control_node_B.e_k++) {
    proc_control_node_B.hip_data_m[proc_control_node_B.e_k] =
      proc_control_node_B.hip_data[proc_control_node_B.f_h +
      proc_control_node_B.e_k];
  }

  proc_control_node_B.loop_ub_on = proc_control_node_B.o -
    proc_control_node_B.p_k;
  proc_control_node_B.course_size_d = proc_control_node_B.loop_ub_on + 1;
  for (proc_control_node_B.e_k = 0; proc_control_node_B.e_k <=
       proc_control_node_B.loop_ub_on; proc_control_node_B.e_k++) {
    proc_control_node_B.course_data_f[proc_control_node_B.e_k] =
      proc_control_node_B.course_data[proc_control_node_B.p_k +
      proc_control_node_B.e_k];
  }

  proc_control_clothoidG1fit2wp_b(proc_control_node_B.hip_data_fx,
    proc_control_node_B.course_data_k, &proc_control_node_B.course_size,
    proc_control_node_B.hip_data_m, &proc_control_node_B.hip_size,
    proc_control_node_B.course_data_f, &proc_control_node_B.course_size_d,
    proc_control_node_B.k0_data, &proc_control_node_B.k0_size,
    proc_control_node_B.k1_data, &proc_control_node_B.k1_size,
    proc_control_node_B.a__2_data, &proc_control_node_B.a__2_size,
    proc_control_node_B.dk0_dc0_data, &proc_control_node_B.dk0_dc0_size,
    proc_control_node_B.dk0_dc1_data, &proc_control_node_B.dk0_dc1_size,
    proc_control_node_B.dk1_dc0_data, &proc_control_node_B.dk1_dc0_size,
    proc_control_node_B.dk1_dc1_data, &proc_control_node_B.dk1_dc1_size);
  if (1 > proc_control_node_B.k1_size - 1) {
    proc_control_node_B.loop_ub_on = -1;
  } else {
    proc_control_node_B.loop_ub_on = proc_control_node_B.k1_size - 2;
  }

  if (2 > proc_control_node_B.k0_size) {
    proc_control_node_B.u_k = 0;
  } else {
    proc_control_node_B.u_k = 1;
  }

  if (2 > proc_control_node_B.dk0_dc1_size) {
    proc_control_node_B.f_h = 0;
    proc_control_node_B.p_k = -1;
  } else {
    proc_control_node_B.f_h = 1;
    proc_control_node_B.p_k = proc_control_node_B.dk0_dc1_size - 1;
  }

  if (2 > proc_control_node_B.dk1_dc0_size) {
    proc_control_node_B.o = 0;
    proc_control_node_B.cb = -1;
  } else {
    proc_control_node_B.o = 1;
    proc_control_node_B.cb = proc_control_node_B.dk1_dc0_size - 1;
  }

  if (1 > waypoints_size[0] - 2) {
    proc_control_node_B.k_d = -1;
  } else {
    proc_control_node_B.k_d = waypoints_size[0] - 3;
  }

  if (2 > waypoints_size[0] - 1) {
    proc_control_node_B.l_o = 0;
  } else {
    proc_control_node_B.l_o = 1;
  }

  *varargout_1_size = proc_control_node_B.loop_ub_on + 2;
  for (proc_control_node_B.e_k = 0; proc_control_node_B.e_k <=
       proc_control_node_B.loop_ub_on; proc_control_node_B.e_k++) {
    varargout_1_data[proc_control_node_B.e_k] =
      proc_control_node_B.k1_data[proc_control_node_B.e_k] -
      proc_control_node_B.k0_data[proc_control_node_B.u_k +
      proc_control_node_B.e_k];
  }

  varargout_1_data[proc_control_node_B.loop_ub_on + 1] =
    proc_control_node_B.k1_data[proc_control_node_B.k1_size - 1];
  proc_control_node_B.loop_ub_on = proc_control_node_B.cb -
    proc_control_node_B.o;
  varargout_2_size[0] = proc_control_node_B.loop_ub_on + 2;
  varargout_2_size[1] = 3;
  for (proc_control_node_B.e_k = 0; proc_control_node_B.e_k <=
       proc_control_node_B.loop_ub_on; proc_control_node_B.e_k++) {
    varargout_2_data[proc_control_node_B.e_k] =
      proc_control_node_B.dk1_dc0_data[proc_control_node_B.o +
      proc_control_node_B.e_k];
  }

  varargout_2_data[proc_control_node_B.loop_ub_on + 1] = 0.0;
  for (proc_control_node_B.e_k = 0; proc_control_node_B.e_k <=
       proc_control_node_B.k_d; proc_control_node_B.e_k++) {
    varargout_2_data[(proc_control_node_B.e_k + proc_control_node_B.loop_ub_on)
      + 2] = proc_control_node_B.dk1_dc1_data[proc_control_node_B.e_k] -
      proc_control_node_B.dk0_dc0_data[proc_control_node_B.l_o +
      proc_control_node_B.e_k];
  }

  varargout_2_data[(proc_control_node_B.k_d + proc_control_node_B.loop_ub_on) +
    3] = proc_control_node_B.dk1_dc1_data[waypoints_size[0] - 2];
  proc_control_node_B.loop_ub_on = proc_control_node_B.p_k -
    proc_control_node_B.f_h;
  for (proc_control_node_B.e_k = 0; proc_control_node_B.e_k <=
       proc_control_node_B.loop_ub_on; proc_control_node_B.e_k++) {
    varargout_2_data[proc_control_node_B.e_k + (varargout_2_size[0] << 1)] =
      -proc_control_node_B.dk0_dc1_data[proc_control_node_B.f_h +
      proc_control_node_B.e_k];
  }

  varargout_2_data[(proc_control_node_B.loop_ub_on + (varargout_2_size[0] << 1))
    + 1] = 0.0;
}

static void proc_control__LMFsolve_b4nwkzrt(const real_T
  FUN_workspace_waypoints_data[], const int32_T FUN_workspace_waypoints_size[2],
  const real_T FUN_workspace_course_data[], const int32_T
  *FUN_workspace_course_size, real_T x_data[], const int32_T *x_size)
{
  boolean_T exitg1;
  proc_control_node_B.maxiter_g = 100 * *x_size;
  proc_control_node_anon_b4nw(FUN_workspace_waypoints_data,
    FUN_workspace_waypoints_size, FUN_workspace_course_data,
    FUN_workspace_course_size, x_data, proc_control_node_B.b_r_data_n,
    &proc_control_node_B.b_r_size_h, proc_control_node_B.b_varargout_2_data_i,
    proc_control_node_B.b_varargout_2_size_n);
  proc_control_node_B.Jtri_size_h[0] = proc_control_node_B.b_varargout_2_size_n
    [0];
  proc_control_node_B.Jtri_size_h[1] = 3;
  proc_control_node_B.loop_ub_tmp_bq = proc_control_node_B.b_varargout_2_size_n
    [0] * 3;
  if (0 <= proc_control_node_B.loop_ub_tmp_bq - 1) {
    memcpy(&proc_control_node_B.Jtri_data_k[0],
           &proc_control_node_B.b_varargout_2_data_i[0],
           proc_control_node_B.loop_ub_tmp_bq * sizeof(real_T));
  }

  proc_control_node_mulJt_b(proc_control_node_B.b_varargout_2_data_i,
    proc_control_node_B.b_varargout_2_size_n, proc_control_node_B.b_r_data_n,
    &proc_control_node_B.b_r_size_h, proc_control_node_B.xnew_data,
    &proc_control_node_B.xnew_size_e);
  proc_control_node_B.v_size_o = proc_control_node_B.xnew_size_e;
  proc_control_node_B.loop_ub_g = proc_control_node_B.xnew_size_e;
  if (0 <= proc_control_node_B.loop_ub_g - 1) {
    memcpy(&proc_control_node_B.v_data_o[0], &proc_control_node_B.xnew_data[0],
           proc_control_node_B.loop_ub_g * sizeof(real_T));
  }

  proc_control_node_B.S_g = 0.0;
  proc_control_node_B.loop_ub_g = proc_control_node_B.b_r_size_h;
  for (proc_control_node_B.loop_ub_tmp_bq = 0;
       proc_control_node_B.loop_ub_tmp_bq < proc_control_node_B.loop_ub_g;
       proc_control_node_B.loop_ub_tmp_bq++) {
    proc_control_node_B.lambda_pq =
      proc_control_node_B.b_r_data_n[proc_control_node_B.loop_ub_tmp_bq];
    proc_control_node_B.S_g += proc_control_node_B.lambda_pq *
      proc_control_node_B.lambda_pq;
  }

  proc_control_node_B.lambda_pq = 0.0;
  proc_control_node_B.lambdac_f = 0.75;
  proc_control_node_B.iter_a = 0;
  proc_control_node_repmat_b(static_cast<real_T>(*x_size),
    proc_control_node_B.epsx_data, &proc_control_node_B.xnew_size_e);
  proc_control_node_repmat_b(static_cast<real_T>(*x_size),
    proc_control_node_B.epsr_data, &proc_control_node_B.epsr_size);
  proc_control_node_B.dx_size_a = proc_control_node_B.xnew_size_e;
  proc_control_node_B.loop_ub_g = proc_control_node_B.xnew_size_e;
  if (0 <= proc_control_node_B.loop_ub_g - 1) {
    memcpy(&proc_control_node_B.dx_data_jk[0], &proc_control_node_B.epsx_data[0],
           proc_control_node_B.loop_ub_g * sizeof(real_T));
  }

  exitg1 = false;
  while ((!exitg1) && (proc_control_node_B.iter_a <
                       proc_control_node_B.maxiter_g)) {
    proc_control_node_abs_b(proc_control_node_B.dx_data_jk,
      &proc_control_node_B.dx_size_a, proc_control_node_B.xnew_data,
      &proc_control_node_B.xnew_size_e);
    proc_control_node_B.xnew_size_j = proc_control_node_B.xnew_size_e;
    proc_control_node_B.loop_ub_g = proc_control_node_B.xnew_size_e;
    for (proc_control_node_B.loop_ub_tmp_bq = 0;
         proc_control_node_B.loop_ub_tmp_bq < proc_control_node_B.loop_ub_g;
         proc_control_node_B.loop_ub_tmp_bq++) {
      proc_control_node_B.xnew_data_a[proc_control_node_B.loop_ub_tmp_bq] =
        (proc_control_node_B.xnew_data[proc_control_node_B.loop_ub_tmp_bq] >=
         proc_control_node_B.epsx_data[proc_control_node_B.loop_ub_tmp_bq]);
    }

    if (proc_control_node_any_b(proc_control_node_B.xnew_data_a,
         &proc_control_node_B.xnew_size_j)) {
      proc_control_node_abs_b(proc_control_node_B.b_r_data_n,
        &proc_control_node_B.b_r_size_h, proc_control_node_B.xnew_data,
        &proc_control_node_B.xnew_size_e);
      proc_control_node_B.xnew_size_j = proc_control_node_B.xnew_size_e;
      proc_control_node_B.loop_ub_g = proc_control_node_B.xnew_size_e;
      for (proc_control_node_B.loop_ub_tmp_bq = 0;
           proc_control_node_B.loop_ub_tmp_bq < proc_control_node_B.loop_ub_g;
           proc_control_node_B.loop_ub_tmp_bq++) {
        proc_control_node_B.xnew_data_a[proc_control_node_B.loop_ub_tmp_bq] =
          (proc_control_node_B.xnew_data[proc_control_node_B.loop_ub_tmp_bq] >=
           proc_control_node_B.epsr_data[proc_control_node_B.loop_ub_tmp_bq]);
      }

      if (proc_control_node_any_b(proc_control_node_B.xnew_data_a,
           &proc_control_node_B.xnew_size_j)) {
        proc_control_node_B.iter_a++;
        proc_con_solveDampenedHessian_b(proc_control_node_B.Jtri_data_k,
          proc_control_node_B.Jtri_size_h, proc_control_node_B.lambda_pq,
          proc_control_node_B.v_data_o, &proc_control_node_B.v_size_o,
          proc_control_node_B.dx_data_jk, &proc_control_node_B.dx_size_a);
        proc_control_node_B.xnew_size_e = *x_size;
        proc_control_node_B.loop_ub_g = *x_size;
        for (proc_control_node_B.loop_ub_tmp_bq = 0;
             proc_control_node_B.loop_ub_tmp_bq < proc_control_node_B.loop_ub_g;
             proc_control_node_B.loop_ub_tmp_bq++) {
          proc_control_node_B.xnew_data[proc_control_node_B.loop_ub_tmp_bq] =
            x_data[proc_control_node_B.loop_ub_tmp_bq] -
            proc_control_node_B.dx_data_jk[proc_control_node_B.loop_ub_tmp_bq];
        }

        proc_control_node_anon_b4nw(FUN_workspace_waypoints_data,
          FUN_workspace_waypoints_size, FUN_workspace_course_data,
          FUN_workspace_course_size, proc_control_node_B.xnew_data,
          proc_control_node_B.b_varargout_1_data_m,
          &proc_control_node_B.epsr_size,
          proc_control_node_B.b_varargout_2_data_i,
          proc_control_node_B.b_varargout_2_size_n);
        proc_control_node_B.b_varargout_1_d = 0.0;
        proc_control_node_B.loop_ub_g = proc_control_node_B.epsr_size;
        for (proc_control_node_B.loop_ub_tmp_bq = 0;
             proc_control_node_B.loop_ub_tmp_bq < proc_control_node_B.loop_ub_g;
             proc_control_node_B.loop_ub_tmp_bq++) {
          proc_control_node_B.b_varargout_1_h =
            proc_control_node_B.b_varargout_1_data_m[proc_control_node_B.loop_ub_tmp_bq];
          proc_control_node_B.b_varargout_1_d +=
            proc_control_node_B.b_varargout_1_h *
            proc_control_node_B.b_varargout_1_h;
        }

        proc_control_node_fletcher_b(proc_control_node_B.S_g,
          proc_control_node_B.b_varargout_1_d, proc_control_node_B.dx_data_jk,
          &proc_control_node_B.dx_size_a, proc_control_node_B.v_data_o,
          proc_control_node_B.Jtri_data_k, proc_control_node_B.Jtri_size_h,
          proc_control_node_B.lambda_pq, proc_control_node_B.lambdac_f,
          &proc_control_node_B.lambda_pq, &proc_control_node_B.lambdac_f);
        if (proc_control_node_B.b_varargout_1_d < proc_control_node_B.S_g) {
          proc_control_node_B.S_g = proc_control_node_B.b_varargout_1_d;
          proc_control_node_B.loop_ub_g = proc_control_node_B.xnew_size_e;
          if (0 <= proc_control_node_B.loop_ub_g - 1) {
            memcpy(&x_data[0], &proc_control_node_B.xnew_data[0],
                   proc_control_node_B.loop_ub_g * sizeof(real_T));
          }

          proc_control_node_B.b_r_size_h = proc_control_node_B.epsr_size;
          proc_control_node_B.loop_ub_g = proc_control_node_B.epsr_size;
          if (0 <= proc_control_node_B.loop_ub_g - 1) {
            memcpy(&proc_control_node_B.b_r_data_n[0],
                   &proc_control_node_B.b_varargout_1_data_m[0],
                   proc_control_node_B.loop_ub_g * sizeof(real_T));
          }

          proc_control_node_B.Jtri_size_h[0] =
            proc_control_node_B.b_varargout_2_size_n[0];
          proc_control_node_B.Jtri_size_h[1] = 3;
          proc_control_node_B.loop_ub_g =
            proc_control_node_B.b_varargout_2_size_n[0] * 3;
          if (0 <= proc_control_node_B.loop_ub_g - 1) {
            memcpy(&proc_control_node_B.Jtri_data_k[0],
                   &proc_control_node_B.b_varargout_2_data_i[0],
                   proc_control_node_B.loop_ub_g * sizeof(real_T));
          }

          proc_control_node_mulJt_b(proc_control_node_B.b_varargout_2_data_i,
            proc_control_node_B.b_varargout_2_size_n,
            proc_control_node_B.b_varargout_1_data_m,
            &proc_control_node_B.epsr_size, proc_control_node_B.xnew_data,
            &proc_control_node_B.xnew_size_e);
          proc_control_node_B.v_size_o = proc_control_node_B.xnew_size_e;
          proc_control_node_B.loop_ub_g = proc_control_node_B.xnew_size_e;
          if (0 <= proc_control_node_B.loop_ub_g - 1) {
            memcpy(&proc_control_node_B.v_data_o[0],
                   &proc_control_node_B.xnew_data[0],
                   proc_control_node_B.loop_ub_g * sizeof(real_T));
          }
        }
      } else {
        exitg1 = true;
      }
    } else {
      exitg1 = true;
    }
  }
}

static void proc_control_node_anon_b4n(const real_T waypoints_data[], const
  int32_T waypoints_size[2], const real_T course_data[], const int32_T
  *course_size, const real_T x_data[], real_T varargout_1_data[], int32_T
  *varargout_1_size, real_T varargout_2_data[], int32_T varargout_2_size[2])
{
  int32_T course_size_0;
  proc_control_node_B.loop_ub_h = *course_size;
  if (0 <= proc_control_node_B.loop_ub_h - 1) {
    memcpy(&proc_control_node_B.course_data_l[0], &course_data[0],
           proc_control_node_B.loop_ub_h * sizeof(real_T));
  }

  proc_control_node_B.loop_ub_h = waypoints_size[0];
  for (proc_control_node_B.i10 = 0; proc_control_node_B.i10 <
       proc_control_node_B.loop_ub_h; proc_control_node_B.i10++) {
    proc_control_node_B.hip_data_m0[proc_control_node_B.i10].re =
      waypoints_data[proc_control_node_B.i10];
    proc_control_node_B.hip_data_m0[proc_control_node_B.i10].im =
      waypoints_data[proc_control_node_B.i10 + waypoints_size[0]];
  }

  if (1 > *course_size - 1) {
    proc_control_node_B.e_f = 0;
  } else {
    proc_control_node_B.e_f = *course_size - 1;
  }

  if (0 <= proc_control_node_B.e_f - 1) {
    memcpy(&proc_control_node_B.course_data_l[0], &x_data[0],
           proc_control_node_B.e_f * sizeof(real_T));
  }

  if (1 > waypoints_size[0] - 1) {
    proc_control_node_B.loop_ub_h = -1;
    proc_control_node_B.j_n = -1;
  } else {
    proc_control_node_B.loop_ub_h = waypoints_size[0] - 2;
    proc_control_node_B.j_n = waypoints_size[0] - 2;
  }

  if (2 > waypoints_size[0]) {
    proc_control_node_B.e_f = 0;
    proc_control_node_B.k_g = -1;
    proc_control_node_B.o_m = 0;
    proc_control_node_B.m_o = -1;
  } else {
    proc_control_node_B.e_f = 1;
    proc_control_node_B.k_g = waypoints_size[0] - 1;
    proc_control_node_B.o_m = 1;
    proc_control_node_B.m_o = waypoints_size[0] - 1;
  }

  if (0 <= proc_control_node_B.loop_ub_h) {
    memcpy(&proc_control_node_B.hip_data_g[0], &proc_control_node_B.hip_data_m0
           [0], (proc_control_node_B.loop_ub_h + 1) * sizeof(creal_T));
  }

  proc_control_node_B.course_size_e = proc_control_node_B.j_n + 1;
  if (0 <= proc_control_node_B.j_n) {
    memcpy(&proc_control_node_B.course_data_mi[0],
           &proc_control_node_B.course_data_l[0], (proc_control_node_B.j_n + 1) *
           sizeof(real_T));
  }

  proc_control_node_B.loop_ub_h = proc_control_node_B.k_g -
    proc_control_node_B.e_f;
  proc_control_node_B.hip_size_o = proc_control_node_B.loop_ub_h + 1;
  for (proc_control_node_B.i10 = 0; proc_control_node_B.i10 <=
       proc_control_node_B.loop_ub_h; proc_control_node_B.i10++) {
    proc_control_node_B.hip_data_j[proc_control_node_B.i10] =
      proc_control_node_B.hip_data_m0[proc_control_node_B.e_f +
      proc_control_node_B.i10];
  }

  proc_control_node_B.loop_ub_h = proc_control_node_B.m_o -
    proc_control_node_B.o_m;
  course_size_0 = proc_control_node_B.loop_ub_h + 1;
  for (proc_control_node_B.i10 = 0; proc_control_node_B.i10 <=
       proc_control_node_B.loop_ub_h; proc_control_node_B.i10++) {
    proc_control_node_B.course_data_lu[proc_control_node_B.i10] =
      proc_control_node_B.course_data_l[proc_control_node_B.o_m +
      proc_control_node_B.i10];
  }

  proc_control_clothoidG1fit2wp_b(proc_control_node_B.hip_data_g,
    proc_control_node_B.course_data_mi, &proc_control_node_B.course_size_e,
    proc_control_node_B.hip_data_j, &proc_control_node_B.hip_size_o,
    proc_control_node_B.course_data_lu, &course_size_0,
    proc_control_node_B.k0_data_h, &proc_control_node_B.k0_size_e,
    proc_control_node_B.k1_data_c, &proc_control_node_B.k1_size_m,
    proc_control_node_B.a__3_data, &proc_control_node_B.a__3_size,
    proc_control_node_B.dk0_dc0_data_a, &proc_control_node_B.dk0_dc0_size_i,
    proc_control_node_B.dk0_dc1_data_l, &proc_control_node_B.dk0_dc1_size_h,
    proc_control_node_B.dk1_dc0_data_j, &proc_control_node_B.dk1_dc0_size_n,
    proc_control_node_B.dk1_dc1_data_i, &proc_control_node_B.dk1_dc1_size_e);
  if (1 > proc_control_node_B.k1_size_m - 1) {
    proc_control_node_B.e_f = -1;
  } else {
    proc_control_node_B.e_f = proc_control_node_B.k1_size_m - 2;
  }

  if (2 > proc_control_node_B.k0_size_e) {
    proc_control_node_B.o_m = 0;
  } else {
    proc_control_node_B.o_m = 1;
  }

  if (1 > proc_control_node_B.dk0_dc1_size_h - 1) {
    proc_control_node_B.m_o = -1;
  } else {
    proc_control_node_B.m_o = proc_control_node_B.dk0_dc1_size_h - 2;
  }

  if (1 > proc_control_node_B.dk1_dc0_size_n - 1) {
    proc_control_node_B.loop_ub_h = -1;
  } else {
    proc_control_node_B.loop_ub_h = proc_control_node_B.dk1_dc0_size_n - 2;
  }

  if (1 > waypoints_size[0] - 2) {
    proc_control_node_B.j_n = -1;
  } else {
    proc_control_node_B.j_n = waypoints_size[0] - 3;
  }

  if (2 > waypoints_size[0] - 1) {
    proc_control_node_B.k_g = 0;
  } else {
    proc_control_node_B.k_g = 1;
  }

  *varargout_1_size = proc_control_node_B.e_f + 2;
  varargout_1_data[0] = 0.0 - proc_control_node_B.k0_data_h[0];
  for (proc_control_node_B.i10 = 0; proc_control_node_B.i10 <=
       proc_control_node_B.e_f; proc_control_node_B.i10++) {
    varargout_1_data[proc_control_node_B.i10 + 1] =
      proc_control_node_B.k1_data_c[proc_control_node_B.i10] -
      proc_control_node_B.k0_data_h[proc_control_node_B.o_m +
      proc_control_node_B.i10];
  }

  varargout_2_size[0] = proc_control_node_B.loop_ub_h + 2;
  varargout_2_size[1] = 3;
  if (0 <= proc_control_node_B.loop_ub_h) {
    memcpy(&varargout_2_data[0], &proc_control_node_B.dk1_dc0_data_j[0],
           (proc_control_node_B.loop_ub_h + 1) * sizeof(real_T));
  }

  varargout_2_data[proc_control_node_B.loop_ub_h + 1] = 0.0;
  varargout_2_data[proc_control_node_B.loop_ub_h + 2] = 0.0 -
    proc_control_node_B.dk0_dc0_data_a[0];
  for (proc_control_node_B.i10 = 0; proc_control_node_B.i10 <=
       proc_control_node_B.j_n; proc_control_node_B.i10++) {
    varargout_2_data[(proc_control_node_B.i10 + proc_control_node_B.loop_ub_h) +
      3] = proc_control_node_B.dk1_dc1_data_i[proc_control_node_B.i10] -
      proc_control_node_B.dk0_dc0_data_a[proc_control_node_B.k_g +
      proc_control_node_B.i10];
  }

  for (proc_control_node_B.i10 = 0; proc_control_node_B.i10 <=
       proc_control_node_B.m_o; proc_control_node_B.i10++) {
    varargout_2_data[proc_control_node_B.i10 + ((proc_control_node_B.loop_ub_h +
      2) << 1)] = -proc_control_node_B.dk0_dc1_data_l[proc_control_node_B.i10];
  }

  varargout_2_data[(proc_control_node_B.m_o + ((proc_control_node_B.loop_ub_h +
    2) << 1)) + 1] = 0.0;
}

static void proc_control_n_LMFsolve_b4nwkzr(const real_T
  FUN_workspace_waypoints_data[], const int32_T FUN_workspace_waypoints_size[2],
  const real_T FUN_workspace_course_data[], const int32_T
  *FUN_workspace_course_size, real_T x_data[], const int32_T *x_size)
{
  boolean_T exitg1;
  proc_control_node_B.maxiter = 100 * *x_size;
  proc_control_node_anon_b4n(FUN_workspace_waypoints_data,
    FUN_workspace_waypoints_size, FUN_workspace_course_data,
    FUN_workspace_course_size, x_data, proc_control_node_B.b_r_data_i,
    &proc_control_node_B.b_r_size, proc_control_node_B.b_varargout_2_data_o,
    proc_control_node_B.b_varargout_2_size);
  proc_control_node_B.Jtri_size[0] = proc_control_node_B.b_varargout_2_size[0];
  proc_control_node_B.Jtri_size[1] = 3;
  proc_control_node_B.loop_ub_tmp = proc_control_node_B.b_varargout_2_size[0] *
    3;
  if (0 <= proc_control_node_B.loop_ub_tmp - 1) {
    memcpy(&proc_control_node_B.Jtri_data_i[0],
           &proc_control_node_B.b_varargout_2_data_o[0],
           proc_control_node_B.loop_ub_tmp * sizeof(real_T));
  }

  proc_control_node_mulJt_b(proc_control_node_B.b_varargout_2_data_o,
    proc_control_node_B.b_varargout_2_size, proc_control_node_B.b_r_data_i,
    &proc_control_node_B.b_r_size, proc_control_node_B.tmp_data_hp,
    &proc_control_node_B.tmp_size_m);
  proc_control_node_B.v_size_m = proc_control_node_B.tmp_size_m;
  proc_control_node_B.loop_ub_b = proc_control_node_B.tmp_size_m;
  if (0 <= proc_control_node_B.loop_ub_b - 1) {
    memcpy(&proc_control_node_B.v_data_c[0], &proc_control_node_B.tmp_data_hp[0],
           proc_control_node_B.loop_ub_b * sizeof(real_T));
  }

  proc_control_node_B.S = 0.0;
  proc_control_node_B.loop_ub_b = proc_control_node_B.b_r_size;
  for (proc_control_node_B.loop_ub_tmp = 0; proc_control_node_B.loop_ub_tmp <
       proc_control_node_B.loop_ub_b; proc_control_node_B.loop_ub_tmp++) {
    proc_control_node_B.lambda =
      proc_control_node_B.b_r_data_i[proc_control_node_B.loop_ub_tmp];
    proc_control_node_B.S += proc_control_node_B.lambda *
      proc_control_node_B.lambda;
  }

  proc_control_node_B.lambda = 0.0;
  proc_control_node_B.lambdac = 0.75;
  proc_control_node_B.iter_n = 0;
  proc_control_node_repmat_b(static_cast<real_T>(*x_size),
    proc_control_node_B.tmp_data_hp, &proc_control_node_B.tmp_size_m);
  proc_control_node_B.loop_ub_tmp = proc_control_node_B.tmp_size_m;
  proc_control_node_B.loop_ub_b = proc_control_node_B.tmp_size_m;
  if (0 <= proc_control_node_B.loop_ub_b - 1) {
    memcpy(&proc_control_node_B.epsx_data_p[0],
           &proc_control_node_B.tmp_data_hp[0], proc_control_node_B.loop_ub_b *
           sizeof(real_T));
  }

  proc_control_node_repmat_b(static_cast<real_T>(*x_size),
    proc_control_node_B.tmp_data_hp, &proc_control_node_B.tmp_size_m);
  proc_control_node_B.loop_ub_b = proc_control_node_B.tmp_size_m;
  if (0 <= proc_control_node_B.loop_ub_b - 1) {
    memcpy(&proc_control_node_B.epsr_data_f[0],
           &proc_control_node_B.tmp_data_hp[0], proc_control_node_B.loop_ub_b *
           sizeof(real_T));
  }

  proc_control_node_B.dx_size = proc_control_node_B.loop_ub_tmp;
  if (0 <= proc_control_node_B.loop_ub_tmp - 1) {
    memcpy(&proc_control_node_B.dx_data[0], &proc_control_node_B.epsx_data_p[0],
           proc_control_node_B.loop_ub_tmp * sizeof(real_T));
  }

  exitg1 = false;
  while ((!exitg1) && (proc_control_node_B.iter_n < proc_control_node_B.maxiter))
  {
    proc_control_node_abs_b(proc_control_node_B.dx_data,
      &proc_control_node_B.dx_size, proc_control_node_B.tmp_data_hp,
      &proc_control_node_B.tmp_size_m);
    proc_control_node_B.tmp_size_n = proc_control_node_B.tmp_size_m;
    proc_control_node_B.loop_ub_b = proc_control_node_B.tmp_size_m;
    for (proc_control_node_B.loop_ub_tmp = 0; proc_control_node_B.loop_ub_tmp <
         proc_control_node_B.loop_ub_b; proc_control_node_B.loop_ub_tmp++) {
      proc_control_node_B.tmp_data_fb[proc_control_node_B.loop_ub_tmp] =
        (proc_control_node_B.tmp_data_hp[proc_control_node_B.loop_ub_tmp] >=
         proc_control_node_B.epsx_data_p[proc_control_node_B.loop_ub_tmp]);
    }

    if (proc_control_node_any_b(proc_control_node_B.tmp_data_fb,
         &proc_control_node_B.tmp_size_n)) {
      proc_control_node_abs_b(proc_control_node_B.b_r_data_i,
        &proc_control_node_B.b_r_size, proc_control_node_B.tmp_data_hp,
        &proc_control_node_B.tmp_size_m);
      proc_control_node_B.tmp_size_n = proc_control_node_B.tmp_size_m;
      proc_control_node_B.loop_ub_b = proc_control_node_B.tmp_size_m;
      for (proc_control_node_B.loop_ub_tmp = 0; proc_control_node_B.loop_ub_tmp <
           proc_control_node_B.loop_ub_b; proc_control_node_B.loop_ub_tmp++) {
        proc_control_node_B.tmp_data_fb[proc_control_node_B.loop_ub_tmp] =
          (proc_control_node_B.tmp_data_hp[proc_control_node_B.loop_ub_tmp] >=
           proc_control_node_B.epsr_data_f[proc_control_node_B.loop_ub_tmp]);
      }

      if (proc_control_node_any_b(proc_control_node_B.tmp_data_fb,
           &proc_control_node_B.tmp_size_n)) {
        proc_control_node_B.iter_n++;
        proc_con_solveDampenedHessian_b(proc_control_node_B.Jtri_data_i,
          proc_control_node_B.Jtri_size, proc_control_node_B.lambda,
          proc_control_node_B.v_data_c, &proc_control_node_B.v_size_m,
          proc_control_node_B.dx_data, &proc_control_node_B.dx_size);
        proc_control_node_B.xnew_size = *x_size;
        proc_control_node_B.loop_ub_b = *x_size;
        for (proc_control_node_B.loop_ub_tmp = 0;
             proc_control_node_B.loop_ub_tmp < proc_control_node_B.loop_ub_b;
             proc_control_node_B.loop_ub_tmp++) {
          proc_control_node_B.xnew_data_h[proc_control_node_B.loop_ub_tmp] =
            x_data[proc_control_node_B.loop_ub_tmp] -
            proc_control_node_B.dx_data[proc_control_node_B.loop_ub_tmp];
        }

        proc_control_node_anon_b4n(FUN_workspace_waypoints_data,
          FUN_workspace_waypoints_size, FUN_workspace_course_data,
          FUN_workspace_course_size, proc_control_node_B.xnew_data_h,
          proc_control_node_B.b_varargout_1_data_e,
          &proc_control_node_B.b_varargout_1_size,
          proc_control_node_B.b_varargout_2_data_o,
          proc_control_node_B.b_varargout_2_size);
        proc_control_node_B.b_varargout_1_g = 0.0;
        proc_control_node_B.loop_ub_b = proc_control_node_B.b_varargout_1_size;
        for (proc_control_node_B.loop_ub_tmp = 0;
             proc_control_node_B.loop_ub_tmp < proc_control_node_B.loop_ub_b;
             proc_control_node_B.loop_ub_tmp++) {
          proc_control_node_B.b_varargout_1_e =
            proc_control_node_B.b_varargout_1_data_e[proc_control_node_B.loop_ub_tmp];
          proc_control_node_B.b_varargout_1_g +=
            proc_control_node_B.b_varargout_1_e *
            proc_control_node_B.b_varargout_1_e;
        }

        proc_control_node_fletcher_b(proc_control_node_B.S,
          proc_control_node_B.b_varargout_1_g, proc_control_node_B.dx_data,
          &proc_control_node_B.dx_size, proc_control_node_B.v_data_c,
          proc_control_node_B.Jtri_data_i, proc_control_node_B.Jtri_size,
          proc_control_node_B.lambda, proc_control_node_B.lambdac,
          &proc_control_node_B.lambda, &proc_control_node_B.lambdac);
        if (proc_control_node_B.b_varargout_1_g < proc_control_node_B.S) {
          proc_control_node_B.S = proc_control_node_B.b_varargout_1_g;
          proc_control_node_B.loop_ub_b = proc_control_node_B.xnew_size;
          if (0 <= proc_control_node_B.loop_ub_b - 1) {
            memcpy(&x_data[0], &proc_control_node_B.xnew_data_h[0],
                   proc_control_node_B.loop_ub_b * sizeof(real_T));
          }

          proc_control_node_B.b_r_size = proc_control_node_B.b_varargout_1_size;
          proc_control_node_B.loop_ub_b = proc_control_node_B.b_varargout_1_size;
          if (0 <= proc_control_node_B.loop_ub_b - 1) {
            memcpy(&proc_control_node_B.b_r_data_i[0],
                   &proc_control_node_B.b_varargout_1_data_e[0],
                   proc_control_node_B.loop_ub_b * sizeof(real_T));
          }

          proc_control_node_B.Jtri_size[0] =
            proc_control_node_B.b_varargout_2_size[0];
          proc_control_node_B.Jtri_size[1] = 3;
          proc_control_node_B.loop_ub_b =
            proc_control_node_B.b_varargout_2_size[0] * 3;
          if (0 <= proc_control_node_B.loop_ub_b - 1) {
            memcpy(&proc_control_node_B.Jtri_data_i[0],
                   &proc_control_node_B.b_varargout_2_data_o[0],
                   proc_control_node_B.loop_ub_b * sizeof(real_T));
          }

          proc_control_node_mulJt_b(proc_control_node_B.b_varargout_2_data_o,
            proc_control_node_B.b_varargout_2_size,
            proc_control_node_B.b_varargout_1_data_e,
            &proc_control_node_B.b_varargout_1_size,
            proc_control_node_B.tmp_data_hp, &proc_control_node_B.tmp_size_m);
          proc_control_node_B.v_size_m = proc_control_node_B.tmp_size_m;
          proc_control_node_B.loop_ub_b = proc_control_node_B.tmp_size_m;
          if (0 <= proc_control_node_B.loop_ub_b - 1) {
            memcpy(&proc_control_node_B.v_data_c[0],
                   &proc_control_node_B.tmp_data_hp[0],
                   proc_control_node_B.loop_ub_b * sizeof(real_T));
          }
        }
      } else {
        exitg1 = true;
      }
    } else {
      exitg1 = true;
    }
  }
}

static void proc_control_node_anon_b4(const real_T waypoints_data[], const
  int32_T waypoints_size[2], const real_T x_data[], real_T varargout_1_data[],
  int32_T *varargout_1_size, real_T varargout_2_data[], int32_T
  varargout_2_size[2])
{
  proc_control_node_B.loop_ub_c = waypoints_size[0];
  for (proc_control_node_B.g = 0; proc_control_node_B.g <
       proc_control_node_B.loop_ub_c; proc_control_node_B.g++) {
    proc_control_node_B.hip_data_f[proc_control_node_B.g].re =
      waypoints_data[proc_control_node_B.g];
    proc_control_node_B.hip_data_f[proc_control_node_B.g].im =
      waypoints_data[proc_control_node_B.g + waypoints_size[0]];
  }

  if (1 > waypoints_size[0] - 1) {
    proc_control_node_B.loop_ub_c = -1;
    proc_control_node_B.g = -1;
  } else {
    proc_control_node_B.loop_ub_c = waypoints_size[0] - 2;
    proc_control_node_B.g = waypoints_size[0] - 2;
  }

  if (2 > waypoints_size[0]) {
    proc_control_node_B.i_fr = 0;
    proc_control_node_B.h_o = -1;
    proc_control_node_B.k_gf = 0;
    proc_control_node_B.j_mh = -1;
  } else {
    proc_control_node_B.i_fr = 1;
    proc_control_node_B.h_o = waypoints_size[0] - 1;
    proc_control_node_B.k_gf = 1;
    proc_control_node_B.j_mh = waypoints_size[0] - 1;
  }

  if (0 <= proc_control_node_B.loop_ub_c) {
    memcpy(&proc_control_node_B.hip_data_l[0], &proc_control_node_B.hip_data_f[0],
           (proc_control_node_B.loop_ub_c + 1) * sizeof(creal_T));
  }

  proc_control_node_B.x_size_g = proc_control_node_B.g + 1;
  if (0 <= proc_control_node_B.g) {
    memcpy(&proc_control_node_B.x_data_f[0], &x_data[0], (proc_control_node_B.g
            + 1) * sizeof(real_T));
  }

  proc_control_node_B.loop_ub_c = proc_control_node_B.h_o -
    proc_control_node_B.i_fr;
  proc_control_node_B.hip_size_k = proc_control_node_B.loop_ub_c + 1;
  for (proc_control_node_B.g = 0; proc_control_node_B.g <=
       proc_control_node_B.loop_ub_c; proc_control_node_B.g++) {
    proc_control_node_B.hip_data_a[proc_control_node_B.g] =
      proc_control_node_B.hip_data_f[proc_control_node_B.i_fr +
      proc_control_node_B.g];
  }

  proc_control_node_B.loop_ub_c = proc_control_node_B.j_mh -
    proc_control_node_B.k_gf;
  proc_control_node_B.x_size_n = proc_control_node_B.loop_ub_c + 1;
  for (proc_control_node_B.g = 0; proc_control_node_B.g <=
       proc_control_node_B.loop_ub_c; proc_control_node_B.g++) {
    proc_control_node_B.x_data_gf[proc_control_node_B.g] =
      x_data[proc_control_node_B.k_gf + proc_control_node_B.g];
  }

  proc_control_clothoidG1fit2wp_b(proc_control_node_B.hip_data_l,
    proc_control_node_B.x_data_f, &proc_control_node_B.x_size_g,
    proc_control_node_B.hip_data_a, &proc_control_node_B.hip_size_k,
    proc_control_node_B.x_data_gf, &proc_control_node_B.x_size_n,
    proc_control_node_B.k0_data_f, &proc_control_node_B.k0_size_k,
    proc_control_node_B.k1_data_o, &proc_control_node_B.k1_size_d,
    proc_control_node_B.a__5_data, &proc_control_node_B.a__5_size,
    proc_control_node_B.dk0_dc0_data_i, &proc_control_node_B.dk0_dc0_size_c,
    proc_control_node_B.dk0_dc1_data_e, &proc_control_node_B.dk0_dc1_size_k,
    proc_control_node_B.dk1_dc0_data_j0, &proc_control_node_B.dk1_dc0_size_k,
    proc_control_node_B.dk1_dc1_data_o, &proc_control_node_B.dk1_dc1_size_f);
  if (1 > proc_control_node_B.k1_size_d - 1) {
    proc_control_node_B.j_mh = -1;
  } else {
    proc_control_node_B.j_mh = proc_control_node_B.k1_size_d - 2;
  }

  if (2 > proc_control_node_B.k0_size_k) {
    proc_control_node_B.loop_ub_c = 0;
  } else {
    proc_control_node_B.loop_ub_c = 1;
  }

  if (1 > waypoints_size[0] - 2) {
    proc_control_node_B.i_fr = -1;
  } else {
    proc_control_node_B.i_fr = waypoints_size[0] - 3;
  }

  if (2 > waypoints_size[0] - 1) {
    proc_control_node_B.k_gf = 0;
  } else {
    proc_control_node_B.k_gf = 1;
  }

  *varargout_1_size = proc_control_node_B.j_mh + 3;
  varargout_1_data[0] = 0.0 - proc_control_node_B.k0_data_f[0];
  for (proc_control_node_B.g = 0; proc_control_node_B.g <=
       proc_control_node_B.j_mh; proc_control_node_B.g++) {
    varargout_1_data[proc_control_node_B.g + 1] =
      proc_control_node_B.k1_data_o[proc_control_node_B.g] -
      proc_control_node_B.k0_data_f[proc_control_node_B.loop_ub_c +
      proc_control_node_B.g];
  }

  varargout_1_data[proc_control_node_B.j_mh + 2] =
    proc_control_node_B.k1_data_o[proc_control_node_B.k1_size_d - 1];
  varargout_2_size[0] = proc_control_node_B.dk1_dc0_size_k + 1;
  varargout_2_size[1] = 3;
  proc_control_node_B.loop_ub_c = proc_control_node_B.dk1_dc0_size_k;
  if (0 <= proc_control_node_B.loop_ub_c - 1) {
    memcpy(&varargout_2_data[0], &proc_control_node_B.dk1_dc0_data_j0[0],
           proc_control_node_B.loop_ub_c * sizeof(real_T));
  }

  varargout_2_data[proc_control_node_B.dk1_dc0_size_k] = 0.0;
  varargout_2_data[proc_control_node_B.dk1_dc0_size_k + 1] = 0.0 -
    proc_control_node_B.dk0_dc0_data_i[0];
  for (proc_control_node_B.g = 0; proc_control_node_B.g <=
       proc_control_node_B.i_fr; proc_control_node_B.g++) {
    varargout_2_data[(proc_control_node_B.g + varargout_2_size[0]) + 1] =
      proc_control_node_B.dk1_dc1_data_o[proc_control_node_B.g] -
      proc_control_node_B.dk0_dc0_data_i[proc_control_node_B.k_gf +
      proc_control_node_B.g];
  }

  varargout_2_data[(proc_control_node_B.i_fr +
                    proc_control_node_B.dk1_dc0_size_k) + 3] =
    proc_control_node_B.dk1_dc1_data_o[waypoints_size[0] - 2];
  proc_control_node_B.loop_ub_c = proc_control_node_B.dk0_dc1_size_k;
  for (proc_control_node_B.g = 0; proc_control_node_B.g <
       proc_control_node_B.loop_ub_c; proc_control_node_B.g++) {
    varargout_2_data[proc_control_node_B.g + (varargout_2_size[0] << 1)] =
      -proc_control_node_B.dk0_dc1_data_e[proc_control_node_B.g];
  }

  varargout_2_data[proc_control_node_B.dk0_dc1_size_k +
    ((proc_control_node_B.dk1_dc0_size_k + 1) << 1)] = 0.0;
}

static void proc_control_no_LMFsolve_b4nwkz(const real_T
  FUN_workspace_waypoints_data[], const int32_T FUN_workspace_waypoints_size[2],
  real_T x_data[], const int32_T *x_size)
{
  boolean_T exitg1;
  proc_control_node_B.maxiter_n = 100 * *x_size;
  proc_control_node_anon_b4(FUN_workspace_waypoints_data,
    FUN_workspace_waypoints_size, x_data, proc_control_node_B.b_r_data,
    &proc_control_node_B.b_r_size_a, proc_control_node_B.b_varargout_2_data,
    proc_control_node_B.b_varargout_2_size_m);
  proc_control_node_B.Jtri_size_b[0] = proc_control_node_B.b_varargout_2_size_m
    [0];
  proc_control_node_B.Jtri_size_b[1] = 3;
  proc_control_node_B.loop_ub_tmp_o = proc_control_node_B.b_varargout_2_size_m[0]
    * 3;
  if (0 <= proc_control_node_B.loop_ub_tmp_o - 1) {
    memcpy(&proc_control_node_B.Jtri_data_p[0],
           &proc_control_node_B.b_varargout_2_data[0],
           proc_control_node_B.loop_ub_tmp_o * sizeof(real_T));
  }

  proc_control_node_mulJt_b(proc_control_node_B.b_varargout_2_data,
    proc_control_node_B.b_varargout_2_size_m, proc_control_node_B.b_r_data,
    &proc_control_node_B.b_r_size_a, proc_control_node_B.v_data_i,
    &proc_control_node_B.v_size_b);
  proc_control_node_B.S_is = 0.0;
  proc_control_node_B.loop_ub_a = proc_control_node_B.b_r_size_a;
  for (proc_control_node_B.loop_ub_tmp_o = 0; proc_control_node_B.loop_ub_tmp_o <
       proc_control_node_B.loop_ub_a; proc_control_node_B.loop_ub_tmp_o++) {
    proc_control_node_B.lambda_b =
      proc_control_node_B.b_r_data[proc_control_node_B.loop_ub_tmp_o];
    proc_control_node_B.S_is += proc_control_node_B.lambda_b *
      proc_control_node_B.lambda_b;
  }

  proc_control_node_B.lambda_b = 0.0;
  proc_control_node_B.lambdac_fy = 0.75;
  proc_control_node_B.iter_h = 0;
  proc_control_node_repmat_b(static_cast<real_T>(*x_size),
    proc_control_node_B.epsx_data_a, &proc_control_node_B.epsx_size);
  proc_control_node_repmat_b(static_cast<real_T>(*x_size),
    proc_control_node_B.epsr_data_d, &proc_control_node_B.epsr_size_k);
  proc_control_node_B.dx_size_k5 = proc_control_node_B.epsx_size;
  proc_control_node_B.loop_ub_a = proc_control_node_B.epsx_size;
  if (0 <= proc_control_node_B.loop_ub_a - 1) {
    memcpy(&proc_control_node_B.dx_data_k[0], &proc_control_node_B.epsx_data_a[0],
           proc_control_node_B.loop_ub_a * sizeof(real_T));
  }

  exitg1 = false;
  while ((!exitg1) && (proc_control_node_B.iter_h <
                       proc_control_node_B.maxiter_n)) {
    proc_control_node_abs_b(proc_control_node_B.dx_data_k,
      &proc_control_node_B.dx_size_k5, proc_control_node_B.xnew_data_f,
      &proc_control_node_B.epsx_size);
    proc_control_node_B.xnew_size_p = proc_control_node_B.epsx_size;
    proc_control_node_B.loop_ub_a = proc_control_node_B.epsx_size;
    for (proc_control_node_B.loop_ub_tmp_o = 0;
         proc_control_node_B.loop_ub_tmp_o < proc_control_node_B.loop_ub_a;
         proc_control_node_B.loop_ub_tmp_o++) {
      proc_control_node_B.xnew_data_no[proc_control_node_B.loop_ub_tmp_o] =
        (proc_control_node_B.xnew_data_f[proc_control_node_B.loop_ub_tmp_o] >=
         proc_control_node_B.epsx_data_a[proc_control_node_B.loop_ub_tmp_o]);
    }

    if (proc_control_node_any_b(proc_control_node_B.xnew_data_no,
         &proc_control_node_B.xnew_size_p)) {
      proc_control_node_abs_b(proc_control_node_B.b_r_data,
        &proc_control_node_B.b_r_size_a, proc_control_node_B.xnew_data_f,
        &proc_control_node_B.epsx_size);
      proc_control_node_B.xnew_size_p = proc_control_node_B.epsx_size;
      proc_control_node_B.loop_ub_a = proc_control_node_B.epsx_size;
      for (proc_control_node_B.loop_ub_tmp_o = 0;
           proc_control_node_B.loop_ub_tmp_o < proc_control_node_B.loop_ub_a;
           proc_control_node_B.loop_ub_tmp_o++) {
        proc_control_node_B.xnew_data_no[proc_control_node_B.loop_ub_tmp_o] =
          (proc_control_node_B.xnew_data_f[proc_control_node_B.loop_ub_tmp_o] >=
           proc_control_node_B.epsr_data_d[proc_control_node_B.loop_ub_tmp_o]);
      }

      if (proc_control_node_any_b(proc_control_node_B.xnew_data_no,
           &proc_control_node_B.xnew_size_p)) {
        proc_control_node_B.iter_h++;
        proc_con_solveDampenedHessian_b(proc_control_node_B.Jtri_data_p,
          proc_control_node_B.Jtri_size_b, proc_control_node_B.lambda_b,
          proc_control_node_B.v_data_i, &proc_control_node_B.v_size_b,
          proc_control_node_B.dx_data_k, &proc_control_node_B.dx_size_k5);
        proc_control_node_B.epsx_size = *x_size;
        proc_control_node_B.loop_ub_a = *x_size;
        for (proc_control_node_B.loop_ub_tmp_o = 0;
             proc_control_node_B.loop_ub_tmp_o < proc_control_node_B.loop_ub_a;
             proc_control_node_B.loop_ub_tmp_o++) {
          proc_control_node_B.xnew_data_f[proc_control_node_B.loop_ub_tmp_o] =
            x_data[proc_control_node_B.loop_ub_tmp_o] -
            proc_control_node_B.dx_data_k[proc_control_node_B.loop_ub_tmp_o];
        }

        proc_control_node_anon_b4(FUN_workspace_waypoints_data,
          FUN_workspace_waypoints_size, proc_control_node_B.xnew_data_f,
          proc_control_node_B.b_varargout_1_data,
          &proc_control_node_B.epsr_size_k,
          proc_control_node_B.b_varargout_2_data,
          proc_control_node_B.b_varargout_2_size_m);
        proc_control_node_B.b_varargout_1_c = 0.0;
        proc_control_node_B.loop_ub_a = proc_control_node_B.epsr_size_k;
        for (proc_control_node_B.loop_ub_tmp_o = 0;
             proc_control_node_B.loop_ub_tmp_o < proc_control_node_B.loop_ub_a;
             proc_control_node_B.loop_ub_tmp_o++) {
          proc_control_node_B.b_varargout_1_gl =
            proc_control_node_B.b_varargout_1_data[proc_control_node_B.loop_ub_tmp_o];
          proc_control_node_B.b_varargout_1_c +=
            proc_control_node_B.b_varargout_1_gl *
            proc_control_node_B.b_varargout_1_gl;
        }

        proc_control_node_fletcher_b(proc_control_node_B.S_is,
          proc_control_node_B.b_varargout_1_c, proc_control_node_B.dx_data_k,
          &proc_control_node_B.dx_size_k5, proc_control_node_B.v_data_i,
          proc_control_node_B.Jtri_data_p, proc_control_node_B.Jtri_size_b,
          proc_control_node_B.lambda_b, proc_control_node_B.lambdac_fy,
          &proc_control_node_B.lambda_b, &proc_control_node_B.lambdac_fy);
        if (proc_control_node_B.b_varargout_1_c < proc_control_node_B.S_is) {
          proc_control_node_B.S_is = proc_control_node_B.b_varargout_1_c;
          proc_control_node_B.loop_ub_a = proc_control_node_B.epsx_size;
          if (0 <= proc_control_node_B.loop_ub_a - 1) {
            memcpy(&x_data[0], &proc_control_node_B.xnew_data_f[0],
                   proc_control_node_B.loop_ub_a * sizeof(real_T));
          }

          proc_control_node_B.b_r_size_a = proc_control_node_B.epsr_size_k;
          proc_control_node_B.loop_ub_a = proc_control_node_B.epsr_size_k;
          if (0 <= proc_control_node_B.loop_ub_a - 1) {
            memcpy(&proc_control_node_B.b_r_data[0],
                   &proc_control_node_B.b_varargout_1_data[0],
                   proc_control_node_B.loop_ub_a * sizeof(real_T));
          }

          proc_control_node_B.Jtri_size_b[0] =
            proc_control_node_B.b_varargout_2_size_m[0];
          proc_control_node_B.Jtri_size_b[1] = 3;
          proc_control_node_B.loop_ub_a =
            proc_control_node_B.b_varargout_2_size_m[0] * 3;
          if (0 <= proc_control_node_B.loop_ub_a - 1) {
            memcpy(&proc_control_node_B.Jtri_data_p[0],
                   &proc_control_node_B.b_varargout_2_data[0],
                   proc_control_node_B.loop_ub_a * sizeof(real_T));
          }

          proc_control_node_mulJt_b(proc_control_node_B.b_varargout_2_data,
            proc_control_node_B.b_varargout_2_size_m,
            proc_control_node_B.b_varargout_1_data,
            &proc_control_node_B.epsr_size_k, proc_control_node_B.v_data_i,
            &proc_control_node_B.v_size_b);
        }
      } else {
        exitg1 = true;
      }
    } else {
      exitg1 = true;
    }
  }
}

static void proc_control_node_fitCourse_b(const real_T waypoints_data[], const
  int32_T waypoints_size[2], real_T course_data[], int32_T *course_size)
{
  proc_control_node_B.freelead = rtIsNaN(course_data[0]);
  proc_control_node_B.freetail_tmp = course_data[*course_size - 1];
  proc_control_node_B.freetail = rtIsNaN(proc_control_node_B.freetail_tmp);
  proc_control_node_B.loop_ub = waypoints_size[0];
  proc_control_node_B.waypoints_size_c = waypoints_size[0];
  if (0 <= proc_control_node_B.loop_ub - 1) {
    memcpy(&proc_control_node_B.waypoints_data_j[0], &waypoints_data[0],
           proc_control_node_B.loop_ub * sizeof(real_T));
  }

  proc_control_node_B.loop_ub = waypoints_size[0];
  for (proc_control_node_B.k_i = 0; proc_control_node_B.k_i <
       proc_control_node_B.loop_ub; proc_control_node_B.k_i++) {
    proc_control_node_B.waypoints_data_c[proc_control_node_B.k_i] =
      waypoints_data[proc_control_node_B.k_i + waypoints_size[0]];
  }

  proc_control_node_B.dv24[0] = cos(course_data[0]);
  proc_control_node_B.dv25[0] = sin(course_data[0]);
  proc_control_node_B.dv24[1] = cos(proc_control_node_B.freetail_tmp);
  proc_control_node_B.dv25[1] = sin(proc_control_node_B.freetail_tmp);
  proc_control_node_dclothoidwp_b(proc_control_node_B.waypoints_data_j,
    &proc_control_node_B.waypoints_size_c, proc_control_node_B.waypoints_data_c,
    proc_control_node_B.dv24, proc_control_node_B.dv25,
    proc_control_node_B.u_data, &proc_control_node_B.u_size,
    proc_control_node_B.v_data, &proc_control_node_B.v_size);
  proc_control_node_B.c_pik = waypoints_size[0] - 3;
  for (proc_control_node_B.loop_ub = 0; proc_control_node_B.loop_ub <=
       proc_control_node_B.c_pik; proc_control_node_B.loop_ub++) {
    proc_control_node_B.k_i = (proc_control_node_B.loop_ub + 1) << 7;
    course_data[proc_control_node_B.loop_ub + 1] = rt_atan2d_snf
      (proc_control_node_B.v_data[proc_control_node_B.k_i] -
       proc_control_node_B.v_data[proc_control_node_B.k_i - 1],
       proc_control_node_B.u_data[proc_control_node_B.k_i] -
       proc_control_node_B.u_data[proc_control_node_B.k_i - 1]);
  }

  if (proc_control_node_B.freelead) {
    course_data[0] = rt_atan2d_snf(proc_control_node_B.v_data[1] -
      proc_control_node_B.v_data[0], proc_control_node_B.u_data[1] -
      proc_control_node_B.u_data[0]);
  }

  if (proc_control_node_B.freetail) {
    course_data[*course_size - 1] = rt_atan2d_snf
      (proc_control_node_B.v_data[proc_control_node_B.v_size - 1] -
       proc_control_node_B.v_data[proc_control_node_B.v_size - 2],
       proc_control_node_B.u_data[proc_control_node_B.u_size - 1] -
       proc_control_node_B.u_data[proc_control_node_B.u_size - 2]);
  }

  if (proc_control_node_B.freelead && proc_control_node_B.freetail) {
    proc_control_node_B.waypoints_size_c = *course_size;
    proc_control_node_B.loop_ub = *course_size;
    if (0 <= proc_control_node_B.loop_ub - 1) {
      memcpy(&proc_control_node_B.waypoints_data_j[0], &course_data[0],
             proc_control_node_B.loop_ub * sizeof(real_T));
    }

    proc_control_no_LMFsolve_b4nwkz(waypoints_data, waypoints_size,
      proc_control_node_B.waypoints_data_j,
      &proc_control_node_B.waypoints_size_c);
    *course_size = proc_control_node_B.waypoints_size_c;
    proc_control_node_B.loop_ub = proc_control_node_B.waypoints_size_c;
    if (0 <= proc_control_node_B.loop_ub - 1) {
      memcpy(&course_data[0], &proc_control_node_B.waypoints_data_j[0],
             proc_control_node_B.loop_ub * sizeof(real_T));
    }
  } else if (proc_control_node_B.freelead) {
    if (1 > *course_size - 1) {
      proc_control_node_B.loop_ub = -1;
    } else {
      proc_control_node_B.loop_ub = *course_size - 2;
    }

    proc_control_node_B.tmp_size_kf = proc_control_node_B.loop_ub + 1;
    if (0 <= proc_control_node_B.loop_ub) {
      memcpy(&proc_control_node_B.tmp_data_oo[0], &course_data[0],
             (proc_control_node_B.loop_ub + 1) * sizeof(real_T));
    }

    proc_control_n_LMFsolve_b4nwkzr(waypoints_data, waypoints_size, course_data,
      course_size, proc_control_node_B.tmp_data_oo,
      &proc_control_node_B.tmp_size_kf);
    proc_control_node_B.freetail_tmp = course_data[waypoints_size[0] - 1];
    *course_size = proc_control_node_B.tmp_size_kf + 1;
    proc_control_node_B.loop_ub = proc_control_node_B.tmp_size_kf;
    if (0 <= proc_control_node_B.loop_ub - 1) {
      memcpy(&course_data[0], &proc_control_node_B.tmp_data_oo[0],
             proc_control_node_B.loop_ub * sizeof(real_T));
    }

    course_data[proc_control_node_B.tmp_size_kf] =
      proc_control_node_B.freetail_tmp;
  } else if (proc_control_node_B.freetail) {
    if (2 > *course_size) {
      proc_control_node_B.c_pik = 0;
      proc_control_node_B.k_i = -1;
    } else {
      proc_control_node_B.c_pik = 1;
      proc_control_node_B.k_i = *course_size - 1;
    }

    proc_control_node_B.loop_ub = proc_control_node_B.k_i -
      proc_control_node_B.c_pik;
    proc_control_node_B.waypoints_size_c = proc_control_node_B.loop_ub + 1;
    for (proc_control_node_B.k_i = 0; proc_control_node_B.k_i <=
         proc_control_node_B.loop_ub; proc_control_node_B.k_i++) {
      proc_control_node_B.waypoints_data_j[proc_control_node_B.k_i] =
        course_data[proc_control_node_B.c_pik + proc_control_node_B.k_i];
    }

    proc_control__LMFsolve_b4nwkzrt(waypoints_data, waypoints_size, course_data,
      course_size, proc_control_node_B.waypoints_data_j,
      &proc_control_node_B.waypoints_size_c);
    *course_size = proc_control_node_B.waypoints_size_c + 1;
    proc_control_node_B.loop_ub = proc_control_node_B.waypoints_size_c;
    if (0 <= proc_control_node_B.loop_ub - 1) {
      memcpy(&course_data[1], &proc_control_node_B.waypoints_data_j[0],
             proc_control_node_B.loop_ub * sizeof(real_T));
    }
  } else {
    if (2 > *course_size - 1) {
      proc_control_node_B.c_pik = 0;
      proc_control_node_B.k_i = -1;
    } else {
      proc_control_node_B.c_pik = 1;
      proc_control_node_B.k_i = *course_size - 2;
    }

    proc_control_node_B.loop_ub = proc_control_node_B.k_i -
      proc_control_node_B.c_pik;
    proc_control_node_B.tmp_size_kf = proc_control_node_B.loop_ub + 1;
    for (proc_control_node_B.k_i = 0; proc_control_node_B.k_i <=
         proc_control_node_B.loop_ub; proc_control_node_B.k_i++) {
      proc_control_node_B.tmp_data_oo[proc_control_node_B.k_i] =
        course_data[proc_control_node_B.c_pik + proc_control_node_B.k_i];
    }

    proc_control_LMFsolve_b4nwkzrtq(waypoints_data, waypoints_size, course_data,
      course_size, proc_control_node_B.tmp_data_oo,
      &proc_control_node_B.tmp_size_kf);
    proc_control_node_B.freetail_tmp = course_data[waypoints_size[0] - 1];
    *course_size = proc_control_node_B.tmp_size_kf + 2;
    proc_control_node_B.loop_ub = proc_control_node_B.tmp_size_kf;
    if (0 <= proc_control_node_B.loop_ub - 1) {
      memcpy(&course_data[1], &proc_control_node_B.tmp_data_oo[0],
             proc_control_node_B.loop_ub * sizeof(real_T));
    }

    course_data[proc_control_node_B.tmp_size_kf + 1] =
      proc_control_node_B.freetail_tmp;
  }
}

static void proc_control_node_insertCodegen(const creal_T zorig[2561], real_T m,
  creal_T Zout_data[], int32_T Zout_size[2])
{
  if ((zorig[static_cast<int32_T>(m) - 1].re == zorig[0].re) && (zorig[
       static_cast<int32_T>(m) - 1].im == zorig[0].im)) {
    proc_control_node_B.zleft_re = zorig[static_cast<int32_T>(m) - 2].re;
    proc_control_node_B.zleft_im_b = zorig[static_cast<int32_T>(m) - 2].im;
    proc_control_node_B.zright_re_j = zorig[1].re;
    proc_control_node_B.zright_im_k = zorig[1].im;
  } else {
    proc_control_node_B.zleft_re = (zorig[0].re - zorig[1].re) * 100.0 + zorig[0]
      .re;
    proc_control_node_B.zleft_im_b = (zorig[0].im - zorig[1].im) * 100.0 +
      zorig[0].im;
    proc_control_node_B.zright_re_j = (zorig[static_cast<int32_T>(m) - 1].re -
      zorig[static_cast<int32_T>(m) - 2].re) * 100.0 + zorig[static_cast<int32_T>
      (m) - 1].re;
    proc_control_node_B.zright_im_k = (zorig[static_cast<int32_T>(m) - 1].im -
      zorig[static_cast<int32_T>(m) - 2].im) * 100.0 + zorig[static_cast<int32_T>
      (m) - 1].im;
  }

  proc_control_node_B.loop_ub_l2 = static_cast<int32_T>(m);
  proc_control_node_B.z_size_m[0] = 1;
  proc_control_node_B.z_size_m[1] = static_cast<int32_T>(m) + 2;
  proc_control_node_B.dz_re_tmp = 0;
  proc_control_node_B.z_data[proc_control_node_B.dz_re_tmp].re =
    proc_control_node_B.zleft_re;
  proc_control_node_B.z_data[proc_control_node_B.dz_re_tmp].im =
    proc_control_node_B.zleft_im_b;
  if (0 <= proc_control_node_B.loop_ub_l2 - 1) {
    memcpy(&proc_control_node_B.z_data[1], &zorig[0],
           proc_control_node_B.loop_ub_l2 * sizeof(creal_T));
  }

  proc_control_node_B.dz_re_tmp = static_cast<int32_T>(m) + 1;
  proc_control_node_B.z_data[proc_control_node_B.dz_re_tmp].re =
    proc_control_node_B.zright_re_j;
  proc_control_node_B.z_data[proc_control_node_B.dz_re_tmp].im =
    proc_control_node_B.zright_im_k;
  proc_control_node_diff(proc_control_node_B.z_data,
    proc_control_node_B.z_size_m, proc_control_node_B.dz_data,
    proc_control_node_B.dz_size_h);
  proc_control_node_abs(proc_control_node_B.dz_data,
                        proc_control_node_B.dz_size_h,
                        proc_control_node_B.l_data, proc_control_node_B.z_size_m);
  if (2 > proc_control_node_B.dz_size_h[1]) {
    proc_control_node_B.g_o = 0;
    proc_control_node_B.loop_ub_l2 = -1;
  } else {
    proc_control_node_B.g_o = 1;
    proc_control_node_B.loop_ub_l2 = proc_control_node_B.dz_size_h[1] - 1;
  }

  proc_control_node_B.dz_size_o[0] = 1;
  proc_control_node_B.loop_ub_l2 -= proc_control_node_B.g_o;
  proc_control_node_B.dz_size_o[1] = proc_control_node_B.loop_ub_l2 + 1;
  for (proc_control_node_B.dz_re_tmp = 0; proc_control_node_B.dz_re_tmp <=
       proc_control_node_B.loop_ub_l2; proc_control_node_B.dz_re_tmp++) {
    proc_control_node_B.zleft_re_tmp = proc_control_node_B.g_o +
      proc_control_node_B.dz_re_tmp;
    proc_control_node_B.zleft_re =
      proc_control_node_B.dz_data[proc_control_node_B.zleft_re_tmp].re;
    proc_control_node_B.zleft_im_b =
      -proc_control_node_B.dz_data[proc_control_node_B.zleft_re_tmp].im;
    proc_control_node_B.zleft_re_tmp = proc_control_node_B.dz_re_tmp;
    proc_control_node_B.b_Zout[proc_control_node_B.zleft_re_tmp].re =
      proc_control_node_B.zleft_re *
      proc_control_node_B.dz_data[proc_control_node_B.zleft_re_tmp].re -
      proc_control_node_B.zleft_im_b *
      proc_control_node_B.dz_data[proc_control_node_B.zleft_re_tmp].im;
    proc_control_node_B.b_Zout[proc_control_node_B.zleft_re_tmp].im =
      proc_control_node_B.zleft_re *
      proc_control_node_B.dz_data[proc_control_node_B.zleft_re_tmp].im +
      proc_control_node_B.zleft_im_b *
      proc_control_node_B.dz_data[proc_control_node_B.zleft_re_tmp].re;
  }

  proc_control_node_angle(proc_control_node_B.b_Zout,
    proc_control_node_B.dz_size_o, proc_control_node_B.alpha_data,
    proc_control_node_B.alpha_size_a);
  if (2 > proc_control_node_B.dz_size_h[1] - 1) {
    proc_control_node_B.g_o = 0;
    proc_control_node_B.dz_re_tmp = -1;
  } else {
    proc_control_node_B.g_o = 1;
    proc_control_node_B.dz_re_tmp = proc_control_node_B.dz_size_h[1] - 2;
  }

  if (1 > proc_control_node_B.z_size_m[1] - 2) {
    proc_control_node_B.zleft_re_tmp = -1;
  } else {
    proc_control_node_B.zleft_re_tmp = proc_control_node_B.z_size_m[1] - 3;
  }

  if (2 > proc_control_node_B.z_size_m[1] - 1) {
    proc_control_node_B.w_p = 0;
    proc_control_node_B.v_l = -1;
  } else {
    proc_control_node_B.w_p = 1;
    proc_control_node_B.v_l = proc_control_node_B.z_size_m[1] - 2;
  }

  if (3 > proc_control_node_B.z_size_m[1]) {
    proc_control_node_B.ab_b = 0;
    proc_control_node_B.y_d = -1;
  } else {
    proc_control_node_B.ab_b = 2;
    proc_control_node_B.y_d = proc_control_node_B.z_size_m[1] - 1;
  }

  if (1 > proc_control_node_B.alpha_size_a[1] - 1) {
    proc_control_node_B.cb_dn = -1;
  } else {
    proc_control_node_B.cb_dn = proc_control_node_B.alpha_size_a[1] - 2;
  }

  if (2 > proc_control_node_B.alpha_size_a[1]) {
    proc_control_node_B.fb_eh = 0;
    proc_control_node_B.eb_d = -1;
  } else {
    proc_control_node_B.fb_eh = 1;
    proc_control_node_B.eb_d = proc_control_node_B.alpha_size_a[1] - 1;
  }

  proc_control_node_B.loop_ub_l2 = static_cast<int32_T>(m) - 2;
  proc_control_node_B.z_size_i[0] = 1;
  proc_control_node_B.z_size_i[1] = static_cast<int32_T>(m) - 1;
  if (0 <= proc_control_node_B.loop_ub_l2) {
    memcpy(&proc_control_node_B.z_data_j[0], &proc_control_node_B.z_data[1],
           (proc_control_node_B.loop_ub_l2 + 1) * sizeof(creal_T));
  }

  proc_control_node_B.loop_ub_l2 = proc_control_node_B.dz_re_tmp -
    proc_control_node_B.g_o;
  for (proc_control_node_B.dz_re_tmp = 0; proc_control_node_B.dz_re_tmp <=
       proc_control_node_B.loop_ub_l2; proc_control_node_B.dz_re_tmp++) {
    proc_control_node_B.b_Zout[proc_control_node_B.dz_re_tmp] =
      proc_control_node_B.dz_data[proc_control_node_B.g_o +
      proc_control_node_B.dz_re_tmp];
  }

  proc_control_node_B.l_size_e[0] = 1;
  proc_control_node_B.l_size_e[1] = proc_control_node_B.zleft_re_tmp + 1;
  if (0 <= proc_control_node_B.zleft_re_tmp) {
    memcpy(&proc_control_node_B.l_data_nv[0], &proc_control_node_B.l_data[0],
           (proc_control_node_B.zleft_re_tmp + 1) * sizeof(real_T));
  }

  proc_control_node_B.l_size_a[0] = 1;
  proc_control_node_B.loop_ub_l2 = proc_control_node_B.v_l -
    proc_control_node_B.w_p;
  proc_control_node_B.l_size_a[1] = proc_control_node_B.loop_ub_l2 + 1;
  for (proc_control_node_B.dz_re_tmp = 0; proc_control_node_B.dz_re_tmp <=
       proc_control_node_B.loop_ub_l2; proc_control_node_B.dz_re_tmp++) {
    proc_control_node_B.l_data_f[proc_control_node_B.dz_re_tmp] =
      proc_control_node_B.l_data[proc_control_node_B.w_p +
      proc_control_node_B.dz_re_tmp];
  }

  proc_control_node_B.l_size_eu[0] = 1;
  proc_control_node_B.loop_ub_l2 = proc_control_node_B.y_d -
    proc_control_node_B.ab_b;
  proc_control_node_B.l_size_eu[1] = proc_control_node_B.loop_ub_l2 + 1;
  for (proc_control_node_B.dz_re_tmp = 0; proc_control_node_B.dz_re_tmp <=
       proc_control_node_B.loop_ub_l2; proc_control_node_B.dz_re_tmp++) {
    proc_control_node_B.l_data_h[proc_control_node_B.dz_re_tmp] =
      proc_control_node_B.l_data[proc_control_node_B.ab_b +
      proc_control_node_B.dz_re_tmp];
  }

  if (0 <= proc_control_node_B.cb_dn) {
    memcpy(&proc_control_node_B.alpha_data_m[0],
           &proc_control_node_B.alpha_data[0], (proc_control_node_B.cb_dn + 1) *
           sizeof(real_T));
  }

  proc_control_node_B.loop_ub_l2 = proc_control_node_B.eb_d -
    proc_control_node_B.fb_eh;
  for (proc_control_node_B.dz_re_tmp = 0; proc_control_node_B.dz_re_tmp <=
       proc_control_node_B.loop_ub_l2; proc_control_node_B.dz_re_tmp++) {
    proc_control_node_B.alpha_data_a[proc_control_node_B.dz_re_tmp] =
      proc_control_node_B.alpha_data[proc_control_node_B.fb_eh +
      proc_control_node_B.dz_re_tmp];
  }

  proc_control_node_midcurve(proc_control_node_B.z_data_j,
    proc_control_node_B.z_size_i, proc_control_node_B.b_Zout,
    proc_control_node_B.l_data_nv, proc_control_node_B.l_size_e,
    proc_control_node_B.l_data_f, proc_control_node_B.l_size_a,
    proc_control_node_B.l_data_h, proc_control_node_B.l_size_eu,
    proc_control_node_B.alpha_data_m, proc_control_node_B.alpha_data_a,
    proc_control_node_B.znew_data, proc_control_node_B.dz_size_h);
  memset(&proc_control_node_B.b_Zout[0], 0, 2561U * sizeof(creal_T));
  proc_control_node_B.loop_ub_l2 = static_cast<int32_T>(m);
  for (proc_control_node_B.dz_re_tmp = 0; proc_control_node_B.dz_re_tmp <
       proc_control_node_B.loop_ub_l2; proc_control_node_B.dz_re_tmp++) {
    proc_control_node_B.b_Zout[proc_control_node_B.dz_re_tmp << 1] =
      zorig[proc_control_node_B.dz_re_tmp];
  }

  proc_control_node_B.loop_ub_l2 = proc_control_node_B.dz_size_h[1];
  for (proc_control_node_B.dz_re_tmp = 0; proc_control_node_B.dz_re_tmp <
       proc_control_node_B.loop_ub_l2; proc_control_node_B.dz_re_tmp++) {
    proc_control_node_B.b_Zout[(proc_control_node_B.dz_re_tmp << 1) + 1] =
      proc_control_node_B.znew_data[proc_control_node_B.dz_re_tmp];
  }

  proc_control_node_B.loop_ub_l2 = static_cast<int32_T>(2.0 * m - 1.0);
  Zout_size[0] = 1;
  Zout_size[1] = proc_control_node_B.loop_ub_l2;
  if (0 <= proc_control_node_B.loop_ub_l2 - 1) {
    memcpy(&Zout_data[0], &proc_control_node_B.b_Zout[0],
           proc_control_node_B.loop_ub_l2 * sizeof(creal_T));
  }
}

static void proc_control_node_optimize(const creal_T zcurrent_data[], const
  int32_T zcurrent_size[2], const creal_T zorig[21], creal_T Zout_data[],
  int32_T Zout_size[2])
{
  int32_T loop_ub_tmp;
  if ((zorig[0].re == zorig[20].re) && (zorig[0].im == zorig[20].im)) {
    proc_control_node_B.nseg_tmp = zcurrent_size[1] - 2;
    proc_control_node_B.nseg = zcurrent_data[proc_control_node_B.nseg_tmp].re;
    proc_control_node_B.zleft_im = zcurrent_data[proc_control_node_B.nseg_tmp].
      im;
    proc_control_node_B.nseg_tmp_b = 1;
    proc_control_node_B.zright_re = zcurrent_data[proc_control_node_B.nseg_tmp_b]
      .re;
    proc_control_node_B.zright_im = zcurrent_data[proc_control_node_B.nseg_tmp_b]
      .im;
  } else {
    proc_control_node_B.nseg_tmp = 0;
    proc_control_node_B.nseg_tmp_b = 1;
    proc_control_node_B.nseg = (zcurrent_data[proc_control_node_B.nseg_tmp].re -
      zcurrent_data[proc_control_node_B.nseg_tmp_b].re) * 100.0 +
      zcurrent_data[proc_control_node_B.nseg_tmp].re;
    proc_control_node_B.zleft_im = (zcurrent_data[proc_control_node_B.nseg_tmp].
      im - zcurrent_data[proc_control_node_B.nseg_tmp_b].im) * 100.0 +
      zcurrent_data[proc_control_node_B.nseg_tmp].im;
    proc_control_node_B.nseg_tmp_b = zcurrent_size[1] - 1;
    proc_control_node_B.zright_re_tmp = zcurrent_size[1] - 2;
    proc_control_node_B.zright_re =
      (zcurrent_data[proc_control_node_B.nseg_tmp_b].re -
       zcurrent_data[proc_control_node_B.zright_re_tmp].re) * 100.0 +
      zcurrent_data[proc_control_node_B.nseg_tmp_b].re;
    proc_control_node_B.zright_im =
      (zcurrent_data[proc_control_node_B.nseg_tmp_b].im -
       zcurrent_data[proc_control_node_B.zright_re_tmp].im) * 100.0 +
      zcurrent_data[proc_control_node_B.nseg_tmp_b].im;
  }

  proc_control_node_B.z_size_a[0] = 1;
  proc_control_node_B.z_size_a[1] = zcurrent_size[1] + 2;
  proc_control_node_B.loop_ub_hh = zcurrent_size[1] - 1;
  proc_control_node_B.zright_re_tmp = 0;
  proc_control_node_B.z_data_b[proc_control_node_B.zright_re_tmp].re =
    proc_control_node_B.nseg;
  proc_control_node_B.z_data_b[proc_control_node_B.zright_re_tmp].im =
    proc_control_node_B.zleft_im;
  if (0 <= proc_control_node_B.loop_ub_hh) {
    memcpy(&proc_control_node_B.z_data_b[1], &zcurrent_data[0],
           (proc_control_node_B.loop_ub_hh + 1) * sizeof(creal_T));
  }

  proc_control_node_B.nseg_tmp_b = zcurrent_size[1] + 1;
  proc_control_node_B.z_data_b[proc_control_node_B.nseg_tmp_b].re =
    proc_control_node_B.zright_re;
  proc_control_node_B.z_data_b[proc_control_node_B.nseg_tmp_b].im =
    proc_control_node_B.zright_im;
  proc_control_node_diff(proc_control_node_B.z_data_b,
    proc_control_node_B.z_size_a, proc_control_node_B.d1_data,
    proc_control_node_B.d1_size);
  proc_control_node_abs(proc_control_node_B.d1_data, proc_control_node_B.d1_size,
                        proc_control_node_B.l1_data,
                        proc_control_node_B.z_size_a);
  proc_control_node_B.loop_ub_hh = zcurrent_size[1] - 1;
  for (proc_control_node_B.nseg_tmp_b = 0; proc_control_node_B.nseg_tmp_b <=
       proc_control_node_B.loop_ub_hh; proc_control_node_B.nseg_tmp_b++) {
    proc_control_node_B.nseg_tmp = proc_control_node_B.nseg_tmp_b;
    proc_control_node_B.i17 = proc_control_node_B.nseg_tmp_b + 2;
    proc_control_node_B.d2_data[proc_control_node_B.nseg_tmp].re =
      proc_control_node_B.z_data_b[proc_control_node_B.i17].re -
      proc_control_node_B.z_data_b[proc_control_node_B.nseg_tmp].re;
    proc_control_node_B.d2_data[proc_control_node_B.nseg_tmp].im =
      proc_control_node_B.z_data_b[proc_control_node_B.i17].im -
      proc_control_node_B.z_data_b[proc_control_node_B.nseg_tmp].im;
  }

  if (4 > proc_control_node_B.d1_size[1]) {
    proc_control_node_B.p_a = 0;
    proc_control_node_B.loop_ub_hh = -1;
  } else {
    proc_control_node_B.p_a = 3;
    proc_control_node_B.loop_ub_hh = proc_control_node_B.d1_size[1] - 1;
  }

  if (1 > proc_control_node_B.z_size_a[1] - 3) {
    proc_control_node_B.ab_c = -1;
  } else {
    proc_control_node_B.ab_c = proc_control_node_B.z_size_a[1] - 4;
  }

  if (2 > proc_control_node_B.z_size_a[1] - 2) {
    proc_control_node_B.db = 0;
    proc_control_node_B.cb_d = -1;
  } else {
    proc_control_node_B.db = 1;
    proc_control_node_B.cb_d = proc_control_node_B.z_size_a[1] - 3;
  }

  if (3 > proc_control_node_B.z_size_a[1] - 1) {
    proc_control_node_B.gb = 0;
  } else {
    proc_control_node_B.gb = 2;
  }

  if (4 > proc_control_node_B.z_size_a[1]) {
    proc_control_node_B.lb_g = 0;
    proc_control_node_B.kb = -1;
  } else {
    proc_control_node_B.lb_g = 3;
    proc_control_node_B.kb = proc_control_node_B.z_size_a[1] - 1;
  }

  loop_ub_tmp = zcurrent_size[1] - 3;
  proc_control_node_B.d2_size[0] = 1;
  proc_control_node_B.d2_size[1] = zcurrent_size[1] - 2;
  for (proc_control_node_B.nseg_tmp_b = 0; proc_control_node_B.nseg_tmp_b <=
       loop_ub_tmp; proc_control_node_B.nseg_tmp_b++) {
    proc_control_node_B.nseg_tmp = proc_control_node_B.nseg_tmp_b + 1;
    proc_control_node_B.nseg =
      proc_control_node_B.d2_data[proc_control_node_B.nseg_tmp].re;
    proc_control_node_B.zleft_im =
      -proc_control_node_B.d2_data[proc_control_node_B.nseg_tmp].im;
    proc_control_node_B.nseg_tmp = proc_control_node_B.nseg_tmp_b;
    proc_control_node_B.d2_data_d[proc_control_node_B.nseg_tmp].re =
      proc_control_node_B.nseg *
      proc_control_node_B.d1_data[proc_control_node_B.nseg_tmp].re -
      proc_control_node_B.zleft_im *
      proc_control_node_B.d1_data[proc_control_node_B.nseg_tmp].im;
    proc_control_node_B.d2_data_d[proc_control_node_B.nseg_tmp].im =
      proc_control_node_B.nseg *
      proc_control_node_B.d1_data[proc_control_node_B.nseg_tmp].im +
      proc_control_node_B.zleft_im *
      proc_control_node_B.d1_data[proc_control_node_B.nseg_tmp].re;
  }

  proc_control_node_B.d1_size_n[0] = 1;
  proc_control_node_B.loop_ub_hh -= proc_control_node_B.p_a;
  proc_control_node_B.d1_size_n[1] = proc_control_node_B.loop_ub_hh + 1;
  for (proc_control_node_B.nseg_tmp_b = 0; proc_control_node_B.nseg_tmp_b <=
       proc_control_node_B.loop_ub_hh; proc_control_node_B.nseg_tmp_b++) {
    proc_control_node_B.nseg_tmp = proc_control_node_B.p_a +
      proc_control_node_B.nseg_tmp_b;
    proc_control_node_B.nseg =
      proc_control_node_B.d1_data[proc_control_node_B.nseg_tmp].re;
    proc_control_node_B.zleft_im =
      -proc_control_node_B.d1_data[proc_control_node_B.nseg_tmp].im;
    proc_control_node_B.nseg_tmp = proc_control_node_B.nseg_tmp_b + 1;
    proc_control_node_B.i17 = proc_control_node_B.nseg_tmp_b;
    proc_control_node_B.d1_data_l[proc_control_node_B.i17].re =
      proc_control_node_B.d2_data[proc_control_node_B.nseg_tmp].re *
      proc_control_node_B.nseg -
      proc_control_node_B.d2_data[proc_control_node_B.nseg_tmp].im *
      proc_control_node_B.zleft_im;
    proc_control_node_B.d1_data_l[proc_control_node_B.i17].im =
      proc_control_node_B.d2_data[proc_control_node_B.nseg_tmp].im *
      proc_control_node_B.nseg +
      proc_control_node_B.d2_data[proc_control_node_B.nseg_tmp].re *
      proc_control_node_B.zleft_im;
  }

  proc_control_node_B.loop_ub_hh = zcurrent_size[1] - 2;
  proc_control_node_B.zcurrent_size[0] = 1;
  proc_control_node_B.zcurrent_size[1] = zcurrent_size[1] - 2;
  if (0 <= proc_control_node_B.loop_ub_hh - 1) {
    memcpy(&proc_control_node_B.zcurrent_data[0], &zcurrent_data[0],
           proc_control_node_B.loop_ub_hh * sizeof(creal_T));
  }

  if (0 <= loop_ub_tmp) {
    memcpy(&proc_control_node_B.d2_data_o[0], &proc_control_node_B.d2_data[1],
           (loop_ub_tmp + 1) * sizeof(creal_T));
  }

  proc_control_node_B.l1_size[0] = 1;
  proc_control_node_B.l1_size[1] = proc_control_node_B.ab_c + 1;
  if (0 <= proc_control_node_B.ab_c) {
    memcpy(&proc_control_node_B.l1_data_c[0], &proc_control_node_B.l1_data[0],
           (proc_control_node_B.ab_c + 1) * sizeof(real_T));
  }

  proc_control_node_B.l1_size_o[0] = 1;
  proc_control_node_B.loop_ub_hh = proc_control_node_B.cb_d -
    proc_control_node_B.db;
  proc_control_node_B.l1_size_o[1] = proc_control_node_B.loop_ub_hh + 1;
  for (proc_control_node_B.nseg_tmp_b = 0; proc_control_node_B.nseg_tmp_b <=
       proc_control_node_B.loop_ub_hh; proc_control_node_B.nseg_tmp_b++) {
    proc_control_node_B.l1_data_m[proc_control_node_B.nseg_tmp_b] =
      proc_control_node_B.l1_data[proc_control_node_B.db +
      proc_control_node_B.nseg_tmp_b] +
      proc_control_node_B.l1_data[proc_control_node_B.gb +
      proc_control_node_B.nseg_tmp_b];
  }

  proc_control_node_B.l1_size_d[0] = 1;
  proc_control_node_B.loop_ub_hh = proc_control_node_B.kb -
    proc_control_node_B.lb_g;
  proc_control_node_B.l1_size_d[1] = proc_control_node_B.loop_ub_hh + 1;
  for (proc_control_node_B.nseg_tmp_b = 0; proc_control_node_B.nseg_tmp_b <=
       proc_control_node_B.loop_ub_hh; proc_control_node_B.nseg_tmp_b++) {
    proc_control_node_B.l1_data_b[proc_control_node_B.nseg_tmp_b] =
      proc_control_node_B.l1_data[proc_control_node_B.lb_g +
      proc_control_node_B.nseg_tmp_b];
  }

  proc_control_node_angle(proc_control_node_B.d2_data_d,
    proc_control_node_B.d2_size, proc_control_node_B.tmp_data_j,
    proc_control_node_B.d1_size);
  proc_control_node_angle(proc_control_node_B.d1_data_l,
    proc_control_node_B.d1_size_n, proc_control_node_B.tmp_data_jz,
    proc_control_node_B.d2_size);
  proc_control_node_midcurve(proc_control_node_B.zcurrent_data,
    proc_control_node_B.zcurrent_size, proc_control_node_B.d2_data_o,
    proc_control_node_B.l1_data_c, proc_control_node_B.l1_size,
    proc_control_node_B.l1_data_m, proc_control_node_B.l1_size_o,
    proc_control_node_B.l1_data_b, proc_control_node_B.l1_size_d,
    proc_control_node_B.tmp_data_j, proc_control_node_B.tmp_data_jz,
    proc_control_node_B.tmp_data_d, proc_control_node_B.d1_size_n);
  Zout_size[0] = 1;
  Zout_size[1] = proc_control_node_B.d1_size_n[1] + 2;
  Zout_data[proc_control_node_B.zright_re_tmp] = zorig[0];
  proc_control_node_B.loop_ub_hh = proc_control_node_B.d1_size_n[1];
  if (0 <= proc_control_node_B.loop_ub_hh - 1) {
    memcpy(&Zout_data[1], &proc_control_node_B.tmp_data_d[0],
           proc_control_node_B.loop_ub_hh * sizeof(creal_T));
  }

  Zout_data[proc_control_node_B.d1_size_n[1] + 1] = zorig[20];
  proc_control_node_B.nseg = (static_cast<real_T>(zcurrent_size[1]) - 21.0) /
    20.0;
  proc_control_node_B.zright_re_tmp = div_s32_floor
    (proc_control_node_B.d1_size_n[1] + 1, static_cast<int32_T>
     (proc_control_node_B.nseg + 1.0)) + 1;
  for (proc_control_node_B.nseg_tmp_b = 0; proc_control_node_B.nseg_tmp_b <
       proc_control_node_B.zright_re_tmp; proc_control_node_B.nseg_tmp_b++) {
    Zout_data[static_cast<int32_T>(proc_control_node_B.nseg + 1.0) *
      proc_control_node_B.nseg_tmp_b] = zorig[proc_control_node_B.nseg_tmp_b];
  }
}

static void proc_control_node_cloth(const creal_T z[21], real_T r[2561], real_T
  s[2561])
{
  memset(&proc_control_node_B.Zout[0], 0, 2561U * sizeof(creal_T));
  proc_control_node_B.m_d = 21.0;
  memcpy(&proc_control_node_B.Zout[0], &z[0], 21U * sizeof(creal_T));
  for (proc_control_node_B.i_in = 0; proc_control_node_B.i_in < 7;
       proc_control_node_B.i_in++) {
    proc_control_node_B.mnew_c = 2.0 * proc_control_node_B.m_d - 1.0;
    proc_control_node_insertCodegen(proc_control_node_B.Zout,
      proc_control_node_B.m_d, proc_control_node_B.tmp_data_g,
      proc_control_node_B.tmp_size_l);
    proc_control_node_B.loop_ub_or = proc_control_node_B.tmp_size_l[1];
    if (0 <= proc_control_node_B.loop_ub_or - 1) {
      memcpy(&proc_control_node_B.Zout[0], &proc_control_node_B.tmp_data_g[0],
             proc_control_node_B.loop_ub_or * sizeof(creal_T));
    }

    proc_control_node_B.loop_ub_tmp_tmp_m = static_cast<int32_T>
      (proc_control_node_B.mnew_c);
    proc_control_node_B.Zout_size_o[0] = 1;
    proc_control_node_B.Zout_size_o[1] = static_cast<int32_T>
      (proc_control_node_B.mnew_c);
    if (0 <= proc_control_node_B.loop_ub_tmp_tmp_m - 1) {
      memcpy(&proc_control_node_B.Zout_data[0], &proc_control_node_B.Zout[0],
             proc_control_node_B.loop_ub_tmp_tmp_m * sizeof(creal_T));
    }

    proc_control_node_optimize(proc_control_node_B.Zout_data,
      proc_control_node_B.Zout_size_o, z, proc_control_node_B.tmp_data_g,
      proc_control_node_B.tmp_size_l);
    proc_control_node_B.loop_ub_or = proc_control_node_B.tmp_size_l[1];
    if (0 <= proc_control_node_B.loop_ub_or - 1) {
      memcpy(&proc_control_node_B.Zout[0], &proc_control_node_B.tmp_data_g[0],
             proc_control_node_B.loop_ub_or * sizeof(creal_T));
    }

    proc_control_node_B.Zout_size_o[0] = 1;
    proc_control_node_B.Zout_size_o[1] = static_cast<int32_T>
      (proc_control_node_B.mnew_c);
    if (0 <= proc_control_node_B.loop_ub_tmp_tmp_m - 1) {
      memcpy(&proc_control_node_B.Zout_data[0], &proc_control_node_B.Zout[0],
             proc_control_node_B.loop_ub_tmp_tmp_m * sizeof(creal_T));
    }

    proc_control_node_optimize(proc_control_node_B.Zout_data,
      proc_control_node_B.Zout_size_o, z, proc_control_node_B.tmp_data_g,
      proc_control_node_B.tmp_size_l);
    proc_control_node_B.loop_ub_or = proc_control_node_B.tmp_size_l[1];
    if (0 <= proc_control_node_B.loop_ub_or - 1) {
      memcpy(&proc_control_node_B.Zout[0], &proc_control_node_B.tmp_data_g[0],
             proc_control_node_B.loop_ub_or * sizeof(creal_T));
    }

    proc_control_node_B.Zout_size_o[0] = 1;
    proc_control_node_B.Zout_size_o[1] = static_cast<int32_T>
      (proc_control_node_B.mnew_c);
    if (0 <= proc_control_node_B.loop_ub_tmp_tmp_m - 1) {
      memcpy(&proc_control_node_B.Zout_data[0], &proc_control_node_B.Zout[0],
             proc_control_node_B.loop_ub_tmp_tmp_m * sizeof(creal_T));
    }

    proc_control_node_optimize(proc_control_node_B.Zout_data,
      proc_control_node_B.Zout_size_o, z, proc_control_node_B.tmp_data_g,
      proc_control_node_B.tmp_size_l);
    proc_control_node_B.loop_ub_or = proc_control_node_B.tmp_size_l[1];
    if (0 <= proc_control_node_B.loop_ub_or - 1) {
      memcpy(&proc_control_node_B.Zout[0], &proc_control_node_B.tmp_data_g[0],
             proc_control_node_B.loop_ub_or * sizeof(creal_T));
    }

    proc_control_node_B.m_d = proc_control_node_B.mnew_c;
  }

  for (proc_control_node_B.i_in = 0; proc_control_node_B.i_in < 2561;
       proc_control_node_B.i_in++) {
    r[proc_control_node_B.i_in] =
      proc_control_node_B.Zout[proc_control_node_B.i_in].re;
    s[proc_control_node_B.i_in] =
      proc_control_node_B.Zout[proc_control_node_B.i_in].im;
  }
}

static void proc_control_node_dclothoidwp(const real_T x[21], const real_T y[21],
  real_T u[2561], real_T v[2561])
{
  for (proc_control_node_B.i_nm = 0; proc_control_node_B.i_nm < 21;
       proc_control_node_B.i_nm++) {
    proc_control_node_B.x_n[proc_control_node_B.i_nm].re =
      x[proc_control_node_B.i_nm];
    proc_control_node_B.x_n[proc_control_node_B.i_nm].im =
      y[proc_control_node_B.i_nm];
  }

  proc_control_node_cloth(proc_control_node_B.x_n, proc_control_node_B.r,
    proc_control_node_B.s);
  for (proc_control_node_B.i_nm = 0; proc_control_node_B.i_nm < 2561;
       proc_control_node_B.i_nm++) {
    u[proc_control_node_B.i_nm] = 0.0;
    v[proc_control_node_B.i_nm] = 0.0;
    u[proc_control_node_B.i_nm] = proc_control_node_B.r[proc_control_node_B.i_nm];
    v[proc_control_node_B.i_nm] = proc_control_node_B.s[proc_control_node_B.i_nm];
  }
}

static void proc_control_nod_useConstantDim(const real_T varargin_2[520], real_T
  varargout_1[520])
{
  int32_T b_k;
  int32_T b_k_0;
  int32_T varargout_1_tmp;
  memcpy(&varargout_1[0], &varargin_2[0], 520U * sizeof(real_T));
  for (b_k = 0; b_k < 25; b_k++) {
    for (b_k_0 = 0; b_k_0 < 20; b_k_0++) {
      varargout_1_tmp = (b_k + 1) * 20 + b_k_0;
      varargout_1[varargout_1_tmp] *= varargout_1[20 * b_k + b_k_0];
    }
  }
}

static void proc_control_node_fetchAgrad(const real_T x[20], const real_T y[20],
  real_T a[20], real_T dadx[20], real_T dady[20])
{
  static const real_T tmp[351] = { -1.5361481088532109E-40,
    -5.1782003708968662E-38, 5.8080516979367073E-38, -6.2922109794702842E-36,
    1.7744129415359022E-35, -9.8266873453160865E-36, -3.0557011816989596E-34,
    1.9988681524430764E-33, -2.7007621230825949E-33, 9.6497076628562535E-34,
    -8.50146594503621E-33, 8.7613736854720049E-32, -2.8258679893784358E-31,
    2.3637604856716169E-31, -5.8556266604372106E-32, -1.2863962524996432E-31,
    2.229093841830142E-30, -1.1057059963507232E-29, 2.3139349101185755E-29,
    -1.2630223562649489E-29, 2.0068564650639364E-30, -1.1052377502159136E-30,
    3.0309726719642508E-29, -2.57153235020298E-28, 7.9357820762496212E-28,
    -1.1834423538462616E-27, 3.7518152500494656E-28, -9.5988758699827141E-30,
    -5.8444661902772888E-30, 2.2799302267031842E-28, -3.118708591261201E-27,
    1.6937953593997347E-26, -3.4234259338177584E-26, 3.675290577810477E-26,
    -1.6183294340108731E-27, -2.9209077909746285E-27, -2.0493494333051533E-29,
    1.0232091530758262E-27, -2.0119872415420161E-26, 1.8157191663212143E-25,
    -6.8278782273948665E-25, 7.9289707228553727E-25, -5.1713140278139824E-25,
    -3.5757401738269863E-25, 1.7191521549607673E-25, -5.001307006229815E-29,
    2.9234616420394369E-27, -7.3372627735809734E-26, 9.6978563886575261E-25,
    -6.3976458551757164E-24, 1.6073455072306433E-23, -7.37463587795066E-25,
    -7.0522343048774666E-24, 1.4805755563608624E-23, -5.1965352404273039E-24,
    -8.5391792173019132E-29, 5.4962692899068422E-27, -1.5546891778194411E-25,
    2.6049795261751296E-24, -2.6172058881327836E-23, 1.2985982037510549E-22,
    -1.423772303418446E-22, -5.8282903661876709E-22, 4.1133508360308628E-22,
    -1.742659308147939E-22, 8.07786256209318E-23, -9.7738126735700558E-29,
    6.6212355845436972E-27, -1.7707072436748613E-25, 2.8057133511879665E-24,
    -3.4869970759687543E-23, 3.0241871214865029E-22, -9.92012310209099E-22,
    -3.2149566866116185E-21, 1.8710249707031661E-20, -1.2453541845369618E-21,
    -7.5062472154050874E-21, 2.8499865852964518E-22, -6.9207112182904389E-29,
    4.4179830835754724E-27, -4.4762524882779791E-26, -2.450817653228083E-24,
    7.1914140604820392E-23, -7.2673875098954476E-22, 3.3571441047866719E-21,
    -1.5906878744538782E-20, 1.0715370660853569E-19, -2.1813900762258771E-19,
    -3.7882773476137619E-19, 4.4188357957185649E-19, -5.2046323054922296E-20,
    -2.8170935396816464E-29, 7.8914114794548443E-28, 1.528966070127476E-25,
    -1.1332880987718864E-23, 3.3104475572268851E-22, -4.9647512138578754E-21,
    3.9715384015216385E-20, -1.6290821269847189E-19, 3.36612516663913E-19,
    -3.36275918384194E-19, -2.8323208988729979E-18, 1.5348780107717589E-17,
    -1.2231243924447674E-17, 1.5460269152965008E-18, -1.0350259940425787E-29,
    -4.7414043171551787E-28, 1.9707672417753685E-25, -1.4495788889042659E-23,
    5.1378340796211685E-22, -1.0210774519786583E-20, 1.165542649503511E-19,
    -7.1421779330877591E-19, 1.6365283191176908E-18, 4.9170568130837211E-18,
    -4.4186234291063853E-17, 1.6247947613884891E-16, -3.4187835062780104E-16,
    2.2495563268135524E-16, -2.8304172442233909E-17, -9.54190907880087E-30,
    4.33416352213585E-28, 7.30606772876727E-26, -8.4789175470441986E-24,
    3.9746370968729408E-22, -1.0350198533651566E-20, 1.589371276512773E-19,
    -1.3721089740423357E-18, 4.7868869804965763E-18, 1.9699426816042335E-17,
    -2.7595647699194014E-16, 1.2612122765846683E-15, -3.3199758280144047E-15,
    5.1284109097493322E-15, -2.9773954125181772E-15, 3.6686222388116938E-16,
    -7.13761114432792E-30, 8.6070327678610011E-28, -2.5253411261423782E-26,
    -1.429985806399278E-24, 1.4200678258817658E-22, -5.2901273901739912E-21,
    1.0879148930261737E-19, -1.2468905412479112E-18, 5.651703115185149E-18,
    4.073824764700649E-17, -7.7193016891576893E-16, 5.1280294092344238E-15,
    -1.8830251965098877E-14, 4.2082102420983456E-14, -5.4816521831539046E-14,
    2.9056289127761095E-14, -3.5049036301087839E-15, -2.7032712394278119E-30,
    4.4439845217679321E-28, -2.8561533629781625E-26, 7.4263493149653183E-25,
    7.7648205291611823E-24, -1.1313407629960782E-21, 3.4992489982228452E-20,
    -5.11237062122324E-19, 1.9082838069139238E-18, 6.02161124473958E-17,
    -1.1855133738581856E-15, 1.0647602057665829E-14, -5.5915318620809614E-14,
    1.8096099090326831E-13, -3.6385985586845819E-13, 4.2410069501559273E-13,
    -2.106362282048389E-13, 2.4385529408308407E-14, -4.8547818044528891E-31,
    9.5570081279537094E-29, -7.8572054752482576E-27, 3.3174769183447452E-25,
    -6.2142341258768858E-24, -5.0991712996566211E-23, 5.1392990708290932E-21,
    -8.807706142947147E-20, -5.8182766640448854E-19, 5.1419279154935842E-17,
    -1.04407697522146E-15, 1.1898094238539857E-14, -8.5367937011271162E-14,
    3.9513126620957262E-13, -1.1748533341492665E-12, 2.1917257282808794E-12,
    -2.3566809884820566E-12, 1.0795020408261728E-12, -1.5837465906955864E-13,
    -2.7533507225420422E-32, 5.7619182837708977E-30, -4.6471657116787863E-28,
    1.4048422360791874E-26, 3.7650962241144584E-25, -4.9228435831327322E-23,
    1.9071729205179347E-21, -3.3490783882201909E-20, -7.018689437542322E-20,
    1.8324124104655822E-17, -4.7883976550407734E-16, 7.0487303907715931E-15,
    -6.735734123826801E-14, 4.3114382655453385E-13, -1.8436618496422663E-12,
    5.1655481921478335E-12, -9.1498502333527442E-12, 9.53768065186612E-12,
    -5.5096965823391316E-12, -1.9256688414961511E-12, 2.6993907913031997E-33,
    -8.3658508533748674E-31, 1.2360111759498158E-28, -1.1391057286564071E-26,
    7.1943116140837765E-25, -3.2278401611187206E-23, 1.0313736180462972E-21,
    -2.2595952680170383E-20, 2.9013328570466337E-19, -1.4189880636575127E-19,
    -8.2575877751974837E-17, 1.9535524420193836E-15, -2.60333162544509E-14,
    2.2905798368369833E-13, -1.3730942326110817E-12, 5.5797967300488639E-12,
    -1.5044456366394642E-11, 2.5612747661164289E-11, -1.9627816796196334E-11,
    -2.8036172295220303E-11, -1.9615478304946413E-10, 3.8934925377973957E-34,
    -1.2639609126235819E-31, 1.9287682878359229E-29, -1.8332237204928374E-27,
    1.2092531131064511E-25, -5.8236835135326278E-24, 2.0915581782354698E-22,
    -5.5964099612773872E-21, 1.0833579869797173E-19, -1.3736666335311385E-18,
    6.6209633655847283E-18, 1.4362053626673917E-16, -4.0159095765450877E-15,
    5.320276578988179E-14, -4.5399145021925304E-13, 2.6343951113716903E-12,
    -1.0426603808524378E-11, 2.7378813158203465E-11, -2.4213032965198892E-11,
    -6.43589148489966E-11, 8.7111108876109732E-11, -1.58880825805031E-8,
    1.2049379324305816E-35, -4.3610770108214582E-33, 7.4936434757448969E-31,
    -8.1105245364317889E-29, 6.1705088386370215E-27, -3.480752271664829E-25,
    1.4948191338667704E-23, -4.9368146563727049E-22, 1.2499110582545291E-20,
    -2.3793207120554828E-19, 3.2322327482741956E-18, -2.6498507726404211E-17,
    7.8731033015748051E-18, 3.2775331491296092E-15, -5.1807698267687295E-14,
    4.62732644627914E-13, -2.7239785524170987E-12, 1.0896716883650769E-11,
    -1.8645986337651637E-11, 2.5459617591435155E-12, -1.3347654837468073E-8,
    1.3161132276731047E-7, -1.3227534741608429E-6, -9.7984625010885519E-38,
    3.2900432333335651E-35, -4.4581754057254838E-33, 2.5824817729473294E-31,
    5.2049615357860253E-30, -2.1583876518311414E-27, 1.9476950757610683E-25,
    -1.0716316264212252E-23, 4.1440657240625748E-22, -1.1817624319451798E-20,
    2.5249339155046378E-19, -4.0233948389965105E-18, 4.64169135391771E-17,
    -3.5476759515651092E-16, 1.1999262837080123E-15, 8.516412269170767E-15,
    -1.527199343162684E-13, 1.1449867637138848E-12, -3.6599461401055181E-12,
    -4.6103940452468584E-11, -4.7424213964325014E-9, 1.4095535848735113E-8,
    1.1415162393763462E-5, -0.00011904761791914855, -7.7487127476207258E-39,
    3.1576790378728681E-36, -5.9250135047007422E-34, 6.7643789484475193E-32,
    -5.220570875188387E-30, 2.8506788574160792E-28, -1.1098370767710674E-26,
    2.9468645436878283E-25, -4.2328657438375513E-24, -3.3901276335768838E-23,
    3.8407990599986091E-21, -1.1933448342985106E-19, 2.3702576054378613E-18,
    -3.3709086299905129E-17, 3.5240422748635714E-16, -2.688297081936284E-15,
    1.4426938768292247E-14, -4.5785087028675909E-14, 1.6710103243486247E-14,
    -1.1024143067873009E-11, -3.3079062392811025E-10, 2.8376658214791753E-8,
    2.8265347449301076E-6, 3.9682541488440042E-5, -0.016666666666889381,
    -8.6841596356231729E-42, 3.1939131296905081E-39, -4.8490390875687847E-37,
    3.2729122440862841E-35, 5.3980586162289553E-34, -3.3686936226391223E-31,
    3.7197707807256541E-29, -2.5380412938111731E-27, 1.2494404817163045E-25,
    -4.6966036280739172E-24, 1.3852307187625331E-22, -3.2509821682467773E-21,
    6.1100085267801761E-20, -9.20594856358596E-19, 1.1081925404564449E-17,
    -1.0575868027372313E-16, 7.920139233623936E-16, -4.5514965597202215E-15,
    1.3296256931854534E-14, -3.345171633728989E-13, 1.7101904098836834E-11,
    2.4300392651460408E-9, 4.6155748216027864E-8, -1.5460729722609369E-5,
    -0.00238095238099261, 1.0000000000000047 };

  const real_T *c;
  for (proc_control_node_B.b_k_p = 0; proc_control_node_B.b_k_p < 20;
       proc_control_node_B.b_k_p++) {
    proc_control_node_B.i_go = y[proc_control_node_B.b_k_p];
    proc_control_node_B.x_fd = x[proc_control_node_B.b_k_p];
    proc_control_node_B.j_p = proc_control_node_B.x_fd -
      proc_control_node_B.i_go;
    proc_control_node_B.i_go += proc_control_node_B.x_fd;
    proc_control_node_B.r_g[proc_control_node_B.b_k_p] =
      proc_control_node_rt_powd_snf(proc_control_node_B.j_p, 2.0);
    proc_control_node_B.s_o[proc_control_node_B.b_k_p] =
      proc_control_node_rt_powd_snf(proc_control_node_B.i_go, 2.0);
    proc_control_node_B.u_jy[proc_control_node_B.b_k_p] =
      proc_control_node_B.j_p;
    proc_control_node_B.v_j[proc_control_node_B.b_k_p] =
      proc_control_node_B.i_go;
  }

  c = &tmp[0];
  proc_control_node_B.n_kz = 351;
  for (proc_control_node_B.b_k_p = 0; proc_control_node_B.b_k_p < 25;
       proc_control_node_B.b_k_p++) {
    proc_control_node_B.ibtile_p = proc_control_node_B.b_k_p * 20 - 1;
    memcpy(&proc_control_node_B.b_p[proc_control_node_B.ibtile_p + 1],
           &proc_control_node_B.r_g[0], 20U * sizeof(real_T));
  }

  for (proc_control_node_B.b_k_p = 0; proc_control_node_B.b_k_p < 20;
       proc_control_node_B.b_k_p++) {
    proc_control_node_B.dv[proc_control_node_B.b_k_p] = 1.0;
  }

  memcpy(&proc_control_node_B.dv[20], &proc_control_node_B.b_p[0], 500U * sizeof
         (real_T));
  proc_control_nod_useConstantDim(proc_control_node_B.dv, proc_control_node_B.x);
  for (proc_control_node_B.b_k_p = 0; proc_control_node_B.b_k_p < 25;
       proc_control_node_B.b_k_p++) {
    proc_control_node_B.ibtile_p = proc_control_node_B.b_k_p * 20 - 1;
    memcpy(&proc_control_node_B.b_p[proc_control_node_B.ibtile_p + 1],
           &proc_control_node_B.s_o[0], 20U * sizeof(real_T));
  }

  for (proc_control_node_B.b_k_p = 0; proc_control_node_B.b_k_p < 20;
       proc_control_node_B.b_k_p++) {
    proc_control_node_B.dv[proc_control_node_B.b_k_p] = 1.0;
  }

  memcpy(&proc_control_node_B.dv[20], &proc_control_node_B.b_p[0], 500U * sizeof
         (real_T));
  proc_control_nod_useConstantDim(proc_control_node_B.dv,
    proc_control_node_B.x_l);
  memset(&a[0], 0, 20U * sizeof(real_T));
  memset(&proc_control_node_B.r_g[0], 0, 20U * sizeof(real_T));
  memset(&dady[0], 0, 20U * sizeof(real_T));
  proc_control_node_B.i_go = 0.0;
  proc_control_node_B.j_p = 0.0;
  while (proc_control_node_B.n_kz > 0) {
    proc_control_node_B.x_fd = c[proc_control_node_B.n_kz - 1];
    for (proc_control_node_B.b_k_p = 0; proc_control_node_B.b_k_p < 20;
         proc_control_node_B.b_k_p++) {
      a[proc_control_node_B.b_k_p] += proc_control_node_B.x[(static_cast<int32_T>
        (proc_control_node_B.i_go + 1.0) - 1) * 20 + proc_control_node_B.b_k_p] *
        proc_control_node_B.x_fd * proc_control_node_B.x_l[(static_cast<int32_T>
        (proc_control_node_B.j_p + 1.0) - 1) * 20 + proc_control_node_B.b_k_p];
    }

    if (proc_control_node_B.i_go > 0.0) {
      proc_control_node_B.r_m = (proc_control_node_B.i_go + 1.0) *
        proc_control_node_B.x_fd;
      for (proc_control_node_B.b_k_p = 0; proc_control_node_B.b_k_p < 20;
           proc_control_node_B.b_k_p++) {
        proc_control_node_B.r_g[proc_control_node_B.b_k_p] +=
          proc_control_node_B.x[(static_cast<int32_T>(proc_control_node_B.i_go)
          - 1) * 20 + proc_control_node_B.b_k_p] * proc_control_node_B.r_m *
          proc_control_node_B.x_l[(static_cast<int32_T>(proc_control_node_B.j_p
          + 1.0) - 1) * 20 + proc_control_node_B.b_k_p];
      }
    }

    if (proc_control_node_B.j_p > 0.0) {
      proc_control_node_B.x_fd *= proc_control_node_B.j_p + 1.0;
      for (proc_control_node_B.b_k_p = 0; proc_control_node_B.b_k_p < 20;
           proc_control_node_B.b_k_p++) {
        dady[proc_control_node_B.b_k_p] += proc_control_node_B.x
          [(static_cast<int32_T>(proc_control_node_B.i_go + 1.0) - 1) * 20 +
          proc_control_node_B.b_k_p] * proc_control_node_B.x_fd *
          proc_control_node_B.x_l[(static_cast<int32_T>(proc_control_node_B.j_p)
          - 1) * 20 + proc_control_node_B.b_k_p];
      }
    }

    proc_control_node_B.j_p++;
    if (proc_control_node_B.i_go + proc_control_node_B.j_p > 25.0) {
      proc_control_node_B.i_go++;
      proc_control_node_B.j_p = 0.0;
    }

    proc_control_node_B.n_kz--;
  }

  for (proc_control_node_B.b_k_p = 0; proc_control_node_B.b_k_p < 20;
       proc_control_node_B.b_k_p++) {
    proc_control_node_B.j_p = a[proc_control_node_B.b_k_p];
    proc_control_node_B.i_go = proc_control_node_B.v_j[proc_control_node_B.b_k_p];
    proc_control_node_B.x_fd = dady[proc_control_node_B.b_k_p] *
      proc_control_node_B.i_go;
    proc_control_node_B.r_m = proc_control_node_B.r_g[proc_control_node_B.b_k_p]
      * proc_control_node_B.u_jy[proc_control_node_B.b_k_p];
    dadx[proc_control_node_B.b_k_p] = (2.0 * proc_control_node_B.i_go *
      (proc_control_node_B.x_fd + proc_control_node_B.r_m) +
      proc_control_node_B.j_p) * 3.0;
    a[proc_control_node_B.b_k_p] = 3.0 * proc_control_node_B.i_go *
      proc_control_node_B.j_p;
    dady[proc_control_node_B.b_k_p] = (2.0 * proc_control_node_B.i_go *
      (proc_control_node_B.x_fd - proc_control_node_B.r_m) +
      proc_control_node_B.j_p) * 3.0;
    proc_control_node_B.r_g[proc_control_node_B.b_k_p] = proc_control_node_B.r_m;
  }
}

static void proc_control_node_eml_find(const boolean_T x[20], int32_T i_data[],
  int32_T *i_size)
{
  int32_T b_ii;
  int32_T idx;
  boolean_T exitg1;
  idx = 0;
  b_ii = 1;
  exitg1 = false;
  while ((!exitg1) && (b_ii - 1 < 20)) {
    if (x[b_ii - 1]) {
      idx++;
      i_data[idx - 1] = b_ii;
      if (idx >= 20) {
        exitg1 = true;
      } else {
        b_ii++;
      }
    } else {
      b_ii++;
    }
  }

  if (1 > idx) {
    idx = 0;
  }

  *i_size = idx;
}

static void proc_control_node_fresnelg1(const real_T a[20], const real_T d[20],
  const real_T c[20], creal_T z[20], creal_T dz[20])
{
  for (proc_control_node_B.b_k_dk = 0; proc_control_node_B.b_k_dk < 20;
       proc_control_node_B.b_k_dk++) {
    proc_control_node_B.a_p = a[proc_control_node_B.b_k_dk];
    z[proc_control_node_B.b_k_dk].re = 0.0;
    z[proc_control_node_B.b_k_dk].im = 0.0;
    dz[proc_control_node_B.b_k_dk].re = 0.0;
    dz[proc_control_node_B.b_k_dk].im = 0.0;
    proc_control_node_B.criteria[proc_control_node_B.b_k_dk] = (fabs
      (proc_control_node_rt_powd_snf(d[proc_control_node_B.b_k_dk] -
      proc_control_node_B.a_p, 2.0) / (4.0 * proc_control_node_B.a_p)) <
      628.31853071795865);
  }

  proc_control_node_eml_find(proc_control_node_B.criteria,
    proc_control_node_B.y_tmp_data_k, &proc_control_node_B.y_tmp_size_f);
  proc_control_node_B.ilarge_size_idx_0_l = proc_control_node_B.y_tmp_size_f;
  proc_control_node_B.b_k_dk = proc_control_node_B.y_tmp_size_f;
  if (0 <= proc_control_node_B.b_k_dk - 1) {
    memcpy(&proc_control_node_B.ilarge_data_c[0],
           &proc_control_node_B.y_tmp_data_k[0], proc_control_node_B.b_k_dk *
           sizeof(int32_T));
  }

  for (proc_control_node_B.nx_f5 = 0; proc_control_node_B.nx_f5 < 20;
       proc_control_node_B.nx_f5++) {
    proc_control_node_B.criteria_l[proc_control_node_B.nx_f5] =
      !proc_control_node_B.criteria[proc_control_node_B.nx_f5];
  }

  proc_control_node_eml_find(proc_control_node_B.criteria_l,
    proc_control_node_B.y_tmp_data_k, &proc_control_node_B.y_tmp_size_f);
  proc_control_node_B.ismall_size_idx_0_e = proc_control_node_B.y_tmp_size_f;
  proc_control_node_B.b_k_dk = proc_control_node_B.y_tmp_size_f;
  if (0 <= proc_control_node_B.b_k_dk - 1) {
    memcpy(&proc_control_node_B.ismall_data_k[0],
           &proc_control_node_B.y_tmp_data_k[0], proc_control_node_B.b_k_dk *
           sizeof(int32_T));
  }

  for (proc_control_node_B.nx_f5 = 0; proc_control_node_B.nx_f5 < 20;
       proc_control_node_B.nx_f5++) {
    proc_control_node_B.criteria[proc_control_node_B.nx_f5] =
      ((d[proc_control_node_B.nx_f5] == 0.0) && (a[proc_control_node_B.nx_f5] ==
        0.0));
  }

  proc_control_node_eml_find(proc_control_node_B.criteria,
    proc_control_node_B.y_tmp_data_k, &proc_control_node_B.y_tmp_size_f);
  proc_control_node_B.izero_size_idx_0 = proc_control_node_B.y_tmp_size_f;
  proc_control_node_B.b_k_dk = proc_control_node_B.y_tmp_size_f;
  if (0 <= proc_control_node_B.b_k_dk - 1) {
    memcpy(&proc_control_node_B.izero_data_d[0],
           &proc_control_node_B.y_tmp_data_k[0], proc_control_node_B.b_k_dk *
           sizeof(int32_T));
  }

  if (proc_control_node_B.ilarge_size_idx_0_l != 0) {
    proc_control_node_B.a_size_o = proc_control_node_B.ilarge_size_idx_0_l;
    for (proc_control_node_B.nx_f5 = 0; proc_control_node_B.nx_f5 <
         proc_control_node_B.ilarge_size_idx_0_l; proc_control_node_B.nx_f5++) {
      proc_control_node_B.a_data_k[proc_control_node_B.nx_f5] =
        a[proc_control_node_B.ilarge_data_c[proc_control_node_B.nx_f5] - 1];
    }

    proc_control_node_B.d_size_f = proc_control_node_B.ilarge_size_idx_0_l;
    for (proc_control_node_B.nx_f5 = 0; proc_control_node_B.nx_f5 <
         proc_control_node_B.ilarge_size_idx_0_l; proc_control_node_B.nx_f5++) {
      proc_control_node_B.d_data_i[proc_control_node_B.nx_f5] =
        d[proc_control_node_B.ilarge_data_c[proc_control_node_B.nx_f5] - 1];
    }

    proc_control_node_B.c_size_o = proc_control_node_B.ilarge_size_idx_0_l;
    for (proc_control_node_B.nx_f5 = 0; proc_control_node_B.nx_f5 <
         proc_control_node_B.ilarge_size_idx_0_l; proc_control_node_B.nx_f5++) {
      proc_control_node_B.c_data_h[proc_control_node_B.nx_f5] =
        c[proc_control_node_B.ilarge_data_c[proc_control_node_B.nx_f5] - 1];
    }

    proc_control_no_fresnelgLargea1(proc_control_node_B.a_data_k,
      &proc_control_node_B.a_size_o, proc_control_node_B.d_data_i,
      &proc_control_node_B.d_size_f, proc_control_node_B.c_data_h,
      &proc_control_node_B.c_size_o, proc_control_node_B.b_data_p,
      &proc_control_node_B.b_size_p, proc_control_node_B.e_data_d,
      &proc_control_node_B.e_size_g);
    proc_control_node_B.b_k_dk = proc_control_node_B.b_size_p;
    for (proc_control_node_B.nx_f5 = 0; proc_control_node_B.nx_f5 <
         proc_control_node_B.b_k_dk; proc_control_node_B.nx_f5++) {
      z[proc_control_node_B.ilarge_data_c[proc_control_node_B.nx_f5] - 1] =
        proc_control_node_B.b_data_p[proc_control_node_B.nx_f5];
    }

    proc_control_node_B.b_k_dk = proc_control_node_B.e_size_g;
    for (proc_control_node_B.nx_f5 = 0; proc_control_node_B.nx_f5 <
         proc_control_node_B.b_k_dk; proc_control_node_B.nx_f5++) {
      dz[proc_control_node_B.ilarge_data_c[proc_control_node_B.nx_f5] - 1] =
        proc_control_node_B.e_data_d[proc_control_node_B.nx_f5];
    }
  }

  if (proc_control_node_B.ismall_size_idx_0_e != 0) {
    proc_control_node_B.a_size_o = proc_control_node_B.ismall_size_idx_0_e;
    for (proc_control_node_B.nx_f5 = 0; proc_control_node_B.nx_f5 <
         proc_control_node_B.ismall_size_idx_0_e; proc_control_node_B.nx_f5++) {
      proc_control_node_B.a_data_k[proc_control_node_B.nx_f5] =
        a[proc_control_node_B.ismall_data_k[proc_control_node_B.nx_f5] - 1];
    }

    proc_control_node_B.d_size_f = proc_control_node_B.ismall_size_idx_0_e;
    for (proc_control_node_B.nx_f5 = 0; proc_control_node_B.nx_f5 <
         proc_control_node_B.ismall_size_idx_0_e; proc_control_node_B.nx_f5++) {
      proc_control_node_B.d_data_i[proc_control_node_B.nx_f5] =
        d[proc_control_node_B.ismall_data_k[proc_control_node_B.nx_f5] - 1];
    }

    proc_control_node_B.c_size_o = proc_control_node_B.ismall_size_idx_0_e;
    for (proc_control_node_B.nx_f5 = 0; proc_control_node_B.nx_f5 <
         proc_control_node_B.ismall_size_idx_0_e; proc_control_node_B.nx_f5++) {
      proc_control_node_B.c_data_h[proc_control_node_B.nx_f5] =
        c[proc_control_node_B.ismall_data_k[proc_control_node_B.nx_f5] - 1];
    }

    proc_control_no_fresnelgSmalla1(proc_control_node_B.a_data_k,
      &proc_control_node_B.a_size_o, proc_control_node_B.d_data_i,
      &proc_control_node_B.d_size_f, proc_control_node_B.c_data_h,
      &proc_control_node_B.c_size_o, proc_control_node_B.b_data_p,
      &proc_control_node_B.b_size_p, proc_control_node_B.e_data_d,
      &proc_control_node_B.e_size_g);
    proc_control_node_B.b_k_dk = proc_control_node_B.b_size_p;
    for (proc_control_node_B.nx_f5 = 0; proc_control_node_B.nx_f5 <
         proc_control_node_B.b_k_dk; proc_control_node_B.nx_f5++) {
      z[proc_control_node_B.ismall_data_k[proc_control_node_B.nx_f5] - 1] =
        proc_control_node_B.b_data_p[proc_control_node_B.nx_f5];
    }

    proc_control_node_B.b_k_dk = proc_control_node_B.e_size_g;
    for (proc_control_node_B.nx_f5 = 0; proc_control_node_B.nx_f5 <
         proc_control_node_B.b_k_dk; proc_control_node_B.nx_f5++) {
      dz[proc_control_node_B.ismall_data_k[proc_control_node_B.nx_f5] - 1] =
        proc_control_node_B.e_data_d[proc_control_node_B.nx_f5];
    }
  }

  if (proc_control_node_B.y_tmp_size_f != 0) {
    if (0 <= proc_control_node_B.izero_size_idx_0 - 1) {
      memcpy(&proc_control_node_B.y_tmp_data_k[0],
             &proc_control_node_B.izero_data_d[0],
             proc_control_node_B.izero_size_idx_0 * sizeof(int32_T));
    }

    for (proc_control_node_B.nx_f5 = 0; proc_control_node_B.nx_f5 <
         proc_control_node_B.izero_size_idx_0; proc_control_node_B.nx_f5++) {
      proc_control_node_B.a_p =
        c[proc_control_node_B.y_tmp_data_k[proc_control_node_B.nx_f5] - 1];
      proc_control_node_B.b_data_p[proc_control_node_B.nx_f5].re =
        proc_control_node_B.a_p * 0.0;
      proc_control_node_B.b_data_p[proc_control_node_B.nx_f5].im =
        proc_control_node_B.a_p;
    }

    proc_control_node_B.nx_f5 = proc_control_node_B.y_tmp_size_f - 1;
    for (proc_control_node_B.b_k_dk = 0; proc_control_node_B.b_k_dk <=
         proc_control_node_B.nx_f5; proc_control_node_B.b_k_dk++) {
      proc_control_node_B.b_gr =
        proc_control_node_B.b_data_p[proc_control_node_B.b_k_dk];
      if (proc_control_node_B.b_gr.im == 0.0) {
        proc_control_node_B.a_p = exp(proc_control_node_B.b_gr.re);
        proc_control_node_B.r_i3 = 0.0;
      } else if (rtIsInf(proc_control_node_B.b_gr.im) && rtIsInf
                 (proc_control_node_B.b_gr.re) && (proc_control_node_B.b_gr.re <
                  0.0)) {
        proc_control_node_B.a_p = 0.0;
        proc_control_node_B.r_i3 = 0.0;
      } else {
        proc_control_node_B.r_i3 = exp(proc_control_node_B.b_gr.re / 2.0);
        proc_control_node_B.a_p = proc_control_node_B.r_i3 * cos
          (proc_control_node_B.b_gr.im) * proc_control_node_B.r_i3;
        proc_control_node_B.r_i3 *= proc_control_node_B.r_i3 * sin
          (proc_control_node_B.b_gr.im);
      }

      proc_control_node_B.b_gr.re = proc_control_node_B.a_p;
      proc_control_node_B.b_gr.im = proc_control_node_B.r_i3;
      proc_control_node_B.b_data_p[proc_control_node_B.b_k_dk] =
        proc_control_node_B.b_gr;
    }

    proc_control_node_B.b_k_dk = proc_control_node_B.y_tmp_size_f;
    for (proc_control_node_B.nx_f5 = 0; proc_control_node_B.nx_f5 <
         proc_control_node_B.b_k_dk; proc_control_node_B.nx_f5++) {
      z[proc_control_node_B.izero_data_d[proc_control_node_B.nx_f5] - 1] =
        proc_control_node_B.b_data_p[proc_control_node_B.nx_f5];
    }

    for (proc_control_node_B.nx_f5 = 0; proc_control_node_B.nx_f5 <
         proc_control_node_B.izero_size_idx_0; proc_control_node_B.nx_f5++) {
      proc_control_node_B.b_k_dk =
        proc_control_node_B.y_tmp_data_k[proc_control_node_B.nx_f5];
      dz[proc_control_node_B.b_k_dk - 1].re = 0.0;
      dz[proc_control_node_B.b_k_dk - 1].im = 0.0;
    }
  }
}

static void proc_control_n_clothoidG1fit2wp(const creal_T z0[20], const real_T
  theta0[20], const creal_T z1[20], const real_T theta1[20], real_T k0[20],
  real_T k1[20], real_T l[20], real_T dk0_dtheta0[20], real_T dk0_dtheta1[20],
  real_T dk1_dtheta0[20], real_T dk1_dtheta1[20])
{
  for (proc_control_node_B.b_k_d = 0; proc_control_node_B.b_k_d < 20;
       proc_control_node_B.b_k_d++) {
    proc_control_node_B.z_p.re = z1[proc_control_node_B.b_k_d].re -
      z0[proc_control_node_B.b_k_d].re;
    proc_control_node_B.z_p.im = z1[proc_control_node_B.b_k_d].im -
      z0[proc_control_node_B.b_k_d].im;
    proc_control_node_B.phi_b = rt_atan2d_snf(proc_control_node_B.z_p.im,
      proc_control_node_B.z_p.re);
    proc_control_node_B.b_x_tmp = theta0[proc_control_node_B.b_k_d] -
      proc_control_node_B.phi_b;
    proc_control_node_B.b_x_a.re = proc_control_node_B.b_x_tmp * 0.0;
    if (proc_control_node_B.b_x_tmp == 0.0) {
      proc_control_node_B.a_re_p = exp(proc_control_node_B.b_x_a.re);
      proc_control_node_B.b_x_tmp = 0.0;
    } else if (rtIsInf(proc_control_node_B.b_x_tmp) && rtIsInf
               (proc_control_node_B.b_x_a.re) && (proc_control_node_B.b_x_a.re <
                0.0)) {
      proc_control_node_B.a_re_p = 0.0;
      proc_control_node_B.b_x_tmp = 0.0;
    } else {
      proc_control_node_B.r_jf = exp(proc_control_node_B.b_x_a.re / 2.0);
      proc_control_node_B.a_re_p = proc_control_node_B.r_jf * cos
        (proc_control_node_B.b_x_tmp) * proc_control_node_B.r_jf;
      proc_control_node_B.b_x_tmp = proc_control_node_B.r_jf * sin
        (proc_control_node_B.b_x_tmp) * proc_control_node_B.r_jf;
    }

    proc_control_node_B.phi0[proc_control_node_B.b_k_d] = rt_atan2d_snf
      (proc_control_node_B.b_x_tmp, proc_control_node_B.a_re_p);
    proc_control_node_B.b_x_tmp = theta1[proc_control_node_B.b_k_d] -
      proc_control_node_B.phi_b;
    proc_control_node_B.b_x_a.re = proc_control_node_B.b_x_tmp * 0.0;
    proc_control_node_B.b_x_a.im = proc_control_node_B.b_x_tmp;
    proc_control_node_B.z_m[proc_control_node_B.b_k_d] = proc_control_node_B.z_p;
    proc_control_node_B.b_x[proc_control_node_B.b_k_d] =
      proc_control_node_B.b_x_a;
  }

  for (proc_control_node_B.b_k_d = 0; proc_control_node_B.b_k_d < 20;
       proc_control_node_B.b_k_d++) {
    proc_control_node_B.b_x_a =
      proc_control_node_B.b_x[proc_control_node_B.b_k_d];
    if (proc_control_node_B.b_x_a.im == 0.0) {
      proc_control_node_B.a_re_p = exp(proc_control_node_B.b_x_a.re);
      proc_control_node_B.b_x_tmp = 0.0;
    } else if (rtIsInf(proc_control_node_B.b_x_a.im) && rtIsInf
               (proc_control_node_B.b_x_a.re) && (proc_control_node_B.b_x_a.re <
                0.0)) {
      proc_control_node_B.a_re_p = 0.0;
      proc_control_node_B.b_x_tmp = 0.0;
    } else {
      proc_control_node_B.r_jf = exp(proc_control_node_B.b_x_a.re / 2.0);
      proc_control_node_B.a_re_p = proc_control_node_B.r_jf * cos
        (proc_control_node_B.b_x_a.im) * proc_control_node_B.r_jf;
      proc_control_node_B.b_x_tmp = proc_control_node_B.r_jf * sin
        (proc_control_node_B.b_x_a.im) * proc_control_node_B.r_jf;
    }

    proc_control_node_B.b_x_a.re = proc_control_node_B.a_re_p;
    proc_control_node_B.b_x_a.im = proc_control_node_B.b_x_tmp;
    proc_control_node_B.phi_b = rt_atan2d_snf(proc_control_node_B.b_x_tmp,
      proc_control_node_B.a_re_p);
    k1[proc_control_node_B.b_k_d] = proc_control_node_B.phi_b -
      proc_control_node_B.phi0[proc_control_node_B.b_k_d];
    proc_control_node_B.b_x[proc_control_node_B.b_k_d] =
      proc_control_node_B.b_x_a;
    proc_control_node_B.phi1[proc_control_node_B.b_k_d] =
      proc_control_node_B.phi_b;
  }

  proc_control_node_fetchAgrad(proc_control_node_B.phi0,
    proc_control_node_B.phi1, proc_control_node_B.phi,
    proc_control_node_B.da_dphi0, proc_control_node_B.da_dphi1);
  proc_control_node_fresnelg1(proc_control_node_B.phi, k1,
    proc_control_node_B.phi0, proc_control_node_B.b_x, proc_control_node_B.df_da);
  for (proc_control_node_B.b_k_d = 0; proc_control_node_B.b_k_d < 20;
       proc_control_node_B.b_k_d++) {
    proc_control_node_B.a_re_p =
      proc_control_node_B.da_dphi1[proc_control_node_B.b_k_d];
    proc_control_node_B.b_x_tmp =
      proc_control_node_B.da_dphi0[proc_control_node_B.b_k_d];
    proc_control_node_B.phi_b =
      proc_control_node_B.phi[proc_control_node_B.b_k_d];
    proc_control_node_B.r_jf = k1[proc_control_node_B.b_k_d];
    proc_control_node_B.l_tmp = proc_control_node_rt_hypotd_snf
      (proc_control_node_B.z_m[proc_control_node_B.b_k_d].re,
       proc_control_node_B.z_m[proc_control_node_B.b_k_d].im);
    proc_control_node_B.y_fm.re =
      proc_control_node_B.b_x[proc_control_node_B.b_k_d].re *
      proc_control_node_B.b_x[proc_control_node_B.b_k_d].re -
      proc_control_node_B.b_x[proc_control_node_B.b_k_d].im *
      proc_control_node_B.b_x[proc_control_node_B.b_k_d].im;
    proc_control_node_B.y_tmp =
      proc_control_node_B.b_x[proc_control_node_B.b_k_d].re *
      proc_control_node_B.b_x[proc_control_node_B.b_k_d].im;
    proc_control_node_B.y_fm.im = proc_control_node_B.y_tmp +
      proc_control_node_B.y_tmp;
    proc_control_node_B.y_tmp = proc_control_node_B.l_tmp /
      proc_control_node_B.b_x[proc_control_node_B.b_k_d].re;
    proc_control_node_B.ar_g =
      proc_control_node_B.df_da[proc_control_node_B.b_k_d].re;
    proc_control_node_B.ai = proc_control_node_B.df_da[proc_control_node_B.b_k_d]
      .im;
    if (proc_control_node_B.y_fm.im == 0.0) {
      if (proc_control_node_B.ai == 0.0) {
        proc_control_node_B.ar_g /= proc_control_node_B.y_fm.re;
      } else if (proc_control_node_B.ar_g == 0.0) {
        proc_control_node_B.ar_g = 0.0;
      } else {
        proc_control_node_B.ar_g /= proc_control_node_B.y_fm.re;
      }
    } else if (proc_control_node_B.y_fm.re == 0.0) {
      if (proc_control_node_B.ar_g == 0.0) {
        proc_control_node_B.ar_g = proc_control_node_B.ai /
          proc_control_node_B.y_fm.im;
      } else if (proc_control_node_B.ai == 0.0) {
        proc_control_node_B.ar_g = 0.0;
      } else {
        proc_control_node_B.ar_g = proc_control_node_B.ai /
          proc_control_node_B.y_fm.im;
      }
    } else {
      proc_control_node_B.brm_lt = fabs(proc_control_node_B.y_fm.re);
      proc_control_node_B.bim_k = fabs(proc_control_node_B.y_fm.im);
      if (proc_control_node_B.brm_lt > proc_control_node_B.bim_k) {
        proc_control_node_B.brm_lt = proc_control_node_B.y_fm.im /
          proc_control_node_B.y_fm.re;
        proc_control_node_B.ar_g = (proc_control_node_B.brm_lt *
          proc_control_node_B.ai + proc_control_node_B.ar_g) /
          (proc_control_node_B.brm_lt * proc_control_node_B.y_fm.im +
           proc_control_node_B.y_fm.re);
      } else if (proc_control_node_B.bim_k == proc_control_node_B.brm_lt) {
        proc_control_node_B.ar_g = ((proc_control_node_B.y_fm.re > 0.0 ? 0.5 :
          -0.5) * proc_control_node_B.ar_g + (proc_control_node_B.y_fm.im > 0.0 ?
          0.5 : -0.5) * proc_control_node_B.ai) / proc_control_node_B.brm_lt;
      } else {
        proc_control_node_B.brm_lt = proc_control_node_B.y_fm.re /
          proc_control_node_B.y_fm.im;
        proc_control_node_B.ar_g = (proc_control_node_B.brm_lt *
          proc_control_node_B.ar_g + proc_control_node_B.ai) /
          (proc_control_node_B.brm_lt * proc_control_node_B.y_fm.re +
           proc_control_node_B.y_fm.im);
      }
    }

    proc_control_node_B.l_tmp = -proc_control_node_B.l_tmp *
      proc_control_node_B.ar_g;
    proc_control_node_B.ar_g = proc_control_node_rt_powd_snf
      (proc_control_node_B.y_tmp, 2.0);
    proc_control_node_B.ai = proc_control_node_B.r_jf -
      proc_control_node_B.phi_b;
    proc_control_node_B.brm_lt = -proc_control_node_B.l_tmp *
      proc_control_node_B.b_x_tmp / proc_control_node_B.ar_g;
    proc_control_node_B.bim_k = proc_control_node_B.brm_lt *
      proc_control_node_B.ai + (-1.0 - proc_control_node_B.b_x_tmp) /
      proc_control_node_B.y_tmp;
    proc_control_node_B.l_tmp = -proc_control_node_B.l_tmp *
      proc_control_node_B.a_re_p / proc_control_node_B.ar_g;
    proc_control_node_B.ar_g = proc_control_node_B.l_tmp *
      proc_control_node_B.ai + (1.0 - proc_control_node_B.a_re_p) /
      proc_control_node_B.y_tmp;
    proc_control_node_B.r_jf += proc_control_node_B.phi_b;
    proc_control_node_B.brm_lt = proc_control_node_B.brm_lt *
      proc_control_node_B.r_jf + (proc_control_node_B.b_x_tmp + -1.0) /
      proc_control_node_B.y_tmp;
    proc_control_node_B.l_tmp = proc_control_node_B.l_tmp *
      proc_control_node_B.r_jf + (proc_control_node_B.a_re_p + 1.0) /
      proc_control_node_B.y_tmp;
    if (proc_control_node_B.y_tmp == 0.0) {
      proc_control_node_B.bim_k = 0.0;
      proc_control_node_B.ar_g = 0.0;
      proc_control_node_B.brm_lt = 0.0;
      proc_control_node_B.l_tmp = 0.0;
    }

    proc_control_node_B.ai /= proc_control_node_B.y_tmp;
    proc_control_node_B.r_jf /= proc_control_node_B.y_tmp;
    if (proc_control_node_B.y_tmp == 0.0) {
      proc_control_node_B.ai = 0.0;
      proc_control_node_B.r_jf = 0.0;
    }

    l[proc_control_node_B.b_k_d] = proc_control_node_B.y_tmp;
    dk1_dtheta1[proc_control_node_B.b_k_d] = proc_control_node_B.l_tmp;
    dk0_dtheta0[proc_control_node_B.b_k_d] = proc_control_node_B.bim_k;
    k1[proc_control_node_B.b_k_d] = proc_control_node_B.r_jf;
    k0[proc_control_node_B.b_k_d] = proc_control_node_B.ai;
    dk1_dtheta0[proc_control_node_B.b_k_d] = proc_control_node_B.brm_lt;
    dk0_dtheta1[proc_control_node_B.b_k_d] = proc_control_node_B.ar_g;
  }
}

static void proc_control_node_anon_b(const real_T waypoints[63], const real_T x
  [20], real_T varargout_1[20], real_T varargout_2[60])
{
  static const int8_T tmp[20] = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14,
    15, 16, 17, 18, 19, 0 };

  static const int8_T tmp_0[20] = { 19, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12,
    13, 14, 15, 16, 17, 18 };

  for (proc_control_node_B.i3 = 0; proc_control_node_B.i3 < 21;
       proc_control_node_B.i3++) {
    proc_control_node_B.hip[proc_control_node_B.i3].re =
      waypoints[proc_control_node_B.i3];
    proc_control_node_B.hip[proc_control_node_B.i3].im =
      waypoints[proc_control_node_B.i3 + 21];
  }

  for (proc_control_node_B.i3 = 0; proc_control_node_B.i3 < 20;
       proc_control_node_B.i3++) {
    proc_control_node_B.x_li[proc_control_node_B.i3] =
      x[tmp[proc_control_node_B.i3]];
  }

  proc_control_n_clothoidG1fit2wp(&proc_control_node_B.hip[0], x,
    &proc_control_node_B.hip[1], proc_control_node_B.x_li,
    proc_control_node_B.k0, proc_control_node_B.k1, proc_control_node_B.a__1,
    proc_control_node_B.dk0_dc0, proc_control_node_B.dk0_dc1,
    proc_control_node_B.dk1_dc0, proc_control_node_B.dk1_dc1);
  varargout_1[0] = proc_control_node_B.k1[19] - proc_control_node_B.k0[0];
  for (proc_control_node_B.i3 = 0; proc_control_node_B.i3 < 19;
       proc_control_node_B.i3++) {
    varargout_1[proc_control_node_B.i3 + 1] =
      proc_control_node_B.k1[proc_control_node_B.i3] - proc_control_node_B.k0
      [(proc_control_node_B.i3 + 2) - 1];
  }

  for (proc_control_node_B.i3 = 0; proc_control_node_B.i3 < 20;
       proc_control_node_B.i3++) {
    varargout_2[proc_control_node_B.i3] =
      proc_control_node_B.dk1_dc0[proc_control_node_B.i3];
    varargout_2[proc_control_node_B.i3 + 20] =
      proc_control_node_B.dk1_dc1[tmp_0[proc_control_node_B.i3]] -
      proc_control_node_B.dk0_dc0[proc_control_node_B.i3];
    varargout_2[proc_control_node_B.i3 + 40] =
      -proc_control_node_B.dk0_dc1[proc_control_node_B.i3];
  }
}

static void proc_control_node_mulJt(const real_T Jtri[60], const real_T x[20],
  real_T y[20])
{
  int32_T y_tmp;
  proc_control_node_B.iv2[19] = 0;
  proc_control_node_B.iv3[0] = 19;
  proc_control_node_B.iv4[0] = 19;
  for (y_tmp = 0; y_tmp < 19; y_tmp++) {
    proc_control_node_B.iv2[y_tmp] = static_cast<int8_T>(y_tmp + 1);
    proc_control_node_B.iv3[y_tmp + 1] = static_cast<int8_T>(y_tmp);
    proc_control_node_B.iv4[y_tmp + 1] = static_cast<int8_T>(y_tmp);
  }

  for (y_tmp = 0; y_tmp < 20; y_tmp++) {
    y[y_tmp] = (Jtri[y_tmp + 20] * x[y_tmp] + Jtri[y_tmp] *
                x[proc_control_node_B.iv2[y_tmp]]) +
      Jtri[proc_control_node_B.iv3[y_tmp] + 40] *
      x[proc_control_node_B.iv4[y_tmp]];
  }
}

static void proc_control_nod_sympentdisolve(const real_T d[20], const real_T e
  [20], const real_T f[20], const real_T b[100], real_T x[100])
{
  int32_T b_tmp;
  int32_T i;
  int32_T z_tmp;
  memset(&x[0], 0, 100U * sizeof(real_T));
  memset(&proc_control_node_B.alpha_e[0], 0, 20U * sizeof(real_T));
  memset(&proc_control_node_B.b_gamma_a[0], 0, 19U * sizeof(real_T));
  memset(&proc_control_node_B.delta_d[0], 0, 18U * sizeof(real_T));
  proc_control_node_B.alpha_e[0] = d[0];
  proc_control_node_B.b_gamma_a[0] = e[0] / d[0];
  proc_control_node_B.delta_d[0] = f[0] / d[0];
  proc_control_node_B.alpha_e[1] = d[1] - e[0] * proc_control_node_B.b_gamma_a[0];
  proc_control_node_B.b_gamma_a[1] = (e[1] - f[0] *
    proc_control_node_B.b_gamma_a[0]) / proc_control_node_B.alpha_e[1];
  proc_control_node_B.delta_d[1] = f[1] / proc_control_node_B.alpha_e[1];
  for (i = 0; i < 16; i++) {
    proc_control_node_B.alpha_tmp_l = proc_control_node_B.b_gamma_a[i + 1];
    proc_control_node_B.alpha_e[i + 2] = (d[i + 2] - f[i] *
      proc_control_node_B.delta_d[i]) - proc_control_node_B.alpha_tmp_l *
      proc_control_node_B.alpha_tmp_l * proc_control_node_B.alpha_e[i + 1];
    proc_control_node_B.b_gamma_tmp_j = proc_control_node_B.alpha_e[i + 2];
    proc_control_node_B.b_gamma_a[i + 2] = (e[i + 2] - f[i + 1] *
      proc_control_node_B.alpha_tmp_l) / proc_control_node_B.b_gamma_tmp_j;
    proc_control_node_B.delta_d[i + 2] = f[i + 2] /
      proc_control_node_B.b_gamma_tmp_j;
  }

  proc_control_node_B.alpha_e[18] = (d[18] - f[16] *
    proc_control_node_B.delta_d[16]) - proc_control_node_B.b_gamma_a[17] *
    proc_control_node_B.b_gamma_a[17] * proc_control_node_B.alpha_e[17];
  proc_control_node_B.b_gamma_a[18] = (e[18] - f[17] *
    proc_control_node_B.b_gamma_a[17]) / proc_control_node_B.alpha_e[18];
  proc_control_node_B.alpha_e[19] = (d[19] - f[17] *
    proc_control_node_B.delta_d[17]) - proc_control_node_B.b_gamma_a[18] *
    proc_control_node_B.b_gamma_a[18] * proc_control_node_B.alpha_e[18];
  memset(&proc_control_node_B.z[0], 0, 100U * sizeof(real_T));
  proc_control_node_B.alpha_tmp_l = proc_control_node_B.b_gamma_a[0];
  for (i = 0; i < 5; i++) {
    proc_control_node_B.z[20 * i] = b[20 * i];
    z_tmp = 20 * i + 1;
    proc_control_node_B.z[z_tmp] = b[z_tmp] - proc_control_node_B.z[20 * i] *
      proc_control_node_B.alpha_tmp_l;
  }

  for (z_tmp = 0; z_tmp < 18; z_tmp++) {
    proc_control_node_B.alpha_tmp_l = proc_control_node_B.b_gamma_a[z_tmp + 1];
    proc_control_node_B.b_gamma_tmp_j = proc_control_node_B.delta_d[z_tmp];
    for (i = 0; i < 5; i++) {
      b_tmp = 20 * i + z_tmp;
      proc_control_node_B.z[b_tmp + 2] = (b[b_tmp + 2] -
        proc_control_node_B.z[b_tmp + 1] * proc_control_node_B.alpha_tmp_l) -
        proc_control_node_B.z[b_tmp] * proc_control_node_B.b_gamma_tmp_j;
    }
  }

  proc_control_node_B.alpha_tmp_l = proc_control_node_B.b_gamma_a[18];
  for (i = 0; i < 5; i++) {
    for (b_tmp = 0; b_tmp < 20; b_tmp++) {
      z_tmp = 20 * i + b_tmp;
      proc_control_node_B.c[z_tmp] = proc_control_node_B.z[z_tmp] /
        proc_control_node_B.alpha_e[b_tmp];
    }

    b_tmp = 20 * i + 19;
    x[b_tmp] = proc_control_node_B.c[b_tmp];
    z_tmp = 20 * i + 18;
    proc_control_node_B.c_n[i] = proc_control_node_B.c[z_tmp] - x[b_tmp] *
      proc_control_node_B.alpha_tmp_l;
    x[z_tmp] = proc_control_node_B.c_n[i];
  }

  for (b_tmp = 0; b_tmp < 18; b_tmp++) {
    proc_control_node_B.alpha_tmp_l = proc_control_node_B.b_gamma_a[17 - b_tmp];
    proc_control_node_B.b_gamma_tmp_j = proc_control_node_B.delta_d[17 - b_tmp];
    for (i = 0; i < 5; i++) {
      z_tmp = 20 * i - b_tmp;
      x[z_tmp + 17] = (proc_control_node_B.c[z_tmp + 17] - x[z_tmp + 18] *
                       proc_control_node_B.alpha_tmp_l) - x[z_tmp + 19] *
        proc_control_node_B.b_gamma_tmp_j;
    }
  }
}

static void proc_contr_solveDampenedHessian(const real_T Jtri[60], real_T lambda,
  const real_T v[20], real_T dx[20])
{
  static const int8_T tmp[20] = { 19, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12,
    13, 14, 15, 16, 17, 18 };

  static const int8_T tmp_0[80] = { 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 };

  for (proc_control_node_B.i_mz = 0; proc_control_node_B.i_mz < 20;
       proc_control_node_B.i_mz++) {
    proc_control_node_B.d[proc_control_node_B.i_mz] =
      ((proc_control_node_rt_powd_snf(Jtri[proc_control_node_B.i_mz], 2.0) +
        proc_control_node_rt_powd_snf(Jtri[proc_control_node_B.i_mz + 20], 2.0))
       + proc_control_node_rt_powd_snf(Jtri[tmp[proc_control_node_B.i_mz] + 40],
        2.0)) * (lambda + 1.0);
  }

  for (proc_control_node_B.i_mz = 0; proc_control_node_B.i_mz < 19;
       proc_control_node_B.i_mz++) {
    proc_control_node_B.e_tmp[proc_control_node_B.i_mz] = static_cast<int8_T>
      (proc_control_node_B.i_mz + 1);
    proc_control_node_B.e_tmp_o[proc_control_node_B.i_mz] = static_cast<int8_T>
      (proc_control_node_B.i_mz + 1);
  }

  proc_control_node_B.e_tmp[19] = 0;
  for (proc_control_node_B.i_mz = 0; proc_control_node_B.i_mz < 20;
       proc_control_node_B.i_mz++) {
    proc_control_node_B.e_j[proc_control_node_B.i_mz] =
      Jtri[proc_control_node_B.e_tmp[proc_control_node_B.i_mz] + 20] *
      Jtri[proc_control_node_B.i_mz] + Jtri[proc_control_node_B.i_mz + 20] *
      Jtri[proc_control_node_B.i_mz + 40];
  }

  for (proc_control_node_B.i_mz = 0; proc_control_node_B.i_mz < 19;
       proc_control_node_B.i_mz++) {
    proc_control_node_B.e_tmp[proc_control_node_B.i_mz] =
      proc_control_node_B.e_tmp_o[proc_control_node_B.i_mz];
  }

  proc_control_node_B.e_tmp[19] = 0;
  for (proc_control_node_B.i_mz = 0; proc_control_node_B.i_mz < 20;
       proc_control_node_B.i_mz++) {
    proc_control_node_B.f[proc_control_node_B.i_mz] =
      Jtri[proc_control_node_B.e_tmp[proc_control_node_B.i_mz] + 40] *
      Jtri[proc_control_node_B.i_mz];
  }

  if ((Jtri[19] == 0.0) && (Jtri[59] == 0.0)) {
    memset(&dx[0], 0, 20U * sizeof(real_T));
    memset(&proc_control_node_B.alpha_c[0], 0, 20U * sizeof(real_T));
    memset(&proc_control_node_B.b_gamma[0], 0, 19U * sizeof(real_T));
    memset(&proc_control_node_B.delta[0], 0, 18U * sizeof(real_T));
    proc_control_node_B.alpha_c[0] = proc_control_node_B.d[0];
    proc_control_node_B.b_gamma[0] = proc_control_node_B.e_j[0] /
      proc_control_node_B.d[0];
    proc_control_node_B.delta[0] = proc_control_node_B.f[0] /
      proc_control_node_B.d[0];
    proc_control_node_B.alpha_c[1] = proc_control_node_B.d[1] -
      proc_control_node_B.e_j[0] * proc_control_node_B.b_gamma[0];
    proc_control_node_B.b_gamma[1] = (proc_control_node_B.e_j[1] -
      proc_control_node_B.f[0] * proc_control_node_B.b_gamma[0]) /
      proc_control_node_B.alpha_c[1];
    proc_control_node_B.delta[1] = proc_control_node_B.f[1] /
      proc_control_node_B.alpha_c[1];
    for (proc_control_node_B.i_mz = 0; proc_control_node_B.i_mz < 16;
         proc_control_node_B.i_mz++) {
      proc_control_node_B.alpha_tmp =
        proc_control_node_B.b_gamma[proc_control_node_B.i_mz + 1];
      proc_control_node_B.alpha_c[proc_control_node_B.i_mz + 2] =
        (proc_control_node_B.d[proc_control_node_B.i_mz + 2] -
         proc_control_node_B.f[proc_control_node_B.i_mz] *
         proc_control_node_B.delta[proc_control_node_B.i_mz]) -
        proc_control_node_B.alpha_tmp * proc_control_node_B.alpha_tmp *
        proc_control_node_B.alpha_c[proc_control_node_B.i_mz + 1];
      proc_control_node_B.b_gamma_tmp =
        proc_control_node_B.alpha_c[proc_control_node_B.i_mz + 2];
      proc_control_node_B.b_gamma[proc_control_node_B.i_mz + 2] =
        (proc_control_node_B.e_j[proc_control_node_B.i_mz + 2] -
         proc_control_node_B.f[proc_control_node_B.i_mz + 1] *
         proc_control_node_B.alpha_tmp) / proc_control_node_B.b_gamma_tmp;
      proc_control_node_B.delta[proc_control_node_B.i_mz + 2] =
        proc_control_node_B.f[proc_control_node_B.i_mz + 2] /
        proc_control_node_B.b_gamma_tmp;
    }

    proc_control_node_B.alpha_c[18] = (proc_control_node_B.d[18] -
      proc_control_node_B.f[16] * proc_control_node_B.delta[16]) -
      proc_control_node_B.b_gamma[17] * proc_control_node_B.b_gamma[17] *
      proc_control_node_B.alpha_c[17];
    proc_control_node_B.b_gamma[18] = (proc_control_node_B.e_j[18] -
      proc_control_node_B.f[17] * proc_control_node_B.b_gamma[17]) /
      proc_control_node_B.alpha_c[18];
    proc_control_node_B.alpha_c[19] = (proc_control_node_B.d[19] -
      proc_control_node_B.f[17] * proc_control_node_B.delta[17]) -
      proc_control_node_B.b_gamma[18] * proc_control_node_B.b_gamma[18] *
      proc_control_node_B.alpha_c[18];
    memset(&proc_control_node_B.d[0], 0, 20U * sizeof(real_T));
    proc_control_node_B.d[0] = v[0];
    proc_control_node_B.d[1] = v[1] - proc_control_node_B.b_gamma[0] * v[0];
    for (proc_control_node_B.i_mz = 0; proc_control_node_B.i_mz < 18;
         proc_control_node_B.i_mz++) {
      proc_control_node_B.d[proc_control_node_B.i_mz + 2] =
        (v[proc_control_node_B.i_mz + 2] -
         proc_control_node_B.b_gamma[proc_control_node_B.i_mz + 1] *
         proc_control_node_B.d[proc_control_node_B.i_mz + 1]) -
        proc_control_node_B.delta[proc_control_node_B.i_mz] *
        proc_control_node_B.d[proc_control_node_B.i_mz];
    }

    for (proc_control_node_B.i_mz = 0; proc_control_node_B.i_mz < 20;
         proc_control_node_B.i_mz++) {
      proc_control_node_B.e_j[proc_control_node_B.i_mz] =
        proc_control_node_B.d[proc_control_node_B.i_mz] /
        proc_control_node_B.alpha_c[proc_control_node_B.i_mz];
    }

    dx[19] = proc_control_node_B.e_j[19];
    dx[18] = proc_control_node_B.e_j[18] - proc_control_node_B.b_gamma[18] *
      proc_control_node_B.e_j[19];
    for (proc_control_node_B.i_mz = 0; proc_control_node_B.i_mz < 18;
         proc_control_node_B.i_mz++) {
      dx[17 - proc_control_node_B.i_mz] = (proc_control_node_B.e_j[17 -
        proc_control_node_B.i_mz] - proc_control_node_B.b_gamma[17 -
        proc_control_node_B.i_mz] * dx[18 - proc_control_node_B.i_mz]) -
        proc_control_node_B.delta[17 - proc_control_node_B.i_mz] * dx[19 -
        proc_control_node_B.i_mz];
    }
  } else {
    for (proc_control_node_B.i_mz = 0; proc_control_node_B.i_mz < 80;
         proc_control_node_B.i_mz++) {
      proc_control_node_B.dv3[proc_control_node_B.i_mz] =
        tmp_0[proc_control_node_B.i_mz];
    }

    memcpy(&proc_control_node_B.dv3[80], &v[0], 20U * sizeof(real_T));
    proc_control_nod_sympentdisolve(proc_control_node_B.d,
      proc_control_node_B.e_j, proc_control_node_B.f, proc_control_node_B.dv3,
      proc_control_node_B.zy);
    memset(&proc_control_node_B.v_h[0], 0, 80U * sizeof(real_T));
    proc_control_node_B.v_h[18] = proc_control_node_B.f[18];
    proc_control_node_B.v_h[19] = proc_control_node_B.e_j[19];
    proc_control_node_B.v_h[39] = proc_control_node_B.f[19];
    proc_control_node_B.v_h[40] = proc_control_node_B.f[18];
    proc_control_node_B.v_h[60] = proc_control_node_B.e_j[19];
    proc_control_node_B.v_h[61] = proc_control_node_B.f[19];
    for (proc_control_node_B.i_mz = 0; proc_control_node_B.i_mz < 16;
         proc_control_node_B.i_mz++) {
      proc_control_node_B.b_I_k[proc_control_node_B.i_mz] = 0;
    }

    proc_control_node_B.b_I_k[0] = 1;
    proc_control_node_B.b_I_k[5] = 1;
    proc_control_node_B.b_I_k[10] = 1;
    proc_control_node_B.b_I_k[15] = 1;
    for (proc_control_node_B.i_mz = 0; proc_control_node_B.i_mz < 20;
         proc_control_node_B.i_mz++) {
      proc_control_node_B.dx_tmp_tmp = proc_control_node_B.i_mz << 2;
      proc_control_node_B.dx_tmp[proc_control_node_B.dx_tmp_tmp] =
        proc_control_node_B.v_h[proc_control_node_B.i_mz];
      proc_control_node_B.dx_tmp[proc_control_node_B.dx_tmp_tmp + 1] =
        proc_control_node_B.v_h[proc_control_node_B.i_mz + 20];
      proc_control_node_B.dx_tmp[proc_control_node_B.dx_tmp_tmp + 2] =
        proc_control_node_B.v_h[proc_control_node_B.i_mz + 40];
      proc_control_node_B.dx_tmp[proc_control_node_B.dx_tmp_tmp + 3] =
        proc_control_node_B.v_h[proc_control_node_B.i_mz + 60];
    }

    for (proc_control_node_B.i_mz = 0; proc_control_node_B.i_mz < 4;
         proc_control_node_B.i_mz++) {
      proc_control_node_B.dv21[proc_control_node_B.i_mz] = 0.0;
      for (proc_control_node_B.dx_tmp_tmp = 0; proc_control_node_B.dx_tmp_tmp <
           20; proc_control_node_B.dx_tmp_tmp++) {
        proc_control_node_B.dv21[proc_control_node_B.i_mz] +=
          proc_control_node_B.dx_tmp[(proc_control_node_B.dx_tmp_tmp << 2) +
          proc_control_node_B.i_mz] *
          proc_control_node_B.zy[proc_control_node_B.dx_tmp_tmp + 80];
      }

      for (proc_control_node_B.dx_tmp_tmp = 0; proc_control_node_B.dx_tmp_tmp <
           4; proc_control_node_B.dx_tmp_tmp++) {
        proc_control_node_B.alpha_tmp = 0.0;
        for (proc_control_node_B.b_I_tmp = 0; proc_control_node_B.b_I_tmp < 20;
             proc_control_node_B.b_I_tmp++) {
          proc_control_node_B.alpha_tmp += proc_control_node_B.dx_tmp
            [(proc_control_node_B.b_I_tmp << 2) + proc_control_node_B.i_mz] *
            proc_control_node_B.zy[20 * proc_control_node_B.dx_tmp_tmp +
            proc_control_node_B.b_I_tmp];
        }

        proc_control_node_B.b_I_tmp = (proc_control_node_B.dx_tmp_tmp << 2) +
          proc_control_node_B.i_mz;
        proc_control_node_B.b_I[proc_control_node_B.b_I_tmp] =
          static_cast<real_T>
          (proc_control_node_B.b_I_k[proc_control_node_B.b_I_tmp]) +
          proc_control_node_B.alpha_tmp;
      }
    }

    proc_control_node_mldivide_b4(proc_control_node_B.b_I,
      proc_control_node_B.dv21);
    for (proc_control_node_B.i_mz = 0; proc_control_node_B.i_mz < 20;
         proc_control_node_B.i_mz++) {
      dx[proc_control_node_B.i_mz] =
        proc_control_node_B.zy[proc_control_node_B.i_mz + 80] -
        (((proc_control_node_B.zy[proc_control_node_B.i_mz + 20] *
           proc_control_node_B.dv21[1] +
           proc_control_node_B.zy[proc_control_node_B.i_mz] *
           proc_control_node_B.dv21[0]) +
          proc_control_node_B.zy[proc_control_node_B.i_mz + 40] *
          proc_control_node_B.dv21[2]) +
         proc_control_node_B.zy[proc_control_node_B.i_mz + 60] *
         proc_control_node_B.dv21[3]);
    }
  }
}

static void proc_control_n_cyctridisolve_b4(const real_T a[20], real_T b[20],
  const real_T c[20], real_T d[20])
{
  real_T mu;
  int32_T i;
  proc_control_node_B.b_gamma_n = -b[0];
  b[0] -= -b[0];
  b[19] -= a[19] * c[19] / proc_control_node_B.b_gamma_n;
  memcpy(&proc_control_node_B.z_l[0], &b[0], 20U * sizeof(real_T));
  for (i = 0; i < 19; i++) {
    mu = a[i] / proc_control_node_B.z_l[i];
    proc_control_node_B.z_l[i + 1] -= mu * c[i];
    d[i + 1] -= mu * d[i];
  }

  d[19] /= proc_control_node_B.z_l[19];
  for (i = 0; i < 19; i++) {
    d[18 - i] = (d[18 - i] - c[18 - i] * d[19 - i]) / proc_control_node_B.z_l[18
      - i];
  }

  memset(&proc_control_node_B.z_l[0], 0, 20U * sizeof(real_T));
  proc_control_node_B.z_l[0] = proc_control_node_B.b_gamma_n;
  proc_control_node_B.z_l[19] = c[19];
  memset(&proc_control_node_B.z_l[1], 0, 18U * sizeof(real_T));
  for (i = 0; i < 19; i++) {
    mu = a[i] / b[i];
    b[i + 1] -= mu * c[i];
    proc_control_node_B.z_l[i + 1] -= mu * proc_control_node_B.z_l[i];
  }

  proc_control_node_B.z_l[19] /= b[19];
  for (i = 0; i < 19; i++) {
    proc_control_node_B.z_l[18 - i] = (proc_control_node_B.z_l[18 - i] - c[18 -
      i] * proc_control_node_B.z_l[19 - i]) / b[18 - i];
  }

  proc_control_node_B.b_gamma_n = (a[19] * d[19] / proc_control_node_B.b_gamma_n
    + d[0]) / (a[19] * proc_control_node_B.z_l[19] /
               proc_control_node_B.b_gamma_n + (proc_control_node_B.z_l[0] + 1.0));
  for (i = 0; i < 20; i++) {
    d[i] -= proc_control_node_B.b_gamma_n * proc_control_node_B.z_l[i];
  }
}

static void proc_control_no_solveHessian_b4(const real_T Jtri[60], real_T v[20])
{
  int32_T b_j;
  if ((Jtri[19] == 0.0) && (Jtri[59] == 0.0)) {
    memcpy(&proc_control_node_B.Jtri_j[0], &Jtri[20], 20U * sizeof(real_T));
    for (b_j = 0; b_j < 19; b_j++) {
      proc_control_node_B.mu_j = Jtri[b_j + 40] / proc_control_node_B.Jtri_j[b_j];
      proc_control_node_B.Jtri_j[b_j + 1] -= proc_control_node_B.mu_j * Jtri[b_j];
      v[b_j + 1] -= proc_control_node_B.mu_j * v[b_j];
    }

    v[19] /= proc_control_node_B.Jtri_j[19];
    for (b_j = 0; b_j < 19; b_j++) {
      v[18 - b_j] = (v[18 - b_j] - Jtri[18 - b_j] * v[19 - b_j]) /
        proc_control_node_B.Jtri_j[18 - b_j];
    }

    memcpy(&proc_control_node_B.Jtri_j[0], &Jtri[20], 20U * sizeof(real_T));
    for (b_j = 0; b_j < 19; b_j++) {
      proc_control_node_B.mu_j = Jtri[b_j] / proc_control_node_B.Jtri_j[b_j];
      proc_control_node_B.Jtri_j[b_j + 1] -= Jtri[b_j + 40] *
        proc_control_node_B.mu_j;
      v[b_j + 1] -= proc_control_node_B.mu_j * v[b_j];
    }

    v[19] /= proc_control_node_B.Jtri_j[19];
    for (b_j = 0; b_j < 19; b_j++) {
      v[18 - b_j] = (v[18 - b_j] - Jtri[58 - b_j] * v[19 - b_j]) /
        proc_control_node_B.Jtri_j[18 - b_j];
    }
  } else {
    memcpy(&proc_control_node_B.Jtri_j[0], &(*(real_T (*)[20])&Jtri[20])[0], 20U
           * sizeof(real_T));
    proc_control_n_cyctridisolve_b4(&Jtri[40], proc_control_node_B.Jtri_j,
      &Jtri[0], v);
    memcpy(&proc_control_node_B.Jtri_j[0], &(*(real_T (*)[20])&Jtri[20])[0], 20U
           * sizeof(real_T));
    proc_control_n_cyctridisolve_b4(&Jtri[0], proc_control_node_B.Jtri_j, &Jtri
      [40], v);
  }
}

static void proc_control_node_accumarray(const real_T val[58], real_T A[400])
{
  int32_T b_k;
  int32_T i;
  static const int8_T tmp[116] = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14,
    15, 16, 17, 18, 19, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16,
    17, 18, 19, 20, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18,
    19, 20, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
    1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 1, 2,
    3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19 };

  const int8_T *subs;
  subs = &tmp[0];
  for (i = 0; i < 400; i++) {
    proc_control_node_B.filled[i] = true;
    A[i] = 0.0;
  }

  for (b_k = 0; b_k < 58; b_k++) {
    i = ((subs[b_k + 58] - 1) * 20 + subs[b_k]) - 1;
    if (proc_control_node_B.filled[i]) {
      proc_control_node_B.filled[i] = false;
      A[i] = val[b_k];
    } else {
      A[i] += val[b_k];
    }
  }
}

static void proc_control_node_xzggbal(const creal_T A[400], creal_T b_A[400],
  int32_T *ilo, int32_T *ihi, int32_T rscale[20])
{
  int32_T atmp_re_tmp;
  int32_T b_jj;
  int32_T exitg1;
  int32_T exitg2;
  int32_T i;
  int32_T nzcount;
  boolean_T exitg3;
  boolean_T exitg4;
  boolean_T found;
  memcpy(&b_A[0], &A[0], 400U * sizeof(creal_T));
  for (i = 0; i < 20; i++) {
    rscale[i] = 1;
  }

  *ilo = 1;
  *ihi = 20;
  do {
    exitg2 = 0;
    i = -1;
    proc_control_node_B.j_hl = 0;
    found = false;
    proc_control_node_B.ii_k = *ihi;
    exitg3 = false;
    while ((!exitg3) && (proc_control_node_B.ii_k > 0)) {
      nzcount = 0;
      i = proc_control_node_B.ii_k - 1;
      proc_control_node_B.j_hl = *ihi;
      b_jj = 1;
      exitg4 = false;
      while ((!exitg4) && (b_jj - 1 <= *ihi - 1)) {
        atmp_re_tmp = ((b_jj - 1) * 20 + proc_control_node_B.ii_k) - 1;
        if ((b_A[atmp_re_tmp].re != 0.0) || (b_A[atmp_re_tmp].im != 0.0) ||
            (proc_control_node_B.ii_k == b_jj)) {
          if (nzcount == 0) {
            proc_control_node_B.j_hl = b_jj;
            nzcount = 1;
            b_jj++;
          } else {
            nzcount = 2;
            exitg4 = true;
          }
        } else {
          b_jj++;
        }
      }

      if (nzcount < 2) {
        found = true;
        exitg3 = true;
      } else {
        proc_control_node_B.ii_k--;
      }
    }

    if (!found) {
      exitg2 = 2;
    } else {
      if (i + 1 != *ihi) {
        for (proc_control_node_B.ii_k = 1; proc_control_node_B.ii_k < 21;
             proc_control_node_B.ii_k++) {
          nzcount = (proc_control_node_B.ii_k - 1) * 20;
          atmp_re_tmp = nzcount + i;
          proc_control_node_B.atmp_re_c = b_A[atmp_re_tmp].re;
          proc_control_node_B.atmp_im_n = b_A[atmp_re_tmp].im;
          nzcount = (nzcount + *ihi) - 1;
          b_A[atmp_re_tmp] = b_A[nzcount];
          b_A[nzcount].re = proc_control_node_B.atmp_re_c;
          b_A[nzcount].im = proc_control_node_B.atmp_im_n;
        }
      }

      if (proc_control_node_B.j_hl != *ihi) {
        for (i = 0; i < *ihi; i++) {
          atmp_re_tmp = (proc_control_node_B.j_hl - 1) * 20 + i;
          proc_control_node_B.atmp_re_c = b_A[atmp_re_tmp].re;
          proc_control_node_B.atmp_im_n = b_A[atmp_re_tmp].im;
          nzcount = (*ihi - 1) * 20 + i;
          b_A[atmp_re_tmp] = b_A[nzcount];
          b_A[nzcount].re = proc_control_node_B.atmp_re_c;
          b_A[nzcount].im = proc_control_node_B.atmp_im_n;
        }
      }

      rscale[*ihi - 1] = proc_control_node_B.j_hl;
      (*ihi)--;
      if (*ihi == 1) {
        rscale[0] = 1;
        exitg2 = 1;
      }
    }
  } while (exitg2 == 0);

  if (exitg2 == 1) {
  } else {
    do {
      exitg1 = 0;
      i = 0;
      proc_control_node_B.j_hl = 0;
      found = false;
      b_jj = *ilo;
      exitg3 = false;
      while ((!exitg3) && (b_jj <= *ihi)) {
        nzcount = 0;
        i = *ihi;
        proc_control_node_B.j_hl = b_jj;
        proc_control_node_B.ii_k = *ilo;
        exitg4 = false;
        while ((!exitg4) && (proc_control_node_B.ii_k <= *ihi)) {
          atmp_re_tmp = ((b_jj - 1) * 20 + proc_control_node_B.ii_k) - 1;
          if ((b_A[atmp_re_tmp].re != 0.0) || (b_A[atmp_re_tmp].im != 0.0) ||
              (proc_control_node_B.ii_k == b_jj)) {
            if (nzcount == 0) {
              i = proc_control_node_B.ii_k;
              nzcount = 1;
              proc_control_node_B.ii_k++;
            } else {
              nzcount = 2;
              exitg4 = true;
            }
          } else {
            proc_control_node_B.ii_k++;
          }
        }

        if (nzcount < 2) {
          found = true;
          exitg3 = true;
        } else {
          b_jj++;
        }
      }

      if (!found) {
        exitg1 = 1;
      } else {
        if (i != *ilo) {
          for (proc_control_node_B.ii_k = *ilo; proc_control_node_B.ii_k < 21;
               proc_control_node_B.ii_k++) {
            nzcount = (proc_control_node_B.ii_k - 1) * 20;
            atmp_re_tmp = (nzcount + i) - 1;
            proc_control_node_B.atmp_re_c = b_A[atmp_re_tmp].re;
            proc_control_node_B.atmp_im_n = b_A[atmp_re_tmp].im;
            nzcount = (nzcount + *ilo) - 1;
            b_A[atmp_re_tmp] = b_A[nzcount];
            b_A[nzcount].re = proc_control_node_B.atmp_re_c;
            b_A[nzcount].im = proc_control_node_B.atmp_im_n;
          }
        }

        if (proc_control_node_B.j_hl != *ilo) {
          for (i = 0; i < *ihi; i++) {
            atmp_re_tmp = (proc_control_node_B.j_hl - 1) * 20 + i;
            proc_control_node_B.atmp_re_c = b_A[atmp_re_tmp].re;
            proc_control_node_B.atmp_im_n = b_A[atmp_re_tmp].im;
            nzcount = (*ilo - 1) * 20 + i;
            b_A[atmp_re_tmp] = b_A[nzcount];
            b_A[nzcount].re = proc_control_node_B.atmp_re_c;
            b_A[nzcount].im = proc_control_node_B.atmp_im_n;
          }
        }

        rscale[*ilo - 1] = proc_control_node_B.j_hl;
        (*ilo)++;
        if (*ilo == *ihi) {
          rscale[*ilo - 1] = *ilo;
          exitg1 = 1;
        }
      }
    } while (exitg1 == 0);
  }
}

static void proc_control_node_xzgghrd(int32_T ilo, int32_T ihi, const creal_T A
  [400], creal_T b_A[400])
{
  int32_T stemp_re_tmp;
  int32_T stemp_re_tmp_tmp;
  memcpy(&b_A[0], &A[0], 400U * sizeof(creal_T));
  if (ihi >= ilo + 2) {
    proc_control_node_B.jcol_k = ilo - 1;
    while (proc_control_node_B.jcol_k + 1 < ihi - 1) {
      proc_control_node_B.jrow_j = ihi - 2;
      while (proc_control_node_B.jrow_j + 2 > proc_control_node_B.jcol_k + 2) {
        proc_control_node_xzlartg(b_A[proc_control_node_B.jrow_j + 20 *
          proc_control_node_B.jcol_k], b_A[(proc_control_node_B.jrow_j + 20 *
          proc_control_node_B.jcol_k) + 1], &proc_control_node_B.c_ar,
          &proc_control_node_B.s_b, &b_A[proc_control_node_B.jrow_j + 20 *
          proc_control_node_B.jcol_k]);
        proc_control_node_B.j_b = (proc_control_node_B.jrow_j + 20 *
          proc_control_node_B.jcol_k) + 1;
        b_A[proc_control_node_B.j_b].re = 0.0;
        b_A[proc_control_node_B.j_b].im = 0.0;
        for (proc_control_node_B.j_b = proc_control_node_B.jcol_k + 2;
             proc_control_node_B.j_b < 21; proc_control_node_B.j_b++) {
          stemp_re_tmp_tmp = (proc_control_node_B.j_b - 1) * 20 +
            proc_control_node_B.jrow_j;
          proc_control_node_B.stemp_re_k = (b_A[stemp_re_tmp_tmp + 1].re *
            proc_control_node_B.s_b.re - b_A[stemp_re_tmp_tmp + 1].im *
            proc_control_node_B.s_b.im) + b_A[stemp_re_tmp_tmp].re *
            proc_control_node_B.c_ar;
          proc_control_node_B.stemp_im_f = (b_A[stemp_re_tmp_tmp + 1].im *
            proc_control_node_B.s_b.re + b_A[stemp_re_tmp_tmp + 1].re *
            proc_control_node_B.s_b.im) + b_A[stemp_re_tmp_tmp].im *
            proc_control_node_B.c_ar;
          proc_control_node_B.d7 = b_A[stemp_re_tmp_tmp].re;
          b_A[stemp_re_tmp_tmp + 1].re = b_A[stemp_re_tmp_tmp + 1].re *
            proc_control_node_B.c_ar - (b_A[stemp_re_tmp_tmp].re *
            proc_control_node_B.s_b.re + b_A[stemp_re_tmp_tmp].im *
            proc_control_node_B.s_b.im);
          b_A[stemp_re_tmp_tmp + 1].im = b_A[stemp_re_tmp_tmp + 1].im *
            proc_control_node_B.c_ar - (b_A[stemp_re_tmp_tmp].im *
            proc_control_node_B.s_b.re - proc_control_node_B.s_b.im *
            proc_control_node_B.d7);
          b_A[stemp_re_tmp_tmp].re = proc_control_node_B.stemp_re_k;
          b_A[stemp_re_tmp_tmp].im = proc_control_node_B.stemp_im_f;
        }

        proc_control_node_B.s_b.re = -proc_control_node_B.s_b.re;
        proc_control_node_B.s_b.im = -proc_control_node_B.s_b.im;
        for (proc_control_node_B.j_b = 1; proc_control_node_B.j_b <= ihi;
             proc_control_node_B.j_b++) {
          stemp_re_tmp_tmp = (20 * proc_control_node_B.jrow_j +
                              proc_control_node_B.j_b) - 1;
          stemp_re_tmp = ((proc_control_node_B.jrow_j + 1) * 20 +
                          proc_control_node_B.j_b) - 1;
          proc_control_node_B.stemp_re_k = b_A[stemp_re_tmp].re *
            proc_control_node_B.c_ar + (b_A[stemp_re_tmp_tmp].re *
            proc_control_node_B.s_b.re - b_A[stemp_re_tmp_tmp].im *
            proc_control_node_B.s_b.im);
          proc_control_node_B.stemp_im_f = b_A[stemp_re_tmp].im *
            proc_control_node_B.c_ar + (b_A[stemp_re_tmp_tmp].im *
            proc_control_node_B.s_b.re + b_A[stemp_re_tmp_tmp].re *
            proc_control_node_B.s_b.im);
          proc_control_node_B.d7 = b_A[stemp_re_tmp].re;
          b_A[stemp_re_tmp_tmp].re = b_A[stemp_re_tmp_tmp].re *
            proc_control_node_B.c_ar - (b_A[stemp_re_tmp].re *
            proc_control_node_B.s_b.re + b_A[stemp_re_tmp].im *
            proc_control_node_B.s_b.im);
          b_A[stemp_re_tmp_tmp].im = b_A[stemp_re_tmp_tmp].im *
            proc_control_node_B.c_ar - (b_A[stemp_re_tmp].im *
            proc_control_node_B.s_b.re - proc_control_node_B.s_b.im *
            proc_control_node_B.d7);
          b_A[stemp_re_tmp].re = proc_control_node_B.stemp_re_k;
          b_A[stemp_re_tmp].im = proc_control_node_B.stemp_im_f;
        }

        proc_control_node_B.jrow_j--;
      }

      proc_control_node_B.jcol_k++;
    }
  }
}

static void proc_control_node_xzhgeqz(const creal_T A[400], int32_T ilo, int32_T
  ihi, int32_T *info, creal_T alpha1[20], creal_T beta1[20])
{
  int32_T col;
  int32_T exitg1;
  int32_T i;
  int32_T t1_re_tmp;
  boolean_T exitg2;
  boolean_T failed;
  boolean_T goto60;
  boolean_T goto70;
  boolean_T goto90;
  boolean_T guard1 = false;
  boolean_T guard11 = false;
  boolean_T guard2 = false;
  boolean_T guard3 = false;
  memcpy(&proc_control_node_B.b_A[0], &A[0], 400U * sizeof(creal_T));
  *info = 0;
  for (i = 0; i < 20; i++) {
    alpha1[i].re = 0.0;
    alpha1[i].im = 0.0;
    beta1[i].re = 1.0;
    beta1[i].im = 0.0;
  }

  proc_control_node_B.eshift_re_e = 0.0;
  proc_control_node_B.eshift_im_i = 0.0;
  proc_control_node_B.ctemp_n.re = 0.0;
  proc_control_node_B.ctemp_n.im = 0.0;
  proc_control_node_B.anorm_a = 0.0;
  if (ilo <= ihi) {
    proc_control_node_B.scale_h = 3.3121686421112381E-170;
    proc_control_node_B.anorm_a = 0.0;
    proc_control_node_B.nm1_k = ihi - ilo;
    for (proc_control_node_B.ifirst = 0; proc_control_node_B.ifirst <=
         proc_control_node_B.nm1_k; proc_control_node_B.ifirst++) {
      proc_control_node_B.colscale_e = 3.3121686421112381E-170;
      proc_control_node_B.colssq_n = 0.0;
      col = (ilo + proc_control_node_B.ifirst) - 1;
      if (proc_control_node_B.ifirst + 1 < proc_control_node_B.nm1_k) {
        proc_control_node_B.ilastm1 = proc_control_node_B.ifirst + 1;
      } else {
        proc_control_node_B.ilastm1 = proc_control_node_B.nm1_k;
      }

      proc_control_node_B.ilastm1 += ilo;
      for (proc_control_node_B.ilastm_e = ilo; proc_control_node_B.ilastm_e <=
           proc_control_node_B.ilastm1; proc_control_node_B.ilastm_e++) {
        proc_control_node_B.iiter_p = (20 * col + proc_control_node_B.ilastm_e)
          - 1;
        proc_control_node_B.absxk_hg = fabs(A[proc_control_node_B.iiter_p].re);
        if (proc_control_node_B.absxk_hg > proc_control_node_B.colscale_e) {
          proc_control_node_B.t_oc = proc_control_node_B.colscale_e /
            proc_control_node_B.absxk_hg;
          proc_control_node_B.colssq_n = proc_control_node_B.colssq_n *
            proc_control_node_B.t_oc * proc_control_node_B.t_oc + 1.0;
          proc_control_node_B.colscale_e = proc_control_node_B.absxk_hg;
        } else {
          proc_control_node_B.t_oc = proc_control_node_B.absxk_hg /
            proc_control_node_B.colscale_e;
          proc_control_node_B.colssq_n += proc_control_node_B.t_oc *
            proc_control_node_B.t_oc;
        }

        proc_control_node_B.absxk_hg = fabs(A[proc_control_node_B.iiter_p].im);
        if (proc_control_node_B.absxk_hg > proc_control_node_B.colscale_e) {
          proc_control_node_B.t_oc = proc_control_node_B.colscale_e /
            proc_control_node_B.absxk_hg;
          proc_control_node_B.colssq_n = proc_control_node_B.colssq_n *
            proc_control_node_B.t_oc * proc_control_node_B.t_oc + 1.0;
          proc_control_node_B.colscale_e = proc_control_node_B.absxk_hg;
        } else {
          proc_control_node_B.t_oc = proc_control_node_B.absxk_hg /
            proc_control_node_B.colscale_e;
          proc_control_node_B.colssq_n += proc_control_node_B.t_oc *
            proc_control_node_B.t_oc;
        }
      }

      if (proc_control_node_B.scale_h >= proc_control_node_B.colscale_e) {
        proc_control_node_B.absxk_hg = proc_control_node_B.colscale_e /
          proc_control_node_B.scale_h;
        proc_control_node_B.anorm_a += proc_control_node_B.absxk_hg *
          proc_control_node_B.absxk_hg * proc_control_node_B.colssq_n;
      } else {
        proc_control_node_B.absxk_hg = proc_control_node_B.scale_h /
          proc_control_node_B.colscale_e;
        proc_control_node_B.anorm_a = proc_control_node_B.absxk_hg *
          proc_control_node_B.absxk_hg * proc_control_node_B.anorm_a +
          proc_control_node_B.colssq_n;
        proc_control_node_B.scale_h = proc_control_node_B.colscale_e;
      }
    }

    proc_control_node_B.anorm_a = proc_control_node_B.scale_h * sqrt
      (proc_control_node_B.anorm_a);
  }

  proc_control_node_B.colscale_e = 2.2204460492503131E-16 *
    proc_control_node_B.anorm_a;
  proc_control_node_B.scale_h = 2.2250738585072014E-308;
  if (proc_control_node_B.colscale_e > 2.2250738585072014E-308) {
    proc_control_node_B.scale_h = proc_control_node_B.colscale_e;
  }

  proc_control_node_B.colscale_e = 2.2250738585072014E-308;
  if (proc_control_node_B.anorm_a > 2.2250738585072014E-308) {
    proc_control_node_B.colscale_e = proc_control_node_B.anorm_a;
  }

  proc_control_node_B.anorm_a = 1.0 / proc_control_node_B.colscale_e;
  failed = true;
  for (proc_control_node_B.ifirst = ihi + 1; proc_control_node_B.ifirst < 21;
       proc_control_node_B.ifirst++) {
    alpha1[proc_control_node_B.ifirst - 1] = A[((proc_control_node_B.ifirst - 1)
      * 20 + proc_control_node_B.ifirst) - 1];
  }

  guard1 = false;
  guard2 = false;
  if (ihi >= ilo) {
    proc_control_node_B.ifirst = ilo;
    col = ilo;
    proc_control_node_B.nm1_k = ihi - 1;
    proc_control_node_B.ilastm1 = ihi - 2;
    proc_control_node_B.ilastm_e = ihi;
    proc_control_node_B.iiter_p = 0;
    goto60 = false;
    goto70 = false;
    goto90 = false;
    proc_control_node_B.jiter_f = 0;
    do {
      exitg1 = 0;
      if (proc_control_node_B.jiter_f <= ((ihi - ilo) + 1) * 30 - 1) {
        guard11 = false;
        if (proc_control_node_B.nm1_k + 1 == ilo) {
          goto60 = true;
          guard11 = true;
        } else {
          proc_control_node_B.jp1_n = 20 * proc_control_node_B.ilastm1 +
            proc_control_node_B.nm1_k;
          if (fabs(proc_control_node_B.b_A[proc_control_node_B.jp1_n].re) + fabs
              (proc_control_node_B.b_A[proc_control_node_B.jp1_n].im) <=
              proc_control_node_B.scale_h) {
            proc_control_node_B.b_A[proc_control_node_B.jp1_n].re = 0.0;
            proc_control_node_B.b_A[proc_control_node_B.jp1_n].im = 0.0;
            goto60 = true;
            guard11 = true;
          } else {
            proc_control_node_B.j_e = proc_control_node_B.ilastm1 + 1;
            guard3 = false;
            exitg2 = false;
            while ((!exitg2) && (proc_control_node_B.j_e >= ilo)) {
              if (proc_control_node_B.j_e == ilo) {
                guard3 = true;
                exitg2 = true;
              } else {
                proc_control_node_B.jp1_n = ((proc_control_node_B.j_e - 2) * 20
                  + proc_control_node_B.j_e) - 1;
                if (fabs(proc_control_node_B.b_A[proc_control_node_B.jp1_n].re)
                    + fabs(proc_control_node_B.b_A[proc_control_node_B.jp1_n].im)
                    <= proc_control_node_B.scale_h) {
                  proc_control_node_B.b_A[proc_control_node_B.jp1_n].re = 0.0;
                  proc_control_node_B.b_A[proc_control_node_B.jp1_n].im = 0.0;
                  guard3 = true;
                  exitg2 = true;
                } else {
                  proc_control_node_B.j_e--;
                  guard3 = false;
                }
              }
            }

            if (guard3) {
              proc_control_node_B.ifirst = proc_control_node_B.j_e;
              goto70 = true;
            }

            if (goto70) {
              guard11 = true;
            } else {
              for (i = 0; i < 20; i++) {
                alpha1[i].re = (rtNaN);
                alpha1[i].im = 0.0;
                beta1[i].re = (rtNaN);
                beta1[i].im = 0.0;
              }

              *info = 1;
              exitg1 = 1;
            }
          }
        }

        if (guard11) {
          if (goto60) {
            goto60 = false;
            alpha1[proc_control_node_B.nm1_k] = proc_control_node_B.b_A[20 *
              proc_control_node_B.nm1_k + proc_control_node_B.nm1_k];
            proc_control_node_B.nm1_k = proc_control_node_B.ilastm1;
            proc_control_node_B.ilastm1--;
            if (proc_control_node_B.nm1_k + 1 < ilo) {
              failed = false;
              guard2 = true;
              exitg1 = 1;
            } else {
              proc_control_node_B.iiter_p = 0;
              proc_control_node_B.eshift_re_e = 0.0;
              proc_control_node_B.eshift_im_i = 0.0;
              proc_control_node_B.ilastm_e = proc_control_node_B.nm1_k + 1;
              proc_control_node_B.jiter_f++;
            }
          } else {
            if (goto70) {
              goto70 = false;
              proc_control_node_B.iiter_p++;
              if (proc_control_node_B.iiter_p - div_nzp_s32
                  (proc_control_node_B.iiter_p, 10) * 10 != 0) {
                proc_control_node_B.j_e = 20 * proc_control_node_B.ilastm1 +
                  proc_control_node_B.ilastm1;
                proc_control_node_B.ar_f =
                  proc_control_node_B.b_A[proc_control_node_B.j_e].re *
                  proc_control_node_B.anorm_a;
                proc_control_node_B.ai_k1 =
                  proc_control_node_B.b_A[proc_control_node_B.j_e].im *
                  proc_control_node_B.anorm_a;
                if (proc_control_node_B.ai_k1 == 0.0) {
                  proc_control_node_B.ad11_c.re = proc_control_node_B.ar_f /
                    0.22360679774997896;
                  proc_control_node_B.ad11_c.im = 0.0;
                } else if (proc_control_node_B.ar_f == 0.0) {
                  proc_control_node_B.ad11_c.re = 0.0;
                  proc_control_node_B.ad11_c.im = proc_control_node_B.ai_k1 /
                    0.22360679774997896;
                } else {
                  proc_control_node_B.ad11_c.re = proc_control_node_B.ar_f /
                    0.22360679774997896;
                  proc_control_node_B.ad11_c.im = proc_control_node_B.ai_k1 /
                    0.22360679774997896;
                }

                proc_control_node_B.j_e = 20 * proc_control_node_B.nm1_k +
                  proc_control_node_B.nm1_k;
                proc_control_node_B.ar_f =
                  proc_control_node_B.b_A[proc_control_node_B.j_e].re *
                  proc_control_node_B.anorm_a;
                proc_control_node_B.ai_k1 =
                  proc_control_node_B.b_A[proc_control_node_B.j_e].im *
                  proc_control_node_B.anorm_a;
                if (proc_control_node_B.ai_k1 == 0.0) {
                  proc_control_node_B.shift_d.re = proc_control_node_B.ar_f /
                    0.22360679774997896;
                  proc_control_node_B.shift_d.im = 0.0;
                } else if (proc_control_node_B.ar_f == 0.0) {
                  proc_control_node_B.shift_d.re = 0.0;
                  proc_control_node_B.shift_d.im = proc_control_node_B.ai_k1 /
                    0.22360679774997896;
                } else {
                  proc_control_node_B.shift_d.re = proc_control_node_B.ar_f /
                    0.22360679774997896;
                  proc_control_node_B.shift_d.im = proc_control_node_B.ai_k1 /
                    0.22360679774997896;
                }

                proc_control_node_B.colscale_e = (proc_control_node_B.ad11_c.re
                  + proc_control_node_B.shift_d.re) * 0.5;
                proc_control_node_B.colssq_n = (proc_control_node_B.ad11_c.im +
                  proc_control_node_B.shift_d.im) * 0.5;
                proc_control_node_B.j_e = 20 * proc_control_node_B.nm1_k +
                  proc_control_node_B.ilastm1;
                proc_control_node_B.ar_f =
                  proc_control_node_B.b_A[proc_control_node_B.j_e].re *
                  proc_control_node_B.anorm_a;
                proc_control_node_B.ai_k1 =
                  proc_control_node_B.b_A[proc_control_node_B.j_e].im *
                  proc_control_node_B.anorm_a;
                if (proc_control_node_B.ai_k1 == 0.0) {
                  proc_control_node_B.absxk_hg = proc_control_node_B.ar_f /
                    0.22360679774997896;
                  proc_control_node_B.t_oc = 0.0;
                } else if (proc_control_node_B.ar_f == 0.0) {
                  proc_control_node_B.absxk_hg = 0.0;
                  proc_control_node_B.t_oc = proc_control_node_B.ai_k1 /
                    0.22360679774997896;
                } else {
                  proc_control_node_B.absxk_hg = proc_control_node_B.ar_f /
                    0.22360679774997896;
                  proc_control_node_B.t_oc = proc_control_node_B.ai_k1 /
                    0.22360679774997896;
                }

                proc_control_node_B.j_e = 20 * proc_control_node_B.ilastm1 +
                  proc_control_node_B.nm1_k;
                proc_control_node_B.ar_f =
                  proc_control_node_B.b_A[proc_control_node_B.j_e].re *
                  proc_control_node_B.anorm_a;
                proc_control_node_B.ai_k1 =
                  proc_control_node_B.b_A[proc_control_node_B.j_e].im *
                  proc_control_node_B.anorm_a;
                if (proc_control_node_B.ai_k1 == 0.0) {
                  proc_control_node_B.ar_f /= 0.22360679774997896;
                  proc_control_node_B.ai_k1 = 0.0;
                } else if (proc_control_node_B.ar_f == 0.0) {
                  proc_control_node_B.ar_f = 0.0;
                  proc_control_node_B.ai_k1 /= 0.22360679774997896;
                } else {
                  proc_control_node_B.ar_f /= 0.22360679774997896;
                  proc_control_node_B.ai_k1 /= 0.22360679774997896;
                }

                proc_control_node_B.t1_g.re = ((proc_control_node_B.colscale_e *
                  proc_control_node_B.colscale_e - proc_control_node_B.colssq_n *
                  proc_control_node_B.colssq_n) + (proc_control_node_B.absxk_hg *
                  proc_control_node_B.ar_f - proc_control_node_B.t_oc *
                  proc_control_node_B.ai_k1)) - (proc_control_node_B.ad11_c.re *
                  proc_control_node_B.shift_d.re - proc_control_node_B.ad11_c.im
                  * proc_control_node_B.shift_d.im);
                proc_control_node_B.t1_tmp_o = proc_control_node_B.colscale_e *
                  proc_control_node_B.colssq_n;
                proc_control_node_B.t1_g.im = ((proc_control_node_B.t1_tmp_o +
                  proc_control_node_B.t1_tmp_o) + (proc_control_node_B.absxk_hg *
                  proc_control_node_B.ai_k1 + proc_control_node_B.t_oc *
                  proc_control_node_B.ar_f)) - (proc_control_node_B.ad11_c.re *
                  proc_control_node_B.shift_d.im + proc_control_node_B.ad11_c.im
                  * proc_control_node_B.shift_d.re);
                proc_control_node_B.ad11_c = proc_control_node_sqrt
                  (proc_control_node_B.t1_g);
                if ((proc_control_node_B.colscale_e -
                     proc_control_node_B.shift_d.re) *
                    proc_control_node_B.ad11_c.re +
                    (proc_control_node_B.colssq_n -
                     proc_control_node_B.shift_d.im) *
                    proc_control_node_B.ad11_c.im <= 0.0) {
                  proc_control_node_B.shift_d.re =
                    proc_control_node_B.colscale_e +
                    proc_control_node_B.ad11_c.re;
                  proc_control_node_B.shift_d.im = proc_control_node_B.colssq_n
                    + proc_control_node_B.ad11_c.im;
                } else {
                  proc_control_node_B.shift_d.re =
                    proc_control_node_B.colscale_e -
                    proc_control_node_B.ad11_c.re;
                  proc_control_node_B.shift_d.im = proc_control_node_B.colssq_n
                    - proc_control_node_B.ad11_c.im;
                }
              } else {
                proc_control_node_B.j_e = 20 * proc_control_node_B.ilastm1 +
                  proc_control_node_B.nm1_k;
                proc_control_node_B.ar_f =
                  proc_control_node_B.b_A[proc_control_node_B.j_e].re *
                  proc_control_node_B.anorm_a;
                proc_control_node_B.ai_k1 =
                  proc_control_node_B.b_A[proc_control_node_B.j_e].im *
                  proc_control_node_B.anorm_a;
                if (proc_control_node_B.ai_k1 == 0.0) {
                  proc_control_node_B.absxk_hg = proc_control_node_B.ar_f /
                    0.22360679774997896;
                  proc_control_node_B.t_oc = 0.0;
                } else if (proc_control_node_B.ar_f == 0.0) {
                  proc_control_node_B.absxk_hg = 0.0;
                  proc_control_node_B.t_oc = proc_control_node_B.ai_k1 /
                    0.22360679774997896;
                } else {
                  proc_control_node_B.absxk_hg = proc_control_node_B.ar_f /
                    0.22360679774997896;
                  proc_control_node_B.t_oc = proc_control_node_B.ai_k1 /
                    0.22360679774997896;
                }

                proc_control_node_B.eshift_re_e += proc_control_node_B.absxk_hg;
                proc_control_node_B.eshift_im_i += proc_control_node_B.t_oc;
                proc_control_node_B.shift_d.re = proc_control_node_B.eshift_re_e;
                proc_control_node_B.shift_d.im = proc_control_node_B.eshift_im_i;
              }

              proc_control_node_B.j_e = proc_control_node_B.ilastm1;
              proc_control_node_B.jp1_n = proc_control_node_B.ilastm1 + 1;
              exitg2 = false;
              while ((!exitg2) && (proc_control_node_B.j_e + 1 >
                                   proc_control_node_B.ifirst)) {
                col = proc_control_node_B.j_e + 1;
                i = 20 * proc_control_node_B.j_e + proc_control_node_B.j_e;
                proc_control_node_B.ctemp_n.re = proc_control_node_B.b_A[i].re *
                  proc_control_node_B.anorm_a - proc_control_node_B.shift_d.re *
                  0.22360679774997896;
                proc_control_node_B.ctemp_n.im = proc_control_node_B.b_A[i].im *
                  proc_control_node_B.anorm_a - proc_control_node_B.shift_d.im *
                  0.22360679774997896;
                proc_control_node_B.colscale_e = fabs
                  (proc_control_node_B.ctemp_n.re) + fabs
                  (proc_control_node_B.ctemp_n.im);
                proc_control_node_B.jp1_n += 20 * proc_control_node_B.j_e;
                proc_control_node_B.colssq_n = (fabs
                  (proc_control_node_B.b_A[proc_control_node_B.jp1_n].re) + fabs
                  (proc_control_node_B.b_A[proc_control_node_B.jp1_n].im)) *
                  proc_control_node_B.anorm_a;
                proc_control_node_B.absxk_hg = proc_control_node_B.colscale_e;
                if (proc_control_node_B.colssq_n >
                    proc_control_node_B.colscale_e) {
                  proc_control_node_B.absxk_hg = proc_control_node_B.colssq_n;
                }

                if ((proc_control_node_B.absxk_hg < 1.0) &&
                    (proc_control_node_B.absxk_hg != 0.0)) {
                  proc_control_node_B.colscale_e /= proc_control_node_B.absxk_hg;
                  proc_control_node_B.colssq_n /= proc_control_node_B.absxk_hg;
                }

                proc_control_node_B.jp1_n = (proc_control_node_B.j_e - 1) * 20 +
                  proc_control_node_B.j_e;
                if ((fabs(proc_control_node_B.b_A[proc_control_node_B.jp1_n].re)
                     + fabs(proc_control_node_B.b_A[proc_control_node_B.jp1_n].
                            im)) * proc_control_node_B.colssq_n <=
                    proc_control_node_B.colscale_e * proc_control_node_B.scale_h)
                {
                  goto90 = true;
                  exitg2 = true;
                } else {
                  proc_control_node_B.jp1_n = proc_control_node_B.j_e;
                  proc_control_node_B.j_e--;
                }
              }

              if (!goto90) {
                col = proc_control_node_B.ifirst;
                i = ((proc_control_node_B.ifirst - 1) * 20 +
                     proc_control_node_B.ifirst) - 1;
                proc_control_node_B.ctemp_n.re = proc_control_node_B.b_A[i].re *
                  proc_control_node_B.anorm_a - proc_control_node_B.shift_d.re *
                  0.22360679774997896;
                proc_control_node_B.ctemp_n.im = proc_control_node_B.b_A[i].im *
                  proc_control_node_B.anorm_a - proc_control_node_B.shift_d.im *
                  0.22360679774997896;
              }

              goto90 = false;
              proc_control_node_B.j_e = (col - 1) * 20 + col;
              proc_control_node_B.ascale_n.re =
                proc_control_node_B.b_A[proc_control_node_B.j_e].re *
                proc_control_node_B.anorm_a;
              proc_control_node_B.ascale_n.im =
                proc_control_node_B.b_A[proc_control_node_B.j_e].im *
                proc_control_node_B.anorm_a;
              proc_control_node_xzlartg_b(proc_control_node_B.ctemp_n,
                proc_control_node_B.ascale_n, &proc_control_node_B.absxk_hg,
                &proc_control_node_B.shift_d);
              proc_control_node_B.j_e = col;
              proc_control_node_B.jp1_n = col - 2;
              while (proc_control_node_B.j_e < proc_control_node_B.nm1_k + 1) {
                if (proc_control_node_B.j_e > col) {
                  proc_control_node_xzlartg(proc_control_node_B.b_A
                    [(proc_control_node_B.j_e + 20 * proc_control_node_B.jp1_n)
                    - 1], proc_control_node_B.b_A[proc_control_node_B.j_e + 20 *
                    proc_control_node_B.jp1_n], &proc_control_node_B.absxk_hg,
                    &proc_control_node_B.shift_d, &proc_control_node_B.b_A
                    [(proc_control_node_B.j_e + 20 * proc_control_node_B.jp1_n)
                    - 1]);
                  proc_control_node_B.jp1_n = proc_control_node_B.j_e + 20 *
                    proc_control_node_B.jp1_n;
                  proc_control_node_B.b_A[proc_control_node_B.jp1_n].re = 0.0;
                  proc_control_node_B.b_A[proc_control_node_B.jp1_n].im = 0.0;
                }

                for (i = proc_control_node_B.j_e; i <=
                     proc_control_node_B.ilastm_e; i++) {
                  proc_control_node_B.jp1_n = (i - 1) * 20 +
                    proc_control_node_B.j_e;
                  proc_control_node_B.colscale_e =
                    proc_control_node_B.b_A[proc_control_node_B.jp1_n - 1].re *
                    proc_control_node_B.absxk_hg +
                    (proc_control_node_B.b_A[proc_control_node_B.jp1_n].re *
                     proc_control_node_B.shift_d.re -
                     proc_control_node_B.b_A[proc_control_node_B.jp1_n].im *
                     proc_control_node_B.shift_d.im);
                  proc_control_node_B.colssq_n =
                    proc_control_node_B.b_A[proc_control_node_B.jp1_n - 1].im *
                    proc_control_node_B.absxk_hg +
                    (proc_control_node_B.b_A[proc_control_node_B.jp1_n].im *
                     proc_control_node_B.shift_d.re +
                     proc_control_node_B.b_A[proc_control_node_B.jp1_n].re *
                     proc_control_node_B.shift_d.im);
                  proc_control_node_B.t_oc =
                    proc_control_node_B.b_A[proc_control_node_B.jp1_n - 1].re;
                  proc_control_node_B.b_A[proc_control_node_B.jp1_n].re =
                    proc_control_node_B.b_A[proc_control_node_B.jp1_n].re *
                    proc_control_node_B.absxk_hg -
                    (proc_control_node_B.b_A[proc_control_node_B.jp1_n - 1].re *
                     proc_control_node_B.shift_d.re +
                     proc_control_node_B.b_A[proc_control_node_B.jp1_n - 1].im *
                     proc_control_node_B.shift_d.im);
                  proc_control_node_B.b_A[proc_control_node_B.jp1_n].im =
                    proc_control_node_B.b_A[proc_control_node_B.jp1_n].im *
                    proc_control_node_B.absxk_hg -
                    (proc_control_node_B.b_A[proc_control_node_B.jp1_n - 1].im *
                     proc_control_node_B.shift_d.re -
                     proc_control_node_B.shift_d.im * proc_control_node_B.t_oc);
                  proc_control_node_B.b_A[proc_control_node_B.jp1_n - 1].re =
                    proc_control_node_B.colscale_e;
                  proc_control_node_B.b_A[proc_control_node_B.jp1_n - 1].im =
                    proc_control_node_B.colssq_n;
                }

                proc_control_node_B.shift_d.re = -proc_control_node_B.shift_d.re;
                proc_control_node_B.shift_d.im = -proc_control_node_B.shift_d.im;
                proc_control_node_B.b_x_eg = proc_control_node_B.j_e + 2;
                if (proc_control_node_B.nm1_k + 1 < proc_control_node_B.j_e + 2)
                {
                  proc_control_node_B.b_x_eg = proc_control_node_B.nm1_k + 1;
                }

                for (i = proc_control_node_B.ifirst; i <=
                     proc_control_node_B.b_x_eg; i++) {
                  proc_control_node_B.jp1_n = ((proc_control_node_B.j_e - 1) *
                    20 + i) - 1;
                  t1_re_tmp = (20 * proc_control_node_B.j_e + i) - 1;
                  proc_control_node_B.colscale_e =
                    (proc_control_node_B.b_A[proc_control_node_B.jp1_n].re *
                     proc_control_node_B.shift_d.re -
                     proc_control_node_B.b_A[proc_control_node_B.jp1_n].im *
                     proc_control_node_B.shift_d.im) +
                    proc_control_node_B.b_A[t1_re_tmp].re *
                    proc_control_node_B.absxk_hg;
                  proc_control_node_B.colssq_n =
                    (proc_control_node_B.b_A[proc_control_node_B.jp1_n].im *
                     proc_control_node_B.shift_d.re +
                     proc_control_node_B.b_A[proc_control_node_B.jp1_n].re *
                     proc_control_node_B.shift_d.im) +
                    proc_control_node_B.b_A[t1_re_tmp].im *
                    proc_control_node_B.absxk_hg;
                  proc_control_node_B.t_oc = proc_control_node_B.b_A[t1_re_tmp].
                    re;
                  proc_control_node_B.b_A[proc_control_node_B.jp1_n].re =
                    proc_control_node_B.b_A[proc_control_node_B.jp1_n].re *
                    proc_control_node_B.absxk_hg -
                    (proc_control_node_B.b_A[t1_re_tmp].re *
                     proc_control_node_B.shift_d.re +
                     proc_control_node_B.b_A[t1_re_tmp].im *
                     proc_control_node_B.shift_d.im);
                  proc_control_node_B.b_A[proc_control_node_B.jp1_n].im =
                    proc_control_node_B.b_A[proc_control_node_B.jp1_n].im *
                    proc_control_node_B.absxk_hg -
                    (proc_control_node_B.b_A[t1_re_tmp].im *
                     proc_control_node_B.shift_d.re -
                     proc_control_node_B.shift_d.im * proc_control_node_B.t_oc);
                  proc_control_node_B.b_A[t1_re_tmp].re =
                    proc_control_node_B.colscale_e;
                  proc_control_node_B.b_A[t1_re_tmp].im =
                    proc_control_node_B.colssq_n;
                }

                proc_control_node_B.jp1_n = proc_control_node_B.j_e - 1;
                proc_control_node_B.j_e++;
              }
            }

            proc_control_node_B.jiter_f++;
          }
        }
      } else {
        guard2 = true;
        exitg1 = 1;
      }
    } while (exitg1 == 0);
  } else {
    guard1 = true;
  }

  if (guard2) {
    if (failed) {
      *info = proc_control_node_B.nm1_k + 1;
      for (proc_control_node_B.ifirst = 0; proc_control_node_B.ifirst <=
           proc_control_node_B.nm1_k; proc_control_node_B.ifirst++) {
        alpha1[proc_control_node_B.ifirst].re = (rtNaN);
        alpha1[proc_control_node_B.ifirst].im = 0.0;
        beta1[proc_control_node_B.ifirst].re = (rtNaN);
        beta1[proc_control_node_B.ifirst].im = 0.0;
      }
    } else {
      guard1 = true;
    }
  }

  if (guard1) {
    proc_control_node_B.nm1_k = ilo - 2;
    for (proc_control_node_B.ifirst = 0; proc_control_node_B.ifirst <=
         proc_control_node_B.nm1_k; proc_control_node_B.ifirst++) {
      alpha1[proc_control_node_B.ifirst] = proc_control_node_B.b_A[20 *
        proc_control_node_B.ifirst + proc_control_node_B.ifirst];
    }
  }
}

static void proc_control_node_xzgeev(const real_T A[400], int32_T *info, creal_T
  alpha1[20], creal_T beta1[20])
{
  boolean_T exitg1;
  boolean_T guard1 = false;
  boolean_T ilascl;
  boolean_T notdone;
  for (proc_control_node_B.i_do = 0; proc_control_node_B.i_do < 400;
       proc_control_node_B.i_do++) {
    proc_control_node_B.At[proc_control_node_B.i_do].re =
      A[proc_control_node_B.i_do];
    proc_control_node_B.At[proc_control_node_B.i_do].im = 0.0;
  }

  *info = 0;
  proc_control_node_B.anrm_n = 0.0;
  proc_control_node_B.i_do = 0;
  exitg1 = false;
  while ((!exitg1) && (proc_control_node_B.i_do < 400)) {
    proc_control_node_B.absxk_fi = proc_control_node_rt_hypotd_snf
      (proc_control_node_B.At[proc_control_node_B.i_do].re,
       proc_control_node_B.At[proc_control_node_B.i_do].im);
    if (rtIsNaN(proc_control_node_B.absxk_fi)) {
      proc_control_node_B.anrm_n = (rtNaN);
      exitg1 = true;
    } else {
      if (proc_control_node_B.absxk_fi > proc_control_node_B.anrm_n) {
        proc_control_node_B.anrm_n = proc_control_node_B.absxk_fi;
      }

      proc_control_node_B.i_do++;
    }
  }

  if (rtIsInf(proc_control_node_B.anrm_n) || rtIsNaN(proc_control_node_B.anrm_n))
  {
    for (proc_control_node_B.i_do = 0; proc_control_node_B.i_do < 20;
         proc_control_node_B.i_do++) {
      alpha1[proc_control_node_B.i_do].re = (rtNaN);
      alpha1[proc_control_node_B.i_do].im = 0.0;
      beta1[proc_control_node_B.i_do].re = (rtNaN);
      beta1[proc_control_node_B.i_do].im = 0.0;
    }
  } else {
    ilascl = false;
    proc_control_node_B.absxk_fi = proc_control_node_B.anrm_n;
    guard1 = false;
    if ((proc_control_node_B.anrm_n > 0.0) && (proc_control_node_B.anrm_n <
         6.7178761075670888E-139)) {
      proc_control_node_B.absxk_fi = 6.7178761075670888E-139;
      ilascl = true;
      guard1 = true;
    } else if (proc_control_node_B.anrm_n > 1.4885657073574029E+138) {
      proc_control_node_B.absxk_fi = 1.4885657073574029E+138;
      ilascl = true;
      guard1 = true;
    }

    if (guard1) {
      proc_control_node_B.cfromc_g = proc_control_node_B.anrm_n;
      proc_control_node_B.ctoc_d = proc_control_node_B.absxk_fi;
      notdone = true;
      while (notdone) {
        proc_control_node_B.cfrom1_d = proc_control_node_B.cfromc_g *
          2.0041683600089728E-292;
        proc_control_node_B.cto1_e = proc_control_node_B.ctoc_d /
          4.9896007738368E+291;
        if ((proc_control_node_B.cfrom1_d > proc_control_node_B.ctoc_d) &&
            (proc_control_node_B.ctoc_d != 0.0)) {
          proc_control_node_B.mul_c = 2.0041683600089728E-292;
          proc_control_node_B.cfromc_g = proc_control_node_B.cfrom1_d;
        } else if (proc_control_node_B.cto1_e > proc_control_node_B.cfromc_g) {
          proc_control_node_B.mul_c = 4.9896007738368E+291;
          proc_control_node_B.ctoc_d = proc_control_node_B.cto1_e;
        } else {
          proc_control_node_B.mul_c = proc_control_node_B.ctoc_d /
            proc_control_node_B.cfromc_g;
          notdone = false;
        }

        for (proc_control_node_B.i_do = 0; proc_control_node_B.i_do < 400;
             proc_control_node_B.i_do++) {
          proc_control_node_B.alpha1_n =
            proc_control_node_B.At[proc_control_node_B.i_do];
          proc_control_node_B.alpha1_n.re *= proc_control_node_B.mul_c;
          proc_control_node_B.alpha1_n.im *= proc_control_node_B.mul_c;
          proc_control_node_B.At[proc_control_node_B.i_do] =
            proc_control_node_B.alpha1_n;
        }
      }
    }

    proc_control_node_xzggbal(proc_control_node_B.At, proc_control_node_B.c_A,
      &proc_control_node_B.i_do, &proc_control_node_B.ihi,
      proc_control_node_B.rscale);
    proc_control_node_xzgghrd(proc_control_node_B.i_do, proc_control_node_B.ihi,
      proc_control_node_B.c_A, proc_control_node_B.At);
    proc_control_node_xzhgeqz(proc_control_node_B.At, proc_control_node_B.i_do,
      proc_control_node_B.ihi, info, alpha1, beta1);
    if ((*info != 0) || (!ilascl)) {
    } else {
      notdone = true;
      while (notdone) {
        proc_control_node_B.cfrom1_d = proc_control_node_B.absxk_fi *
          2.0041683600089728E-292;
        proc_control_node_B.cto1_e = proc_control_node_B.anrm_n /
          4.9896007738368E+291;
        if ((proc_control_node_B.cfrom1_d > proc_control_node_B.anrm_n) &&
            (proc_control_node_B.anrm_n != 0.0)) {
          proc_control_node_B.mul_c = 2.0041683600089728E-292;
          proc_control_node_B.absxk_fi = proc_control_node_B.cfrom1_d;
        } else if (proc_control_node_B.cto1_e > proc_control_node_B.absxk_fi) {
          proc_control_node_B.mul_c = 4.9896007738368E+291;
          proc_control_node_B.anrm_n = proc_control_node_B.cto1_e;
        } else {
          proc_control_node_B.mul_c = proc_control_node_B.anrm_n /
            proc_control_node_B.absxk_fi;
          notdone = false;
        }

        for (proc_control_node_B.i_do = 0; proc_control_node_B.i_do < 20;
             proc_control_node_B.i_do++) {
          proc_control_node_B.alpha1_n = alpha1[proc_control_node_B.i_do];
          proc_control_node_B.alpha1_n.re *= proc_control_node_B.mul_c;
          proc_control_node_B.alpha1_n.im *= proc_control_node_B.mul_c;
          alpha1[proc_control_node_B.i_do] = proc_control_node_B.alpha1_n;
        }
      }
    }
  }
}

static real_T proc_control_node_xnrm2_b(int32_T n, const real_T x[400], int32_T
  ix0)
{
  real_T t;
  real_T y;
  int32_T k;
  int32_T kend;
  y = 0.0;
  if (n < 1) {
  } else if (n == 1) {
    y = fabs(x[ix0 - 1]);
  } else {
    proc_control_node_B.scale_cu = 3.3121686421112381E-170;
    kend = ix0 + n;
    for (k = ix0; k < kend; k++) {
      proc_control_node_B.absxk_j1 = fabs(x[k - 1]);
      if (proc_control_node_B.absxk_j1 > proc_control_node_B.scale_cu) {
        t = proc_control_node_B.scale_cu / proc_control_node_B.absxk_j1;
        y = y * t * t + 1.0;
        proc_control_node_B.scale_cu = proc_control_node_B.absxk_j1;
      } else {
        t = proc_control_node_B.absxk_j1 / proc_control_node_B.scale_cu;
        y += t * t;
      }
    }

    y = proc_control_node_B.scale_cu * sqrt(y);
  }

  return y;
}

static void proc_control_node_xzlarf_b4nwkz(int32_T n, int32_T iv0, real_T tau,
  const real_T C[400], int32_T ic0, real_T work[20], real_T b_C[400])
{
  int32_T exitg1;
  boolean_T exitg2;
  memcpy(&b_C[0], &C[0], 400U * sizeof(real_T));
  if (tau != 0.0) {
    proc_control_node_B.lastv = n;
    proc_control_node_B.lastc = (iv0 + n) - 2;
    while ((proc_control_node_B.lastv > 0) && (C[proc_control_node_B.lastc] ==
            0.0)) {
      proc_control_node_B.lastv--;
      proc_control_node_B.lastc--;
    }

    proc_control_node_B.lastc = 20;
    exitg2 = false;
    while ((!exitg2) && (proc_control_node_B.lastc > 0)) {
      proc_control_node_B.rowleft = (ic0 + proc_control_node_B.lastc) - 1;
      proc_control_node_B.ia = proc_control_node_B.rowleft;
      do {
        exitg1 = 0;
        if (proc_control_node_B.ia <= (proc_control_node_B.lastv - 1) * 20 +
            proc_control_node_B.rowleft) {
          if (C[proc_control_node_B.ia - 1] != 0.0) {
            exitg1 = 1;
          } else {
            proc_control_node_B.ia += 20;
          }
        } else {
          proc_control_node_B.lastc--;
          exitg1 = 2;
        }
      } while (exitg1 == 0);

      if (exitg1 == 1) {
        exitg2 = true;
      }
    }
  } else {
    proc_control_node_B.lastv = 0;
    proc_control_node_B.lastc = 0;
  }

  if (proc_control_node_B.lastv > 0) {
    if (proc_control_node_B.lastc != 0) {
      if (0 <= proc_control_node_B.lastc - 1) {
        memset(&work[0], 0, proc_control_node_B.lastc * sizeof(real_T));
      }

      proc_control_node_B.ix_i = iv0 - 1;
      proc_control_node_B.b_hv = (proc_control_node_B.lastv - 1) * 20 + ic0;
      for (proc_control_node_B.jA = ic0; proc_control_node_B.jA <=
           proc_control_node_B.b_hv; proc_control_node_B.jA += 20) {
        proc_control_node_B.d_m = proc_control_node_B.jA +
          proc_control_node_B.lastc;
        for (proc_control_node_B.ia = proc_control_node_B.jA;
             proc_control_node_B.ia < proc_control_node_B.d_m;
             proc_control_node_B.ia++) {
          proc_control_node_B.rowleft = proc_control_node_B.ia -
            proc_control_node_B.jA;
          work[proc_control_node_B.rowleft] += b_C[proc_control_node_B.ia - 1] *
            b_C[proc_control_node_B.ix_i];
        }

        proc_control_node_B.ix_i++;
      }
    }

    if (!(-tau == 0.0)) {
      proc_control_node_B.jA = ic0;
      for (proc_control_node_B.ia = 0; proc_control_node_B.ia <
           proc_control_node_B.lastv; proc_control_node_B.ia++) {
        proc_control_node_B.temp_e = b_C[(iv0 + proc_control_node_B.ia) - 1];
        if (proc_control_node_B.temp_e != 0.0) {
          proc_control_node_B.temp_e *= -tau;
          proc_control_node_B.ix_i = (proc_control_node_B.lastc +
            proc_control_node_B.jA) - 1;
          for (proc_control_node_B.rowleft = proc_control_node_B.jA;
               proc_control_node_B.rowleft <= proc_control_node_B.ix_i;
               proc_control_node_B.rowleft++) {
            b_C[proc_control_node_B.rowleft - 1] +=
              work[proc_control_node_B.rowleft - proc_control_node_B.jA] *
              proc_control_node_B.temp_e;
          }
        }

        proc_control_node_B.jA += 20;
      }
    }
  }
}

static void proc_control_nod_xzlarf_b4nwkzr(int32_T m, int32_T n, int32_T iv0,
  real_T tau, const real_T C[400], int32_T ic0, real_T work[20], real_T b_C[400])
{
  int32_T coltop;
  int32_T d;
  int32_T exitg1;
  int32_T ia;
  int32_T jA;
  int32_T lastc;
  boolean_T exitg2;
  memcpy(&b_C[0], &C[0], 400U * sizeof(real_T));
  if (tau != 0.0) {
    proc_control_node_B.lastv_m = m;
    lastc = (iv0 + m) - 2;
    while ((proc_control_node_B.lastv_m > 0) && (C[lastc] == 0.0)) {
      proc_control_node_B.lastv_m--;
      lastc--;
    }

    lastc = n;
    exitg2 = false;
    while ((!exitg2) && (lastc > 0)) {
      coltop = (lastc - 1) * 20 + ic0;
      ia = coltop;
      do {
        exitg1 = 0;
        if (ia <= (coltop + proc_control_node_B.lastv_m) - 1) {
          if (C[ia - 1] != 0.0) {
            exitg1 = 1;
          } else {
            ia++;
          }
        } else {
          lastc--;
          exitg1 = 2;
        }
      } while (exitg1 == 0);

      if (exitg1 == 1) {
        exitg2 = true;
      }
    }

    lastc--;
  } else {
    proc_control_node_B.lastv_m = 0;
    lastc = -1;
  }

  if (proc_control_node_B.lastv_m > 0) {
    if (lastc + 1 != 0) {
      if (0 <= lastc) {
        memset(&work[0], 0, (lastc + 1) * sizeof(real_T));
      }

      jA = 20 * lastc + ic0;
      for (coltop = ic0; coltop <= jA; coltop += 20) {
        proc_control_node_B.c_dd = 0.0;
        d = coltop + proc_control_node_B.lastv_m;
        for (ia = coltop; ia < d; ia++) {
          proc_control_node_B.c_dd += b_C[((iv0 + ia) - coltop) - 1] * b_C[ia -
            1];
        }

        ia = div_nzp_s32_floor(coltop - ic0, 20);
        work[ia] += proc_control_node_B.c_dd;
      }
    }

    if (!(-tau == 0.0)) {
      jA = ic0;
      for (ia = 0; ia <= lastc; ia++) {
        if (work[ia] != 0.0) {
          proc_control_node_B.c_dd = work[ia] * -tau;
          d = (proc_control_node_B.lastv_m + jA) - 1;
          for (coltop = jA; coltop <= d; coltop++) {
            b_C[coltop - 1] += b_C[((iv0 + coltop) - jA) - 1] *
              proc_control_node_B.c_dd;
          }
        }

        jA += 20;
      }
    }
  }
}

static void proc_control_node_xgehrd(const real_T a[400], real_T b_a[400])
{
  memcpy(&b_a[0], &a[0], 400U * sizeof(real_T));
  memset(&proc_control_node_B.work[0], 0, 20U * sizeof(real_T));
  for (proc_control_node_B.i_iw = 0; proc_control_node_B.i_iw < 19;
       proc_control_node_B.i_iw++) {
    proc_control_node_B.im1n = proc_control_node_B.i_iw * 20 + 2;
    proc_control_node_B.in = (proc_control_node_B.i_iw + 1) * 20 + 1;
    if (proc_control_node_B.i_iw + 3 < 20) {
      proc_control_node_B.ia0 = proc_control_node_B.i_iw + 3;
    } else {
      proc_control_node_B.ia0 = 20;
    }

    proc_control_node_B.ia0 += proc_control_node_B.i_iw * 20;
    proc_control_node_B.b_alpha1_tmp_e = (20 * proc_control_node_B.i_iw +
      proc_control_node_B.i_iw) + 1;
    proc_control_node_B.b_alpha1_tmp = b_a[proc_control_node_B.b_alpha1_tmp_e];
    proc_control_node_B.tau[proc_control_node_B.i_iw] = 0.0;
    proc_control_node_B.xnorm = proc_control_node_xnrm2_b(18 -
      proc_control_node_B.i_iw, b_a, proc_control_node_B.ia0);
    if (proc_control_node_B.xnorm != 0.0) {
      proc_control_node_B.xnorm = proc_control_node_rt_hypotd_snf
        (proc_control_node_B.b_alpha1_tmp, proc_control_node_B.xnorm);
      if (proc_control_node_B.b_alpha1_tmp >= 0.0) {
        proc_control_node_B.xnorm = -proc_control_node_B.xnorm;
      }

      if (fabs(proc_control_node_B.xnorm) < 1.0020841800044864E-292) {
        proc_control_node_B.knt = -1;
        proc_control_node_B.b_tmp = proc_control_node_B.ia0 -
          proc_control_node_B.i_iw;
        do {
          proc_control_node_B.knt++;
          for (proc_control_node_B.k_a = proc_control_node_B.ia0;
               proc_control_node_B.k_a <= proc_control_node_B.b_tmp + 17;
               proc_control_node_B.k_a++) {
            b_a[proc_control_node_B.k_a - 1] *= 9.9792015476736E+291;
          }

          proc_control_node_B.xnorm *= 9.9792015476736E+291;
          proc_control_node_B.b_alpha1_tmp *= 9.9792015476736E+291;
        } while (!(fabs(proc_control_node_B.xnorm) >= 1.0020841800044864E-292));

        proc_control_node_B.xnorm = proc_control_node_rt_hypotd_snf
          (proc_control_node_B.b_alpha1_tmp, proc_control_node_xnrm2_b(18 -
            proc_control_node_B.i_iw, b_a, proc_control_node_B.ia0));
        if (proc_control_node_B.b_alpha1_tmp >= 0.0) {
          proc_control_node_B.xnorm = -proc_control_node_B.xnorm;
        }

        proc_control_node_B.tau[proc_control_node_B.i_iw] =
          (proc_control_node_B.xnorm - proc_control_node_B.b_alpha1_tmp) /
          proc_control_node_B.xnorm;
        proc_control_node_B.b_alpha1_tmp = 1.0 /
          (proc_control_node_B.b_alpha1_tmp - proc_control_node_B.xnorm);
        for (proc_control_node_B.k_a = proc_control_node_B.ia0;
             proc_control_node_B.k_a <= proc_control_node_B.b_tmp + 17;
             proc_control_node_B.k_a++) {
          b_a[proc_control_node_B.k_a - 1] *= proc_control_node_B.b_alpha1_tmp;
        }

        for (proc_control_node_B.k_a = 0; proc_control_node_B.k_a <=
             proc_control_node_B.knt; proc_control_node_B.k_a++) {
          proc_control_node_B.xnorm *= 1.0020841800044864E-292;
        }

        proc_control_node_B.b_alpha1_tmp = proc_control_node_B.xnorm;
      } else {
        proc_control_node_B.tau[proc_control_node_B.i_iw] =
          (proc_control_node_B.xnorm - proc_control_node_B.b_alpha1_tmp) /
          proc_control_node_B.xnorm;
        proc_control_node_B.b_alpha1_tmp = 1.0 /
          (proc_control_node_B.b_alpha1_tmp - proc_control_node_B.xnorm);
        proc_control_node_B.knt = proc_control_node_B.ia0 -
          proc_control_node_B.i_iw;
        for (proc_control_node_B.k_a = proc_control_node_B.ia0;
             proc_control_node_B.k_a <= proc_control_node_B.knt + 17;
             proc_control_node_B.k_a++) {
          b_a[proc_control_node_B.k_a - 1] *= proc_control_node_B.b_alpha1_tmp;
        }

        proc_control_node_B.b_alpha1_tmp = proc_control_node_B.xnorm;
      }
    }

    b_a[proc_control_node_B.b_alpha1_tmp_e] = 1.0;
    proc_control_node_xzlarf_b4nwkz(19 - proc_control_node_B.i_iw,
      proc_control_node_B.i_iw + proc_control_node_B.im1n,
      proc_control_node_B.tau[proc_control_node_B.i_iw], b_a,
      proc_control_node_B.in, proc_control_node_B.work, proc_control_node_B.d_a);
    proc_control_nod_xzlarf_b4nwkzr(19 - proc_control_node_B.i_iw, 19 -
      proc_control_node_B.i_iw, proc_control_node_B.i_iw +
      proc_control_node_B.im1n, proc_control_node_B.tau[proc_control_node_B.i_iw],
      proc_control_node_B.d_a, (proc_control_node_B.i_iw +
      proc_control_node_B.in) + 1, proc_control_node_B.work, b_a);
    b_a[proc_control_node_B.b_alpha1_tmp_e] = proc_control_node_B.b_alpha1_tmp;
  }
}

static void proc_control_node_xrot(int32_T n, const real_T x[400], int32_T ix0,
  int32_T iy0, real_T c, real_T s, real_T b_x[400])
{
  int32_T k;
  int32_T temp_tmp;
  int32_T temp_tmp_0;
  memcpy(&b_x[0], &x[0], 400U * sizeof(real_T));
  if (n >= 1) {
    for (k = 0; k < n; k++) {
      temp_tmp = (iy0 + k) - 1;
      proc_control_node_B.temp_tmp = b_x[temp_tmp];
      temp_tmp_0 = (ix0 + k) - 1;
      proc_control_node_B.temp_tmp_o = b_x[temp_tmp_0];
      b_x[temp_tmp] = proc_control_node_B.temp_tmp * c -
        proc_control_node_B.temp_tmp_o * s;
      b_x[temp_tmp_0] = proc_control_node_B.temp_tmp_o * c +
        proc_control_node_B.temp_tmp * s;
    }
  }
}

static void proc_control_node_eml_dlahqr(const real_T h[400], real_T b_h[400],
  int32_T *info)
{
  int32_T sum1_tmp;
  boolean_T exitg1;
  boolean_T exitg2;
  boolean_T exitg3;
  boolean_T goto150;
  memcpy(&b_h[0], &h[0], 400U * sizeof(real_T));
  *info = 0;
  proc_control_node_B.v_j4[0] = 0.0;
  proc_control_node_B.v_j4[1] = 0.0;
  proc_control_node_B.v_j4[2] = 0.0;
  for (proc_control_node_B.i_nb = 0; proc_control_node_B.i_nb < 17;
       proc_control_node_B.i_nb++) {
    proc_control_node_B.hoffset_p = proc_control_node_B.i_nb + 20 *
      proc_control_node_B.i_nb;
    b_h[proc_control_node_B.hoffset_p + 2] = 0.0;
    b_h[proc_control_node_B.hoffset_p + 3] = 0.0;
  }

  b_h[359] = 0.0;
  proc_control_node_B.i_nb = 19;
  exitg1 = false;
  while ((!exitg1) && (proc_control_node_B.i_nb + 1 >= 1)) {
    proc_control_node_B.L_i = 1;
    goto150 = false;
    proc_control_node_B.its = 0;
    exitg2 = false;
    while ((!exitg2) && (proc_control_node_B.its < 601)) {
      proc_control_node_B.k_e = proc_control_node_B.i_nb;
      exitg3 = false;
      while ((!exitg3) && (proc_control_node_B.k_e + 1 > proc_control_node_B.L_i))
      {
        proc_control_node_B.s_tmp = (proc_control_node_B.k_e - 1) * 20 +
          proc_control_node_B.k_e;
        proc_control_node_B.ba_a = fabs(b_h[proc_control_node_B.s_tmp]);
        if (proc_control_node_B.ba_a <= 2.0041683600089728E-291) {
          exitg3 = true;
        } else {
          proc_control_node_B.m_k = 20 * proc_control_node_B.k_e +
            proc_control_node_B.k_e;
          proc_control_node_B.s_dg = b_h[proc_control_node_B.m_k];
          proc_control_node_B.bb_b = fabs(proc_control_node_B.s_dg);
          proc_control_node_B.aa_d = b_h[proc_control_node_B.s_tmp - 1];
          proc_control_node_B.tst_g = fabs(proc_control_node_B.aa_d) +
            proc_control_node_B.bb_b;
          if (proc_control_node_B.tst_g == 0.0) {
            if (proc_control_node_B.k_e - 1 >= 1) {
              proc_control_node_B.tst_g = fabs(b_h[((proc_control_node_B.k_e - 2)
                * 20 + proc_control_node_B.k_e) - 1]);
            }

            if (proc_control_node_B.k_e + 2 <= 20) {
              proc_control_node_B.tst_g += fabs(b_h[proc_control_node_B.m_k + 1]);
            }
          }

          if (proc_control_node_B.ba_a <= 2.2204460492503131E-16 *
              proc_control_node_B.tst_g) {
            proc_control_node_B.htmp2_g = fabs(b_h[proc_control_node_B.m_k - 1]);
            if (proc_control_node_B.ba_a > proc_control_node_B.htmp2_g) {
              proc_control_node_B.tst_g = proc_control_node_B.ba_a;
              proc_control_node_B.ba_a = proc_control_node_B.htmp2_g;
            } else {
              proc_control_node_B.tst_g = proc_control_node_B.htmp2_g;
            }

            proc_control_node_B.htmp2_g = fabs(proc_control_node_B.aa_d -
              proc_control_node_B.s_dg);
            if (proc_control_node_B.bb_b > proc_control_node_B.htmp2_g) {
              proc_control_node_B.aa_d = proc_control_node_B.bb_b;
              proc_control_node_B.bb_b = proc_control_node_B.htmp2_g;
            } else {
              proc_control_node_B.aa_d = proc_control_node_B.htmp2_g;
            }

            proc_control_node_B.s_dg = proc_control_node_B.aa_d +
              proc_control_node_B.tst_g;
            proc_control_node_B.bb_b = proc_control_node_B.aa_d /
              proc_control_node_B.s_dg * proc_control_node_B.bb_b *
              2.2204460492503131E-16;
            if ((2.0041683600089728E-291 > proc_control_node_B.bb_b) || rtIsNaN
                (proc_control_node_B.bb_b)) {
              proc_control_node_B.bb_b = 2.0041683600089728E-291;
            }

            if (proc_control_node_B.tst_g / proc_control_node_B.s_dg *
                proc_control_node_B.ba_a <= proc_control_node_B.bb_b) {
              exitg3 = true;
            } else {
              proc_control_node_B.k_e--;
            }
          } else {
            proc_control_node_B.k_e--;
          }
        }
      }

      proc_control_node_B.L_i = proc_control_node_B.k_e + 1;
      if (proc_control_node_B.k_e + 1 > 1) {
        b_h[proc_control_node_B.k_e + 20 * (proc_control_node_B.k_e - 1)] = 0.0;
      }

      if (proc_control_node_B.k_e + 1 >= proc_control_node_B.i_nb) {
        goto150 = true;
        exitg2 = true;
      } else {
        if (proc_control_node_B.its == 10) {
          proc_control_node_B.s_tmp = 20 * proc_control_node_B.k_e +
            proc_control_node_B.k_e;
          proc_control_node_B.s_dg = fabs(b_h[((proc_control_node_B.k_e + 1) *
            20 + proc_control_node_B.k_e) + 2]) + fabs
            (b_h[proc_control_node_B.s_tmp + 1]);
          proc_control_node_B.ba_a = b_h[proc_control_node_B.s_tmp] + 0.75 *
            proc_control_node_B.s_dg;
          proc_control_node_B.htmp2_g = -0.4375 * proc_control_node_B.s_dg;
          proc_control_node_B.aa_d = proc_control_node_B.s_dg;
          proc_control_node_B.bb_b = proc_control_node_B.ba_a;
        } else if (proc_control_node_B.its == 20) {
          proc_control_node_B.s_dg = fabs(b_h[((proc_control_node_B.i_nb - 2) *
            20 + proc_control_node_B.i_nb) - 1]) + fabs(b_h
            [(proc_control_node_B.i_nb - 1) * 20 + proc_control_node_B.i_nb]);
          proc_control_node_B.ba_a = b_h[20 * proc_control_node_B.i_nb +
            proc_control_node_B.i_nb] + 0.75 * proc_control_node_B.s_dg;
          proc_control_node_B.htmp2_g = -0.4375 * proc_control_node_B.s_dg;
          proc_control_node_B.aa_d = proc_control_node_B.s_dg;
          proc_control_node_B.bb_b = proc_control_node_B.ba_a;
        } else {
          proc_control_node_B.m_k = (proc_control_node_B.i_nb - 1) * 20 +
            proc_control_node_B.i_nb;
          proc_control_node_B.ba_a = b_h[proc_control_node_B.m_k - 1];
          proc_control_node_B.aa_d = b_h[proc_control_node_B.m_k];
          proc_control_node_B.htmp2_g = b_h[(20 * proc_control_node_B.i_nb +
            proc_control_node_B.i_nb) - 1];
          proc_control_node_B.bb_b = b_h[20 * proc_control_node_B.i_nb +
            proc_control_node_B.i_nb];
        }

        proc_control_node_B.s_dg = ((fabs(proc_control_node_B.ba_a) + fabs
          (proc_control_node_B.htmp2_g)) + fabs(proc_control_node_B.aa_d)) +
          fabs(proc_control_node_B.bb_b);
        if (proc_control_node_B.s_dg == 0.0) {
          proc_control_node_B.ba_a = 0.0;
          proc_control_node_B.bb_b = 0.0;
          proc_control_node_B.tst_g = 0.0;
          proc_control_node_B.aa_d = 0.0;
        } else {
          proc_control_node_B.ba_a /= proc_control_node_B.s_dg;
          proc_control_node_B.bb_b /= proc_control_node_B.s_dg;
          proc_control_node_B.tst_g = (proc_control_node_B.ba_a +
            proc_control_node_B.bb_b) / 2.0;
          proc_control_node_B.ba_a = (proc_control_node_B.ba_a -
            proc_control_node_B.tst_g) * (proc_control_node_B.bb_b -
            proc_control_node_B.tst_g) - proc_control_node_B.htmp2_g /
            proc_control_node_B.s_dg * (proc_control_node_B.aa_d /
            proc_control_node_B.s_dg);
          proc_control_node_B.aa_d = sqrt(fabs(proc_control_node_B.ba_a));
          if (proc_control_node_B.ba_a >= 0.0) {
            proc_control_node_B.ba_a = proc_control_node_B.tst_g *
              proc_control_node_B.s_dg;
            proc_control_node_B.tst_g = proc_control_node_B.ba_a;
            proc_control_node_B.bb_b = proc_control_node_B.aa_d *
              proc_control_node_B.s_dg;
            proc_control_node_B.aa_d = -proc_control_node_B.bb_b;
          } else {
            proc_control_node_B.ba_a = proc_control_node_B.tst_g +
              proc_control_node_B.aa_d;
            proc_control_node_B.tst_g -= proc_control_node_B.aa_d;
            if (fabs(proc_control_node_B.ba_a - proc_control_node_B.bb_b) <=
                fabs(proc_control_node_B.tst_g - proc_control_node_B.bb_b)) {
              proc_control_node_B.ba_a *= proc_control_node_B.s_dg;
              proc_control_node_B.tst_g = proc_control_node_B.ba_a;
            } else {
              proc_control_node_B.tst_g *= proc_control_node_B.s_dg;
              proc_control_node_B.ba_a = proc_control_node_B.tst_g;
            }

            proc_control_node_B.bb_b = 0.0;
            proc_control_node_B.aa_d = 0.0;
          }
        }

        proc_control_node_B.m_k = proc_control_node_B.i_nb - 2;
        exitg3 = false;
        while ((!exitg3) && (proc_control_node_B.m_k + 1 >=
                             proc_control_node_B.k_e + 1)) {
          proc_control_node_B.s_tmp = 20 * proc_control_node_B.m_k +
            proc_control_node_B.m_k;
          proc_control_node_B.h21s_f = b_h[proc_control_node_B.s_tmp + 1];
          proc_control_node_B.htmp2_g = b_h[proc_control_node_B.s_tmp];
          proc_control_node_B.t3_a = proc_control_node_B.htmp2_g -
            proc_control_node_B.tst_g;
          proc_control_node_B.s_dg = (fabs(proc_control_node_B.t3_a) + fabs
            (proc_control_node_B.aa_d)) + fabs(proc_control_node_B.h21s_f);
          proc_control_node_B.h21s_f /= proc_control_node_B.s_dg;
          proc_control_node_B.s_tmp = (proc_control_node_B.m_k + 1) * 20 +
            proc_control_node_B.m_k;
          proc_control_node_B.v_j4[0] = (proc_control_node_B.t3_a /
            proc_control_node_B.s_dg * (proc_control_node_B.htmp2_g -
            proc_control_node_B.ba_a) + b_h[proc_control_node_B.s_tmp] *
            proc_control_node_B.h21s_f) - proc_control_node_B.aa_d /
            proc_control_node_B.s_dg * proc_control_node_B.bb_b;
          proc_control_node_B.t3_a = b_h[proc_control_node_B.s_tmp + 1];
          proc_control_node_B.v_j4[1] = (((proc_control_node_B.t3_a +
            proc_control_node_B.htmp2_g) - proc_control_node_B.ba_a) -
            proc_control_node_B.tst_g) * proc_control_node_B.h21s_f;
          proc_control_node_B.v_j4[2] = b_h[proc_control_node_B.s_tmp + 2] *
            proc_control_node_B.h21s_f;
          proc_control_node_B.s_dg = (fabs(proc_control_node_B.v_j4[0]) + fabs
            (proc_control_node_B.v_j4[1])) + fabs(proc_control_node_B.v_j4[2]);
          proc_control_node_B.v_j4[0] /= proc_control_node_B.s_dg;
          proc_control_node_B.v_j4[1] /= proc_control_node_B.s_dg;
          proc_control_node_B.v_j4[2] /= proc_control_node_B.s_dg;
          if (proc_control_node_B.m_k + 1 == proc_control_node_B.k_e + 1) {
            exitg3 = true;
          } else {
            proc_control_node_B.s_tmp = (proc_control_node_B.m_k - 1) * 20 +
              proc_control_node_B.m_k;
            if (fabs(b_h[proc_control_node_B.s_tmp]) * (fabs
                 (proc_control_node_B.v_j4[1]) + fabs(proc_control_node_B.v_j4[2]))
                <= ((fabs(b_h[proc_control_node_B.s_tmp - 1]) + fabs
                     (proc_control_node_B.htmp2_g)) + fabs
                    (proc_control_node_B.t3_a)) * (2.2204460492503131E-16 * fabs
                 (proc_control_node_B.v_j4[0]))) {
              exitg3 = true;
            } else {
              proc_control_node_B.m_k--;
            }
          }
        }

        for (proc_control_node_B.s_tmp = proc_control_node_B.m_k + 1;
             proc_control_node_B.s_tmp <= proc_control_node_B.i_nb;
             proc_control_node_B.s_tmp++) {
          proc_control_node_B.nr_k = (proc_control_node_B.i_nb -
            proc_control_node_B.s_tmp) + 2;
          if (3 < proc_control_node_B.nr_k) {
            proc_control_node_B.nr_k = 3;
          }

          if (proc_control_node_B.s_tmp > proc_control_node_B.m_k + 1) {
            proc_control_node_B.hoffset_p = ((proc_control_node_B.s_tmp - 2) *
              20 + proc_control_node_B.s_tmp) - 2;
            for (proc_control_node_B.c_j_k = 0; proc_control_node_B.c_j_k <
                 proc_control_node_B.nr_k; proc_control_node_B.c_j_k++) {
              proc_control_node_B.v_j4[proc_control_node_B.c_j_k] = b_h
                [(proc_control_node_B.c_j_k + proc_control_node_B.hoffset_p) + 1];
            }
          }

          proc_control_node_xzlarfg_b4n(proc_control_node_B.nr_k,
            proc_control_node_B.v_j4[0], proc_control_node_B.v_j4,
            &proc_control_node_B.ba_a, &proc_control_node_B.s_dg);
          proc_control_node_B.v_j4[0] = proc_control_node_B.ba_a;
          if (proc_control_node_B.s_tmp > proc_control_node_B.m_k + 1) {
            proc_control_node_B.hoffset_p = proc_control_node_B.s_tmp + 20 *
              (proc_control_node_B.s_tmp - 2);
            b_h[proc_control_node_B.hoffset_p - 1] = proc_control_node_B.ba_a;
            b_h[proc_control_node_B.hoffset_p] = 0.0;
            if (proc_control_node_B.s_tmp < proc_control_node_B.i_nb) {
              b_h[proc_control_node_B.hoffset_p + 1] = 0.0;
            }
          } else if (proc_control_node_B.m_k + 1 > proc_control_node_B.k_e + 1)
          {
            proc_control_node_B.hoffset_p = ((proc_control_node_B.s_tmp - 2) *
              20 + proc_control_node_B.s_tmp) - 1;
            b_h[proc_control_node_B.hoffset_p] *= 1.0 - proc_control_node_B.s_dg;
          }

          proc_control_node_B.ba_a = proc_control_node_B.v_j4[1];
          proc_control_node_B.tst_g = proc_control_node_B.s_dg *
            proc_control_node_B.v_j4[1];
          if (proc_control_node_B.nr_k == 3) {
            proc_control_node_B.htmp2_g = proc_control_node_B.v_j4[2];
            proc_control_node_B.t3_a = proc_control_node_B.s_dg *
              proc_control_node_B.v_j4[2];
            for (proc_control_node_B.nr_k = proc_control_node_B.s_tmp;
                 proc_control_node_B.nr_k < 21; proc_control_node_B.nr_k++) {
              proc_control_node_B.hoffset_p = (proc_control_node_B.nr_k - 1) *
                20 + proc_control_node_B.s_tmp;
              proc_control_node_B.bb_b = b_h[proc_control_node_B.hoffset_p - 1];
              proc_control_node_B.aa_d = (proc_control_node_B.bb_b +
                b_h[proc_control_node_B.hoffset_p] * proc_control_node_B.ba_a) +
                b_h[proc_control_node_B.hoffset_p + 1] *
                proc_control_node_B.htmp2_g;
              b_h[proc_control_node_B.hoffset_p - 1] = proc_control_node_B.bb_b
                - proc_control_node_B.aa_d * proc_control_node_B.s_dg;
              b_h[proc_control_node_B.hoffset_p] -= proc_control_node_B.aa_d *
                proc_control_node_B.tst_g;
              b_h[proc_control_node_B.hoffset_p + 1] -= proc_control_node_B.aa_d
                * proc_control_node_B.t3_a;
            }

            if (proc_control_node_B.s_tmp + 3 < proc_control_node_B.i_nb + 1) {
              proc_control_node_B.hoffset_p = proc_control_node_B.s_tmp + 3;
            } else {
              proc_control_node_B.hoffset_p = proc_control_node_B.i_nb + 1;
            }

            proc_control_node_B.c_j_k = proc_control_node_B.hoffset_p - 1;
            for (proc_control_node_B.e_j_p = 0; proc_control_node_B.e_j_p <=
                 proc_control_node_B.c_j_k; proc_control_node_B.e_j_p++) {
              proc_control_node_B.hoffset_p = (proc_control_node_B.s_tmp - 1) *
                20 + proc_control_node_B.e_j_p;
              proc_control_node_B.bb_b = b_h[proc_control_node_B.hoffset_p];
              proc_control_node_B.nr_k = 20 * proc_control_node_B.s_tmp +
                proc_control_node_B.e_j_p;
              sum1_tmp = (proc_control_node_B.s_tmp + 1) * 20 +
                proc_control_node_B.e_j_p;
              proc_control_node_B.aa_d = (proc_control_node_B.bb_b +
                b_h[proc_control_node_B.nr_k] * proc_control_node_B.ba_a) +
                b_h[sum1_tmp] * proc_control_node_B.htmp2_g;
              b_h[proc_control_node_B.hoffset_p] = proc_control_node_B.bb_b -
                proc_control_node_B.aa_d * proc_control_node_B.s_dg;
              b_h[proc_control_node_B.nr_k] -= proc_control_node_B.aa_d *
                proc_control_node_B.tst_g;
              b_h[sum1_tmp] -= proc_control_node_B.aa_d *
                proc_control_node_B.t3_a;
            }
          } else if (proc_control_node_B.nr_k == 2) {
            for (proc_control_node_B.nr_k = proc_control_node_B.s_tmp;
                 proc_control_node_B.nr_k < 21; proc_control_node_B.nr_k++) {
              proc_control_node_B.hoffset_p = (proc_control_node_B.nr_k - 1) *
                20 + proc_control_node_B.s_tmp;
              proc_control_node_B.bb_b = b_h[proc_control_node_B.hoffset_p - 1];
              proc_control_node_B.aa_d = proc_control_node_B.bb_b +
                b_h[proc_control_node_B.hoffset_p] * proc_control_node_B.ba_a;
              b_h[proc_control_node_B.hoffset_p - 1] = proc_control_node_B.bb_b
                - proc_control_node_B.aa_d * proc_control_node_B.s_dg;
              b_h[proc_control_node_B.hoffset_p] -= proc_control_node_B.aa_d *
                proc_control_node_B.tst_g;
            }

            for (proc_control_node_B.c_j_k = 0; proc_control_node_B.c_j_k <=
                 proc_control_node_B.i_nb; proc_control_node_B.c_j_k++) {
              proc_control_node_B.hoffset_p = (proc_control_node_B.s_tmp - 1) *
                20 + proc_control_node_B.c_j_k;
              proc_control_node_B.bb_b = b_h[proc_control_node_B.hoffset_p];
              proc_control_node_B.nr_k = 20 * proc_control_node_B.s_tmp +
                proc_control_node_B.c_j_k;
              proc_control_node_B.aa_d = proc_control_node_B.bb_b +
                b_h[proc_control_node_B.nr_k] * proc_control_node_B.ba_a;
              b_h[proc_control_node_B.hoffset_p] = proc_control_node_B.bb_b -
                proc_control_node_B.aa_d * proc_control_node_B.s_dg;
              b_h[proc_control_node_B.nr_k] -= proc_control_node_B.aa_d *
                proc_control_node_B.tst_g;
            }
          }
        }

        proc_control_node_B.its++;
      }
    }

    if (!goto150) {
      *info = proc_control_node_B.i_nb + 1;
      exitg1 = true;
    } else {
      if ((proc_control_node_B.i_nb + 1 != proc_control_node_B.L_i) &&
          (proc_control_node_B.L_i == proc_control_node_B.i_nb)) {
        proc_control_node_xdlanv2(b_h[(proc_control_node_B.i_nb + 20 *
          (proc_control_node_B.i_nb - 1)) - 1], b_h[(proc_control_node_B.i_nb +
          20 * proc_control_node_B.i_nb) - 1], b_h[proc_control_node_B.i_nb + 20
          * (proc_control_node_B.i_nb - 1)], b_h[proc_control_node_B.i_nb + 20 *
          proc_control_node_B.i_nb], &proc_control_node_B.tst_g,
          &proc_control_node_B.bb_b, &proc_control_node_B.aa_d,
          &proc_control_node_B.htmp2_g, &b_h[(proc_control_node_B.i_nb + 20 *
          (proc_control_node_B.i_nb - 1)) - 1], &proc_control_node_B.t3_a,
          &proc_control_node_B.h21s_f, &proc_control_node_B.e_mq,
          &proc_control_node_B.s_dg, &proc_control_node_B.ba_a);
        proc_control_node_B.hoffset_p = proc_control_node_B.i_nb + 20 *
          proc_control_node_B.i_nb;
        b_h[proc_control_node_B.hoffset_p - 1] = proc_control_node_B.t3_a;
        proc_control_node_B.its = 20 * (proc_control_node_B.i_nb - 1);
        b_h[proc_control_node_B.i_nb + proc_control_node_B.its] =
          proc_control_node_B.h21s_f;
        b_h[proc_control_node_B.hoffset_p] = proc_control_node_B.e_mq;
        if (20 > proc_control_node_B.i_nb + 1) {
          proc_control_node_B.m_k = 19 - proc_control_node_B.i_nb;
          proc_control_node_B.s_tmp = (proc_control_node_B.i_nb + 1) * 20 +
            proc_control_node_B.i_nb;
          for (proc_control_node_B.k_e = 0; proc_control_node_B.k_e <
               proc_control_node_B.m_k; proc_control_node_B.k_e++) {
            proc_control_node_B.hoffset_p = proc_control_node_B.k_e * 20 +
              proc_control_node_B.s_tmp;
            proc_control_node_B.tst_g = b_h[proc_control_node_B.hoffset_p];
            proc_control_node_B.bb_b = b_h[proc_control_node_B.hoffset_p - 1];
            b_h[proc_control_node_B.hoffset_p] = proc_control_node_B.tst_g *
              proc_control_node_B.s_dg - proc_control_node_B.bb_b *
              proc_control_node_B.ba_a;
            b_h[proc_control_node_B.hoffset_p - 1] = proc_control_node_B.bb_b *
              proc_control_node_B.s_dg + proc_control_node_B.tst_g *
              proc_control_node_B.ba_a;
          }
        }

        memcpy(&proc_control_node_B.b_h[0], &b_h[0], 400U * sizeof(real_T));
        proc_control_node_xrot(proc_control_node_B.i_nb - 1,
          proc_control_node_B.b_h, proc_control_node_B.its + 1,
          proc_control_node_B.i_nb * 20 + 1, proc_control_node_B.s_dg,
          proc_control_node_B.ba_a, b_h);
      }

      proc_control_node_B.i_nb = proc_control_node_B.L_i - 2;
    }
  }
}

static void proc_control_node_xhseqr(const real_T h[400], real_T b_h[400],
  int32_T *info)
{
  proc_control_node_eml_dlahqr(h, b_h, info);
  proc_control_node_B.istart_k = 4;
  for (proc_control_node_B.b_j_n = 0; proc_control_node_B.b_j_n < 17;
       proc_control_node_B.b_j_n++) {
    if (proc_control_node_B.istart_k <= 20) {
      memset(&b_h[(proc_control_node_B.b_j_n * 20 + proc_control_node_B.istart_k)
             + -1], 0, (21 - proc_control_node_B.istart_k) * sizeof(real_T));
    }

    proc_control_node_B.istart_k++;
  }
}

static void proc_control_node_schur(real_T A[400], real_T V[400])
{
  boolean_T p;
  p = true;
  for (proc_control_node_B.istart_mc = 0; proc_control_node_B.istart_mc < 400;
       proc_control_node_B.istart_mc++) {
    if (p) {
      proc_control_node_B.x_e = A[proc_control_node_B.istart_mc];
      if ((!rtIsInf(proc_control_node_B.x_e)) && (!rtIsNaN
           (proc_control_node_B.x_e))) {
      } else {
        p = false;
      }
    } else {
      p = false;
    }
  }

  if (!p) {
    for (proc_control_node_B.istart_mc = 0; proc_control_node_B.istart_mc < 400;
         proc_control_node_B.istart_mc++) {
      V[proc_control_node_B.istart_mc] = (rtNaN);
    }

    proc_control_node_B.istart_mc = 2;
    for (proc_control_node_B.b_j_j = 0; proc_control_node_B.b_j_j < 19;
         proc_control_node_B.b_j_j++) {
      if (proc_control_node_B.istart_mc <= 20) {
        memset(&V[(proc_control_node_B.b_j_j * 20 +
                   proc_control_node_B.istart_mc) + -1], 0, (21 -
                proc_control_node_B.istart_mc) * sizeof(real_T));
      }

      proc_control_node_B.istart_mc++;
    }
  } else {
    memcpy(&proc_control_node_B.A_h[0], &A[0], 400U * sizeof(real_T));
    proc_control_node_xgehrd(proc_control_node_B.A_h, A);
    proc_control_node_xhseqr(A, V, &proc_control_node_B.istart_mc);
  }
}

static void proc_control_node_eig(const real_T A[400], creal_T V[20])
{
  int32_T exitg1;
  boolean_T exitg2;
  boolean_T p;
  p = true;
  for (proc_control_node_B.i_im = 0; proc_control_node_B.i_im < 400;
       proc_control_node_B.i_im++) {
    if (p) {
      proc_control_node_B.x_fs = A[proc_control_node_B.i_im];
      if ((!rtIsInf(proc_control_node_B.x_fs)) && (!rtIsNaN
           (proc_control_node_B.x_fs))) {
      } else {
        p = false;
      }
    } else {
      p = false;
    }
  }

  if (!p) {
    for (proc_control_node_B.i_im = 0; proc_control_node_B.i_im < 20;
         proc_control_node_B.i_im++) {
      V[proc_control_node_B.i_im].re = (rtNaN);
      V[proc_control_node_B.i_im].im = 0.0;
    }
  } else {
    p = true;
    proc_control_node_B.i_im = 0;
    exitg2 = false;
    while ((!exitg2) && (proc_control_node_B.i_im < 20)) {
      proc_control_node_B.b_i_k = 0;
      do {
        exitg1 = 0;
        if (proc_control_node_B.b_i_k <= proc_control_node_B.i_im) {
          if (!(A[20 * proc_control_node_B.i_im + proc_control_node_B.b_i_k] ==
                A[20 * proc_control_node_B.b_i_k + proc_control_node_B.i_im])) {
            p = false;
            exitg1 = 1;
          } else {
            proc_control_node_B.b_i_k++;
          }
        } else {
          proc_control_node_B.i_im++;
          exitg1 = 2;
        }
      } while (exitg1 == 0);

      if (exitg1 == 1) {
        exitg2 = true;
      }
    }

    if (p) {
      memcpy(&proc_control_node_B.A[0], &A[0], 400U * sizeof(real_T));
      proc_control_node_schur(proc_control_node_B.A, proc_control_node_B.T);
      for (proc_control_node_B.i_im = 0; proc_control_node_B.i_im < 20;
           proc_control_node_B.i_im++) {
        V[proc_control_node_B.i_im].re = proc_control_node_B.T[20 *
          proc_control_node_B.i_im + proc_control_node_B.i_im];
        V[proc_control_node_B.i_im].im = 0.0;
      }
    } else {
      proc_control_node_xzgeev(A, &proc_control_node_B.i_im, V,
        proc_control_node_B.beta1);
      for (proc_control_node_B.i_im = 0; proc_control_node_B.i_im < 20;
           proc_control_node_B.i_im++) {
        proc_control_node_B.V_m = V[proc_control_node_B.i_im];
        proc_control_node_B.x_fs = proc_control_node_B.V_m.re;
        proc_control_node_B.br_a =
          proc_control_node_B.beta1[proc_control_node_B.i_im].re;
        proc_control_node_B.bi_g =
          proc_control_node_B.beta1[proc_control_node_B.i_im].im;
        if (proc_control_node_B.bi_g == 0.0) {
          if (proc_control_node_B.V_m.im == 0.0) {
            proc_control_node_B.V_m.re /= proc_control_node_B.br_a;
            proc_control_node_B.V_m.im = 0.0;
          } else if (proc_control_node_B.V_m.re == 0.0) {
            proc_control_node_B.V_m.re = 0.0;
            proc_control_node_B.V_m.im /= proc_control_node_B.br_a;
          } else {
            proc_control_node_B.V_m.re /= proc_control_node_B.br_a;
            proc_control_node_B.V_m.im /= proc_control_node_B.br_a;
          }
        } else if (proc_control_node_B.br_a == 0.0) {
          if (proc_control_node_B.V_m.re == 0.0) {
            proc_control_node_B.V_m.re = proc_control_node_B.V_m.im /
              proc_control_node_B.bi_g;
            proc_control_node_B.V_m.im = 0.0;
          } else if (proc_control_node_B.V_m.im == 0.0) {
            proc_control_node_B.V_m.re = 0.0;
            proc_control_node_B.V_m.im = -(proc_control_node_B.x_fs /
              proc_control_node_B.bi_g);
          } else {
            proc_control_node_B.V_m.re = proc_control_node_B.V_m.im /
              proc_control_node_B.bi_g;
            proc_control_node_B.V_m.im = -(proc_control_node_B.x_fs /
              proc_control_node_B.bi_g);
          }
        } else {
          proc_control_node_B.brm_m = fabs(proc_control_node_B.br_a);
          proc_control_node_B.bim_d = fabs(proc_control_node_B.bi_g);
          if (proc_control_node_B.brm_m > proc_control_node_B.bim_d) {
            proc_control_node_B.brm_m = proc_control_node_B.bi_g /
              proc_control_node_B.br_a;
            proc_control_node_B.bi_g = proc_control_node_B.brm_m *
              proc_control_node_B.bi_g + proc_control_node_B.br_a;
            proc_control_node_B.V_m.re = (proc_control_node_B.brm_m *
              proc_control_node_B.V_m.im + proc_control_node_B.V_m.re) /
              proc_control_node_B.bi_g;
            proc_control_node_B.V_m.im = (proc_control_node_B.V_m.im -
              proc_control_node_B.brm_m * proc_control_node_B.x_fs) /
              proc_control_node_B.bi_g;
          } else if (proc_control_node_B.bim_d == proc_control_node_B.brm_m) {
            proc_control_node_B.br_a = proc_control_node_B.br_a > 0.0 ? 0.5 :
              -0.5;
            proc_control_node_B.bi_g = proc_control_node_B.bi_g > 0.0 ? 0.5 :
              -0.5;
            proc_control_node_B.V_m.re = (proc_control_node_B.V_m.re *
              proc_control_node_B.br_a + proc_control_node_B.V_m.im *
              proc_control_node_B.bi_g) / proc_control_node_B.brm_m;
            proc_control_node_B.V_m.im = (proc_control_node_B.V_m.im *
              proc_control_node_B.br_a - proc_control_node_B.x_fs *
              proc_control_node_B.bi_g) / proc_control_node_B.brm_m;
          } else {
            proc_control_node_B.brm_m = proc_control_node_B.br_a /
              proc_control_node_B.bi_g;
            proc_control_node_B.bi_g += proc_control_node_B.brm_m *
              proc_control_node_B.br_a;
            proc_control_node_B.V_m.re = (proc_control_node_B.brm_m *
              proc_control_node_B.V_m.re + proc_control_node_B.V_m.im) /
              proc_control_node_B.bi_g;
            proc_control_node_B.V_m.im = (proc_control_node_B.brm_m *
              proc_control_node_B.V_m.im - proc_control_node_B.x_fs) /
              proc_control_node_B.bi_g;
          }
        }

        V[proc_control_node_B.i_im] = proc_control_node_B.V_m;
      }
    }
  }
}

static real_T proc_control_node_leastEigvJtJ(const real_T Jtri[60])
{
  real_T lev;
  boolean_T exitg1;
  proc_control_node_B.bet_n = 0.0;
  for (proc_control_node_B.i_i = 0; proc_control_node_B.i_i < 20;
       proc_control_node_B.i_i++) {
    proc_control_node_B.oldq[proc_control_node_B.i_i] = 0.0;
    proc_control_node_B.q[proc_control_node_B.i_i] = 0.22360679774997896;
  }

  for (proc_control_node_B.b_idx_g = 0; proc_control_node_B.b_idx_g < 20;
       proc_control_node_B.b_idx_g++) {
    memcpy(&proc_control_node_B.v_c[0], &proc_control_node_B.q[0], 20U * sizeof
           (real_T));
    proc_control_no_solveHessian_b4(Jtri, proc_control_node_B.v_c);
    proc_control_node_B.q_f = 0.0;
    for (proc_control_node_B.i_i = 0; proc_control_node_B.i_i < 20;
         proc_control_node_B.i_i++) {
      proc_control_node_B.q_f += proc_control_node_B.q[proc_control_node_B.i_i] *
        proc_control_node_B.v_c[proc_control_node_B.i_i];
    }

    for (proc_control_node_B.i_i = 0; proc_control_node_B.i_i < 20;
         proc_control_node_B.i_i++) {
      proc_control_node_B.v_c[proc_control_node_B.i_i] =
        (proc_control_node_B.v_c[proc_control_node_B.i_i] -
         proc_control_node_B.bet_n *
         proc_control_node_B.oldq[proc_control_node_B.i_i]) -
        proc_control_node_B.q_f * proc_control_node_B.q[proc_control_node_B.i_i];
    }

    proc_control_node_B.bet_n = 0.0;
    proc_control_node_B.scale = 3.3121686421112381E-170;
    for (proc_control_node_B.i_i = 0; proc_control_node_B.i_i < 20;
         proc_control_node_B.i_i++) {
      proc_control_node_B.absxk = fabs
        (proc_control_node_B.v_c[proc_control_node_B.i_i]);
      if (proc_control_node_B.absxk > proc_control_node_B.scale) {
        proc_control_node_B.t_p = proc_control_node_B.scale /
          proc_control_node_B.absxk;
        proc_control_node_B.bet_n = proc_control_node_B.bet_n *
          proc_control_node_B.t_p * proc_control_node_B.t_p + 1.0;
        proc_control_node_B.scale = proc_control_node_B.absxk;
      } else {
        proc_control_node_B.t_p = proc_control_node_B.absxk /
          proc_control_node_B.scale;
        proc_control_node_B.bet_n += proc_control_node_B.t_p *
          proc_control_node_B.t_p;
      }

      proc_control_node_B.oldq[proc_control_node_B.i_i] =
        proc_control_node_B.q[proc_control_node_B.i_i];
    }

    proc_control_node_B.bet_n = proc_control_node_B.scale * sqrt
      (proc_control_node_B.bet_n);
    for (proc_control_node_B.i_i = 0; proc_control_node_B.i_i < 20;
         proc_control_node_B.i_i++) {
      proc_control_node_B.q[proc_control_node_B.i_i] =
        proc_control_node_B.v_c[proc_control_node_B.i_i] /
        proc_control_node_B.bet_n;
    }

    proc_control_node_B.beta_f[proc_control_node_B.b_idx_g] =
      proc_control_node_B.bet_n;
    proc_control_node_B.alpha[proc_control_node_B.b_idx_g] =
      proc_control_node_B.q_f;
  }

  memcpy(&proc_control_node_B.beta[0], &proc_control_node_B.beta_f[0], 19U *
         sizeof(real_T));
  memcpy(&proc_control_node_B.beta[19], &proc_control_node_B.alpha[0], 20U *
         sizeof(real_T));
  memcpy(&proc_control_node_B.beta[39], &proc_control_node_B.beta_f[0], 19U *
         sizeof(real_T));
  proc_control_node_accumarray(proc_control_node_B.beta, proc_control_node_B.dv2);
  proc_control_node_eig(proc_control_node_B.dv2, proc_control_node_B.x_cg);
  for (proc_control_node_B.i_i = 0; proc_control_node_B.i_i < 20;
       proc_control_node_B.i_i++) {
    proc_control_node_B.oldq[proc_control_node_B.i_i] =
      proc_control_node_rt_hypotd_snf
      (proc_control_node_B.x_cg[proc_control_node_B.i_i].re,
       proc_control_node_B.x_cg[proc_control_node_B.i_i].im);
  }

  if (!rtIsNaN(proc_control_node_B.oldq[0])) {
    proc_control_node_B.b_idx_g = 1;
  } else {
    proc_control_node_B.b_idx_g = 0;
    proc_control_node_B.i_i = 2;
    exitg1 = false;
    while ((!exitg1) && (proc_control_node_B.i_i <= 20)) {
      if (!rtIsNaN(proc_control_node_B.oldq[proc_control_node_B.i_i - 1])) {
        proc_control_node_B.b_idx_g = proc_control_node_B.i_i;
        exitg1 = true;
      } else {
        proc_control_node_B.i_i++;
      }
    }
  }

  if (proc_control_node_B.b_idx_g == 0) {
    proc_control_node_B.bet_n = proc_control_node_B.oldq[0];
  } else {
    proc_control_node_B.bet_n =
      proc_control_node_B.oldq[proc_control_node_B.b_idx_g - 1];
    for (proc_control_node_B.i_i = proc_control_node_B.b_idx_g + 1;
         proc_control_node_B.i_i < 21; proc_control_node_B.i_i++) {
      proc_control_node_B.q_f = proc_control_node_B.oldq[proc_control_node_B.i_i
        - 1];
      if (proc_control_node_B.bet_n > proc_control_node_B.q_f) {
        proc_control_node_B.bet_n = proc_control_node_B.q_f;
      }
    }
  }

  lev = 1.0 / proc_control_node_B.bet_n;
  return lev;
}

static void proc_control_node_fletcher(real_T S, real_T Snew, const real_T dx[20],
  const real_T v[20], const real_T Jtri[60], real_T lambda, real_T lambdac,
  real_T *b_lambda, real_T *b_lambdac)
{
  *b_lambdac = lambdac;
  *b_lambda = lambda;
  proc_control_node_B.z_tmp[19] = 0;
  proc_control_node_B.iv[0] = 19;
  proc_control_node_B.iv1[0] = 19;
  for (proc_control_node_B.z_tmp_m = 0; proc_control_node_B.z_tmp_m < 19;
       proc_control_node_B.z_tmp_m++) {
    proc_control_node_B.z_tmp[proc_control_node_B.z_tmp_m] = static_cast<int8_T>
      (proc_control_node_B.z_tmp_m + 1);
    proc_control_node_B.iv[proc_control_node_B.z_tmp_m + 1] = static_cast<int8_T>
      (proc_control_node_B.z_tmp_m);
    proc_control_node_B.iv1[proc_control_node_B.z_tmp_m + 1] =
      static_cast<int8_T>(proc_control_node_B.z_tmp_m);
    proc_control_node_B.z_tmp_f[proc_control_node_B.z_tmp_m] =
      static_cast<int8_T>(proc_control_node_B.z_tmp_m);
    proc_control_node_B.z_tmp_n[proc_control_node_B.z_tmp_m] =
      static_cast<int8_T>(proc_control_node_B.z_tmp_m + 1);
  }

  for (proc_control_node_B.i1 = 0; proc_control_node_B.i1 < 20;
       proc_control_node_B.i1++) {
    proc_control_node_B.z_iv[proc_control_node_B.i1] =
      (Jtri[proc_control_node_B.i1 + 20] * dx[proc_control_node_B.i1] +
       Jtri[proc_control_node_B.i1 + 40] *
       dx[proc_control_node_B.z_tmp[proc_control_node_B.i1]]) +
      Jtri[proc_control_node_B.iv[proc_control_node_B.i1]] *
      dx[proc_control_node_B.iv1[proc_control_node_B.i1]];
  }

  proc_control_node_B.z_tmp[19] = 0;
  proc_control_node_B.iv[0] = 19;
  proc_control_node_B.iv1[0] = 19;
  for (proc_control_node_B.i1 = 0; proc_control_node_B.i1 < 19;
       proc_control_node_B.i1++) {
    proc_control_node_B.z_tmp_m =
      proc_control_node_B.z_tmp_f[proc_control_node_B.i1];
    proc_control_node_B.z_tmp[proc_control_node_B.i1] =
      proc_control_node_B.z_tmp_n[proc_control_node_B.i1];
    proc_control_node_B.iv[proc_control_node_B.i1 + 1] = static_cast<int8_T>
      (proc_control_node_B.z_tmp_m);
    proc_control_node_B.iv1[proc_control_node_B.i1 + 1] = static_cast<int8_T>
      (proc_control_node_B.z_tmp_m);
  }

  proc_control_node_B.R_g = 0.0;
  for (proc_control_node_B.i1 = 0; proc_control_node_B.i1 < 20;
       proc_control_node_B.i1++) {
    proc_control_node_B.R_g += (2.0 * v[proc_control_node_B.i1] -
      ((Jtri[proc_control_node_B.i1 + 20] *
        proc_control_node_B.z_iv[proc_control_node_B.i1] +
        Jtri[proc_control_node_B.i1] *
        proc_control_node_B.z_iv[proc_control_node_B.z_tmp[proc_control_node_B.i1]])
       + Jtri[proc_control_node_B.iv[proc_control_node_B.i1] + 40] *
       proc_control_node_B.z_iv[proc_control_node_B.iv1[proc_control_node_B.i1]]))
      * dx[proc_control_node_B.i1];
  }

  proc_control_node_B.R_g = (S - Snew) / proc_control_node_B.R_g;
  if (proc_control_node_B.R_g > 0.75) {
    *b_lambda = lambda / 2.0;
    if (*b_lambda < lambdac) {
      *b_lambda = 0.0;
    }
  } else if (proc_control_node_B.R_g < 0.25) {
    proc_control_node_B.R_g = 0.0;
    for (proc_control_node_B.i1 = 0; proc_control_node_B.i1 < 20;
         proc_control_node_B.i1++) {
      proc_control_node_B.R_g += dx[proc_control_node_B.i1] *
        v[proc_control_node_B.i1];
    }

    proc_control_node_B.R_g = (Snew - S) / proc_control_node_B.R_g + 2.0;
    if ((2.0 > proc_control_node_B.R_g) || rtIsNaN(proc_control_node_B.R_g)) {
      proc_control_node_B.R_g = 2.0;
    }

    if (!(proc_control_node_B.R_g < 10.0)) {
      proc_control_node_B.R_g = 10.0;
    }

    if (lambda == 0.0) {
      *b_lambdac = proc_control_node_leastEigvJtJ(Jtri);
      *b_lambda = *b_lambdac;
      proc_control_node_B.R_g /= 2.0;
    }

    *b_lambda *= proc_control_node_B.R_g;
  }
}

static void proc_control_nod_LMFsolve_b4nwk(const real_T
  FUN_workspace_waypoints[63], real_T x[20])
{
  boolean_T exitg1;
  boolean_T exitg2;
  boolean_T y;
  proc_control_node_anon_b(FUN_workspace_waypoints, x, proc_control_node_B.b_r,
    proc_control_node_B.Jtri);
  proc_control_node_mulJt(proc_control_node_B.Jtri, proc_control_node_B.b_r,
    proc_control_node_B.v_hp);
  proc_control_node_B.S_i = 0.0;
  proc_control_node_B.lambda_p = 0.0;
  proc_control_node_B.lambdac_b = 0.75;
  proc_control_node_B.iter_ne = 0;
  for (proc_control_node_B.i_dz = 0; proc_control_node_B.i_dz < 20;
       proc_control_node_B.i_dz++) {
    proc_control_node_B.b_r_b = proc_control_node_B.b_r[proc_control_node_B.i_dz];
    proc_control_node_B.S_i += proc_control_node_B.b_r_b *
      proc_control_node_B.b_r_b;
    proc_control_node_B.dx[proc_control_node_B.i_dz] = 1.0E-7;
  }

  exitg1 = false;
  while ((!exitg1) && (proc_control_node_B.iter_ne < 2000)) {
    for (proc_control_node_B.i_dz = 0; proc_control_node_B.i_dz < 20;
         proc_control_node_B.i_dz++) {
      proc_control_node_B.x_p4[proc_control_node_B.i_dz] = (fabs
        (proc_control_node_B.dx[proc_control_node_B.i_dz]) >= 1.0E-7);
    }

    y = false;
    proc_control_node_B.i_dz = 0;
    exitg2 = false;
    while ((!exitg2) && (proc_control_node_B.i_dz < 20)) {
      if (!proc_control_node_B.x_p4[proc_control_node_B.i_dz]) {
        proc_control_node_B.i_dz++;
      } else {
        y = true;
        exitg2 = true;
      }
    }

    if (y) {
      for (proc_control_node_B.i_dz = 0; proc_control_node_B.i_dz < 20;
           proc_control_node_B.i_dz++) {
        proc_control_node_B.x_p4[proc_control_node_B.i_dz] = (fabs
          (proc_control_node_B.b_r[proc_control_node_B.i_dz]) >= 1.0E-7);
      }

      y = false;
      proc_control_node_B.i_dz = 0;
      exitg2 = false;
      while ((!exitg2) && (proc_control_node_B.i_dz < 20)) {
        if (!proc_control_node_B.x_p4[proc_control_node_B.i_dz]) {
          proc_control_node_B.i_dz++;
        } else {
          y = true;
          exitg2 = true;
        }
      }

      if (y) {
        proc_control_node_B.iter_ne++;
        proc_contr_solveDampenedHessian(proc_control_node_B.Jtri,
          proc_control_node_B.lambda_p, proc_control_node_B.v_hp,
          proc_control_node_B.dx);
        for (proc_control_node_B.i_dz = 0; proc_control_node_B.i_dz < 20;
             proc_control_node_B.i_dz++) {
          proc_control_node_B.xnew[proc_control_node_B.i_dz] =
            x[proc_control_node_B.i_dz] -
            proc_control_node_B.dx[proc_control_node_B.i_dz];
        }

        proc_control_node_anon_b(FUN_workspace_waypoints,
          proc_control_node_B.xnew, proc_control_node_B.b_varargout_1_f,
          proc_control_node_B.b_varargout_2);
        proc_control_node_B.b_r_b = 0.0;
        for (proc_control_node_B.i_dz = 0; proc_control_node_B.i_dz < 20;
             proc_control_node_B.i_dz++) {
          proc_control_node_B.b_varargout_1_j =
            proc_control_node_B.b_varargout_1_f[proc_control_node_B.i_dz];
          proc_control_node_B.b_r_b += proc_control_node_B.b_varargout_1_j *
            proc_control_node_B.b_varargout_1_j;
        }

        proc_control_node_fletcher(proc_control_node_B.S_i,
          proc_control_node_B.b_r_b, proc_control_node_B.dx,
          proc_control_node_B.v_hp, proc_control_node_B.Jtri,
          proc_control_node_B.lambda_p, proc_control_node_B.lambdac_b,
          &proc_control_node_B.lambda_p, &proc_control_node_B.lambdac_b);
        if (proc_control_node_B.b_r_b < proc_control_node_B.S_i) {
          proc_control_node_B.S_i = proc_control_node_B.b_r_b;
          memcpy(&x[0], &proc_control_node_B.xnew[0], 20U * sizeof(real_T));
          memcpy(&proc_control_node_B.b_r[0],
                 &proc_control_node_B.b_varargout_1_f[0], 20U * sizeof(real_T));
          memcpy(&proc_control_node_B.Jtri[0],
                 &proc_control_node_B.b_varargout_2[0], 60U * sizeof(real_T));
          proc_control_node_mulJt(proc_control_node_B.b_varargout_2,
            proc_control_node_B.b_varargout_1_f, proc_control_node_B.v_hp);
        }
      } else {
        exitg1 = true;
      }
    } else {
      exitg1 = true;
    }
  }
}

static void proc_contr_fitPartialCourseLoop(const real_T waypoints[63], real_T
  course[21])
{
  proc_control_node_dclothoidwp(&waypoints[0], &waypoints[21],
    proc_control_node_B.u, proc_control_node_B.v);
  memset(&course[0], 0, 21U * sizeof(real_T));
  course[0] = rt_atan2d_snf(proc_control_node_B.v[1] - proc_control_node_B.v[0],
    proc_control_node_B.u[1] - proc_control_node_B.u[0]);
  course[20] = rt_atan2d_snf(proc_control_node_B.v[2560] -
    proc_control_node_B.v[2559], proc_control_node_B.u[2560] -
    proc_control_node_B.u[2559]);
  for (proc_control_node_B.i_e = 0; proc_control_node_B.i_e < 19;
       proc_control_node_B.i_e++) {
    proc_control_node_B.course_tmp = (proc_control_node_B.i_e + 1) << 7;
    course[proc_control_node_B.i_e + 1] = rt_atan2d_snf
      (proc_control_node_B.v[proc_control_node_B.course_tmp] -
       proc_control_node_B.v[proc_control_node_B.course_tmp - 1],
       proc_control_node_B.u[proc_control_node_B.course_tmp] -
       proc_control_node_B.u[proc_control_node_B.course_tmp - 1]);
  }

  memcpy(&proc_control_node_B.courselsq[0], &course[0], 20U * sizeof(real_T));
  proc_control_nod_LMFsolve_b4nwk(waypoints, proc_control_node_B.courselsq);
  memcpy(&course[0], &proc_control_node_B.courselsq[0], 20U * sizeof(real_T));
  course[20] = proc_control_node_B.courselsq[0];
}

static void proc_clothoidG2fitMissingCourse(const real_T waypoints[63], real_T
  course[21])
{
  boolean_T exitg1;
  proc_control_node_B.p_h = false;
  proc_control_node_B.p_f = true;
  proc_control_node_B.i_nt = 0;
  exitg1 = false;
  while ((!exitg1) && (proc_control_node_B.i_nt < 2)) {
    if (!(waypoints[21 * proc_control_node_B.i_nt + 20] == waypoints[21 *
          proc_control_node_B.i_nt])) {
      proc_control_node_B.p_f = false;
      exitg1 = true;
    } else {
      proc_control_node_B.i_nt++;
    }
  }

  if (proc_control_node_B.p_f) {
    proc_control_node_B.p_h = true;
  }

  if (proc_control_node_B.p_h) {
    proc_contr_fitPartialCourseLoop(waypoints, course);
  } else {
    proc_control_node_B.tmp_size_b = 21;
    for (proc_control_node_B.i_nt = 0; proc_control_node_B.i_nt < 21;
         proc_control_node_B.i_nt++) {
      course[proc_control_node_B.i_nt] = (rtNaN);
      proc_control_node_B.b_tmp_data_tmp = proc_control_node_B.i_nt;
      proc_control_node_B.b_tmp_data[proc_control_node_B.b_tmp_data_tmp] =
        static_cast<int8_T>(proc_control_node_B.i_nt + 1);
      proc_control_node_B.tmp_data_n[proc_control_node_B.i_nt] = (rtNaN);
      proc_control_node_B.range_data[proc_control_node_B.b_tmp_data_tmp] =
        static_cast<int8_T>(proc_control_node_B.i_nt + 1);
    }

    proc_control_node_B.waypoints_size[0] = 21;
    proc_control_node_B.waypoints_size[1] = 3;
    for (proc_control_node_B.i_nt = 0; proc_control_node_B.i_nt < 3;
         proc_control_node_B.i_nt++) {
      for (proc_control_node_B.b_tmp_data_tmp = 0;
           proc_control_node_B.b_tmp_data_tmp < 21;
           proc_control_node_B.b_tmp_data_tmp++) {
        proc_control_node_B.waypoints_data[proc_control_node_B.b_tmp_data_tmp +
          21 * proc_control_node_B.i_nt] = waypoints[(21 *
          proc_control_node_B.i_nt +
          proc_control_node_B.range_data[proc_control_node_B.b_tmp_data_tmp]) -
          1];
      }
    }

    proc_control_node_fitCourse_b(proc_control_node_B.waypoints_data,
      proc_control_node_B.waypoints_size, proc_control_node_B.tmp_data_n,
      &proc_control_node_B.tmp_size_b);
    for (proc_control_node_B.i_nt = 0; proc_control_node_B.i_nt < 21;
         proc_control_node_B.i_nt++) {
      course[proc_control_node_B.b_tmp_data[proc_control_node_B.i_nt] - 1] =
        proc_control_node_B.tmp_data_n[proc_control_node_B.i_nt];
    }
  }
}

static void proc_control_node_fetchA(const real_T x[20], const real_T y[20],
  real_T a[20])
{
  static const real_T tmp[351] = { -1.5361481088532109E-40,
    -5.1782003708968662E-38, 5.8080516979367073E-38, -6.2922109794702842E-36,
    1.7744129415359022E-35, -9.8266873453160865E-36, -3.0557011816989596E-34,
    1.9988681524430764E-33, -2.7007621230825949E-33, 9.6497076628562535E-34,
    -8.50146594503621E-33, 8.7613736854720049E-32, -2.8258679893784358E-31,
    2.3637604856716169E-31, -5.8556266604372106E-32, -1.2863962524996432E-31,
    2.229093841830142E-30, -1.1057059963507232E-29, 2.3139349101185755E-29,
    -1.2630223562649489E-29, 2.0068564650639364E-30, -1.1052377502159136E-30,
    3.0309726719642508E-29, -2.57153235020298E-28, 7.9357820762496212E-28,
    -1.1834423538462616E-27, 3.7518152500494656E-28, -9.5988758699827141E-30,
    -5.8444661902772888E-30, 2.2799302267031842E-28, -3.118708591261201E-27,
    1.6937953593997347E-26, -3.4234259338177584E-26, 3.675290577810477E-26,
    -1.6183294340108731E-27, -2.9209077909746285E-27, -2.0493494333051533E-29,
    1.0232091530758262E-27, -2.0119872415420161E-26, 1.8157191663212143E-25,
    -6.8278782273948665E-25, 7.9289707228553727E-25, -5.1713140278139824E-25,
    -3.5757401738269863E-25, 1.7191521549607673E-25, -5.001307006229815E-29,
    2.9234616420394369E-27, -7.3372627735809734E-26, 9.6978563886575261E-25,
    -6.3976458551757164E-24, 1.6073455072306433E-23, -7.37463587795066E-25,
    -7.0522343048774666E-24, 1.4805755563608624E-23, -5.1965352404273039E-24,
    -8.5391792173019132E-29, 5.4962692899068422E-27, -1.5546891778194411E-25,
    2.6049795261751296E-24, -2.6172058881327836E-23, 1.2985982037510549E-22,
    -1.423772303418446E-22, -5.8282903661876709E-22, 4.1133508360308628E-22,
    -1.742659308147939E-22, 8.07786256209318E-23, -9.7738126735700558E-29,
    6.6212355845436972E-27, -1.7707072436748613E-25, 2.8057133511879665E-24,
    -3.4869970759687543E-23, 3.0241871214865029E-22, -9.92012310209099E-22,
    -3.2149566866116185E-21, 1.8710249707031661E-20, -1.2453541845369618E-21,
    -7.5062472154050874E-21, 2.8499865852964518E-22, -6.9207112182904389E-29,
    4.4179830835754724E-27, -4.4762524882779791E-26, -2.450817653228083E-24,
    7.1914140604820392E-23, -7.2673875098954476E-22, 3.3571441047866719E-21,
    -1.5906878744538782E-20, 1.0715370660853569E-19, -2.1813900762258771E-19,
    -3.7882773476137619E-19, 4.4188357957185649E-19, -5.2046323054922296E-20,
    -2.8170935396816464E-29, 7.8914114794548443E-28, 1.528966070127476E-25,
    -1.1332880987718864E-23, 3.3104475572268851E-22, -4.9647512138578754E-21,
    3.9715384015216385E-20, -1.6290821269847189E-19, 3.36612516663913E-19,
    -3.36275918384194E-19, -2.8323208988729979E-18, 1.5348780107717589E-17,
    -1.2231243924447674E-17, 1.5460269152965008E-18, -1.0350259940425787E-29,
    -4.7414043171551787E-28, 1.9707672417753685E-25, -1.4495788889042659E-23,
    5.1378340796211685E-22, -1.0210774519786583E-20, 1.165542649503511E-19,
    -7.1421779330877591E-19, 1.6365283191176908E-18, 4.9170568130837211E-18,
    -4.4186234291063853E-17, 1.6247947613884891E-16, -3.4187835062780104E-16,
    2.2495563268135524E-16, -2.8304172442233909E-17, -9.54190907880087E-30,
    4.33416352213585E-28, 7.30606772876727E-26, -8.4789175470441986E-24,
    3.9746370968729408E-22, -1.0350198533651566E-20, 1.589371276512773E-19,
    -1.3721089740423357E-18, 4.7868869804965763E-18, 1.9699426816042335E-17,
    -2.7595647699194014E-16, 1.2612122765846683E-15, -3.3199758280144047E-15,
    5.1284109097493322E-15, -2.9773954125181772E-15, 3.6686222388116938E-16,
    -7.13761114432792E-30, 8.6070327678610011E-28, -2.5253411261423782E-26,
    -1.429985806399278E-24, 1.4200678258817658E-22, -5.2901273901739912E-21,
    1.0879148930261737E-19, -1.2468905412479112E-18, 5.651703115185149E-18,
    4.073824764700649E-17, -7.7193016891576893E-16, 5.1280294092344238E-15,
    -1.8830251965098877E-14, 4.2082102420983456E-14, -5.4816521831539046E-14,
    2.9056289127761095E-14, -3.5049036301087839E-15, -2.7032712394278119E-30,
    4.4439845217679321E-28, -2.8561533629781625E-26, 7.4263493149653183E-25,
    7.7648205291611823E-24, -1.1313407629960782E-21, 3.4992489982228452E-20,
    -5.11237062122324E-19, 1.9082838069139238E-18, 6.02161124473958E-17,
    -1.1855133738581856E-15, 1.0647602057665829E-14, -5.5915318620809614E-14,
    1.8096099090326831E-13, -3.6385985586845819E-13, 4.2410069501559273E-13,
    -2.106362282048389E-13, 2.4385529408308407E-14, -4.8547818044528891E-31,
    9.5570081279537094E-29, -7.8572054752482576E-27, 3.3174769183447452E-25,
    -6.2142341258768858E-24, -5.0991712996566211E-23, 5.1392990708290932E-21,
    -8.807706142947147E-20, -5.8182766640448854E-19, 5.1419279154935842E-17,
    -1.04407697522146E-15, 1.1898094238539857E-14, -8.5367937011271162E-14,
    3.9513126620957262E-13, -1.1748533341492665E-12, 2.1917257282808794E-12,
    -2.3566809884820566E-12, 1.0795020408261728E-12, -1.5837465906955864E-13,
    -2.7533507225420422E-32, 5.7619182837708977E-30, -4.6471657116787863E-28,
    1.4048422360791874E-26, 3.7650962241144584E-25, -4.9228435831327322E-23,
    1.9071729205179347E-21, -3.3490783882201909E-20, -7.018689437542322E-20,
    1.8324124104655822E-17, -4.7883976550407734E-16, 7.0487303907715931E-15,
    -6.735734123826801E-14, 4.3114382655453385E-13, -1.8436618496422663E-12,
    5.1655481921478335E-12, -9.1498502333527442E-12, 9.53768065186612E-12,
    -5.5096965823391316E-12, -1.9256688414961511E-12, 2.6993907913031997E-33,
    -8.3658508533748674E-31, 1.2360111759498158E-28, -1.1391057286564071E-26,
    7.1943116140837765E-25, -3.2278401611187206E-23, 1.0313736180462972E-21,
    -2.2595952680170383E-20, 2.9013328570466337E-19, -1.4189880636575127E-19,
    -8.2575877751974837E-17, 1.9535524420193836E-15, -2.60333162544509E-14,
    2.2905798368369833E-13, -1.3730942326110817E-12, 5.5797967300488639E-12,
    -1.5044456366394642E-11, 2.5612747661164289E-11, -1.9627816796196334E-11,
    -2.8036172295220303E-11, -1.9615478304946413E-10, 3.8934925377973957E-34,
    -1.2639609126235819E-31, 1.9287682878359229E-29, -1.8332237204928374E-27,
    1.2092531131064511E-25, -5.8236835135326278E-24, 2.0915581782354698E-22,
    -5.5964099612773872E-21, 1.0833579869797173E-19, -1.3736666335311385E-18,
    6.6209633655847283E-18, 1.4362053626673917E-16, -4.0159095765450877E-15,
    5.320276578988179E-14, -4.5399145021925304E-13, 2.6343951113716903E-12,
    -1.0426603808524378E-11, 2.7378813158203465E-11, -2.4213032965198892E-11,
    -6.43589148489966E-11, 8.7111108876109732E-11, -1.58880825805031E-8,
    1.2049379324305816E-35, -4.3610770108214582E-33, 7.4936434757448969E-31,
    -8.1105245364317889E-29, 6.1705088386370215E-27, -3.480752271664829E-25,
    1.4948191338667704E-23, -4.9368146563727049E-22, 1.2499110582545291E-20,
    -2.3793207120554828E-19, 3.2322327482741956E-18, -2.6498507726404211E-17,
    7.8731033015748051E-18, 3.2775331491296092E-15, -5.1807698267687295E-14,
    4.62732644627914E-13, -2.7239785524170987E-12, 1.0896716883650769E-11,
    -1.8645986337651637E-11, 2.5459617591435155E-12, -1.3347654837468073E-8,
    1.3161132276731047E-7, -1.3227534741608429E-6, -9.7984625010885519E-38,
    3.2900432333335651E-35, -4.4581754057254838E-33, 2.5824817729473294E-31,
    5.2049615357860253E-30, -2.1583876518311414E-27, 1.9476950757610683E-25,
    -1.0716316264212252E-23, 4.1440657240625748E-22, -1.1817624319451798E-20,
    2.5249339155046378E-19, -4.0233948389965105E-18, 4.64169135391771E-17,
    -3.5476759515651092E-16, 1.1999262837080123E-15, 8.516412269170767E-15,
    -1.527199343162684E-13, 1.1449867637138848E-12, -3.6599461401055181E-12,
    -4.6103940452468584E-11, -4.7424213964325014E-9, 1.4095535848735113E-8,
    1.1415162393763462E-5, -0.00011904761791914855, -7.7487127476207258E-39,
    3.1576790378728681E-36, -5.9250135047007422E-34, 6.7643789484475193E-32,
    -5.220570875188387E-30, 2.8506788574160792E-28, -1.1098370767710674E-26,
    2.9468645436878283E-25, -4.2328657438375513E-24, -3.3901276335768838E-23,
    3.8407990599986091E-21, -1.1933448342985106E-19, 2.3702576054378613E-18,
    -3.3709086299905129E-17, 3.5240422748635714E-16, -2.688297081936284E-15,
    1.4426938768292247E-14, -4.5785087028675909E-14, 1.6710103243486247E-14,
    -1.1024143067873009E-11, -3.3079062392811025E-10, 2.8376658214791753E-8,
    2.8265347449301076E-6, 3.9682541488440042E-5, -0.016666666666889381,
    -8.6841596356231729E-42, 3.1939131296905081E-39, -4.8490390875687847E-37,
    3.2729122440862841E-35, 5.3980586162289553E-34, -3.3686936226391223E-31,
    3.7197707807256541E-29, -2.5380412938111731E-27, 1.2494404817163045E-25,
    -4.6966036280739172E-24, 1.3852307187625331E-22, -3.2509821682467773E-21,
    6.1100085267801761E-20, -9.20594856358596E-19, 1.1081925404564449E-17,
    -1.0575868027372313E-16, 7.920139233623936E-16, -4.5514965597202215E-15,
    1.3296256931854534E-14, -3.345171633728989E-13, 1.7101904098836834E-11,
    2.4300392651460408E-9, 4.6155748216027864E-8, -1.5460729722609369E-5,
    -0.00238095238099261, 1.0000000000000047 };

  const real_T *c;
  for (proc_control_node_B.b_k_bl = 0; proc_control_node_B.b_k_bl < 20;
       proc_control_node_B.b_k_bl++) {
    proc_control_node_B.i_f = y[proc_control_node_B.b_k_bl];
    proc_control_node_B.j_m = x[proc_control_node_B.b_k_bl];
    proc_control_node_B.v_n = proc_control_node_B.j_m + proc_control_node_B.i_f;
    proc_control_node_B.r_j[proc_control_node_B.b_k_bl] =
      proc_control_node_rt_powd_snf(proc_control_node_B.j_m -
      proc_control_node_B.i_f, 2.0);
    proc_control_node_B.u_j[proc_control_node_B.b_k_bl] =
      proc_control_node_rt_powd_snf(proc_control_node_B.v_n, 2.0);
    proc_control_node_B.v_g[proc_control_node_B.b_k_bl] =
      proc_control_node_B.v_n;
  }

  c = &tmp[0];
  proc_control_node_B.n_i = 351;
  for (proc_control_node_B.b_k_bl = 0; proc_control_node_B.b_k_bl < 25;
       proc_control_node_B.b_k_bl++) {
    proc_control_node_B.ibtile = proc_control_node_B.b_k_bl * 20 - 1;
    memcpy(&proc_control_node_B.b[proc_control_node_B.ibtile + 1],
           &proc_control_node_B.r_j[0], 20U * sizeof(real_T));
  }

  for (proc_control_node_B.b_k_bl = 0; proc_control_node_B.b_k_bl < 20;
       proc_control_node_B.b_k_bl++) {
    proc_control_node_B.dv1[proc_control_node_B.b_k_bl] = 1.0;
  }

  memcpy(&proc_control_node_B.dv1[20], &proc_control_node_B.b[0], 500U * sizeof
         (real_T));
  proc_control_nod_useConstantDim(proc_control_node_B.dv1,
    proc_control_node_B.x_m);
  for (proc_control_node_B.b_k_bl = 0; proc_control_node_B.b_k_bl < 25;
       proc_control_node_B.b_k_bl++) {
    proc_control_node_B.ibtile = proc_control_node_B.b_k_bl * 20 - 1;
    memcpy(&proc_control_node_B.b[proc_control_node_B.ibtile + 1],
           &proc_control_node_B.u_j[0], 20U * sizeof(real_T));
  }

  for (proc_control_node_B.b_k_bl = 0; proc_control_node_B.b_k_bl < 20;
       proc_control_node_B.b_k_bl++) {
    proc_control_node_B.dv1[proc_control_node_B.b_k_bl] = 1.0;
  }

  memcpy(&proc_control_node_B.dv1[20], &proc_control_node_B.b[0], 500U * sizeof
         (real_T));
  proc_control_nod_useConstantDim(proc_control_node_B.dv1,
    proc_control_node_B.x_c);
  memset(&a[0], 0, 20U * sizeof(real_T));
  proc_control_node_B.i_f = 0.0;
  proc_control_node_B.j_m = 0.0;
  while (proc_control_node_B.n_i > 0) {
    proc_control_node_B.v_n = c[proc_control_node_B.n_i - 1];
    for (proc_control_node_B.b_k_bl = 0; proc_control_node_B.b_k_bl < 20;
         proc_control_node_B.b_k_bl++) {
      a[proc_control_node_B.b_k_bl] += proc_control_node_B.x_m
        [(static_cast<int32_T>(proc_control_node_B.i_f + 1.0) - 1) * 20 +
        proc_control_node_B.b_k_bl] * proc_control_node_B.v_n *
        proc_control_node_B.x_c[(static_cast<int32_T>(proc_control_node_B.j_m +
        1.0) - 1) * 20 + proc_control_node_B.b_k_bl];
    }

    proc_control_node_B.j_m++;
    if (proc_control_node_B.i_f + proc_control_node_B.j_m > 25.0) {
      proc_control_node_B.i_f++;
      proc_control_node_B.j_m = 0.0;
    }

    proc_control_node_B.n_i--;
  }

  for (proc_control_node_B.b_k_bl = 0; proc_control_node_B.b_k_bl < 20;
       proc_control_node_B.b_k_bl++) {
    a[proc_control_node_B.b_k_bl] *= 3.0 *
      proc_control_node_B.v_g[proc_control_node_B.b_k_bl];
  }
}

static void proc_control_node_fresnelg1_b4(const real_T a[20], const real_T d[20],
  const real_T c[20], creal_T z[20])
{
  for (proc_control_node_B.b_k_js = 0; proc_control_node_B.b_k_js < 20;
       proc_control_node_B.b_k_js++) {
    proc_control_node_B.a_mc = a[proc_control_node_B.b_k_js];
    z[proc_control_node_B.b_k_js].re = 0.0;
    z[proc_control_node_B.b_k_js].im = 0.0;
    proc_control_node_B.criteria_d[proc_control_node_B.b_k_js] = (fabs
      (proc_control_node_rt_powd_snf(d[proc_control_node_B.b_k_js] -
      proc_control_node_B.a_mc, 2.0) / (4.0 * proc_control_node_B.a_mc)) <
      628.31853071795865);
  }

  proc_control_node_eml_find(proc_control_node_B.criteria_d,
    proc_control_node_B.tmp_data_ft, &proc_control_node_B.tmp_size_mq);
  proc_control_node_B.ilarge_size_idx_0_b = proc_control_node_B.tmp_size_mq;
  proc_control_node_B.b_k_js = proc_control_node_B.tmp_size_mq;
  if (0 <= proc_control_node_B.b_k_js - 1) {
    memcpy(&proc_control_node_B.ilarge_data_m[0],
           &proc_control_node_B.tmp_data_ft[0], proc_control_node_B.b_k_js *
           sizeof(int32_T));
  }

  for (proc_control_node_B.nx_m = 0; proc_control_node_B.nx_m < 20;
       proc_control_node_B.nx_m++) {
    proc_control_node_B.criteria_m[proc_control_node_B.nx_m] =
      !proc_control_node_B.criteria_d[proc_control_node_B.nx_m];
  }

  proc_control_node_eml_find(proc_control_node_B.criteria_m,
    proc_control_node_B.tmp_data_ft, &proc_control_node_B.tmp_size_mq);
  proc_control_node_B.ismall_size_idx_0_p = proc_control_node_B.tmp_size_mq;
  proc_control_node_B.b_k_js = proc_control_node_B.tmp_size_mq;
  if (0 <= proc_control_node_B.b_k_js - 1) {
    memcpy(&proc_control_node_B.ismall_data_kt[0],
           &proc_control_node_B.tmp_data_ft[0], proc_control_node_B.b_k_js *
           sizeof(int32_T));
  }

  for (proc_control_node_B.nx_m = 0; proc_control_node_B.nx_m < 20;
       proc_control_node_B.nx_m++) {
    proc_control_node_B.criteria_d[proc_control_node_B.nx_m] =
      ((d[proc_control_node_B.nx_m] == 0.0) && (a[proc_control_node_B.nx_m] ==
        0.0));
  }

  proc_control_node_eml_find(proc_control_node_B.criteria_d,
    proc_control_node_B.tmp_data_ft, &proc_control_node_B.tmp_size_mq);
  proc_control_node_B.izero_size_idx_0_i = proc_control_node_B.tmp_size_mq;
  proc_control_node_B.b_k_js = proc_control_node_B.tmp_size_mq;
  if (0 <= proc_control_node_B.b_k_js - 1) {
    memcpy(&proc_control_node_B.izero_data_a[0],
           &proc_control_node_B.tmp_data_ft[0], proc_control_node_B.b_k_js *
           sizeof(int32_T));
  }

  if (proc_control_node_B.ilarge_size_idx_0_b != 0) {
    proc_control_node_B.a_size_n = proc_control_node_B.ilarge_size_idx_0_b;
    for (proc_control_node_B.nx_m = 0; proc_control_node_B.nx_m <
         proc_control_node_B.ilarge_size_idx_0_b; proc_control_node_B.nx_m++) {
      proc_control_node_B.a_data_m[proc_control_node_B.nx_m] =
        a[proc_control_node_B.ilarge_data_m[proc_control_node_B.nx_m] - 1];
    }

    proc_control_node_B.d_size_e = proc_control_node_B.ilarge_size_idx_0_b;
    for (proc_control_node_B.nx_m = 0; proc_control_node_B.nx_m <
         proc_control_node_B.ilarge_size_idx_0_b; proc_control_node_B.nx_m++) {
      proc_control_node_B.d_data_a[proc_control_node_B.nx_m] =
        d[proc_control_node_B.ilarge_data_m[proc_control_node_B.nx_m] - 1];
    }

    proc_control_node_B.c_size_c = proc_control_node_B.ilarge_size_idx_0_b;
    for (proc_control_node_B.nx_m = 0; proc_control_node_B.nx_m <
         proc_control_node_B.ilarge_size_idx_0_b; proc_control_node_B.nx_m++) {
      proc_control_node_B.c_data_hi[proc_control_node_B.nx_m] =
        c[proc_control_node_B.ilarge_data_m[proc_control_node_B.nx_m] - 1];
    }

    proc_control_no_fresnelgLargea1(proc_control_node_B.a_data_m,
      &proc_control_node_B.a_size_n, proc_control_node_B.d_data_a,
      &proc_control_node_B.d_size_e, proc_control_node_B.c_data_hi,
      &proc_control_node_B.c_size_c, proc_control_node_B.b_data_f,
      &proc_control_node_B.b_size_hu, proc_control_node_B.e_data_db,
      &proc_control_node_B.e_size_ct);
    proc_control_node_B.b_k_js = proc_control_node_B.b_size_hu;
    for (proc_control_node_B.nx_m = 0; proc_control_node_B.nx_m <
         proc_control_node_B.b_k_js; proc_control_node_B.nx_m++) {
      z[proc_control_node_B.ilarge_data_m[proc_control_node_B.nx_m] - 1] =
        proc_control_node_B.b_data_f[proc_control_node_B.nx_m];
    }
  }

  if (proc_control_node_B.ismall_size_idx_0_p != 0) {
    proc_control_node_B.a_size_n = proc_control_node_B.ismall_size_idx_0_p;
    for (proc_control_node_B.nx_m = 0; proc_control_node_B.nx_m <
         proc_control_node_B.ismall_size_idx_0_p; proc_control_node_B.nx_m++) {
      proc_control_node_B.a_data_m[proc_control_node_B.nx_m] =
        a[proc_control_node_B.ismall_data_kt[proc_control_node_B.nx_m] - 1];
    }

    proc_control_node_B.d_size_e = proc_control_node_B.ismall_size_idx_0_p;
    for (proc_control_node_B.nx_m = 0; proc_control_node_B.nx_m <
         proc_control_node_B.ismall_size_idx_0_p; proc_control_node_B.nx_m++) {
      proc_control_node_B.d_data_a[proc_control_node_B.nx_m] =
        d[proc_control_node_B.ismall_data_kt[proc_control_node_B.nx_m] - 1];
    }

    proc_control_node_B.c_size_c = proc_control_node_B.ismall_size_idx_0_p;
    for (proc_control_node_B.nx_m = 0; proc_control_node_B.nx_m <
         proc_control_node_B.ismall_size_idx_0_p; proc_control_node_B.nx_m++) {
      proc_control_node_B.c_data_hi[proc_control_node_B.nx_m] =
        c[proc_control_node_B.ismall_data_kt[proc_control_node_B.nx_m] - 1];
    }

    proc_control_no_fresnelgSmalla1(proc_control_node_B.a_data_m,
      &proc_control_node_B.a_size_n, proc_control_node_B.d_data_a,
      &proc_control_node_B.d_size_e, proc_control_node_B.c_data_hi,
      &proc_control_node_B.c_size_c, proc_control_node_B.b_data_f,
      &proc_control_node_B.b_size_hu, proc_control_node_B.e_data_db,
      &proc_control_node_B.e_size_ct);
    proc_control_node_B.b_k_js = proc_control_node_B.b_size_hu;
    for (proc_control_node_B.nx_m = 0; proc_control_node_B.nx_m <
         proc_control_node_B.b_k_js; proc_control_node_B.nx_m++) {
      z[proc_control_node_B.ismall_data_kt[proc_control_node_B.nx_m] - 1] =
        proc_control_node_B.b_data_f[proc_control_node_B.nx_m];
    }
  }

  if (proc_control_node_B.tmp_size_mq != 0) {
    for (proc_control_node_B.nx_m = 0; proc_control_node_B.nx_m <
         proc_control_node_B.izero_size_idx_0_i; proc_control_node_B.nx_m++) {
      proc_control_node_B.a_mc =
        c[proc_control_node_B.izero_data_a[proc_control_node_B.nx_m] - 1];
      proc_control_node_B.b_data_f[proc_control_node_B.nx_m].re =
        proc_control_node_B.a_mc * 0.0;
      proc_control_node_B.b_data_f[proc_control_node_B.nx_m].im =
        proc_control_node_B.a_mc;
    }

    proc_control_node_B.nx_m = proc_control_node_B.tmp_size_mq - 1;
    for (proc_control_node_B.b_k_js = 0; proc_control_node_B.b_k_js <=
         proc_control_node_B.nx_m; proc_control_node_B.b_k_js++) {
      proc_control_node_B.b_hx =
        proc_control_node_B.b_data_f[proc_control_node_B.b_k_js];
      if (proc_control_node_B.b_hx.im == 0.0) {
        proc_control_node_B.a_mc = exp(proc_control_node_B.b_hx.re);
        proc_control_node_B.r_mg = 0.0;
      } else if (rtIsInf(proc_control_node_B.b_hx.im) && rtIsInf
                 (proc_control_node_B.b_hx.re) && (proc_control_node_B.b_hx.re <
                  0.0)) {
        proc_control_node_B.a_mc = 0.0;
        proc_control_node_B.r_mg = 0.0;
      } else {
        proc_control_node_B.r_mg = exp(proc_control_node_B.b_hx.re / 2.0);
        proc_control_node_B.a_mc = proc_control_node_B.r_mg * cos
          (proc_control_node_B.b_hx.im) * proc_control_node_B.r_mg;
        proc_control_node_B.r_mg *= proc_control_node_B.r_mg * sin
          (proc_control_node_B.b_hx.im);
      }

      proc_control_node_B.b_hx.re = proc_control_node_B.a_mc;
      proc_control_node_B.b_hx.im = proc_control_node_B.r_mg;
      proc_control_node_B.b_data_f[proc_control_node_B.b_k_js] =
        proc_control_node_B.b_hx;
    }

    proc_control_node_B.b_k_js = proc_control_node_B.tmp_size_mq;
    for (proc_control_node_B.nx_m = 0; proc_control_node_B.nx_m <
         proc_control_node_B.b_k_js; proc_control_node_B.nx_m++) {
      z[proc_control_node_B.izero_data_a[proc_control_node_B.nx_m] - 1] =
        proc_control_node_B.b_data_f[proc_control_node_B.nx_m];
    }
  }
}

static void proc_contro_clothoidG1fit2wp_b4(const creal_T z0[20], const real_T
  theta0[20], const creal_T z1[20], const real_T theta1[20], real_T k0[20],
  real_T k1[20], real_T l[20])
{
  for (proc_control_node_B.b_k_i = 0; proc_control_node_B.b_k_i < 20;
       proc_control_node_B.b_k_i++) {
    proc_control_node_B.z_k.re = z1[proc_control_node_B.b_k_i].re -
      z0[proc_control_node_B.b_k_i].re;
    proc_control_node_B.z_k.im = z1[proc_control_node_B.b_k_i].im -
      z0[proc_control_node_B.b_k_i].im;
    proc_control_node_B.phi_k = rt_atan2d_snf(proc_control_node_B.z_k.im,
      proc_control_node_B.z_k.re);
    proc_control_node_B.b_x_tmp_m = theta0[proc_control_node_B.b_k_i] -
      proc_control_node_B.phi_k;
    proc_control_node_B.b_x_b.re = proc_control_node_B.b_x_tmp_m * 0.0;
    if (proc_control_node_B.b_x_tmp_m == 0.0) {
      proc_control_node_B.a_re_d = exp(proc_control_node_B.b_x_b.re);
      proc_control_node_B.b_x_tmp_m = 0.0;
    } else if (rtIsInf(proc_control_node_B.b_x_tmp_m) && rtIsInf
               (proc_control_node_B.b_x_b.re) && (proc_control_node_B.b_x_b.re <
                0.0)) {
      proc_control_node_B.a_re_d = 0.0;
      proc_control_node_B.b_x_tmp_m = 0.0;
    } else {
      proc_control_node_B.r_p = exp(proc_control_node_B.b_x_b.re / 2.0);
      proc_control_node_B.a_re_d = proc_control_node_B.r_p * cos
        (proc_control_node_B.b_x_tmp_m) * proc_control_node_B.r_p;
      proc_control_node_B.b_x_tmp_m = proc_control_node_B.r_p * sin
        (proc_control_node_B.b_x_tmp_m) * proc_control_node_B.r_p;
    }

    proc_control_node_B.phi0_o[proc_control_node_B.b_k_i] = rt_atan2d_snf
      (proc_control_node_B.b_x_tmp_m, proc_control_node_B.a_re_d);
    proc_control_node_B.b_x_tmp_m = theta1[proc_control_node_B.b_k_i] -
      proc_control_node_B.phi_k;
    proc_control_node_B.b_x_b.re = proc_control_node_B.b_x_tmp_m * 0.0;
    proc_control_node_B.b_x_b.im = proc_control_node_B.b_x_tmp_m;
    proc_control_node_B.z_i[proc_control_node_B.b_k_i] = proc_control_node_B.z_k;
    proc_control_node_B.b_x_d[proc_control_node_B.b_k_i] =
      proc_control_node_B.b_x_b;
  }

  for (proc_control_node_B.b_k_i = 0; proc_control_node_B.b_k_i < 20;
       proc_control_node_B.b_k_i++) {
    proc_control_node_B.b_x_b =
      proc_control_node_B.b_x_d[proc_control_node_B.b_k_i];
    if (proc_control_node_B.b_x_b.im == 0.0) {
      proc_control_node_B.a_re_d = exp(proc_control_node_B.b_x_b.re);
      proc_control_node_B.b_x_tmp_m = 0.0;
    } else if (rtIsInf(proc_control_node_B.b_x_b.im) && rtIsInf
               (proc_control_node_B.b_x_b.re) && (proc_control_node_B.b_x_b.re <
                0.0)) {
      proc_control_node_B.a_re_d = 0.0;
      proc_control_node_B.b_x_tmp_m = 0.0;
    } else {
      proc_control_node_B.r_p = exp(proc_control_node_B.b_x_b.re / 2.0);
      proc_control_node_B.a_re_d = proc_control_node_B.r_p * cos
        (proc_control_node_B.b_x_b.im) * proc_control_node_B.r_p;
      proc_control_node_B.b_x_tmp_m = proc_control_node_B.r_p * sin
        (proc_control_node_B.b_x_b.im) * proc_control_node_B.r_p;
    }

    proc_control_node_B.b_x_b.re = proc_control_node_B.a_re_d;
    proc_control_node_B.b_x_b.im = proc_control_node_B.b_x_tmp_m;
    proc_control_node_B.phi1_a[proc_control_node_B.b_k_i] = rt_atan2d_snf
      (proc_control_node_B.b_x_tmp_m, proc_control_node_B.a_re_d);
    proc_control_node_B.b_x_d[proc_control_node_B.b_k_i] =
      proc_control_node_B.b_x_b;
  }

  proc_control_node_fetchA(proc_control_node_B.phi0_o,
    proc_control_node_B.phi1_a, proc_control_node_B.phi_m);
  for (proc_control_node_B.b_k_i = 0; proc_control_node_B.b_k_i < 20;
       proc_control_node_B.b_k_i++) {
    k1[proc_control_node_B.b_k_i] =
      proc_control_node_B.phi1_a[proc_control_node_B.b_k_i] -
      proc_control_node_B.phi0_o[proc_control_node_B.b_k_i];
    l[proc_control_node_B.b_k_i] = proc_control_node_rt_hypotd_snf
      (proc_control_node_B.z_i[proc_control_node_B.b_k_i].re,
       proc_control_node_B.z_i[proc_control_node_B.b_k_i].im);
  }

  proc_control_node_fresnelg1_b4(proc_control_node_B.phi_m, k1,
    proc_control_node_B.phi0_o, proc_control_node_B.z_i);
  for (proc_control_node_B.b_k_i = 0; proc_control_node_B.b_k_i < 20;
       proc_control_node_B.b_k_i++) {
    proc_control_node_B.a_re_d = k1[proc_control_node_B.b_k_i];
    proc_control_node_B.phi_k =
      proc_control_node_B.phi_m[proc_control_node_B.b_k_i];
    proc_control_node_B.b_x_tmp_m = l[proc_control_node_B.b_k_i] /
      proc_control_node_B.z_i[proc_control_node_B.b_k_i].re;
    k0[proc_control_node_B.b_k_i] = (proc_control_node_B.a_re_d -
      proc_control_node_B.phi_k) / proc_control_node_B.b_x_tmp_m;
    proc_control_node_B.a_re_d = (proc_control_node_B.a_re_d +
      proc_control_node_B.phi_k) / proc_control_node_B.b_x_tmp_m;
    if (proc_control_node_B.b_x_tmp_m == 0.0) {
      k0[proc_control_node_B.b_k_i] = 0.0;
      proc_control_node_B.a_re_d = 0.0;
    }

    k1[proc_control_node_B.b_k_i] = proc_control_node_B.a_re_d;
    l[proc_control_node_B.b_k_i] = proc_control_node_B.b_x_tmp_m;
  }
}

static void proc_control_node_pchip(const real_T x[21], const real_T y[21],
  real_T v_breaks[21], real_T v_coefs[80])
{
  real_T w1;
  real_T w2;
  int32_T b_k;
  for (b_k = 0; b_k < 20; b_k++) {
    w2 = x[b_k + 1] - x[b_k];
    proc_control_node_B.del[b_k] = (y[b_k + 1] - y[b_k]) / w2;
    proc_control_node_B.h_g[b_k] = w2;
  }

  for (b_k = 0; b_k < 19; b_k++) {
    w2 = proc_control_node_B.h_g[b_k + 1];
    proc_control_node_B.hs = proc_control_node_B.h_g[b_k] + w2;
    proc_control_node_B.hs3 = 3.0 * proc_control_node_B.hs;
    w1 = (proc_control_node_B.h_g[b_k] + proc_control_node_B.hs) /
      proc_control_node_B.hs3;
    w2 = (w2 + proc_control_node_B.hs) / proc_control_node_B.hs3;
    proc_control_node_B.slopes[b_k + 1] = 0.0;
    if (proc_control_node_B.del[b_k] < 0.0) {
      proc_control_node_B.hs = proc_control_node_B.del[b_k + 1];
      if (proc_control_node_B.hs <= proc_control_node_B.del[b_k]) {
        proc_control_node_B.slopes[b_k + 1] = proc_control_node_B.del[b_k] /
          (proc_control_node_B.del[b_k] / proc_control_node_B.hs * w1 + w2);
      } else if (proc_control_node_B.hs < 0.0) {
        proc_control_node_B.slopes[b_k + 1] = proc_control_node_B.hs /
          (proc_control_node_B.hs / proc_control_node_B.del[b_k] * w2 + w1);
      }
    } else if (proc_control_node_B.del[b_k] > 0.0) {
      proc_control_node_B.hs = proc_control_node_B.del[b_k + 1];
      if (proc_control_node_B.hs >= proc_control_node_B.del[b_k]) {
        proc_control_node_B.slopes[b_k + 1] = proc_control_node_B.del[b_k] /
          (proc_control_node_B.del[b_k] / proc_control_node_B.hs * w1 + w2);
      } else if (proc_control_node_B.hs > 0.0) {
        proc_control_node_B.slopes[b_k + 1] = proc_control_node_B.hs /
          (proc_control_node_B.hs / proc_control_node_B.del[b_k] * w2 + w1);
      }
    }
  }

  w2 = ((2.0 * proc_control_node_B.h_g[0] + proc_control_node_B.h_g[1]) *
        proc_control_node_B.del[0] - proc_control_node_B.h_g[0] *
        proc_control_node_B.del[1]) / (proc_control_node_B.h_g[0] +
    proc_control_node_B.h_g[1]);
  if (proc_control_node_B.del[0] < 0.0) {
    proc_control_node_B.hs = -1.0;
  } else if (proc_control_node_B.del[0] > 0.0) {
    proc_control_node_B.hs = 1.0;
  } else if (proc_control_node_B.del[0] == 0.0) {
    proc_control_node_B.hs = 0.0;
  } else {
    proc_control_node_B.hs = (rtNaN);
  }

  if (w2 < 0.0) {
    w1 = -1.0;
  } else if (w2 > 0.0) {
    w1 = 1.0;
  } else if (w2 == 0.0) {
    w1 = 0.0;
  } else {
    w1 = (rtNaN);
  }

  if (w1 != proc_control_node_B.hs) {
    w2 = 0.0;
  } else {
    if (proc_control_node_B.del[1] < 0.0) {
      w1 = -1.0;
    } else if (proc_control_node_B.del[1] > 0.0) {
      w1 = 1.0;
    } else if (proc_control_node_B.del[1] == 0.0) {
      w1 = 0.0;
    } else {
      w1 = (rtNaN);
    }

    if ((proc_control_node_B.hs != w1) && (fabs(w2) > fabs(3.0 *
          proc_control_node_B.del[0]))) {
      w2 = 3.0 * proc_control_node_B.del[0];
    }
  }

  proc_control_node_B.slopes[0] = w2;
  w2 = ((2.0 * proc_control_node_B.h_g[19] + proc_control_node_B.h_g[18]) *
        proc_control_node_B.del[19] - proc_control_node_B.del[18] *
        proc_control_node_B.h_g[19]) / (proc_control_node_B.h_g[18] +
    proc_control_node_B.h_g[19]);
  if (proc_control_node_B.del[19] < 0.0) {
    proc_control_node_B.hs = -1.0;
  } else if (proc_control_node_B.del[19] > 0.0) {
    proc_control_node_B.hs = 1.0;
  } else if (proc_control_node_B.del[19] == 0.0) {
    proc_control_node_B.hs = 0.0;
  } else {
    proc_control_node_B.hs = (rtNaN);
  }

  if (w2 < 0.0) {
    w1 = -1.0;
  } else if (w2 > 0.0) {
    w1 = 1.0;
  } else if (w2 == 0.0) {
    w1 = 0.0;
  } else {
    w1 = (rtNaN);
  }

  if (w1 != proc_control_node_B.hs) {
    w2 = 0.0;
  } else {
    if (proc_control_node_B.del[18] < 0.0) {
      w1 = -1.0;
    } else if (proc_control_node_B.del[18] > 0.0) {
      w1 = 1.0;
    } else if (proc_control_node_B.del[18] == 0.0) {
      w1 = 0.0;
    } else {
      w1 = (rtNaN);
    }

    if ((proc_control_node_B.hs != w1) && (fabs(w2) > fabs(3.0 *
          proc_control_node_B.del[19]))) {
      w2 = 3.0 * proc_control_node_B.del[19];
    }
  }

  proc_control_node_B.slopes[20] = w2;
  for (b_k = 0; b_k < 20; b_k++) {
    w2 = proc_control_node_B.h_g[b_k];
    w1 = proc_control_node_B.del[b_k];
    proc_control_node_B.hs = (w1 - proc_control_node_B.slopes[b_k]) / w2;
    w1 = (proc_control_node_B.slopes[b_k + 1] - w1) / w2;
    v_coefs[b_k] = (w1 - proc_control_node_B.hs) / w2;
    v_coefs[b_k + 20] = 2.0 * proc_control_node_B.hs - w1;
    v_coefs[b_k + 40] = proc_control_node_B.slopes[b_k];
    v_coefs[b_k + 60] = y[b_k];
  }

  memcpy(&v_breaks[0], &x[0], 21U * sizeof(real_T));
}

static void proc_control_node_derivpp(const real_T pp_breaks[21], const real_T
  pp_coefs[80], real_T dpp_breaks[21], real_T dpp_coefs[80])
{
  int32_T b_itilerow;
  int32_T b_jcol;
  int32_T ibmat;
  int8_T a[4];
  a[0] = 0;
  a[1] = 3;
  a[2] = 2;
  a[3] = 1;
  for (b_jcol = 0; b_jcol < 4; b_jcol++) {
    ibmat = b_jcol * 20;
    for (b_itilerow = 0; b_itilerow < 20; b_itilerow++) {
      dpp_coefs[ibmat + b_itilerow] = a[b_jcol];
    }
  }

  memcpy(&proc_control_node_B.c_a[0], &pp_coefs[0], 80U * sizeof(real_T));
  for (b_jcol = 0; b_jcol < 20; b_jcol++) {
    proc_control_node_B.a__1_l = proc_control_node_B.c_a[b_jcol + 60];
    proc_control_node_B.c_a[b_jcol + 60] = proc_control_node_B.c_a[b_jcol + 40];
    proc_control_node_B.c_a[b_jcol + 40] = proc_control_node_B.c_a[b_jcol + 20];
    proc_control_node_B.c_a[b_jcol + 20] = proc_control_node_B.c_a[b_jcol];
    proc_control_node_B.c_a[b_jcol] = proc_control_node_B.a__1_l;
  }

  memcpy(&dpp_breaks[0], &pp_breaks[0], 21U * sizeof(real_T));
  for (b_jcol = 0; b_jcol < 80; b_jcol++) {
    dpp_coefs[b_jcol] *= proc_control_node_B.c_a[b_jcol];
  }
}

static void waypointTrajectory_setupPositio(waypointTrajectory_proc_contr_T *obj)
{
  proc_clothoidG2fitMissingCourse(obj->Waypoints, proc_control_node_B.course_p);
  for (proc_control_node_B.i_b5 = 0; proc_control_node_B.i_b5 < 21;
       proc_control_node_B.i_b5++) {
    obj->HorizontalInitialPosition[proc_control_node_B.i_b5].re = obj->
      Waypoints[proc_control_node_B.i_b5];
    obj->HorizontalInitialPosition[proc_control_node_B.i_b5].im = obj->
      Waypoints[proc_control_node_B.i_b5 + 21];
  }

  memcpy(&proc_control_node_B.obj_d[0], &(*(creal_T (*)[20])&
          obj->HorizontalInitialPosition[0])[0], 20U * sizeof(creal_T));
  memcpy(&proc_control_node_B.obj_n[0], &(*(creal_T (*)[20])&
          obj->HorizontalInitialPosition[1])[0], 20U * sizeof(creal_T));
  proc_contro_clothoidG1fit2wp_b4(proc_control_node_B.obj_d,
    &proc_control_node_B.course_p[0], proc_control_node_B.obj_n,
    &proc_control_node_B.course_p[1], obj->HorizontalCurvatureInitial,
    obj->HorizontalCurvatureFinal, obj->HorizontalPiecewiseLength);
  memcpy(&proc_control_node_B.x_j[0], &obj->HorizontalPiecewiseLength[0], 20U *
         sizeof(real_T));
  for (proc_control_node_B.i_b5 = 0; proc_control_node_B.i_b5 < 19;
       proc_control_node_B.i_b5++) {
    proc_control_node_B.x_j[proc_control_node_B.i_b5 + 1] +=
      proc_control_node_B.x_j[proc_control_node_B.i_b5];
  }

  obj->HorizontalCumulativeDistance[0] = 0.0;
  memcpy(&obj->HorizontalCumulativeDistance[1], &proc_control_node_B.x_j[0], 20U
         * sizeof(real_T));
  memcpy(&proc_control_node_B.obj_dk[0], &obj->TimeOfArrival[0], 21U * sizeof
         (real_T));
  memcpy(&proc_control_node_B.obj_o[0], &obj->HorizontalCumulativeDistance[0],
         21U * sizeof(real_T));
  proc_control_node_pchip(proc_control_node_B.obj_dk, proc_control_node_B.obj_o,
    obj->HorizontalDistancePiecewisePolynomial.breaks,
    obj->HorizontalDistancePiecewisePolynomial.coefs);
  memcpy(&proc_control_node_B.obj_dk[0],
         &obj->HorizontalDistancePiecewisePolynomial.breaks[0], 21U * sizeof
         (real_T));
  memcpy(&proc_control_node_B.obj[0],
         &obj->HorizontalDistancePiecewisePolynomial.coefs[0], 80U * sizeof
         (real_T));
  proc_control_node_derivpp(proc_control_node_B.obj_dk, proc_control_node_B.obj,
    obj->HorizontalSpeedPiecewisePolynomial.breaks,
    obj->HorizontalSpeedPiecewisePolynomial.coefs);
  memcpy(&proc_control_node_B.obj_dk[0],
         &obj->HorizontalSpeedPiecewisePolynomial.breaks[0], 21U * sizeof(real_T));
  memcpy(&proc_control_node_B.obj[0],
         &obj->HorizontalSpeedPiecewisePolynomial.coefs[0], 80U * sizeof(real_T));
  proc_control_node_derivpp(proc_control_node_B.obj_dk, proc_control_node_B.obj,
    obj->HorizontalAccelerationPiecewisePolynomial.breaks,
    obj->HorizontalAccelerationPiecewisePolynomial.coefs);
  memcpy(&proc_control_node_B.obj_dk[0], &obj->TimeOfArrival[0], 21U * sizeof
         (real_T));
  memcpy(&proc_control_node_B.obj_o[0], &(*(real_T (*)[21])&obj->Waypoints[42])
         [0], 21U * sizeof(real_T));
  proc_control_node_pchip(proc_control_node_B.obj_dk, proc_control_node_B.obj_o,
    obj->VerticalDistancePiecewisePolynomial.breaks,
    obj->VerticalDistancePiecewisePolynomial.coefs);
  memcpy(&proc_control_node_B.obj_dk[0],
         &obj->VerticalDistancePiecewisePolynomial.breaks[0], 21U * sizeof
         (real_T));
  memcpy(&proc_control_node_B.obj[0],
         &obj->VerticalDistancePiecewisePolynomial.coefs[0], 80U * sizeof(real_T));
  proc_control_node_derivpp(proc_control_node_B.obj_dk, proc_control_node_B.obj,
    obj->VerticalSpeedPiecewisePolynomial.breaks,
    obj->VerticalSpeedPiecewisePolynomial.coefs);
  memcpy(&proc_control_node_B.obj_dk[0],
         &obj->VerticalSpeedPiecewisePolynomial.breaks[0], 21U * sizeof(real_T));
  memcpy(&proc_control_node_B.obj[0],
         &obj->VerticalSpeedPiecewisePolynomial.coefs[0], 80U * sizeof(real_T));
  proc_control_node_derivpp(proc_control_node_B.obj_dk, proc_control_node_B.obj,
    obj->VerticalAccelerationPiecewisePolynomial.breaks,
    obj->VerticalAccelerationPiecewisePolynomial.coefs);
  memcpy(&proc_control_node_B.obj_dk[0],
         &obj->HorizontalAccelerationPiecewisePolynomial.breaks[0], 21U * sizeof
         (real_T));
  memcpy(&proc_control_node_B.obj[0],
         &obj->HorizontalAccelerationPiecewisePolynomial.coefs[0], 80U * sizeof
         (real_T));
  proc_control_node_derivpp(proc_control_node_B.obj_dk, proc_control_node_B.obj,
    obj->HorizontalJerkPiecewisePolynomial.breaks,
    obj->HorizontalJerkPiecewisePolynomial.coefs);
  memcpy(&proc_control_node_B.obj_dk[0],
         &obj->VerticalAccelerationPiecewisePolynomial.breaks[0], 21U * sizeof
         (real_T));
  memcpy(&proc_control_node_B.obj[0],
         &obj->VerticalAccelerationPiecewisePolynomial.coefs[0], 80U * sizeof
         (real_T));
  proc_control_node_derivpp(proc_control_node_B.obj_dk, proc_control_node_B.obj,
    obj->VerticalJerkPiecewisePolynomial.breaks,
    obj->VerticalJerkPiecewisePolynomial.coefs);
  for (proc_control_node_B.i_b5 = 0; proc_control_node_B.i_b5 < 21;
       proc_control_node_B.i_b5++) {
    obj->Course[proc_control_node_B.i_b5] = 57.295779513082323 *
      proc_control_node_B.course_p[proc_control_node_B.i_b5];
  }

  obj->PathDuration = obj->TimeOfArrival[20];
}

static void proc_control_n_quaternion_times(const real_T x_a[20], const real_T
  x_b[20], const real_T x_c[20], const real_T x_d[20], const real_T y_a[20],
  const real_T y_b[20], const real_T y_c[20], const real_T y_d[20], real_T o_a
  [20], real_T o_b[20], real_T o_c[20], real_T o_d[20])
{
  real_T y_d_0;
  int32_T i;
  for (i = 0; i < 20; i++) {
    y_d_0 = y_d[i];
    proc_control_node_B.x_d_e = x_d[i];
    proc_control_node_B.y_c_d = y_c[i];
    proc_control_node_B.x_c_f = x_c[i];
    proc_control_node_B.y_b_p = y_b[i];
    proc_control_node_B.x_b_k = x_b[i];
    proc_control_node_B.y_a_o = y_a[i];
    proc_control_node_B.x_a_c = x_a[i];
    o_a[i] = ((proc_control_node_B.x_a_c * proc_control_node_B.y_a_o -
               proc_control_node_B.x_b_k * proc_control_node_B.y_b_p) -
              proc_control_node_B.x_c_f * proc_control_node_B.y_c_d) -
      proc_control_node_B.x_d_e * y_d_0;
    o_b[i] = ((proc_control_node_B.x_a_c * proc_control_node_B.y_b_p +
               proc_control_node_B.x_b_k * proc_control_node_B.y_a_o) +
              proc_control_node_B.x_c_f * y_d_0) - proc_control_node_B.x_d_e *
      proc_control_node_B.y_c_d;
    o_c[i] = ((proc_control_node_B.x_a_c * proc_control_node_B.y_c_d -
               proc_control_node_B.x_b_k * y_d_0) + proc_control_node_B.x_c_f *
              proc_control_node_B.y_a_o) + proc_control_node_B.x_d_e *
      proc_control_node_B.y_b_p;
    o_d[i] = ((proc_control_node_B.x_a_c * y_d_0 + proc_control_node_B.x_b_k *
               proc_control_node_B.y_c_d) - proc_control_node_B.x_c_f *
              proc_control_node_B.y_b_p) + proc_control_node_B.x_d_e *
      proc_control_node_B.y_a_o;
  }
}

static void proc_cont_quaternionBase_rotvec(const real_T q_a[20], const real_T
  q_b[20], const real_T q_c[20], const real_T q_d[20], real_T rv[60])
{
  int32_T b_k;
  int32_T c_xj;
  int32_T xoffset;
  for (b_k = 0; b_k < 20; b_k++) {
    proc_control_node_B.q_a = q_a[b_k];
    proc_control_node_B.q_b = q_b[b_k];
    proc_control_node_B.q_c = q_c[b_k];
    proc_control_node_B.q_d_l = q_d[b_k];
    proc_control_node_B.n_f = sqrt(((proc_control_node_B.q_a *
      proc_control_node_B.q_a + proc_control_node_B.q_b *
      proc_control_node_B.q_b) + proc_control_node_B.q_c *
      proc_control_node_B.q_c) + proc_control_node_B.q_d_l *
      proc_control_node_B.q_d_l);
    proc_control_node_B.m[b_k] = proc_control_node_B.q_a /
      proc_control_node_B.n_f;
    proc_control_node_B.m[b_k + 20] = proc_control_node_B.q_b /
      proc_control_node_B.n_f;
    proc_control_node_B.m[b_k + 40] = proc_control_node_B.q_c /
      proc_control_node_B.n_f;
    proc_control_node_B.m[b_k + 60] = proc_control_node_B.q_d_l /
      proc_control_node_B.n_f;
    proc_control_node_B.n[b_k] = 2.0 * acos(proc_control_node_B.m[b_k]);
  }

  for (b_k = 0; b_k < 60; b_k++) {
    proc_control_node_B.y_o[b_k] = proc_control_node_rt_powd_snf
      (proc_control_node_B.m[(div_nzp_s32_floor(b_k, 20) + 1) * 20 + b_k % 20],
       2.0);
  }

  memcpy(&proc_control_node_B.mag[0], &proc_control_node_B.y_o[0], 20U * sizeof
         (real_T));
  for (b_k = 0; b_k < 2; b_k++) {
    xoffset = (b_k + 1) * 20 - 1;
    for (c_xj = 0; c_xj < 20; c_xj++) {
      proc_control_node_B.mag[c_xj] += proc_control_node_B.y_o[(xoffset + c_xj)
        + 1];
    }
  }

  for (b_k = 0; b_k < 20; b_k++) {
    proc_control_node_B.mag[b_k] = sqrt(proc_control_node_B.mag[b_k]);
  }

  memset(&rv[0], 0, 60U * sizeof(real_T));
  for (b_k = 0; b_k < 20; b_k++) {
    proc_control_node_B.q_a = proc_control_node_B.mag[b_k];
    if (proc_control_node_B.q_a > 2.2204460492503131E-15) {
      proc_control_node_B.n_f = proc_control_node_B.n[b_k];
      rv[b_k] = proc_control_node_B.m[b_k + 20] * proc_control_node_B.n_f /
        proc_control_node_B.q_a;
      rv[b_k + 20] = proc_control_node_B.m[b_k + 40] * proc_control_node_B.n_f /
        proc_control_node_B.q_a;
      rv[b_k + 40] = proc_control_node_B.m[b_k + 60] * proc_control_node_B.n_f /
        proc_control_node_B.q_a;
    }
  }
}

static void proc_control_node_getang(const real_T qi_a[20], const real_T qi_b[20],
  const real_T qi_c[20], const real_T qi_d[20], const real_T qf_a[20], const
  real_T qf_b[20], const real_T qf_c[20], const real_T qf_d[20], real_T dtheta
  [20], real_T e[60])
{
  int32_T b_size;
  boolean_T idx;
  for (proc_control_node_B.b_j_f = 0; proc_control_node_B.b_j_f < 20;
       proc_control_node_B.b_j_f++) {
    proc_control_node_B.qi_b[proc_control_node_B.b_j_f] =
      -qi_b[proc_control_node_B.b_j_f];
    proc_control_node_B.qi_c[proc_control_node_B.b_j_f] =
      -qi_c[proc_control_node_B.b_j_f];
    proc_control_node_B.qi_d[proc_control_node_B.b_j_f] =
      -qi_d[proc_control_node_B.b_j_f];
  }

  proc_control_n_quaternion_times(qi_a, proc_control_node_B.qi_b,
    proc_control_node_B.qi_c, proc_control_node_B.qi_d, qf_a, qf_b, qf_c, qf_d,
    proc_control_node_B.deltaQuat_a, proc_control_node_B.deltaQuat_b,
    proc_control_node_B.deltaQuat_c, proc_control_node_B.deltaQuat_d);
  proc_control_node_B.b_j_f = 0;
  for (proc_control_node_B.b_k_j = 0; proc_control_node_B.b_k_j < 20;
       proc_control_node_B.b_k_j++) {
    proc_control_node_B.scale_d =
      proc_control_node_B.deltaQuat_a[proc_control_node_B.b_k_j];
    proc_control_node_B.absxk_l =
      proc_control_node_B.deltaQuat_b[proc_control_node_B.b_k_j];
    proc_control_node_B.t_f =
      proc_control_node_B.deltaQuat_c[proc_control_node_B.b_k_j];
    proc_control_node_B.yv =
      proc_control_node_B.deltaQuat_d[proc_control_node_B.b_k_j];
    proc_control_node_B.n_l = sqrt(((proc_control_node_B.scale_d *
      proc_control_node_B.scale_d + proc_control_node_B.absxk_l *
      proc_control_node_B.absxk_l) + proc_control_node_B.t_f *
      proc_control_node_B.t_f) + proc_control_node_B.yv * proc_control_node_B.yv);
    proc_control_node_B.scale_d /= proc_control_node_B.n_l;
    idx = (proc_control_node_B.scale_d < 0.0);
    proc_control_node_B.absxk_l /= proc_control_node_B.n_l;
    proc_control_node_B.t_f /= proc_control_node_B.n_l;
    proc_control_node_B.yv /= proc_control_node_B.n_l;
    if (idx) {
      proc_control_node_B.b_j_f++;
    }

    proc_control_node_B.deltaQuat_d[proc_control_node_B.b_k_j] =
      proc_control_node_B.yv;
    proc_control_node_B.deltaQuat_c[proc_control_node_B.b_k_j] =
      proc_control_node_B.t_f;
    proc_control_node_B.deltaQuat_b[proc_control_node_B.b_k_j] =
      proc_control_node_B.absxk_l;
    proc_control_node_B.deltaQuat_a[proc_control_node_B.b_k_j] =
      proc_control_node_B.scale_d;
    proc_control_node_B.idx[proc_control_node_B.b_k_j] = idx;
  }

  b_size = proc_control_node_B.b_j_f;
  proc_control_node_B.b_j_f = 0;
  for (proc_control_node_B.b_i_df = 0; proc_control_node_B.b_i_df < 20;
       proc_control_node_B.b_i_df++) {
    if (proc_control_node_B.idx[proc_control_node_B.b_i_df]) {
      proc_control_node_B.b_data_pd[proc_control_node_B.b_j_f] =
        proc_control_node_B.b_i_df + 1;
      proc_control_node_B.b_j_f++;
    }
  }

  proc_control_node_B.b_j_f = 0;
  for (proc_control_node_B.b_k_j = 0; proc_control_node_B.b_k_j < 20;
       proc_control_node_B.b_k_j++) {
    if (proc_control_node_B.idx[proc_control_node_B.b_k_j]) {
      proc_control_node_B.b_data_ce[proc_control_node_B.b_j_f] =
        static_cast<int8_T>(proc_control_node_B.b_k_j + 1);
      proc_control_node_B.b_j_f++;
    }
  }

  proc_control_node_B.b_i_df = b_size;
  proc_control_node_B.b_k_j = b_size;
  for (proc_control_node_B.b_j_f = 0; proc_control_node_B.b_j_f <
       proc_control_node_B.b_k_j; proc_control_node_B.b_j_f++) {
    proc_control_node_B.qi_b[proc_control_node_B.b_j_f] =
      -proc_control_node_B.deltaQuat_a[proc_control_node_B.b_data_pd[proc_control_node_B.b_j_f]
      - 1];
  }

  for (proc_control_node_B.b_j_f = 0; proc_control_node_B.b_j_f <
       proc_control_node_B.b_i_df; proc_control_node_B.b_j_f++) {
    proc_control_node_B.deltaQuat_a[proc_control_node_B.b_data_ce[proc_control_node_B.b_j_f]
      - 1] = proc_control_node_B.qi_b[proc_control_node_B.b_j_f];
  }

  proc_control_node_B.b_j_f = 0;
  for (proc_control_node_B.b_k_j = 0; proc_control_node_B.b_k_j < 20;
       proc_control_node_B.b_k_j++) {
    if (proc_control_node_B.idx[proc_control_node_B.b_k_j]) {
      proc_control_node_B.c_data_g[proc_control_node_B.b_j_f] =
        static_cast<int8_T>(proc_control_node_B.b_k_j + 1);
      proc_control_node_B.b_j_f++;
    }
  }

  proc_control_node_B.b_i_df = b_size;
  proc_control_node_B.b_k_j = b_size;
  for (proc_control_node_B.b_j_f = 0; proc_control_node_B.b_j_f <
       proc_control_node_B.b_k_j; proc_control_node_B.b_j_f++) {
    proc_control_node_B.qi_b[proc_control_node_B.b_j_f] =
      -proc_control_node_B.deltaQuat_b[proc_control_node_B.b_data_pd[proc_control_node_B.b_j_f]
      - 1];
  }

  for (proc_control_node_B.b_j_f = 0; proc_control_node_B.b_j_f <
       proc_control_node_B.b_i_df; proc_control_node_B.b_j_f++) {
    proc_control_node_B.deltaQuat_b[proc_control_node_B.c_data_g[proc_control_node_B.b_j_f]
      - 1] = proc_control_node_B.qi_b[proc_control_node_B.b_j_f];
  }

  proc_control_node_B.b_j_f = 0;
  for (proc_control_node_B.b_k_j = 0; proc_control_node_B.b_k_j < 20;
       proc_control_node_B.b_k_j++) {
    if (proc_control_node_B.idx[proc_control_node_B.b_k_j]) {
      proc_control_node_B.d_data_c[proc_control_node_B.b_j_f] =
        static_cast<int8_T>(proc_control_node_B.b_k_j + 1);
      proc_control_node_B.b_j_f++;
    }
  }

  proc_control_node_B.b_i_df = b_size;
  proc_control_node_B.b_k_j = b_size;
  for (proc_control_node_B.b_j_f = 0; proc_control_node_B.b_j_f <
       proc_control_node_B.b_k_j; proc_control_node_B.b_j_f++) {
    proc_control_node_B.qi_b[proc_control_node_B.b_j_f] =
      -proc_control_node_B.deltaQuat_c[proc_control_node_B.b_data_pd[proc_control_node_B.b_j_f]
      - 1];
  }

  for (proc_control_node_B.b_j_f = 0; proc_control_node_B.b_j_f <
       proc_control_node_B.b_i_df; proc_control_node_B.b_j_f++) {
    proc_control_node_B.deltaQuat_c[proc_control_node_B.d_data_c[proc_control_node_B.b_j_f]
      - 1] = proc_control_node_B.qi_b[proc_control_node_B.b_j_f];
  }

  proc_control_node_B.b_j_f = 0;
  for (proc_control_node_B.b_k_j = 0; proc_control_node_B.b_k_j < 20;
       proc_control_node_B.b_k_j++) {
    if (proc_control_node_B.idx[proc_control_node_B.b_k_j]) {
      proc_control_node_B.e_data_l[proc_control_node_B.b_j_f] =
        static_cast<int8_T>(proc_control_node_B.b_k_j + 1);
      proc_control_node_B.b_j_f++;
    }
  }

  proc_control_node_B.b_i_df = b_size;
  proc_control_node_B.b_k_j = b_size;
  for (proc_control_node_B.b_j_f = 0; proc_control_node_B.b_j_f <
       proc_control_node_B.b_k_j; proc_control_node_B.b_j_f++) {
    proc_control_node_B.qi_b[proc_control_node_B.b_j_f] =
      -proc_control_node_B.deltaQuat_d[proc_control_node_B.b_data_pd[proc_control_node_B.b_j_f]
      - 1];
  }

  for (proc_control_node_B.b_j_f = 0; proc_control_node_B.b_j_f <
       proc_control_node_B.b_i_df; proc_control_node_B.b_j_f++) {
    proc_control_node_B.deltaQuat_d[proc_control_node_B.e_data_l[proc_control_node_B.b_j_f]
      - 1] = proc_control_node_B.qi_b[proc_control_node_B.b_j_f];
  }

  proc_cont_quaternionBase_rotvec(proc_control_node_B.deltaQuat_a,
    proc_control_node_B.deltaQuat_b, proc_control_node_B.deltaQuat_c,
    proc_control_node_B.deltaQuat_d, proc_control_node_B.rv);
  for (proc_control_node_B.b_j_f = 0; proc_control_node_B.b_j_f < 20;
       proc_control_node_B.b_j_f++) {
    dtheta[proc_control_node_B.b_j_f] = 0.0;
    proc_control_node_B.scale_d = 3.3121686421112381E-170;
    proc_control_node_B.absxk_l = fabs
      (proc_control_node_B.rv[proc_control_node_B.b_j_f]);
    if (proc_control_node_B.absxk_l > 3.3121686421112381E-170) {
      proc_control_node_B.yv = 1.0;
      proc_control_node_B.scale_d = proc_control_node_B.absxk_l;
    } else {
      proc_control_node_B.t_f = proc_control_node_B.absxk_l /
        3.3121686421112381E-170;
      proc_control_node_B.yv = proc_control_node_B.t_f * proc_control_node_B.t_f;
    }

    proc_control_node_B.absxk_l = fabs
      (proc_control_node_B.rv[proc_control_node_B.b_j_f + 20]);
    if (proc_control_node_B.absxk_l > proc_control_node_B.scale_d) {
      proc_control_node_B.t_f = proc_control_node_B.scale_d /
        proc_control_node_B.absxk_l;
      proc_control_node_B.yv = proc_control_node_B.yv * proc_control_node_B.t_f *
        proc_control_node_B.t_f + 1.0;
      proc_control_node_B.scale_d = proc_control_node_B.absxk_l;
    } else {
      proc_control_node_B.t_f = proc_control_node_B.absxk_l /
        proc_control_node_B.scale_d;
      proc_control_node_B.yv += proc_control_node_B.t_f *
        proc_control_node_B.t_f;
    }

    proc_control_node_B.absxk_l = fabs
      (proc_control_node_B.rv[proc_control_node_B.b_j_f + 40]);
    if (proc_control_node_B.absxk_l > proc_control_node_B.scale_d) {
      proc_control_node_B.t_f = proc_control_node_B.scale_d /
        proc_control_node_B.absxk_l;
      proc_control_node_B.yv = proc_control_node_B.yv * proc_control_node_B.t_f *
        proc_control_node_B.t_f + 1.0;
      proc_control_node_B.scale_d = proc_control_node_B.absxk_l;
    } else {
      proc_control_node_B.t_f = proc_control_node_B.absxk_l /
        proc_control_node_B.scale_d;
      proc_control_node_B.yv += proc_control_node_B.t_f *
        proc_control_node_B.t_f;
    }

    dtheta[proc_control_node_B.b_j_f] = proc_control_node_B.scale_d * sqrt
      (proc_control_node_B.yv);
  }

  for (proc_control_node_B.b_j_f = 0; proc_control_node_B.b_j_f < 3;
       proc_control_node_B.b_j_f++) {
    for (proc_control_node_B.b_k_j = 0; proc_control_node_B.b_k_j < 20;
         proc_control_node_B.b_k_j++) {
      proc_control_node_B.b_i_df = 20 * proc_control_node_B.b_j_f +
        proc_control_node_B.b_k_j;
      e[proc_control_node_B.b_i_df] =
        proc_control_node_B.rv[proc_control_node_B.b_i_df] /
        dtheta[proc_control_node_B.b_k_j];
    }
  }

  for (proc_control_node_B.b_j_f = 0; proc_control_node_B.b_j_f < 20;
       proc_control_node_B.b_j_f++) {
    proc_control_node_B.idx[proc_control_node_B.b_j_f] =
      (dtheta[proc_control_node_B.b_j_f] <= 0.0);
  }

  proc_control_node_eml_find(proc_control_node_B.idx,
    proc_control_node_B.b_data_pd, &b_size);
  proc_control_node_B.b_k_j = b_size;
  if (0 <= proc_control_node_B.b_k_j - 1) {
    memcpy(&proc_control_node_B.izero_data_p[0], &proc_control_node_B.b_data_pd
           [0], proc_control_node_B.b_k_j * sizeof(int32_T));
  }

  for (proc_control_node_B.b_j_f = 0; proc_control_node_B.b_j_f < 3;
       proc_control_node_B.b_j_f++) {
    for (proc_control_node_B.b_i_df = 0; proc_control_node_B.b_i_df < b_size;
         proc_control_node_B.b_i_df++) {
      e[(proc_control_node_B.izero_data_p[proc_control_node_B.b_i_df] + 20 *
         proc_control_node_B.b_j_f) - 1] = 0.0;
    }
  }
}

static void proc_control_node_bd(const real_T e[3], real_T dtheta, const real_T
  xin[3], real_T xout[3])
{
  real_T temp2_idx_1;
  real_T temp2_idx_2;
  int32_T b_k;
  if (dtheta > 1.0E-6) {
    proc_control_node_B.b1_p = sin(dtheta) / dtheta;
    proc_control_node_B.b2_i = (cos(dtheta) - 1.0) / dtheta;
    proc_control_node_B.b0_g = 0.0;
    for (b_k = 0; b_k < 3; b_k++) {
      proc_control_node_B.b0_g += xin[b_k] * e[b_k];
    }

    proc_control_node_B.temp2_idx_0_e = e[1] * xin[2] - xin[1] * e[2];
    temp2_idx_1 = xin[0] * e[2] - e[0] * xin[2];
    temp2_idx_2 = e[0] * xin[1] - xin[0] * e[1];
    xout[0] = ((temp2_idx_1 * e[2] - e[1] * temp2_idx_2) *
               proc_control_node_B.b1_p + proc_control_node_B.b0_g * e[0]) +
      proc_control_node_B.b2_i * proc_control_node_B.temp2_idx_0_e;
    xout[1] = ((e[0] * temp2_idx_2 - proc_control_node_B.temp2_idx_0_e * e[2]) *
               proc_control_node_B.b1_p + proc_control_node_B.b0_g * e[1]) +
      proc_control_node_B.b2_i * temp2_idx_1;
    xout[2] = ((proc_control_node_B.temp2_idx_0_e * e[1] - e[0] * temp2_idx_1) *
               proc_control_node_B.b1_p + proc_control_node_B.b0_g * e[2]) +
      proc_control_node_B.b2_i * temp2_idx_2;
  } else {
    xout[0] = xin[0];
    xout[1] = xin[1];
    xout[2] = xin[2];
  }
}

static void proc_control_node_bd_b(const real_T e[3], real_T dtheta, const
  real_T xin[3], real_T xout[3])
{
  real_T temp2_idx_1;
  real_T temp2_idx_2;
  int32_T b_k;
  if (dtheta > 1.0E-6) {
    proc_control_node_B.b1 = 0.5 * dtheta * sin(dtheta) / (1.0 - cos(dtheta));
    proc_control_node_B.b2 = 0.5 * dtheta;
    proc_control_node_B.b0 = 0.0;
    for (b_k = 0; b_k < 3; b_k++) {
      proc_control_node_B.b0 += xin[b_k] * e[b_k];
    }

    proc_control_node_B.temp2_idx_0_d = e[1] * xin[2] - xin[1] * e[2];
    temp2_idx_1 = xin[0] * e[2] - e[0] * xin[2];
    temp2_idx_2 = e[0] * xin[1] - xin[0] * e[1];
    xout[0] = ((temp2_idx_1 * e[2] - e[1] * temp2_idx_2) *
               proc_control_node_B.b1 + proc_control_node_B.b0 * e[0]) +
      proc_control_node_B.b2 * proc_control_node_B.temp2_idx_0_d;
    xout[1] = ((e[0] * temp2_idx_2 - proc_control_node_B.temp2_idx_0_d * e[2]) *
               proc_control_node_B.b1 + proc_control_node_B.b0 * e[1]) +
      proc_control_node_B.b2 * temp2_idx_1;
    xout[2] = ((proc_control_node_B.temp2_idx_0_d * e[1] - e[0] * temp2_idx_1) *
               proc_control_node_B.b1 + proc_control_node_B.b0 * e[2]) +
      proc_control_node_B.b2 * temp2_idx_2;
  } else {
    xout[0] = xin[0];
    xout[1] = xin[1];
    xout[2] = xin[2];
  }
}

static real_T proc_control_node_xnrm2_b4nw(int32_T n, const real_T x[57],
  int32_T ix0)
{
  real_T y;
  int32_T k;
  int32_T kend;
  y = 0.0;
  proc_control_node_B.scale_jb = 3.3121686421112381E-170;
  kend = ix0 + n;
  for (k = ix0; k < kend; k++) {
    proc_control_node_B.absxk_k = fabs(x[k - 1]);
    if (proc_control_node_B.absxk_k > proc_control_node_B.scale_jb) {
      proc_control_node_B.t_mc = proc_control_node_B.scale_jb /
        proc_control_node_B.absxk_k;
      y = y * proc_control_node_B.t_mc * proc_control_node_B.t_mc + 1.0;
      proc_control_node_B.scale_jb = proc_control_node_B.absxk_k;
    } else {
      proc_control_node_B.t_mc = proc_control_node_B.absxk_k /
        proc_control_node_B.scale_jb;
      y += proc_control_node_B.t_mc * proc_control_node_B.t_mc;
    }
  }

  return proc_control_node_B.scale_jb * sqrt(y);
}

static real_T proc_control_node_xnrm2_b4nwk(const real_T x[3], int32_T ix0)
{
  real_T y;
  int32_T k;
  y = 0.0;
  proc_control_node_B.scale_c = 3.3121686421112381E-170;
  for (k = ix0; k <= ix0 + 1; k++) {
    proc_control_node_B.absxk_i = fabs(x[k - 1]);
    if (proc_control_node_B.absxk_i > proc_control_node_B.scale_c) {
      proc_control_node_B.t_hu = proc_control_node_B.scale_c /
        proc_control_node_B.absxk_i;
      y = y * proc_control_node_B.t_hu * proc_control_node_B.t_hu + 1.0;
      proc_control_node_B.scale_c = proc_control_node_B.absxk_i;
    } else {
      proc_control_node_B.t_hu = proc_control_node_B.absxk_i /
        proc_control_node_B.scale_c;
      y += proc_control_node_B.t_hu * proc_control_node_B.t_hu;
    }
  }

  return proc_control_node_B.scale_c * sqrt(y);
}

static void proc_control_node_xaxpy(int32_T n, real_T a, const real_T x[19],
  int32_T ix0, const real_T y[57], int32_T iy0, real_T b_y[57])
{
  int32_T b_y_tmp;
  int32_T k;
  memcpy(&b_y[0], &y[0], 57U * sizeof(real_T));
  if (!(a == 0.0)) {
    for (k = 0; k < n; k++) {
      b_y_tmp = (iy0 + k) - 1;
      b_y[b_y_tmp] += x[(ix0 + k) - 1] * a;
    }
  }
}

static void proc_control_node_xrotg_b(real_T a, real_T b, real_T *b_a, real_T
  *b_b, real_T *c, real_T *s)
{
  proc_control_node_B.roe = b;
  proc_control_node_B.absa = fabs(a);
  proc_control_node_B.absb = fabs(b);
  if (proc_control_node_B.absa > proc_control_node_B.absb) {
    proc_control_node_B.roe = a;
  }

  proc_control_node_B.scale_f = proc_control_node_B.absa +
    proc_control_node_B.absb;
  if (proc_control_node_B.scale_f == 0.0) {
    *s = 0.0;
    *c = 1.0;
    *b_a = 0.0;
    *b_b = 0.0;
  } else {
    proc_control_node_B.ads = proc_control_node_B.absa /
      proc_control_node_B.scale_f;
    proc_control_node_B.bds = proc_control_node_B.absb /
      proc_control_node_B.scale_f;
    *b_a = sqrt(proc_control_node_B.ads * proc_control_node_B.ads +
                proc_control_node_B.bds * proc_control_node_B.bds) *
      proc_control_node_B.scale_f;
    if (proc_control_node_B.roe < 0.0) {
      *b_a = -*b_a;
    }

    *c = a / *b_a;
    *s = b / *b_a;
    if (proc_control_node_B.absa > proc_control_node_B.absb) {
      *b_b = *s;
    } else if (*c != 0.0) {
      *b_b = 1.0 / *c;
    } else {
      *b_b = 1.0;
    }
  }
}

static void proc_control_node_svd(const real_T A[57], real_T U[3])
{
  int32_T A_tmp;
  int32_T i;
  int32_T ix;
  boolean_T apply_transform;
  boolean_T exitg1;
  memcpy(&proc_control_node_B.A_hc[0], &A[0], 57U * sizeof(real_T));
  proc_control_node_B.s_i[0] = 0.0;
  proc_control_node_B.e_o[0] = 0.0;
  proc_control_node_B.s_i[1] = 0.0;
  proc_control_node_B.e_o[1] = 0.0;
  proc_control_node_B.s_i[2] = 0.0;
  proc_control_node_B.e_o[2] = 0.0;
  memset(&proc_control_node_B.work_h[0], 0, 19U * sizeof(real_T));
  for (proc_control_node_B.m_du = 0; proc_control_node_B.m_du < 3;
       proc_control_node_B.m_du++) {
    i = proc_control_node_B.m_du + 2;
    proc_control_node_B.qs = proc_control_node_B.m_du * 19 +
      proc_control_node_B.m_du;
    proc_control_node_B.qq = proc_control_node_B.qs + 1;
    ix = 19 - proc_control_node_B.m_du;
    apply_transform = false;
    proc_control_node_B.nrm = proc_control_node_xnrm2_b4nw(19 -
      proc_control_node_B.m_du, proc_control_node_B.A_hc, proc_control_node_B.qs
      + 1);
    if (proc_control_node_B.nrm > 0.0) {
      apply_transform = true;
      if (proc_control_node_B.A_hc[proc_control_node_B.qs] < 0.0) {
        proc_control_node_B.s_i[proc_control_node_B.m_du] =
          -proc_control_node_B.nrm;
      } else {
        proc_control_node_B.s_i[proc_control_node_B.m_du] =
          proc_control_node_B.nrm;
      }

      if (fabs(proc_control_node_B.s_i[proc_control_node_B.m_du]) >=
          1.0020841800044864E-292) {
        proc_control_node_B.nrm = 1.0 /
          proc_control_node_B.s_i[proc_control_node_B.m_du];
        proc_control_node_B.qjj = proc_control_node_B.qs -
          proc_control_node_B.m_du;
        for (proc_control_node_B.k_gu = proc_control_node_B.qq;
             proc_control_node_B.k_gu <= proc_control_node_B.qjj + 19;
             proc_control_node_B.k_gu++) {
          proc_control_node_B.A_hc[proc_control_node_B.k_gu - 1] *=
            proc_control_node_B.nrm;
        }
      } else {
        proc_control_node_B.qjj = proc_control_node_B.qs -
          proc_control_node_B.m_du;
        for (proc_control_node_B.k_gu = proc_control_node_B.qq;
             proc_control_node_B.k_gu <= proc_control_node_B.qjj + 19;
             proc_control_node_B.k_gu++) {
          proc_control_node_B.A_hc[proc_control_node_B.k_gu - 1] /=
            proc_control_node_B.s_i[proc_control_node_B.m_du];
        }
      }

      proc_control_node_B.A_hc[proc_control_node_B.qs]++;
      proc_control_node_B.s_i[proc_control_node_B.m_du] =
        -proc_control_node_B.s_i[proc_control_node_B.m_du];
    } else {
      proc_control_node_B.s_i[proc_control_node_B.m_du] = 0.0;
    }

    for (proc_control_node_B.qq = i; proc_control_node_B.qq < 4;
         proc_control_node_B.qq++) {
      proc_control_node_B.qjj = (proc_control_node_B.qq - 1) * 19 +
        proc_control_node_B.m_du;
      if (apply_transform) {
        proc_control_node_B.nrm = 0.0;
        for (proc_control_node_B.k_gu = 0; proc_control_node_B.k_gu < ix;
             proc_control_node_B.k_gu++) {
          proc_control_node_B.nrm +=
            proc_control_node_B.A_hc[proc_control_node_B.qjj +
            proc_control_node_B.k_gu] *
            proc_control_node_B.A_hc[proc_control_node_B.qs +
            proc_control_node_B.k_gu];
        }

        proc_control_node_B.nrm = -(proc_control_node_B.nrm /
          proc_control_node_B.A_hc[proc_control_node_B.qs]);
        if (!(proc_control_node_B.nrm == 0.0)) {
          for (proc_control_node_B.k_gu = 0; proc_control_node_B.k_gu < ix;
               proc_control_node_B.k_gu++) {
            A_tmp = proc_control_node_B.qjj + proc_control_node_B.k_gu;
            proc_control_node_B.A_hc[A_tmp] +=
              proc_control_node_B.A_hc[proc_control_node_B.qs +
              proc_control_node_B.k_gu] * proc_control_node_B.nrm;
          }
        }
      }

      proc_control_node_B.e_o[proc_control_node_B.qq - 1] =
        proc_control_node_B.A_hc[proc_control_node_B.qjj];
    }

    if (proc_control_node_B.m_du + 1 <= 1) {
      proc_control_node_B.nrm = proc_control_node_xnrm2_b4nwk
        (proc_control_node_B.e_o, 2);
      if (proc_control_node_B.nrm == 0.0) {
        proc_control_node_B.e_o[0] = 0.0;
      } else {
        if (proc_control_node_B.e_o[1] < 0.0) {
          proc_control_node_B.rt = -proc_control_node_B.nrm;
          proc_control_node_B.e_o[0] = -proc_control_node_B.nrm;
        } else {
          proc_control_node_B.rt = proc_control_node_B.nrm;
          proc_control_node_B.e_o[0] = proc_control_node_B.nrm;
        }

        if (fabs(proc_control_node_B.rt) >= 1.0020841800044864E-292) {
          proc_control_node_B.nrm = 1.0 / proc_control_node_B.rt;
          for (proc_control_node_B.k_gu = i; proc_control_node_B.k_gu < 4;
               proc_control_node_B.k_gu++) {
            proc_control_node_B.e_o[proc_control_node_B.k_gu - 1] *=
              proc_control_node_B.nrm;
          }
        } else {
          for (proc_control_node_B.k_gu = i; proc_control_node_B.k_gu < 4;
               proc_control_node_B.k_gu++) {
            proc_control_node_B.e_o[proc_control_node_B.k_gu - 1] /=
              proc_control_node_B.rt;
          }
        }

        proc_control_node_B.e_o[1]++;
        proc_control_node_B.e_o[0] = -proc_control_node_B.e_o[0];
        for (proc_control_node_B.k_gu = i; proc_control_node_B.k_gu < 20;
             proc_control_node_B.k_gu++) {
          proc_control_node_B.work_h[proc_control_node_B.k_gu - 1] = 0.0;
        }

        for (proc_control_node_B.qs = i; proc_control_node_B.qs < 4;
             proc_control_node_B.qs++) {
          proc_control_node_B.nrm =
            proc_control_node_B.e_o[proc_control_node_B.qs - 1];
          if (!(proc_control_node_B.nrm == 0.0)) {
            ix = (proc_control_node_B.qs - 1) * 19 + 1;
            for (proc_control_node_B.k_gu = 0; proc_control_node_B.k_gu < 18;
                 proc_control_node_B.k_gu++) {
              proc_control_node_B.work_h[proc_control_node_B.k_gu + 1] +=
                proc_control_node_B.nrm * proc_control_node_B.A_hc[ix +
                proc_control_node_B.k_gu];
            }
          }
        }

        for (proc_control_node_B.k_gu = i; proc_control_node_B.k_gu < 4;
             proc_control_node_B.k_gu++) {
          memcpy(&proc_control_node_B.A_m[0], &proc_control_node_B.A_hc[0], 57U *
                 sizeof(real_T));
          proc_control_node_xaxpy(18,
            -proc_control_node_B.e_o[proc_control_node_B.k_gu - 1] /
            proc_control_node_B.e_o[1], proc_control_node_B.work_h, 2,
            proc_control_node_B.A_m, (proc_control_node_B.k_gu - 1) * 19 + 2,
            proc_control_node_B.A_hc);
        }
      }
    }
  }

  proc_control_node_B.m_du = 1;
  proc_control_node_B.e_o[1] = proc_control_node_B.A_hc[39];
  proc_control_node_B.e_o[2] = 0.0;
  if (proc_control_node_B.s_i[0] != 0.0) {
    proc_control_node_B.rt = fabs(proc_control_node_B.s_i[0]);
    proc_control_node_B.nrm = proc_control_node_B.s_i[0] /
      proc_control_node_B.rt;
    proc_control_node_B.s_i[0] = proc_control_node_B.rt;
    proc_control_node_B.e_o[0] /= proc_control_node_B.nrm;
  }

  if (proc_control_node_B.e_o[0] != 0.0) {
    proc_control_node_B.rt = fabs(proc_control_node_B.e_o[0]);
    proc_control_node_B.nrm = proc_control_node_B.rt / proc_control_node_B.e_o[0];
    proc_control_node_B.e_o[0] = proc_control_node_B.rt;
    proc_control_node_B.s_i[1] *= proc_control_node_B.nrm;
  }

  if (proc_control_node_B.s_i[1] != 0.0) {
    proc_control_node_B.rt = fabs(proc_control_node_B.s_i[1]);
    proc_control_node_B.nrm = proc_control_node_B.s_i[1] /
      proc_control_node_B.rt;
    proc_control_node_B.s_i[1] = proc_control_node_B.rt;
    proc_control_node_B.e_o[1] = proc_control_node_B.A_hc[39] /
      proc_control_node_B.nrm;
  }

  if (proc_control_node_B.e_o[1] != 0.0) {
    proc_control_node_B.rt = fabs(proc_control_node_B.e_o[1]);
    proc_control_node_B.nrm = proc_control_node_B.rt / proc_control_node_B.e_o[1];
    proc_control_node_B.e_o[1] = proc_control_node_B.rt;
    proc_control_node_B.s_i[2] *= proc_control_node_B.nrm;
  }

  if (proc_control_node_B.s_i[2] != 0.0) {
    proc_control_node_B.s_i[2] = fabs(proc_control_node_B.s_i[2]);
  }

  i = 0;
  if ((proc_control_node_B.s_i[0] > proc_control_node_B.e_o[0]) || rtIsNaN
      (proc_control_node_B.e_o[0])) {
    proc_control_node_B.nrm = proc_control_node_B.s_i[0];
  } else {
    proc_control_node_B.nrm = proc_control_node_B.e_o[0];
  }

  if ((proc_control_node_B.s_i[1] > proc_control_node_B.e_o[1]) || rtIsNaN
      (proc_control_node_B.e_o[1])) {
    proc_control_node_B.rt = proc_control_node_B.s_i[1];
  } else {
    proc_control_node_B.rt = proc_control_node_B.e_o[1];
  }

  if ((!(proc_control_node_B.nrm > proc_control_node_B.rt)) && (!rtIsNaN
       (proc_control_node_B.rt))) {
    proc_control_node_B.nrm = proc_control_node_B.rt;
  }

  if (proc_control_node_B.s_i[2] > 0.0) {
    proc_control_node_B.rt = proc_control_node_B.s_i[2];
  } else {
    proc_control_node_B.rt = 0.0;
  }

  if ((!(proc_control_node_B.nrm > proc_control_node_B.rt)) && (!rtIsNaN
       (proc_control_node_B.rt))) {
    proc_control_node_B.nrm = proc_control_node_B.rt;
  }

  while ((proc_control_node_B.m_du + 2 > 0) && (!(i >= 75))) {
    proc_control_node_B.k_gu = proc_control_node_B.m_du + 1;
    proc_control_node_B.qs = proc_control_node_B.m_du;
    exitg1 = false;
    while ((!exitg1) && (proc_control_node_B.qs + 1 > -1)) {
      proc_control_node_B.k_gu = proc_control_node_B.qs + 1;
      if (proc_control_node_B.qs + 1 == 0) {
        exitg1 = true;
      } else {
        proc_control_node_B.rt = fabs
          (proc_control_node_B.e_o[proc_control_node_B.qs]);
        if ((proc_control_node_B.rt <= (fabs
              (proc_control_node_B.s_i[proc_control_node_B.qs + 1]) + fabs
              (proc_control_node_B.s_i[proc_control_node_B.qs])) *
             2.2204460492503131E-16) || (proc_control_node_B.rt <=
             1.0020841800044864E-292) || ((i > 20) && (proc_control_node_B.rt <=
              2.2204460492503131E-16 * proc_control_node_B.nrm))) {
          proc_control_node_B.e_o[proc_control_node_B.qs] = 0.0;
          exitg1 = true;
        } else {
          proc_control_node_B.qs--;
        }
      }
    }

    if (proc_control_node_B.m_du + 1 == proc_control_node_B.k_gu) {
      ix = 4;
    } else {
      proc_control_node_B.qs = proc_control_node_B.m_du + 2;
      ix = proc_control_node_B.m_du + 2;
      exitg1 = false;
      while ((!exitg1) && (ix >= proc_control_node_B.k_gu)) {
        proc_control_node_B.qs = ix;
        if (ix == proc_control_node_B.k_gu) {
          exitg1 = true;
        } else {
          proc_control_node_B.rt = 0.0;
          if (ix < proc_control_node_B.m_du + 2) {
            proc_control_node_B.rt = fabs(proc_control_node_B.e_o[ix - 1]);
          }

          if (ix > proc_control_node_B.k_gu + 1) {
            proc_control_node_B.rt += fabs(proc_control_node_B.e_o[ix - 2]);
          }

          proc_control_node_B.ztest = fabs(proc_control_node_B.s_i[ix - 1]);
          if ((proc_control_node_B.ztest <= 2.2204460492503131E-16 *
               proc_control_node_B.rt) || (proc_control_node_B.ztest <=
               1.0020841800044864E-292)) {
            proc_control_node_B.s_i[ix - 1] = 0.0;
            exitg1 = true;
          } else {
            ix--;
          }
        }
      }

      if (proc_control_node_B.qs == proc_control_node_B.k_gu) {
        ix = 3;
      } else if (proc_control_node_B.m_du + 2 == proc_control_node_B.qs) {
        ix = 1;
      } else {
        ix = 2;
        proc_control_node_B.k_gu = proc_control_node_B.qs;
      }
    }

    switch (ix) {
     case 1:
      proc_control_node_B.rt = proc_control_node_B.e_o[proc_control_node_B.m_du];
      proc_control_node_B.e_o[proc_control_node_B.m_du] = 0.0;
      for (proc_control_node_B.qs = proc_control_node_B.m_du + 1;
           proc_control_node_B.qs >= proc_control_node_B.k_gu + 1;
           proc_control_node_B.qs--) {
        proc_control_node_B.ztest = proc_control_node_B.e_o[0];
        proc_control_node_xrotg_b(proc_control_node_B.s_i[proc_control_node_B.qs
          - 1], proc_control_node_B.rt,
          &proc_control_node_B.s_i[proc_control_node_B.qs - 1],
          &proc_control_node_B.rt, &proc_control_node_B.sqds,
          &proc_control_node_B.smm1);
        if (proc_control_node_B.qs > proc_control_node_B.k_gu + 1) {
          proc_control_node_B.rt = -proc_control_node_B.smm1 *
            proc_control_node_B.e_o[0];
          proc_control_node_B.ztest = proc_control_node_B.e_o[0] *
            proc_control_node_B.sqds;
        }

        proc_control_node_B.e_o[0] = proc_control_node_B.ztest;
      }
      break;

     case 2:
      proc_control_node_B.rt = proc_control_node_B.e_o[proc_control_node_B.k_gu
        - 1];
      proc_control_node_B.e_o[proc_control_node_B.k_gu - 1] = 0.0;
      for (proc_control_node_B.qs = proc_control_node_B.k_gu + 1;
           proc_control_node_B.qs <= proc_control_node_B.m_du + 2;
           proc_control_node_B.qs++) {
        proc_control_node_xrotg_b(proc_control_node_B.s_i[proc_control_node_B.qs
          - 1], proc_control_node_B.rt,
          &proc_control_node_B.s_i[proc_control_node_B.qs - 1],
          &proc_control_node_B.ztest, &proc_control_node_B.sqds,
          &proc_control_node_B.smm1);
        proc_control_node_B.ztest =
          proc_control_node_B.e_o[proc_control_node_B.qs - 1];
        proc_control_node_B.rt = proc_control_node_B.ztest *
          -proc_control_node_B.smm1;
        proc_control_node_B.e_o[proc_control_node_B.qs - 1] =
          proc_control_node_B.ztest * proc_control_node_B.sqds;
      }
      break;

     case 3:
      proc_control_node_B.rt = proc_control_node_B.s_i[proc_control_node_B.m_du
        + 1];
      proc_control_node_B.ztest = fabs(proc_control_node_B.rt);
      proc_control_node_B.sqds = fabs
        (proc_control_node_B.s_i[proc_control_node_B.m_du]);
      if ((proc_control_node_B.ztest > proc_control_node_B.sqds) || rtIsNaN
          (proc_control_node_B.sqds)) {
        proc_control_node_B.sqds = proc_control_node_B.ztest;
      }

      proc_control_node_B.ztest = fabs
        (proc_control_node_B.e_o[proc_control_node_B.m_du]);
      if ((proc_control_node_B.sqds > proc_control_node_B.ztest) || rtIsNaN
          (proc_control_node_B.ztest)) {
        proc_control_node_B.ztest = proc_control_node_B.sqds;
      }

      proc_control_node_B.sqds = fabs
        (proc_control_node_B.s_i[proc_control_node_B.k_gu]);
      if ((proc_control_node_B.ztest > proc_control_node_B.sqds) || rtIsNaN
          (proc_control_node_B.sqds)) {
        proc_control_node_B.sqds = proc_control_node_B.ztest;
      }

      proc_control_node_B.ztest = fabs
        (proc_control_node_B.e_o[proc_control_node_B.k_gu]);
      if ((proc_control_node_B.sqds > proc_control_node_B.ztest) || rtIsNaN
          (proc_control_node_B.ztest)) {
        proc_control_node_B.ztest = proc_control_node_B.sqds;
      }

      proc_control_node_B.rt /= proc_control_node_B.ztest;
      proc_control_node_B.smm1 =
        proc_control_node_B.s_i[proc_control_node_B.m_du] /
        proc_control_node_B.ztest;
      proc_control_node_B.emm1 =
        proc_control_node_B.e_o[proc_control_node_B.m_du] /
        proc_control_node_B.ztest;
      proc_control_node_B.sqds =
        proc_control_node_B.s_i[proc_control_node_B.k_gu] /
        proc_control_node_B.ztest;
      proc_control_node_B.smm1 = ((proc_control_node_B.smm1 +
        proc_control_node_B.rt) * (proc_control_node_B.smm1 -
        proc_control_node_B.rt) + proc_control_node_B.emm1 *
        proc_control_node_B.emm1) / 2.0;
      proc_control_node_B.emm1 *= proc_control_node_B.rt;
      proc_control_node_B.emm1 *= proc_control_node_B.emm1;
      if ((proc_control_node_B.smm1 != 0.0) || (proc_control_node_B.emm1 != 0.0))
      {
        proc_control_node_B.shift_n = sqrt(proc_control_node_B.smm1 *
          proc_control_node_B.smm1 + proc_control_node_B.emm1);
        if (proc_control_node_B.smm1 < 0.0) {
          proc_control_node_B.shift_n = -proc_control_node_B.shift_n;
        }

        proc_control_node_B.shift_n = proc_control_node_B.emm1 /
          (proc_control_node_B.smm1 + proc_control_node_B.shift_n);
      } else {
        proc_control_node_B.shift_n = 0.0;
      }

      proc_control_node_B.rt = (proc_control_node_B.sqds +
        proc_control_node_B.rt) * (proc_control_node_B.sqds -
        proc_control_node_B.rt) + proc_control_node_B.shift_n;
      proc_control_node_B.sqds *=
        proc_control_node_B.e_o[proc_control_node_B.k_gu] /
        proc_control_node_B.ztest;
      for (proc_control_node_B.qs = proc_control_node_B.k_gu + 1;
           proc_control_node_B.qs <= proc_control_node_B.m_du + 1;
           proc_control_node_B.qs++) {
        proc_control_node_xrotg_b(proc_control_node_B.rt,
          proc_control_node_B.sqds, &proc_control_node_B.ztest,
          &proc_control_node_B.shift_n, &proc_control_node_B.smm1,
          &proc_control_node_B.emm1);
        if (proc_control_node_B.qs > proc_control_node_B.k_gu + 1) {
          proc_control_node_B.e_o[0] = proc_control_node_B.ztest;
        }

        proc_control_node_B.ztest =
          proc_control_node_B.e_o[proc_control_node_B.qs - 1];
        proc_control_node_B.rt = proc_control_node_B.s_i[proc_control_node_B.qs
          - 1];
        proc_control_node_B.e_o[proc_control_node_B.qs - 1] =
          proc_control_node_B.ztest * proc_control_node_B.smm1 -
          proc_control_node_B.rt * proc_control_node_B.emm1;
        proc_control_node_B.sqds = proc_control_node_B.emm1 *
          proc_control_node_B.s_i[proc_control_node_B.qs];
        proc_control_node_B.s_i[proc_control_node_B.qs] *=
          proc_control_node_B.smm1;
        proc_control_node_xrotg_b(proc_control_node_B.rt *
          proc_control_node_B.smm1 + proc_control_node_B.ztest *
          proc_control_node_B.emm1, proc_control_node_B.sqds,
          &proc_control_node_B.s_i[proc_control_node_B.qs - 1],
          &proc_control_node_B.a__3_p, &proc_control_node_B.shift_n,
          &proc_control_node_B.d_sn);
        proc_control_node_B.rt = proc_control_node_B.e_o[proc_control_node_B.qs
          - 1] * proc_control_node_B.shift_n + proc_control_node_B.d_sn *
          proc_control_node_B.s_i[proc_control_node_B.qs];
        proc_control_node_B.s_i[proc_control_node_B.qs] =
          proc_control_node_B.e_o[proc_control_node_B.qs - 1] *
          -proc_control_node_B.d_sn + proc_control_node_B.shift_n *
          proc_control_node_B.s_i[proc_control_node_B.qs];
        proc_control_node_B.sqds = proc_control_node_B.d_sn *
          proc_control_node_B.e_o[proc_control_node_B.qs];
        proc_control_node_B.e_o[proc_control_node_B.qs] *=
          proc_control_node_B.shift_n;
      }

      proc_control_node_B.e_o[proc_control_node_B.m_du] = proc_control_node_B.rt;
      i++;
      break;

     default:
      if (proc_control_node_B.s_i[proc_control_node_B.k_gu] < 0.0) {
        proc_control_node_B.s_i[proc_control_node_B.k_gu] =
          -proc_control_node_B.s_i[proc_control_node_B.k_gu];
      }

      i = proc_control_node_B.k_gu + 1;
      while ((proc_control_node_B.k_gu + 1 < 3) &&
             (proc_control_node_B.s_i[proc_control_node_B.k_gu] <
              proc_control_node_B.s_i[i])) {
        proc_control_node_B.rt =
          proc_control_node_B.s_i[proc_control_node_B.k_gu];
        proc_control_node_B.s_i[proc_control_node_B.k_gu] =
          proc_control_node_B.s_i[i];
        proc_control_node_B.s_i[i] = proc_control_node_B.rt;
        proc_control_node_B.k_gu = i;
        i++;
      }

      i = 0;
      proc_control_node_B.m_du--;
      break;
    }
  }

  U[0] = proc_control_node_B.s_i[0];
  U[1] = proc_control_node_B.s_i[1];
  U[2] = proc_control_node_B.s_i[2];
}

static void proc_control_node_rates(const real_T wi[3], const real_T wf[3],
  const real_T h[20], const real_T dtheta[20], const real_T e[60], real_T w[63])
{
  boolean_T flag;
  proc_control_node_B.iter = 0.0;
  flag = true;
  memset(&proc_control_node_B.a_o[0], 0, 21U * sizeof(real_T));
  memset(&proc_control_node_B.b_f[0], 0, 21U * sizeof(real_T));
  memset(&proc_control_node_B.c_o[0], 0, 21U * sizeof(real_T));
  memset(&w[0], 0, 63U * sizeof(real_T));
  memset(&proc_control_node_B.wprev[0], 0, 63U * sizeof(real_T));
  proc_control_node_B.e_c[0] = e[0];
  proc_control_node_B.e_c[1] = e[20];
  proc_control_node_B.e_c[2] = e[40];
  proc_control_node_B.e_j1[0] = e[19];
  proc_control_node_B.e_j1[1] = e[39];
  proc_control_node_B.e_j1[2] = e[59];
  while (flag) {
    for (proc_control_node_B.i_ic = 0; proc_control_node_B.i_ic < 3;
         proc_control_node_B.i_ic++) {
      memcpy(&proc_control_node_B.wprev[proc_control_node_B.i_ic * 21 + 1],
             &w[proc_control_node_B.i_ic * 21 + 1], 19U * sizeof(real_T));
    }

    for (proc_control_node_B.i_ic = 0; proc_control_node_B.i_ic < 19;
         proc_control_node_B.i_ic++) {
      proc_control_node_B.a_o[proc_control_node_B.i_ic + 1] = 2.0 /
        h[proc_control_node_B.i_ic];
      proc_control_node_B.dw = h[proc_control_node_B.i_ic + 1];
      proc_control_node_B.b_f[proc_control_node_B.i_ic + 1] = 4.0 /
        proc_control_node_B.dw + 4.0 / h[proc_control_node_B.i_ic];
      proc_control_node_B.c_o[proc_control_node_B.i_ic + 1] = 2.0 /
        proc_control_node_B.dw;
      if (dtheta[proc_control_node_B.i_ic] > 1.0E-6) {
        proc_control_node_B.ca = cos(dtheta[proc_control_node_B.i_ic]);
        proc_control_node_B.sa = sin(dtheta[proc_control_node_B.i_ic]);
        proc_control_node_B.absx_l = e[proc_control_node_B.i_ic + 40];
        proc_control_node_B.temp2_idx_1 =
          proc_control_node_B.wprev[proc_control_node_B.i_ic + 43];
        proc_control_node_B.temp2_idx_2 =
          proc_control_node_B.wprev[proc_control_node_B.i_ic + 22];
        proc_control_node_B.temp2_idx_0_tmp = e[proc_control_node_B.i_ic + 20];
        proc_control_node_B.temp2_idx_0 = proc_control_node_B.temp2_idx_0_tmp *
          proc_control_node_B.temp2_idx_1 - proc_control_node_B.absx_l *
          proc_control_node_B.temp2_idx_2;
        proc_control_node_B.windote =
          proc_control_node_B.wprev[proc_control_node_B.i_ic + 1];
        proc_control_node_B.temp2_idx_1 = proc_control_node_B.absx_l *
          proc_control_node_B.windote - e[proc_control_node_B.i_ic] *
          proc_control_node_B.temp2_idx_1;
        proc_control_node_B.temp2_idx_2 = e[proc_control_node_B.i_ic] *
          proc_control_node_B.temp2_idx_2 - proc_control_node_B.temp2_idx_0_tmp *
          proc_control_node_B.windote;
        proc_control_node_B.windote = 0.0;
        proc_control_node_B.magsq = 0.0;
        for (proc_control_node_B.b_k_a = 0; proc_control_node_B.b_k_a < 3;
             proc_control_node_B.b_k_a++) {
          proc_control_node_B.windote_tmp = proc_control_node_B.wprev[(21 *
            proc_control_node_B.b_k_a + proc_control_node_B.i_ic) + 1];
          proc_control_node_B.windote += proc_control_node_B.windote_tmp *
            e[proc_control_node_B.i_ic + 20 * proc_control_node_B.b_k_a];
          proc_control_node_B.magsq += proc_control_node_B.windote_tmp *
            proc_control_node_B.windote_tmp;
        }

        proc_control_node_B.magsq = (proc_control_node_B.magsq -
          proc_control_node_B.windote * proc_control_node_B.windote) * 0.5 *
          (dtheta[proc_control_node_B.i_ic] - proc_control_node_B.sa) / (1.0 -
          proc_control_node_B.ca);
        proc_control_node_B.ca = (dtheta[proc_control_node_B.i_ic] *
          proc_control_node_B.sa - (1.0 - proc_control_node_B.ca) * 2.0) *
          proc_control_node_B.windote / ((1.0 - proc_control_node_B.ca) *
          dtheta[proc_control_node_B.i_ic]);
        proc_control_node_B.temp1[0] = (proc_control_node_B.absx_l *
          proc_control_node_B.temp2_idx_1 - proc_control_node_B.temp2_idx_0_tmp *
          proc_control_node_B.temp2_idx_2) * proc_control_node_B.ca +
          e[proc_control_node_B.i_ic] * proc_control_node_B.magsq;
        proc_control_node_B.temp1[1] = (e[proc_control_node_B.i_ic] *
          proc_control_node_B.temp2_idx_2 - proc_control_node_B.absx_l *
          proc_control_node_B.temp2_idx_0) * proc_control_node_B.ca +
          proc_control_node_B.temp2_idx_0_tmp * proc_control_node_B.magsq;
        proc_control_node_B.temp1[2] = (proc_control_node_B.temp2_idx_0_tmp *
          proc_control_node_B.temp2_idx_0 - e[proc_control_node_B.i_ic] *
          proc_control_node_B.temp2_idx_1) * proc_control_node_B.ca +
          proc_control_node_B.absx_l * proc_control_node_B.magsq;
      } else {
        proc_control_node_B.temp1[0] = 0.0;
        proc_control_node_B.temp1[1] = 0.0;
        proc_control_node_B.temp1[2] = 0.0;
      }

      proc_control_node_B.absx_l = dtheta[proc_control_node_B.i_ic];
      proc_control_node_B.temp2_idx_0_tmp = h[proc_control_node_B.i_ic] *
        h[proc_control_node_B.i_ic];
      proc_control_node_B.temp2_idx_0 = dtheta[proc_control_node_B.i_ic + 1];
      proc_control_node_B.dw *= proc_control_node_B.dw;
      w[proc_control_node_B.i_ic + 1] = (e[proc_control_node_B.i_ic] *
        proc_control_node_B.absx_l / proc_control_node_B.temp2_idx_0_tmp +
        e[proc_control_node_B.i_ic + 1] * proc_control_node_B.temp2_idx_0 /
        proc_control_node_B.dw) * 6.0 - proc_control_node_B.temp1[0];
      w[proc_control_node_B.i_ic + 22] = (e[proc_control_node_B.i_ic + 20] *
        proc_control_node_B.absx_l / proc_control_node_B.temp2_idx_0_tmp +
        e[proc_control_node_B.i_ic + 21] * proc_control_node_B.temp2_idx_0 /
        proc_control_node_B.dw) * 6.0 - proc_control_node_B.temp1[1];
      w[proc_control_node_B.i_ic + 43] = (e[proc_control_node_B.i_ic + 40] *
        proc_control_node_B.absx_l / proc_control_node_B.temp2_idx_0_tmp +
        e[proc_control_node_B.i_ic + 41] * proc_control_node_B.temp2_idx_0 /
        proc_control_node_B.dw) * 6.0 - proc_control_node_B.temp1[2];
    }

    proc_control_node_bd(proc_control_node_B.e_c, dtheta[0], wi,
                         proc_control_node_B.temp1);
    w[1] -= proc_control_node_B.temp1[0] * proc_control_node_B.a_o[1];
    w[22] -= proc_control_node_B.a_o[1] * proc_control_node_B.temp1[1];
    w[43] -= proc_control_node_B.a_o[1] * proc_control_node_B.temp1[2];
    proc_control_node_bd_b(proc_control_node_B.e_j1, dtheta[19], wf,
      proc_control_node_B.temp1);
    w[19] -= proc_control_node_B.temp1[0] * proc_control_node_B.c_o[19];
    w[40] -= proc_control_node_B.temp1[1] * proc_control_node_B.c_o[19];
    w[61] -= proc_control_node_B.temp1[2] * proc_control_node_B.c_o[19];
    for (proc_control_node_B.i_ic = 0; proc_control_node_B.i_ic < 19;
         proc_control_node_B.i_ic++) {
      proc_control_node_B.dw = proc_control_node_B.a_o[proc_control_node_B.i_ic
        + 2];
      proc_control_node_B.b_f[proc_control_node_B.i_ic + 2] -=
        proc_control_node_B.c_o[proc_control_node_B.i_ic + 1] *
        proc_control_node_B.dw /
        proc_control_node_B.b_f[proc_control_node_B.i_ic + 1];
      proc_control_node_B.e_l[0] = e[proc_control_node_B.i_ic + 1];
      proc_control_node_B.w_a[0] = w[proc_control_node_B.i_ic + 1];
      proc_control_node_B.e_l[1] = e[proc_control_node_B.i_ic + 21];
      proc_control_node_B.w_a[1] = w[proc_control_node_B.i_ic + 22];
      proc_control_node_B.e_l[2] = e[proc_control_node_B.i_ic + 41];
      proc_control_node_B.w_a[2] = w[proc_control_node_B.i_ic + 43];
      proc_control_node_bd(proc_control_node_B.e_l,
                           dtheta[proc_control_node_B.i_ic + 1],
                           proc_control_node_B.w_a, proc_control_node_B.temp1);
      proc_control_node_B.ca = proc_control_node_B.b_f[proc_control_node_B.i_ic
        + 1];
      proc_control_node_B.temp2_idx_0_tmp = w[proc_control_node_B.i_ic + 23] -
        proc_control_node_B.temp1[1] * proc_control_node_B.dw /
        proc_control_node_B.ca;
      proc_control_node_B.temp2_idx_0 = w[proc_control_node_B.i_ic + 44] -
        proc_control_node_B.temp1[2] * proc_control_node_B.dw /
        proc_control_node_B.ca;
      w[proc_control_node_B.i_ic + 2] -= proc_control_node_B.temp1[0] *
        proc_control_node_B.dw / proc_control_node_B.ca;
      w[proc_control_node_B.i_ic + 23] = proc_control_node_B.temp2_idx_0_tmp;
      w[proc_control_node_B.i_ic + 44] = proc_control_node_B.temp2_idx_0;
    }

    w[19] /= proc_control_node_B.b_f[19];
    w[40] /= proc_control_node_B.b_f[19];
    w[61] /= proc_control_node_B.b_f[19];
    for (proc_control_node_B.i_ic = 0; proc_control_node_B.i_ic < 18;
         proc_control_node_B.i_ic++) {
      proc_control_node_B.e_l[0] = e[18 - proc_control_node_B.i_ic];
      proc_control_node_B.w_a[0] = w[19 - proc_control_node_B.i_ic];
      proc_control_node_B.e_l[1] = e[38 - proc_control_node_B.i_ic];
      proc_control_node_B.w_a[1] = w[40 - proc_control_node_B.i_ic];
      proc_control_node_B.e_l[2] = e[58 - proc_control_node_B.i_ic];
      proc_control_node_B.w_a[2] = w[61 - proc_control_node_B.i_ic];
      proc_control_node_bd_b(proc_control_node_B.e_l, dtheta[18 -
        proc_control_node_B.i_ic], proc_control_node_B.w_a,
        proc_control_node_B.temp1);
      proc_control_node_B.dw = proc_control_node_B.c_o[18 -
        proc_control_node_B.i_ic];
      proc_control_node_B.absx_l = proc_control_node_B.b_f[18 -
        proc_control_node_B.i_ic];
      proc_control_node_B.temp2_idx_0_tmp = (w[39 - proc_control_node_B.i_ic] -
        proc_control_node_B.dw * proc_control_node_B.temp1[1]) /
        proc_control_node_B.absx_l;
      proc_control_node_B.temp2_idx_0 = (w[60 - proc_control_node_B.i_ic] -
        proc_control_node_B.dw * proc_control_node_B.temp1[2]) /
        proc_control_node_B.absx_l;
      w[18 - proc_control_node_B.i_ic] = (w[18 - proc_control_node_B.i_ic] -
        proc_control_node_B.dw * proc_control_node_B.temp1[0]) /
        proc_control_node_B.absx_l;
      w[39 - proc_control_node_B.i_ic] = proc_control_node_B.temp2_idx_0_tmp;
      w[60 - proc_control_node_B.i_ic] = proc_control_node_B.temp2_idx_0;
    }

    proc_control_node_B.dw = 0.0;
    for (proc_control_node_B.b_k_a = 0; proc_control_node_B.b_k_a < 3;
         proc_control_node_B.b_k_a++) {
      for (proc_control_node_B.i_ic = 0; proc_control_node_B.i_ic < 19;
           proc_control_node_B.i_ic++) {
        proc_control_node_B.x_tmp = proc_control_node_B.i_ic + 19 *
          proc_control_node_B.b_k_a;
        proc_control_node_B.x_f[proc_control_node_B.x_tmp] = w[(21 *
          proc_control_node_B.b_k_a + proc_control_node_B.i_ic) + 1] -
          proc_control_node_B.wprev[((proc_control_node_B.i_ic + 2) + 21 *
          proc_control_node_B.b_k_a) - 1];
        proc_control_node_B.absx_l = fabs
          (proc_control_node_B.x_f[proc_control_node_B.x_tmp]);
        if (rtIsNaN(proc_control_node_B.absx_l) || (proc_control_node_B.absx_l >
             proc_control_node_B.dw)) {
          proc_control_node_B.dw = proc_control_node_B.absx_l;
        }
      }
    }

    if ((!rtIsInf(proc_control_node_B.dw)) && (!rtIsNaN(proc_control_node_B.dw)))
    {
      proc_control_node_svd(proc_control_node_B.x_f, proc_control_node_B.temp1);
      proc_control_node_B.dw = proc_control_node_B.temp1[0];
    }

    proc_control_node_B.iter++;
    if ((proc_control_node_B.iter < 10.0) && (proc_control_node_B.dw > 1.0E-9))
    {
    } else {
      flag = false;
    }
  }

  w[0] = wi[0];
  w[20] = wf[0];
  w[21] = wi[1];
  w[41] = wf[1];
  w[42] = wi[2];
  w[62] = wf[2];
}

static void proc_control_no_quaternionC2fit(const real_T y_a[21], const real_T
  y_b[21], const real_T y_c[21], const real_T y_d[21], const real_T x[21],
  real_T h[20], real_T dtheta[20], real_T e[60], real_T w[63])
{
  proc_control_node_B.work_hr = x[0];
  for (proc_control_node_B.m_dz = 0; proc_control_node_B.m_dz < 20;
       proc_control_node_B.m_dz++) {
    proc_control_node_B.tmp2 = proc_control_node_B.work_hr;
    proc_control_node_B.work_hr = x[proc_control_node_B.m_dz + 1];
    h[proc_control_node_B.m_dz] = proc_control_node_B.work_hr -
      proc_control_node_B.tmp2;
  }

  proc_control_node_getang(&y_a[0], &y_b[0], &y_c[0], &y_d[0], &y_a[1], &y_b[1],
    &y_c[1], &y_d[1], dtheta, e);
  proc_control_node_B.dv22[0] = 0.0;
  proc_control_node_B.dv23[0] = 0.0;
  proc_control_node_B.dv22[1] = 0.0;
  proc_control_node_B.dv23[1] = 0.0;
  proc_control_node_B.dv22[2] = 0.0;
  proc_control_node_B.dv23[2] = 0.0;
  proc_control_node_rates(proc_control_node_B.dv22, proc_control_node_B.dv23, h,
    dtheta, e, w);
}

static void proc_control_node_ppval(const real_T pp_breaks[21], const real_T
  pp_coefs[80], const real_T x[21], real_T v[21])
{
  real_T xloc;
  int32_T b_ix;
  int32_T high_i;
  int32_T low_i;
  int32_T low_ip1;
  int32_T mid_i;
  for (b_ix = 0; b_ix < 21; b_ix++) {
    if (rtIsNaN(x[b_ix])) {
      v[b_ix] = x[b_ix];
    } else {
      low_i = 0;
      low_ip1 = 1;
      high_i = 21;
      while (high_i > low_ip1 + 1) {
        mid_i = ((low_i + high_i) + 1) >> 1;
        if (x[b_ix] >= pp_breaks[mid_i - 1]) {
          low_i = mid_i - 1;
          low_ip1 = mid_i;
        } else {
          high_i = mid_i;
        }
      }

      xloc = x[b_ix] - pp_breaks[low_i];
      v[b_ix] = ((xloc * pp_coefs[low_i] + pp_coefs[low_i + 20]) * xloc +
                 pp_coefs[low_i + 40]) * xloc + pp_coefs[low_i + 60];
    }
  }
}

real_T rt_remd_snf(real_T u0, real_T u1)
{
  real_T u1_0;
  real_T y;
  if (rtIsNaN(u0) || rtIsNaN(u1) || rtIsInf(u0)) {
    y = (rtNaN);
  } else if (rtIsInf(u1)) {
    y = u0;
  } else {
    if (u1 < 0.0) {
      u1_0 = ceil(u1);
    } else {
      u1_0 = floor(u1);
    }

    if ((u1 != 0.0) && (u1 != u1_0)) {
      u1_0 = fabs(u0 / u1);
      if (!(fabs(u1_0 - floor(u1_0 + 0.5)) > DBL_EPSILON * u1_0)) {
        y = 0.0 * u0;
      } else {
        y = fmod(u0, u1);
      }
    } else {
      y = fmod(u0, u1);
    }
  }

  return y;
}

static real_T proc_control_node_ppval_b(const real_T pp_breaks[21], const real_T
  pp_coefs[80], real_T x)
{
  real_T xloc;
  int32_T high_i;
  int32_T low_i;
  int32_T low_ip1;
  int32_T mid_i;
  low_i = 0;
  low_ip1 = 1;
  high_i = 21;
  while (high_i > low_ip1 + 1) {
    mid_i = ((low_i + high_i) + 1) >> 1;
    if (x >= pp_breaks[mid_i - 1]) {
      low_i = mid_i - 1;
      low_ip1 = mid_i;
    } else {
      high_i = mid_i;
    }
  }

  xloc = x - pp_breaks[low_i];
  return ((xloc * pp_coefs[low_i] + pp_coefs[low_i + 20]) * xloc +
          pp_coefs[low_i + 40]) * xloc + pp_coefs[low_i + 60];
}

static real_T proc_control_node_ppval_b4(const real_T pp_breaks[21], const
  real_T pp_coefs[80], real_T x)
{
  real_T v;
  real_T xloc;
  int32_T high_i;
  int32_T low_i;
  int32_T low_ip1;
  int32_T mid_i;
  if (rtIsNaN(x)) {
    v = x;
  } else {
    low_i = 0;
    low_ip1 = 1;
    high_i = 21;
    while (high_i > low_ip1 + 1) {
      mid_i = ((low_i + high_i) + 1) >> 1;
      if (x >= pp_breaks[mid_i - 1]) {
        low_i = mid_i - 1;
        low_ip1 = mid_i;
      } else {
        high_i = mid_i;
      }
    }

    xloc = x - pp_breaks[low_i];
    v = ((xloc * pp_coefs[low_i] + pp_coefs[low_i + 20]) * xloc + pp_coefs[low_i
         + 40]) * xloc + pp_coefs[low_i + 60];
  }

  return v;
}

static real_T proc_control__mapElementsToBins(real_T x, const real_T edges[21])
{
  real_T bins;
  int32_T high_i;
  int32_T low_i;
  int32_T low_ip1;
  int32_T mid_i;
  boolean_T guard1 = false;
  bins = (rtNaN);
  if ((x >= edges[0]) && (x <= edges[20])) {
    bins = ceil((x - edges[0]) / (edges[1] - edges[0]));
    guard1 = false;
    if ((bins >= 1.0) && (bins < 21.0)) {
      low_i = static_cast<int32_T>(bins);
      if ((x >= edges[low_i - 1]) && (x < edges[low_i])) {
      } else {
        guard1 = true;
      }
    } else {
      guard1 = true;
    }

    if (guard1) {
      low_i = 1;
      low_ip1 = 1;
      high_i = 21;
      while (high_i > low_ip1 + 1) {
        mid_i = (low_i + high_i) >> 1;
        if (x >= edges[mid_i - 1]) {
          low_i = mid_i;
          low_ip1 = mid_i;
        } else {
          high_i = mid_i;
        }
      }

      bins = low_i;
    }
  }

  return bins;
}

static void proc_control_node_eml_find_b4(const boolean_T x_data[], const
  int32_T x_size[2], int32_T i_data[], int32_T *i_size)
{
  boolean_T exitg1;
  proc_control_node_B.nx_k = x_size[0] * x_size[1];
  proc_control_node_B.idx_p = 0;
  *i_size = proc_control_node_B.nx_k;
  proc_control_node_B.ii = 0;
  exitg1 = false;
  while ((!exitg1) && (proc_control_node_B.ii <= proc_control_node_B.nx_k - 1))
  {
    if (x_data[0]) {
      proc_control_node_B.idx_p = 1;
      i_data[0] = 1;
      exitg1 = true;
    } else {
      proc_control_node_B.ii = 1;
    }
  }

  if (proc_control_node_B.nx_k == 1) {
    if (proc_control_node_B.idx_p == 0) {
      *i_size = 0;
    }
  } else {
    proc_control_node_B.nx_k = (1 <= proc_control_node_B.idx_p);
    if (0 <= proc_control_node_B.nx_k - 1) {
      i_data[0] = 1;
    }

    *i_size = proc_control_node_B.nx_k;
  }
}

static void proc_control_node_fresnel_b(const real_T x_data[], const int32_T
  x_size[2], creal_T z_data[], int32_T z_size[2])
{
  static const real_T tmp[11] = { 0.50444207364338323, 0.19710283352552341,
    0.018764858409257526, 0.00068407938091539307, 1.1513882611188428E-5,
    9.8285244368842225E-8, 4.4534441586175015E-10, 1.0826804113902088E-12,
    1.375554606332618E-15, 8.3635443563067741E-19, 1.8695871016278324E-22 };

  static const real_T tmp_0[11] = { 1.0, 0.75158639835337893,
    0.11688892585919138, 0.0064405152650885865, 0.00015593440916415301,
    1.8462756734893055E-6, 1.1269922476399903E-8, 3.6014002958937136E-11,
    5.8875453362157839E-14, 4.5200143407412973E-17, 1.2544323709001127E-20 };

  static const real_T tmp_1[12] = { 1.0, 1.4749575992512833, 0.33774898912002,
    0.025360374142033879, 0.00081467910718430615, 1.2754507566772912E-5,
    1.0431458965757199E-7, 4.6068072814652043E-10, 1.1027321506624028E-12,
    1.3879653125957886E-15, 8.3915881628311874E-19, 1.8695871016278324E-22 };

  const real_T *fd;
  const real_T *gd;
  const real_T *gn;
  gn = &tmp[0];
  fd = &tmp_0[0];
  gd = &tmp_1[0];
  z_size[0] = x_size[0];
  z_size[1] = x_size[1];
  proc_control_node_B.nx_tmp_e = x_size[0] * x_size[1] - 1;
  for (proc_control_node_B.i_dt = 0; proc_control_node_B.i_dt <=
       proc_control_node_B.nx_tmp_e; proc_control_node_B.i_dt++) {
    z_data[0].re = (rtNaN);
    z_data[0].im = 0.0;
  }

  for (proc_control_node_B.i_dt = 0; proc_control_node_B.i_dt <=
       proc_control_node_B.nx_tmp_e; proc_control_node_B.i_dt++) {
    proc_control_node_B.xabs_data_g = fabs(x_data[0]);
  }

  if (0 <= x_size[0] * x_size[1] - 1) {
    proc_control_node_B.ismall_tmp_data = proc_control_node_B.xabs_data_g *
      proc_control_node_B.xabs_data_g;
  }

  proc_control_node_B.ismall_tmp_size[0] = x_size[0];
  proc_control_node_B.ismall_tmp_size[1] = x_size[1];
  proc_control_node_B.i14 = x_size[0] * x_size[1] - 1;
  if (0 <= proc_control_node_B.i14) {
    proc_control_node_B.ismall_tmp_data_l = (proc_control_node_B.ismall_tmp_data
      < 2.5625);
  }

  proc_control_node_eml_find_b4(&proc_control_node_B.ismall_tmp_data_l,
    proc_control_node_B.ismall_tmp_size, &proc_control_node_B.tmp_data_m4,
    &proc_control_node_B.tmp_size_i);
  if (0 <= proc_control_node_B.tmp_size_i - 1) {
    proc_control_node_B.ismall_data_idx_0 = proc_control_node_B.tmp_data_m4;
  }

  if (0 <= proc_control_node_B.tmp_size_i - 1) {
    proc_control_node_B.x4_data_idx_0 = proc_control_node_B.ismall_tmp_data;
  }

  proc_control_node_B.nx_me = proc_control_node_B.tmp_size_i;
  for (proc_control_node_B.i_dt = 0; proc_control_node_B.i_dt <
       proc_control_node_B.nx_me; proc_control_node_B.i_dt++) {
    proc_control_node_B.x4_data_idx_0 *= proc_control_node_B.x4_data_idx_0;
  }

  proc_control_node_B.nx_me = proc_control_node_B.tmp_size_i;
  for (proc_control_node_B.i_dt = 0; proc_control_node_B.i_dt <
       proc_control_node_B.nx_me; proc_control_node_B.i_dt++) {
    proc_control_node_B.r_cy = proc_control_node_B.xabs_data_g;
    z_data[proc_control_node_B.ismall_data_idx_0 - 1].re =
      (((((-4.9884311457357354E-8 * proc_control_node_B.x4_data_idx_0 +
           9.5042806282985963E-6) * proc_control_node_B.x4_data_idx_0 +
          -0.00064519143568396507) * proc_control_node_B.x4_data_idx_0 +
         0.018884331939670384) * proc_control_node_B.x4_data_idx_0 +
        -0.20552590095501388) * proc_control_node_B.x4_data_idx_0 + 1.0) /
      ((((((3.99982968972496E-12 * proc_control_node_B.x4_data_idx_0 +
            9.1543921577465745E-10) * proc_control_node_B.x4_data_idx_0 +
           1.2500186247959882E-7) * proc_control_node_B.x4_data_idx_0 +
          1.2226278902417902E-5) * proc_control_node_B.x4_data_idx_0 +
         0.00086802954294178428) * proc_control_node_B.x4_data_idx_0 +
        0.041214209072219982) * proc_control_node_B.x4_data_idx_0 + 1.0) *
      proc_control_node_B.r_cy;
    z_data[proc_control_node_B.ismall_data_idx_0 - 1].im =
      (((((-2991.8191940101983 * proc_control_node_B.x4_data_idx_0 +
           708840.04525773856) * proc_control_node_B.x4_data_idx_0 +
          -6.2974148620586254E+7) * proc_control_node_B.x4_data_idx_0 +
         2.5489088057337637E+9) * proc_control_node_B.x4_data_idx_0 +
        -4.429795180596978E+10) * proc_control_node_B.x4_data_idx_0 +
       3.1801629787656781E+11) * (proc_control_node_B.r_cy *
      proc_control_node_B.r_cy) / ((((((proc_control_node_B.x4_data_idx_0 +
      281.37626888999432) * proc_control_node_B.x4_data_idx_0 +
      45584.781080653258) * proc_control_node_B.x4_data_idx_0 +
      5.1734388877009638E+6) * proc_control_node_B.x4_data_idx_0 +
      4.1932024589811122E+8) * proc_control_node_B.x4_data_idx_0 +
      2.2441179564534092E+10) * proc_control_node_B.x4_data_idx_0 +
      6.0736638949008459E+11) * proc_control_node_B.r_cy;
  }

  proc_control_node_B.ismall_tmp_size[0] = x_size[0];
  proc_control_node_B.ismall_tmp_size[1] = x_size[1];
  if (0 <= proc_control_node_B.i14) {
    proc_control_node_B.ismall_tmp_data_l = ((2.5625 <=
      proc_control_node_B.ismall_tmp_data) &&
      (proc_control_node_B.ismall_tmp_data <= 1.367076676E+9));
  }

  proc_control_node_eml_find_b4(&proc_control_node_B.ismall_tmp_data_l,
    proc_control_node_B.ismall_tmp_size, &proc_control_node_B.tmp_data_m4,
    &proc_control_node_B.tmp_size_i);
  if (0 <= proc_control_node_B.tmp_size_i - 1) {
    proc_control_node_B.ismall_data_idx_0 = proc_control_node_B.tmp_data_m4;
  }

  if (0 <= proc_control_node_B.tmp_size_i - 1) {
    proc_control_node_B.z_data_idx_0 = 1.0 /
      (proc_control_node_B.ismall_tmp_data * 3.1415926535897931);
  }

  if (0 <= proc_control_node_B.tmp_size_i - 1) {
    proc_control_node_B.x4_data_idx_0 = proc_control_node_B.z_data_idx_0 *
      proc_control_node_B.z_data_idx_0;
  }

  if (0 <= proc_control_node_B.tmp_size_i - 1) {
    proc_control_node_B.r_cy = proc_control_node_B.ismall_tmp_data;
    proc_control_node_B.x_data_j[0].re = proc_control_node_B.r_cy * 0.0;
    proc_control_node_B.x_data_j[0].im = proc_control_node_B.r_cy *
      1.5707963267948966;
  }

  proc_control_node_B.nx_me = proc_control_node_B.tmp_size_i - 1;
  for (proc_control_node_B.i_dt = 0; proc_control_node_B.i_dt <=
       proc_control_node_B.nx_me; proc_control_node_B.i_dt++) {
    if (proc_control_node_B.x_data_j[0].im == 0.0) {
      proc_control_node_B.y_re = exp(proc_control_node_B.x_data_j[0].re);
      proc_control_node_B.r_cy = 0.0;
    } else if (rtIsInf(proc_control_node_B.x_data_j[0].im) && rtIsInf
               (proc_control_node_B.x_data_j[0].re) &&
               (proc_control_node_B.x_data_j[0].re < 0.0)) {
      proc_control_node_B.y_re = 0.0;
      proc_control_node_B.r_cy = 0.0;
    } else {
      proc_control_node_B.r_cy = exp(proc_control_node_B.x_data_j[0].re / 2.0);
      proc_control_node_B.y_re = proc_control_node_B.r_cy * cos
        (proc_control_node_B.x_data_j[0].im) * proc_control_node_B.r_cy;
      proc_control_node_B.r_cy *= proc_control_node_B.r_cy * sin
        (proc_control_node_B.x_data_j[0].im);
    }

    proc_control_node_B.x_ng.re = proc_control_node_B.y_re;
    proc_control_node_B.x_ng.im = proc_control_node_B.r_cy;
    proc_control_node_B.x_data_j[0] = proc_control_node_B.x_ng;
  }

  proc_control_node_B.nx_me = proc_control_node_B.tmp_size_i;
  if (0 <= proc_control_node_B.tmp_size_i - 1) {
    proc_control_node_B.x4_re_b = (((((((((0.42154355504367752 *
      proc_control_node_B.x4_data_idx_0 + 0.1434079197807589) *
      proc_control_node_B.x4_data_idx_0 + 0.011522095507358577) *
      proc_control_node_B.x4_data_idx_0 + 0.000345017939782574) *
      proc_control_node_B.x4_data_idx_0 + 4.6361374928786735E-6) *
      proc_control_node_B.x4_data_idx_0 + 3.0556898379025758E-8) *
      proc_control_node_B.x4_data_idx_0 + 1.0230451416490724E-10) *
      proc_control_node_B.x4_data_idx_0 + 1.7201074326816183E-13) *
      proc_control_node_B.x4_data_idx_0 + 1.3428327623306275E-16) *
      proc_control_node_B.x4_data_idx_0 + 3.763297112699879E-20) *
      proc_control_node_B.x4_data_idx_0 / ((((((((((fd[0] *
      proc_control_node_B.x4_data_idx_0 + fd[1]) *
      proc_control_node_B.x4_data_idx_0 + fd[2]) *
      proc_control_node_B.x4_data_idx_0 + fd[3]) *
      proc_control_node_B.x4_data_idx_0 + fd[4]) *
      proc_control_node_B.x4_data_idx_0 + fd[5]) *
      proc_control_node_B.x4_data_idx_0 + fd[6]) *
      proc_control_node_B.x4_data_idx_0 + fd[7]) *
      proc_control_node_B.x4_data_idx_0 + fd[8]) *
      proc_control_node_B.x4_data_idx_0 + fd[9]) *
      proc_control_node_B.x4_data_idx_0 + fd[10]) - 1.0;
    proc_control_node_B.y_re = ((((((((((gn[0] *
      proc_control_node_B.x4_data_idx_0 + gn[1]) *
      proc_control_node_B.x4_data_idx_0 + gn[2]) *
      proc_control_node_B.x4_data_idx_0 + gn[3]) *
      proc_control_node_B.x4_data_idx_0 + gn[4]) *
      proc_control_node_B.x4_data_idx_0 + gn[5]) *
      proc_control_node_B.x4_data_idx_0 + gn[6]) *
      proc_control_node_B.x4_data_idx_0 + gn[7]) *
      proc_control_node_B.x4_data_idx_0 + gn[8]) *
      proc_control_node_B.x4_data_idx_0 + gn[9]) *
      proc_control_node_B.x4_data_idx_0 + gn[10]) *
      proc_control_node_B.z_data_idx_0 / (((((((((((gd[0] *
      proc_control_node_B.x4_data_idx_0 + gd[1]) *
      proc_control_node_B.x4_data_idx_0 + gd[2]) *
      proc_control_node_B.x4_data_idx_0 + gd[3]) *
      proc_control_node_B.x4_data_idx_0 + gd[4]) *
      proc_control_node_B.x4_data_idx_0 + gd[5]) *
      proc_control_node_B.x4_data_idx_0 + gd[6]) *
      proc_control_node_B.x4_data_idx_0 + gd[7]) *
      proc_control_node_B.x4_data_idx_0 + gd[8]) *
      proc_control_node_B.x4_data_idx_0 + gd[9]) *
      proc_control_node_B.x4_data_idx_0 + gd[10]) *
      proc_control_node_B.x4_data_idx_0 + gd[11]);
    proc_control_node_B.a_re_g = 0.0 * proc_control_node_B.x4_re_b -
      proc_control_node_B.y_re;
    proc_control_node_B.x4_re_b += 0.0 * proc_control_node_B.y_re;
    proc_control_node_B.y_re = proc_control_node_B.a_re_g *
      proc_control_node_B.x_data_j[0].re - proc_control_node_B.x4_re_b *
      proc_control_node_B.x_data_j[0].im;
    proc_control_node_B.x4_re_b = proc_control_node_B.a_re_g *
      proc_control_node_B.x_data_j[0].im + proc_control_node_B.x4_re_b *
      proc_control_node_B.x_data_j[0].re;
    proc_control_node_B.r_cy = proc_control_node_B.xabs_data_g *
      3.1415926535897931;
    if (proc_control_node_B.x4_re_b == 0.0) {
      proc_control_node_B.a_re_g = proc_control_node_B.y_re /
        proc_control_node_B.r_cy;
      proc_control_node_B.x4_re_b = 0.0;
    } else if (proc_control_node_B.y_re == 0.0) {
      proc_control_node_B.a_re_g = 0.0;
      proc_control_node_B.x4_re_b /= proc_control_node_B.r_cy;
    } else {
      proc_control_node_B.a_re_g = proc_control_node_B.y_re /
        proc_control_node_B.r_cy;
      proc_control_node_B.x4_re_b /= proc_control_node_B.r_cy;
    }
  }

  for (proc_control_node_B.i_dt = 0; proc_control_node_B.i_dt <
       proc_control_node_B.nx_me; proc_control_node_B.i_dt++) {
    z_data[proc_control_node_B.ismall_data_idx_0 - 1].re = 0.5 +
      proc_control_node_B.a_re_g;
    z_data[proc_control_node_B.ismall_data_idx_0 - 1].im = 0.5 +
      proc_control_node_B.x4_re_b;
  }

  proc_control_node_B.i_dt = x_size[0] * x_size[1] - 1;
  proc_control_node_B.ismall_data_idx_0 = 0;
  if (proc_control_node_B.xabs_data_g * proc_control_node_B.xabs_data_g >
      1.367076676E+9) {
    for (proc_control_node_B.nx_me = 0; proc_control_node_B.nx_me <=
         proc_control_node_B.i_dt; proc_control_node_B.nx_me++) {
      proc_control_node_B.ismall_data_idx_0++;
    }
  }

  proc_control_node_B.nx_me = proc_control_node_B.ismall_data_idx_0 - 1;
  for (proc_control_node_B.i_dt = 0; proc_control_node_B.i_dt <=
       proc_control_node_B.nx_me; proc_control_node_B.i_dt++) {
    z_data[0].re = 0.5;
    z_data[0].im = 0.5;
  }

  proc_control_node_B.ismall_data_idx_0 = 0;
  if (x_data[0] < 0.0) {
    for (proc_control_node_B.nx_me = 0; proc_control_node_B.nx_me <=
         proc_control_node_B.nx_tmp_e; proc_control_node_B.nx_me++) {
      proc_control_node_B.ismall_data_idx_0++;
    }
  }

  if (0 <= proc_control_node_B.ismall_data_idx_0 - 1) {
    proc_control_node_B.z_data_f.re = -z_data[0].re;
    proc_control_node_B.z_data_f.im = -z_data[0].im;
  }

  if (0 <= proc_control_node_B.ismall_data_idx_0 - 1) {
    z_data[0] = proc_control_node_B.z_data_f;
  }
}

static void proc_control_node_fresnelgsma(const real_T x_data[], const int32_T
  x_size[2], const real_T dk_data[], const int32_T dk_size[2], const real_T
  k_data[], const int32_T k_size[2], const real_T theta_data[], const int32_T
  theta_size[2], creal_T z_data[], int32_T z_size[2])
{
  int32_T k_tmp;
  int32_T nikx_tmp;
  int32_T nx_tmp;
  int32_T nx_tmp_0;
  int32_T t_size_idx_1;
  nx_tmp = k_size[0] * k_size[1];
  k_tmp = x_size[0] * x_size[1];
  for (proc_control_node_B.nhikx = 0; proc_control_node_B.nhikx < nx_tmp;
       proc_control_node_B.nhikx++) {
    proc_control_node_B.nikx_data.re = k_data[0] * -0.0 * x_data[0];
    proc_control_node_B.nikx_data.im = x_data[0] * -k_data[0];
  }

  for (proc_control_node_B.nhikx = 0; proc_control_node_B.nhikx < nx_tmp;
       proc_control_node_B.nhikx++) {
    if (proc_control_node_B.nikx_data.im == 0.0) {
      proc_control_node_B.nhikx_data.re = proc_control_node_B.nikx_data.re / 2.0;
      proc_control_node_B.nhikx_data.im = 0.0;
    } else if (proc_control_node_B.nikx_data.re == 0.0) {
      proc_control_node_B.nhikx_data.re = 0.0;
      proc_control_node_B.nhikx_data.im = proc_control_node_B.nikx_data.im / 2.0;
    } else {
      proc_control_node_B.nhikx_data.re = (rtNaN);
      proc_control_node_B.nhikx_data.im = proc_control_node_B.nikx_data.im / 2.0;
    }
  }

  proc_control_node_B.nx_kf = nx_tmp - 1;
  for (proc_control_node_B.nhikx = 0; proc_control_node_B.nhikx <=
       proc_control_node_B.nx_kf; proc_control_node_B.nhikx++) {
    proc_control_node_B.y_data_idx_0 = k_data[0] * k_data[0];
  }

  nx_tmp_0 = dk_size[0] * dk_size[1];
  if (0 <= nx_tmp_0 - 1) {
    proc_control_node_B.r_d = dk_data[0] * 0.5;
    if (proc_control_node_B.r_d == 0.0) {
      proc_control_node_B.a_re_o = dk_data[0] * 0.0 /
        proc_control_node_B.y_data_idx_0;
      proc_control_node_B.r_d = 0.0;
    } else if (dk_data[0] * 0.0 == 0.0) {
      proc_control_node_B.a_re_o = 0.0;
      proc_control_node_B.r_d /= proc_control_node_B.y_data_idx_0;
    } else {
      proc_control_node_B.a_re_o = (rtNaN);
      proc_control_node_B.r_d /= proc_control_node_B.y_data_idx_0;
    }
  }

  for (proc_control_node_B.nhikx = 0; proc_control_node_B.nhikx < nx_tmp_0;
       proc_control_node_B.nhikx++) {
    proc_control_node_B.y_data_e[0].re = -2.0 * proc_control_node_B.a_re_o;
    proc_control_node_B.y_data_e[0].im = -2.0 * proc_control_node_B.r_d;
  }

  proc_control_node_B.nx_kf = k_tmp - 1;
  for (proc_control_node_B.nhikx = 0; proc_control_node_B.nhikx <=
       proc_control_node_B.nx_kf; proc_control_node_B.nhikx++) {
    proc_control_node_B.y_data_idx_0 = x_data[0] * x_data[0];
  }

  for (proc_control_node_B.nhikx = 0; proc_control_node_B.nhikx < nx_tmp_0;
       proc_control_node_B.nhikx++) {
    proc_control_node_B.hidkxx_data.re = dk_data[0] * 0.0 *
      proc_control_node_B.y_data_idx_0;
    proc_control_node_B.hidkxx_data.im = dk_data[0] * 0.5 *
      proc_control_node_B.y_data_idx_0;
  }

  for (proc_control_node_B.nhikx = 0; proc_control_node_B.nhikx < nx_tmp;
       proc_control_node_B.nhikx++) {
    proc_control_node_B.t_data_k.re = -proc_control_node_B.nikx_data.re;
    proc_control_node_B.t_data_k.im = -proc_control_node_B.nikx_data.im;
  }

  if (0 <= k_size[0] * k_size[1] - 1) {
    proc_control_node_B.e_data_p = proc_control_node_B.t_data_k;
  }

  proc_control_node_B.nx_kf = k_size[0] * k_size[1] - 1;
  for (proc_control_node_B.nhikx = 0; proc_control_node_B.nhikx <=
       proc_control_node_B.nx_kf; proc_control_node_B.nhikx++) {
    if (proc_control_node_B.e_data_p.im == 0.0) {
      proc_control_node_B.a_re_o = exp(proc_control_node_B.e_data_p.re);
      proc_control_node_B.r_d = 0.0;
    } else if (rtIsInf(proc_control_node_B.e_data_p.im) && rtIsInf
               (proc_control_node_B.e_data_p.re) &&
               (proc_control_node_B.e_data_p.re < 0.0)) {
      proc_control_node_B.a_re_o = 0.0;
      proc_control_node_B.r_d = 0.0;
    } else {
      proc_control_node_B.r_d = exp(proc_control_node_B.e_data_p.re / 2.0);
      proc_control_node_B.a_re_o = cos(proc_control_node_B.e_data_p.im) *
        proc_control_node_B.r_d * proc_control_node_B.r_d;
      proc_control_node_B.r_d *= sin(proc_control_node_B.e_data_p.im) *
        proc_control_node_B.r_d;
    }

    proc_control_node_B.e_data_p.re = proc_control_node_B.a_re_o;
    proc_control_node_B.e_data_p.im = proc_control_node_B.r_d;
  }

  proc_control_node_B.nx_kf = k_size[0];
  t_size_idx_1 = k_size[1];
  nx_tmp = k_size[0] * k_size[1];
  for (proc_control_node_B.nhikx = 0; proc_control_node_B.nhikx < nx_tmp;
       proc_control_node_B.nhikx++) {
    if (proc_control_node_B.nikx_data.im == 0.0) {
      if (0.0 - proc_control_node_B.e_data_p.im == 0.0) {
        proc_control_node_B.t_data_k.re = (1.0 - proc_control_node_B.e_data_p.re)
          / proc_control_node_B.nikx_data.re;
        proc_control_node_B.t_data_k.im = 0.0;
      } else if (1.0 - proc_control_node_B.e_data_p.re == 0.0) {
        proc_control_node_B.t_data_k.re = 0.0;
        proc_control_node_B.t_data_k.im = (0.0 - proc_control_node_B.e_data_p.im)
          / proc_control_node_B.nikx_data.re;
      } else {
        proc_control_node_B.t_data_k.re = (1.0 - proc_control_node_B.e_data_p.re)
          / proc_control_node_B.nikx_data.re;
        proc_control_node_B.t_data_k.im = (0.0 - proc_control_node_B.e_data_p.im)
          / proc_control_node_B.nikx_data.re;
      }
    } else if (proc_control_node_B.nikx_data.re == 0.0) {
      if (1.0 - proc_control_node_B.e_data_p.re == 0.0) {
        proc_control_node_B.t_data_k.re = (0.0 - proc_control_node_B.e_data_p.im)
          / proc_control_node_B.nikx_data.im;
        proc_control_node_B.t_data_k.im = 0.0;
      } else if (0.0 - proc_control_node_B.e_data_p.im == 0.0) {
        proc_control_node_B.t_data_k.re = 0.0;
        proc_control_node_B.t_data_k.im = -((1.0 -
          proc_control_node_B.e_data_p.re) / proc_control_node_B.nikx_data.im);
      } else {
        proc_control_node_B.t_data_k.re = (0.0 - proc_control_node_B.e_data_p.im)
          / proc_control_node_B.nikx_data.im;
        proc_control_node_B.t_data_k.im = -((1.0 -
          proc_control_node_B.e_data_p.re) / proc_control_node_B.nikx_data.im);
      }
    } else {
      proc_control_node_B.t_data_k.re = (rtNaN);
      proc_control_node_B.t_data_k.im = (rtNaN);
    }
  }

  proc_control_node_B.nikx_size_idx_0 = k_size[0];
  proc_control_node_B.nikx_size_idx_1 = k_size[1];
  for (proc_control_node_B.nhikx = 0; proc_control_node_B.nhikx < nx_tmp;
       proc_control_node_B.nhikx++) {
    proc_control_node_B.nikx_data.re = -proc_control_node_B.e_data_p.re;
    proc_control_node_B.nikx_data.im = -proc_control_node_B.e_data_p.im;
  }

  if (0 <= k_size[0] * k_size[1] - 1) {
    z_data[0] = proc_control_node_B.t_data_k;
  }

  for (proc_control_node_B.nhikx = 0; proc_control_node_B.nhikx < 20;
       proc_control_node_B.nhikx++) {
    nikx_tmp = proc_control_node_B.nikx_size_idx_0 *
      proc_control_node_B.nikx_size_idx_1;
    proc_control_node_B.loop_ub_lc = ((proc_control_node_B.nhikx + 1) << 1) - 1;
    for (nx_tmp = 0; nx_tmp < nx_tmp_0; nx_tmp++) {
      proc_control_node_B.r_d = static_cast<real_T>(proc_control_node_B.nhikx +
        1) + proc_control_node_B.nhikx_data.re;
      proc_control_node_B.a_re_o = (proc_control_node_B.nikx_data.re *
        proc_control_node_B.r_d - proc_control_node_B.nikx_data.im *
        proc_control_node_B.nhikx_data.im) + proc_control_node_B.t_data_k.re *
        static_cast<real_T>(proc_control_node_B.loop_ub_lc);
      proc_control_node_B.r_d = (proc_control_node_B.nikx_data.re *
        proc_control_node_B.nhikx_data.im + proc_control_node_B.nikx_data.im *
        proc_control_node_B.r_d) + proc_control_node_B.t_data_k.im *
        static_cast<real_T>(proc_control_node_B.loop_ub_lc);
      proc_control_node_B.t_data_k.re = proc_control_node_B.y_data_e[0].re *
        proc_control_node_B.a_re_o - proc_control_node_B.y_data_e[0].im *
        proc_control_node_B.r_d;
      proc_control_node_B.t_data_k.im = proc_control_node_B.y_data_e[0].re *
        proc_control_node_B.r_d + proc_control_node_B.y_data_e[0].im *
        proc_control_node_B.a_re_o;
    }

    proc_control_node_B.loop_ub_lc = proc_control_node_B.nx_kf * t_size_idx_1;
    for (nx_tmp = 0; nx_tmp < proc_control_node_B.loop_ub_lc; nx_tmp++) {
      z_data[0].re += proc_control_node_B.t_data_k.re;
      z_data[0].im += proc_control_node_B.t_data_k.im;
    }

    for (nx_tmp = 0; nx_tmp < nikx_tmp; nx_tmp++) {
      proc_control_node_B.a_re_o = proc_control_node_B.nikx_data.re *
        proc_control_node_B.hidkxx_data.re - proc_control_node_B.nikx_data.im *
        proc_control_node_B.hidkxx_data.im;
      proc_control_node_B.r_d = proc_control_node_B.nikx_data.re *
        proc_control_node_B.hidkxx_data.im + proc_control_node_B.nikx_data.im *
        proc_control_node_B.hidkxx_data.re;
      if (proc_control_node_B.r_d == 0.0) {
        proc_control_node_B.nikx_data.re = proc_control_node_B.a_re_o /
          static_cast<real_T>(proc_control_node_B.nhikx + 2);
        proc_control_node_B.nikx_data.im = 0.0;
      } else if (proc_control_node_B.a_re_o == 0.0) {
        proc_control_node_B.nikx_data.re = 0.0;
        proc_control_node_B.nikx_data.im = proc_control_node_B.r_d /
          static_cast<real_T>(proc_control_node_B.nhikx + 2);
      } else {
        proc_control_node_B.nikx_data.re = proc_control_node_B.a_re_o /
          static_cast<real_T>(proc_control_node_B.nhikx + 2);
        proc_control_node_B.nikx_data.im = proc_control_node_B.r_d /
          static_cast<real_T>(proc_control_node_B.nhikx + 2);
      }
    }
  }

  nx_tmp = theta_size[0] * theta_size[1];
  for (proc_control_node_B.nhikx = 0; proc_control_node_B.nhikx < nx_tmp;
       proc_control_node_B.nhikx++) {
    proc_control_node_B.nhikx_data.re = theta_data[0] * 0.0;
    proc_control_node_B.nhikx_data.im = theta_data[0];
  }

  if (0 <= nx_tmp - 1) {
    proc_control_node_B.hidkxx_data = proc_control_node_B.nhikx_data;
  }

  proc_control_node_B.nx_kf = nx_tmp - 1;
  for (proc_control_node_B.nhikx = 0; proc_control_node_B.nhikx <=
       proc_control_node_B.nx_kf; proc_control_node_B.nhikx++) {
    if (proc_control_node_B.hidkxx_data.im == 0.0) {
      proc_control_node_B.a_re_o = exp(proc_control_node_B.hidkxx_data.re);
      proc_control_node_B.r_d = 0.0;
    } else if (rtIsInf(proc_control_node_B.hidkxx_data.im) && rtIsInf
               (proc_control_node_B.hidkxx_data.re) &&
               (proc_control_node_B.hidkxx_data.re < 0.0)) {
      proc_control_node_B.a_re_o = 0.0;
      proc_control_node_B.r_d = 0.0;
    } else {
      proc_control_node_B.r_d = exp(proc_control_node_B.hidkxx_data.re / 2.0);
      proc_control_node_B.a_re_o = cos(proc_control_node_B.hidkxx_data.im) *
        proc_control_node_B.r_d * proc_control_node_B.r_d;
      proc_control_node_B.r_d *= sin(proc_control_node_B.hidkxx_data.im) *
        proc_control_node_B.r_d;
    }

    proc_control_node_B.hidkxx_data.re = proc_control_node_B.a_re_o;
    proc_control_node_B.hidkxx_data.im = proc_control_node_B.r_d;
  }

  z_size[0] = x_size[0];
  z_size[1] = x_size[1];
  for (nx_tmp = 0; nx_tmp < k_tmp; nx_tmp++) {
    proc_control_node_B.a_re_o = x_data[0] * z_data[0].re;
    proc_control_node_B.r_d = x_data[0] * z_data[0].im;
    z_data[0].re = proc_control_node_B.hidkxx_data.re *
      proc_control_node_B.a_re_o - proc_control_node_B.hidkxx_data.im *
      proc_control_node_B.r_d;
    z_data[0].im = proc_control_node_B.hidkxx_data.im *
      proc_control_node_B.a_re_o + proc_control_node_B.hidkxx_data.re *
      proc_control_node_B.r_d;
  }
}

static void proc_control_node_bsxfun(const creal_T a_data[], const int32_T
  a_size[2], creal_T c_data[], int32_T c_size[2])
{
  int32_T acoef;
  int32_T ia;
  int32_T k;
  int32_T tmp;
  c_size[0] = a_size[0];
  c_size[1] = 5;
  if (a_size[0] != 0) {
    acoef = (a_size[1] != 1);
    for (k = 0; k < 5; k++) {
      ia = a_size[0] * (acoef * k);
      proc_control_node_B.ar_l = a_data[ia].re;
      proc_control_node_B.ai_j = a_data[ia].im;
      if (proc_control_node_B.ai_j == 0.0) {
        for (ia = 0; ia < 1; ia++) {
          tmp = c_size[0] * k;
          c_data[tmp].re = proc_control_node_B.ar_l / static_cast<real_T>(k + 1);
          c_data[tmp].im = 0.0;
        }
      } else {
        for (ia = 0; ia < 1; ia++) {
          if (proc_control_node_B.ar_l == 0.0) {
            tmp = c_size[0] * k;
            c_data[tmp].re = 0.0;
            c_data[tmp].im = proc_control_node_B.ai_j / static_cast<real_T>(k +
              1);
          } else {
            tmp = c_size[0] * k;
            c_data[tmp].re = proc_control_node_B.ar_l / static_cast<real_T>(k +
              1);
            c_data[tmp].im = proc_control_node_B.ai_j / static_cast<real_T>(k +
              1);
          }
        }
      }
    }
  }
}

static void proc_control_node_fresnelgzero(const real_T x_data[], const int32_T
  x_size[2], const real_T dk_data[], const int32_T dk_size[2], const real_T
  k_data[], const int32_T k_size[2], const real_T theta_data[], const int32_T
  theta_size[2], creal_T z_data[], int32_T *z_size)
{
  int32_T ar_tmp;
  proc_control_node_B.nx_o = x_size[0] * x_size[1] - 1;
  for (proc_control_node_B.k_k = 0; proc_control_node_B.k_k <=
       proc_control_node_B.nx_o; proc_control_node_B.k_k++) {
    proc_control_node_B.d_data_idx_0 = x_data[0] * x_data[0];
  }

  proc_control_node_B.nx_o = dk_size[0];
  proc_control_node_B.nrows = dk_size[1];
  proc_control_node_B.k_k = dk_size[0] * dk_size[1];
  for (proc_control_node_B.b_jtilecol = 0; proc_control_node_B.b_jtilecol <
       proc_control_node_B.k_k; proc_control_node_B.b_jtilecol++) {
    proc_control_node_B.a_data_d.re = dk_data[0] * 0.0 *
      proc_control_node_B.d_data_idx_0;
    proc_control_node_B.a_data_d.im = dk_data[0] * 0.5 *
      proc_control_node_B.d_data_idx_0;
  }

  proc_control_node_B.A_size_m[0] = dk_size[0];
  proc_control_node_B.A_size_m[1] = dk_size[1] * 5;
  for (proc_control_node_B.b_jtilecol = 0; proc_control_node_B.b_jtilecol < 5;
       proc_control_node_B.b_jtilecol++) {
    proc_control_node_B.ibtile_g = proc_control_node_B.nx_o *
      proc_control_node_B.nrows * proc_control_node_B.b_jtilecol;
    for (proc_control_node_B.a_kl = 0; proc_control_node_B.a_kl <
         proc_control_node_B.nrows; proc_control_node_B.a_kl++) {
      for (proc_control_node_B.k_k = 0; proc_control_node_B.k_k <
           proc_control_node_B.nx_o; proc_control_node_B.k_k++) {
        proc_control_node_B.A_data_ci[proc_control_node_B.ibtile_g] =
          proc_control_node_B.a_data_d;
      }
    }
  }

  proc_control_node_bsxfun(proc_control_node_B.A_data_ci,
    proc_control_node_B.A_size_m, proc_control_node_B.b_A_data_j,
    proc_control_node_B.b_A_size_n);
  proc_control_node_B.x_size_idx_0_j = proc_control_node_B.b_A_size_n[0];
  proc_control_node_B.k_k = proc_control_node_B.b_A_size_n[0] * 5;
  if (0 <= proc_control_node_B.k_k - 1) {
    memcpy(&proc_control_node_B.x_data_kb[0], &proc_control_node_B.b_A_data_j[0],
           proc_control_node_B.k_k * sizeof(creal_T));
  }

  if (proc_control_node_B.b_A_size_n[0] != 0) {
    for (proc_control_node_B.nrows = 0; proc_control_node_B.nrows < 4;
         proc_control_node_B.nrows++) {
      proc_control_node_B.nx_o = proc_control_node_B.x_size_idx_0_j - 1;
      for (proc_control_node_B.k_k = 0; proc_control_node_B.k_k <=
           proc_control_node_B.nx_o; proc_control_node_B.k_k++) {
        proc_control_node_B.b_jtilecol = proc_control_node_B.x_size_idx_0_j *
          (proc_control_node_B.nrows + 1);
        proc_control_node_B.a_kl = proc_control_node_B.x_size_idx_0_j *
          proc_control_node_B.nrows;
        proc_control_node_B.d_data_idx_0 =
          proc_control_node_B.x_data_kb[proc_control_node_B.b_jtilecol].im *
          proc_control_node_B.x_data_kb[proc_control_node_B.a_kl].re +
          proc_control_node_B.x_data_kb[proc_control_node_B.b_jtilecol].re *
          proc_control_node_B.x_data_kb[proc_control_node_B.a_kl].im;
        proc_control_node_B.x_data_kb[proc_control_node_B.b_jtilecol].re =
          proc_control_node_B.x_data_kb[proc_control_node_B.b_jtilecol].re *
          proc_control_node_B.x_data_kb[proc_control_node_B.a_kl].re -
          proc_control_node_B.x_data_kb[proc_control_node_B.b_jtilecol].im *
          proc_control_node_B.x_data_kb[proc_control_node_B.a_kl].im;
        proc_control_node_B.x_data_kb[proc_control_node_B.b_jtilecol].im =
          proc_control_node_B.d_data_idx_0;
      }
    }
  }

  proc_control_node_B.nx_o = k_size[0];
  proc_control_node_B.nrows = k_size[1];
  proc_control_node_B.k_k = k_size[0] * k_size[1];
  for (proc_control_node_B.b_jtilecol = 0; proc_control_node_B.b_jtilecol <
       proc_control_node_B.k_k; proc_control_node_B.b_jtilecol++) {
    proc_control_node_B.a_data_d.re = k_data[0] * 0.0 * x_data[0];
    proc_control_node_B.a_data_d.im = x_data[0] * k_data[0];
  }

  proc_control_node_B.A_size_m[0] = k_size[0];
  proc_control_node_B.A_size_m[1] = k_size[1] * 5;
  for (proc_control_node_B.b_jtilecol = 0; proc_control_node_B.b_jtilecol < 5;
       proc_control_node_B.b_jtilecol++) {
    proc_control_node_B.ibtile_g = proc_control_node_B.nx_o *
      proc_control_node_B.nrows * proc_control_node_B.b_jtilecol;
    for (proc_control_node_B.a_kl = 0; proc_control_node_B.a_kl <
         proc_control_node_B.nrows; proc_control_node_B.a_kl++) {
      for (proc_control_node_B.k_k = 0; proc_control_node_B.k_k <
           proc_control_node_B.nx_o; proc_control_node_B.k_k++) {
        proc_control_node_B.A_data_ci[proc_control_node_B.ibtile_g] =
          proc_control_node_B.a_data_d;
      }
    }
  }

  proc_control_node_bsxfun(proc_control_node_B.A_data_ci,
    proc_control_node_B.A_size_m, proc_control_node_B.b_A_data_j,
    proc_control_node_B.b_A_size_n);
  proc_control_node_B.x_size_idx_0 = proc_control_node_B.b_A_size_n[0];
  proc_control_node_B.k_k = proc_control_node_B.b_A_size_n[0] * 5;
  if (0 <= proc_control_node_B.k_k - 1) {
    memcpy(&proc_control_node_B.A_data_ci[0], &proc_control_node_B.b_A_data_j[0],
           proc_control_node_B.k_k * sizeof(creal_T));
  }

  if (proc_control_node_B.b_A_size_n[0] != 0) {
    for (proc_control_node_B.nrows = 0; proc_control_node_B.nrows < 4;
         proc_control_node_B.nrows++) {
      proc_control_node_B.nx_o = proc_control_node_B.x_size_idx_0 - 1;
      for (proc_control_node_B.k_k = 0; proc_control_node_B.k_k <=
           proc_control_node_B.nx_o; proc_control_node_B.k_k++) {
        proc_control_node_B.b_jtilecol = proc_control_node_B.x_size_idx_0 *
          (proc_control_node_B.nrows + 1);
        proc_control_node_B.a_kl = proc_control_node_B.x_size_idx_0 *
          proc_control_node_B.nrows;
        proc_control_node_B.d_data_idx_0 =
          proc_control_node_B.A_data_ci[proc_control_node_B.b_jtilecol].im *
          proc_control_node_B.A_data_ci[proc_control_node_B.a_kl].re +
          proc_control_node_B.A_data_ci[proc_control_node_B.b_jtilecol].re *
          proc_control_node_B.A_data_ci[proc_control_node_B.a_kl].im;
        proc_control_node_B.b_jtilecol = proc_control_node_B.x_size_idx_0 *
          (proc_control_node_B.nrows + 1);
        proc_control_node_B.a_kl = proc_control_node_B.x_size_idx_0 *
          proc_control_node_B.nrows;
        proc_control_node_B.A_data_ci[proc_control_node_B.b_jtilecol].re =
          proc_control_node_B.A_data_ci[proc_control_node_B.b_jtilecol].re *
          proc_control_node_B.A_data_ci[proc_control_node_B.a_kl].re -
          proc_control_node_B.A_data_ci[proc_control_node_B.b_jtilecol].im *
          proc_control_node_B.A_data_ci[proc_control_node_B.a_kl].im;
        proc_control_node_B.A_data_ci[proc_control_node_B.b_jtilecol].im =
          proc_control_node_B.d_data_idx_0;
      }
    }
  }

  if ((x_size[0] == 0) || (x_size[1] == 0)) {
    proc_control_node_B.nrows = -1;
  } else {
    proc_control_node_B.nrows = 0;
  }

  *z_size = proc_control_node_B.nrows + 1;
  if (0 <= proc_control_node_B.nrows) {
    z_data[0].re = 1.0;
    z_data[0].im = 0.0;
  }

  proc_control_node_B.k_k = proc_control_node_B.nrows + 1;
  for (proc_control_node_B.b_jtilecol = 0; proc_control_node_B.b_jtilecol < 5;
       proc_control_node_B.b_jtilecol++) {
    proc_control_node_B.nx_o = ((proc_control_node_B.b_jtilecol + 1) << 1) + 1;
    if (0 <= proc_control_node_B.nrows) {
      proc_control_node_B.ar_tmp = proc_control_node_B.x_size_idx_0_j *
        proc_control_node_B.b_jtilecol;
      proc_control_node_B.ar_d =
        proc_control_node_B.x_data_kb[proc_control_node_B.ar_tmp].re;
      proc_control_node_B.d_data_idx_0 =
        proc_control_node_B.x_data_kb[proc_control_node_B.ar_tmp].im;
      if (proc_control_node_B.d_data_idx_0 == 0.0) {
        proc_control_node_B.ar_d /= static_cast<real_T>(proc_control_node_B.nx_o);
        proc_control_node_B.x_im = 0.0;
      } else if (proc_control_node_B.ar_d == 0.0) {
        proc_control_node_B.ar_d = 0.0;
        proc_control_node_B.x_im = proc_control_node_B.d_data_idx_0 /
          static_cast<real_T>(proc_control_node_B.nx_o);
      } else {
        proc_control_node_B.ar_d /= static_cast<real_T>(proc_control_node_B.nx_o);
        proc_control_node_B.x_im = proc_control_node_B.d_data_idx_0 /
          static_cast<real_T>(proc_control_node_B.nx_o);
      }
    }

    for (proc_control_node_B.nx_o = 0; proc_control_node_B.nx_o <
         proc_control_node_B.k_k; proc_control_node_B.nx_o++) {
      proc_control_node_B.z_n.re = z_data[0].re + proc_control_node_B.ar_d;
      proc_control_node_B.z_n.im = z_data[0].im + proc_control_node_B.x_im;
      z_data[0] = proc_control_node_B.z_n;
    }
  }

  proc_control_node_B.k_k = proc_control_node_B.nrows + 1;
  for (proc_control_node_B.b_jtilecol = 0; proc_control_node_B.b_jtilecol < 5;
       proc_control_node_B.b_jtilecol++) {
    if (0 <= proc_control_node_B.nrows) {
      proc_control_node_B.ar_tmp = proc_control_node_B.x_size_idx_0 *
        proc_control_node_B.b_jtilecol;
      proc_control_node_B.ar_d =
        proc_control_node_B.A_data_ci[proc_control_node_B.ar_tmp].re;
      proc_control_node_B.d_data_idx_0 =
        proc_control_node_B.A_data_ci[proc_control_node_B.ar_tmp].im;
      if (proc_control_node_B.d_data_idx_0 == 0.0) {
        proc_control_node_B.x_re = proc_control_node_B.ar_d / static_cast<real_T>
          (proc_control_node_B.b_jtilecol + 2);
        proc_control_node_B.r_b = 0.0;
      } else if (proc_control_node_B.ar_d == 0.0) {
        proc_control_node_B.x_re = 0.0;
        proc_control_node_B.r_b = proc_control_node_B.d_data_idx_0 /
          static_cast<real_T>(proc_control_node_B.b_jtilecol + 2);
      } else {
        proc_control_node_B.x_re = proc_control_node_B.ar_d / static_cast<real_T>
          (proc_control_node_B.b_jtilecol + 2);
        proc_control_node_B.r_b = proc_control_node_B.d_data_idx_0 /
          static_cast<real_T>(proc_control_node_B.b_jtilecol + 2);
      }
    }

    for (proc_control_node_B.nx_o = 0; proc_control_node_B.nx_o <
         proc_control_node_B.k_k; proc_control_node_B.nx_o++) {
      proc_control_node_B.z_bw.re = z_data[0].re + proc_control_node_B.x_re;
      proc_control_node_B.z_bw.im = z_data[0].im + proc_control_node_B.r_b;
      z_data[0] = proc_control_node_B.z_bw;
    }
  }

  for (proc_control_node_B.b_jtilecol = 0; proc_control_node_B.b_jtilecol < 4;
       proc_control_node_B.b_jtilecol++) {
    proc_control_node_B.ibtile_g = (proc_control_node_B.b_jtilecol + 1) << 1;
    proc_control_node_B.a_kl = 4 - proc_control_node_B.ibtile_g;
    for (proc_control_node_B.d_j_l = 0; proc_control_node_B.d_j_l <=
         proc_control_node_B.a_kl; proc_control_node_B.d_j_l++) {
      proc_control_node_B.nx_o = (proc_control_node_B.ibtile_g +
        proc_control_node_B.d_j_l) + 2;
      proc_control_node_B.k_k = proc_control_node_B.nrows + 1;
      if (0 <= proc_control_node_B.nrows) {
        proc_control_node_B.ar_tmp = proc_control_node_B.x_size_idx_0_j *
          proc_control_node_B.b_jtilecol;
        ar_tmp = proc_control_node_B.x_size_idx_0 * proc_control_node_B.d_j_l;
        proc_control_node_B.ar_d =
          proc_control_node_B.x_data_kb[proc_control_node_B.ar_tmp].re *
          proc_control_node_B.A_data_ci[ar_tmp].re -
          proc_control_node_B.x_data_kb[proc_control_node_B.ar_tmp].im *
          proc_control_node_B.A_data_ci[ar_tmp].im;
        proc_control_node_B.x_im =
          proc_control_node_B.x_data_kb[proc_control_node_B.ar_tmp].re *
          proc_control_node_B.A_data_ci[ar_tmp].im +
          proc_control_node_B.x_data_kb[proc_control_node_B.ar_tmp].im *
          proc_control_node_B.A_data_ci[ar_tmp].re;
        if (proc_control_node_B.x_im == 0.0) {
          proc_control_node_B.x_re_j = proc_control_node_B.ar_d /
            static_cast<real_T>(proc_control_node_B.nx_o);
          proc_control_node_B.x_im_d = 0.0;
        } else if (proc_control_node_B.ar_d == 0.0) {
          proc_control_node_B.x_re_j = 0.0;
          proc_control_node_B.x_im_d = proc_control_node_B.x_im /
            static_cast<real_T>(proc_control_node_B.nx_o);
        } else {
          proc_control_node_B.x_re_j = proc_control_node_B.ar_d /
            static_cast<real_T>(proc_control_node_B.nx_o);
          proc_control_node_B.x_im_d = proc_control_node_B.x_im /
            static_cast<real_T>(proc_control_node_B.nx_o);
        }
      }

      for (proc_control_node_B.nx_o = 0; proc_control_node_B.nx_o <
           proc_control_node_B.k_k; proc_control_node_B.nx_o++) {
        proc_control_node_B.z_p2.re = z_data[0].re + proc_control_node_B.x_re_j;
        proc_control_node_B.z_p2.im = z_data[0].im + proc_control_node_B.x_im_d;
        z_data[0] = proc_control_node_B.z_p2;
      }
    }
  }

  proc_control_node_B.k_k = theta_size[0] * theta_size[1];
  for (proc_control_node_B.nx_o = 0; proc_control_node_B.nx_o <
       proc_control_node_B.k_k; proc_control_node_B.nx_o++) {
    proc_control_node_B.a_data_d.re = theta_data[0] * 0.0;
    proc_control_node_B.a_data_d.im = theta_data[0];
  }

  proc_control_node_B.nx_o = proc_control_node_B.k_k - 1;
  for (proc_control_node_B.k_k = 0; proc_control_node_B.k_k <=
       proc_control_node_B.nx_o; proc_control_node_B.k_k++) {
    if (proc_control_node_B.a_data_d.im == 0.0) {
      proc_control_node_B.x_re = exp(proc_control_node_B.a_data_d.re);
      proc_control_node_B.r_b = 0.0;
    } else if (rtIsInf(proc_control_node_B.a_data_d.im) && rtIsInf
               (proc_control_node_B.a_data_d.re) &&
               (proc_control_node_B.a_data_d.re < 0.0)) {
      proc_control_node_B.x_re = 0.0;
      proc_control_node_B.r_b = 0.0;
    } else {
      proc_control_node_B.r_b = exp(proc_control_node_B.a_data_d.re / 2.0);
      proc_control_node_B.x_re = cos(proc_control_node_B.a_data_d.im) *
        proc_control_node_B.r_b * proc_control_node_B.r_b;
      proc_control_node_B.r_b *= sin(proc_control_node_B.a_data_d.im) *
        proc_control_node_B.r_b;
    }

    proc_control_node_B.a_data_d.re = proc_control_node_B.x_re;
    proc_control_node_B.a_data_d.im = proc_control_node_B.r_b;
  }

  proc_control_node_B.k_k = proc_control_node_B.nrows + 1;
  for (proc_control_node_B.nrows = 0; proc_control_node_B.nrows <
       proc_control_node_B.k_k; proc_control_node_B.nrows++) {
    proc_control_node_B.x_re = x_data[0] * z_data[0].re;
    proc_control_node_B.r_b = x_data[0] * z_data[0].im;
    proc_control_node_B.z_kg.re = proc_control_node_B.a_data_d.re *
      proc_control_node_B.x_re - proc_control_node_B.a_data_d.im *
      proc_control_node_B.r_b;
    proc_control_node_B.z_kg.im = proc_control_node_B.a_data_d.im *
      proc_control_node_B.x_re + proc_control_node_B.a_data_d.re *
      proc_control_node_B.r_b;
    z_data[0] = proc_control_node_B.z_kg;
  }
}

static creal_T proc_control_node_fresnelg2(real_T x, real_T dk, real_T k, real_T
  theta)
{
  creal_T z;
  proc_control_node_B.thresh_tmp = k * k;
  proc_control_node_B.thresh = dk / proc_control_node_B.thresh_tmp;
  if (proc_control_node_B.thresh > 1.0E-6) {
    proc_control_node_B.ii_size_idx_0 = 1;
    proc_control_node_B.ii_size_idx_1 = 1;
  } else {
    proc_control_node_B.ii_size_idx_0 = 0;
    proc_control_node_B.ii_size_idx_1 = 0;
  }

  proc_control_node_B.igt_size_idx_0 = proc_control_node_B.ii_size_idx_0;
  proc_control_node_B.igt_size_idx_1 = proc_control_node_B.ii_size_idx_1;
  if (proc_control_node_B.thresh < -1.0E-6) {
    proc_control_node_B.ii_size_idx_0 = 1;
    proc_control_node_B.ii_size_idx_1 = 1;
  } else {
    proc_control_node_B.ii_size_idx_0 = 0;
    proc_control_node_B.ii_size_idx_1 = 0;
  }

  proc_control_node_B.ilt_size_idx_0 = proc_control_node_B.ii_size_idx_0;
  proc_control_node_B.ilt_size_idx_1 = proc_control_node_B.ii_size_idx_1;
  if ((-1.0E-6 <= proc_control_node_B.thresh) && (proc_control_node_B.thresh <=
       1.0E-6)) {
    proc_control_node_B.ii_size_idx_0 = 1;
    proc_control_node_B.ii_size_idx_1 = 1;
  } else {
    proc_control_node_B.ii_size_idx_0 = 0;
    proc_control_node_B.ii_size_idx_1 = 0;
  }

  proc_control_node_B.ism_size_idx_0 = proc_control_node_B.ii_size_idx_0;
  proc_control_node_B.ism_size_idx_1 = proc_control_node_B.ii_size_idx_1;
  if ((x * x * fabs(dk) < 0.001) && (fabs(k * x) < 0.001)) {
    proc_control_node_B.ii_size_idx_0 = 1;
    proc_control_node_B.ii_size_idx_1 = 1;
  } else {
    proc_control_node_B.ii_size_idx_0 = 0;
    proc_control_node_B.ii_size_idx_1 = 0;
  }

  z.re = 0.0;
  z.im = 0.0;
  if ((proc_control_node_B.igt_size_idx_0 != 0) &&
      (proc_control_node_B.igt_size_idx_1 != 0)) {
    proc_control_node_B.d_data_il = dk / 3.1415926535897931;
    proc_control_node_B.y_data_oc = 3.1415926535897931 * dk;
    proc_control_node_B.y_data_hy = 3.1415926535897931 * dk;
    proc_control_node_B.igt_data_idx_0 = 3.1415926535897931 / dk;
    for (proc_control_node_B.igt_size_idx_0 = 0;
         proc_control_node_B.igt_size_idx_0 < 1;
         proc_control_node_B.igt_size_idx_0++) {
      proc_control_node_B.d_data_il = sqrt(proc_control_node_B.d_data_il);
      proc_control_node_B.y_data_oc = sqrt(proc_control_node_B.y_data_oc);
      proc_control_node_B.y_data_hy = sqrt(proc_control_node_B.y_data_hy);
      proc_control_node_B.thresh = theta - proc_control_node_B.thresh_tmp / (2.0
        * dk);
      proc_control_node_B.y_data_ni.re = proc_control_node_B.thresh * 0.0;
      proc_control_node_B.y_data_ni.im = proc_control_node_B.thresh;
      proc_control_node_B.igt_data_idx_0 = sqrt
        (proc_control_node_B.igt_data_idx_0);
    }

    proc_control_node_B.w_data_idx_0 = proc_control_node_B.y_data_ni;
    proc_control_node_B.d_size_j[0] = 1;
    proc_control_node_B.d_size_j[1] = 1;
    proc_control_node_B.k_size[0] = 1;
    proc_control_node_B.k_size[1] = 1;
    proc_control_node_B.y_data_oc = proc_control_node_B.d_data_il * x + k /
      proc_control_node_B.y_data_oc;
    proc_control_node_B.k_data_p = k / proc_control_node_B.y_data_hy;
    for (proc_control_node_B.igt_size_idx_0 = 0;
         proc_control_node_B.igt_size_idx_0 < 1;
         proc_control_node_B.igt_size_idx_0++) {
      if (proc_control_node_B.w_data_idx_0.im == 0.0) {
        proc_control_node_B.thresh_tmp = exp(proc_control_node_B.w_data_idx_0.re);
        proc_control_node_B.thresh = 0.0;
      } else if (rtIsInf(proc_control_node_B.w_data_idx_0.im) && rtIsInf
                 (proc_control_node_B.w_data_idx_0.re) &&
                 (proc_control_node_B.w_data_idx_0.re < 0.0)) {
        proc_control_node_B.thresh_tmp = 0.0;
        proc_control_node_B.thresh = 0.0;
      } else {
        proc_control_node_B.thresh = exp(proc_control_node_B.w_data_idx_0.re /
          2.0);
        proc_control_node_B.thresh_tmp = cos(proc_control_node_B.w_data_idx_0.im)
          * proc_control_node_B.thresh * proc_control_node_B.thresh;
        proc_control_node_B.thresh *= sin(proc_control_node_B.w_data_idx_0.im) *
          proc_control_node_B.thresh;
      }

      proc_control_node_B.w_g.re = proc_control_node_B.thresh_tmp;
      proc_control_node_B.w_g.im = proc_control_node_B.thresh;
      proc_control_node_B.w_data_idx_0 = proc_control_node_B.w_g;
    }

    proc_control_node_fresnel_b(&proc_control_node_B.y_data_oc,
      proc_control_node_B.d_size_j, &proc_control_node_B.y_data_ni,
      proc_control_node_B.y_size_m);
    proc_control_node_fresnel_b(&proc_control_node_B.k_data_p,
      proc_control_node_B.k_size, &proc_control_node_B.tmp_data_mm,
      proc_control_node_B.y_size_m);
    proc_control_node_B.v_re = proc_control_node_B.igt_data_idx_0 *
      proc_control_node_B.w_data_idx_0.re;
    proc_control_node_B.igt_data_idx_0 *= proc_control_node_B.w_data_idx_0.im;
    proc_control_node_B.thresh_tmp = proc_control_node_B.y_data_ni.re -
      proc_control_node_B.tmp_data_mm.re;
    proc_control_node_B.thresh = proc_control_node_B.y_data_ni.im -
      proc_control_node_B.tmp_data_mm.im;
    proc_control_node_B.hc.re = proc_control_node_B.v_re *
      proc_control_node_B.thresh_tmp - proc_control_node_B.igt_data_idx_0 *
      proc_control_node_B.thresh;
    proc_control_node_B.hc.im = proc_control_node_B.v_re *
      proc_control_node_B.thresh + proc_control_node_B.igt_data_idx_0 *
      proc_control_node_B.thresh_tmp;
    z = proc_control_node_B.hc;
  }

  if ((proc_control_node_B.ilt_size_idx_0 != 0) &&
      (proc_control_node_B.ilt_size_idx_1 != 0)) {
    proc_control_node_B.igt_data_idx_0 = -dk / 3.1415926535897931;
    proc_control_node_B.y_data_oc = -3.1415926535897931 * dk;
    proc_control_node_B.y_data_hy = -3.1415926535897931 * dk;
    proc_control_node_B.d_data_il = -3.1415926535897931 / dk;
    for (proc_control_node_B.igt_size_idx_0 = 0;
         proc_control_node_B.igt_size_idx_0 < 1;
         proc_control_node_B.igt_size_idx_0++) {
      proc_control_node_B.igt_data_idx_0 = sqrt
        (proc_control_node_B.igt_data_idx_0);
      proc_control_node_B.y_data_oc = sqrt(proc_control_node_B.y_data_oc);
      proc_control_node_B.y_data_hy = sqrt(proc_control_node_B.y_data_hy);
      proc_control_node_B.thresh = theta - k * k / (2.0 * dk);
      proc_control_node_B.y_data_ni.re = proc_control_node_B.thresh * -0.0;
      proc_control_node_B.y_data_ni.im = -proc_control_node_B.thresh;
      proc_control_node_B.d_data_il = sqrt(proc_control_node_B.d_data_il);
    }

    proc_control_node_B.w_data_idx_0 = proc_control_node_B.y_data_ni;
    proc_control_node_B.d_size_j[0] = 1;
    proc_control_node_B.d_size_j[1] = 1;
    proc_control_node_B.k_size[0] = 1;
    proc_control_node_B.k_size[1] = 1;
    proc_control_node_B.y_data_oc = proc_control_node_B.igt_data_idx_0 * x - k /
      proc_control_node_B.y_data_oc;
    proc_control_node_B.k_data_p = -k / proc_control_node_B.y_data_hy;
    for (proc_control_node_B.igt_size_idx_0 = 0;
         proc_control_node_B.igt_size_idx_0 < 1;
         proc_control_node_B.igt_size_idx_0++) {
      if (proc_control_node_B.w_data_idx_0.im == 0.0) {
        proc_control_node_B.thresh_tmp = exp(proc_control_node_B.w_data_idx_0.re);
        proc_control_node_B.thresh = 0.0;
      } else if (rtIsInf(proc_control_node_B.w_data_idx_0.im) && rtIsInf
                 (proc_control_node_B.w_data_idx_0.re) &&
                 (proc_control_node_B.w_data_idx_0.re < 0.0)) {
        proc_control_node_B.thresh_tmp = 0.0;
        proc_control_node_B.thresh = 0.0;
      } else {
        proc_control_node_B.thresh = exp(proc_control_node_B.w_data_idx_0.re /
          2.0);
        proc_control_node_B.thresh_tmp = cos(proc_control_node_B.w_data_idx_0.im)
          * proc_control_node_B.thresh * proc_control_node_B.thresh;
        proc_control_node_B.thresh *= sin(proc_control_node_B.w_data_idx_0.im) *
          proc_control_node_B.thresh;
      }

      proc_control_node_B.w_j.re = proc_control_node_B.thresh_tmp;
      proc_control_node_B.w_j.im = proc_control_node_B.thresh;
      proc_control_node_B.w_data_idx_0 = proc_control_node_B.w_j;
    }

    proc_control_node_fresnel_b(&proc_control_node_B.y_data_oc,
      proc_control_node_B.d_size_j, &proc_control_node_B.y_data_ni,
      proc_control_node_B.y_size_m);
    proc_control_node_fresnel_b(&proc_control_node_B.k_data_p,
      proc_control_node_B.k_size, &proc_control_node_B.tmp_data_mm,
      proc_control_node_B.y_size_m);
    proc_control_node_B.v_re = proc_control_node_B.d_data_il *
      proc_control_node_B.w_data_idx_0.re;
    proc_control_node_B.igt_data_idx_0 = proc_control_node_B.d_data_il *
      proc_control_node_B.w_data_idx_0.im;
    proc_control_node_B.thresh_tmp = proc_control_node_B.y_data_ni.re -
      proc_control_node_B.tmp_data_mm.re;
    proc_control_node_B.thresh = proc_control_node_B.y_data_ni.im -
      proc_control_node_B.tmp_data_mm.im;
    proc_control_node_B.kc.re = proc_control_node_B.v_re *
      proc_control_node_B.thresh_tmp - proc_control_node_B.igt_data_idx_0 *
      proc_control_node_B.thresh;
    proc_control_node_B.kc.im = -(proc_control_node_B.v_re *
      proc_control_node_B.thresh + proc_control_node_B.igt_data_idx_0 *
      proc_control_node_B.thresh_tmp);
    z = proc_control_node_B.kc;
  }

  if ((proc_control_node_B.ism_size_idx_0 != 0) &&
      (proc_control_node_B.ism_size_idx_1 != 0)) {
    proc_control_node_B.d_size[0] = 1;
    proc_control_node_B.d_size[1] = 1;
    proc_control_node_B.y_size_c[0] = 1;
    proc_control_node_B.y_size_c[1] = 1;
    proc_control_node_B.k_size[0] = 1;
    proc_control_node_B.k_size[1] = 1;
    proc_control_node_B.y_size_d[0] = 1;
    proc_control_node_B.y_size_d[1] = 1;
    proc_control_node_B.d_data_il = x;
    proc_control_node_B.y_data_oc = dk;
    proc_control_node_B.k_data_p = k;
    proc_control_node_B.y_data_hy = theta;
    proc_control_node_fresnelgsma(&proc_control_node_B.d_data_il,
      proc_control_node_B.d_size, &proc_control_node_B.y_data_oc,
      proc_control_node_B.y_size_c, &proc_control_node_B.k_data_p,
      proc_control_node_B.k_size, &proc_control_node_B.y_data_hy,
      proc_control_node_B.y_size_d, &proc_control_node_B.tmp_data_mm,
      proc_control_node_B.y_size_m);
    if (0 <= proc_control_node_B.y_size_m[0] * proc_control_node_B.y_size_m[1] -
        1) {
      z = proc_control_node_B.tmp_data_mm;
    }
  }

  if ((proc_control_node_B.ii_size_idx_0 != 0) &&
      (proc_control_node_B.ii_size_idx_1 != 0)) {
    proc_control_node_B.d_size[0] = 1;
    proc_control_node_B.d_size[1] = 1;
    proc_control_node_B.y_size_c[0] = 1;
    proc_control_node_B.y_size_c[1] = 1;
    proc_control_node_B.k_size[0] = 1;
    proc_control_node_B.k_size[1] = 1;
    proc_control_node_B.y_size_d[0] = 1;
    proc_control_node_B.y_size_d[1] = 1;
    proc_control_node_B.d_data_il = x;
    proc_control_node_B.y_data_oc = dk;
    proc_control_node_B.k_data_p = k;
    proc_control_node_B.y_data_hy = theta;
    proc_control_node_fresnelgzero(&proc_control_node_B.d_data_il,
      proc_control_node_B.d_size, &proc_control_node_B.y_data_oc,
      proc_control_node_B.y_size_c, &proc_control_node_B.k_data_p,
      proc_control_node_B.k_size, &proc_control_node_B.y_data_hy,
      proc_control_node_B.y_size_d, &proc_control_node_B.tmp_data_mm,
      &proc_control_node_B.tmp_size_n3);
    z = proc_control_node_B.tmp_data_mm;
  }

  return z;
}

static void proc_control_getPositionalState(const real_T hcd[21], const creal_T
  hip[21], const real_T hl[20], const real_T k0[20], const real_T k1[20], const
  real_T course[21], const real_T hpp_breaks[21], const real_T hpp_coefs[80],
  const real_T hspp_breaks[21], const real_T hspp_coefs[80], const real_T
  happ_breaks[21], const real_T happ_coefs[80], const real_T hjpp_breaks[21],
  const real_T hjpp_coefs[80], creal_T *position, creal_T *velocity, creal_T
  *acceleration, creal_T *jerk)
{
  proc_control_node_B.l_0 = proc_control_node_ppval_b(hpp_breaks, hpp_coefs, 0.0);
  proc_control_node_B.l_1 = proc_control_node_ppval_b4(hspp_breaks, hspp_coefs,
    0.0);
  proc_control_node_B.l_2 = proc_control_node_ppval_b4(happ_breaks, happ_coefs,
    0.0);
  if (proc_control_node_B.l_0 > hcd[20]) {
    proc_control_node_B.l_0 = hcd[20];
  }

  proc_control_node_B.l = proc_control_node_B.l_0;
  if (proc_control_node_B.l_0 < hcd[0]) {
    proc_control_node_B.l = hcd[0];
  }

  proc_control_node_B.b_i1 = proc_control__mapElementsToBins
    (proc_control_node_B.l, hcd);
  proc_control_node_B.dkappa_tmp = k0[static_cast<int32_T>
    (proc_control_node_B.b_i1) - 1];
  proc_control_node_B.l_0 = (k1[static_cast<int32_T>(proc_control_node_B.b_i1) -
    1] - proc_control_node_B.dkappa_tmp) / hl[static_cast<int32_T>
    (proc_control_node_B.b_i1) - 1];
  proc_control_node_B.d_idx_0 = proc_control_node_B.l_0;
  proc_control_node_B.trueCount = 0;
  if (rtIsNaN(proc_control_node_B.l_0)) {
    for (proc_control_node_B.c_i_o = 0; proc_control_node_B.c_i_o < 1;
         proc_control_node_B.c_i_o++) {
      proc_control_node_B.trueCount++;
    }
  }

  if (0 <= proc_control_node_B.trueCount - 1) {
    proc_control_node_B.d_idx_0 = 0.0;
  }

  proc_control_node_B.l -= hcd[static_cast<int32_T>(proc_control_node_B.b_i1) -
    1];
  proc_control_node_B.f_1_im_tmp_tmp = course[static_cast<int32_T>
    (proc_control_node_B.b_i1) - 1];
  proc_control_node_B.f_1_im_tmp = (proc_control_node_B.d_idx_0 / 2.0 *
    proc_control_node_B.l + proc_control_node_B.dkappa_tmp) *
    proc_control_node_B.l + proc_control_node_B.f_1_im_tmp_tmp;
  if (proc_control_node_B.f_1_im_tmp == 0.0) {
    proc_control_node_B.l_0 = exp(((proc_control_node_B.d_idx_0 / 2.0 *
      proc_control_node_B.l + k0[static_cast<int32_T>(proc_control_node_B.b_i1)
      - 1]) * proc_control_node_B.l + course[static_cast<int32_T>
      (proc_control_node_B.b_i1) - 1]) * 0.0);
    proc_control_node_B.f_1_im = 0.0;
    proc_control_node_B.l_0_tmp = proc_control_node_B.l_0;
    proc_control_node_B.r_c = 0.0;
  } else {
    proc_control_node_B.r_c = exp(proc_control_node_B.f_1_im_tmp * 0.0 / 2.0);
    proc_control_node_B.l_0_tmp = cos(proc_control_node_B.f_1_im_tmp);
    proc_control_node_B.l_0 = proc_control_node_B.r_c *
      proc_control_node_B.l_0_tmp * proc_control_node_B.r_c;
    proc_control_node_B.f_1_im_tmp_n = sin(proc_control_node_B.f_1_im_tmp);
    proc_control_node_B.f_1_im = proc_control_node_B.r_c *
      proc_control_node_B.f_1_im_tmp_n * proc_control_node_B.r_c;
    proc_control_node_B.r_c = exp(((proc_control_node_B.d_idx_0 / 2.0 *
      proc_control_node_B.l + k0[static_cast<int32_T>(proc_control_node_B.b_i1)
      - 1]) * proc_control_node_B.l + course[static_cast<int32_T>
      (proc_control_node_B.b_i1) - 1]) * 0.0 / 2.0);
    proc_control_node_B.l_0_tmp = proc_control_node_B.r_c *
      proc_control_node_B.l_0_tmp * proc_control_node_B.r_c;
    proc_control_node_B.r_c *= proc_control_node_B.r_c *
      proc_control_node_B.f_1_im_tmp_n;
  }

  proc_control_node_B.f_1_im_tmp_n = proc_control_node_B.d_idx_0 * 0.0 *
    proc_control_node_B.l + proc_control_node_B.dkappa_tmp * 0.0;
  proc_control_node_B.im_tmp = proc_control_node_B.d_idx_0 *
    proc_control_node_B.l + proc_control_node_B.dkappa_tmp;
  proc_control_node_B.f_2_re = proc_control_node_B.l_0_tmp *
    proc_control_node_B.f_1_im_tmp_n - proc_control_node_B.r_c *
    proc_control_node_B.im_tmp;
  proc_control_node_B.f_2_im = proc_control_node_B.l_0_tmp *
    proc_control_node_B.im_tmp + proc_control_node_B.r_c *
    proc_control_node_B.f_1_im_tmp_n;
  if (proc_control_node_B.f_1_im_tmp == 0.0) {
    proc_control_node_B.l_0_tmp = exp(((proc_control_node_B.d_idx_0 / 2.0 *
      proc_control_node_B.l + k0[static_cast<int32_T>(proc_control_node_B.b_i1)
      - 1]) * proc_control_node_B.l + course[static_cast<int32_T>
      (proc_control_node_B.b_i1) - 1]) * 0.0);
    proc_control_node_B.r_c = 0.0;
  } else {
    proc_control_node_B.r_c = exp(((proc_control_node_B.d_idx_0 / 2.0 *
      proc_control_node_B.l + k0[static_cast<int32_T>(proc_control_node_B.b_i1)
      - 1]) * proc_control_node_B.l + course[static_cast<int32_T>
      (proc_control_node_B.b_i1) - 1]) * 0.0 / 2.0);
    proc_control_node_B.l_0_tmp = proc_control_node_B.r_c * cos
      (proc_control_node_B.f_1_im_tmp) * proc_control_node_B.r_c;
    proc_control_node_B.r_c *= proc_control_node_B.r_c * sin
      (proc_control_node_B.f_1_im_tmp);
  }

  proc_control_node_B.dc = proc_control_node_fresnelg2(proc_control_node_B.l,
    proc_control_node_B.d_idx_0, proc_control_node_B.dkappa_tmp,
    proc_control_node_B.f_1_im_tmp_tmp);
  position->re = hip[static_cast<int32_T>(proc_control_node_B.b_i1) - 1].re +
    proc_control_node_B.dc.re;
  position->im = hip[static_cast<int32_T>(proc_control_node_B.b_i1) - 1].im +
    proc_control_node_B.dc.im;
  velocity->re = proc_control_node_B.l_1 * proc_control_node_B.l_0;
  velocity->im = proc_control_node_B.l_1 * proc_control_node_B.f_1_im;
  proc_control_node_B.b_i1 = proc_control_node_B.l_1 * proc_control_node_B.l_1;
  acceleration->re = proc_control_node_B.b_i1 * proc_control_node_B.f_2_re +
    proc_control_node_B.l_0 * proc_control_node_B.l_2;
  acceleration->im = proc_control_node_B.b_i1 * proc_control_node_B.f_2_im +
    proc_control_node_B.f_1_im * proc_control_node_B.l_2;
  proc_control_node_B.f_1_im_tmp_n = 0.0 * proc_control_node_B.d_idx_0 -
    proc_control_node_B.im_tmp * proc_control_node_B.im_tmp;
  proc_control_node_B.b_i1 = proc_control_node_ppval_b4(hjpp_breaks, hjpp_coefs,
    0.0);
  proc_control_node_B.dkappa_tmp = proc_control_node_rt_powd_snf
    (proc_control_node_B.l_1, 3.0);
  jerk->re = (3.0 * proc_control_node_B.f_2_re * proc_control_node_B.l_1 *
              proc_control_node_B.l_2 + proc_control_node_B.l_0 *
              proc_control_node_B.b_i1) + (proc_control_node_B.l_0_tmp *
    proc_control_node_B.f_1_im_tmp_n - proc_control_node_B.r_c *
    proc_control_node_B.d_idx_0) * proc_control_node_B.dkappa_tmp;
  jerk->im = (3.0 * proc_control_node_B.f_2_im * proc_control_node_B.l_1 *
              proc_control_node_B.l_2 + proc_control_node_B.f_1_im *
              proc_control_node_B.b_i1) + (proc_control_node_B.l_0_tmp *
    proc_control_node_B.d_idx_0 + proc_control_node_B.r_c *
    proc_control_node_B.f_1_im_tmp_n) * proc_control_node_B.dkappa_tmp;
}

static void waypointTrajectory_fetchPositio(const
  waypointTrajectory_proc_contr_T *obj, real_T position[3], real_T velocity[3],
  real_T acceleration[3], real_T jerk[3])
{
  for (proc_control_node_B.i13 = 0; proc_control_node_B.i13 < 21;
       proc_control_node_B.i13++) {
    proc_control_node_B.dv12[proc_control_node_B.i13] = 0.017453292519943295 *
      obj->Course[proc_control_node_B.i13];
  }

  proc_control_getPositionalState(obj->HorizontalCumulativeDistance,
    obj->HorizontalInitialPosition, obj->HorizontalPiecewiseLength,
    obj->HorizontalCurvatureInitial, obj->HorizontalCurvatureFinal,
    proc_control_node_B.dv12, obj->HorizontalDistancePiecewisePolynomial.breaks,
    obj->HorizontalDistancePiecewisePolynomial.coefs,
    obj->HorizontalSpeedPiecewisePolynomial.breaks,
    obj->HorizontalSpeedPiecewisePolynomial.coefs,
    obj->HorizontalAccelerationPiecewisePolynomial.breaks,
    obj->HorizontalAccelerationPiecewisePolynomial.coefs,
    obj->HorizontalJerkPiecewisePolynomial.breaks,
    obj->HorizontalJerkPiecewisePolynomial.coefs, &proc_control_node_B.ph,
    &proc_control_node_B.vh, &proc_control_node_B.ah, &proc_control_node_B.jh);
  position[0] = proc_control_node_B.ph.re;
  position[1] = proc_control_node_B.ph.im;
  position[2] = proc_control_node_ppval_b
    (obj->VerticalDistancePiecewisePolynomial.breaks,
     obj->VerticalDistancePiecewisePolynomial.coefs, 0.0);
  velocity[0] = proc_control_node_B.vh.re;
  velocity[1] = proc_control_node_B.vh.im;
  velocity[2] = proc_control_node_ppval_b4
    (obj->VerticalSpeedPiecewisePolynomial.breaks,
     obj->VerticalSpeedPiecewisePolynomial.coefs, 0.0);
  acceleration[0] = proc_control_node_B.ah.re;
  acceleration[1] = proc_control_node_B.ah.im;
  acceleration[2] = proc_control_node_ppval_b4
    (obj->VerticalAccelerationPiecewisePolynomial.breaks,
     obj->VerticalAccelerationPiecewisePolynomial.coefs, 0.0);
  jerk[0] = proc_control_node_B.jh.re;
  jerk[1] = proc_control_node_B.jh.im;
  jerk[2] = proc_control_node_ppval_b4
    (obj->VerticalJerkPiecewisePolynomial.breaks,
     obj->VerticalJerkPiecewisePolynomial.coefs, 0.0);
}

static void proc_waypointTrajectory_setPose(waypointTrajectory_proc_contr_T *obj)
{
  if ((obj->TimeOfArrival[0] <= 0.0) && (0.0 <= obj->TimeOfArrival[20])) {
    waypointTrajectory_fetchPositio(obj, proc_control_node_B.position,
      proc_control_node_B.velocity, proc_control_node_B.acceleration,
      proc_control_node_B.jerk_a);
  } else if (0.0 > obj->TimeOfArrival[20]) {
    obj->IsDoneStatus = true;
  }
}

static waypointTrajectory_proc_contr_T *waypointTrajectory_waypointTraj
  (waypointTrajectory_proc_contr_T *obj, const real_T varargin_1[63], const
   real_T varargin_2[21], real_T varargin_4, const real_T varargin_8_a[21],
   const real_T varargin_8_b[21], const real_T varargin_8_c[21], const real_T
   varargin_8_d[21])
{
  waypointTrajectory_proc_contr_T *b_obj;
  obj->ReferenceFrame[0] = 'N';
  obj->ReferenceFrame[1] = 'E';
  obj->ReferenceFrame[2] = 'D';
  obj->isInitialized = 0;
  b_obj = obj;
  for (proc_control_node_B.i_a = 0; proc_control_node_B.i_a < 63;
       proc_control_node_B.i_a++) {
    obj->Waypoints[proc_control_node_B.i_a] = varargin_1[proc_control_node_B.i_a];
  }

  for (proc_control_node_B.i_a = 0; proc_control_node_B.i_a < 21;
       proc_control_node_B.i_a++) {
    obj->TimeOfArrival[proc_control_node_B.i_a] =
      varargin_2[proc_control_node_B.i_a];
  }

  obj->SampleRate = varargin_4;
  for (proc_control_node_B.i_a = 0; proc_control_node_B.i_a < 21;
       proc_control_node_B.i_a++) {
    obj->Quaternions.a[proc_control_node_B.i_a] =
      varargin_8_a[proc_control_node_B.i_a];
  }

  for (proc_control_node_B.i_a = 0; proc_control_node_B.i_a < 21;
       proc_control_node_B.i_a++) {
    obj->Quaternions.b[proc_control_node_B.i_a] =
      varargin_8_b[proc_control_node_B.i_a];
  }

  for (proc_control_node_B.i_a = 0; proc_control_node_B.i_a < 21;
       proc_control_node_B.i_a++) {
    obj->Quaternions.c[proc_control_node_B.i_a] =
      varargin_8_c[proc_control_node_B.i_a];
  }

  for (proc_control_node_B.i_a = 0; proc_control_node_B.i_a < 21;
       proc_control_node_B.i_a++) {
    obj->Quaternions.d[proc_control_node_B.i_a] =
      varargin_8_d[proc_control_node_B.i_a];
  }

  waypointTrajectory_setupPositio(obj);
  for (proc_control_node_B.i_a = 0; proc_control_node_B.i_a < 21;
       proc_control_node_B.i_a++) {
    proc_control_node_B.course[proc_control_node_B.i_a] = obj->
      Quaternions.a[proc_control_node_B.i_a];
  }

  for (proc_control_node_B.i_a = 0; proc_control_node_B.i_a < 21;
       proc_control_node_B.i_a++) {
    proc_control_node_B.gndspeed[proc_control_node_B.i_a] = obj->
      Quaternions.b[proc_control_node_B.i_a];
  }

  for (proc_control_node_B.i_a = 0; proc_control_node_B.i_a < 21;
       proc_control_node_B.i_a++) {
    proc_control_node_B.rate[proc_control_node_B.i_a] = obj->
      Quaternions.c[proc_control_node_B.i_a];
  }

  for (proc_control_node_B.i_a = 0; proc_control_node_B.i_a < 21;
       proc_control_node_B.i_a++) {
    proc_control_node_B.q_d[proc_control_node_B.i_a] = obj->
      Quaternions.d[proc_control_node_B.i_a];
  }

  for (proc_control_node_B.i_a = 0; proc_control_node_B.i_a < 21;
       proc_control_node_B.i_a++) {
    proc_control_node_B.t[proc_control_node_B.i_a] = obj->
      TimeOfArrival[proc_control_node_B.i_a];
  }

  proc_control_no_quaternionC2fit(proc_control_node_B.course,
    proc_control_node_B.gndspeed, proc_control_node_B.rate,
    proc_control_node_B.q_d, proc_control_node_B.t, proc_control_node_B.h,
    proc_control_node_B.dtheta, proc_control_node_B.e, proc_control_node_B.w);
  for (proc_control_node_B.i_a = 0; proc_control_node_B.i_a < 20;
       proc_control_node_B.i_a++) {
    obj->SegmentTimes[proc_control_node_B.i_a] =
      proc_control_node_B.h[proc_control_node_B.i_a];
  }

  for (proc_control_node_B.i_a = 0; proc_control_node_B.i_a < 20;
       proc_control_node_B.i_a++) {
    obj->RadianSlewAngles[proc_control_node_B.i_a] =
      proc_control_node_B.dtheta[proc_control_node_B.i_a];
  }

  for (proc_control_node_B.i_a = 0; proc_control_node_B.i_a < 60;
       proc_control_node_B.i_a++) {
    obj->AxesOfRotation[proc_control_node_B.i_a] =
      proc_control_node_B.e[proc_control_node_B.i_a];
  }

  for (proc_control_node_B.i_a = 0; proc_control_node_B.i_a < 63;
       proc_control_node_B.i_a++) {
    obj->RadianAngularVelocities[proc_control_node_B.i_a] =
      proc_control_node_B.w[proc_control_node_B.i_a];
  }

  for (proc_control_node_B.i_a = 0; proc_control_node_B.i_a < 21;
       proc_control_node_B.i_a++) {
    proc_control_node_B.t[proc_control_node_B.i_a] = obj->
      TimeOfArrival[proc_control_node_B.i_a];
  }

  for (proc_control_node_B.i_a = 0; proc_control_node_B.i_a < 21;
       proc_control_node_B.i_a++) {
    proc_control_node_B.course[proc_control_node_B.i_a] = obj->
      Course[proc_control_node_B.i_a];
  }

  proc_control_node_ppval(obj->HorizontalSpeedPiecewisePolynomial.breaks,
    obj->HorizontalSpeedPiecewisePolynomial.coefs, proc_control_node_B.t,
    proc_control_node_B.gndspeed);
  proc_control_node_ppval(obj->VerticalSpeedPiecewisePolynomial.breaks,
    obj->VerticalSpeedPiecewisePolynomial.coefs, proc_control_node_B.t,
    proc_control_node_B.rate);
  for (proc_control_node_B.i_a = 0; proc_control_node_B.i_a < 21;
       proc_control_node_B.i_a++) {
    proc_control_node_B.course_d =
      proc_control_node_B.course[proc_control_node_B.i_a];
    if (rtIsInf(proc_control_node_B.course_d) || rtIsNaN
        (proc_control_node_B.course_d)) {
      proc_control_node_B.c_h = (rtNaN);
      proc_control_node_B.course_d = (rtNaN);
    } else {
      proc_control_node_B.b_x_e = rt_remd_snf(proc_control_node_B.course_d,
        360.0);
      proc_control_node_B.absx = fabs(proc_control_node_B.b_x_e);
      if (proc_control_node_B.absx > 180.0) {
        if (proc_control_node_B.b_x_e > 0.0) {
          proc_control_node_B.b_x_e -= 360.0;
        } else {
          proc_control_node_B.b_x_e += 360.0;
        }

        proc_control_node_B.absx = fabs(proc_control_node_B.b_x_e);
      }

      if (proc_control_node_B.absx <= 45.0) {
        proc_control_node_B.c_h = cos(0.017453292519943295 *
          proc_control_node_B.b_x_e);
      } else {
        if (proc_control_node_B.absx <= 135.0) {
          if (proc_control_node_B.b_x_e > 0.0) {
            proc_control_node_B.b_x_e = (proc_control_node_B.b_x_e - 90.0) *
              0.017453292519943295;
            proc_control_node_B.n_dg = 1;
          } else {
            proc_control_node_B.b_x_e = (proc_control_node_B.b_x_e + 90.0) *
              0.017453292519943295;
            proc_control_node_B.n_dg = -1;
          }
        } else if (proc_control_node_B.b_x_e > 0.0) {
          proc_control_node_B.b_x_e = (proc_control_node_B.b_x_e - 180.0) *
            0.017453292519943295;
          proc_control_node_B.n_dg = 2;
        } else {
          proc_control_node_B.b_x_e = (proc_control_node_B.b_x_e + 180.0) *
            0.017453292519943295;
          proc_control_node_B.n_dg = -2;
        }

        if (proc_control_node_B.n_dg == 1) {
          proc_control_node_B.c_h = -sin(proc_control_node_B.b_x_e);
        } else if (proc_control_node_B.n_dg == -1) {
          proc_control_node_B.c_h = sin(proc_control_node_B.b_x_e);
        } else {
          proc_control_node_B.c_h = -cos(proc_control_node_B.b_x_e);
        }
      }

      proc_control_node_B.b_x_e = rt_remd_snf(proc_control_node_B.course_d,
        360.0);
      proc_control_node_B.absx = fabs(proc_control_node_B.b_x_e);
      if (proc_control_node_B.absx > 180.0) {
        if (proc_control_node_B.b_x_e > 0.0) {
          proc_control_node_B.b_x_e -= 360.0;
        } else {
          proc_control_node_B.b_x_e += 360.0;
        }

        proc_control_node_B.absx = fabs(proc_control_node_B.b_x_e);
      }

      if (proc_control_node_B.absx <= 45.0) {
        proc_control_node_B.course_d = sin(0.017453292519943295 *
          proc_control_node_B.b_x_e);
      } else {
        if (proc_control_node_B.absx <= 135.0) {
          if (proc_control_node_B.b_x_e > 0.0) {
            proc_control_node_B.b_x_e = (proc_control_node_B.b_x_e - 90.0) *
              0.017453292519943295;
            proc_control_node_B.n_dg = 1;
          } else {
            proc_control_node_B.b_x_e = (proc_control_node_B.b_x_e + 90.0) *
              0.017453292519943295;
            proc_control_node_B.n_dg = -1;
          }
        } else if (proc_control_node_B.b_x_e > 0.0) {
          proc_control_node_B.b_x_e = (proc_control_node_B.b_x_e - 180.0) *
            0.017453292519943295;
          proc_control_node_B.n_dg = 2;
        } else {
          proc_control_node_B.b_x_e = (proc_control_node_B.b_x_e + 180.0) *
            0.017453292519943295;
          proc_control_node_B.n_dg = -2;
        }

        if (proc_control_node_B.n_dg == 1) {
          proc_control_node_B.course_d = cos(proc_control_node_B.b_x_e);
        } else if (proc_control_node_B.n_dg == -1) {
          proc_control_node_B.course_d = -cos(proc_control_node_B.b_x_e);
        } else {
          proc_control_node_B.course_d = -sin(proc_control_node_B.b_x_e);
        }
      }
    }

    proc_control_node_B.course[proc_control_node_B.i_a] =
      proc_control_node_B.course_d;
    proc_control_node_B.t[proc_control_node_B.i_a] = proc_control_node_B.c_h;
  }

  for (proc_control_node_B.i_a = 0; proc_control_node_B.i_a < 21;
       proc_control_node_B.i_a++) {
    obj->Velocities[proc_control_node_B.i_a] =
      proc_control_node_B.t[proc_control_node_B.i_a] *
      proc_control_node_B.gndspeed[proc_control_node_B.i_a];
  }

  for (proc_control_node_B.i_a = 0; proc_control_node_B.i_a < 21;
       proc_control_node_B.i_a++) {
    obj->Velocities[proc_control_node_B.i_a + 21] =
      proc_control_node_B.course[proc_control_node_B.i_a] *
      proc_control_node_B.gndspeed[proc_control_node_B.i_a];
  }

  for (proc_control_node_B.i_a = 0; proc_control_node_B.i_a < 21;
       proc_control_node_B.i_a++) {
    obj->Velocities[proc_control_node_B.i_a + 42] =
      proc_control_node_B.rate[proc_control_node_B.i_a];
  }

  obj->CurrentTime = 0.0;
  proc_waypointTrajectory_setPose(obj);
  obj->IsDoneStatus = false;
  return b_obj;
}

static void proc_contr_getPositionalState_b(const real_T hcd[21], const creal_T
  hip[21], const real_T hl[20], const real_T k0[20], const real_T k1[20], const
  real_T course[21], const real_T hpp_breaks[21], const real_T hpp_coefs[80],
  const real_T hspp_breaks[21], const real_T hspp_coefs[80], const real_T
  happ_breaks[21], const real_T happ_coefs[80], const real_T hjpp_breaks[21],
  const real_T hjpp_coefs[80], real_T t, creal_T *position, creal_T *velocity,
  creal_T *acceleration, creal_T *jerk)
{
  proc_control_node_B.l_0_e = proc_control_node_ppval_b(hpp_breaks, hpp_coefs, t);
  proc_control_node_B.l_1_l = proc_control_node_ppval_b4(hspp_breaks, hspp_coefs,
    t);
  proc_control_node_B.l_2_n = proc_control_node_ppval_b4(happ_breaks, happ_coefs,
    t);
  if (proc_control_node_B.l_0_e > hcd[20]) {
    proc_control_node_B.l_0_e = hcd[20];
  }

  proc_control_node_B.l_e = proc_control_node_B.l_0_e;
  if (proc_control_node_B.l_0_e < hcd[0]) {
    proc_control_node_B.l_e = hcd[0];
  }

  proc_control_node_B.b_cu = proc_control__mapElementsToBins
    (proc_control_node_B.l_e, hcd);
  proc_control_node_B.dkappa_tmp_m = k0[static_cast<int32_T>
    (proc_control_node_B.b_cu) - 1];
  proc_control_node_B.l_0_e = (k1[static_cast<int32_T>(proc_control_node_B.b_cu)
    - 1] - proc_control_node_B.dkappa_tmp_m) / hl[static_cast<int32_T>
    (proc_control_node_B.b_cu) - 1];
  proc_control_node_B.d_idx_0_h = proc_control_node_B.l_0_e;
  proc_control_node_B.trueCount_g = 0;
  if (rtIsNaN(proc_control_node_B.l_0_e)) {
    for (proc_control_node_B.c_i_l = 0; proc_control_node_B.c_i_l < 1;
         proc_control_node_B.c_i_l++) {
      proc_control_node_B.trueCount_g++;
    }
  }

  if (0 <= proc_control_node_B.trueCount_g - 1) {
    proc_control_node_B.d_idx_0_h = 0.0;
  }

  proc_control_node_B.l_e -= hcd[static_cast<int32_T>(proc_control_node_B.b_cu)
    - 1];
  proc_control_node_B.f_1_im_tmp_tmp_h = course[static_cast<int32_T>
    (proc_control_node_B.b_cu) - 1];
  proc_control_node_B.f_1_im_tmp_k = (proc_control_node_B.d_idx_0_h / 2.0 *
    proc_control_node_B.l_e + proc_control_node_B.dkappa_tmp_m) *
    proc_control_node_B.l_e + proc_control_node_B.f_1_im_tmp_tmp_h;
  if (proc_control_node_B.f_1_im_tmp_k == 0.0) {
    proc_control_node_B.l_0_e = exp(((proc_control_node_B.d_idx_0_h / 2.0 *
      proc_control_node_B.l_e + k0[static_cast<int32_T>(proc_control_node_B.b_cu)
      - 1]) * proc_control_node_B.l_e + course[static_cast<int32_T>
      (proc_control_node_B.b_cu) - 1]) * 0.0);
    proc_control_node_B.f_1_im_f = 0.0;
    proc_control_node_B.l_0_tmp_h = proc_control_node_B.l_0_e;
    proc_control_node_B.r_a = 0.0;
  } else {
    proc_control_node_B.r_a = exp(proc_control_node_B.f_1_im_tmp_k * 0.0 / 2.0);
    proc_control_node_B.l_0_tmp_h = cos(proc_control_node_B.f_1_im_tmp_k);
    proc_control_node_B.l_0_e = proc_control_node_B.r_a *
      proc_control_node_B.l_0_tmp_h * proc_control_node_B.r_a;
    proc_control_node_B.f_1_im_tmp_b = sin(proc_control_node_B.f_1_im_tmp_k);
    proc_control_node_B.f_1_im_f = proc_control_node_B.r_a *
      proc_control_node_B.f_1_im_tmp_b * proc_control_node_B.r_a;
    proc_control_node_B.r_a = exp(((proc_control_node_B.d_idx_0_h / 2.0 *
      proc_control_node_B.l_e + k0[static_cast<int32_T>(proc_control_node_B.b_cu)
      - 1]) * proc_control_node_B.l_e + course[static_cast<int32_T>
      (proc_control_node_B.b_cu) - 1]) * 0.0 / 2.0);
    proc_control_node_B.l_0_tmp_h = proc_control_node_B.r_a *
      proc_control_node_B.l_0_tmp_h * proc_control_node_B.r_a;
    proc_control_node_B.r_a *= proc_control_node_B.r_a *
      proc_control_node_B.f_1_im_tmp_b;
  }

  proc_control_node_B.f_1_im_tmp_b = proc_control_node_B.d_idx_0_h * 0.0 *
    proc_control_node_B.l_e + proc_control_node_B.dkappa_tmp_m * 0.0;
  proc_control_node_B.im_tmp_b = proc_control_node_B.d_idx_0_h *
    proc_control_node_B.l_e + proc_control_node_B.dkappa_tmp_m;
  proc_control_node_B.f_2_re_m = proc_control_node_B.l_0_tmp_h *
    proc_control_node_B.f_1_im_tmp_b - proc_control_node_B.r_a *
    proc_control_node_B.im_tmp_b;
  proc_control_node_B.f_2_im_c = proc_control_node_B.l_0_tmp_h *
    proc_control_node_B.im_tmp_b + proc_control_node_B.r_a *
    proc_control_node_B.f_1_im_tmp_b;
  if (proc_control_node_B.f_1_im_tmp_k == 0.0) {
    proc_control_node_B.l_0_tmp_h = exp(((proc_control_node_B.d_idx_0_h / 2.0 *
      proc_control_node_B.l_e + k0[static_cast<int32_T>(proc_control_node_B.b_cu)
      - 1]) * proc_control_node_B.l_e + course[static_cast<int32_T>
      (proc_control_node_B.b_cu) - 1]) * 0.0);
    proc_control_node_B.r_a = 0.0;
  } else {
    proc_control_node_B.r_a = exp(((proc_control_node_B.d_idx_0_h / 2.0 *
      proc_control_node_B.l_e + k0[static_cast<int32_T>(proc_control_node_B.b_cu)
      - 1]) * proc_control_node_B.l_e + course[static_cast<int32_T>
      (proc_control_node_B.b_cu) - 1]) * 0.0 / 2.0);
    proc_control_node_B.l_0_tmp_h = proc_control_node_B.r_a * cos
      (proc_control_node_B.f_1_im_tmp_k) * proc_control_node_B.r_a;
    proc_control_node_B.r_a *= proc_control_node_B.r_a * sin
      (proc_control_node_B.f_1_im_tmp_k);
  }

  proc_control_node_B.dc1 = proc_control_node_fresnelg2(proc_control_node_B.l_e,
    proc_control_node_B.d_idx_0_h, proc_control_node_B.dkappa_tmp_m,
    proc_control_node_B.f_1_im_tmp_tmp_h);
  position->re = hip[static_cast<int32_T>(proc_control_node_B.b_cu) - 1].re +
    proc_control_node_B.dc1.re;
  position->im = hip[static_cast<int32_T>(proc_control_node_B.b_cu) - 1].im +
    proc_control_node_B.dc1.im;
  velocity->re = proc_control_node_B.l_1_l * proc_control_node_B.l_0_e;
  velocity->im = proc_control_node_B.l_1_l * proc_control_node_B.f_1_im_f;
  proc_control_node_B.b_cu = proc_control_node_B.l_1_l *
    proc_control_node_B.l_1_l;
  acceleration->re = proc_control_node_B.b_cu * proc_control_node_B.f_2_re_m +
    proc_control_node_B.l_0_e * proc_control_node_B.l_2_n;
  acceleration->im = proc_control_node_B.b_cu * proc_control_node_B.f_2_im_c +
    proc_control_node_B.f_1_im_f * proc_control_node_B.l_2_n;
  proc_control_node_B.f_1_im_tmp_b = 0.0 * proc_control_node_B.d_idx_0_h -
    proc_control_node_B.im_tmp_b * proc_control_node_B.im_tmp_b;
  proc_control_node_B.b_cu = proc_control_node_ppval_b4(hjpp_breaks, hjpp_coefs,
    t);
  proc_control_node_B.dkappa_tmp_m = proc_control_node_rt_powd_snf
    (proc_control_node_B.l_1_l, 3.0);
  jerk->re = (3.0 * proc_control_node_B.f_2_re_m * proc_control_node_B.l_1_l *
              proc_control_node_B.l_2_n + proc_control_node_B.l_0_e *
              proc_control_node_B.b_cu) + (proc_control_node_B.l_0_tmp_h *
    proc_control_node_B.f_1_im_tmp_b - proc_control_node_B.r_a *
    proc_control_node_B.d_idx_0_h) * proc_control_node_B.dkappa_tmp_m;
  jerk->im = (3.0 * proc_control_node_B.f_2_im_c * proc_control_node_B.l_1_l *
              proc_control_node_B.l_2_n + proc_control_node_B.f_1_im_f *
              proc_control_node_B.b_cu) + (proc_control_node_B.l_0_tmp_h *
    proc_control_node_B.d_idx_0_h + proc_control_node_B.r_a *
    proc_control_node_B.f_1_im_tmp_b) * proc_control_node_B.dkappa_tmp_m;
}

static void waypointTrajectory_fetchPosit_b(const
  waypointTrajectory_proc_contr_T *obj, real_T simulationTime, real_T position[3],
  real_T velocity[3], real_T acceleration[3], real_T jerk[3])
{
  for (proc_control_node_B.i15 = 0; proc_control_node_B.i15 < 21;
       proc_control_node_B.i15++) {
    proc_control_node_B.dv13[proc_control_node_B.i15] = 0.017453292519943295 *
      obj->Course[proc_control_node_B.i15];
  }

  proc_contr_getPositionalState_b(obj->HorizontalCumulativeDistance,
    obj->HorizontalInitialPosition, obj->HorizontalPiecewiseLength,
    obj->HorizontalCurvatureInitial, obj->HorizontalCurvatureFinal,
    proc_control_node_B.dv13, obj->HorizontalDistancePiecewisePolynomial.breaks,
    obj->HorizontalDistancePiecewisePolynomial.coefs,
    obj->HorizontalSpeedPiecewisePolynomial.breaks,
    obj->HorizontalSpeedPiecewisePolynomial.coefs,
    obj->HorizontalAccelerationPiecewisePolynomial.breaks,
    obj->HorizontalAccelerationPiecewisePolynomial.coefs,
    obj->HorizontalJerkPiecewisePolynomial.breaks,
    obj->HorizontalJerkPiecewisePolynomial.coefs, simulationTime,
    &proc_control_node_B.ph_g, &proc_control_node_B.vh_d,
    &proc_control_node_B.ah_c, &proc_control_node_B.jh_m);
  position[0] = proc_control_node_B.ph_g.re;
  position[1] = proc_control_node_B.ph_g.im;
  position[2] = proc_control_node_ppval_b
    (obj->VerticalDistancePiecewisePolynomial.breaks,
     obj->VerticalDistancePiecewisePolynomial.coefs, simulationTime);
  velocity[0] = proc_control_node_B.vh_d.re;
  velocity[1] = proc_control_node_B.vh_d.im;
  velocity[2] = proc_control_node_ppval_b4
    (obj->VerticalSpeedPiecewisePolynomial.breaks,
     obj->VerticalSpeedPiecewisePolynomial.coefs, simulationTime);
  acceleration[0] = proc_control_node_B.ah_c.re;
  acceleration[1] = proc_control_node_B.ah_c.im;
  acceleration[2] = proc_control_node_ppval_b4
    (obj->VerticalAccelerationPiecewisePolynomial.breaks,
     obj->VerticalAccelerationPiecewisePolynomial.coefs, simulationTime);
  jerk[0] = proc_control_node_B.jh_m.re;
  jerk[1] = proc_control_node_B.jh_m.im;
  jerk[2] = proc_control_node_ppval_b4
    (obj->VerticalJerkPiecewisePolynomial.breaks,
     obj->VerticalJerkPiecewisePolynomial.coefs, simulationTime);
}

static void proc_control_node_cross(const real_T a_data[], const int32_T a_size
  [2], const real_T b_data[], real_T c_data[], int32_T c_size[2])
{
  int32_T i1;
  int32_T iStart;
  c_size[0] = a_size[0];
  c_size[1] = 3;
  if (a_size[0] != 0) {
    for (iStart = 1; iStart <= 1; iStart += 3) {
      for (i1 = 1; i1 < 2; i1++) {
        c_data[0] = a_data[1] * b_data[2] - b_data[1] * a_data[2];
        c_data[1] = b_data[0] * a_data[2] - a_data[0] * b_data[2];
        c_data[2] = a_data[0] * b_data[1] - b_data[0] * a_data[1];
      }
    }
  }
}

static void proc_control_node_bsxmul(const real_T x_data[], const int32_T
  *x_size, const real_T y_data[], const int32_T y_size[2], real_T z_data[],
  int32_T z_size[2])
{
  int32_T y;
  if (y_size[0] == 1) {
    z_size[0] = *x_size;
    y = *x_size;
  } else {
    z_size[0] = 0;
    y = 0;
  }

  z_size[1] = 3;
  if (y != 0) {
    for (y = 0; y < 3; y++) {
      z_data[z_size[0] * y] = x_data[0] * y_data[y_size[0] * y];
    }
  }
}

static void proc_control_node_bsxmul_b(const real_T x_data[], const int32_T
  x_size[2], const real_T y_data[], const int32_T y_size[2], real_T z_data[],
  int32_T z_size[2])
{
  int32_T y;
  if (y_size[0] == 1) {
    z_size[0] = x_size[0];
    y = x_size[0];
  } else {
    z_size[0] = 0;
    y = 0;
  }

  z_size[1] = 3;
  if (y != 0) {
    for (y = 0; y < 3; y++) {
      z_data[z_size[0] * y] = x_data[0] * y_data[y_size[0] * y];
    }
  }
}

static void proc_control_node_slew3_init(real_T dt, real_T dtheta, const real_T
  e[3], const real_T wi[3], const real_T wf[3], real_T aa[9], real_T bb[9],
  real_T cc[6], real_T dd[3])
{
  int32_T b0_size;
  int32_T ii_size_idx_1;
  if (dtheta > 1.0E-6) {
    proc_control_node_B.i1_j = 1;
    ii_size_idx_1 = 1;
  } else {
    proc_control_node_B.i1_j = 0;
    ii_size_idx_1 = 0;
  }

  proc_control_node_B.bvec[0] = wf[0];
  proc_control_node_B.bvec[1] = wf[1];
  proc_control_node_B.bvec[2] = wf[2];
  if ((proc_control_node_B.i1_j != 0) && (ii_size_idx_1 != 0)) {
    for (proc_control_node_B.i1_j = 0; proc_control_node_B.i1_j < 3;
         proc_control_node_B.i1_j++) {
      proc_control_node_B.bvec2_data[proc_control_node_B.i1_j] =
        e[proc_control_node_B.i1_j];
      proc_control_node_B.b_data_g[proc_control_node_B.i1_j] =
        wf[proc_control_node_B.i1_j];
    }

    b0_size = 1;
    proc_control_node_B.i1_j = 0;
    for (ii_size_idx_1 = 0; ii_size_idx_1 < 1; ii_size_idx_1++) {
      proc_control_node_B.i1_j++;
      proc_control_node_B.b0_data =
        (proc_control_node_B.bvec2_data[proc_control_node_B.i1_j - 1] *
         proc_control_node_B.b_data_g[proc_control_node_B.i1_j - 1] +
         proc_control_node_B.bvec2_data[proc_control_node_B.i1_j] *
         proc_control_node_B.b_data_g[proc_control_node_B.i1_j]) +
        proc_control_node_B.bvec2_data[proc_control_node_B.i1_j + 1] *
        proc_control_node_B.b_data_g[proc_control_node_B.i1_j + 1];
    }

    proc_control_node_B.b_size_h4[0] = 1;
    proc_control_node_B.b_size_h4[1] = 3;
    proc_control_node_B.e_size_a[0] = 1;
    proc_control_node_B.e_size_a[1] = 3;
    for (proc_control_node_B.i1_j = 0; proc_control_node_B.i1_j < 3;
         proc_control_node_B.i1_j++) {
      proc_control_node_B.e_bp = e[proc_control_node_B.i1_j];
      proc_control_node_B.b_data_g[proc_control_node_B.i1_j] =
        proc_control_node_B.e_bp;
      proc_control_node_B.wf_data[proc_control_node_B.i1_j] =
        wf[proc_control_node_B.i1_j];
      proc_control_node_B.e_data_o2[proc_control_node_B.i1_j] =
        proc_control_node_B.e_bp;
      proc_control_node_B.e_data_gf[proc_control_node_B.i1_j] =
        proc_control_node_B.e_bp;
    }

    proc_control_node_cross(proc_control_node_B.b_data_g,
      proc_control_node_B.b_size_h4, proc_control_node_B.wf_data,
      proc_control_node_B.bvec2_data, proc_control_node_B.bvec2_size);
    proc_control_node_bsxmul(&proc_control_node_B.b0_data, &b0_size,
      proc_control_node_B.e_data_o2, proc_control_node_B.e_size_a,
      proc_control_node_B.b_data_g, proc_control_node_B.b_size_h4);
    proc_control_node_B.tmp_size_kg[0] = 1;
    proc_control_node_B.tmp_size_kg[1] = 1;
    proc_control_node_B.tmp_size_j[0] = 1;
    proc_control_node_B.tmp_size_j[1] = 1;
    proc_control_node_B.b0_data = 0.5 * sin(dtheta) * dtheta / (1.0 - cos(dtheta));
    proc_control_node_B.tmp_data_pyh = 0.5 * dtheta;
    proc_control_node_cross(proc_control_node_B.bvec2_data,
      proc_control_node_B.bvec2_size, proc_control_node_B.e_data_gf,
      proc_control_node_B.wf_data, proc_control_node_B.wf_size);
    proc_control_node_bsxmul_b(&proc_control_node_B.b0_data,
      proc_control_node_B.tmp_size_kg, proc_control_node_B.wf_data,
      proc_control_node_B.wf_size, proc_control_node_B.e_data_o2,
      proc_control_node_B.e_size_a);
    proc_control_node_bsxmul_b(&proc_control_node_B.tmp_data_pyh,
      proc_control_node_B.tmp_size_j, proc_control_node_B.bvec2_data,
      proc_control_node_B.bvec2_size, proc_control_node_B.e_data_gf,
      proc_control_node_B.tmp_size_kg);
    if (0 <= proc_control_node_B.b_size_h4[0] - 1) {
      for (proc_control_node_B.i1_j = 0; proc_control_node_B.i1_j < 3;
           proc_control_node_B.i1_j++) {
        proc_control_node_B.bvec[proc_control_node_B.i1_j] =
          (proc_control_node_B.b_data_g[proc_control_node_B.b_size_h4[0] *
           proc_control_node_B.i1_j] +
           proc_control_node_B.e_data_o2[proc_control_node_B.e_size_a[0] *
           proc_control_node_B.i1_j]) +
          proc_control_node_B.e_data_gf[proc_control_node_B.tmp_size_kg[0] *
          proc_control_node_B.i1_j];
      }
    }
  }

  bb[0] = wi[0];
  aa[6] = e[0] * dtheta;
  bb[6] = proc_control_node_B.bvec[0];
  aa[0] = wi[0] * dt;
  proc_control_node_B.e_bp = proc_control_node_B.bvec[0] * dt;
  aa[3] = proc_control_node_B.e_bp - 3.0 * aa[6];
  bb[3] = ((proc_control_node_B.e_bp - 3.0 * aa[6]) * 2.0 + 2.0 * aa[0]) / dt;
  cc[0] = ((2.0 * aa[0] + 2.0 * aa[3]) / dt + 2.0 * wi[0]) / dt;
  cc[3] = (2.0 * proc_control_node_B.bvec[0] + bb[3]) / dt;
  dd[0] = (cc[0] + cc[3]) / dt;
  bb[1] = wi[1];
  aa[7] = e[1] * dtheta;
  bb[7] = proc_control_node_B.bvec[1];
  aa[1] = wi[1] * dt;
  proc_control_node_B.e_bp = proc_control_node_B.bvec[1] * dt;
  aa[4] = proc_control_node_B.e_bp - 3.0 * aa[7];
  bb[4] = ((proc_control_node_B.e_bp - 3.0 * aa[7]) * 2.0 + 2.0 * aa[1]) / dt;
  cc[1] = ((2.0 * aa[1] + 2.0 * aa[4]) / dt + 2.0 * wi[1]) / dt;
  cc[4] = (2.0 * proc_control_node_B.bvec[1] + bb[4]) / dt;
  dd[1] = (cc[1] + cc[4]) / dt;
  bb[2] = wi[2];
  aa[8] = e[2] * dtheta;
  bb[8] = proc_control_node_B.bvec[2];
  aa[2] = wi[2] * dt;
  proc_control_node_B.e_bp = proc_control_node_B.bvec[2] * dt;
  aa[5] = proc_control_node_B.e_bp - 3.0 * aa[8];
  bb[5] = ((proc_control_node_B.e_bp - 3.0 * aa[8]) * 2.0 + 2.0 * aa[2]) / dt;
  cc[2] = ((2.0 * aa[2] + 2.0 * aa[5]) / dt + 2.0 * wi[2]) / dt;
  cc[5] = (2.0 * proc_control_node_B.bvec[2] + bb[5]) / dt;
  dd[2] = (cc[2] + cc[5]) / dt;
  if (dt <= 0.0) {
    proc_control_node_B.i1_j = 1;
    ii_size_idx_1 = 1;
  } else {
    proc_control_node_B.i1_j = 0;
    ii_size_idx_1 = 0;
  }

  ii_size_idx_1 *= proc_control_node_B.i1_j;
  for (proc_control_node_B.i1_j = 0; proc_control_node_B.i1_j < 3;
       proc_control_node_B.i1_j++) {
    for (b0_size = 0; b0_size < 3; b0_size++) {
      if (0 <= ii_size_idx_1 - 1) {
        aa[b0_size + 3 * proc_control_node_B.i1_j] = 0.0;
      }

      if (0 <= ii_size_idx_1 - 1) {
        bb[b0_size + 3 * proc_control_node_B.i1_j] = 0.0;
      }
    }
  }

  for (proc_control_node_B.i1_j = 0; proc_control_node_B.i1_j < 2;
       proc_control_node_B.i1_j++) {
    if (0 <= ii_size_idx_1 - 1) {
      for (b0_size = 0; b0_size < 3; b0_size++) {
        cc[b0_size + 3 * proc_control_node_B.i1_j] = 0.0;
      }
    }
  }

  if (0 <= ii_size_idx_1 - 1) {
    for (proc_control_node_B.i1_j = 0; proc_control_node_B.i1_j < 3;
         proc_control_node_B.i1_j++) {
      dd[proc_control_node_B.i1_j] = 0.0;
    }
  }
}

static void proc_control_node_bsxdiv(const real_T x_data[], const int32_T
  x_size[2], const real_T y_data[], const int32_T y_size[2], real_T z_data[],
  int32_T z_size[2])
{
  int32_T y;
  if (y_size[0] == 1) {
    z_size[0] = x_size[0];
    y = x_size[0];
  } else {
    z_size[0] = 0;
    y = 0;
  }

  z_size[1] = 3;
  if (y != 0) {
    for (y = 0; y < 3; y++) {
      z_data[z_size[0] * y] = x_data[x_size[0] * y] / y_data[0];
    }
  }
}

static void proc_control_node_sum(const real_T x_data[], const int32_T x_size[2],
  real_T y_data[], int32_T *y_size)
{
  int32_T b_xj;
  int32_T k;
  if (x_size[0] == 0) {
    *y_size = 0;
  } else {
    *y_size = 1;
    y_data[0] = x_data[0];
    for (k = 0; k < 2; k++) {
      for (b_xj = 0; b_xj < 1; b_xj++) {
        y_data[0] += x_data[k + 1];
      }
    }
  }
}

static void proc_control_node_angDeriv(const real_T ang_data[], const int32_T
  ang_size[2], const real_T th1_data[], const int32_T th1_size[2], const real_T
  th2_data[], const real_T th3_data[], const real_T u_data[], const int32_T
  u_size[2], real_T angVel_data[], int32_T angVel_size[2], real_T angAcc_data[],
  int32_T angAcc_size[2], real_T angJerk_data[], int32_T angJerk_size[2])
{
  int32_T n_size;
  int32_T nx_tmp;
  nx_tmp = ang_size[0] * ang_size[1];
  if (0 <= nx_tmp - 1) {
    proc_control_node_B.ca_data_idx_0 = ang_data[0];
  }

  proc_control_node_B.nx_nd = ang_size[0] * ang_size[1] - 1;
  for (proc_control_node_B.i1_d = 0; proc_control_node_B.i1_d <=
       proc_control_node_B.nx_nd; proc_control_node_B.i1_d++) {
    proc_control_node_B.ca_data_idx_0 = cos(proc_control_node_B.ca_data_idx_0);
  }

  proc_control_node_B.sa_size[0] = ang_size[0];
  proc_control_node_B.sa_size[1] = ang_size[1];
  if (0 <= nx_tmp - 1) {
    proc_control_node_B.sa_data = ang_data[0];
  }

  proc_control_node_B.nx_nd = ang_size[0] * ang_size[1] - 1;
  for (proc_control_node_B.i1_d = 0; proc_control_node_B.i1_d <=
       proc_control_node_B.nx_nd; proc_control_node_B.i1_d++) {
    proc_control_node_B.sa_data = sin(proc_control_node_B.sa_data);
  }

  proc_control_node_cross(u_data, u_size, th1_data,
    proc_control_node_B.tmp_data_cm, proc_control_node_B.tmp_size_a);
  proc_control_node_bsxdiv(proc_control_node_B.tmp_data_cm,
    proc_control_node_B.tmp_size_a, ang_data, ang_size,
    proc_control_node_B.w_data, proc_control_node_B.w_size);
  proc_control_node_cross(proc_control_node_B.w_data, proc_control_node_B.w_size,
    u_data, proc_control_node_B.udot_data, proc_control_node_B.udot_size);
  proc_control_node_B.thd1_size = u_size[0];
  proc_control_node_B.nx_nd = u_size[0];
  proc_control_node_B.i1_d = 0;
  for (proc_control_node_B.j_g = 0; proc_control_node_B.j_g <
       proc_control_node_B.nx_nd; proc_control_node_B.j_g++) {
    proc_control_node_B.i1_d++;
    proc_control_node_B.thd1_tmp = (proc_control_node_B.i1_d +
      proc_control_node_B.nx_nd) - 1;
    proc_control_node_B.thd1_tmp_f = ((proc_control_node_B.nx_nd << 1) +
      proc_control_node_B.i1_d) - 1;
    proc_control_node_B.thd1_data = (u_data[proc_control_node_B.i1_d - 1] *
      th1_data[proc_control_node_B.i1_d - 1] +
      u_data[proc_control_node_B.thd1_tmp] *
      th1_data[proc_control_node_B.thd1_tmp]) +
      u_data[proc_control_node_B.thd1_tmp_f] *
      th1_data[proc_control_node_B.thd1_tmp_f];
  }

  proc_control_node_bsxmul(&proc_control_node_B.thd1_data,
    &proc_control_node_B.thd1_size, u_data, u_size, proc_control_node_B.wd2_data,
    proc_control_node_B.wd2_size);
  proc_control_node_bsxmul_b(&proc_control_node_B.sa_data,
    proc_control_node_B.sa_size, proc_control_node_B.udot_data,
    proc_control_node_B.udot_size, angVel_data, angVel_size);
  proc_control_node_B.ca_size[0] = ang_size[0];
  proc_control_node_B.ca_size[1] = ang_size[1];
  if (0 <= ang_size[0] * ang_size[1] - 1) {
    proc_control_node_B.ca_data = 1.0 - proc_control_node_B.ca_data_idx_0;
  }

  proc_control_node_bsxmul_b(&proc_control_node_B.ca_data,
    proc_control_node_B.ca_size, proc_control_node_B.w_data,
    proc_control_node_B.w_size, proc_control_node_B.w_data_o,
    proc_control_node_B.w_size_d);
  nx_tmp = proc_control_node_B.wd2_size[0] * 3;
  angVel_size[0] = proc_control_node_B.wd2_size[0];
  angVel_size[1] = 3;
  for (proc_control_node_B.thd1_tmp = 0; proc_control_node_B.thd1_tmp < nx_tmp;
       proc_control_node_B.thd1_tmp++) {
    angVel_data[proc_control_node_B.thd1_tmp] =
      (proc_control_node_B.wd2_data[proc_control_node_B.thd1_tmp] +
       angVel_data[proc_control_node_B.thd1_tmp]) -
      proc_control_node_B.w_data_o[proc_control_node_B.thd1_tmp];
  }

  proc_control_node_B.thd2_size = proc_control_node_B.udot_size[0];
  proc_control_node_B.nx_nd = proc_control_node_B.udot_size[0];
  proc_control_node_B.i1_d = 0;
  for (proc_control_node_B.j_g = 0; proc_control_node_B.j_g <
       proc_control_node_B.nx_nd; proc_control_node_B.j_g++) {
    proc_control_node_B.i1_d++;
    proc_control_node_B.thd1_tmp = (proc_control_node_B.i1_d +
      proc_control_node_B.nx_nd) - 1;
    proc_control_node_B.thd1_tmp_f = ((proc_control_node_B.nx_nd << 1) +
      proc_control_node_B.i1_d) - 1;
    proc_control_node_B.thd2_data =
      (proc_control_node_B.udot_data[proc_control_node_B.i1_d - 1] *
       th1_data[proc_control_node_B.i1_d - 1] +
       proc_control_node_B.udot_data[proc_control_node_B.thd1_tmp] *
       th1_data[proc_control_node_B.thd1_tmp]) +
      proc_control_node_B.udot_data[proc_control_node_B.thd1_tmp_f] *
      th1_data[proc_control_node_B.thd1_tmp_f];
  }

  proc_control_node_B.nx_nd = u_size[0];
  proc_control_node_B.i1_d = 0;
  for (proc_control_node_B.j_g = 0; proc_control_node_B.j_g <
       proc_control_node_B.nx_nd; proc_control_node_B.j_g++) {
    proc_control_node_B.i1_d++;
    proc_control_node_B.thd1_tmp = (proc_control_node_B.i1_d +
      proc_control_node_B.nx_nd) - 1;
    proc_control_node_B.thd1_tmp_f = ((proc_control_node_B.nx_nd << 1) +
      proc_control_node_B.i1_d) - 1;
    proc_control_node_B.w2_data = (u_data[proc_control_node_B.i1_d - 1] *
      th2_data[proc_control_node_B.i1_d - 1] +
      u_data[proc_control_node_B.thd1_tmp] *
      th2_data[proc_control_node_B.thd1_tmp]) +
      u_data[proc_control_node_B.thd1_tmp_f] *
      th2_data[proc_control_node_B.thd1_tmp_f];
  }

  proc_control_node_B.nx_nd = proc_control_node_B.udot_size[0];
  for (proc_control_node_B.i1_d = 0; proc_control_node_B.i1_d <
       proc_control_node_B.nx_nd; proc_control_node_B.i1_d++) {
    proc_control_node_B.thd2_data += proc_control_node_B.w2_data;
  }

  proc_control_node_cross(u_data, u_size, th2_data, proc_control_node_B.w_data_o,
    proc_control_node_B.w_size_d);
  n_size = u_size[0];
  if (0 <= u_size[0] - 1) {
    proc_control_node_B.ca_data = 2.0 * proc_control_node_B.thd1_data;
  }

  proc_control_node_bsxmul(&proc_control_node_B.ca_data, &n_size,
    proc_control_node_B.w_data, proc_control_node_B.w_size,
    proc_control_node_B.tmp_data_cm, proc_control_node_B.tmp_size_a);
  proc_control_node_B.tmp_size_c[0] = proc_control_node_B.w_size_d[0];
  proc_control_node_B.tmp_size_c[1] = 3;
  proc_control_node_B.i1_d = proc_control_node_B.w_size_d[0] * 3;
  for (proc_control_node_B.j_g = 0; proc_control_node_B.j_g <
       proc_control_node_B.i1_d; proc_control_node_B.j_g++) {
    proc_control_node_B.tmp_data_py[proc_control_node_B.j_g] =
      proc_control_node_B.w_data_o[proc_control_node_B.j_g] -
      proc_control_node_B.tmp_data_cm[proc_control_node_B.j_g];
  }

  proc_control_node_bsxdiv(proc_control_node_B.tmp_data_py,
    proc_control_node_B.tmp_size_c, ang_data, ang_size,
    proc_control_node_B.wd1_data, proc_control_node_B.wd1_size);
  proc_control_node_cross(proc_control_node_B.wd1_data,
    proc_control_node_B.wd1_size, u_data, proc_control_node_B.wd1xu_data,
    proc_control_node_B.wd1xu_size);
  proc_control_node_B.thd1_tmp = proc_control_node_B.w_size[0] * 3;
  for (proc_control_node_B.j_g = 0; proc_control_node_B.j_g < nx_tmp;
       proc_control_node_B.j_g++) {
    proc_control_node_B.temp0_data[proc_control_node_B.j_g] =
      proc_control_node_B.wd2_data[proc_control_node_B.j_g] -
      proc_control_node_B.w_data[proc_control_node_B.j_g];
  }

  proc_control_node_bsxmul(&proc_control_node_B.thd2_data,
    &proc_control_node_B.thd2_size, u_data, u_size,
    proc_control_node_B.angAcc_tmp_data, proc_control_node_B.tmp_size_c);
  proc_control_node_bsxmul(&proc_control_node_B.thd1_data,
    &proc_control_node_B.thd1_size, proc_control_node_B.udot_data,
    proc_control_node_B.udot_size, proc_control_node_B.angAcc_tmp_data_l,
    proc_control_node_B.tmp_size_a);
  proc_control_node_bsxmul_b(&proc_control_node_B.sa_data,
    proc_control_node_B.sa_size, proc_control_node_B.wd1xu_data,
    proc_control_node_B.wd1xu_size, angAcc_data, angAcc_size);
  proc_control_node_B.ca_size[0] = ang_size[0];
  proc_control_node_B.ca_size[1] = ang_size[1];
  if (0 <= ang_size[0] * ang_size[1] - 1) {
    proc_control_node_B.ca_data = 1.0 - proc_control_node_B.ca_data_idx_0;
  }

  proc_control_node_bsxmul_b(&proc_control_node_B.ca_data,
    proc_control_node_B.ca_size, proc_control_node_B.wd1_data,
    proc_control_node_B.wd1_size, proc_control_node_B.w_data_o,
    proc_control_node_B.w_size_d);
  proc_control_node_cross(angVel_data, angVel_size,
    proc_control_node_B.temp0_data, proc_control_node_B.tmp_data_cm,
    proc_control_node_B.tmp_size_a);
  nx_tmp = proc_control_node_B.tmp_size_c[0] * 3;
  angAcc_size[0] = proc_control_node_B.tmp_size_c[0];
  angAcc_size[1] = 3;
  for (proc_control_node_B.i1_d = 0; proc_control_node_B.i1_d < nx_tmp;
       proc_control_node_B.i1_d++) {
    angAcc_data[proc_control_node_B.i1_d] =
      (((proc_control_node_B.angAcc_tmp_data[proc_control_node_B.i1_d] +
         angAcc_data[proc_control_node_B.i1_d]) -
        proc_control_node_B.w_data_o[proc_control_node_B.i1_d]) +
       proc_control_node_B.angAcc_tmp_data_l[proc_control_node_B.i1_d]) +
      proc_control_node_B.tmp_data_cm[proc_control_node_B.i1_d];
  }

  proc_control_node_B.w_size_d[0] = proc_control_node_B.w_size[0];
  proc_control_node_B.w_size_d[1] = 3;
  for (proc_control_node_B.i1_d = 0; proc_control_node_B.i1_d <
       proc_control_node_B.thd1_tmp; proc_control_node_B.i1_d++) {
    proc_control_node_B.w_data_o[proc_control_node_B.i1_d] =
      proc_control_node_B.w_data[proc_control_node_B.i1_d] *
      proc_control_node_B.w_data[proc_control_node_B.i1_d];
  }

  proc_control_node_sum(proc_control_node_B.w_data_o,
                        proc_control_node_B.w_size_d,
                        &proc_control_node_B.w2_data,
                        &proc_control_node_B.thd2_size);
  proc_control_node_B.nx_nd = u_size[0];
  proc_control_node_B.i1_d = 0;
  for (proc_control_node_B.j_g = 0; proc_control_node_B.j_g <
       proc_control_node_B.nx_nd; proc_control_node_B.j_g++) {
    proc_control_node_B.i1_d++;
    proc_control_node_B.thd1_tmp = (proc_control_node_B.i1_d +
      proc_control_node_B.nx_nd) - 1;
    proc_control_node_B.thd1_tmp_f = ((proc_control_node_B.nx_nd << 1) +
      proc_control_node_B.i1_d) - 1;
    proc_control_node_B.m_data_idx_0 = (u_data[proc_control_node_B.i1_d - 1] *
      th1_data[proc_control_node_B.i1_d - 1] +
      u_data[proc_control_node_B.thd1_tmp] *
      th1_data[proc_control_node_B.thd1_tmp]) +
      u_data[proc_control_node_B.thd1_tmp_f] *
      th1_data[proc_control_node_B.thd1_tmp_f];
  }

  proc_control_node_B.nx_nd = proc_control_node_B.wd1xu_size[0];
  proc_control_node_B.i1_d = 0;
  for (proc_control_node_B.j_g = 0; proc_control_node_B.j_g <
       proc_control_node_B.nx_nd; proc_control_node_B.j_g++) {
    proc_control_node_B.i1_d++;
    proc_control_node_B.thd1_tmp = (proc_control_node_B.i1_d +
      proc_control_node_B.nx_nd) - 1;
    proc_control_node_B.thd1_tmp_f = ((proc_control_node_B.nx_nd << 1) +
      proc_control_node_B.i1_d) - 1;
    proc_control_node_B.n_data_idx_0 =
      (proc_control_node_B.wd1xu_data[proc_control_node_B.i1_d - 1] *
       th1_data[proc_control_node_B.i1_d - 1] +
       proc_control_node_B.wd1xu_data[proc_control_node_B.thd1_tmp] *
       th1_data[proc_control_node_B.thd1_tmp]) +
      proc_control_node_B.wd1xu_data[proc_control_node_B.thd1_tmp_f] *
      th1_data[proc_control_node_B.thd1_tmp_f];
  }

  proc_control_node_B.nx_nd = proc_control_node_B.udot_size[0];
  proc_control_node_B.i1_d = 0;
  for (proc_control_node_B.j_g = 0; proc_control_node_B.j_g <
       proc_control_node_B.nx_nd; proc_control_node_B.j_g++) {
    proc_control_node_B.i1_d++;
    proc_control_node_B.thd1_tmp = (proc_control_node_B.i1_d +
      proc_control_node_B.nx_nd) - 1;
    proc_control_node_B.thd1_tmp_f = ((proc_control_node_B.nx_nd << 1) +
      proc_control_node_B.i1_d) - 1;
    proc_control_node_B.c_data_idx_0 =
      (proc_control_node_B.udot_data[proc_control_node_B.i1_d - 1] *
       th2_data[proc_control_node_B.i1_d - 1] +
       proc_control_node_B.udot_data[proc_control_node_B.thd1_tmp] *
       th2_data[proc_control_node_B.thd1_tmp]) +
      proc_control_node_B.udot_data[proc_control_node_B.thd1_tmp_f] *
      th2_data[proc_control_node_B.thd1_tmp_f];
  }

  proc_control_node_B.nx_nd = u_size[0];
  proc_control_node_B.i1_d = 0;
  for (proc_control_node_B.j_g = 0; proc_control_node_B.j_g <
       proc_control_node_B.nx_nd; proc_control_node_B.j_g++) {
    proc_control_node_B.i1_d++;
    proc_control_node_B.thd1_tmp = (proc_control_node_B.i1_d +
      proc_control_node_B.nx_nd) - 1;
    proc_control_node_B.thd1_tmp_f = ((proc_control_node_B.nx_nd << 1) +
      proc_control_node_B.i1_d) - 1;
    proc_control_node_B.q_data_idx_0 = (u_data[proc_control_node_B.i1_d - 1] *
      th3_data[proc_control_node_B.i1_d - 1] +
      u_data[proc_control_node_B.thd1_tmp] *
      th3_data[proc_control_node_B.thd1_tmp]) +
      u_data[proc_control_node_B.thd1_tmp_f] *
      th3_data[proc_control_node_B.thd1_tmp_f];
  }

  proc_control_node_B.nx_nd = u_size[0];
  proc_control_node_B.i1_d = 0;
  for (proc_control_node_B.j_g = 0; proc_control_node_B.j_g <
       proc_control_node_B.nx_nd; proc_control_node_B.j_g++) {
    proc_control_node_B.i1_d++;
    proc_control_node_B.thd1_tmp = (proc_control_node_B.i1_d +
      proc_control_node_B.nx_nd) - 1;
    proc_control_node_B.thd1_tmp_f = ((proc_control_node_B.nx_nd << 1) +
      proc_control_node_B.i1_d) - 1;
    proc_control_node_B.ut2_data_idx_0 = (u_data[proc_control_node_B.i1_d - 1] *
      th2_data[proc_control_node_B.i1_d - 1] +
      u_data[proc_control_node_B.thd1_tmp] *
      th2_data[proc_control_node_B.thd1_tmp]) +
      u_data[proc_control_node_B.thd1_tmp_f] *
      th2_data[proc_control_node_B.thd1_tmp_f];
  }

  proc_control_node_B.nx_nd = proc_control_node_B.w_size[0];
  proc_control_node_B.i1_d = 0;
  for (proc_control_node_B.j_g = 0; proc_control_node_B.j_g <
       proc_control_node_B.nx_nd; proc_control_node_B.j_g++) {
    proc_control_node_B.i1_d++;
    proc_control_node_B.thd1_tmp = (proc_control_node_B.i1_d +
      proc_control_node_B.nx_nd) - 1;
    proc_control_node_B.thd1_tmp_f = ((proc_control_node_B.nx_nd << 1) +
      proc_control_node_B.i1_d) - 1;
    proc_control_node_B.wwd_data_idx_0 =
      (proc_control_node_B.w_data[proc_control_node_B.i1_d - 1] *
       proc_control_node_B.wd1_data[proc_control_node_B.i1_d - 1] +
       proc_control_node_B.w_data[proc_control_node_B.thd1_tmp] *
       proc_control_node_B.wd1_data[proc_control_node_B.thd1_tmp]) +
      proc_control_node_B.w_data[proc_control_node_B.thd1_tmp_f] *
      proc_control_node_B.wd1_data[proc_control_node_B.thd1_tmp_f];
  }

  proc_control_node_cross(th1_data, th1_size, th2_data,
    proc_control_node_B.tmp_data_py, proc_control_node_B.tmp_size_c);
  proc_control_node_bsxdiv(proc_control_node_B.tmp_data_py,
    proc_control_node_B.tmp_size_c, ang_data, ang_size,
    proc_control_node_B.tmp_data_cm, proc_control_node_B.tmp_size_a);
  proc_control_node_cross(u_data, u_size, th3_data, proc_control_node_B.w_data_o,
    proc_control_node_B.w_size_d);
  proc_control_node_B.wd2_size[0] = th1_size[0];
  proc_control_node_B.wd2_size[1] = 3;
  proc_control_node_B.nx_nd = th1_size[0] * 3;
  for (proc_control_node_B.i1_d = 0; proc_control_node_B.i1_d <
       proc_control_node_B.nx_nd; proc_control_node_B.i1_d++) {
    proc_control_node_B.wd2_data[proc_control_node_B.i1_d] =
      th1_data[proc_control_node_B.i1_d] * th1_data[proc_control_node_B.i1_d];
  }

  proc_control_node_sum(proc_control_node_B.wd2_data,
                        proc_control_node_B.wd2_size,
                        &proc_control_node_B.ca_data, &n_size);
  if (0 <= n_size - 1) {
    proc_control_node_B.ca_data = (proc_control_node_B.ca_data / ang_data[0] +
      proc_control_node_B.ut2_data_idx_0) * 2.0;
  }

  proc_control_node_bsxmul(&proc_control_node_B.ca_data, &n_size,
    proc_control_node_B.w_data, proc_control_node_B.w_size,
    proc_control_node_B.tmp_data_py, proc_control_node_B.tmp_size_c);
  n_size = u_size[0];
  if (0 <= u_size[0] - 1) {
    proc_control_node_B.ca_data = 4.0 * proc_control_node_B.thd1_data;
  }

  proc_control_node_bsxmul(&proc_control_node_B.ca_data, &n_size,
    proc_control_node_B.wd1_data, proc_control_node_B.wd1_size,
    proc_control_node_B.tmp_data_o5, proc_control_node_B.tmp_size_c);
  proc_control_node_B.tmp_size_p[0] = proc_control_node_B.tmp_size_a[0];
  proc_control_node_B.tmp_size_p[1] = 3;
  proc_control_node_B.i1_d = proc_control_node_B.tmp_size_a[0] * 3;
  for (proc_control_node_B.j_g = 0; proc_control_node_B.j_g <
       proc_control_node_B.i1_d; proc_control_node_B.j_g++) {
    proc_control_node_B.w_data[proc_control_node_B.j_g] =
      ((proc_control_node_B.tmp_data_cm[proc_control_node_B.j_g] +
        proc_control_node_B.w_data_o[proc_control_node_B.j_g]) -
       proc_control_node_B.tmp_data_py[proc_control_node_B.j_g]) -
      proc_control_node_B.tmp_data_o5[proc_control_node_B.j_g];
  }

  proc_control_node_bsxdiv(proc_control_node_B.w_data,
    proc_control_node_B.tmp_size_p, ang_data, ang_size,
    proc_control_node_B.wd2_data, proc_control_node_B.wd2_size);
  n_size = proc_control_node_B.wd1xu_size[0];
  if (0 <= proc_control_node_B.wd1xu_size[0] - 1) {
    proc_control_node_B.ca_data = ((proc_control_node_B.n_data_idx_0 -
      proc_control_node_B.w2_data * proc_control_node_B.m_data_idx_0) + 2.0 *
      proc_control_node_B.c_data_idx_0) + proc_control_node_B.q_data_idx_0;
  }

  proc_control_node_bsxmul(&proc_control_node_B.ca_data, &n_size, u_data, u_size,
    angJerk_data, angJerk_size);
  proc_control_node_cross(proc_control_node_B.wd2_data,
    proc_control_node_B.wd2_size, u_data, proc_control_node_B.tmp_data_py,
    proc_control_node_B.tmp_size_c);
  proc_control_node_bsxmul_b(&proc_control_node_B.sa_data,
    proc_control_node_B.sa_size, proc_control_node_B.tmp_data_py,
    proc_control_node_B.tmp_size_c, proc_control_node_B.tmp_data_cm,
    proc_control_node_B.tmp_size_a);
  proc_control_node_B.ca_size[0] = ang_size[0];
  proc_control_node_B.ca_size[1] = ang_size[1];
  if (0 <= ang_size[0] * ang_size[1] - 1) {
    proc_control_node_B.ca_data = 1.0 - proc_control_node_B.ca_data_idx_0;
  }

  proc_control_node_bsxmul_b(&proc_control_node_B.ca_data,
    proc_control_node_B.ca_size, proc_control_node_B.wd2_data,
    proc_control_node_B.wd2_size, proc_control_node_B.w_data_o,
    proc_control_node_B.w_size_d);
  n_size = proc_control_node_B.udot_size[0];
  if (0 <= proc_control_node_B.udot_size[0] - 1) {
    proc_control_node_B.ca_data = 2.0 * proc_control_node_B.thd2_data;
  }

  proc_control_node_bsxmul(&proc_control_node_B.ca_data, &n_size,
    proc_control_node_B.udot_data, proc_control_node_B.udot_size,
    proc_control_node_B.tmp_data_py, proc_control_node_B.tmp_size_c);
  proc_control_node_B.ca_size[0] = ang_size[0];
  proc_control_node_B.ca_size[1] = ang_size[1];
  if (0 <= ang_size[0] * ang_size[1] - 1) {
    proc_control_node_B.ca_data = proc_control_node_B.ca_data_idx_0 + 1.0;
  }

  proc_control_node_bsxmul_b(&proc_control_node_B.ca_data,
    proc_control_node_B.ca_size, proc_control_node_B.wd1xu_data,
    proc_control_node_B.wd1xu_size, proc_control_node_B.tmp_data_o5,
    proc_control_node_B.tmp_size_c);
  proc_control_node_bsxmul(&proc_control_node_B.w2_data,
    &proc_control_node_B.thd2_size, u_data, u_size, proc_control_node_B.wd2_data,
    proc_control_node_B.wd2_size);
  proc_control_node_bsxmul_b(&proc_control_node_B.sa_data,
    proc_control_node_B.sa_size, proc_control_node_B.wd1_data,
    proc_control_node_B.wd1_size, proc_control_node_B.udot_data,
    proc_control_node_B.udot_size);
  proc_control_node_B.tmp_size_p[0] = proc_control_node_B.tmp_size_c[0];
  proc_control_node_B.tmp_size_p[1] = 3;
  proc_control_node_B.i1_d = proc_control_node_B.tmp_size_c[0] * 3;
  for (proc_control_node_B.j_g = 0; proc_control_node_B.j_g <
       proc_control_node_B.i1_d; proc_control_node_B.j_g++) {
    proc_control_node_B.w_data[proc_control_node_B.j_g] =
      (proc_control_node_B.tmp_data_o5[proc_control_node_B.j_g] -
       proc_control_node_B.wd2_data[proc_control_node_B.j_g]) -
      proc_control_node_B.udot_data[proc_control_node_B.j_g];
  }

  proc_control_node_bsxmul(&proc_control_node_B.thd1_data,
    &proc_control_node_B.thd1_size, proc_control_node_B.w_data,
    proc_control_node_B.tmp_size_p, proc_control_node_B.tmp_data_o5,
    proc_control_node_B.tmp_size_c);
  proc_control_node_B.thd1_size = proc_control_node_B.w_size[0];
  if (0 <= proc_control_node_B.w_size[0] - 1) {
    proc_control_node_B.thd1_data = proc_control_node_B.sa_data *
      proc_control_node_B.wwd_data_idx_0;
  }

  proc_control_node_bsxmul(&proc_control_node_B.thd1_data,
    &proc_control_node_B.thd1_size, u_data, u_size, proc_control_node_B.wd2_data,
    proc_control_node_B.wd2_size);
  for (proc_control_node_B.i1_d = 0; proc_control_node_B.i1_d < nx_tmp;
       proc_control_node_B.i1_d++) {
    proc_control_node_B.w_data[proc_control_node_B.i1_d] =
      (proc_control_node_B.angAcc_tmp_data[proc_control_node_B.i1_d] +
       proc_control_node_B.angAcc_tmp_data_l[proc_control_node_B.i1_d]) -
      proc_control_node_B.wd1_data[proc_control_node_B.i1_d];
  }

  proc_control_node_cross(angVel_data, angVel_size, proc_control_node_B.w_data,
    proc_control_node_B.udot_data, proc_control_node_B.udot_size);
  proc_control_node_cross(angAcc_data, angAcc_size,
    proc_control_node_B.temp0_data, proc_control_node_B.w_data,
    proc_control_node_B.w_size);
  proc_control_node_B.nx_nd = angJerk_size[0] * 3;
  angJerk_size[1] = 3;
  for (proc_control_node_B.i1_d = 0; proc_control_node_B.i1_d <
       proc_control_node_B.nx_nd; proc_control_node_B.i1_d++) {
    angJerk_data[proc_control_node_B.i1_d] =
      ((((((angJerk_data[proc_control_node_B.i1_d] +
            proc_control_node_B.tmp_data_cm[proc_control_node_B.i1_d]) -
           proc_control_node_B.w_data_o[proc_control_node_B.i1_d]) +
          proc_control_node_B.tmp_data_py[proc_control_node_B.i1_d]) +
         proc_control_node_B.tmp_data_o5[proc_control_node_B.i1_d]) -
        proc_control_node_B.wd2_data[proc_control_node_B.i1_d]) +
       proc_control_node_B.udot_data[proc_control_node_B.i1_d]) +
      proc_control_node_B.w_data[proc_control_node_B.i1_d];
  }
}

static void proc_control_node_slew3(real_T t, real_T dt, real_T qi_a, real_T
  qi_b, real_T qi_c, real_T qi_d, const real_T a[9], const real_T b[9], const
  real_T c[6], const real_T d[3], real_T *q_a, real_T *q_b, real_T *q_c, real_T *
  q_d, real_T angVel[3], real_T angAcc[3], real_T angJerk[3])
{
  *q_a = 0.0;
  *q_b = 0.0;
  *q_c = 0.0;
  *q_d = 0.0;
  angVel[0] = 0.0;
  angAcc[0] = 0.0;
  angJerk[0] = 0.0;
  angVel[1] = 0.0;
  angAcc[1] = 0.0;
  angJerk[1] = 0.0;
  angVel[2] = 0.0;
  angAcc[2] = 0.0;
  angJerk[2] = 0.0;
  if (!(dt <= 0.0)) {
    proc_control_node_B.x_ld = t / dt;
    proc_control_node_B.x2 = (proc_control_node_B.x_ld - 1.0) *
      (proc_control_node_B.x_ld - 1.0);
    proc_control_node_B.th0_idx_0 = (((proc_control_node_B.x_ld - 1.0) * a[3] +
      a[6] * proc_control_node_B.x_ld) * proc_control_node_B.x_ld +
      proc_control_node_B.x2 * a[0]) * proc_control_node_B.x_ld;
    proc_control_node_B.angVel_tmp = ((proc_control_node_B.x_ld - 1.0) * b[3] +
      b[6] * proc_control_node_B.x_ld) * proc_control_node_B.x_ld +
      proc_control_node_B.x2 * b[0];
    angVel[0] = proc_control_node_B.angVel_tmp;
    angAcc[0] = (proc_control_node_B.x_ld - 1.0) * c[0] + c[3] *
      proc_control_node_B.x_ld;
    proc_control_node_B.th0_idx_1 = (((proc_control_node_B.x_ld - 1.0) * a[4] +
      a[7] * proc_control_node_B.x_ld) * proc_control_node_B.x_ld +
      proc_control_node_B.x2 * a[1]) * proc_control_node_B.x_ld;
    proc_control_node_B.angVel_tmp_i = ((proc_control_node_B.x_ld - 1.0) * b[4]
      + b[7] * proc_control_node_B.x_ld) * proc_control_node_B.x_ld +
      proc_control_node_B.x2 * b[1];
    angVel[1] = proc_control_node_B.angVel_tmp_i;
    angAcc[1] = (proc_control_node_B.x_ld - 1.0) * c[1] + c[4] *
      proc_control_node_B.x_ld;
    proc_control_node_B.th0_idx_2 = (((proc_control_node_B.x_ld - 1.0) * a[5] +
      a[8] * proc_control_node_B.x_ld) * proc_control_node_B.x_ld +
      proc_control_node_B.x2 * a[2]) * proc_control_node_B.x_ld;
    proc_control_node_B.x2 = ((proc_control_node_B.x_ld - 1.0) * b[5] + b[8] *
      proc_control_node_B.x_ld) * proc_control_node_B.x_ld +
      proc_control_node_B.x2 * b[2];
    angVel[2] = proc_control_node_B.x2;
    angAcc[2] = (proc_control_node_B.x_ld - 1.0) * c[2] + c[5] *
      proc_control_node_B.x_ld;
    proc_control_node_B.x_ld = 1.0;
    proc_control_node_B.absxk_lc = 0.0;
    proc_control_node_B.t_ob = 0.0;
    proc_control_node_B.b_qd = 0.0;
    proc_control_node_B.theta = sqrt((proc_control_node_rt_powd_snf
      (proc_control_node_B.th0_idx_0, 2.0) + proc_control_node_rt_powd_snf
      (proc_control_node_B.th0_idx_1, 2.0)) + proc_control_node_rt_powd_snf
      (proc_control_node_B.th0_idx_2, 2.0));
    proc_control_node_B.st = sin(proc_control_node_B.theta / 2.0);
    if (proc_control_node_B.theta != 0.0) {
      proc_control_node_B.x_ld = cos(proc_control_node_B.theta / 2.0);
      proc_control_node_B.absxk_lc = proc_control_node_B.th0_idx_0 /
        proc_control_node_B.theta * proc_control_node_B.st;
      proc_control_node_B.t_ob = proc_control_node_B.th0_idx_1 /
        proc_control_node_B.theta * proc_control_node_B.st;
      proc_control_node_B.b_qd = proc_control_node_B.th0_idx_2 /
        proc_control_node_B.theta * proc_control_node_B.st;
    }

    *q_a = ((qi_a * proc_control_node_B.x_ld - qi_b *
             proc_control_node_B.absxk_lc) - qi_c * proc_control_node_B.t_ob) -
      qi_d * proc_control_node_B.b_qd;
    *q_b = ((qi_a * proc_control_node_B.absxk_lc + qi_b *
             proc_control_node_B.x_ld) + qi_c * proc_control_node_B.b_qd) - qi_d
      * proc_control_node_B.t_ob;
    *q_c = ((qi_a * proc_control_node_B.t_ob - qi_b * proc_control_node_B.b_qd)
            + qi_c * proc_control_node_B.x_ld) + qi_d *
      proc_control_node_B.absxk_lc;
    *q_d = ((qi_a * proc_control_node_B.b_qd + qi_b * proc_control_node_B.t_ob)
            - qi_c * proc_control_node_B.absxk_lc) + qi_d *
      proc_control_node_B.x_ld;
    proc_control_node_B.x_ld = 3.3121686421112381E-170;
    proc_control_node_B.absxk_lc = fabs(proc_control_node_B.th0_idx_0);
    if (proc_control_node_B.absxk_lc > 3.3121686421112381E-170) {
      proc_control_node_B.b_qd = 1.0;
      proc_control_node_B.x_ld = proc_control_node_B.absxk_lc;
    } else {
      proc_control_node_B.t_ob = proc_control_node_B.absxk_lc /
        3.3121686421112381E-170;
      proc_control_node_B.b_qd = proc_control_node_B.t_ob *
        proc_control_node_B.t_ob;
    }

    proc_control_node_B.absxk_lc = fabs(proc_control_node_B.th0_idx_1);
    if (proc_control_node_B.absxk_lc > proc_control_node_B.x_ld) {
      proc_control_node_B.t_ob = proc_control_node_B.x_ld /
        proc_control_node_B.absxk_lc;
      proc_control_node_B.b_qd = proc_control_node_B.b_qd *
        proc_control_node_B.t_ob * proc_control_node_B.t_ob + 1.0;
      proc_control_node_B.x_ld = proc_control_node_B.absxk_lc;
    } else {
      proc_control_node_B.t_ob = proc_control_node_B.absxk_lc /
        proc_control_node_B.x_ld;
      proc_control_node_B.b_qd += proc_control_node_B.t_ob *
        proc_control_node_B.t_ob;
    }

    proc_control_node_B.absxk_lc = fabs(proc_control_node_B.th0_idx_2);
    if (proc_control_node_B.absxk_lc > proc_control_node_B.x_ld) {
      proc_control_node_B.t_ob = proc_control_node_B.x_ld /
        proc_control_node_B.absxk_lc;
      proc_control_node_B.b_qd = proc_control_node_B.b_qd *
        proc_control_node_B.t_ob * proc_control_node_B.t_ob + 1.0;
      proc_control_node_B.x_ld = proc_control_node_B.absxk_lc;
    } else {
      proc_control_node_B.t_ob = proc_control_node_B.absxk_lc /
        proc_control_node_B.x_ld;
      proc_control_node_B.b_qd += proc_control_node_B.t_ob *
        proc_control_node_B.t_ob;
    }

    proc_control_node_B.b_qd = proc_control_node_B.x_ld * sqrt
      (proc_control_node_B.b_qd);
    proc_control_node_B.qimag[0] = proc_control_node_B.th0_idx_0 /
      proc_control_node_B.b_qd;
    proc_control_node_B.qimag[1] = proc_control_node_B.th0_idx_1 /
      proc_control_node_B.b_qd;
    proc_control_node_B.qimag[2] = proc_control_node_B.th0_idx_2 /
      proc_control_node_B.b_qd;
    if (proc_control_node_B.b_qd <= 0.0) {
      proc_control_node_B.ii_size_idx_0_n = 1;
      proc_control_node_B.ii_size_idx_1_a = 1;
    } else {
      proc_control_node_B.ii_size_idx_0_n = 0;
      proc_control_node_B.ii_size_idx_1_a = 0;
    }

    if ((proc_control_node_B.ii_size_idx_0_n == 0) ||
        (proc_control_node_B.ii_size_idx_1_a == 0)) {
      proc_control_node_B.ii_size_idx_0_n = 0;
    } else {
      proc_control_node_B.ii_size_idx_0_n = 1;
    }

    if (0 <= proc_control_node_B.ii_size_idx_0_n - 1) {
      for (proc_control_node_B.ii_size_idx_0_n = 0;
           proc_control_node_B.ii_size_idx_0_n < 3;
           proc_control_node_B.ii_size_idx_0_n++) {
        proc_control_node_B.qimag[proc_control_node_B.ii_size_idx_0_n] = 0.0;
      }
    }

    angJerk[0] = d[0] - (proc_control_node_B.angVel_tmp_i * angAcc[2] - angAcc[1]
                         * proc_control_node_B.x2) * 0.5;
    angJerk[1] = d[1] - (angAcc[0] * proc_control_node_B.x2 -
                         proc_control_node_B.angVel_tmp * angAcc[2]) * 0.5;
    angJerk[2] = d[2] - (proc_control_node_B.angVel_tmp * angAcc[1] - angAcc[0] *
                         proc_control_node_B.angVel_tmp_i) * 0.5;
    if (proc_control_node_B.b_qd > 1.0E-6) {
      proc_control_node_B.ii_size_idx_0_n = 1;
      proc_control_node_B.ii_size_idx_1_a = 1;
    } else {
      proc_control_node_B.ii_size_idx_0_n = 0;
      proc_control_node_B.ii_size_idx_1_a = 0;
    }

    if ((proc_control_node_B.ii_size_idx_0_n != 0) &&
        (proc_control_node_B.ii_size_idx_1_a != 0)) {
      proc_control_node_B.ang_size[0] = 1;
      proc_control_node_B.ang_size[1] = 1;
      proc_control_node_B.ang_data = proc_control_node_B.b_qd;
      proc_control_node_B.angVel_size[0] = 1;
      proc_control_node_B.angVel_size[1] = 3;
      proc_control_node_B.qimag_size[0] = 1;
      proc_control_node_B.qimag_size[1] = 3;
      for (proc_control_node_B.ii_size_idx_0_n = 0;
           proc_control_node_B.ii_size_idx_0_n < 3;
           proc_control_node_B.ii_size_idx_0_n++) {
        proc_control_node_B.angVel_data[proc_control_node_B.ii_size_idx_0_n] =
          angVel[proc_control_node_B.ii_size_idx_0_n];
        proc_control_node_B.angAcc_data[proc_control_node_B.ii_size_idx_0_n] =
          angAcc[proc_control_node_B.ii_size_idx_0_n];
        proc_control_node_B.d_data_iz[proc_control_node_B.ii_size_idx_0_n] =
          d[proc_control_node_B.ii_size_idx_0_n];
        proc_control_node_B.qimag_data[proc_control_node_B.ii_size_idx_0_n] =
          proc_control_node_B.qimag[proc_control_node_B.ii_size_idx_0_n];
      }

      proc_control_node_angDeriv(&proc_control_node_B.ang_data,
        proc_control_node_B.ang_size, proc_control_node_B.angVel_data,
        proc_control_node_B.angVel_size, proc_control_node_B.angAcc_data,
        proc_control_node_B.d_data_iz, proc_control_node_B.qimag_data,
        proc_control_node_B.qimag_size, proc_control_node_B.qimag,
        proc_control_node_B.e_size, proc_control_node_B.f_data_i,
        proc_control_node_B.f_size, proc_control_node_B.g_data,
        proc_control_node_B.g_size);
      proc_control_node_B.ii_size_idx_1_a = proc_control_node_B.e_size[0];
      proc_control_node_B.loop_ub_b2 = proc_control_node_B.f_size[0];
      proc_control_node_B.loop_ub_lv = proc_control_node_B.g_size[0];
      for (proc_control_node_B.ii_size_idx_0_n = 0;
           proc_control_node_B.ii_size_idx_0_n < 3;
           proc_control_node_B.ii_size_idx_0_n++) {
        if (0 <= proc_control_node_B.ii_size_idx_1_a - 1) {
          angVel[proc_control_node_B.ii_size_idx_0_n] =
            proc_control_node_B.qimag[proc_control_node_B.e_size[0] *
            proc_control_node_B.ii_size_idx_0_n];
        }

        if (0 <= proc_control_node_B.loop_ub_b2 - 1) {
          angAcc[proc_control_node_B.ii_size_idx_0_n] =
            proc_control_node_B.f_data_i[proc_control_node_B.f_size[0] *
            proc_control_node_B.ii_size_idx_0_n];
        }

        if (0 <= proc_control_node_B.loop_ub_lv - 1) {
          angJerk[proc_control_node_B.ii_size_idx_0_n] =
            proc_control_node_B.g_data[proc_control_node_B.g_size[0] *
            proc_control_node_B.ii_size_idx_0_n];
        }
      }
    }
  }
}

static void proc_cont_quaternionBase_rotmat(real_T q_a, real_T q_b, real_T q_c,
  real_T q_d, real_T r[9])
{
  real_T aasq;
  real_T n;
  n = sqrt(((q_a * q_a + q_b * q_b) + q_c * q_c) + q_d * q_d);
  q_a /= n;
  q_b /= n;
  q_c /= n;
  q_d /= n;
  n = q_a * q_b * 2.0;
  proc_control_node_B.ac2_d = q_a * q_c * 2.0;
  proc_control_node_B.ad2_m = q_a * q_d * 2.0;
  proc_control_node_B.bc2_i = q_b * q_c * 2.0;
  proc_control_node_B.bd2_j = q_b * q_d * 2.0;
  proc_control_node_B.cd2_p = q_c * q_d * 2.0;
  aasq = q_a * q_a * 2.0 - 1.0;
  r[0] = q_b * q_b * 2.0 + aasq;
  r[3] = proc_control_node_B.bc2_i + proc_control_node_B.ad2_m;
  r[6] = proc_control_node_B.bd2_j - proc_control_node_B.ac2_d;
  r[1] = proc_control_node_B.bc2_i - proc_control_node_B.ad2_m;
  r[4] = q_c * q_c * 2.0 + aasq;
  r[7] = proc_control_node_B.cd2_p + n;
  r[2] = proc_control_node_B.bd2_j + proc_control_node_B.ac2_d;
  r[5] = proc_control_node_B.cd2_p - n;
  r[8] = q_d * q_d * 2.0 + aasq;
}

static void proc_contr_SystemCore_step_b4nw(waypointTrajectory_proc_contr_T *obj,
  real_T varargout_1[3], real_T *varargout_2_a, real_T *varargout_2_b, real_T
  *varargout_2_c, real_T *varargout_2_d, real_T varargout_3[3], real_T
  varargout_4[3], real_T varargout_5[3])
{
  if (obj->isInitialized != 1) {
    obj->isInitialized = 1;
    obj->CurrentTime = 0.0;
    proc_waypointTrajectory_setPose(obj);
    obj->IsDoneStatus = false;
    obj->CurrentTime = 0.0;
    proc_waypointTrajectory_setPose(obj);
    obj->IsDoneStatus = false;
  }

  proc_control_node_B.t_m = obj->CurrentTime;
  proc_control_node_B.dt = 1.0 / obj->SampleRate;
  if (obj->isInitialized != 1) {
    obj->isInitialized = 1;
    obj->CurrentTime = 0.0;
    proc_waypointTrajectory_setPose(obj);
    obj->IsDoneStatus = false;
    obj->CurrentTime = 0.0;
    proc_waypointTrajectory_setPose(obj);
    obj->IsDoneStatus = false;
  }

  if (!obj->IsDoneStatus) {
    proc_control_node_B.t_m += proc_control_node_B.dt;
    if ((obj->TimeOfArrival[0] <= proc_control_node_B.t_m) &&
        (proc_control_node_B.t_m <= obj->TimeOfArrival[20])) {
      waypointTrajectory_fetchPosit_b(obj, proc_control_node_B.t_m, varargout_1,
        varargout_3, varargout_4, proc_control_node_B.jerk);
      proc_control_node_B.b_hk = proc_control__mapElementsToBins
        (proc_control_node_B.t_m, obj->TimeOfArrival);
      proc_control_node_B.jerk[0] = obj->AxesOfRotation[static_cast<int32_T>
        (proc_control_node_B.b_hk) - 1];
      proc_control_node_B.obj_b[0] = obj->RadianAngularVelocities
        [static_cast<int32_T>(proc_control_node_B.b_hk) - 1];
      proc_control_node_B.obj_an[0] = obj->RadianAngularVelocities
        [static_cast<int32_T>(proc_control_node_B.b_hk + 1.0) - 1];
      proc_control_node_B.jerk[1] = obj->AxesOfRotation[static_cast<int32_T>
        (proc_control_node_B.b_hk) + 19];
      proc_control_node_B.obj_b[1] = obj->RadianAngularVelocities
        [static_cast<int32_T>(proc_control_node_B.b_hk) + 20];
      proc_control_node_B.obj_an[1] = obj->RadianAngularVelocities
        [static_cast<int32_T>(proc_control_node_B.b_hk + 1.0) + 20];
      proc_control_node_B.jerk[2] = obj->AxesOfRotation[static_cast<int32_T>
        (proc_control_node_B.b_hk) + 39];
      proc_control_node_B.obj_b[2] = obj->RadianAngularVelocities
        [static_cast<int32_T>(proc_control_node_B.b_hk) + 41];
      proc_control_node_B.obj_an[2] = obj->RadianAngularVelocities
        [static_cast<int32_T>(proc_control_node_B.b_hk + 1.0) + 41];
      proc_control_node_slew3_init(obj->SegmentTimes[static_cast<int32_T>
        (proc_control_node_B.b_hk) - 1], obj->RadianSlewAngles
        [static_cast<int32_T>(proc_control_node_B.b_hk) - 1],
        proc_control_node_B.jerk, proc_control_node_B.obj_b,
        proc_control_node_B.obj_an, proc_control_node_B.A_n,
        proc_control_node_B.B, proc_control_node_B.C, proc_control_node_B.D);
      proc_control_node_slew3(proc_control_node_B.t_m - obj->TimeOfArrival[
        static_cast<int32_T>(proc_control_node_B.b_hk) - 1], obj->SegmentTimes[
        static_cast<int32_T>(proc_control_node_B.b_hk) - 1], obj->Quaternions.a[
        static_cast<int32_T>(proc_control_node_B.b_hk) - 1], obj->Quaternions.b[
        static_cast<int32_T>(proc_control_node_B.b_hk) - 1], obj->Quaternions.c[
        static_cast<int32_T>(proc_control_node_B.b_hk) - 1], obj->Quaternions.d[
        static_cast<int32_T>(proc_control_node_B.b_hk) - 1],
        proc_control_node_B.A_n, proc_control_node_B.B, proc_control_node_B.C,
        proc_control_node_B.D, varargout_2_a, varargout_2_b, varargout_2_c,
        varargout_2_d, proc_control_node_B.jerk, proc_control_node_B.obj_b,
        proc_control_node_B.obj_an);
      proc_cont_quaternionBase_rotmat(*varargout_2_a, *varargout_2_b,
        *varargout_2_c, *varargout_2_d, proc_control_node_B.A_n);
      for (proc_control_node_B.i12 = 0; proc_control_node_B.i12 < 3;
           proc_control_node_B.i12++) {
        varargout_5[proc_control_node_B.i12] = proc_control_node_B.A_n[3 *
          proc_control_node_B.i12 + 2] * proc_control_node_B.jerk[2] +
          (proc_control_node_B.A_n[3 * proc_control_node_B.i12 + 1] *
           proc_control_node_B.jerk[1] + proc_control_node_B.A_n[3 *
           proc_control_node_B.i12] * proc_control_node_B.jerk[0]);
      }
    } else {
      *varargout_2_a = (rtNaN);
      *varargout_2_b = (rtNaN);
      *varargout_2_c = (rtNaN);
      *varargout_2_d = (rtNaN);
      varargout_1[0] = (rtNaN);
      varargout_3[0] = (rtNaN);
      varargout_5[0] = (rtNaN);
      varargout_4[0] = (rtNaN);
      varargout_1[1] = (rtNaN);
      varargout_3[1] = (rtNaN);
      varargout_5[1] = (rtNaN);
      varargout_4[1] = (rtNaN);
      varargout_1[2] = (rtNaN);
      varargout_3[2] = (rtNaN);
      varargout_5[2] = (rtNaN);
      varargout_4[2] = (rtNaN);
      if (proc_control_node_B.t_m > obj->TimeOfArrival[20]) {
        obj->IsDoneStatus = true;
      }
    }

    if (obj->isInitialized != 1) {
      obj->isInitialized = 1;
      obj->CurrentTime = 0.0;
      proc_waypointTrajectory_setPose(obj);
      obj->IsDoneStatus = false;
      obj->CurrentTime = 0.0;
      proc_waypointTrajectory_setPose(obj);
      obj->IsDoneStatus = false;
    }

    if (!obj->IsDoneStatus) {
      obj->CurrentTime = proc_control_node_B.t_m;
      if (proc_control_node_B.t_m + proc_control_node_B.dt > obj->PathDuration)
      {
        obj->IsDoneStatus = true;
      }
    }
  } else {
    *varargout_2_a = (rtNaN);
    *varargout_2_b = (rtNaN);
    *varargout_2_c = (rtNaN);
    *varargout_2_d = (rtNaN);
    varargout_1[0] = (rtNaN);
    varargout_3[0] = (rtNaN);
    varargout_5[0] = (rtNaN);
    varargout_4[0] = (rtNaN);
    varargout_1[1] = (rtNaN);
    varargout_3[1] = (rtNaN);
    varargout_5[1] = (rtNaN);
    varargout_4[1] = (rtNaN);
    varargout_1[2] = (rtNaN);
    varargout_3[2] = (rtNaN);
    varargout_5[2] = (rtNaN);
    varargout_4[2] = (rtNaN);
  }
}

static void pr_TrajectoryGenerator_stepImpl(TrajectoryGenerator_proc_cont_T
  *b_this, const real_T wpts[160], real_T wpt_count, real_T pose[13000], real_T
  b_new[2])
{
  //  Implement algorithm. Calculate y as a function of input u and
  //  discrete states.
  //  Initialiser les tableau
  for (proc_control_node_B.i_b4 = 0; proc_control_node_B.i_b4 < 8;
       proc_control_node_B.i_b4++) {
    proc_control_node_B.List[21 * proc_control_node_B.i_b4] = wpts[20 *
      proc_control_node_B.i_b4];
  }

  for (proc_control_node_B.i_b4 = 0; proc_control_node_B.i_b4 < 8;
       proc_control_node_B.i_b4++) {
    memcpy(&proc_control_node_B.List[proc_control_node_B.i_b4 * 21 + 1],
           &wpts[proc_control_node_B.i_b4 * 20], 20U * sizeof(real_T));
  }

  //  Remplire les tablau avec le dernier waypoint
  proc_control_node_B.b_i4 = static_cast<int32_T>((1.0 - wpt_count) + 21.0) - 1;
  for (proc_control_node_B.b_i_d = 0; proc_control_node_B.b_i_d <=
       proc_control_node_B.b_i4; proc_control_node_B.b_i_d++) {
    proc_control_node_B.wpt_count = static_cast<int32_T>(wpt_count +
      static_cast<real_T>(proc_control_node_B.b_i_d));
    for (proc_control_node_B.i_b4 = 0; proc_control_node_B.i_b4 < 8;
         proc_control_node_B.i_b4++) {
      proc_control_node_B.List_n[proc_control_node_B.i_b4] =
        proc_control_node_B.List[(21 * proc_control_node_B.i_b4 +
        static_cast<int32_T>(wpt_count)) - 1];
    }

    for (proc_control_node_B.i_b4 = 0; proc_control_node_B.i_b4 < 8;
         proc_control_node_B.i_b4++) {
      proc_control_node_B.List[(proc_control_node_B.wpt_count + 21 *
        proc_control_node_B.i_b4) - 1] =
        proc_control_node_B.List_n[proc_control_node_B.i_b4];
    }
  }

  //  wpts(1:wpt_count-1,1:3);
  //  Gestion des vitesses et des accélérations.
  //  Génération d'un vecteur de temps
  memset(&proc_control_node_B.tpts[0], 0, 21U * sizeof(real_T));
  proc_control_node_B.b_i4 = static_cast<int32_T>(wpt_count + -1.0) - 1;
  for (proc_control_node_B.i_b4 = 0; proc_control_node_B.i_b4 <=
       proc_control_node_B.b_i4; proc_control_node_B.i_b4++) {
    proc_control_node_B.maxTime = b_this->Ts;
    for (proc_control_node_B.b_i_d = 0; proc_control_node_B.b_i_d < 7;
         proc_control_node_B.b_i_d++) {
      proc_control_node_B.dist = fabs(proc_control_node_B.List[(21 *
        proc_control_node_B.b_i_d + proc_control_node_B.i_b4) + 1] -
        proc_control_node_B.List[(static_cast<int32_T>((static_cast<real_T>
        (proc_control_node_B.i_b4) + 2.0) - 1.0) + 21 *
        proc_control_node_B.b_i_d) - 1]);
      if (proc_control_node_B.dist > 0.0) {
        proc_control_node_B.dist = b_this->
          avanceRapide[proc_control_node_B.b_i_d] / b_this->
          accRapide[proc_control_node_B.b_i_d] * 2.0 + proc_control_node_B.dist /
          b_this->avanceRapide[proc_control_node_B.b_i_d];
      } else {
        proc_control_node_B.dist = 0.0;
      }

      if (proc_control_node_B.dist > proc_control_node_B.maxTime) {
        proc_control_node_B.maxTime = proc_control_node_B.dist;
      }
    }

    proc_control_node_B.tpts[proc_control_node_B.i_b4 + 1] =
      proc_control_node_B.tpts[static_cast<int32_T>((static_cast<real_T>
      (proc_control_node_B.i_b4) + 2.0) - 1.0) - 1] +
      proc_control_node_B.maxTime;
  }

  proc_control_node_B.b_i_d = static_cast<int32_T>((1.0 - (wpt_count + 1.0)) +
    21.0) - 1;
  for (proc_control_node_B.i_b4 = 0; proc_control_node_B.i_b4 <=
       proc_control_node_B.b_i_d; proc_control_node_B.i_b4++) {
    proc_control_node_B.maxTime = (wpt_count + 1.0) + static_cast<real_T>
      (proc_control_node_B.i_b4);
    proc_control_node_B.tpts[static_cast<int32_T>(proc_control_node_B.maxTime) -
      1] = proc_control_node_B.tpts[static_cast<int32_T>
      (proc_control_node_B.maxTime - 1.0) - 1] + b_this->Ts;
  }

  waypointTrajectory_waypointTraj(&proc_control_node_B.trajectory,
    &proc_control_node_B.List[0], proc_control_node_B.tpts, 1.0 / b_this->Ts, &(*
    (real_T (*)[84])&proc_control_node_B.List[63])[0], &(*(real_T (*)[84])&
    proc_control_node_B.List[63])[21], &(*(real_T (*)[84])&
    proc_control_node_B.List[63])[42], &(*(real_T (*)[84])&
    proc_control_node_B.List[63])[63]);
  for (proc_control_node_B.i_b4 = 0; proc_control_node_B.i_b4 < 13000;
       proc_control_node_B.i_b4++) {
    pose[proc_control_node_B.i_b4] = 999.0;
  }

  //  while ~isDone(trajectory)
  proc_control_node_B.nbpts = 1U;
  proc_control_node_B.b_i_d = static_cast<int32_T>(floor
    (proc_control_node_B.tpts[static_cast<int32_T>(wpt_count) - 1] / b_this->Ts))
    - 1;
  for (proc_control_node_B.i_b4 = 0; proc_control_node_B.i_b4 <=
       proc_control_node_B.b_i_d; proc_control_node_B.i_b4++) {
    proc_contr_SystemCore_step_b4nw(&proc_control_node_B.trajectory,
      proc_control_node_B.b_varargout_1_m, &pose[proc_control_node_B.i_b4 + 3000],
      &proc_control_node_B.maxTime, &proc_control_node_B.dist,
      &proc_control_node_B.b_varargout_2_d, proc_control_node_B.b_varargout_3,
      proc_control_node_B.b_varargout_4, proc_control_node_B.b_varargout_5);

    // , bufferVelocity, bufferAcc, bufferAngRate
    pose[proc_control_node_B.i_b4 + 4000] = proc_control_node_B.maxTime;
    pose[proc_control_node_B.i_b4 + 5000] = proc_control_node_B.dist;
    pose[proc_control_node_B.i_b4 + 6000] = proc_control_node_B.b_varargout_2_d;
    pose[proc_control_node_B.i_b4] = proc_control_node_B.b_varargout_1_m[0];
    pose[proc_control_node_B.i_b4 + 7000] = proc_control_node_B.b_varargout_3[0];
    pose[proc_control_node_B.i_b4 + 10000] = proc_control_node_B.b_varargout_5[0];
    pose[proc_control_node_B.i_b4 + 1000] = proc_control_node_B.b_varargout_1_m
      [1];
    pose[proc_control_node_B.i_b4 + 8000] = proc_control_node_B.b_varargout_3[1];
    pose[proc_control_node_B.i_b4 + 11000] = proc_control_node_B.b_varargout_5[1];
    pose[proc_control_node_B.i_b4 + 2000] = proc_control_node_B.b_varargout_1_m
      [2];
    pose[proc_control_node_B.i_b4 + 9000] = proc_control_node_B.b_varargout_3[2];
    pose[proc_control_node_B.i_b4 + 12000] = proc_control_node_B.b_varargout_5[2];
    proc_control_node_B.nbpts = proc_control_node_B.i_b4 + 1U;
  }

  b_this->computeCount++;
  b_new[0] = b_this->computeCount;
  b_new[1] = proc_control_node_B.nbpts;
}

static void proc_contro_SystemCore_step_b4n(TrajectoryGenerator_proc_cont_T *obj,
  const real_T varargin_1[160], real_T varargin_2, real_T varargout_1[13000],
  real_T varargout_2[2])
{
  pr_TrajectoryGenerator_stepImpl(obj, varargin_1, varargin_2, varargout_1,
    varargout_2);
}

static void proc_contr_quaternionBase_slerp(real_T q1_a, real_T q1_b, real_T
  q1_c, real_T q1_d, real_T q2_a, real_T q2_b, real_T q2_c, real_T q2_d, real_T
  t, real_T *qo_a, real_T *qo_b, real_T *qo_c, real_T *qo_d)
{
  real_T b_x;
  real_T n;
  n = sqrt(((q1_a * q1_a + q1_b * q1_b) + q1_c * q1_c) + q1_d * q1_d);
  proc_control_node_B.q1n_a = q1_a / n;
  proc_control_node_B.q1n_b = q1_b / n;
  proc_control_node_B.q1n_c = q1_c / n;
  proc_control_node_B.q1n_d = q1_d / n;
  n = sqrt(((q2_a * q2_a + q2_b * q2_b) + q2_c * q2_c) + q2_d * q2_d);
  proc_control_node_B.q2n_a = q2_a / n;
  proc_control_node_B.q2n_b_j = q2_b / n;
  proc_control_node_B.q2n_c_b = q2_c / n;
  n = q2_d / n;
  proc_control_node_B.dp_n = ((proc_control_node_B.q1n_a *
    proc_control_node_B.q2n_a + proc_control_node_B.q1n_b *
    proc_control_node_B.q2n_b_j) + proc_control_node_B.q1n_c *
    proc_control_node_B.q2n_c_b) + proc_control_node_B.q1n_d * n;
  if (proc_control_node_B.dp_n < 0.0) {
    proc_control_node_B.q2n_a = -proc_control_node_B.q2n_a;
    proc_control_node_B.q2n_b_j = -proc_control_node_B.q2n_b_j;
    proc_control_node_B.q2n_c_b = -proc_control_node_B.q2n_c_b;
    n = -n;
    proc_control_node_B.dp_n = -proc_control_node_B.dp_n;
  }

  if (proc_control_node_B.dp_n > 1.0) {
    proc_control_node_B.dp_n = 1.0;
  }

  proc_control_node_B.theta0_d = acos(proc_control_node_B.dp_n);
  proc_control_node_B.dp_n = 1.0 / sin(proc_control_node_B.theta0_d);
  b_x = sin((1.0 - t) * proc_control_node_B.theta0_d);
  proc_control_node_B.theta0_d = sin(t * proc_control_node_B.theta0_d);
  *qo_a = (b_x * proc_control_node_B.q1n_a + proc_control_node_B.theta0_d *
           proc_control_node_B.q2n_a) * proc_control_node_B.dp_n;
  *qo_b = (b_x * proc_control_node_B.q1n_b + proc_control_node_B.theta0_d *
           proc_control_node_B.q2n_b_j) * proc_control_node_B.dp_n;
  *qo_c = (b_x * proc_control_node_B.q1n_c + proc_control_node_B.theta0_d *
           proc_control_node_B.q2n_c_b) * proc_control_node_B.dp_n;
  *qo_d = (b_x * proc_control_node_B.q1n_d + proc_control_node_B.theta0_d * n) *
    proc_control_node_B.dp_n;
  if (rtIsInf(proc_control_node_B.dp_n)) {
    *qo_a = proc_control_node_B.q1n_a;
    *qo_b = proc_control_node_B.q1n_b;
    *qo_c = proc_control_node_B.q1n_c;
    *qo_d = proc_control_node_B.q1n_d;
  }

  n = sqrt(((*qo_a * *qo_a + *qo_b * *qo_b) + *qo_c * *qo_c) + *qo_d * *qo_d);
  *qo_a /= n;
  *qo_b /= n;
  *qo_c /= n;
  *qo_d /= n;
}

static void proc_control_quaternionBase_log(real_T q_a, real_T q_b, real_T q_c,
  real_T q_d, real_T *b_q_a, real_T *b_q_b, real_T *b_q_c, real_T *b_q_d)
{
  int32_T c_i;
  int32_T nx;
  int32_T vscale_size_idx_1;
  proc_control_node_B.vnorm = sqrt((q_b * q_b + q_c * q_c) + q_d * q_d);
  proc_control_node_B.qnorm = sqrt(q_a * q_a + proc_control_node_B.vnorm *
    proc_control_node_B.vnorm);
  nx = 0;
  if (proc_control_node_B.vnorm != 0.0) {
    for (c_i = 0; c_i < 1; c_i++) {
      nx++;
    }
  }

  vscale_size_idx_1 = nx;
  nx--;
  for (c_i = 0; c_i <= nx; c_i++) {
    proc_control_node_B.vscale_data = q_a / proc_control_node_B.qnorm;
  }

  if (0 <= vscale_size_idx_1 - 1) {
    proc_control_node_B.x_data_i = proc_control_node_B.vscale_data;
  }

  nx = vscale_size_idx_1 - 1;
  for (c_i = 0; c_i <= nx; c_i++) {
    proc_control_node_B.x_data_i = acos(proc_control_node_B.x_data_i);
  }

  if (0 <= vscale_size_idx_1 - 1) {
    proc_control_node_B.vscale_data = proc_control_node_B.x_data_i /
      proc_control_node_B.vnorm;
  }

  if (0 <= vscale_size_idx_1 - 1) {
    proc_control_node_B.x_data_i = q_b * proc_control_node_B.vscale_data;
  }

  *b_q_d = q_b;
  if (proc_control_node_B.vnorm != 0.0) {
    for (c_i = 0; c_i < 1; c_i++) {
      *b_q_d = proc_control_node_B.x_data_i;
    }
  }

  *b_q_b = *b_q_d;
  if (!(proc_control_node_B.vnorm != 0.0)) {
    *b_q_b = 0.0;
  }

  if (0 <= vscale_size_idx_1 - 1) {
    proc_control_node_B.x_data_i = q_c * proc_control_node_B.vscale_data;
  }

  *b_q_d = q_c;
  if (proc_control_node_B.vnorm != 0.0) {
    for (c_i = 0; c_i < 1; c_i++) {
      *b_q_d = proc_control_node_B.x_data_i;
    }
  }

  *b_q_c = *b_q_d;
  if (!(proc_control_node_B.vnorm != 0.0)) {
    *b_q_c = 0.0;
  }

  if (0 <= vscale_size_idx_1 - 1) {
    proc_control_node_B.x_data_i = q_d * proc_control_node_B.vscale_data;
  }

  *b_q_d = q_d;
  if (proc_control_node_B.vnorm != 0.0) {
    for (c_i = 0; c_i < 1; c_i++) {
      *b_q_d = proc_control_node_B.x_data_i;
    }
  }

  if (!(proc_control_node_B.vnorm != 0.0)) {
    *b_q_d = 0.0;
  }

  *b_q_a = log(proc_control_node_B.qnorm);
}

static void proc_cont_SystemCore_step_b4nwk(robotics_slcore_internal_bl_b_T *obj,
  real_T varargin_1, const real_T varargin_2[4], const real_T varargin_3[4],
  const real_T varargin_4[2], real_T varargout_1[4], real_T varargout_2[3],
  real_T varargout_3[3])
{
  if (obj->TunablePropsChanged) {
    obj->TunablePropsChanged = false;
  }

  proc_control_node_B.linearScaling = 1.0 / (varargin_4[1] - varargin_4[0]);
  proc_control_node_B.b_idx_0 = (varargin_1 - varargin_4[0]) *
    proc_control_node_B.linearScaling;
  if (varargin_1 < varargin_4[0]) {
    proc_control_node_B.b_idx_0 = 0.0;
  }

  if (varargin_1 > varargin_4[1]) {
    proc_control_node_B.b_idx_0 = 1.0;
  }

  if (varargin_1 < varargin_4[0]) {
    proc_control_node_B.linearScaling = 0.0;
  }

  proc_control_node_B.e_idx_0 = proc_control_node_B.linearScaling;
  if (varargin_1 > varargin_4[1]) {
    proc_control_node_B.e_idx_0 = 0.0;
  }

  proc_control_node_B.n_k = sqrt(((varargin_2[0] * varargin_2[0] + varargin_2[1]
    * varargin_2[1]) + varargin_2[2] * varargin_2[2]) + varargin_2[3] *
    varargin_2[3]);
  proc_control_node_B.pn_a = varargin_2[0] / proc_control_node_B.n_k;
  proc_control_node_B.pn_b = varargin_2[1] / proc_control_node_B.n_k;
  proc_control_node_B.pn_c = varargin_2[2] / proc_control_node_B.n_k;
  proc_control_node_B.pn_d = varargin_2[3] / proc_control_node_B.n_k;
  proc_control_node_B.n_k = sqrt(((varargin_3[0] * varargin_3[0] + varargin_3[1]
    * varargin_3[1]) + varargin_3[2] * varargin_3[2]) + varargin_3[3] *
    varargin_3[3]);
  proc_control_node_B.qn_a = varargin_3[0] / proc_control_node_B.n_k;
  proc_control_node_B.qn_b = varargin_3[1] / proc_control_node_B.n_k;
  proc_control_node_B.qn_c = varargin_3[2] / proc_control_node_B.n_k;
  proc_control_node_B.qn_d = varargin_3[3] / proc_control_node_B.n_k;
  proc_control_node_B.n_tmp = sqrt(((proc_control_node_B.pn_a *
    proc_control_node_B.pn_a + proc_control_node_B.pn_b *
    proc_control_node_B.pn_b) + proc_control_node_B.pn_c *
    proc_control_node_B.pn_c) + proc_control_node_B.pn_d *
    proc_control_node_B.pn_d);
  proc_control_node_B.q1n_a_tmp = proc_control_node_B.pn_a /
    proc_control_node_B.n_tmp;
  proc_control_node_B.q1n_b_tmp = proc_control_node_B.pn_b /
    proc_control_node_B.n_tmp;
  proc_control_node_B.q1n_c_tmp = proc_control_node_B.pn_c /
    proc_control_node_B.n_tmp;
  proc_control_node_B.q1n_d_tmp = proc_control_node_B.pn_d /
    proc_control_node_B.n_tmp;
  proc_control_node_B.n_tmp = sqrt(((proc_control_node_B.qn_a *
    proc_control_node_B.qn_a + proc_control_node_B.qn_b *
    proc_control_node_B.qn_b) + proc_control_node_B.qn_c *
    proc_control_node_B.qn_c) + proc_control_node_B.qn_d *
    proc_control_node_B.qn_d);
  proc_control_node_B.q2n_a_tmp = proc_control_node_B.qn_a /
    proc_control_node_B.n_tmp;
  proc_control_node_B.linearScaling = proc_control_node_B.q2n_a_tmp;
  proc_control_node_B.q2n_b_tmp = proc_control_node_B.qn_b /
    proc_control_node_B.n_tmp;
  proc_control_node_B.q2n_b = proc_control_node_B.q2n_b_tmp;
  proc_control_node_B.q2n_c_tmp = proc_control_node_B.qn_c /
    proc_control_node_B.n_tmp;
  proc_control_node_B.q2n_c = proc_control_node_B.q2n_c_tmp;
  proc_control_node_B.q2n_d_tmp = proc_control_node_B.qn_d /
    proc_control_node_B.n_tmp;
  proc_control_node_B.n_tmp = proc_control_node_B.q2n_d_tmp;
  proc_control_node_B.n_tmp_c = ((proc_control_node_B.q1n_a_tmp *
    proc_control_node_B.q2n_a_tmp + proc_control_node_B.q1n_b_tmp *
    proc_control_node_B.q2n_b_tmp) + proc_control_node_B.q1n_c_tmp *
    proc_control_node_B.q2n_c_tmp) + proc_control_node_B.q1n_d_tmp *
    proc_control_node_B.q2n_d_tmp;
  proc_control_node_B.n_k = proc_control_node_B.n_tmp_c;
  if (proc_control_node_B.n_tmp_c < 0.0) {
    proc_control_node_B.linearScaling = -proc_control_node_B.q2n_a_tmp;
    proc_control_node_B.q2n_b = -proc_control_node_B.q2n_b_tmp;
    proc_control_node_B.q2n_c = -proc_control_node_B.q2n_c_tmp;
    proc_control_node_B.n_tmp = -proc_control_node_B.q2n_d_tmp;
    proc_control_node_B.n_k = -proc_control_node_B.n_tmp_c;
  }

  if (proc_control_node_B.n_k > 1.0) {
    proc_control_node_B.n_k = 1.0;
  }

  proc_control_node_B.theta0 = acos(proc_control_node_B.n_k);
  proc_control_node_B.sinv_tmp = sin(proc_control_node_B.theta0);
  proc_control_node_B.n_k = 1.0 / proc_control_node_B.sinv_tmp;
  proc_control_node_B.theta0 = sin(0.0 * proc_control_node_B.theta0);
  proc_control_node_B.linearScaling = (proc_control_node_B.sinv_tmp *
    proc_control_node_B.q1n_a_tmp + proc_control_node_B.theta0 *
    proc_control_node_B.linearScaling) * proc_control_node_B.n_k;
  proc_control_node_B.q2n_b = (proc_control_node_B.sinv_tmp *
    proc_control_node_B.q1n_b_tmp + proc_control_node_B.theta0 *
    proc_control_node_B.q2n_b) * proc_control_node_B.n_k;
  proc_control_node_B.q2n_c = (proc_control_node_B.sinv_tmp *
    proc_control_node_B.q1n_c_tmp + proc_control_node_B.theta0 *
    proc_control_node_B.q2n_c) * proc_control_node_B.n_k;
  proc_control_node_B.n_tmp = (proc_control_node_B.sinv_tmp *
    proc_control_node_B.q1n_d_tmp + proc_control_node_B.theta0 *
    proc_control_node_B.n_tmp) * proc_control_node_B.n_k;
  if (rtIsInf(proc_control_node_B.n_k)) {
    proc_control_node_B.linearScaling = proc_control_node_B.q1n_a_tmp;
    proc_control_node_B.q2n_b = proc_control_node_B.q1n_b_tmp;
    proc_control_node_B.q2n_c = proc_control_node_B.q1n_c_tmp;
    proc_control_node_B.n_tmp = proc_control_node_B.q1n_d_tmp;
  }

  proc_control_node_B.n_k = sqrt(((proc_control_node_B.linearScaling *
    proc_control_node_B.linearScaling + proc_control_node_B.q2n_b *
    proc_control_node_B.q2n_b) + proc_control_node_B.q2n_c *
    proc_control_node_B.q2n_c) + proc_control_node_B.n_tmp *
    proc_control_node_B.n_tmp);
  proc_control_node_B.linearScaling /= proc_control_node_B.n_k;
  proc_control_node_B.q2n_b /= proc_control_node_B.n_k;
  proc_control_node_B.q2n_c /= proc_control_node_B.n_k;
  proc_control_node_B.n_tmp /= proc_control_node_B.n_k;
  proc_control_node_B.n_k = proc_control_node_B.n_tmp_c;
  if (proc_control_node_B.n_tmp_c < 0.0) {
    proc_control_node_B.q2n_a_tmp = -proc_control_node_B.q2n_a_tmp;
    proc_control_node_B.q2n_b_tmp = -proc_control_node_B.q2n_b_tmp;
    proc_control_node_B.q2n_c_tmp = -proc_control_node_B.q2n_c_tmp;
    proc_control_node_B.q2n_d_tmp = -proc_control_node_B.q2n_d_tmp;
    proc_control_node_B.n_k = -proc_control_node_B.n_tmp_c;
  }

  if (proc_control_node_B.n_k > 1.0) {
    proc_control_node_B.n_k = 1.0;
  }

  proc_control_node_B.theta0 = acos(proc_control_node_B.n_k);
  proc_control_node_B.sinv_tmp = sin(proc_control_node_B.theta0);
  proc_control_node_B.n_k = 1.0 / proc_control_node_B.sinv_tmp;
  proc_control_node_B.theta0 = sin(0.0 * proc_control_node_B.theta0);
  proc_control_node_B.q2n_a_tmp = (proc_control_node_B.theta0 *
    proc_control_node_B.q1n_a_tmp + proc_control_node_B.sinv_tmp *
    proc_control_node_B.q2n_a_tmp) * proc_control_node_B.n_k;
  proc_control_node_B.q2n_b_tmp = (proc_control_node_B.theta0 *
    proc_control_node_B.q1n_b_tmp + proc_control_node_B.sinv_tmp *
    proc_control_node_B.q2n_b_tmp) * proc_control_node_B.n_k;
  proc_control_node_B.q2n_c_tmp = (proc_control_node_B.theta0 *
    proc_control_node_B.q1n_c_tmp + proc_control_node_B.sinv_tmp *
    proc_control_node_B.q2n_c_tmp) * proc_control_node_B.n_k;
  proc_control_node_B.q2n_d_tmp = (proc_control_node_B.theta0 *
    proc_control_node_B.q1n_d_tmp + proc_control_node_B.sinv_tmp *
    proc_control_node_B.q2n_d_tmp) * proc_control_node_B.n_k;
  if (rtIsInf(proc_control_node_B.n_k)) {
    proc_control_node_B.q2n_a_tmp = proc_control_node_B.q1n_a_tmp;
    proc_control_node_B.q2n_b_tmp = proc_control_node_B.q1n_b_tmp;
    proc_control_node_B.q2n_c_tmp = proc_control_node_B.q1n_c_tmp;
    proc_control_node_B.q2n_d_tmp = proc_control_node_B.q1n_d_tmp;
  }

  proc_control_node_B.n_k = sqrt(((proc_control_node_B.q2n_a_tmp *
    proc_control_node_B.q2n_a_tmp + proc_control_node_B.q2n_b_tmp *
    proc_control_node_B.q2n_b_tmp) + proc_control_node_B.q2n_c_tmp *
    proc_control_node_B.q2n_c_tmp) + proc_control_node_B.q2n_d_tmp *
    proc_control_node_B.q2n_d_tmp);
  proc_control_node_B.q2n_a_tmp /= proc_control_node_B.n_k;
  proc_control_node_B.q2n_b_tmp /= proc_control_node_B.n_k;
  proc_control_node_B.q2n_c_tmp /= proc_control_node_B.n_k;
  proc_control_node_B.q2n_d_tmp /= proc_control_node_B.n_k;
  proc_contr_quaternionBase_slerp(proc_control_node_B.pn_a,
    proc_control_node_B.pn_b, proc_control_node_B.pn_c, proc_control_node_B.pn_d,
    proc_control_node_B.qn_a, proc_control_node_B.qn_b, proc_control_node_B.qn_c,
    proc_control_node_B.qn_d, proc_control_node_B.b_idx_0,
    &proc_control_node_B.q1n_a_tmp, &proc_control_node_B.q1n_b_tmp,
    &proc_control_node_B.q1n_c_tmp, &proc_control_node_B.q1n_d_tmp);
  proc_control_quaternionBase_log(((proc_control_node_B.linearScaling *
    proc_control_node_B.q2n_a_tmp - -proc_control_node_B.q2n_b *
    proc_control_node_B.q2n_b_tmp) - -proc_control_node_B.q2n_c *
    proc_control_node_B.q2n_c_tmp) - -proc_control_node_B.n_tmp *
    proc_control_node_B.q2n_d_tmp, ((proc_control_node_B.linearScaling *
    proc_control_node_B.q2n_b_tmp + -proc_control_node_B.q2n_b *
    proc_control_node_B.q2n_a_tmp) + -proc_control_node_B.q2n_c *
    proc_control_node_B.q2n_d_tmp) - -proc_control_node_B.n_tmp *
    proc_control_node_B.q2n_c_tmp, ((proc_control_node_B.linearScaling *
    proc_control_node_B.q2n_c_tmp - -proc_control_node_B.q2n_b *
    proc_control_node_B.q2n_d_tmp) + -proc_control_node_B.q2n_c *
    proc_control_node_B.q2n_a_tmp) + -proc_control_node_B.n_tmp *
    proc_control_node_B.q2n_b_tmp, ((proc_control_node_B.linearScaling *
    proc_control_node_B.q2n_d_tmp + -proc_control_node_B.q2n_b *
    proc_control_node_B.q2n_c_tmp) - -proc_control_node_B.q2n_c *
    proc_control_node_B.q2n_b_tmp) + -proc_control_node_B.n_tmp *
    proc_control_node_B.q2n_a_tmp, &proc_control_node_B.pn_a,
    &proc_control_node_B.pn_b, &proc_control_node_B.pn_c,
    &proc_control_node_B.pn_d);
  proc_control_node_B.qn_a = (((proc_control_node_B.q1n_a_tmp *
    proc_control_node_B.pn_a - proc_control_node_B.q1n_b_tmp *
    proc_control_node_B.pn_b) - proc_control_node_B.q1n_c_tmp *
    proc_control_node_B.pn_c) - proc_control_node_B.q1n_d_tmp *
    proc_control_node_B.pn_d) * proc_control_node_B.e_idx_0 * 2.0;
  proc_control_node_B.qn_b = (((proc_control_node_B.q1n_a_tmp *
    proc_control_node_B.pn_b + proc_control_node_B.q1n_b_tmp *
    proc_control_node_B.pn_a) + proc_control_node_B.q1n_c_tmp *
    proc_control_node_B.pn_d) - proc_control_node_B.q1n_d_tmp *
    proc_control_node_B.pn_c) * proc_control_node_B.e_idx_0 * 2.0;
  proc_control_node_B.qn_c = (((proc_control_node_B.q1n_a_tmp *
    proc_control_node_B.pn_c - proc_control_node_B.q1n_b_tmp *
    proc_control_node_B.pn_d) + proc_control_node_B.q1n_c_tmp *
    proc_control_node_B.pn_a) + proc_control_node_B.q1n_d_tmp *
    proc_control_node_B.pn_b) * proc_control_node_B.e_idx_0 * 2.0;
  proc_control_node_B.pn_d = (((proc_control_node_B.q1n_a_tmp *
    proc_control_node_B.pn_d + proc_control_node_B.q1n_b_tmp *
    proc_control_node_B.pn_c) - proc_control_node_B.q1n_c_tmp *
    proc_control_node_B.pn_b) + proc_control_node_B.q1n_d_tmp *
    proc_control_node_B.pn_a) * proc_control_node_B.e_idx_0 * 2.0;
  proc_control_quaternionBase_log(((proc_control_node_B.linearScaling *
    proc_control_node_B.q2n_a_tmp - -proc_control_node_B.q2n_b *
    proc_control_node_B.q2n_b_tmp) - -proc_control_node_B.q2n_c *
    proc_control_node_B.q2n_c_tmp) - -proc_control_node_B.n_tmp *
    proc_control_node_B.q2n_d_tmp, ((proc_control_node_B.linearScaling *
    proc_control_node_B.q2n_b_tmp + -proc_control_node_B.q2n_b *
    proc_control_node_B.q2n_a_tmp) + -proc_control_node_B.q2n_c *
    proc_control_node_B.q2n_d_tmp) - -proc_control_node_B.n_tmp *
    proc_control_node_B.q2n_c_tmp, ((proc_control_node_B.linearScaling *
    proc_control_node_B.q2n_c_tmp - -proc_control_node_B.q2n_b *
    proc_control_node_B.q2n_d_tmp) + -proc_control_node_B.q2n_c *
    proc_control_node_B.q2n_a_tmp) + -proc_control_node_B.n_tmp *
    proc_control_node_B.q2n_b_tmp, ((proc_control_node_B.linearScaling *
    proc_control_node_B.q2n_d_tmp + -proc_control_node_B.q2n_b *
    proc_control_node_B.q2n_c_tmp) - -proc_control_node_B.q2n_c *
    proc_control_node_B.q2n_b_tmp) + -proc_control_node_B.n_tmp *
    proc_control_node_B.q2n_a_tmp, &proc_control_node_B.pn_a,
    &proc_control_node_B.pn_b, &proc_control_node_B.pn_c,
    &proc_control_node_B.qn_d);
  proc_control_node_B.n_k = ((proc_control_node_B.q1n_a_tmp *
    proc_control_node_B.pn_a - proc_control_node_B.q1n_b_tmp *
    proc_control_node_B.pn_b) - proc_control_node_B.q1n_c_tmp *
    proc_control_node_B.pn_c) - proc_control_node_B.q1n_d_tmp *
    proc_control_node_B.qn_d;
  proc_control_node_B.sinv_tmp = ((proc_control_node_B.q1n_a_tmp *
    proc_control_node_B.pn_b + proc_control_node_B.q1n_b_tmp *
    proc_control_node_B.pn_a) + proc_control_node_B.q1n_c_tmp *
    proc_control_node_B.qn_d) - proc_control_node_B.q1n_d_tmp *
    proc_control_node_B.pn_c;
  proc_control_node_B.theta0 = ((proc_control_node_B.q1n_a_tmp *
    proc_control_node_B.pn_c - proc_control_node_B.q1n_b_tmp *
    proc_control_node_B.qn_d) + proc_control_node_B.q1n_c_tmp *
    proc_control_node_B.pn_a) + proc_control_node_B.q1n_d_tmp *
    proc_control_node_B.pn_b;
  proc_control_node_B.b_idx_0 = ((proc_control_node_B.q1n_a_tmp *
    proc_control_node_B.qn_d + proc_control_node_B.q1n_b_tmp *
    proc_control_node_B.pn_c) - proc_control_node_B.q1n_c_tmp *
    proc_control_node_B.pn_b) + proc_control_node_B.q1n_d_tmp *
    proc_control_node_B.pn_a;
  proc_control_quaternionBase_log(((proc_control_node_B.linearScaling *
    proc_control_node_B.q2n_a_tmp - -proc_control_node_B.q2n_b *
    proc_control_node_B.q2n_b_tmp) - -proc_control_node_B.q2n_c *
    proc_control_node_B.q2n_c_tmp) - -proc_control_node_B.n_tmp *
    proc_control_node_B.q2n_d_tmp, ((proc_control_node_B.linearScaling *
    proc_control_node_B.q2n_b_tmp + -proc_control_node_B.q2n_b *
    proc_control_node_B.q2n_a_tmp) + -proc_control_node_B.q2n_c *
    proc_control_node_B.q2n_d_tmp) - -proc_control_node_B.n_tmp *
    proc_control_node_B.q2n_c_tmp, ((proc_control_node_B.linearScaling *
    proc_control_node_B.q2n_c_tmp - -proc_control_node_B.q2n_b *
    proc_control_node_B.q2n_d_tmp) + -proc_control_node_B.q2n_c *
    proc_control_node_B.q2n_a_tmp) + -proc_control_node_B.n_tmp *
    proc_control_node_B.q2n_b_tmp, ((proc_control_node_B.linearScaling *
    proc_control_node_B.q2n_d_tmp + -proc_control_node_B.q2n_b *
    proc_control_node_B.q2n_c_tmp) - -proc_control_node_B.q2n_c *
    proc_control_node_B.q2n_b_tmp) + -proc_control_node_B.n_tmp *
    proc_control_node_B.q2n_a_tmp, &proc_control_node_B.pn_a,
    &proc_control_node_B.pn_b, &proc_control_node_B.pn_c,
    &proc_control_node_B.qn_d);
  proc_control_node_B.linearScaling = (((proc_control_node_B.n_k *
    proc_control_node_B.pn_a - proc_control_node_B.sinv_tmp *
    proc_control_node_B.pn_b) - proc_control_node_B.theta0 *
    proc_control_node_B.pn_c) - proc_control_node_B.b_idx_0 *
    proc_control_node_B.qn_d) * 0.0 * 2.0;
  proc_control_node_B.q2n_b = (((proc_control_node_B.n_k *
    proc_control_node_B.pn_b + proc_control_node_B.sinv_tmp *
    proc_control_node_B.pn_a) + proc_control_node_B.theta0 *
    proc_control_node_B.qn_d) - proc_control_node_B.b_idx_0 *
    proc_control_node_B.pn_c) * 0.0 * 2.0;
  proc_control_node_B.q2n_c = (((proc_control_node_B.n_k *
    proc_control_node_B.pn_c - proc_control_node_B.sinv_tmp *
    proc_control_node_B.qn_d) + proc_control_node_B.theta0 *
    proc_control_node_B.pn_a) + proc_control_node_B.b_idx_0 *
    proc_control_node_B.pn_b) * 0.0 * 2.0;
  proc_control_node_B.qn_d = (((proc_control_node_B.n_k *
    proc_control_node_B.qn_d + proc_control_node_B.sinv_tmp *
    proc_control_node_B.pn_c) - proc_control_node_B.theta0 *
    proc_control_node_B.pn_b) + proc_control_node_B.b_idx_0 *
    proc_control_node_B.pn_a) * 0.0 * 2.0;
  varargout_1[0] = proc_control_node_B.q1n_a_tmp;
  varargout_1[1] = proc_control_node_B.q1n_b_tmp;
  varargout_1[2] = proc_control_node_B.q1n_c_tmp;
  varargout_1[3] = proc_control_node_B.q1n_d_tmp;
  varargout_2[0] = ((proc_control_node_B.qn_a * -proc_control_node_B.q1n_b_tmp +
                     proc_control_node_B.qn_b * proc_control_node_B.q1n_a_tmp) +
                    proc_control_node_B.qn_c * -proc_control_node_B.q1n_d_tmp) -
    proc_control_node_B.pn_d * -proc_control_node_B.q1n_c_tmp;
  varargout_2[1] = ((proc_control_node_B.qn_a * -proc_control_node_B.q1n_c_tmp -
                     proc_control_node_B.qn_b * -proc_control_node_B.q1n_d_tmp)
                    + proc_control_node_B.qn_c * proc_control_node_B.q1n_a_tmp)
    + proc_control_node_B.pn_d * -proc_control_node_B.q1n_b_tmp;
  varargout_2[2] = ((proc_control_node_B.qn_a * -proc_control_node_B.q1n_d_tmp +
                     proc_control_node_B.qn_b * -proc_control_node_B.q1n_c_tmp)
                    - proc_control_node_B.qn_c * -proc_control_node_B.q1n_b_tmp)
    + proc_control_node_B.pn_d * proc_control_node_B.q1n_a_tmp;
  varargout_3[0] = ((proc_control_node_B.linearScaling *
                     -proc_control_node_B.q1n_b_tmp + proc_control_node_B.q2n_b *
                     proc_control_node_B.q1n_a_tmp) + proc_control_node_B.q2n_c *
                    -proc_control_node_B.q1n_d_tmp) - proc_control_node_B.qn_d *
    -proc_control_node_B.q1n_c_tmp;
  varargout_3[1] = ((proc_control_node_B.linearScaling *
                     -proc_control_node_B.q1n_c_tmp - proc_control_node_B.q2n_b *
                     -proc_control_node_B.q1n_d_tmp) + proc_control_node_B.q2n_c
                    * proc_control_node_B.q1n_a_tmp) + proc_control_node_B.qn_d *
    -proc_control_node_B.q1n_b_tmp;
  varargout_3[2] = ((proc_control_node_B.linearScaling *
                     -proc_control_node_B.q1n_d_tmp + proc_control_node_B.q2n_b *
                     -proc_control_node_B.q1n_c_tmp) - proc_control_node_B.q2n_c
                    * -proc_control_node_B.q1n_b_tmp) + proc_control_node_B.qn_d
    * proc_control_node_B.q1n_a_tmp;
}

static void proc_control_node_ppval_b4n(const real_T pp_breaks[4], const real_T
  pp_coefs[36], const real_T x[2], real_T v[6])
{
  int32_T b_ix;
  int32_T high_i;
  int32_T low_i;
  int32_T low_ip1;
  int32_T mid_i;
  for (b_ix = 0; b_ix < 2; b_ix++) {
    proc_control_node_B.iv0 = b_ix * 3 - 1;
    if (rtIsNaN(x[b_ix])) {
      v[proc_control_node_B.iv0 + 1] = x[b_ix];
      v[proc_control_node_B.iv0 + 2] = x[b_ix];
      v[proc_control_node_B.iv0 + 3] = x[b_ix];
    } else {
      low_i = 0;
      low_ip1 = 1;
      high_i = 4;
      while (high_i > low_ip1 + 1) {
        mid_i = ((low_i + high_i) + 1) >> 1;
        if (x[b_ix] >= pp_breaks[mid_i - 1]) {
          low_i = mid_i - 1;
          low_ip1 = mid_i;
        } else {
          high_i = mid_i;
        }
      }

      low_ip1 = low_i * 3;
      proc_control_node_B.xloc = x[b_ix] - pp_breaks[low_i];
      v[proc_control_node_B.iv0 + 1] = pp_coefs[low_ip1];
      v[proc_control_node_B.iv0 + 2] = pp_coefs[low_ip1 + 1];
      v[proc_control_node_B.iv0 + 3] = pp_coefs[low_ip1 + 2];
      for (low_i = 0; low_i < 3; low_i++) {
        high_i = ((low_i + 1) * 9 + low_ip1) - 1;
        v[proc_control_node_B.iv0 + 1] = v[proc_control_node_B.iv0 + 1] *
          proc_control_node_B.xloc + pp_coefs[high_i + 1];
        v[proc_control_node_B.iv0 + 2] = v[proc_control_node_B.iv0 + 2] *
          proc_control_node_B.xloc + pp_coefs[high_i + 2];
        v[proc_control_node_B.iv0 + 3] = v[proc_control_node_B.iv0 + 3] *
          proc_control_node_B.xloc + pp_coefs[high_i + 3];
      }
    }
  }
}

static void proc_control_node_cubicpolytraj(const real_T wayPoints[6], const
  real_T timePoints[2], const real_T t[2], const real_T varargin_2[6], real_T q
  [6], real_T qd[6], real_T qdd[6], real_T pp_breaks[4], real_T pp_coefs[36])
{
  boolean_T x[2];
  boolean_T exitg1;
  memset(&proc_control_node_B.coefMat[0], 0, 12U * sizeof(real_T));
  proc_control_node_B.dt_l = timePoints[1] - timePoints[0];
  for (proc_control_node_B.idx_j = 0; proc_control_node_B.idx_j < 3;
       proc_control_node_B.idx_j++) {
    proc_control_node_B.b_coeffVec[0] = wayPoints[proc_control_node_B.idx_j];
    proc_control_node_B.b_coeffVec[1] = varargin_2[proc_control_node_B.idx_j];
    proc_control_node_B.wayPoints_idx_0 = wayPoints[proc_control_node_B.idx_j +
      3] - (proc_control_node_B.dt_l * proc_control_node_B.b_coeffVec[1] +
            proc_control_node_B.b_coeffVec[0]);
    proc_control_node_B.wayPoints_idx_1 = varargin_2[proc_control_node_B.idx_j +
      3] - (0.0 * proc_control_node_B.b_coeffVec[0] +
            proc_control_node_B.b_coeffVec[1]);
    proc_control_node_B.b_coeffVec[3] = proc_control_node_B.b_coeffVec[0];
    proc_control_node_B.coefMat_tmp = proc_control_node_B.dt_l *
      proc_control_node_B.dt_l;
    proc_control_node_B.coefMat[proc_control_node_B.idx_j] = 1.0 /
      proc_control_node_B.coefMat_tmp * proc_control_node_B.wayPoints_idx_1 +
      -2.0 / proc_control_node_rt_powd_snf(proc_control_node_B.dt_l, 3.0) *
      proc_control_node_B.wayPoints_idx_0;
    proc_control_node_B.coefMat[proc_control_node_B.idx_j + 3] = 3.0 /
      proc_control_node_B.coefMat_tmp * proc_control_node_B.wayPoints_idx_0 +
      -1.0 / proc_control_node_B.dt_l * proc_control_node_B.wayPoints_idx_1;
    proc_control_node_B.coefMat[proc_control_node_B.idx_j + 6] =
      proc_control_node_B.b_coeffVec[1];
    proc_control_node_B.coefMat[proc_control_node_B.idx_j + 9] =
      proc_control_node_B.b_coeffVec[3];
  }

  memset(&proc_control_node_B.coeffMat[0], 0, 12U * sizeof(real_T));
  for (proc_control_node_B.idx_j = 0; proc_control_node_B.idx_j < 3;
       proc_control_node_B.idx_j++) {
    proc_control_node_B.coeffMat[proc_control_node_B.idx_j + 9] = 0.0;
    proc_control_node_B.coeffMat[proc_control_node_B.idx_j + 9] +=
      proc_control_node_B.coefMat[proc_control_node_B.idx_j] * 0.0;
    proc_control_node_B.coeffMat[proc_control_node_B.idx_j + 9] +=
      proc_control_node_B.coefMat[proc_control_node_B.idx_j + 3] * 0.0;
    proc_control_node_B.coeffMat[proc_control_node_B.idx_j + 9] +=
      proc_control_node_B.coefMat[proc_control_node_B.idx_j + 6] * 0.0;
    proc_control_node_B.coeffMat[proc_control_node_B.idx_j + 9] +=
      proc_control_node_B.coefMat[proc_control_node_B.idx_j + 9];
  }

  memset(&proc_control_node_B.coefsWithFlatStart[0], 0, 24U * sizeof(real_T));
  for (proc_control_node_B.idx_j = 0; proc_control_node_B.idx_j < 4;
       proc_control_node_B.idx_j++) {
    proc_control_node_B.coefsWithFlatStart[6 * proc_control_node_B.idx_j] =
      proc_control_node_B.coeffMat[3 * proc_control_node_B.idx_j];
    proc_control_node_B.coefsWithFlatStart[6 * proc_control_node_B.idx_j + 3] =
      proc_control_node_B.coefMat[3 * proc_control_node_B.idx_j];
    proc_control_node_B.coefsWithFlatStart_tmp = 3 * proc_control_node_B.idx_j +
      1;
    proc_control_node_B.coefsWithFlatStart[6 * proc_control_node_B.idx_j + 1] =
      proc_control_node_B.coeffMat[proc_control_node_B.coefsWithFlatStart_tmp];
    proc_control_node_B.coefsWithFlatStart[6 * proc_control_node_B.idx_j + 4] =
      proc_control_node_B.coefMat[proc_control_node_B.coefsWithFlatStart_tmp];
    proc_control_node_B.coefsWithFlatStart_tmp = 3 * proc_control_node_B.idx_j +
      2;
    proc_control_node_B.coefsWithFlatStart[6 * proc_control_node_B.idx_j + 2] =
      proc_control_node_B.coeffMat[proc_control_node_B.coefsWithFlatStart_tmp];
    proc_control_node_B.coefsWithFlatStart[6 * proc_control_node_B.idx_j + 5] =
      proc_control_node_B.coefMat[proc_control_node_B.coefsWithFlatStart_tmp];
  }

  proc_control_node_B.b_coeffVec[0] = proc_control_node_rt_powd_snf
    (proc_control_node_B.dt_l, 3.0);
  proc_control_node_B.b_coeffVec[1] = proc_control_node_rt_powd_snf
    (proc_control_node_B.dt_l, 2.0);
  proc_control_node_B.b_coeffVec[2] = proc_control_node_rt_powd_snf
    (proc_control_node_B.dt_l, 1.0);
  proc_control_node_B.b_coeffVec[3] = proc_control_node_rt_powd_snf
    (proc_control_node_B.dt_l, 0.0);
  memset(&proc_control_node_B.coeffMat[0], 0, 12U * sizeof(real_T));
  for (proc_control_node_B.idx_j = 0; proc_control_node_B.idx_j < 3;
       proc_control_node_B.idx_j++) {
    proc_control_node_B.coeffMat[proc_control_node_B.idx_j + 9] = 0.0;
    proc_control_node_B.coeffMat[proc_control_node_B.idx_j + 9] +=
      proc_control_node_B.coefsWithFlatStart[proc_control_node_B.idx_j + 3] *
      proc_control_node_B.b_coeffVec[0];
    proc_control_node_B.coeffMat[proc_control_node_B.idx_j + 9] +=
      proc_control_node_B.coefsWithFlatStart[proc_control_node_B.idx_j + 9] *
      proc_control_node_B.b_coeffVec[1];
    proc_control_node_B.coeffMat[proc_control_node_B.idx_j + 9] +=
      proc_control_node_B.coefsWithFlatStart[proc_control_node_B.idx_j + 15] *
      proc_control_node_B.b_coeffVec[2];
    proc_control_node_B.coeffMat[proc_control_node_B.idx_j + 9] +=
      proc_control_node_B.coefsWithFlatStart[proc_control_node_B.idx_j + 21] *
      proc_control_node_B.b_coeffVec[3];
  }

  memset(&pp_coefs[0], 0, 36U * sizeof(real_T));
  for (proc_control_node_B.idx_j = 0; proc_control_node_B.idx_j < 4;
       proc_control_node_B.idx_j++) {
    for (proc_control_node_B.coefsWithFlatStart_tmp = 0;
         proc_control_node_B.coefsWithFlatStart_tmp < 6;
         proc_control_node_B.coefsWithFlatStart_tmp++) {
      pp_coefs[((proc_control_node_B.coefsWithFlatStart_tmp + 1) + 9 *
                proc_control_node_B.idx_j) - 1] =
        proc_control_node_B.coefsWithFlatStart[6 * proc_control_node_B.idx_j +
        proc_control_node_B.coefsWithFlatStart_tmp];
    }

    pp_coefs[9 * proc_control_node_B.idx_j + 6] = proc_control_node_B.coeffMat[3
      * proc_control_node_B.idx_j];
    pp_coefs[9 * proc_control_node_B.idx_j + 7] = proc_control_node_B.coeffMat[3
      * proc_control_node_B.idx_j + 1];
    pp_coefs[9 * proc_control_node_B.idx_j + 8] = proc_control_node_B.coeffMat[3
      * proc_control_node_B.idx_j + 2];
  }

  pp_breaks[0] = timePoints[0] - 1.0;
  pp_breaks[1] = timePoints[0];
  pp_breaks[2] = timePoints[1];
  pp_breaks[3] = timePoints[1] + 1.0;
  proc_control_node_ppval_b4n(pp_breaks, pp_coefs, t, q);
  proc_control_node_B.b_coeffVec[0] = timePoints[0] - 1.0;
  proc_control_node_B.b_coeffVec[1] = timePoints[0];
  proc_control_node_B.b_coeffVec[3] = timePoints[1] + 1.0;
  proc_control_node_B.dt_l = 0.01;
  x[0] = (t[0] > timePoints[1]);
  x[1] = (t[1] > timePoints[1]);
  proc_control_node_B.idx_j = 0;
  proc_control_node_B.ii_size_idx_0_c = 1;
  proc_control_node_B.coefsWithFlatStart_tmp = 1;
  exitg1 = false;
  while ((!exitg1) && (proc_control_node_B.coefsWithFlatStart_tmp - 1 < 2)) {
    if (x[proc_control_node_B.coefsWithFlatStart_tmp - 1]) {
      proc_control_node_B.idx_j = 1;
      proc_control_node_B.ii_data_idx_0 =
        proc_control_node_B.coefsWithFlatStart_tmp;
      exitg1 = true;
    } else {
      proc_control_node_B.coefsWithFlatStart_tmp++;
    }
  }

  if (proc_control_node_B.idx_j == 0) {
    proc_control_node_B.ii_size_idx_0_c = 0;
  }

  if (0 <= proc_control_node_B.ii_size_idx_0_c - 1) {
    proc_control_node_B.tGreaterThanTfIdx_data_idx_0 =
      proc_control_node_B.ii_data_idx_0;
  }

  if (proc_control_node_B.ii_size_idx_0_c != 0) {
    proc_control_node_B.wayPoints_idx_0 =
      (t[proc_control_node_B.tGreaterThanTfIdx_data_idx_0 - 1] - timePoints[1]) /
      2.0;
    if (proc_control_node_B.wayPoints_idx_0 < 0.01) {
      proc_control_node_B.dt_l = proc_control_node_B.wayPoints_idx_0;
    }
  }

  proc_control_node_B.b_coeffVec[2] = timePoints[1] + proc_control_node_B.dt_l;
  memset(&proc_control_node_B.dCoeffs[0], 0, 36U * sizeof(real_T));
  for (proc_control_node_B.coefsWithFlatStart_tmp = 0;
       proc_control_node_B.coefsWithFlatStart_tmp < 3;
       proc_control_node_B.coefsWithFlatStart_tmp++) {
    for (proc_control_node_B.idx_j = 0; proc_control_node_B.idx_j < 9;
         proc_control_node_B.idx_j++) {
      proc_control_node_B.dCoeffs[proc_control_node_B.idx_j + 9 *
        (proc_control_node_B.coefsWithFlatStart_tmp + 1)] =
        pp_coefs[proc_control_node_B.coefsWithFlatStart_tmp * 9 +
        proc_control_node_B.idx_j] * static_cast<real_T>(3 -
        proc_control_node_B.coefsWithFlatStart_tmp);
    }
  }

  proc_control_node_ppval_b4n(proc_control_node_B.b_coeffVec,
    proc_control_node_B.dCoeffs, t, qd);
  memset(&proc_control_node_B.ddCoeffs[0], 0, 36U * sizeof(real_T));
  for (proc_control_node_B.coefsWithFlatStart_tmp = 0;
       proc_control_node_B.coefsWithFlatStart_tmp < 3;
       proc_control_node_B.coefsWithFlatStart_tmp++) {
    for (proc_control_node_B.idx_j = 0; proc_control_node_B.idx_j < 9;
         proc_control_node_B.idx_j++) {
      proc_control_node_B.ddCoeffs[proc_control_node_B.idx_j + 9 *
        (proc_control_node_B.coefsWithFlatStart_tmp + 1)] =
        proc_control_node_B.dCoeffs[proc_control_node_B.coefsWithFlatStart_tmp *
        9 + proc_control_node_B.idx_j] * static_cast<real_T>(3 -
        proc_control_node_B.coefsWithFlatStart_tmp);
    }
  }

  proc_control_node_ppval_b4n(proc_control_node_B.b_coeffVec,
    proc_control_node_B.ddCoeffs, t, qdd);
}

static void proc_control_node_ppval_b4nw(const real_T pp_breaks[4], const real_T
  pp_coefs[36], real_T x, real_T v[3])
{
  real_T xloc;
  int32_T high_i;
  int32_T low_i;
  int32_T low_ip1;
  int32_T mid_i;
  if (rtIsNaN(x)) {
    v[0] = x;
    v[1] = x;
    v[2] = x;
  } else {
    low_i = 0;
    low_ip1 = 1;
    high_i = 4;
    while (high_i > low_ip1 + 1) {
      mid_i = ((low_i + high_i) + 1) >> 1;
      if (x >= pp_breaks[mid_i - 1]) {
        low_i = mid_i - 1;
        low_ip1 = mid_i;
      } else {
        high_i = mid_i;
      }
    }

    low_ip1 = low_i * 3;
    xloc = x - pp_breaks[low_i];
    v[0] = pp_coefs[low_ip1];
    v[1] = pp_coefs[low_ip1 + 1];
    v[2] = pp_coefs[low_ip1 + 2];
    for (low_i = 0; low_i < 3; low_i++) {
      high_i = ((low_i + 1) * 9 + low_ip1) - 1;
      v[0] = xloc * v[0] + pp_coefs[high_i + 1];
      v[1] = xloc * v[1] + pp_coefs[high_i + 2];
      v[2] = xloc * v[2] + pp_coefs[high_i + 3];
    }
  }
}

static void TrajectoryManager_SendCurrentPo(TrajectoryManager_proc_contro_T
  *b_this, real_T currPose[52])
{
  int32_T b_i;
  int32_T b_index;
  int32_T b_index_0;
  int32_T b_k;
  int32_T c;
  boolean_T exitg1;
  boolean_T exitg2;
  boolean_T isempty;
  boolean_T y;

  //  Fonction qui retourne la pose actuelle
  //  Vérification des prédictions.
  b_index = 2;
  isempty = false;
  b_i = 0;
  exitg1 = false;
  while ((!exitg1) && (b_i < 3)) {
    b_index = b_i + 2;
    for (b_k = 0; b_k < 13; b_k++) {
      proc_control_node_B.x_k[b_k] = (b_this->poseBuffer[(6001 * b_k + b_i) + 1]
        == b_this->emptyArray[b_k]);
    }

    y = true;
    b_k = 0;
    exitg2 = false;
    while ((!exitg2) && (b_k < 13)) {
      if (!proc_control_node_B.x_k[b_k]) {
        y = false;
        exitg2 = true;
      } else {
        b_k++;
      }
    }

    if (y) {
      isempty = true;
      exitg1 = true;
    } else {
      b_i++;
    }
  }

  memset(&currPose[0], 0, 52U * sizeof(real_T));
  for (b_k = 0; b_k < 13; b_k++) {
    if (0 <= b_index - 1) {
      memcpy(&currPose[b_k << 2], &b_this->poseBuffer[b_k * 6001], b_index *
             sizeof(real_T));
    }
  }

  if (isempty) {
    c = 4 - b_index;
    for (b_i = 0; b_i <= c; b_i++) {
      b_index_0 = b_index + b_i;
      for (b_k = 0; b_k < 13; b_k++) {
        proc_control_node_B.currPose[b_k] = currPose[(b_index + (b_k << 2)) - 2];
      }

      for (b_k = 0; b_k < 13; b_k++) {
        currPose[(b_index_0 + (b_k << 2)) - 1] =
          proc_control_node_B.currPose[b_k];
      }
    }
  }

  //  Ne pas supprimer le point si c'est le dernier.
  for (b_k = 0; b_k < 13; b_k++) {
    proc_control_node_B.x_k[b_k] = !(b_this->poseBuffer[6001 * b_k + 4] ==
      b_this->emptyArray[b_k]);
  }

  y = true;
  b_k = 0;
  exitg1 = false;
  while ((!exitg1) && (b_k < 13)) {
    if (!proc_control_node_B.x_k[b_k]) {
      y = false;
      exitg1 = true;
    } else {
      b_k++;
    }
  }

  if (y) {
    for (b_k = 0; b_k < 13; b_k++) {
      for (b_i = 0; b_i < 6000; b_i++) {
        proc_control_node_B.b_this[b_i + 6001 * b_k] = b_this->poseBuffer[((b_i
          + 2) + 6001 * b_k) - 1];
      }
    }

    for (b_k = 0; b_k < 13; b_k++) {
      proc_control_node_B.b_this[6001 * b_k + 6000] = b_this->emptyArray[b_k];
    }

    memcpy(&b_this->poseBuffer[0], &proc_control_node_B.b_this[0], 78013U *
           sizeof(real_T));
    b_this->bufferCount--;
    b_this->done = false;
  } else {
    b_this->done = true;
  }
}

static real_T proc_control_node_norm_b(const real_T x[3])
{
  real_T absxk;
  real_T scale;
  real_T t;
  real_T y;
  scale = 3.3121686421112381E-170;
  absxk = fabs(x[0]);
  if (absxk > 3.3121686421112381E-170) {
    y = 1.0;
    scale = absxk;
  } else {
    t = absxk / 3.3121686421112381E-170;
    y = t * t;
  }

  absxk = fabs(x[1]);
  if (absxk > scale) {
    t = scale / absxk;
    y = y * t * t + 1.0;
    scale = absxk;
  } else {
    t = absxk / scale;
    y += t * t;
  }

  absxk = fabs(x[2]);
  if (absxk > scale) {
    t = scale / absxk;
    y = y * t * t + 1.0;
    scale = absxk;
  } else {
    t = absxk / scale;
    y += t * t;
  }

  return scale * sqrt(y);
}

static boolean_T proc_control_node_isequal_b(const real_T varargin_1[29], const
  real_T varargin_2[29])
{
  int32_T b_k;
  boolean_T exitg1;
  boolean_T p;
  boolean_T p_0;
  p = false;
  p_0 = true;
  b_k = 0;
  exitg1 = false;
  while ((!exitg1) && (b_k < 29)) {
    if (!(varargin_1[b_k] == varargin_2[b_k])) {
      p_0 = false;
      exitg1 = true;
    } else {
      b_k++;
    }
  }

  if (p_0) {
    p = true;
  }

  return p;
}

static boolean_T proc_control_node_isequal_b4(const real_T varargin_1[8], const
  real_T varargin_2[8])
{
  int32_T b_k;
  boolean_T exitg1;
  boolean_T p;
  boolean_T p_0;
  p = false;
  p_0 = true;
  b_k = 0;
  exitg1 = false;
  while ((!exitg1) && (b_k < 8)) {
    if (!(varargin_1[b_k] == varargin_2[b_k])) {
      p_0 = false;
      exitg1 = true;
    } else {
      b_k++;
    }
  }

  if (p_0) {
    p = true;
  }

  return p;
}

// Function for MATLAB Function: '<S94>/NLMPC'
static void proc_contro_znlmpc_setDecisions(const real_T X[52], const real_T
  Umv[32], real_T e, real_T z[69])
{
  int32_T i;
  int32_T i_0;
  static const int8_T a[512] = { 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0 };

  for (i_0 = 0; i_0 < 4; i_0++) {
    for (i = 0; i < 13; i++) {
      proc_control_node_B.X_pc[i + 13 * i_0] = X[(i << 2) + i_0];
    }

    for (i = 0; i < 8; i++) {
      proc_control_node_B.Umv_n[i + (i_0 << 3)] = Umv[(i << 2) + i_0];
    }
  }

  for (i_0 = 0; i_0 < 16; i_0++) {
    proc_control_node_B.a_b[i_0] = 0.0;
    for (i = 0; i < 32; i++) {
      proc_control_node_B.a_b[i_0] += static_cast<real_T>(a[(i << 4) + i_0]) *
        proc_control_node_B.Umv_n[i];
    }
  }

  memcpy(&z[0], &proc_control_node_B.X_pc[0], 52U * sizeof(real_T));
  memcpy(&z[52], &proc_control_node_B.a_b[0], sizeof(real_T) << 4U);
  z[68] = e;
}

// Function for MATLAB Function: '<S94>/NLMPC'
static void proc_co_structConstructorHelper(const real_T varargin_2[13], const
  real_T varargin_4[8], const real_T varargin_6[52], const real_T varargin_10[52],
  const real_T varargin_12[32], const real_T varargin_14[32], const real_T
  varargin_18[52], const real_T varargin_20[52], const real_T varargin_22[52],
  const real_T varargin_24[52], const real_T varargin_26[32], const real_T
  varargin_28[32], const real_T varargin_30[32], const real_T varargin_32[32],
  const real_T varargin_34[32], s_REWc8VgrfSKVLBFK433XbH_proc_T *s)
{
  memcpy(&s->x[0], &varargin_2[0], 13U * sizeof(real_T));
  memcpy(&s->lastMV[0], &varargin_4[0], sizeof(real_T) << 3U);
  memcpy(&s->ref[0], &varargin_6[0], 52U * sizeof(real_T));
  memcpy(&s->OutputWeights[0], &varargin_10[0], 52U * sizeof(real_T));
  memcpy(&s->MVWeights[0], &varargin_12[0], sizeof(real_T) << 5U);
  memcpy(&s->MVRateWeights[0], &varargin_14[0], sizeof(real_T) << 5U);
  s->ECRWeight = 100000.0;
  memcpy(&s->OutputMin[0], &varargin_18[0], 52U * sizeof(real_T));
  memcpy(&s->OutputMax[0], &varargin_20[0], 52U * sizeof(real_T));
  memcpy(&s->StateMin[0], &varargin_22[0], 52U * sizeof(real_T));
  memcpy(&s->StateMax[0], &varargin_24[0], 52U * sizeof(real_T));
  memcpy(&s->MVMin[0], &varargin_26[0], sizeof(real_T) << 5U);
  memcpy(&s->MVMax[0], &varargin_28[0], sizeof(real_T) << 5U);
  memcpy(&s->MVRateMin[0], &varargin_30[0], sizeof(real_T) << 5U);
  memcpy(&s->MVRateMax[0], &varargin_32[0], sizeof(real_T) << 5U);
  memcpy(&s->MVScaledTarget[0], &varargin_34[0], sizeof(real_T) << 5U);
}

// Function for MATLAB Function: '<S94>/NLMPC'
static void proc_znlmpc_generateRuntimeData(const real_T x[13], const real_T
  lastMV[8], const real_T ref0[52], const real_T OutputWeights0[13], const
  real_T MVWeights0[8], const real_T MVRateWeights0[8], const real_T MVMin0[8],
  const real_T MVMax0[8], const real_T X0[13], const real_T MV0[8], real_T
  Slack0, s_REWc8VgrfSKVLBFK433XbH_proc_T *runtimedata,
  sACkMJ1zT2VJOHR6eMwwEPC_proc__T *userdata, real_T z0[69])
{
  int32_T X0_tmp;
  int32_T i;
  for (i = 0; i < 13; i++) {
    proc_control_node_B.X0_m = X0[i];
    X0_tmp = i << 2;
    proc_control_node_B.X0[X0_tmp] = proc_control_node_B.X0_m;
    proc_control_node_B.X0[X0_tmp + 1] = proc_control_node_B.X0_m;
    proc_control_node_B.X0[X0_tmp + 2] = proc_control_node_B.X0_m;
    proc_control_node_B.X0[X0_tmp + 3] = proc_control_node_B.X0_m;
  }

  for (i = 0; i < 8; i++) {
    proc_control_node_B.X0_m = MV0[i];
    X0_tmp = i << 2;
    proc_control_node_B.MV0[X0_tmp] = proc_control_node_B.X0_m;
    proc_control_node_B.MV0[X0_tmp + 1] = proc_control_node_B.X0_m;
    proc_control_node_B.MV0[X0_tmp + 2] = proc_control_node_B.X0_m;
    proc_control_node_B.MV0[X0_tmp + 3] = proc_control_node_B.X0_m;
  }

  proc_contro_znlmpc_setDecisions(proc_control_node_B.X0,
    proc_control_node_B.MV0, Slack0, z0);
  userdata->Ts = 0.25;
  memcpy(&userdata->CurrentStates[0], &x[0], 13U * sizeof(real_T));
  memcpy(&userdata->LastMV[0], &lastMV[0], sizeof(real_T) << 3U);
  memcpy(&userdata->References[0], &ref0[0], 52U * sizeof(real_T));
  memset(&userdata->MVTarget[0], 0, sizeof(real_T) << 5U);
  userdata->PredictionHorizon = 4.0;
  userdata->NumOfStates = 13.0;
  userdata->NumOfOutputs = 13.0;
  userdata->NumOfInputs = 8.0;
  for (i = 0; i < 8; i++) {
    userdata->MVIndex[i] = static_cast<real_T>(i) + 1.0;
  }

  for (i = 0; i < 13; i++) {
    proc_control_node_B.X0_m = OutputWeights0[i];
    X0_tmp = i << 2;
    proc_control_node_B.X0[X0_tmp] = proc_control_node_B.X0_m;
    proc_control_node_B.X0[X0_tmp + 1] = proc_control_node_B.X0_m;
    proc_control_node_B.X0[X0_tmp + 2] = proc_control_node_B.X0_m;
    proc_control_node_B.X0[X0_tmp + 3] = proc_control_node_B.X0_m;
  }

  for (i = 0; i < 8; i++) {
    proc_control_node_B.X0_m = MVRateWeights0[i];
    proc_control_node_B.MVWeights0 = MVWeights0[i];
    X0_tmp = i << 2;
    proc_control_node_B.MV0[X0_tmp] = proc_control_node_B.MVWeights0;
    proc_control_node_B.MVRateWeights0[X0_tmp] = proc_control_node_B.X0_m;
    proc_control_node_B.MV0[X0_tmp + 1] = proc_control_node_B.MVWeights0;
    proc_control_node_B.MVRateWeights0[X0_tmp + 1] = proc_control_node_B.X0_m;
    proc_control_node_B.MV0[X0_tmp + 2] = proc_control_node_B.MVWeights0;
    proc_control_node_B.MVRateWeights0[X0_tmp + 2] = proc_control_node_B.X0_m;
    proc_control_node_B.MV0[X0_tmp + 3] = proc_control_node_B.MVWeights0;
    proc_control_node_B.MVRateWeights0[X0_tmp + 3] = proc_control_node_B.X0_m;
  }

  for (i = 0; i < 52; i++) {
    proc_control_node_B.dv4[i] = (rtMinusInf);
    proc_control_node_B.dv5[i] = (rtInf);
    proc_control_node_B.dv6[i] = (rtMinusInf);
    proc_control_node_B.dv7[i] = (rtInf);
  }

  for (i = 0; i < 8; i++) {
    proc_control_node_B.X0_m = MVMax0[i];
    proc_control_node_B.MVWeights0 = MVMin0[i];
    X0_tmp = i << 2;
    proc_control_node_B.MVMin0[X0_tmp] = proc_control_node_B.MVWeights0;
    proc_control_node_B.MVMax0[X0_tmp] = proc_control_node_B.X0_m;
    proc_control_node_B.MVMin0[X0_tmp + 1] = proc_control_node_B.MVWeights0;
    proc_control_node_B.MVMax0[X0_tmp + 1] = proc_control_node_B.X0_m;
    proc_control_node_B.MVMin0[X0_tmp + 2] = proc_control_node_B.MVWeights0;
    proc_control_node_B.MVMax0[X0_tmp + 2] = proc_control_node_B.X0_m;
    proc_control_node_B.MVMin0[X0_tmp + 3] = proc_control_node_B.MVWeights0;
    proc_control_node_B.MVMax0[X0_tmp + 3] = proc_control_node_B.X0_m;
  }

  for (i = 0; i < 32; i++) {
    proc_control_node_B.dv9[i] = (rtMinusInf);
    proc_control_node_B.dv10[i] = (rtInf);
    proc_control_node_B.dv11[i] = 0.0;
  }

  proc_co_structConstructorHelper(x, lastMV, ref0, proc_control_node_B.X0,
    proc_control_node_B.MV0, proc_control_node_B.MVRateWeights0,
    proc_control_node_B.dv4, proc_control_node_B.dv5, proc_control_node_B.dv6,
    proc_control_node_B.dv7, proc_control_node_B.MVMin0,
    proc_control_node_B.MVMax0, proc_control_node_B.dv9,
    proc_control_node_B.dv10, proc_control_node_B.dv11, runtimedata);
}

// Function for MATLAB Function: '<S94>/NLMPC'
static void proc_control__znlmpc_getZBounds(const
  s_REWc8VgrfSKVLBFK433XbH_proc_T *runtimedata, real_T zLB[69], real_T zUB[69])
{
  int32_T i;
  int32_T i_0;
  for (i_0 = 0; i_0 < 4; i_0++) {
    for (i = 0; i < 13; i++) {
      proc_control_node_B.runtimedata_n[i + 13 * i_0] = runtimedata->StateMin[(i
        << 2) + i_0];
    }
  }

  memcpy(&zLB[0], &proc_control_node_B.runtimedata_n[0], 52U * sizeof(real_T));
  for (i_0 = 0; i_0 < 16; i_0++) {
    zLB[i_0 + 52] = (rtMinusInf);
  }

  zLB[68] = 0.0;
  for (i_0 = 0; i_0 < 4; i_0++) {
    for (i = 0; i < 13; i++) {
      proc_control_node_B.runtimedata_n[i + 13 * i_0] = runtimedata->StateMax[(i
        << 2) + i_0];
    }
  }

  memcpy(&zUB[0], &proc_control_node_B.runtimedata_n[0], 52U * sizeof(real_T));
  for (i_0 = 0; i_0 < 16; i_0++) {
    zUB[i_0 + 52] = (rtInf);
  }

  zUB[68] = (rtInf);
}

// Function for MATLAB Function: '<S94>/NLMPC'
static void proc_control_node_isfinite(const real_T x[8], boolean_T b[8])
{
  real_T x_0;
  int32_T i;
  for (i = 0; i < 8; i++) {
    x_0 = x[i];
    b[i] = ((!rtIsInf(x_0)) && (!rtIsNaN(x_0)));
  }
}

// Function for MATLAB Function: '<S94>/NLMPC'
static void proc_control_node_mtimes(const real_T A_data[], const int32_T
  A_size[2], real_T C_data[], int32_T C_size[2])
{
  int32_T b_i;
  int32_T i;
  int32_T j;
  int32_T tmp;
  static const int8_T b[512] = { 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 1 };

  proc_control_node_B.m_l = A_size[0];
  C_size[0] = A_size[0];
  C_size[1] = 16;
  for (j = 0; j < 16; j++) {
    proc_control_node_B.coffset_e = j * proc_control_node_B.m_l;
    proc_control_node_B.boffset_c = j << 5;
    for (i = 0; i < proc_control_node_B.m_l; i++) {
      C_data[proc_control_node_B.coffset_e + i] = 0.0;
    }

    for (i = 0; i < 32; i++) {
      proc_control_node_B.aoffset_h = i * A_size[0];
      proc_control_node_B.bkj_o = b[proc_control_node_B.boffset_c + i];
      for (b_i = 1; b_i - 1 < proc_control_node_B.m_l; b_i++) {
        tmp = (proc_control_node_B.coffset_e + b_i) - 1;
        C_data[tmp] += A_data[(proc_control_node_B.aoffset_h + b_i) - 1] *
          static_cast<real_T>(proc_control_node_B.bkj_o);
      }
    }
  }
}

// Function for MATLAB Function: '<S94>/NLMPC'
static void proc_control__znlmpc_getUBounds(const
  s_REWc8VgrfSKVLBFK433XbH_proc_T *runtimedata, real_T A_data[], int32_T A_size
  [2], real_T Bu_data[], int32_T *Bu_size)
{
  int32_T i;
  boolean_T exitg1;
  memset(&proc_control_node_B.Au[0], 0, sizeof(real_T) << 12U);
  memset(&proc_control_node_B.b_Bu[0], 0, sizeof(real_T) << 7U);
  memset(&proc_control_node_B.icf[0], 0, sizeof(boolean_T) << 7U);
  for (proc_control_node_B.b_j_c4 = 0; proc_control_node_B.b_j_c4 < 8;
       proc_control_node_B.b_j_c4++) {
    proc_control_node_B.ic_e2[proc_control_node_B.b_j_c4] = static_cast<real_T>
      (proc_control_node_B.b_j_c4) + 1.0;
  }

  memset(&proc_control_node_B.As[0], 0, sizeof(int8_T) << 6U);
  for (proc_control_node_B.b_j_c4 = 0; proc_control_node_B.b_j_c4 < 8;
       proc_control_node_B.b_j_c4++) {
    proc_control_node_B.As[proc_control_node_B.b_j_c4 +
      (proc_control_node_B.b_j_c4 << 3)] = 1;
  }

  for (proc_control_node_B.b_j_c4 = 0; proc_control_node_B.b_j_c4 < 64;
       proc_control_node_B.b_j_c4++) {
    i = proc_control_node_B.As[proc_control_node_B.b_j_c4];
    proc_control_node_B.Au_tmp_f[proc_control_node_B.b_j_c4] =
      static_cast<int8_T>(-i);
    proc_control_node_B.Au_tmp[proc_control_node_B.b_j_c4] = static_cast<int8_T>
      (i);
  }

  for (i = 0; i < 4; i++) {
    for (proc_control_node_B.b_j_c4 = 0; proc_control_node_B.b_j_c4 < 8;
         proc_control_node_B.b_j_c4++) {
      proc_control_node_B.runtimedata_b[proc_control_node_B.b_j_c4] =
        runtimedata->MVRateMin[(proc_control_node_B.b_j_c4 << 2) + i];
    }

    proc_control_node_isfinite(proc_control_node_B.runtimedata_b,
      proc_control_node_B.bv2);
    for (proc_control_node_B.b_j_c4 = 0; proc_control_node_B.b_j_c4 < 8;
         proc_control_node_B.b_j_c4++) {
      proc_control_node_B.icf[static_cast<int32_T>
        (proc_control_node_B.ic_e2[proc_control_node_B.b_j_c4]) - 1] =
        proc_control_node_B.bv2[proc_control_node_B.b_j_c4];
      proc_control_node_B.runtimedata_b[proc_control_node_B.b_j_c4] =
        runtimedata->MVRateMax[(proc_control_node_B.b_j_c4 << 2) + i];
    }

    proc_control_node_isfinite(proc_control_node_B.runtimedata_b,
      proc_control_node_B.bv2);
    for (proc_control_node_B.b_j_c4 = 0; proc_control_node_B.b_j_c4 < 8;
         proc_control_node_B.b_j_c4++) {
      proc_control_node_B.icf[static_cast<int32_T>
        (proc_control_node_B.ic_e2[proc_control_node_B.b_j_c4] + 8.0) - 1] =
        proc_control_node_B.bv2[proc_control_node_B.b_j_c4];
      proc_control_node_B.runtimedata_b[proc_control_node_B.b_j_c4] =
        runtimedata->MVMin[(proc_control_node_B.b_j_c4 << 2) + i];
    }

    proc_control_node_isfinite(proc_control_node_B.runtimedata_b,
      proc_control_node_B.bv2);
    for (proc_control_node_B.b_j_c4 = 0; proc_control_node_B.b_j_c4 < 8;
         proc_control_node_B.b_j_c4++) {
      proc_control_node_B.icf[static_cast<int32_T>
        (proc_control_node_B.ic_e2[proc_control_node_B.b_j_c4] + 16.0) - 1] =
        proc_control_node_B.bv2[proc_control_node_B.b_j_c4];
      proc_control_node_B.runtimedata_b[proc_control_node_B.b_j_c4] =
        runtimedata->MVMax[(proc_control_node_B.b_j_c4 << 2) + i];
    }

    proc_control_node_isfinite(proc_control_node_B.runtimedata_b,
      proc_control_node_B.bv2);
    for (proc_control_node_B.b_j_c4 = 0; proc_control_node_B.b_j_c4 < 8;
         proc_control_node_B.b_j_c4++) {
      proc_control_node_B.icf[static_cast<int32_T>
        (proc_control_node_B.ic_e2[proc_control_node_B.b_j_c4] + 24.0) - 1] =
        proc_control_node_B.bv2[proc_control_node_B.b_j_c4];
      for (proc_control_node_B.b_i_n = 0; proc_control_node_B.b_i_n < 8;
           proc_control_node_B.b_i_n++) {
        proc_control_node_B.Au[((static_cast<int32_T>
          (proc_control_node_B.ic_e2[proc_control_node_B.b_i_n]) +
          (proc_control_node_B.b_j_c4 << 7)) + (i << 10)) - 1] =
          proc_control_node_B.Au_tmp_f[(proc_control_node_B.b_j_c4 << 3) +
          proc_control_node_B.b_i_n];
      }
    }

    for (proc_control_node_B.b_j_c4 = 0; proc_control_node_B.b_j_c4 < 8;
         proc_control_node_B.b_j_c4++) {
      for (proc_control_node_B.b_i_n = 0; proc_control_node_B.b_i_n < 8;
           proc_control_node_B.b_i_n++) {
        proc_control_node_B.Au[((static_cast<int32_T>
          (proc_control_node_B.ic_e2[proc_control_node_B.b_i_n] + 8.0) +
          (proc_control_node_B.b_j_c4 << 7)) + (i << 10)) - 1] =
          proc_control_node_B.Au_tmp[(proc_control_node_B.b_j_c4 << 3) +
          proc_control_node_B.b_i_n];
      }
    }

    for (proc_control_node_B.b_j_c4 = 0; proc_control_node_B.b_j_c4 < 8;
         proc_control_node_B.b_j_c4++) {
      for (proc_control_node_B.b_i_n = 0; proc_control_node_B.b_i_n < 8;
           proc_control_node_B.b_i_n++) {
        proc_control_node_B.Au[((static_cast<int32_T>
          (proc_control_node_B.ic_e2[proc_control_node_B.b_i_n] + 16.0) +
          (proc_control_node_B.b_j_c4 << 7)) + (i << 10)) - 1] =
          proc_control_node_B.Au_tmp_f[(proc_control_node_B.b_j_c4 << 3) +
          proc_control_node_B.b_i_n];
      }
    }

    for (proc_control_node_B.b_j_c4 = 0; proc_control_node_B.b_j_c4 < 8;
         proc_control_node_B.b_j_c4++) {
      for (proc_control_node_B.b_i_n = 0; proc_control_node_B.b_i_n < 8;
           proc_control_node_B.b_i_n++) {
        proc_control_node_B.Au[((static_cast<int32_T>
          (proc_control_node_B.ic_e2[proc_control_node_B.b_i_n] + 24.0) +
          (proc_control_node_B.b_j_c4 << 7)) + (i << 10)) - 1] =
          proc_control_node_B.Au_tmp[(proc_control_node_B.b_j_c4 << 3) +
          proc_control_node_B.b_i_n];
      }

      proc_control_node_B.b_Bu[static_cast<int32_T>
        (proc_control_node_B.ic_e2[proc_control_node_B.b_j_c4]) - 1] =
        -runtimedata->MVRateMin[(proc_control_node_B.b_j_c4 << 2) + i];
    }

    for (proc_control_node_B.b_j_c4 = 0; proc_control_node_B.b_j_c4 < 8;
         proc_control_node_B.b_j_c4++) {
      proc_control_node_B.b_Bu[static_cast<int32_T>
        (proc_control_node_B.ic_e2[proc_control_node_B.b_j_c4] + 8.0) - 1] =
        runtimedata->MVRateMax[(proc_control_node_B.b_j_c4 << 2) + i];
    }

    for (proc_control_node_B.b_j_c4 = 0; proc_control_node_B.b_j_c4 < 8;
         proc_control_node_B.b_j_c4++) {
      proc_control_node_B.b_Bu[static_cast<int32_T>
        (proc_control_node_B.ic_e2[proc_control_node_B.b_j_c4] + 16.0) - 1] =
        -runtimedata->MVMin[(proc_control_node_B.b_j_c4 << 2) + i];
    }

    for (proc_control_node_B.b_j_c4 = 0; proc_control_node_B.b_j_c4 < 8;
         proc_control_node_B.b_j_c4++) {
      proc_control_node_B.b_Bu[static_cast<int32_T>
        (proc_control_node_B.ic_e2[proc_control_node_B.b_j_c4] + 24.0) - 1] =
        runtimedata->MVMax[(proc_control_node_B.b_j_c4 << 2) + i];
    }

    if (i + 1 == 1) {
      for (proc_control_node_B.b_j_c4 = 0; proc_control_node_B.b_j_c4 < 8;
           proc_control_node_B.b_j_c4++) {
        proc_control_node_B.runtimedata_b[proc_control_node_B.b_j_c4] =
          proc_control_node_B.b_Bu[static_cast<int32_T>
          (proc_control_node_B.ic_e2[proc_control_node_B.b_j_c4]) - 1] -
          runtimedata->lastMV[proc_control_node_B.b_j_c4];
      }

      for (proc_control_node_B.b_j_c4 = 0; proc_control_node_B.b_j_c4 < 8;
           proc_control_node_B.b_j_c4++) {
        proc_control_node_B.b_Bu[static_cast<int32_T>
          (proc_control_node_B.ic_e2[proc_control_node_B.b_j_c4]) - 1] =
          proc_control_node_B.runtimedata_b[proc_control_node_B.b_j_c4];
      }

      for (proc_control_node_B.b_j_c4 = 0; proc_control_node_B.b_j_c4 < 8;
           proc_control_node_B.b_j_c4++) {
        proc_control_node_B.runtimedata_b[proc_control_node_B.b_j_c4] =
          proc_control_node_B.b_Bu[static_cast<int32_T>
          (proc_control_node_B.ic_e2[proc_control_node_B.b_j_c4] + 8.0) - 1] +
          runtimedata->lastMV[proc_control_node_B.b_j_c4];
      }

      for (proc_control_node_B.b_j_c4 = 0; proc_control_node_B.b_j_c4 < 8;
           proc_control_node_B.b_j_c4++) {
        proc_control_node_B.b_Bu[static_cast<int32_T>
          (proc_control_node_B.ic_e2[proc_control_node_B.b_j_c4] + 8.0) - 1] =
          proc_control_node_B.runtimedata_b[proc_control_node_B.b_j_c4];
      }
    } else {
      for (proc_control_node_B.b_j_c4 = 0; proc_control_node_B.b_j_c4 < 8;
           proc_control_node_B.b_j_c4++) {
        for (proc_control_node_B.b_i_n = 0; proc_control_node_B.b_i_n < 8;
             proc_control_node_B.b_i_n++) {
          proc_control_node_B.Au[((static_cast<int32_T>
            (proc_control_node_B.ic_e2[proc_control_node_B.b_i_n]) +
            (proc_control_node_B.b_j_c4 << 7)) + ((i - 1) << 10)) - 1] =
            proc_control_node_B.Au_tmp[(proc_control_node_B.b_j_c4 << 3) +
            proc_control_node_B.b_i_n];
        }
      }

      for (proc_control_node_B.b_j_c4 = 0; proc_control_node_B.b_j_c4 < 8;
           proc_control_node_B.b_j_c4++) {
        for (proc_control_node_B.b_i_n = 0; proc_control_node_B.b_i_n < 8;
             proc_control_node_B.b_i_n++) {
          proc_control_node_B.Au[((static_cast<int32_T>
            (proc_control_node_B.ic_e2[proc_control_node_B.b_i_n] + 8.0) +
            (proc_control_node_B.b_j_c4 << 7)) + ((i - 1) << 10)) - 1] =
            proc_control_node_B.Au_tmp_f[(proc_control_node_B.b_j_c4 << 3) +
            proc_control_node_B.b_i_n];
        }
      }
    }

    for (proc_control_node_B.b_j_c4 = 0; proc_control_node_B.b_j_c4 < 8;
         proc_control_node_B.b_j_c4++) {
      proc_control_node_B.ic_e2[proc_control_node_B.b_j_c4] += 32.0;
    }
  }

  i = 0;
  proc_control_node_B.b_j_c4 = 0;
  exitg1 = false;
  while ((!exitg1) && (proc_control_node_B.b_j_c4 < 128)) {
    if (proc_control_node_B.icf[proc_control_node_B.b_j_c4]) {
      i++;
      proc_control_node_B.ii_data[i - 1] = static_cast<uint8_T>
        (proc_control_node_B.b_j_c4 + 1);
      if (i >= 128) {
        exitg1 = true;
      } else {
        proc_control_node_B.b_j_c4++;
      }
    } else {
      proc_control_node_B.b_j_c4++;
    }
  }

  if (1 > i) {
    i = 0;
  }

  if (i > 0) {
    *Bu_size = i;
    for (proc_control_node_B.b_j_c4 = 0; proc_control_node_B.b_j_c4 < i;
         proc_control_node_B.b_j_c4++) {
      Bu_data[proc_control_node_B.b_j_c4] =
        proc_control_node_B.b_Bu[proc_control_node_B.ii_data[proc_control_node_B.b_j_c4]
        - 1];
    }

    for (proc_control_node_B.b_j_c4 = 0; proc_control_node_B.b_j_c4 < 8;
         proc_control_node_B.b_j_c4++) {
      proc_control_node_B.b_i_n = 0;
      while (proc_control_node_B.b_i_n <= i - 1) {
        proc_control_node_B.Auf_data[proc_control_node_B.b_i_n + i *
          proc_control_node_B.b_j_c4] = proc_control_node_B.Au
          [((proc_control_node_B.b_j_c4 << 7) +
            proc_control_node_B.ii_data[proc_control_node_B.b_i_n]) - 1];
        proc_control_node_B.b_i_n++;
      }

      proc_control_node_B.b_i_n = 0;
      while (proc_control_node_B.b_i_n <= i - 1) {
        proc_control_node_B.Auf_data[(proc_control_node_B.b_i_n + i *
          proc_control_node_B.b_j_c4) + (i << 3)] = proc_control_node_B.Au
          [((proc_control_node_B.b_j_c4 << 7) +
            proc_control_node_B.ii_data[proc_control_node_B.b_i_n]) + 1023];
        proc_control_node_B.b_i_n++;
      }

      proc_control_node_B.b_i_n = 0;
      while (proc_control_node_B.b_i_n <= i - 1) {
        proc_control_node_B.Auf_data[(proc_control_node_B.b_i_n + i *
          proc_control_node_B.b_j_c4) + ((i << 3) << 1)] =
          proc_control_node_B.Au[((proc_control_node_B.b_j_c4 << 7) +
          proc_control_node_B.ii_data[proc_control_node_B.b_i_n]) + 2047];
        proc_control_node_B.b_i_n++;
      }

      proc_control_node_B.b_i_n = 0;
      while (proc_control_node_B.b_i_n <= i - 1) {
        proc_control_node_B.Auf_data[(proc_control_node_B.b_i_n + i *
          proc_control_node_B.b_j_c4) + (i << 3) * 3] = proc_control_node_B.Au
          [((proc_control_node_B.b_j_c4 << 7) +
            proc_control_node_B.ii_data[proc_control_node_B.b_i_n]) + 3071];
        proc_control_node_B.b_i_n++;
      }
    }

    proc_control_node_B.b_fb[0] = i;
    proc_control_node_B.b_fb[1] = 32;
    proc_control_node_mtimes(proc_control_node_B.Auf_data,
      proc_control_node_B.b_fb, proc_control_node_B.tmp_data_p,
      proc_control_node_B.tmp_size_k);
    A_size[0] = i;
    A_size[1] = 69;
    proc_control_node_B.b_i_n = i * 52;
    if (0 <= proc_control_node_B.b_i_n - 1) {
      memset(&A_data[0], 0, proc_control_node_B.b_i_n * sizeof(real_T));
    }

    proc_control_node_B.b_i_n = i << 4;
    for (proc_control_node_B.b_j_c4 = 0; proc_control_node_B.b_j_c4 <
         proc_control_node_B.b_i_n; proc_control_node_B.b_j_c4++) {
      A_data[proc_control_node_B.b_j_c4 + i * 52] =
        proc_control_node_B.tmp_data_p[proc_control_node_B.b_j_c4];
    }

    if (0 <= i - 1) {
      memset(&A_data[i * 52 + proc_control_node_B.b_i_n], 0, ((((i + i * 52) +
                proc_control_node_B.b_i_n) - i * 52) - proc_control_node_B.b_i_n)
             * sizeof(real_T));
    }
  } else {
    *Bu_size = 0;
    A_size[0] = 0;
    A_size[1] = 85;
  }
}

// Function for MATLAB Function: '<S94>/NLMPC'
static void proc_contro_znlmpc_getDecisions(const real_T z[69], real_T X[52],
  real_T Umv[32], real_T *e)
{
  int32_T Umv_tmp;
  int32_T i;
  static const int8_T a[512] = { 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 1 };

  for (i = 0; i < 32; i++) {
    proc_control_node_B.a[i] = 0.0;
    for (Umv_tmp = 0; Umv_tmp < 16; Umv_tmp++) {
      proc_control_node_B.a[i] += static_cast<real_T>(a[(Umv_tmp << 5) + i]) *
        z[Umv_tmp + 52];
    }
  }

  for (i = 0; i < 8; i++) {
    Umv_tmp = i << 2;
    Umv[Umv_tmp] = proc_control_node_B.a[i];
    Umv[Umv_tmp + 1] = proc_control_node_B.a[i + 8];
    Umv[Umv_tmp + 2] = proc_control_node_B.a[i + 16];
    Umv[Umv_tmp + 3] = proc_control_node_B.a[i + 24];
  }

  *e = z[68];
  memcpy(&proc_control_node_B.z_c[0], &z[0], 52U * sizeof(real_T));
  for (i = 0; i < 13; i++) {
    Umv_tmp = i << 2;
    X[Umv_tmp] = proc_control_node_B.z_c[i];
    X[Umv_tmp + 1] = proc_control_node_B.z_c[i + 13];
    X[Umv_tmp + 2] = proc_control_node_B.z_c[i + 26];
    X[Umv_tmp + 3] = proc_control_node_B.z_c[i + 39];
  }
}

// Function for MATLAB Function: '<S94>/NLMPC'
static void proc_control_node_znlmpc_getXUe(const real_T z[69], const real_T x
  [13], real_T X[65], real_T U[40], real_T *e)
{
  int32_T X_tmp;
  int32_T i;
  memset(&X[0], 0, 65U * sizeof(real_T));
  memset(&proc_control_node_B.Umv[0], 0, 40U * sizeof(real_T));
  proc_contro_znlmpc_getDecisions(z, proc_control_node_B.b_b,
    proc_control_node_B.c_l, e);
  for (i = 0; i < 13; i++) {
    X_tmp = i << 2;
    X[5 * i + 1] = proc_control_node_B.b_b[X_tmp];
    X[5 * i + 2] = proc_control_node_B.b_b[X_tmp + 1];
    X[5 * i + 3] = proc_control_node_B.b_b[X_tmp + 2];
    X[5 * i + 4] = proc_control_node_B.b_b[X_tmp + 3];
  }

  for (i = 0; i < 8; i++) {
    X_tmp = i << 2;
    proc_control_node_B.Umv[5 * i] = proc_control_node_B.c_l[X_tmp];
    proc_control_node_B.Umv[5 * i + 1] = proc_control_node_B.c_l[X_tmp + 1];
    proc_control_node_B.Umv[5 * i + 2] = proc_control_node_B.c_l[X_tmp + 2];
    proc_control_node_B.Umv[5 * i + 3] = proc_control_node_B.c_l[X_tmp + 3];
  }

  for (i = 0; i < 13; i++) {
    X[5 * i] = x[i];
  }

  for (X_tmp = 0; X_tmp < 8; X_tmp++) {
    proc_control_node_B.Umv[5 * X_tmp + 4] = proc_control_node_B.Umv[5 * X_tmp +
      3];
    for (i = 0; i < 5; i++) {
      U[i + 5 * X_tmp] = proc_control_node_B.Umv[5 * X_tmp + i];
    }
  }
}

// Function for MATLAB Function: '<S94>/NLMPC'
static void proc_cont_AUVQuatJacobianMatrix(const real_T in1[13], real_T Anqv
  [169])
{
  proc_control_node_B.t2_e = fabs(in1[10]);
  proc_control_node_B.t3_p = fabs(in1[11]);
  proc_control_node_B.t4_n = fabs(in1[12]);
  proc_control_node_B.t5_o = fabs(in1[7]);
  proc_control_node_B.t6_d = fabs(in1[8]);
  proc_control_node_B.t7_g = fabs(in1[9]);
  if (in1[10] < 0.0) {
    proc_control_node_B.t8 = -1.0;
  } else if (in1[10] > 0.0) {
    proc_control_node_B.t8 = 1.0;
  } else if (in1[10] == 0.0) {
    proc_control_node_B.t8 = 0.0;
  } else {
    proc_control_node_B.t8 = (rtNaN);
  }

  if (in1[11] < 0.0) {
    proc_control_node_B.t9 = -1.0;
  } else if (in1[11] > 0.0) {
    proc_control_node_B.t9 = 1.0;
  } else if (in1[11] == 0.0) {
    proc_control_node_B.t9 = 0.0;
  } else {
    proc_control_node_B.t9 = (rtNaN);
  }

  if (in1[12] < 0.0) {
    proc_control_node_B.t10 = -1.0;
  } else if (in1[12] > 0.0) {
    proc_control_node_B.t10 = 1.0;
  } else if (in1[12] == 0.0) {
    proc_control_node_B.t10 = 0.0;
  } else {
    proc_control_node_B.t10 = (rtNaN);
  }

  if (in1[7] < 0.0) {
    proc_control_node_B.t11 = -1.0;
  } else if (in1[7] > 0.0) {
    proc_control_node_B.t11 = 1.0;
  } else if (in1[7] == 0.0) {
    proc_control_node_B.t11 = 0.0;
  } else {
    proc_control_node_B.t11 = (rtNaN);
  }

  if (in1[8] < 0.0) {
    proc_control_node_B.t12_i = -1.0;
  } else if (in1[8] > 0.0) {
    proc_control_node_B.t12_i = 1.0;
  } else if (in1[8] == 0.0) {
    proc_control_node_B.t12_i = 0.0;
  } else {
    proc_control_node_B.t12_i = (rtNaN);
  }

  if (in1[9] < 0.0) {
    proc_control_node_B.t13 = -1.0;
  } else if (in1[9] > 0.0) {
    proc_control_node_B.t13 = 1.0;
  } else if (in1[9] == 0.0) {
    proc_control_node_B.t13 = 0.0;
  } else {
    proc_control_node_B.t13 = (rtNaN);
  }

  proc_control_node_B.t17_i = in1[4] * in1[5] * 2.0;
  proc_control_node_B.t18 = in1[4] * in1[6] * 2.0;
  proc_control_node_B.t19_c = in1[5] * in1[6] * 2.0;
  proc_control_node_B.t20_b = in1[3] * in1[4] * 2.0;
  proc_control_node_B.t21_g = in1[3] * in1[5] * 2.0;
  proc_control_node_B.t22_d = in1[3] * in1[6] * 2.0;
  proc_control_node_B.t23_f = in1[4] * in1[7] * 2.0;
  proc_control_node_B.t24_tmp = in1[5] * in1[7];
  proc_control_node_B.t24 = proc_control_node_B.t24_tmp * 2.0;
  proc_control_node_B.t25_tmp = in1[6] * in1[7];
  proc_control_node_B.t25_j = proc_control_node_B.t25_tmp * 2.0;
  proc_control_node_B.t26_e = in1[3] * in1[7] * 2.0;
  proc_control_node_B.t27_tmp = in1[4] * in1[8];
  proc_control_node_B.t27_p = proc_control_node_B.t27_tmp * 2.0;
  proc_control_node_B.t28_d = in1[5] * in1[8] * 2.0;
  proc_control_node_B.t29_tmp = in1[6] * in1[8];
  proc_control_node_B.t29_f = proc_control_node_B.t29_tmp * 2.0;
  proc_control_node_B.t30 = in1[3] * in1[8] * 2.0;
  proc_control_node_B.t31_tmp = in1[4] * in1[9];
  proc_control_node_B.t31 = proc_control_node_B.t31_tmp * 2.0;
  proc_control_node_B.t32_tmp = in1[5] * in1[9];
  proc_control_node_B.t32 = proc_control_node_B.t32_tmp * 2.0;
  proc_control_node_B.t33 = in1[6] * in1[9] * 2.0;
  proc_control_node_B.t34 = in1[3] * in1[9] * 2.0;
  proc_control_node_B.t39 = in1[4] / 2.0;
  proc_control_node_B.t40 = in1[5] / 2.0;
  proc_control_node_B.t41 = in1[6] / 2.0;
  proc_control_node_B.t42_n = in1[3] / 2.0;
  proc_control_node_B.t43 = in1[10] / 2.0;
  proc_control_node_B.t44 = in1[11] / 2.0;
  proc_control_node_B.t45 = in1[12] / 2.0;
  proc_control_node_B.t55 = in1[12] * 1.0571299073092789E-5;
  proc_control_node_B.t56 = in1[11] * 9.7602896722846373E-5;
  proc_control_node_B.t57_o = in1[8] * 0.01129023503850542;
  proc_control_node_B.t58_d = in1[7] * 0.00477039452928936;
  proc_control_node_B.t61 = in1[9] * 0.143523560675718;
  proc_control_node_B.t62_l = in1[7] * 0.00568699616459184;
  proc_control_node_B.t65_f = in1[9] * 0.069014505171846527;
  proc_control_node_B.t68 = in1[8] * 0.0071670223909459834;
  proc_control_node_B.t60 = -(in1[10] * 9.1703771260780813E-5);
  proc_control_node_B.t46 = -(in1[4] * in1[4] * 2.0);
  proc_control_node_B.t47 = -(in1[5] * in1[5] * 2.0);
  proc_control_node_B.t48 = -(in1[6] * in1[6] * 2.0);
  memset(&Anqv[0], 0, 39U * sizeof(real_T));
  Anqv[39] = -proc_control_node_B.t29_f + proc_control_node_B.t32;
  Anqv[40] = proc_control_node_B.t25_j - proc_control_node_B.t31;
  Anqv[41] = -proc_control_node_B.t24 + proc_control_node_B.t27_p;
  Anqv[42] = 0.0;
  Anqv[43] = proc_control_node_B.t43;
  Anqv[44] = proc_control_node_B.t44;
  Anqv[45] = proc_control_node_B.t45;
  Anqv[46] = in1[4] * -0.0013017970932508 + in1[5] * 0.4138016519122657;
  Anqv[47] = in1[4] * -0.51979016069898065 + in1[5] * 0.00099202109956931486;
  Anqv[48] = in1[4] * 0.033540735888224739 - in1[5] * 0.0058758415205803329;
  Anqv[49] = in1[4] * -25.242114556122988 + in1[5] * 0.1138522338822895;
  Anqv[50] = in1[4] * 0.1184627304742461 - in1[5] * 8.6371397256799973;
  Anqv[51] = in1[4] * 0.38451002147839958 + in1[5] * 0.65361132374006825;
  Anqv[52] = proc_control_node_B.t28_d + proc_control_node_B.t33;
  Anqv[53] = (proc_control_node_B.t24 - proc_control_node_B.t34) -
    proc_control_node_B.t27_tmp * 4.0;
  Anqv[54] = (proc_control_node_B.t25_j + proc_control_node_B.t30) -
    proc_control_node_B.t31_tmp * 4.0;
  Anqv[55] = -proc_control_node_B.t43;
  Anqv[56] = 0.0;
  Anqv[57] = -proc_control_node_B.t45;
  Anqv[58] = proc_control_node_B.t44;
  Anqv[59] = (in1[4] * -0.01263905936484723 - in1[6] * 0.4138016519122657) -
    in1[3] * 0.0013017970932508;
  Anqv[60] = (in1[4] * -0.05386046241846134 - in1[6] * 0.00099202109956931486) -
    in1[3] * 0.51979016069898065;
  Anqv[61] = (in1[4] * 0.37271497842704371 + in1[6] * 0.0058758415205803329) +
    in1[3] * 0.033540735888224739;
  Anqv[62] = (in1[4] * -4.2094140168137981 - in1[6] * 0.1138522338822895) - in1
    [3] * 25.242114556122988;
  Anqv[63] = (in1[4] * 0.73643595165049924 + in1[6] * 8.6371397256799973) + in1
    [3] * 0.1184627304742461;
  Anqv[64] = (in1[4] * 0.009785912146552939 - in1[6] * 0.65361132374006825) +
    in1[3] * 0.38451002147839958;
  Anqv[65] = (proc_control_node_B.t27_p + proc_control_node_B.t34) -
    proc_control_node_B.t24_tmp * 4.0;
  Anqv[66] = proc_control_node_B.t23_f + proc_control_node_B.t33;
  Anqv[67] = (-proc_control_node_B.t26_e + proc_control_node_B.t29_f) -
    proc_control_node_B.t32_tmp * 4.0;
  Anqv[68] = -proc_control_node_B.t44;
  Anqv[69] = proc_control_node_B.t45;
  Anqv[70] = 0.0;
  Anqv[71] = -proc_control_node_B.t43;
  Anqv[72] = (in1[5] * -0.01263905936484723 - in1[6] * 0.0013017970932508) +
    in1[3] * 0.4138016519122657;
  Anqv[73] = (in1[5] * -0.05386046241846134 - in1[6] * 0.51979016069898065) +
    in1[3] * 0.00099202109956931486;
  Anqv[74] = (in1[5] * 0.37271497842704371 + in1[6] * 0.033540735888224739) -
    in1[3] * 0.0058758415205803329;
  Anqv[75] = (in1[5] * -4.2094140168137981 - in1[6] * 25.242114556122988) + in1
    [3] * 0.1138522338822895;
  Anqv[76] = (in1[5] * 0.73643595165049924 + in1[6] * 0.1184627304742461) - in1
    [3] * 8.6371397256799973;
  Anqv[77] = (in1[5] * 0.009785912146552939 + in1[6] * 0.38451002147839958) +
    in1[3] * 0.65361132374006825;
  Anqv[78] = (-proc_control_node_B.t30 + proc_control_node_B.t31) -
    proc_control_node_B.t25_tmp * 4.0;
  Anqv[79] = (proc_control_node_B.t26_e + proc_control_node_B.t32) -
    proc_control_node_B.t29_tmp * 4.0;
  Anqv[80] = proc_control_node_B.t23_f + proc_control_node_B.t28_d;
  Anqv[81] = -proc_control_node_B.t45;
  Anqv[82] = -proc_control_node_B.t44;
  Anqv[83] = proc_control_node_B.t43;
  Anqv[84] = 0.0;
  Anqv[85] = in1[4] * -0.4138016519122657 - in1[5] * 0.0013017970932508;
  Anqv[86] = in1[4] * -0.00099202109956931486 - in1[5] * 0.51979016069898065;
  Anqv[87] = in1[4] * 0.0058758415205803329 + in1[5] * 0.033540735888224739;
  Anqv[88] = in1[4] * -0.1138522338822895 - in1[5] * 25.242114556122988;
  Anqv[89] = in1[4] * 8.6371397256799973 + in1[5] * 0.1184627304742461;
  Anqv[90] = in1[4] * -0.65361132374006825 + in1[5] * 0.38451002147839958;
  Anqv[91] = (proc_control_node_B.t47 + proc_control_node_B.t48) + 1.0;
  Anqv[92] = proc_control_node_B.t17_i + proc_control_node_B.t22_d;
  Anqv[93] = proc_control_node_B.t18 - proc_control_node_B.t21_g;
  Anqv[94] = 0.0;
  Anqv[95] = 0.0;
  Anqv[96] = 0.0;
  Anqv[97] = 0.0;
  proc_control_node_B.t11 *= in1[7];
  Anqv[98] = (((((proc_control_node_B.t5_o * -2.1702346224103071 +
                  proc_control_node_B.t55) + proc_control_node_B.t56) -
                proc_control_node_B.t57_o) - proc_control_node_B.t61) -
              proc_control_node_B.t11 * 2.1702346224103071) - 1.393963967942492;
  Anqv[99] = (((((in1[11] * 0.00041592787873873338 - in1[12] *
                  0.74121409319149256) - proc_control_node_B.t5_o *
                 6.6418641222266745E-5) + in1[8] * 0.00477039452928936) - in1[9]
               * 0.001468966557066211) - proc_control_node_B.t11 *
              6.6418641222266745E-5) - 4.2661374815185972E-5;
  Anqv[100] = (((((in1[11] * 0.69409782663856512 - in1[12] *
                   0.00032422410747795261) + proc_control_node_B.t5_o *
                  0.000478026096544767) - in1[8] * 5.890830655932608E-5) + in1[9]
                * 0.00568699616459184) + proc_control_node_B.t11 *
               0.000478026096544767) + 0.00030704106709879178;
  Anqv[101] = (((((in1[11] * 0.032506453976272241 + in1[12] *
                   0.24400486517334929) - proc_control_node_B.t5_o *
                  0.0091324271131215) + in1[8] * 0.044446246736648841) - in1[9] *
                0.1148218101592509) - proc_control_node_B.t11 *
               0.0091324271131215) - 0.0058658516476038621;
  Anqv[102] = (((((in1[11] * -0.00568699616459184 - in1[12] *
                   0.001145088836853196) + proc_control_node_B.t5_o *
                  0.7029300335915144) + in1[8] * 1.7911420833141059E-5) + in1[9]
                * 8.3502908029033716) + proc_control_node_B.t11 *
               0.7029300335915144) + 0.45149917372662912;
  Anqv[103] = (((((in1[11] * -7.5569972812640509E-5 - in1[12] *
                   0.00477039452928936) - proc_control_node_B.t5_o *
                  0.070935659387996786) - in1[8] * 5.91169722427816) - in1[9] *
                2.2977499514997389E-5) - proc_control_node_B.t11 *
               0.070935659387996786) - 0.045562701934636442;
  Anqv[104] = proc_control_node_B.t17_i - proc_control_node_B.t22_d;
  Anqv[105] = (proc_control_node_B.t46 + proc_control_node_B.t48) + 1.0;
  Anqv[106] = proc_control_node_B.t19_c + proc_control_node_B.t20_b;
  Anqv[107] = 0.0;
  Anqv[108] = 0.0;
  Anqv[109] = 0.0;
  Anqv[110] = 0.0;
  proc_control_node_B.t11 = proc_control_node_B.t12_i * in1[8];
  Anqv[111] = (((((in1[10] * -2.1519484922730651E-5 + in1[12] *
                   1.3454180758607359) - proc_control_node_B.t6_d *
                  8.534133102918034E-5) - in1[7] * 0.01129023503850542) - in1[9]
                * 0.00041111798914172931) - proc_control_node_B.t11 *
               8.534133102918034E-5) - 5.6881833086914632E-5;
  Anqv[112] = (((((proc_control_node_B.t6_d * -2.0891598644526952 +
                   proc_control_node_B.t55) + proc_control_node_B.t58_d) +
                 proc_control_node_B.t60) - proc_control_node_B.t65_f) -
               proc_control_node_B.t11 * 2.0891598644526952) -
    1.3924699939475591;
  Anqv[113] = (((((in1[10] * -0.93255469429176219 - in1[12] *
                   7.6083411800115719E-5) + proc_control_node_B.t6_d *
                  0.0026174377143812371) - in1[7] * 5.890830655932608E-5) + in1
                [9] * 0.0071670223909459834) + proc_control_node_B.t11 *
               0.0026174377143812371) + 0.0017445785458152919;
  Anqv[114] = (((((in1[10] * -0.0071670223909459834 + in1[12] *
                   0.00145353196782447) - proc_control_node_B.t6_d *
                  1.969833586913839) + in1[7] * 0.044446246736648841) - in1[9] *
                5.3937622658585171) - proc_control_node_B.t11 *
               1.969833586913839) - 1.312936462890641;
  Anqv[115] = (((((in1[10] * 0.0012538688125934979 - in1[12] *
                   0.1118794885864644) + proc_control_node_B.t6_d *
                  0.0092442191643639874) + in1[7] * 1.7911420833141059E-5) +
                in1[9] * 0.025315910649035739) + proc_control_node_B.t11 *
               0.0092442191643639874) + 0.0061614709447924592;
  Anqv[116] = (((((in1[10] * 1.6661666253314429E-5 + in1[12] *
                   0.01129023503850542) + proc_control_node_B.t6_d *
                  0.038511049195467273) - in1[7] * 5.91169722427816) + in1[9] *
                0.01257120723021817) + proc_control_node_B.t11 *
               0.038511049195467273) + 0.025668442780550419;
  Anqv[117] = proc_control_node_B.t18 + proc_control_node_B.t21_g;
  Anqv[118] = proc_control_node_B.t19_c - proc_control_node_B.t20_b;
  Anqv[119] = (proc_control_node_B.t46 + proc_control_node_B.t47) + 1.0;
  Anqv[120] = 0.0;
  Anqv[121] = 0.0;
  Anqv[122] = 0.0;
  Anqv[123] = 0.0;
  proc_control_node_B.t11 = proc_control_node_B.t13 * in1[9];
  Anqv[124] = (((((in1[10] * 2.989993556213668E-6 - in1[11] * 1.4431163638272659)
                  + proc_control_node_B.t7_g * 0.00075160410872115665) - in1[7] *
                 0.143523560675718) - in1[8] * 0.00041111798914172931) +
               proc_control_node_B.t11 * 0.00075160410872115665) +
    0.00047761943770923169;
  Anqv[125] = (((((in1[10] * 1.0731951852318531 - in1[11] * 1.356129262930646E-5)
                  + proc_control_node_B.t7_g * 0.003202908039496047) - in1[7] *
                 0.001468966557066211) - in1[8] * 0.069014505171846527) +
               proc_control_node_B.t11 * 0.003202908039496047) +
    0.002035341636784507;
  Anqv[126] = (((((proc_control_node_B.t7_g * -2.3556404377839351 +
                   proc_control_node_B.t56) + proc_control_node_B.t60) +
                 proc_control_node_B.t62_l) + proc_control_node_B.t68) -
               proc_control_node_B.t11 * 2.3556404377839351) -
    1.4969312278691931;
  Anqv[127] = (((((in1[10] * 0.069014505171846527 - in1[11] *
                   0.0018646499569661989) + proc_control_node_B.t7_g *
                  0.25032027930378509) - in1[7] * 0.1148218101592509) - in1[8] *
                5.3937622658585171) + proc_control_node_B.t11 *
               0.25032027930378509) + 0.15907022016113981;
  Anqv[128] = (((((in1[10] * -0.00032387772021301561 + in1[11] *
                   0.143523560675718) - proc_control_node_B.t7_g *
                  0.043793471578268892) + in1[7] * 8.3502908029033716) + in1[8] *
                0.025315910649035739) - proc_control_node_B.t11 *
               0.043793471578268892) - 0.0278292960720203;
  Anqv[129] = (((((in1[10] * -0.0013492616947596331 - in1[11] *
                   0.01448357294143097) - proc_control_node_B.t7_g *
                  0.000581936642958585) - in1[7] * 2.2977499514997389E-5) + in1
                [8] * 0.01257120723021817) - proc_control_node_B.t11 *
               0.000581936642958585) - 0.00036980140072038109;
  Anqv[130] = 0.0;
  Anqv[131] = 0.0;
  Anqv[132] = 0.0;
  Anqv[133] = -proc_control_node_B.t39;
  Anqv[134] = proc_control_node_B.t42_n;
  Anqv[135] = proc_control_node_B.t41;
  Anqv[136] = -proc_control_node_B.t40;
  proc_control_node_B.t11 = in1[10] * proc_control_node_B.t8;
  Anqv[137] = ((((((in1[10] * -0.00010396365424827521 - in1[11] *
                    0.0030560301354578762) - in1[12] * 0.030270009262121408) -
                  proc_control_node_B.t2_e * 0.0031718922773807468) - in1[8] *
                 2.1519484922730651E-5) + in1[9] * 2.989993556213668E-6) -
               proc_control_node_B.t11 * 0.0031718922773807468) -
    0.001303522588356414;
  Anqv[138] = ((((((in1[10] * 0.0028513455484883 - in1[11] *
                    0.00032316342950661811) + in1[12] * 4.2079285691049859E-5) -
                  proc_control_node_B.t2_e * 0.5324665467420534) - in1[8] *
                 9.1703771260780813E-5) + in1[9] * 1.0731951852318531) -
               proc_control_node_B.t11 * 0.5324665467420534) -
    0.2188227438151068;
  Anqv[139] = ((((((in1[10] * 0.023864851221217471 + in1[11] *
                    4.0426879502317728E-6) - in1[12] * 0.00016269010774240791) +
                  proc_control_node_B.t2_e * 0.0552956172536139) - in1[8] *
                 0.93255469429176219) - in1[9] * 9.1703771260780813E-5) +
               proc_control_node_B.t11 * 0.0552956172536139) +
    0.022724317165877118;
  Anqv[140] = ((((((in1[10] * 0.00017692814721597281 - in1[11] *
                    0.00301187450220627) + in1[12] * 0.0032852614324183722) -
                  proc_control_node_B.t2_e * 41.614410774923122) +
                 proc_control_node_B.t65_f) - proc_control_node_B.t68) -
               proc_control_node_B.t11 * 41.614410774923122) - 17.1018810547529;
  Anqv[141] = ((((((in1[10] * 0.005100926963153893 + in1[11] *
                    7.54282242443926E-5) + in1[12] * 0.76112100692746432) +
                  proc_control_node_B.t2_e * 0.19531945476327711) + in1[8] *
                 0.0012538688125934979) - in1[9] * 0.00032387772021301561) +
               proc_control_node_B.t11 * 0.19531945476327711) +
    0.080268590155159442;
  Anqv[142] = ((((((in1[10] * -0.0085297096290247246 - in1[11] *
                    0.59953739020136265) - in1[12] * 6.8948828938803766E-5) +
                  proc_control_node_B.t2_e * 0.096990441148357615) + in1[8] *
                 1.6661666253314429E-5) - in1[9] * 0.0013492616947596331) +
               proc_control_node_B.t11 * 0.096990441148357615) +
    0.039859244840414;
  Anqv[143] = 0.0;
  Anqv[144] = 0.0;
  Anqv[145] = 0.0;
  Anqv[146] = -proc_control_node_B.t40;
  Anqv[147] = -proc_control_node_B.t41;
  Anqv[148] = proc_control_node_B.t42_n;
  Anqv[149] = proc_control_node_B.t39;
  proc_control_node_B.t11 = in1[11] * proc_control_node_B.t9;
  Anqv[150] = ((((((in1[10] * -0.0030560301354578762 + in1[11] *
                    0.001929418735906703) + in1[12] * 6.2884941489263073E-5) +
                  proc_control_node_B.t3_p * 0.14619342578968819) + in1[7] *
                 9.7602896722846373E-5) - in1[9] * 1.4431163638272659) +
               proc_control_node_B.t11 * 0.14619342578968819) +
    0.0702332048019201;
  Anqv[151] = ((((((in1[10] * -0.00032316342950661811 + in1[11] *
                    4.5292476302332957E-6) - in1[12] * 0.016528998001422841) +
                  proc_control_node_B.t3_p * 0.001496292680706366) + in1[7] *
                 0.00041592787873873338) - in1[9] * 1.356129262930646E-5) +
               proc_control_node_B.t11 * 0.001496292680706366) +
    0.00071883827689245348;
  Anqv[152] = ((((((in1[10] * 4.0426879502317728E-6 + in1[11] *
                    0.023860477346842442) - in1[12] * 0.000941018323416786) -
                  proc_control_node_B.t3_p * 0.0057927872458027633) + in1[7] *
                 0.69409782663856512) + in1[9] * 9.7602896722846373E-5) -
               proc_control_node_B.t11 * 0.0057927872458027633) -
    0.00278292960720203;
  Anqv[153] = ((((((in1[10] * -0.00301187450220627 + in1[11] *
                    0.00082864946354184129) - in1[12] * 0.291807921220024) +
                  proc_control_node_B.t3_p * 0.11695775734327971) + in1[7] *
                 0.032506453976272241) - in1[9] * 0.0018646499569661989) +
               proc_control_node_B.t11 * 0.11695775734327971) +
    0.056188013108611608;
  Anqv[154] = ((((((in1[10] * 7.54282242443926E-5 - in1[11] *
                    0.00019446645525741661) - in1[12] * 0.003324115892995542) -
                  proc_control_node_B.t3_p * 8.5056252302351272) +
                 proc_control_node_B.t61) - proc_control_node_B.t62_l) -
               proc_control_node_B.t11 * 8.5056252302351272) -
    4.0862119177839169;
  Anqv[155] = ((((((in1[10] * -0.59953739020136265 + in1[11] *
                    0.0085432434746820687) + in1[12] * 0.0030111351640179931) +
                  proc_control_node_B.t3_p * 2.3404933338911259E-5) - in1[7] *
                 7.5569972812640509E-5) - in1[9] * 0.01448357294143097) +
               proc_control_node_B.t11 * 2.3404933338911259E-5) +
    1.12440314445589E-5;
  Anqv[156] = 0.0;
  Anqv[157] = 0.0;
  Anqv[158] = 0.0;
  Anqv[159] = -proc_control_node_B.t41;
  Anqv[160] = proc_control_node_B.t40;
  Anqv[161] = -proc_control_node_B.t39;
  Anqv[162] = proc_control_node_B.t42_n;
  proc_control_node_B.t11 = in1[12] * proc_control_node_B.t10;
  Anqv[163] = ((((((in1[10] * -0.030270009262121408 + in1[11] *
                    6.2884941489263073E-5) + in1[12] * 0.0020006959490984312) -
                  proc_control_node_B.t4_n * 0.011337579748337949) + in1[7] *
                 1.0571299073092789E-5) + in1[8] * 1.3454180758607359) -
               proc_control_node_B.t11 * 0.011337579748337949) -
    0.015187567311545479;
  Anqv[164] = ((((((in1[10] * 4.2079285691049859E-5 - in1[11] *
                    0.016528998001422841) + in1[12] * 0.00283488707941543) +
                  proc_control_node_B.t4_n * 0.004790398802363002) - in1[7] *
                 0.74121409319149256) + in1[8] * 1.0571299073092789E-5) +
               proc_control_node_B.t11 * 0.004790398802363002) +
    0.0064171106951376048;
  Anqv[165] = ((((((in1[10] * -0.00016269010774240791 - in1[11] *
                    0.000941018323416786) - in1[12] * 2.6641242336162E-6) -
                  proc_control_node_B.t4_n * 5.915533389500729E-5) - in1[7] *
                 0.00032422410747795261) - in1[8] * 7.6083411800115719E-5) -
               proc_control_node_B.t11 * 5.915533389500729E-5) -
    7.9243157297224521E-5;
  Anqv[166] = ((((((in1[10] * 0.0032852614324183722 - in1[11] *
                    0.291807921220024) - in1[12] * 0.00063467747547131872) +
                  proc_control_node_B.t4_n * 0.044632628565522622) + in1[7] *
                 0.24400486517334929) + in1[8] * 0.00145353196782447) +
               proc_control_node_B.t11 * 0.044632628565522622) +
    0.059788867260621;
  Anqv[167] = ((((((in1[10] * 0.76112100692746432 - in1[11] *
                    0.003324115892995542) - in1[12] * 0.005288701994301117) +
                  proc_control_node_B.t4_n * 1.7986530963190709E-5) - in1[7] *
                 0.001145088836853196) - in1[8] * 0.1118794885864644) +
               proc_control_node_B.t11 * 1.7986530963190709E-5) +
    2.409435309548336E-5;
  Anqv[168] = ((((((in1[10] * -6.8948828938803766E-5 + in1[11] *
                    0.0030111351640179931) + in1[12] * 1.7711862430984169E-5) -
                  proc_control_node_B.t4_n * 5.9364874601542628) +
                 proc_control_node_B.t57_o) - proc_control_node_B.t58_d) -
               proc_control_node_B.t11 * 5.9364874601542628) - 7.952385332368296;
}

// Function for MATLAB Function: '<S94>/NLMPC'
static void proc_control_node_AUVQuatSimFcn(const real_T in1[13], const real_T
  in2[8], real_T out1[13])
{
  real_T out1_tmp;
  proc_control_node_B.t8_o = in1[4] * in1[4];
  proc_control_node_B.t9_k = in1[5] * in1[5];
  proc_control_node_B.t11_j = in1[4] * in1[5] * 2.0;
  proc_control_node_B.t12_tmp = in1[4] * in1[6];
  proc_control_node_B.t12_d = proc_control_node_B.t12_tmp * 2.0;
  proc_control_node_B.t13_tmp = in1[5] * in1[6];
  proc_control_node_B.t13_f = proc_control_node_B.t13_tmp * 2.0;
  proc_control_node_B.t14_tmp = in1[3] * in1[4];
  proc_control_node_B.t14_a = proc_control_node_B.t14_tmp * 2.0;
  proc_control_node_B.t15_tmp = in1[3] * in1[5];
  proc_control_node_B.t15_e = proc_control_node_B.t15_tmp * 2.0;
  proc_control_node_B.t16_n = in1[3] * in1[6] * 2.0;
  proc_control_node_B.t24_o = in1[11] / 500.0;
  proc_control_node_B.t27_d = in1[10] / 1000.0;
  proc_control_node_B.t29_c = in1[12] * 0.018;
  proc_control_node_B.t41_m = in1[7] * 32.4648;
  proc_control_node_B.t44_o = in1[8] * 43.6156;
  proc_control_node_B.t45_b = in1[9] * 46.7695;
  proc_control_node_B.t17_m = proc_control_node_B.t8_o * 2.0;
  proc_control_node_B.t18_i = proc_control_node_B.t9_k * 2.0;
  proc_control_node_B.t19_i = in1[6] * in1[6] * 2.0;
  proc_control_node_B.t52 = proc_control_node_B.t24_o +
    proc_control_node_B.t29_c;
  proc_control_node_B.t24_o += proc_control_node_B.t27_d;
  proc_control_node_B.t55_g = proc_control_node_B.t27_d +
    proc_control_node_B.t29_c;
  proc_control_node_B.t27_d = in1[11] * 0.558 + proc_control_node_B.t41_m;
  proc_control_node_B.t29_c = in1[10] * 0.062 + proc_control_node_B.t45_b;
  proc_control_node_B.t65_m = in1[12] * 0.031 + proc_control_node_B.t44_o;
  proc_control_node_B.t68_n = (in1[11] / 125.0 + in1[12] / 250.0) + in1[10] *
    0.592;
  proc_control_node_B.t41_m = in1[12] * 0.062 + -proc_control_node_B.t41_m;
  proc_control_node_B.t44_o = in1[10] * 0.558 + -proc_control_node_B.t44_o;
  proc_control_node_B.t45_b = in1[11] * 0.031 + -proc_control_node_B.t45_b;
  proc_control_node_B.t69 = (in1[10] / 250.0 + -(in1[11] / 1000.0)) + in1[12] *
    1.8864;
  proc_control_node_B.t70_c = (in1[10] / 125.0 + -(in1[12] / 1000.0)) + in1[11] *
    1.7228;
  out1[0] = (((proc_control_node_B.t18_i + proc_control_node_B.t19_i) - 1.0) *
             -in1[7] + (proc_control_node_B.t12_d + proc_control_node_B.t15_e) *
             in1[9]) + (proc_control_node_B.t11_j - proc_control_node_B.t16_n) *
    in1[8];
  out1[1] = ((proc_control_node_B.t11_j + proc_control_node_B.t16_n) * in1[7] -
             ((proc_control_node_B.t17_m + proc_control_node_B.t19_i) - 1.0) *
             in1[8]) + (proc_control_node_B.t13_f - proc_control_node_B.t14_a) *
    in1[9];
  out1[2] = ((proc_control_node_B.t13_f + proc_control_node_B.t14_a) * in1[8] -
             ((proc_control_node_B.t17_m + proc_control_node_B.t18_i) - 1.0) *
             in1[9]) + (proc_control_node_B.t12_d - proc_control_node_B.t15_e) *
    in1[7];
  out1[3] = (in1[4] * in1[10] * -0.5 - in1[5] * in1[11] / 2.0) - in1[6] * in1[12]
    / 2.0;
  out1[4] = (in1[3] * in1[10] / 2.0 - in1[6] * in1[11] / 2.0) + in1[5] * in1[12]
    / 2.0;
  out1[5] = (in1[6] * in1[10] / 2.0 + in1[3] * in1[11] / 2.0) - in1[4] * in1[12]
    / 2.0;
  out1[6] = (in1[5] * in1[10] * -0.5 + in1[4] * in1[11] / 2.0) + in1[3] * in1[12]
    / 2.0;
  proc_control_node_B.t11_j = in1[10] * proc_control_node_B.t52;
  proc_control_node_B.t12_d = (fabs(in1[10]) * 24.333236 + 10.0) * in1[10];
  proc_control_node_B.t13_f = in1[10] * proc_control_node_B.t29_c;
  proc_control_node_B.t14_a = in1[10] * proc_control_node_B.t44_o;
  proc_control_node_B.t15_e = in1[10] * proc_control_node_B.t69;
  proc_control_node_B.t16_n = in1[10] * proc_control_node_B.t70_c;
  proc_control_node_B.t17_m = (fabs(in1[11]) * 14.5708 + 7.0) * in1[11];
  proc_control_node_B.t18_i = in1[11] * proc_control_node_B.t55_g;
  proc_control_node_B.t19_i = in1[11] * proc_control_node_B.t27_d;
  proc_control_node_B.out1_tmp = in1[11] * proc_control_node_B.t45_b;
  proc_control_node_B.out1_tmp_j = in1[11] * proc_control_node_B.t68_n;
  proc_control_node_B.t69 *= in1[11];
  proc_control_node_B.out1_tmp_e = in1[12] * proc_control_node_B.t24_o;
  proc_control_node_B.out1_tmp_ep = (fabs(in1[12]) * 11.19756 + 15.0) * in1[12];
  proc_control_node_B.out1_tmp_k = in1[12] * proc_control_node_B.t41_m;
  proc_control_node_B.out1_tmp_k4 = in1[12] * proc_control_node_B.t65_m;
  proc_control_node_B.t68_n *= in1[12];
  proc_control_node_B.t70_c *= in1[12];
  proc_control_node_B.t52 *= in1[7];
  proc_control_node_B.out1_tmp_i = (fabs(in1[7]) * 70.0596 + 45.0) * in1[7];
  proc_control_node_B.t65_m *= in1[7];
  proc_control_node_B.t45_b *= in1[7];
  proc_control_node_B.t55_g *= in1[8];
  proc_control_node_B.out1_tmp_eh = (fabs(in1[8]) * 90.0196 + 60.0) * in1[8];
  proc_control_node_B.t41_m *= in1[8];
  proc_control_node_B.t29_c *= in1[8];
  proc_control_node_B.t24_o *= in1[9];
  out1_tmp = (fabs(in1[9]) * 110.155248 + 70.0) * in1[9];
  proc_control_node_B.t27_d *= in1[9];
  proc_control_node_B.t44_o *= in1[9];
  out1[7] = (((((((((((((((((((((((((((((((((((((((((((((((in2[0] *
    -0.00033076834054020519 + in2[1] * 1.8595780444550231E-21) + in2[2] *
    0.00033506403327449372) + in2[3] * 0.00033363213569639753) - in2[4] *
    0.001819638864719295) - in2[5] * 0.0018124211550371481) + in2[6] *
    0.0018538731733468781) + in2[7] * 0.001778186846409557) -
    proc_control_node_B.t8_o * 0.0063195296824236141) - proc_control_node_B.t9_k
    * 0.0063195296824236141) + in2[0] * 1.4142135623730951 *
    0.015171119710606879) + in2[1] * 1.4142135623730951 * 0.014928824155507611)
    + in2[2] * 1.4142135623730951 * 0.015171119710606879) + in2[3] *
    1.4142135623730951 * 0.01516372519659284) - proc_control_node_B.t12_tmp *
    0.4138016519122657) - proc_control_node_B.t13_tmp * 0.0013017970932508) -
    proc_control_node_B.t14_tmp * 0.0013017970932508) +
    proc_control_node_B.t15_tmp * 0.4138016519122657) -
    proc_control_node_B.t11_j * 0.96028628902704993) - proc_control_node_B.t12_d
    * 0.0001303522588356414) + proc_control_node_B.t13_f * 9.4803055144857715E-7)
    - proc_control_node_B.t14_a * 6.8231348244175949E-6) -
    proc_control_node_B.t15_e * 0.010033314971702871) -
    proc_control_node_B.t16_n * 0.0010125044874363649) +
    proc_control_node_B.t17_m * 0.010033314971702871) -
    proc_control_node_B.t18_i * 2.9388947094905889E-5) -
    proc_control_node_B.t19_i * 6.8231348244175949E-6) +
    proc_control_node_B.out1_tmp * 0.030976977065388711) +
    proc_control_node_B.out1_tmp_j * 0.0010125044874363649) -
    proc_control_node_B.t69 * 0.0001303522588356414) +
    proc_control_node_B.out1_tmp_e * 0.0002115171795569455) -
    proc_control_node_B.out1_tmp_ep * 0.0010125044874363649) +
    proc_control_node_B.out1_tmp_k * 9.4803055144857715E-7) +
    proc_control_node_B.out1_tmp_k4 * 0.030976977065388711) +
    proc_control_node_B.t68_n * 0.010033314971702871) +
    proc_control_node_B.t70_c * 0.0001303522588356414) + proc_control_node_B.t52
                        * 0.0040409200239048832) -
                       proc_control_node_B.out1_tmp_i * 0.030976977065388711) -
                      proc_control_node_B.t65_m * 0.0010125044874363649) +
                     proc_control_node_B.t45_b * 0.010033314971702871) -
                    proc_control_node_B.t55_g * 0.311032764122789) -
                   proc_control_node_B.out1_tmp_eh * 9.4803055144857715E-7) -
                  proc_control_node_B.t41_m * 0.0010125044874363649) -
                 proc_control_node_B.t29_c * 0.0001303522588356414) +
                proc_control_node_B.t24_o * 0.031387639110527318) + out1_tmp *
               6.8231348244175949E-6) + proc_control_node_B.t27_d *
              0.010033314971702871) - proc_control_node_B.t44_o *
             0.0001303522588356414) + 0.003159764841211807;
  out1[8] = (((((((((((((((((((((((((((((((((((((((((((((((in2[0] *
    0.00013975754063522079 + in2[1] * 7.9244610288113972E-21) - in2[2] *
    0.00014157257363048341) - in2[3] * 0.0001409675626320625) - in2[4] *
    0.0034249251816346319) + in2[5] * 0.003387750973601051) + in2[6] *
    0.0035708122797193441) - in2[7] * 0.0035336380716857632) -
    proc_control_node_B.t8_o * 0.02693023120923067) - proc_control_node_B.t9_k *
    0.02693023120923067) - in2[0] * 1.4142135623730951 * 0.01090649593858282) +
    in2[1] * 1.4142135623730951 * 0.011000123045544621) - in2[2] *
    1.4142135623730951 * 0.01090649593858282) + in2[3] * 1.4142135623730951 *
    0.01090087173345982) - proc_control_node_B.t12_tmp * 0.00099202109956931486)
    - proc_control_node_B.t13_tmp * 0.51979016069898065) -
    proc_control_node_B.t14_tmp * 0.51979016069898065) +
    proc_control_node_B.t15_tmp * 0.00099202109956931486) -
    proc_control_node_B.t11_j * 2.9388947094905889E-5) -
    proc_control_node_B.t12_d * 0.021882274381510681) +
    proc_control_node_B.t13_f * 0.02320783323245932) - proc_control_node_B.t14_a
    * 2.9076309096921531E-5) - proc_control_node_B.t15_e * 0.0001026911824132076)
    + proc_control_node_B.t16_n * 0.00042780737967584029) +
    proc_control_node_B.t17_m * 0.0001026911824132076) -
    proc_control_node_B.t18_i * 0.71944283020623911) - proc_control_node_B.t19_i
    * 2.9076309096921531E-5) + proc_control_node_B.out1_tmp *
    9.4803055144857715E-7) - proc_control_node_B.out1_tmp_j *
    0.00042780737967584029) - proc_control_node_B.t69 * 0.021882274381510681) +
    proc_control_node_B.out1_tmp_e * 0.00090136558200456737) +
    proc_control_node_B.out1_tmp_ep * 0.00042780737967584029) +
    proc_control_node_B.out1_tmp_k * 0.02320783323245932) +
    proc_control_node_B.out1_tmp_k4 * 9.4803055144857715E-7) +
    proc_control_node_B.t68_n * 0.0001026911824132076) +
    proc_control_node_B.t70_c * 0.021882274381510681) + proc_control_node_B.t52 *
                        0.678350505826831) - proc_control_node_B.out1_tmp_i *
                       9.4803055144857715E-7) + proc_control_node_B.t65_m *
                      0.00042780737967584029) + proc_control_node_B.t45_b *
                     0.0001026911824132076) - proc_control_node_B.t55_g *
                    0.0031834266548094372) - proc_control_node_B.out1_tmp_eh *
                   0.02320783323245932) + proc_control_node_B.t41_m *
                  0.00042780737967584029) - proc_control_node_B.t29_c *
                 0.021882274381510681) - proc_control_node_B.t24_o *
                0.013262028769951049) + out1_tmp * 2.9076309096921531E-5) +
              proc_control_node_B.t27_d * 0.0001026911824132076) -
             proc_control_node_B.t44_o * 0.021882274381510681) +
    0.01346511560461533;
  out1[9] = (((((((((((((((((((((((((((((((((((((((((((((((in2[0] *
    -1.725827915740819E-6 - in2[1] * 5.8281975682474322E-18) + in2[2] *
    1.748241265284163E-6) + in2[3] * 1.740770148765829E-6) - in2[4] *
    0.02095639900015615) + in2[5] * 0.021100316216985739) - in2[6] *
    0.021822949502860629) + in2[7] * 0.02167903228603104) +
    proc_control_node_B.t8_o * 0.18635748921352191) + proc_control_node_B.t9_k *
    0.18635748921352191) - in2[0] * 1.4142135623730951 * 4.8869263875916949E-5)
    + in2[1] * 1.4142135623730951 * 6.6264429389244648E-5) - in2[2] *
    1.4142135623730951 * 4.8869263875916949E-5) + in2[3] * 1.4142135623730951 *
    6.7490056888775055E-5) + proc_control_node_B.t12_tmp * 0.0058758415205803329)
    + proc_control_node_B.t13_tmp * 0.033540735888224739) +
    proc_control_node_B.t14_tmp * 0.033540735888224739) -
    proc_control_node_B.t15_tmp * 0.0058758415205803329) +
    proc_control_node_B.t11_j * 0.0002115171795569455) +
    proc_control_node_B.t12_d * 0.002272431716587712) -
    proc_control_node_B.t13_f * 2.9076309096921531E-5) +
    proc_control_node_B.t14_a * 0.021384731826702759) +
    proc_control_node_B.t15_e * 0.00039756137245743289) -
    proc_control_node_B.t16_n * 5.2828771531483014E-6) -
    proc_control_node_B.t17_m * 0.00039756137245743289) +
    proc_control_node_B.t18_i * 0.00090136558200456737) +
    proc_control_node_B.t19_i * 0.021384731826702759) -
    proc_control_node_B.out1_tmp * 6.8231348244175949E-6) +
    proc_control_node_B.out1_tmp_j * 5.2828771531483014E-6) +
    proc_control_node_B.t69 * 0.002272431716587712) -
    proc_control_node_B.out1_tmp_e * 0.66292668662778553) -
    proc_control_node_B.out1_tmp_ep * 5.2828771531483014E-6) -
    proc_control_node_B.out1_tmp_k * 2.9076309096921531E-5) -
    proc_control_node_B.out1_tmp_k4 * 6.8231348244175949E-6) -
    proc_control_node_B.t68_n * 0.00039756137245743289) -
    proc_control_node_B.t70_c * 0.002272431716587712) - proc_control_node_B.t52 *
                        0.070445383214219059) + proc_control_node_B.out1_tmp_i *
                       6.8231348244175949E-6) - proc_control_node_B.t65_m *
                      5.2828771531483014E-6) - proc_control_node_B.t45_b *
                     0.00039756137245743289) + proc_control_node_B.t55_g *
                    0.01232440254618042) + proc_control_node_B.out1_tmp_eh *
                   2.9076309096921531E-5) - proc_control_node_B.t41_m *
                  5.2828771531483014E-6) + proc_control_node_B.t29_c *
                 0.002272431716587712) + proc_control_node_B.t24_o *
                0.00016376919174759729) - out1_tmp * 0.021384731826702759) -
              proc_control_node_B.t27_d * 0.00039756137245743289) +
             proc_control_node_B.t44_o * 0.002272431716587712) -
    0.093178744606760927;
  out1[10] = (((((((((((((((((((((((((((((((((((((((((((((((in2[0] *
    0.0013021350951669831 + in2[1] * 6.1932883292401409E-19) - in2[2] *
    0.00131904594055876) - in2[3] * 0.0013134089920948341) - in2[4] *
    0.26767193546582568) + in2[5] * 0.26476621250220889) + in2[6] *
    0.2790736050389333) - in2[7] * 0.27616788207531651) -
    proc_control_node_B.t8_o * 2.1047070084068991) - proc_control_node_B.t9_k *
    2.1047070084068991) + in2[0] * 1.4142135623730951 * 0.043593198825375247) -
    in2[1] * 1.4142135623730951 * 0.043051831063235027) + in2[2] *
    1.4142135623730951 * 0.043593198825375247) - in2[3] * 1.4142135623730951 *
    0.043976565543532631) - proc_control_node_B.t12_tmp * 0.1138522338822895) -
    proc_control_node_B.t13_tmp * 25.242114556122988) -
    proc_control_node_B.t14_tmp * 25.242114556122988) +
    proc_control_node_B.t15_tmp * 0.1138522338822895) -
    proc_control_node_B.t11_j * 0.0040409200239048832) -
    proc_control_node_B.t12_d * 1.71018810547529) + proc_control_node_B.t13_f *
    0.021882274381510681) - proc_control_node_B.t14_a * 0.002272431716587712) -
    proc_control_node_B.t15_e * 0.0080268590155159435) +
    proc_control_node_B.t16_n * 0.0039859244840414) + proc_control_node_B.t17_m *
    0.0080268590155159435) - proc_control_node_B.t18_i * 0.678350505826831) -
    proc_control_node_B.t19_i * 0.002272431716587712) +
    proc_control_node_B.out1_tmp * 0.0001303522588356414) -
    proc_control_node_B.out1_tmp_j * 0.0039859244840414) -
    proc_control_node_B.t69 * 1.71018810547529) + proc_control_node_B.out1_tmp_e
    * 0.070445383214219059) + proc_control_node_B.out1_tmp_ep *
    0.0039859244840414) + proc_control_node_B.out1_tmp_k * 0.021882274381510681)
    + proc_control_node_B.out1_tmp_k4 * 0.0001303522588356414) +
    proc_control_node_B.t68_n * 0.0080268590155159435) +
    proc_control_node_B.t70_c * 1.71018810547529) + proc_control_node_B.t52 *
    53.015831269733987) - proc_control_node_B.out1_tmp_i * 0.0001303522588356414)
                       + proc_control_node_B.t65_m * 0.0039859244840414) +
                      proc_control_node_B.t45_b * 0.0080268590155159435) -
                     proc_control_node_B.t55_g * 0.2488326294809943) -
                    proc_control_node_B.out1_tmp_eh * 0.021882274381510681) +
                   proc_control_node_B.t41_m * 0.0039859244840414) -
                  proc_control_node_B.t29_c * 1.71018810547529) -
                 proc_control_node_B.t24_o * 0.1235636590052834) + out1_tmp *
                0.002272431716587712) + proc_control_node_B.t27_d *
               0.0080268590155159435) - proc_control_node_B.t44_o *
              1.71018810547529) + 1.0523535042034491;
  out1[11] = (((((((((((((((((((((((((((((((((((((((((((((((in2[0] *
    5.24748238233168E-7 - in2[1] * 1.083514276897426E-19) - in2[2] *
    5.3156315041823265E-7) - in2[3] * 5.2929151302328333E-7) + in2[4] *
    0.10593667623599359) + in2[5] * 0.10537885436940329) - in2[6] *
    0.10793139553633729) - in2[7] * 0.1033841350690595) +
    proc_control_node_B.t8_o * 0.36821797582524962) + proc_control_node_B.t9_k *
    0.36821797582524962) + in2[0] * 1.4142135623730951 * 0.013457654526727991) +
    in2[1] * 1.4142135623730951 * 0.013869054980635681) + in2[2] *
    1.4142135623730951 * 0.013457654526727991) + in2[3] * 1.4142135623730951 *
    0.01386868232130781) + proc_control_node_B.t12_tmp * 8.6371397256799973) +
    proc_control_node_B.t13_tmp * 0.1184627304742461) +
    proc_control_node_B.t14_tmp * 0.1184627304742461) -
    proc_control_node_B.t15_tmp * 8.6371397256799973) +
    proc_control_node_B.t11_j * 0.311032764122789) + proc_control_node_B.t12_d *
    0.0080268590155159435) - proc_control_node_B.t13_f * 0.0001026911824132076)
    + proc_control_node_B.t14_a * 0.00039756137245743289) +
    proc_control_node_B.t15_e * 0.58374455968341665) + proc_control_node_B.t16_n
    * 1.606290206365557E-6) - proc_control_node_B.t17_m * 0.58374455968341665) +
    proc_control_node_B.t18_i * 0.0031834266548094372) +
    proc_control_node_B.t19_i * 0.00039756137245743289) -
    proc_control_node_B.out1_tmp * 0.010033314971702871) -
    proc_control_node_B.out1_tmp_j * 1.606290206365557E-6) +
    proc_control_node_B.t69 * 0.0080268590155159435) -
    proc_control_node_B.out1_tmp_e * 0.01232440254618042) +
    proc_control_node_B.out1_tmp_ep * 1.606290206365557E-6) -
    proc_control_node_B.out1_tmp_k * 0.0001026911824132076) -
    proc_control_node_B.out1_tmp_k4 * 0.010033314971702871) -
    proc_control_node_B.t68_n * 0.58374455968341665) - proc_control_node_B.t70_c
    * 0.0080268590155159435) - proc_control_node_B.t52 * 0.2488326294809943) +
                        proc_control_node_B.out1_tmp_i * 0.010033314971702871) +
                       proc_control_node_B.t65_m * 1.606290206365557E-6) -
                      proc_control_node_B.t45_b * 0.58374455968341665) +
                     proc_control_node_B.t55_g * 18.096081350185919) +
                    proc_control_node_B.out1_tmp_eh * 0.0001026911824132076) +
                   proc_control_node_B.t41_m * 1.606290206365557E-6) +
                  proc_control_node_B.t29_c * 0.0080268590155159435) -
                 proc_control_node_B.t24_o * 4.9794996397332282E-5) - out1_tmp *
                0.00039756137245743289) - proc_control_node_B.t27_d *
               0.58374455968341665) + proc_control_node_B.t44_o *
              0.0080268590155159435) - 0.18410898791262481;
  out1[12] = (((((((((((((((((((((((((((((((((((((((((((((((in2[0] *
    -0.1731941163298826 - in2[1] * 1.4397960202092559E-21) + in2[2] *
    0.175443390567933) + in2[3] * 0.17469363248858291) + in2[4] *
    0.00062021813460420567) - in2[5] * 0.0006207996116589) - in2[6] *
    0.00064672437426625525) + in2[7] * 0.00064730585132094889) +
    proc_control_node_B.t8_o * 0.0048929560732764686) + proc_control_node_B.t9_k
    * 0.0048929560732764686) + in2[0] * 1.4142135623730951 *
    0.00059255494878017434) - in2[1] * 1.4142135623730951 * 0.1225770464045467)
    + in2[2] * 1.4142135623730951 * 0.00059255494878017434) + in2[3] *
    1.4142135623730951 * 0.00041984673608298361) - proc_control_node_B.t12_tmp *
    0.65361132374006825) + proc_control_node_B.t13_tmp * 0.38451002147839958) +
    proc_control_node_B.t14_tmp * 0.38451002147839958) +
    proc_control_node_B.t15_tmp * 0.65361132374006825) -
    proc_control_node_B.t11_j * 0.031387639110527318) +
    proc_control_node_B.t12_d * 0.0039859244840414) - proc_control_node_B.t13_f *
    0.00042780737967584029) + proc_control_node_B.t14_a * 5.2828771531483014E-6)
    - proc_control_node_B.t15_e * 1.606290206365557E-6) -
    proc_control_node_B.t16_n * 0.53015902215788635) + proc_control_node_B.t17_m
    * 1.606290206365557E-6) + proc_control_node_B.t18_i * 0.013262028769951049)
    + proc_control_node_B.t19_i * 5.2828771531483014E-6) +
    proc_control_node_B.out1_tmp * 0.0010125044874363649) +
    proc_control_node_B.out1_tmp_j * 0.53015902215788635) +
    proc_control_node_B.t69 * 0.0039859244840414) -
    proc_control_node_B.out1_tmp_e * 0.00016376919174759729) -
    proc_control_node_B.out1_tmp_ep * 0.53015902215788635) -
    proc_control_node_B.out1_tmp_k * 0.00042780737967584029) +
    proc_control_node_B.out1_tmp_k4 * 0.0010125044874363649) +
    proc_control_node_B.t68_n * 1.606290206365557E-6) -
    proc_control_node_B.t70_c * 0.0039859244840414) - proc_control_node_B.t52 *
    0.1235636590052834) - proc_control_node_B.out1_tmp_i * 0.0010125044874363649)
                       - proc_control_node_B.t65_m * 0.53015902215788635) +
                      proc_control_node_B.t45_b * 1.606290206365557E-6) -
                     proc_control_node_B.t55_g * 4.9794996397332282E-5) +
                    proc_control_node_B.out1_tmp_eh * 0.00042780737967584029) -
                   proc_control_node_B.t41_m * 0.53015902215788635) +
                  proc_control_node_B.t29_c * 0.0039859244840414) +
                 proc_control_node_B.t24_o * 16.434929686894481) - out1_tmp *
                5.2828771531483014E-6) + proc_control_node_B.t27_d *
               1.606290206365557E-6) + proc_control_node_B.t44_o *
              0.0039859244840414) - 0.0024464780366382352;
}

// Function for MATLAB Function: '<S94>/NLMPC'
static void proc_control_nod_stateEvolution(const real_T X[65], const real_T U
  [40], real_T c[52], real_T J[3588])
{
  int32_T Ak1_tmp;
  int32_T Jx_tmp;
  int32_T c_tmp;
  int32_T i;
  int32_T k;
  static const int8_T Iz2u[512] = { 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 1 };

  static const real_T val[104] = { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0052811087276464575, -0.0038210892334189206, -1.7709350918063036E-5,
    0.015738057025309886, 0.004758130574417159, -0.0430890292712166, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0052781363977504828, 0.0038891307996955097,
    2.3428013686294567E-5, -0.01522112084365557, 0.0049034514127282757,
    -0.043337530365236542, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0054475668211001324, -0.0038914217619853467, -1.6840833622806792E-5,
    0.015082761766378449, 0.0047578664965699964, 0.044070347453237305, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.005444594491204156, 0.0038187982711290814,
    2.4296530981550811E-5, -0.015876416102587006, 0.0049031873348811148,
    0.04382184635921739, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -0.00045490971617982376, -0.000856231295408658, -0.0052390997500390375,
    -0.066917983866456421, 0.0264841690589984, 0.00015505453365105142, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, -0.000453105288759287, 0.00084693774340026276,
    0.0052750790542464348, 0.066191553125552222, 0.026344713592350823,
    -0.000155199902914725, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.00046346829333671953, 0.000892703069929836, -0.0054557373757151573,
    0.069768401259733326, -0.026982848884084323, -0.00016168109356656381, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00044454671160238925, -0.0008834095179214408,
    0.00541975807150776, -0.069041970518829127, -0.025846033767264874,
    0.00016182646283023722 };

  memset(&proc_control_node_B.Jx_l[0], 0, 2704U * sizeof(real_T));
  memset(&proc_control_node_B.Jmv[0], 0, 1664U * sizeof(real_T));
  memset(&c[0], 0, 52U * sizeof(real_T));
  for (Jx_tmp = 0; Jx_tmp < 13; Jx_tmp++) {
    proc_control_node_B.ic_g[Jx_tmp] = static_cast<real_T>(Jx_tmp) + 1.0;
  }

  for (Jx_tmp = 0; Jx_tmp < 5; Jx_tmp++) {
    for (i = 0; i < 8; i++) {
      proc_control_node_B.b_U[i + (Jx_tmp << 3)] = U[5 * i + Jx_tmp];
    }

    for (i = 0; i < 13; i++) {
      proc_control_node_B.b_X[i + 13 * Jx_tmp] = X[5 * i + Jx_tmp];
    }
  }

  for (i = 0; i < 4; i++) {
    proc_cont_AUVQuatJacobianMatrix(&proc_control_node_B.b_X[13 * i],
      proc_control_node_B.Ak);
    Ak1_tmp = (i + 1) * 13;
    proc_cont_AUVQuatJacobianMatrix(&proc_control_node_B.b_X[Ak1_tmp],
      proc_control_node_B.Ak1);
    Jx_tmp = i << 3;
    proc_control_node_AUVQuatSimFcn(&proc_control_node_B.b_X[13 * i],
      &proc_control_node_B.b_U[Jx_tmp], proc_control_node_B.dv14);
    proc_control_node_AUVQuatSimFcn(&proc_control_node_B.b_X[Ak1_tmp],
      &proc_control_node_B.b_U[Jx_tmp], proc_control_node_B.dv15);
    for (k = 0; k < 13; k++) {
      c_tmp = static_cast<int32_T>(proc_control_node_B.ic_g[k]);
      c[c_tmp - 1] = (proc_control_node_B.b_X[13 * i + k] +
                      (proc_control_node_B.dv14[k] + proc_control_node_B.dv15[k])
                      * 0.125) - proc_control_node_B.b_X[Ak1_tmp + k];
      if (i + 1 > 1) {
        for (Jx_tmp = 0; Jx_tmp < 13; Jx_tmp++) {
          proc_control_node_B.Jx_l[((static_cast<int32_T>
            (proc_control_node_B.ic_g[Jx_tmp]) + 52 * k) + 676 * (i - 1)) - 1] =
            proc_control_node_B.Ak[13 * k + Jx_tmp] * 0.125;
        }

        proc_control_node_B.Jx_l[((static_cast<int32_T>
          (proc_control_node_B.ic_g[k]) + 52 * k) + 676 * (i - 1)) - 1] =
          proc_control_node_B.Jx_l[((52 * k + c_tmp) + (i - 1) * 676) - 1] + 1.0;
      }
    }

    for (Ak1_tmp = 0; Ak1_tmp < 13; Ak1_tmp++) {
      for (Jx_tmp = 0; Jx_tmp < 13; Jx_tmp++) {
        proc_control_node_B.Jx_l[((static_cast<int32_T>
          (proc_control_node_B.ic_g[Jx_tmp]) + 52 * Ak1_tmp) + 676 * i) - 1] =
          proc_control_node_B.Ak1[13 * Ak1_tmp + Jx_tmp] * 0.125;
      }

      Jx_tmp = ((52 * Ak1_tmp + static_cast<int32_T>
                 (proc_control_node_B.ic_g[Ak1_tmp])) + 676 * i) - 1;
      proc_control_node_B.Jx_l[Jx_tmp]--;
    }

    for (Ak1_tmp = 0; Ak1_tmp < 8; Ak1_tmp++) {
      for (Jx_tmp = 0; Jx_tmp < 13; Jx_tmp++) {
        proc_control_node_B.Jmv[((static_cast<int32_T>
          (proc_control_node_B.ic_g[Jx_tmp]) + 52 * Ak1_tmp) + 416 * i) - 1] =
          val[13 * Ak1_tmp + Jx_tmp];
      }
    }

    for (Jx_tmp = 0; Jx_tmp < 13; Jx_tmp++) {
      proc_control_node_B.ic_g[Jx_tmp] += 13.0;
    }
  }

  for (Jx_tmp = 0; Jx_tmp < 16; Jx_tmp++) {
    for (i = 0; i < 52; i++) {
      Ak1_tmp = Jx_tmp + (i << 4);
      proc_control_node_B.Jmv_a[Ak1_tmp] = 0.0;
      for (k = 0; k < 32; k++) {
        proc_control_node_B.Jmv_a[Ak1_tmp] += proc_control_node_B.Jmv[52 * k + i]
          * static_cast<real_T>(Iz2u[(Jx_tmp << 5) + k]);
      }
    }
  }

  for (Jx_tmp = 0; Jx_tmp < 52; Jx_tmp++) {
    for (i = 0; i < 52; i++) {
      J[i + 69 * Jx_tmp] = proc_control_node_B.Jx_l[52 * i + Jx_tmp];
    }
  }

  for (Jx_tmp = 0; Jx_tmp < 52; Jx_tmp++) {
    memcpy(&J[Jx_tmp * 69 + 52], &proc_control_node_B.Jmv_a[Jx_tmp << 4], sizeof
           (real_T) << 4U);
  }

  for (Jx_tmp = 0; Jx_tmp < 52; Jx_tmp++) {
    J[69 * Jx_tmp + 68] = 0.0;
  }
}

// Function for MATLAB Function: '<S94>/NLMPC'
static void proc_control_node_all(const boolean_T x[52], boolean_T y[13])
{
  int32_T i;
  int32_T i2;
  int32_T ix;
  boolean_T exitg1;
  i2 = 1;
  for (i = 0; i < 13; i++) {
    y[i] = true;
    ix = i2;
    i2 += 4;
    exitg1 = false;
    while ((!exitg1) && (ix <= i2 - 1)) {
      if (!x[ix - 1]) {
        y[i] = false;
        exitg1 = true;
      } else {
        ix++;
      }
    }
  }
}

// Function for MATLAB Function: '<S94>/NLMPC'
static void proc_control_node_isfinite_m(const real_T x[13], boolean_T b[13])
{
  int32_T i;
  for (i = 0; i < 13; i++) {
    proc_control_node_B.x_cc = x[i];
    b[i] = ((!rtIsInf(proc_control_node_B.x_cc)) && (!rtIsNaN
             (proc_control_node_B.x_cc)));
  }
}

// Function for MATLAB Function: '<S94>/NLMPC'
static boolean_T proc_control_node_any(const boolean_T x[26])
{
  int32_T k;
  boolean_T exitg1;
  boolean_T y;
  y = false;
  k = 0;
  exitg1 = false;
  while ((!exitg1) && (k <= 25)) {
    if (!x[k]) {
      k++;
    } else {
      y = true;
      exitg1 = true;
    }
  }

  return y;
}

// Function for MATLAB Function: '<S94>/NLMPC'
static void proc_cont_znlmpc_reformJacobian(const real_T Jx_data[], const
  int32_T Jx_size[3], const real_T Jmv_data[], const real_T Je_data[], const
  int32_T *Je_size, real_T Jc_data[], int32_T Jc_size[2])
{
  int8_T Jx[2];
  if (Jx_size[0] == 0) {
    Jc_size[0] = 0;
    Jc_size[1] = 0;
  } else {
    Jx[0] = static_cast<int8_T>(Jx_size[0]);
    Jx[1] = 52;
    proc_control_node_B.varargin_1_size_idx_1_tmp = static_cast<int8_T>(Jx_size
      [0]);
    for (proc_control_node_B.i8 = 0; proc_control_node_B.i8 <
         proc_control_node_B.varargin_1_size_idx_1_tmp; proc_control_node_B.i8++)
    {
      for (proc_control_node_B.i7 = 0; proc_control_node_B.i7 < 52;
           proc_control_node_B.i7++) {
        proc_control_node_B.varargin_1_data[proc_control_node_B.i7 + 52 *
          proc_control_node_B.i8] = Jx_data[proc_control_node_B.i8 + Jx[0] *
          proc_control_node_B.i7];
      }
    }

    proc_control_node_B.Jx_c[0] = Jx_size[0];
    proc_control_node_B.Jx_c[1] = 32;
    proc_control_node_mtimes(Jmv_data, proc_control_node_B.Jx_c,
      proc_control_node_B.tmp_data_a, proc_control_node_B.tmp_size_e);
    proc_control_node_B.loop_ub_nj = proc_control_node_B.tmp_size_e[0];
    for (proc_control_node_B.i8 = 0; proc_control_node_B.i8 <
         proc_control_node_B.loop_ub_nj; proc_control_node_B.i8++) {
      for (proc_control_node_B.i7 = 0; proc_control_node_B.i7 < 16;
           proc_control_node_B.i7++) {
        proc_control_node_B.varargin_2_data[proc_control_node_B.i7 +
          (proc_control_node_B.i8 << 4)] =
          proc_control_node_B.tmp_data_a[proc_control_node_B.i8 +
          proc_control_node_B.tmp_size_e[0] * proc_control_node_B.i7];
      }
    }

    if (proc_control_node_B.tmp_size_e[0] != 0) {
      proc_control_node_B.empty_non_axis_sizes_idx_0 = 16;
    } else {
      proc_control_node_B.empty_non_axis_sizes_idx_0 = 0;
    }

    proc_control_node_B.loop_ub_nj = *Je_size;
    if (0 <= proc_control_node_B.loop_ub_nj - 1) {
      memcpy(&proc_control_node_B.Je_data[0], &Je_data[0],
             proc_control_node_B.loop_ub_nj * sizeof(real_T));
    }

    Jx[0] = static_cast<int8_T>(static_cast<int8_T>(*Je_size) != 0);
    Jx[1] = static_cast<int8_T>(Jx_size[0]);
    Jc_size[0] = (proc_control_node_B.empty_non_axis_sizes_idx_0 + Jx[0]) + 52;
    Jc_size[1] = static_cast<int8_T>(Jx_size[0]);
    for (proc_control_node_B.i8 = 0; proc_control_node_B.i8 <
         proc_control_node_B.varargin_1_size_idx_1_tmp; proc_control_node_B.i8++)
    {
      for (proc_control_node_B.i7 = 0; proc_control_node_B.i7 < 52;
           proc_control_node_B.i7++) {
        Jc_data[proc_control_node_B.i7 + Jc_size[0] * proc_control_node_B.i8] =
          proc_control_node_B.varargin_1_data[proc_control_node_B.i7 + 52 *
          proc_control_node_B.i8];
      }
    }

    for (proc_control_node_B.i8 = 0; proc_control_node_B.i8 <
         proc_control_node_B.varargin_1_size_idx_1_tmp; proc_control_node_B.i8++)
    {
      for (proc_control_node_B.i7 = 0; proc_control_node_B.i7 <
           proc_control_node_B.empty_non_axis_sizes_idx_0;
           proc_control_node_B.i7++) {
        Jc_data[(proc_control_node_B.i7 + Jc_size[0] * proc_control_node_B.i8) +
          52] = proc_control_node_B.varargin_2_data[proc_control_node_B.i7 +
          (proc_control_node_B.i8 << 4)];
      }
    }

    proc_control_node_B.loop_ub_nj = static_cast<int8_T>(Jx_size[0]);
    if (0 <= Jx[0] - 1) {
      for (proc_control_node_B.i8 = 0; proc_control_node_B.i8 <
           proc_control_node_B.loop_ub_nj; proc_control_node_B.i8++) {
        Jc_data[(proc_control_node_B.empty_non_axis_sizes_idx_0 + Jc_size[0] *
                 proc_control_node_B.i8) + 52] = proc_control_node_B.Je_data[Jx
          [0] * proc_control_node_B.i8];
      }
    }
  }
}

// Function for MATLAB Function: '<S94>/NLMPC'
static void proc_control_node_outputBounds(const real_T runtimedata_OutputMin[52],
  const real_T runtimedata_OutputMax[52], const real_T X[65], real_T e, real_T
  c_data[], int32_T c_size[2], real_T Jc_data[], int32_T Jc_size[2])
{
  boolean_T exitg1;
  boolean_T y;
  for (proc_control_node_B.d_k = 0; proc_control_node_B.d_k < 52;
       proc_control_node_B.d_k++) {
    proc_control_node_B.bv1[proc_control_node_B.d_k] = rtIsInf
      (runtimedata_OutputMin[proc_control_node_B.d_k]);
  }

  proc_control_node_all(proc_control_node_B.bv1, proc_control_node_B.x_p3);
  y = true;
  proc_control_node_B.d_k = 0;
  exitg1 = false;
  while ((!exitg1) && (proc_control_node_B.d_k < 13)) {
    if (!proc_control_node_B.x_p3[proc_control_node_B.d_k]) {
      y = false;
      exitg1 = true;
    } else {
      proc_control_node_B.d_k++;
    }
  }

  if (y) {
    for (proc_control_node_B.d_k = 0; proc_control_node_B.d_k < 52;
         proc_control_node_B.d_k++) {
      proc_control_node_B.bv1[proc_control_node_B.d_k] = rtIsInf
        (runtimedata_OutputMax[proc_control_node_B.d_k]);
    }

    proc_control_node_all(proc_control_node_B.bv1, proc_control_node_B.x_p3);
    y = true;
    proc_control_node_B.d_k = 0;
    exitg1 = false;
    while ((!exitg1) && (proc_control_node_B.d_k < 13)) {
      if (!proc_control_node_B.x_p3[proc_control_node_B.d_k]) {
        y = false;
        exitg1 = true;
      } else {
        proc_control_node_B.d_k++;
      }
    }
  } else {
    y = false;
  }

  if (y) {
    c_size[0] = 0;
    c_size[1] = 0;
    Jc_size[0] = 0;
    Jc_size[1] = 0;
  } else {
    for (proc_control_node_B.i_gc = 0; proc_control_node_B.i_gc < 104;
         proc_control_node_B.i_gc++) {
      proc_control_node_B.b_c_a[proc_control_node_B.i_gc] = 0.0;
      proc_control_node_B.icf_p[proc_control_node_B.i_gc] = true;
    }

    memset(&proc_control_node_B.Jx[0], 0, 5408U * sizeof(real_T));
    memset(&proc_control_node_B.Je[0], 0, 104U * sizeof(int8_T));
    for (proc_control_node_B.d_k = 0; proc_control_node_B.d_k < 13;
         proc_control_node_B.d_k++) {
      proc_control_node_B.ic_i[proc_control_node_B.d_k] = static_cast<real_T>
        (proc_control_node_B.d_k) + 1.0;
    }

    for (proc_control_node_B.i_gc = 0; proc_control_node_B.i_gc < 4;
         proc_control_node_B.i_gc++) {
      for (proc_control_node_B.d_k = 0; proc_control_node_B.d_k < 13;
           proc_control_node_B.d_k++) {
        proc_control_node_B.runtimedata_OutputMin_g[proc_control_node_B.d_k] =
          runtimedata_OutputMin[(proc_control_node_B.d_k << 2) +
          proc_control_node_B.i_gc];
      }

      proc_control_node_isfinite_m(proc_control_node_B.runtimedata_OutputMin_g,
        proc_control_node_B.x_p3);
      for (proc_control_node_B.d_k = 0; proc_control_node_B.d_k < 13;
           proc_control_node_B.d_k++) {
        proc_control_node_B.icf_p[static_cast<int32_T>
          (proc_control_node_B.ic_i[proc_control_node_B.d_k]) - 1] =
          proc_control_node_B.x_p3[proc_control_node_B.d_k];
        proc_control_node_B.runtimedata_OutputMin_g[proc_control_node_B.d_k] =
          runtimedata_OutputMax[(proc_control_node_B.d_k << 2) +
          proc_control_node_B.i_gc];
      }

      proc_control_node_isfinite_m(proc_control_node_B.runtimedata_OutputMin_g,
        proc_control_node_B.x_p3);
      for (proc_control_node_B.d_k = 0; proc_control_node_B.d_k < 13;
           proc_control_node_B.d_k++) {
        proc_control_node_B.ic_i2 =
          proc_control_node_B.ic_i[proc_control_node_B.d_k];
        proc_control_node_B.icf_p[static_cast<int32_T>(proc_control_node_B.ic_i2
          + 13.0) - 1] = proc_control_node_B.x_p3[proc_control_node_B.d_k];
        proc_control_node_B.ic_o[proc_control_node_B.d_k] = static_cast<int32_T>
          (proc_control_node_B.ic_i2) - 1;
        proc_control_node_B.ic_o[proc_control_node_B.d_k + 13] =
          static_cast<int32_T>(proc_control_node_B.ic_i2 + 13.0) - 1;
      }

      for (proc_control_node_B.d_k = 0; proc_control_node_B.d_k < 26;
           proc_control_node_B.d_k++) {
        proc_control_node_B.icf_e[proc_control_node_B.d_k] =
          proc_control_node_B.icf_p[proc_control_node_B.ic_o[proc_control_node_B.d_k]];
      }

      if (proc_control_node_any(proc_control_node_B.icf_e)) {
        memset(&proc_control_node_B.Ck[0], 0, 169U * sizeof(int8_T));
        for (proc_control_node_B.d_k = 0; proc_control_node_B.d_k < 13;
             proc_control_node_B.d_k++) {
          proc_control_node_B.Ck[proc_control_node_B.d_k + 13 *
            proc_control_node_B.d_k] = 1;
          proc_control_node_B.b_c_a[static_cast<int32_T>
            (proc_control_node_B.ic_i[proc_control_node_B.d_k]) - 1] =
            (runtimedata_OutputMin[(proc_control_node_B.d_k << 2) +
             proc_control_node_B.i_gc] - e) - X[(5 * proc_control_node_B.d_k +
            proc_control_node_B.i_gc) + 1];
        }

        for (proc_control_node_B.d_k = 0; proc_control_node_B.d_k < 13;
             proc_control_node_B.d_k++) {
          proc_control_node_B.b_c_a[static_cast<int32_T>
            (proc_control_node_B.ic_i[proc_control_node_B.d_k] + 13.0) - 1] =
            (X[(5 * proc_control_node_B.d_k + proc_control_node_B.i_gc) + 1] -
             runtimedata_OutputMax[(proc_control_node_B.d_k << 2) +
             proc_control_node_B.i_gc]) - e;
        }

        for (proc_control_node_B.d_k = 0; proc_control_node_B.d_k < 169;
             proc_control_node_B.d_k++) {
          proc_control_node_B.val[proc_control_node_B.d_k] = static_cast<int8_T>
            (-proc_control_node_B.Ck[proc_control_node_B.d_k]);
        }

        for (proc_control_node_B.k_j = 0; proc_control_node_B.k_j < 13;
             proc_control_node_B.k_j++) {
          for (proc_control_node_B.d_k = 0; proc_control_node_B.d_k < 13;
               proc_control_node_B.d_k++) {
            proc_control_node_B.Jx[((static_cast<int32_T>
              (proc_control_node_B.ic_i[proc_control_node_B.d_k]) + 104 *
              proc_control_node_B.k_j) + 1352 * proc_control_node_B.i_gc) - 1] =
              proc_control_node_B.val[13 * proc_control_node_B.k_j +
              proc_control_node_B.d_k];
          }
        }

        for (proc_control_node_B.k_j = 0; proc_control_node_B.k_j < 13;
             proc_control_node_B.k_j++) {
          for (proc_control_node_B.d_k = 0; proc_control_node_B.d_k < 13;
               proc_control_node_B.d_k++) {
            proc_control_node_B.Jx[((static_cast<int32_T>
              (proc_control_node_B.ic_i[proc_control_node_B.d_k] + 13.0) + 104 *
              proc_control_node_B.k_j) + 1352 * proc_control_node_B.i_gc) - 1] =
              proc_control_node_B.Ck[13 * proc_control_node_B.k_j +
              proc_control_node_B.d_k];
          }

          proc_control_node_B.Je[static_cast<int32_T>
            (proc_control_node_B.ic_i[proc_control_node_B.k_j]) - 1] = -1;
        }

        for (proc_control_node_B.d_k = 0; proc_control_node_B.d_k < 13;
             proc_control_node_B.d_k++) {
          proc_control_node_B.Je[static_cast<int32_T>
            (proc_control_node_B.ic_i[proc_control_node_B.d_k] + 13.0) - 1] = -1;
        }
      }

      for (proc_control_node_B.d_k = 0; proc_control_node_B.d_k < 13;
           proc_control_node_B.d_k++) {
        proc_control_node_B.ic_i[proc_control_node_B.d_k] += 26.0;
      }
    }

    proc_control_node_B.d_k = 0;
    for (proc_control_node_B.i_gc = 0; proc_control_node_B.i_gc < 104;
         proc_control_node_B.i_gc++) {
      if (proc_control_node_B.icf_p[proc_control_node_B.i_gc]) {
        proc_control_node_B.d_k++;
      }
    }

    proc_control_node_B.k_j = proc_control_node_B.d_k;
    proc_control_node_B.d_k = 0;
    for (proc_control_node_B.i_gc = 0; proc_control_node_B.i_gc < 104;
         proc_control_node_B.i_gc++) {
      if (proc_control_node_B.icf_p[proc_control_node_B.i_gc]) {
        proc_control_node_B.b_data_o[proc_control_node_B.d_k] =
          static_cast<int8_T>(proc_control_node_B.i_gc + 1);
        proc_control_node_B.d_k++;
      }
    }

    for (proc_control_node_B.d_k = 0; proc_control_node_B.d_k <
         proc_control_node_B.k_j; proc_control_node_B.d_k++) {
      proc_control_node_B.b_c_data_g[proc_control_node_B.d_k] =
        proc_control_node_B.b_c_a[proc_control_node_B.b_data_o[proc_control_node_B.d_k]
        - 1];
    }

    c_size[0] = proc_control_node_B.k_j;
    c_size[1] = 1;
    if (0 <= proc_control_node_B.k_j - 1) {
      memcpy(&c_data[0], &proc_control_node_B.b_c_data_g[0],
             proc_control_node_B.k_j * sizeof(real_T));
    }

    proc_control_node_B.d_k = 0;
    for (proc_control_node_B.i_gc = 0; proc_control_node_B.i_gc < 104;
         proc_control_node_B.i_gc++) {
      if (proc_control_node_B.icf_p[proc_control_node_B.i_gc]) {
        proc_control_node_B.d_k++;
      }
    }

    proc_control_node_B.k_j = proc_control_node_B.d_k;
    proc_control_node_B.d_k = 0;
    for (proc_control_node_B.i_gc = 0; proc_control_node_B.i_gc < 104;
         proc_control_node_B.i_gc++) {
      if (proc_control_node_B.icf_p[proc_control_node_B.i_gc]) {
        proc_control_node_B.d_data_m[proc_control_node_B.d_k] =
          static_cast<int8_T>(proc_control_node_B.i_gc + 1);
        proc_control_node_B.d_k++;
      }
    }

    proc_control_node_B.Jx_size[0] = proc_control_node_B.k_j;
    proc_control_node_B.Jx_size[1] = 13;
    proc_control_node_B.Jx_size[2] = 4;
    for (proc_control_node_B.d_k = 0; proc_control_node_B.d_k < 4;
         proc_control_node_B.d_k++) {
      for (proc_control_node_B.i_gc = 0; proc_control_node_B.i_gc < 13;
           proc_control_node_B.i_gc++) {
        for (proc_control_node_B.i6 = 0; proc_control_node_B.i6 <
             proc_control_node_B.k_j; proc_control_node_B.i6++) {
          proc_control_node_B.Jx_data[(proc_control_node_B.i6 +
            proc_control_node_B.k_j * proc_control_node_B.i_gc) +
            proc_control_node_B.k_j * 13 * proc_control_node_B.d_k] =
            proc_control_node_B.Jx[((104 * proc_control_node_B.i_gc +
            proc_control_node_B.d_data_m[proc_control_node_B.i6]) + 1352 *
            proc_control_node_B.d_k) - 1];
        }
      }

      for (proc_control_node_B.i_gc = 0; proc_control_node_B.i_gc < 8;
           proc_control_node_B.i_gc++) {
        for (proc_control_node_B.i6 = 0; proc_control_node_B.i6 <
             proc_control_node_B.k_j; proc_control_node_B.i6++) {
          proc_control_node_B.tmp_data_b[(proc_control_node_B.i6 +
            proc_control_node_B.k_j * proc_control_node_B.i_gc) +
            (proc_control_node_B.k_j << 3) * proc_control_node_B.d_k] = 0.0;
        }
      }
    }

    proc_control_node_B.b_c_size = proc_control_node_B.k_j;
    for (proc_control_node_B.d_k = 0; proc_control_node_B.d_k <
         proc_control_node_B.k_j; proc_control_node_B.d_k++) {
      proc_control_node_B.b_c_data_g[proc_control_node_B.d_k] =
        proc_control_node_B.Je[proc_control_node_B.d_data_m[proc_control_node_B.d_k]
        - 1];
    }

    proc_cont_znlmpc_reformJacobian(proc_control_node_B.Jx_data,
      proc_control_node_B.Jx_size, proc_control_node_B.tmp_data_b,
      proc_control_node_B.b_c_data_g, &proc_control_node_B.b_c_size, Jc_data,
      Jc_size);
  }
}

// Function for MATLAB Function: '<S94>/NLMPC'
static void proc_control_node_anon(const real_T runtimedata_x[13], const real_T
  runtimedata_OutputMin[52], const real_T runtimedata_OutputMax[52], const
  real_T z[69], real_T varargout_1_data[], int32_T varargout_1_size[2], real_T
  varargout_2[52], real_T varargout_3_data[], int32_T varargout_3_size[2],
  real_T varargout_4[3588])
{
  proc_control_node_znlmpc_getXUe(z, runtimedata_x, proc_control_node_B.X_a,
    proc_control_node_B.U_i, &proc_control_node_B.e_jc);
  proc_control_nod_stateEvolution(proc_control_node_B.X_a,
    proc_control_node_B.U_i, varargout_2, varargout_4);
  proc_control_node_outputBounds(runtimedata_OutputMin, runtimedata_OutputMax,
    proc_control_node_B.X_a, proc_control_node_B.e_jc,
    proc_control_node_B.c_data_e, proc_control_node_B.c_size,
    proc_control_node_B.Jc_data, proc_control_node_B.Jc_size);
  proc_control_node_B.result = ((proc_control_node_B.c_size[0] != 0) &&
    (proc_control_node_B.c_size[1] != 0));
  if ((proc_control_node_B.Jc_size[0] != 0) && (proc_control_node_B.Jc_size[1]
       != 0)) {
    proc_control_node_B.c_result = proc_control_node_B.Jc_size[0];
  } else {
    proc_control_node_B.c_result = 0;
  }

  if (proc_control_node_B.result == 0) {
    proc_control_node_B.result_idx_0 = proc_control_node_B.c_size[0];
  } else if ((proc_control_node_B.c_size[0] != 0) &&
             (proc_control_node_B.c_size[1] != 0)) {
    proc_control_node_B.result_idx_0 = proc_control_node_B.c_size[0];
  } else {
    proc_control_node_B.result_idx_0 = 0;
  }

  varargout_1_size[0] = proc_control_node_B.result_idx_0;
  varargout_1_size[1] = proc_control_node_B.result;
  if ((0 <= proc_control_node_B.result - 1) && (0 <=
       proc_control_node_B.result_idx_0 - 1)) {
    memcpy(&varargout_1_data[0], &proc_control_node_B.c_data_e[0],
           proc_control_node_B.result_idx_0 * sizeof(real_T));
  }

  varargout_3_size[0] = proc_control_node_B.c_result;
  if (proc_control_node_B.c_result == 0) {
    varargout_3_size[1] = proc_control_node_B.Jc_size[1];
    proc_control_node_B.result = proc_control_node_B.Jc_size[1];
  } else if ((proc_control_node_B.Jc_size[0] != 0) &&
             (proc_control_node_B.Jc_size[1] != 0)) {
    varargout_3_size[1] = proc_control_node_B.Jc_size[1];
    proc_control_node_B.result = proc_control_node_B.Jc_size[1];
  } else {
    varargout_3_size[1] = 0;
    proc_control_node_B.result = 0;
  }

  proc_control_node_B.result_idx_0 = proc_control_node_B.c_result *
    proc_control_node_B.result;
  if (0 <= proc_control_node_B.result_idx_0 - 1) {
    memcpy(&varargout_3_data[0], &proc_control_node_B.Jc_data[0],
           proc_control_node_B.result_idx_0 * sizeof(real_T));
  }
}

// Function for MATLAB Function: '<S94>/NLMPC'
static void proc_control_n_factoryConstruct(int32_T nVarMax, int32_T mConstrMax,
  int32_T mIneq, int32_T mNonlinIneq, s_YLC2gJhPBjEs8VvOTvcE4B_proc_T *obj)
{
  obj->nVarMax = nVarMax;
  obj->mNonlinIneq = mNonlinIneq;
  obj->mNonlinEq = 52;
  obj->mIneq = mIneq;
  obj->mEq = 52;
  obj->iNonIneq0 = (mIneq - mNonlinIneq) + 1;
  obj->iNonEq0 = 1;
  obj->sqpFval = 0.0;
  obj->sqpFval_old = 0.0;
  obj->cIneq.size = mIneq;
  obj->cIneq_old.size = mIneq;
  obj->grad.size = nVarMax;
  obj->grad_old.size = nVarMax;
  obj->FunctionEvaluations = 0;
  obj->sqpIterations = 0;
  obj->sqpExitFlag = 0;
  obj->lambdasqp.size = mConstrMax;
  if (0 <= mConstrMax - 1) {
    memset(&obj->lambdasqp.data[0], 0, mConstrMax * sizeof(real_T));
  }

  obj->lambdasqp_old.size = mConstrMax;
  obj->steplength = 1.0;
  obj->delta_x.size = nVarMax;
  if (0 <= nVarMax - 1) {
    memset(&obj->delta_x.data[0], 0, nVarMax * sizeof(real_T));
  }

  obj->socDirection.size = nVarMax;
  obj->lambda_old.size = mConstrMax;
  obj->workingset_old.size = mConstrMax;
  if (mNonlinIneq > 0) {
    obj->JacCineqTrans_old.size[0] = nVarMax;
    obj->JacCineqTrans_old.size[1] = mNonlinIneq;
  } else {
    obj->JacCineqTrans_old.size[0] = 0;
    obj->JacCineqTrans_old.size[1] = 0;
  }

  obj->JacCeqTrans_old.size[0] = nVarMax;
  obj->JacCeqTrans_old.size[1] = 52;
  obj->gradLag.size = nVarMax;
  obj->delta_gradLag.size = nVarMax;
  obj->xstar.size = nVarMax;
  obj->fstar = 0.0;
  obj->firstorderopt = 0.0;
  obj->lambda.size = mConstrMax;
  if (0 <= mConstrMax - 1) {
    memset(&obj->lambda.data[0], 0, mConstrMax * sizeof(real_T));
  }

  obj->state = 0;
  obj->maxConstr = 0.0;
  obj->iterations = 0;
  obj->searchDir.size = nVarMax;
}

// Function for MATLAB Function: '<S94>/NLMPC'
static void proc_cont_factoryConstruct_cntp(int32_T MaxVars, int32_T
  *obj_grad_size, int32_T *obj_Hx_size, boolean_T *obj_hasLinear, int32_T
  *obj_nvar, int32_T *obj_maxVar, real_T *obj_beta, real_T *obj_rho, int32_T
  *obj_objtype, int32_T *obj_prev_objtype, int32_T *obj_prev_nvar, boolean_T
  *obj_prev_hasLinear, real_T *obj_gammaScalar)
{
  *obj_grad_size = MaxVars;
  *obj_Hx_size = MaxVars - 1;
  *obj_hasLinear = false;
  *obj_nvar = 0;
  *obj_maxVar = MaxVars;
  *obj_beta = 0.0;
  *obj_rho = 0.0;
  *obj_objtype = 3;
  *obj_prev_objtype = 3;
  *obj_prev_nvar = 0;
  *obj_prev_hasLinear = false;
  *obj_gammaScalar = 0.0;
}

// Function for MATLAB Function: '<S94>/NLMPC'
static void proc_con_factoryConstruct_cntp2(int32_T mIneqMax, int32_T nVarMax,
  int32_T mConstrMax, s_MFLHEgKtV7gODWBOEr7maD_proc_T *obj)
{
  int32_T i;
  obj->mConstr = 0;
  obj->mConstrOrig = 0;
  obj->mConstrMax = mConstrMax;
  obj->nVar = 69;
  obj->nVarOrig = 69;
  obj->nVarMax = nVarMax;
  obj->ldA = nVarMax;
  obj->Aineq.size = mIneqMax * nVarMax;
  obj->bineq.size = mIneqMax;
  obj->Aeq.size = 52 * nVarMax;
  obj->lb.size = nVarMax;
  obj->ub.size = nVarMax;
  obj->indexLB.size = nVarMax;
  obj->indexUB.size = nVarMax;
  obj->indexFixed.size = nVarMax;
  obj->mEqRemoved = 0;
  obj->ATwset.size = nVarMax * mConstrMax;
  obj->bwset.size = mConstrMax;
  obj->nActiveConstr = 0;
  obj->maxConstrWorkspace.size = mConstrMax;
  for (i = 0; i < 5; i++) {
    obj->sizes[i] = 0;
    obj->sizesNormal[i] = 0;
    obj->sizesPhaseOne[i] = 0;
    obj->sizesRegularized[i] = 0;
    obj->sizesRegPhaseOne[i] = 0;
  }

  for (i = 0; i < 6; i++) {
    obj->isActiveIdx[i] = 0;
    obj->isActiveIdxNormal[i] = 0;
    obj->isActiveIdxPhaseOne[i] = 0;
    obj->isActiveIdxRegularized[i] = 0;
    obj->isActiveIdxRegPhaseOne[i] = 0;
  }

  obj->isActiveConstr.size = mConstrMax;
  obj->Wid.size = mConstrMax;
  obj->Wlocalidx.size = mConstrMax;
  for (i = 0; i < 5; i++) {
    obj->nWConstr[i] = 0;
  }

  obj->probType = 3;
  obj->SLACK0 = 1.0E-5;
}

// Function for MATLAB Function: '<S94>/NLMPC'
static void proc_control_node_loadProblem(s_MFLHEgKtV7gODWBOEr7maD_proc_T *obj,
  int32_T mIneq, int32_T mLinIneq, const real_T Aineq_data[], int32_T mLB,
  int32_T mUB, int32_T mFixed, int32_T mConstrMax)
{
  int32_T x_tmp[6];
  int32_T e_k;
  int32_T i;
  e_k = mIneq + mLB;
  i = ((e_k + mUB) + mFixed) + 52;
  obj->mConstr = i;
  obj->mConstrOrig = i;
  obj->mConstrMax = mConstrMax;
  obj->sizes[0] = mFixed;
  obj->sizes[1] = 52;
  obj->sizes[2] = mIneq;
  obj->sizes[3] = mLB;
  obj->sizes[4] = mUB;
  for (i = 0; i < 5; i++) {
    obj->sizesNormal[i] = obj->sizes[i];
  }

  obj->sizesPhaseOne[0] = mFixed;
  obj->sizesPhaseOne[1] = 52;
  obj->sizesPhaseOne[2] = mIneq;
  obj->sizesPhaseOne[3] = mLB + 1;
  obj->sizesPhaseOne[4] = mUB;
  obj->sizesRegularized[0] = mFixed;
  obj->sizesRegularized[1] = 52;
  obj->sizesRegularized[2] = mIneq;
  obj->sizesRegularized[3] = e_k + 104;
  obj->sizesRegularized[4] = mUB;
  obj->sizesRegPhaseOne[0] = mFixed;
  obj->sizesRegPhaseOne[1] = 52;
  obj->sizesRegPhaseOne[2] = mIneq;
  obj->sizesRegPhaseOne[3] = e_k + 105;
  obj->sizesRegPhaseOne[4] = mUB;
  x_tmp[0] = 1;
  x_tmp[1] = mFixed;
  x_tmp[2] = 52;
  x_tmp[3] = mIneq;
  x_tmp[4] = mLB;
  x_tmp[5] = mUB;
  for (i = 0; i < 6; i++) {
    obj->isActiveIdxRegPhaseOne[i] = x_tmp[i];
  }

  for (i = 0; i < 5; i++) {
    obj->isActiveIdxRegPhaseOne[i + 1] += obj->isActiveIdxRegPhaseOne[i];
  }

  for (i = 0; i < 6; i++) {
    obj->isActiveIdx[i] = obj->isActiveIdxRegPhaseOne[i];
    obj->isActiveIdxRegPhaseOne[i] = x_tmp[i];
  }

  for (i = 0; i < 5; i++) {
    obj->isActiveIdxRegPhaseOne[i + 1] += obj->isActiveIdxRegPhaseOne[i];
  }

  for (i = 0; i < 6; i++) {
    obj->isActiveIdxNormal[i] = obj->isActiveIdxRegPhaseOne[i];
  }

  obj->isActiveIdxRegPhaseOne[0] = 1;
  obj->isActiveIdxRegPhaseOne[1] = mFixed;
  obj->isActiveIdxRegPhaseOne[2] = 52;
  obj->isActiveIdxRegPhaseOne[3] = mIneq;
  obj->isActiveIdxRegPhaseOne[4] = mLB + 1;
  obj->isActiveIdxRegPhaseOne[5] = mUB;
  for (i = 0; i < 5; i++) {
    obj->isActiveIdxRegPhaseOne[i + 1] += obj->isActiveIdxRegPhaseOne[i];
  }

  for (i = 0; i < 6; i++) {
    obj->isActiveIdxPhaseOne[i] = obj->isActiveIdxRegPhaseOne[i];
  }

  obj->isActiveIdxRegPhaseOne[0] = 1;
  obj->isActiveIdxRegPhaseOne[1] = mFixed;
  obj->isActiveIdxRegPhaseOne[2] = 52;
  obj->isActiveIdxRegPhaseOne[3] = mIneq;
  obj->isActiveIdxRegPhaseOne[4] = e_k + 104;
  obj->isActiveIdxRegPhaseOne[5] = mUB;
  for (i = 0; i < 5; i++) {
    obj->isActiveIdxRegPhaseOne[i + 1] += obj->isActiveIdxRegPhaseOne[i];
  }

  for (i = 0; i < 6; i++) {
    obj->isActiveIdxRegularized[i] = obj->isActiveIdxRegPhaseOne[i];
  }

  obj->isActiveIdxRegPhaseOne[0] = 1;
  obj->isActiveIdxRegPhaseOne[1] = mFixed;
  obj->isActiveIdxRegPhaseOne[2] = 52;
  obj->isActiveIdxRegPhaseOne[3] = mIneq;
  obj->isActiveIdxRegPhaseOne[4] = e_k + 105;
  obj->isActiveIdxRegPhaseOne[5] = mUB;
  for (e_k = 0; e_k < 5; e_k++) {
    obj->isActiveIdxRegPhaseOne[e_k + 1] += obj->isActiveIdxRegPhaseOne[e_k];
  }

  if (mIneq > 0) {
    for (i = 0; i < mLinIneq; i++) {
      for (e_k = 0; e_k < 69; e_k++) {
        obj->Aineq.data[e_k + obj->ldA * i] = Aineq_data[mLinIneq * e_k + i];
      }
    }
  }
}

// Function for MATLAB Function: '<S94>/NLMPC'
static void proc_control_quadraticObjective(const real_T runtimedata_lastMV[8],
  const real_T runtimedata_ref[52], const real_T runtimedata_OutputWeights[52],
  const real_T runtimedata_MVWeights[32], const real_T
  runtimedata_MVRateWeights[32], const real_T runtimedata_MVScaledTarget[32],
  const real_T X[65], const real_T U[40], real_T e, real_T *f, real_T gfx[52],
  real_T gfu[32], real_T *gfe)
{
  int32_T i;
  int32_T i_0;
  int32_T runtimedata_OutputWeights_tmp;
  static const int8_T b[169] = { 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 };

  memset(&gfx[0], 0, 52U * sizeof(real_T));
  memset(&gfu[0], 0, sizeof(real_T) << 5U);
  *f = 0.0;
  for (i_0 = 0; i_0 < 13; i_0++) {
    proc_control_node_B.ix[i_0] = static_cast<real_T>(i_0) + 1.0;
  }

  for (i_0 = 0; i_0 < 8; i_0++) {
    proc_control_node_B.iu[i_0] = static_cast<real_T>(i_0) + 1.0;
  }

  for (i_0 = 0; i_0 < 5; i_0++) {
    for (runtimedata_OutputWeights_tmp = 0; runtimedata_OutputWeights_tmp < 13;
         runtimedata_OutputWeights_tmp++) {
      proc_control_node_B.b_X_l[runtimedata_OutputWeights_tmp + 13 * i_0] = X[5 *
        runtimedata_OutputWeights_tmp + i_0];
    }

    for (runtimedata_OutputWeights_tmp = 0; runtimedata_OutputWeights_tmp < 8;
         runtimedata_OutputWeights_tmp++) {
      proc_control_node_B.b_U_b[runtimedata_OutputWeights_tmp + (i_0 << 3)] = U
        [5 * runtimedata_OutputWeights_tmp + i_0];
    }
  }

  for (i = 0; i < 4; i++) {
    proc_control_node_B.wtYerr_j = 0.0;
    for (i_0 = 0; i_0 < 13; i_0++) {
      runtimedata_OutputWeights_tmp = (i_0 << 2) + i;
      proc_control_node_B.runtimedata_OutputWeights_h =
        runtimedata_OutputWeights[runtimedata_OutputWeights_tmp];
      proc_control_node_B.wtYerr_d = (proc_control_node_B.b_X_l[(i + 1) * 13 +
        i_0] - runtimedata_ref[runtimedata_OutputWeights_tmp]) *
        proc_control_node_B.runtimedata_OutputWeights_h;
      proc_control_node_B.wtYerr_j += proc_control_node_B.wtYerr_d *
        proc_control_node_B.wtYerr_d;
      proc_control_node_B.runtimedata_OutputWeights[i_0] =
        proc_control_node_B.runtimedata_OutputWeights_h *
        proc_control_node_B.wtYerr_d;
    }

    *f += proc_control_node_B.wtYerr_j;
    for (i_0 = 0; i_0 < 13; i_0++) {
      proc_control_node_B.wtYerr_j = 0.0;
      for (runtimedata_OutputWeights_tmp = 0; runtimedata_OutputWeights_tmp < 13;
           runtimedata_OutputWeights_tmp++) {
        proc_control_node_B.wtYerr_j += static_cast<real_T>(b[13 *
          runtimedata_OutputWeights_tmp + i_0]) *
          proc_control_node_B.runtimedata_OutputWeights[runtimedata_OutputWeights_tmp];
      }

      proc_control_node_B.gfx[i_0] = gfx[static_cast<int32_T>
        (proc_control_node_B.ix[i_0]) - 1] + proc_control_node_B.wtYerr_j;
    }

    for (i_0 = 0; i_0 < 13; i_0++) {
      gfx[static_cast<int32_T>(proc_control_node_B.ix[i_0]) - 1] =
        proc_control_node_B.gfx[i_0];
    }

    for (i_0 = 0; i_0 < 13; i_0++) {
      proc_control_node_B.ix[i_0] += 13.0;
    }

    memcpy(&proc_control_node_B.umvk_a[0], &proc_control_node_B.b_U_b[i << 3],
           sizeof(real_T) << 3U);
    if (i + 1 == 1) {
      for (i_0 = 0; i_0 < 8; i_0++) {
        proc_control_node_B.duk_i[i_0] = proc_control_node_B.umvk_a[i_0] -
          runtimedata_lastMV[i_0];
      }
    } else {
      for (i_0 = 0; i_0 < 8; i_0++) {
        proc_control_node_B.duk_i[i_0] = proc_control_node_B.umvk_a[i_0] -
          proc_control_node_B.b_U_b[((i - 1) << 3) + i_0];
      }
    }

    proc_control_node_B.wtYerr_j = 0.0;
    for (i_0 = 0; i_0 < 8; i_0++) {
      runtimedata_OutputWeights_tmp = (i_0 << 2) + i;
      proc_control_node_B.runtimedata_OutputWeights_h =
        runtimedata_MVWeights[runtimedata_OutputWeights_tmp];
      proc_control_node_B.wtYerr_d = (proc_control_node_B.umvk_a[i_0] -
        runtimedata_MVScaledTarget[runtimedata_OutputWeights_tmp]) *
        proc_control_node_B.runtimedata_OutputWeights_h;
      proc_control_node_B.wtYerr_j += proc_control_node_B.wtYerr_d *
        proc_control_node_B.wtYerr_d;
      proc_control_node_B.gfu[i_0] = gfu[static_cast<int32_T>
        (proc_control_node_B.iu[i_0]) - 1] +
        proc_control_node_B.runtimedata_OutputWeights_h *
        proc_control_node_B.wtYerr_d;
      proc_control_node_B.umvk_a[i_0] = proc_control_node_B.wtYerr_d;
    }

    *f += proc_control_node_B.wtYerr_j;
    proc_control_node_B.wtYerr_j = 0.0;
    for (i_0 = 0; i_0 < 8; i_0++) {
      proc_control_node_B.runtimedata_OutputWeights_h =
        runtimedata_MVRateWeights[(i_0 << 2) + i];
      gfu[static_cast<int32_T>(proc_control_node_B.iu[i_0]) - 1] =
        proc_control_node_B.gfu[i_0];
      proc_control_node_B.wtYerr_d =
        proc_control_node_B.runtimedata_OutputWeights_h *
        proc_control_node_B.duk_i[i_0];
      proc_control_node_B.wtYerr_j += proc_control_node_B.wtYerr_d *
        proc_control_node_B.wtYerr_d;
      proc_control_node_B.umvk_a[i_0] =
        proc_control_node_B.runtimedata_OutputWeights_h *
        proc_control_node_B.wtYerr_d;
      proc_control_node_B.duk_i[i_0] = proc_control_node_B.wtYerr_d;
    }

    *f += proc_control_node_B.wtYerr_j;
    for (i_0 = 0; i_0 < 8; i_0++) {
      proc_control_node_B.gfu[i_0] = gfu[static_cast<int32_T>
        (proc_control_node_B.iu[i_0]) - 1] + proc_control_node_B.umvk_a[i_0];
    }

    for (i_0 = 0; i_0 < 8; i_0++) {
      gfu[static_cast<int32_T>(proc_control_node_B.iu[i_0]) - 1] =
        proc_control_node_B.gfu[i_0];
    }

    if (i + 1 > 1) {
      for (i_0 = 0; i_0 < 8; i_0++) {
        proc_control_node_B.gfu_tmp[i_0] = static_cast<int32_T>
          (proc_control_node_B.iu[i_0] - 8.0);
      }

      for (i_0 = 0; i_0 < 8; i_0++) {
        proc_control_node_B.gfu[i_0] = gfu[proc_control_node_B.gfu_tmp[i_0] - 1]
          - proc_control_node_B.umvk_a[i_0];
      }

      for (i_0 = 0; i_0 < 8; i_0++) {
        gfu[proc_control_node_B.gfu_tmp[i_0] - 1] = proc_control_node_B.gfu[i_0];
      }
    }

    for (i_0 = 0; i_0 < 8; i_0++) {
      proc_control_node_B.iu[i_0] += 8.0;
    }
  }

  *f += 100000.0 * e * e;
  for (i_0 = 0; i_0 < 52; i_0++) {
    gfx[i_0] *= 2.0;
  }

  for (i_0 = 0; i_0 < 32; i_0++) {
    gfu[i_0] *= 2.0;
  }

  *gfe = 200000.0 * e;
}

// Function for MATLAB Function: '<S94>/NLMPC'
static void proc_control_node_anon_e(const real_T runtimedata_x[13], const
  real_T runtimedata_lastMV[8], const real_T runtimedata_ref[52], const real_T
  runtimedata_OutputWeights[52], const real_T runtimedata_MVWeights[32], const
  real_T runtimedata_MVRateWeights[32], const real_T runtimedata_MVScaledTarget
  [32], const real_T z[69], real_T *varargout_1, real_T varargout_2[69])
{
  int32_T i;
  static const int8_T b[512] = { 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 1 };

  proc_control_node_znlmpc_getXUe(z, runtimedata_x, proc_control_node_B.X_m,
    proc_control_node_B.U_n, &proc_control_node_B.e_d);
  proc_control_quadraticObjective(runtimedata_lastMV, runtimedata_ref,
    runtimedata_OutputWeights, runtimedata_MVWeights, runtimedata_MVRateWeights,
    runtimedata_MVScaledTarget, proc_control_node_B.X_m, proc_control_node_B.U_n,
    proc_control_node_B.e_d, varargout_1, proc_control_node_B.gfX,
    proc_control_node_B.gfU, &proc_control_node_B.gfE);
  for (proc_control_node_B.i5 = 0; proc_control_node_B.i5 < 16;
       proc_control_node_B.i5++) {
    proc_control_node_B.e_d = 0.0;
    for (i = 0; i < 32; i++) {
      proc_control_node_B.e_d += static_cast<real_T>(b[(i << 4) +
        proc_control_node_B.i5]) * proc_control_node_B.gfU[i];
    }

    proc_control_node_B.b_j[proc_control_node_B.i5] = proc_control_node_B.e_d;
  }

  memcpy(&varargout_2[0], &proc_control_node_B.gfX[0], 52U * sizeof(real_T));
  memcpy(&varargout_2[52], &proc_control_node_B.b_j[0], sizeof(real_T) << 4U);
  varargout_2[68] = proc_control_node_B.gfE;
}

// Function for MATLAB Function: '<S94>/NLMPC'
static int32_T proc_contr_checkVectorNonFinite(int32_T N, const real_T vec_data[],
  int32_T iv0)
{
  real_T allFinite_tmp;
  int32_T idx_current;
  int32_T idx_end;
  int32_T status;
  boolean_T allFinite;
  status = 1;
  allFinite = true;
  idx_current = iv0;
  idx_end = (iv0 + N) - 1;
  while (allFinite && (idx_current <= idx_end)) {
    allFinite_tmp = vec_data[idx_current - 1];
    allFinite = ((!rtIsInf(allFinite_tmp)) && (!rtIsNaN(allFinite_tmp)));
    idx_current++;
  }

  if (!allFinite) {
    idx_current -= 2;
    if (rtIsNaN(vec_data[idx_current])) {
      status = -3;
    } else if (vec_data[idx_current] < 0.0) {
      status = -1;
    } else {
      status = -2;
    }
  }

  return status;
}

// Function for MATLAB Function: '<S94>/NLMPC'
static void computeObjectiveAndUserGradient(const real_T
  obj_objfun_workspace_runtimedat[13], const real_T
  obj_objfun_workspace_runtimed_0[8], const real_T
  obj_objfun_workspace_runtimed_1[52], const real_T
  obj_objfun_workspace_runtimed_2[52], const real_T
  obj_objfun_workspace_runtimed_3[32], const real_T
  obj_objfun_workspace_runtimed_4[32], const real_T
  obj_objfun_workspace_runtimed_5[32], const real_T x[69], real_T
  grad_workspace_data[], real_T *fval, int32_T *status)
{
  proc_control_node_anon_e(obj_objfun_workspace_runtimedat,
    obj_objfun_workspace_runtimed_0, obj_objfun_workspace_runtimed_1,
    obj_objfun_workspace_runtimed_2, obj_objfun_workspace_runtimed_3,
    obj_objfun_workspace_runtimed_4, obj_objfun_workspace_runtimed_5, x, fval,
    proc_control_node_B.varargout_2);
  memcpy(&grad_workspace_data[0], &proc_control_node_B.varargout_2[0], 69U *
         sizeof(real_T));
  if (rtIsInf(*fval) || rtIsNaN(*fval)) {
    if (rtIsNaN(*fval)) {
      *status = -3;
    } else if (*fval < 0.0) {
      *status = -1;
    } else {
      *status = -2;
    }
  } else {
    *status = proc_contr_checkVectorNonFinite(69, grad_workspace_data, 1);
  }
}

// Function for MATLAB Function: '<S94>/NLMPC'
static int32_T proc_con_checkVectorNonFinite_e(const real_T vec[52])
{
  int32_T idx_current;
  int32_T status;
  boolean_T allFinite;
  status = 1;
  allFinite = true;
  idx_current = 0;
  while (allFinite && (idx_current + 1 <= 52)) {
    allFinite = ((!rtIsInf(vec[idx_current])) && (!rtIsNaN(vec[idx_current])));
    idx_current++;
  }

  if (!allFinite) {
    idx_current--;
    if (rtIsNaN(vec[idx_current])) {
      status = -3;
    } else if (vec[idx_current] < 0.0) {
      status = -1;
    } else {
      status = -2;
    }
  }

  return status;
}

// Function for MATLAB Function: '<S94>/NLMPC'
static int32_T proc_contr_checkMatrixNonFinite(int32_T ncols, const real_T
  mat_data[], int32_T col0, int32_T ldm)
{
  int32_T col;
  int32_T col_end;
  int32_T idx_mat;
  int32_T row;
  int32_T status;
  boolean_T allFinite;
  status = 1;
  allFinite = true;
  row = -1;
  col = col0;
  col_end = (col0 + ncols) - 1;
  while (allFinite && (col <= col_end)) {
    row = -1;
    while (allFinite && (row + 2 <= 69)) {
      idx_mat = ((col - 1) * ldm + row) + 1;
      allFinite = ((!rtIsInf(mat_data[idx_mat])) && (!rtIsNaN(mat_data[idx_mat])));
      row++;
    }

    col++;
  }

  if (!allFinite) {
    idx_mat = (col - 2) * ldm + row;
    if (rtIsNaN(mat_data[idx_mat])) {
      status = -3;
    } else if (mat_data[idx_mat] < 0.0) {
      status = -1;
    } else {
      status = -2;
    }
  }

  return status;
}

// Function for MATLAB Function: '<S94>/NLMPC'
static int32_T computeConstraintsAndUserJacobi(const real_T
  obj_nonlcon_workspace_runtimeda[13], const real_T
  obj_nonlcon_workspace_runtime_0[52], const real_T
  obj_nonlcon_workspace_runtime_1[52], int32_T obj_mCineq, const real_T x[69],
  real_T Cineq_workspace_data[], int32_T ineq0, real_T Ceq_workspace[52], real_T
  JacIneqTrans_workspace_data[], int32_T iJI_col, int32_T ldJI, real_T
  JacEqTrans_workspace_data[], int32_T ldJE)
{
  int32_T status;
  if (obj_mCineq > 0) {
    proc_control_node_anon(obj_nonlcon_workspace_runtimeda,
      obj_nonlcon_workspace_runtime_0, obj_nonlcon_workspace_runtime_1, x,
      proc_control_node_B.varargout_1_data_j,
      proc_control_node_B.varargout_1_size_l, proc_control_node_B.varargout_2_a,
      proc_control_node_B.varargout_3_data_c,
      proc_control_node_B.varargout_3_size_b, proc_control_node_B.varargout_4_n);
    proc_control_node_B.b_k_h = 0;
    while (proc_control_node_B.b_k_h <= obj_mCineq - 1) {
      Cineq_workspace_data[(ineq0 + proc_control_node_B.b_k_h) - 1] =
        proc_control_node_B.varargout_1_data_j[proc_control_node_B.b_k_h];
      proc_control_node_B.b_k_h++;
    }

    memcpy(&Ceq_workspace[0], &proc_control_node_B.varargout_2_a[0], 52U *
           sizeof(real_T));
    proc_control_node_B.b_k_h = 0;
    while (proc_control_node_B.b_k_h <= proc_control_node_B.varargout_3_size_b[0]
           - 1) {
      proc_control_node_B.c_idx_col = 0;
      while (proc_control_node_B.c_idx_col <=
             proc_control_node_B.varargout_3_size_b[1] - 1) {
        JacIneqTrans_workspace_data[proc_control_node_B.b_k_h + ldJI * ((iJI_col
          + proc_control_node_B.c_idx_col) - 1)] =
          proc_control_node_B.varargout_3_data_c[proc_control_node_B.b_k_h +
          proc_control_node_B.varargout_3_size_b[0] *
          proc_control_node_B.c_idx_col];
        proc_control_node_B.c_idx_col++;
      }

      proc_control_node_B.b_k_h++;
    }

    for (proc_control_node_B.b_k_h = 0; proc_control_node_B.b_k_h < 69;
         proc_control_node_B.b_k_h++) {
      for (proc_control_node_B.c_idx_col = 0; proc_control_node_B.c_idx_col < 52;
           proc_control_node_B.c_idx_col++) {
        JacEqTrans_workspace_data[proc_control_node_B.b_k_h + ldJE *
          proc_control_node_B.c_idx_col] = proc_control_node_B.varargout_4_n[69 *
          proc_control_node_B.c_idx_col + proc_control_node_B.b_k_h];
      }
    }
  } else {
    proc_control_node_anon(obj_nonlcon_workspace_runtimeda,
      obj_nonlcon_workspace_runtime_0, obj_nonlcon_workspace_runtime_1, x,
      proc_control_node_B.varargout_1_data_j,
      proc_control_node_B.varargout_1_size_l, proc_control_node_B.varargout_2_a,
      proc_control_node_B.varargout_3_data_c,
      proc_control_node_B.varargout_3_size_b, proc_control_node_B.varargout_4_n);
    memcpy(&Ceq_workspace[0], &proc_control_node_B.varargout_2_a[0], 52U *
           sizeof(real_T));
    for (proc_control_node_B.b_k_h = 0; proc_control_node_B.b_k_h < 69;
         proc_control_node_B.b_k_h++) {
      for (proc_control_node_B.c_idx_col = 0; proc_control_node_B.c_idx_col < 52;
           proc_control_node_B.c_idx_col++) {
        JacEqTrans_workspace_data[proc_control_node_B.b_k_h + ldJE *
          proc_control_node_B.c_idx_col] = proc_control_node_B.varargout_4_n[69 *
          proc_control_node_B.c_idx_col + proc_control_node_B.b_k_h];
      }
    }
  }

  status = proc_contr_checkVectorNonFinite(obj_mCineq, Cineq_workspace_data,
    ineq0);
  if (status == 1) {
    status = proc_con_checkVectorNonFinite_e(Ceq_workspace);
    if (status == 1) {
      status = proc_contr_checkMatrixNonFinite(obj_mCineq,
        JacIneqTrans_workspace_data, iJI_col, ldJI);
      if (status == 1) {
        status = proc_contr_checkMatrixNonFinite(52, JacEqTrans_workspace_data,
          1, ldJE);
      }
    }
  }

  return status;
}

// Function for MATLAB Function: '<S94>/NLMPC'
static void evalObjAndConstrAndDerivatives(const real_T
  obj_objfun_workspace_runtimedat[13], const real_T
  obj_objfun_workspace_runtimed_0[8], const real_T
  obj_objfun_workspace_runtimed_1[52], const real_T
  obj_objfun_workspace_runtimed_2[52], const real_T
  obj_objfun_workspace_runtimed_3[32], const real_T
  obj_objfun_workspace_runtimed_4[32], const real_T
  obj_objfun_workspace_runtimed_5[32], const real_T
  obj_nonlcon_workspace_runtimeda[13], const real_T
  obj_nonlcon_workspace_runtime_0[52], const real_T
  obj_nonlcon_workspace_runtime_1[52], int32_T obj_mCineq, const real_T x[69],
  real_T grad_workspace_data[], real_T Cineq_workspace_data[], int32_T ineq0,
  real_T Ceq_workspace[52], real_T JacIneqTrans_workspace_data[], int32_T
  iJI_col, int32_T ldJI, real_T JacEqTrans_workspace_data[], int32_T ldJE,
  real_T *fval, int32_T *status)
{
  computeObjectiveAndUserGradient(obj_objfun_workspace_runtimedat,
    obj_objfun_workspace_runtimed_0, obj_objfun_workspace_runtimed_1,
    obj_objfun_workspace_runtimed_2, obj_objfun_workspace_runtimed_3,
    obj_objfun_workspace_runtimed_4, obj_objfun_workspace_runtimed_5, x,
    grad_workspace_data, fval, status);
  if (*status == 1) {
    *status = computeConstraintsAndUserJacobi(obj_nonlcon_workspace_runtimeda,
      obj_nonlcon_workspace_runtime_0, obj_nonlcon_workspace_runtime_1,
      obj_mCineq, x, Cineq_workspace_data, ineq0, Ceq_workspace,
      JacIneqTrans_workspace_data, iJI_col, ldJI, JacEqTrans_workspace_data,
      ldJE);
  }
}

// Function for MATLAB Function: '<S94>/NLMPC'
static void proc_c_updateWorkingSetForNewQP(const real_T xk[69],
  s_MFLHEgKtV7gODWBOEr7maD_proc_T *WorkingSet, int32_T mIneq, const real_T
  cIneq_data[], const real_T cEq[52], int32_T mLB, const real_T lb[69], int32_T
  mUB, int32_T mFixed)
{
  int32_T b_idx;
  int32_T iEq0;
  int32_T iw0;
  iw0 = WorkingSet->ldA * mFixed;
  iEq0 = 0;
  for (b_idx = 0; b_idx < 52; b_idx++) {
    WorkingSet->beq[b_idx] = -cEq[b_idx];
    WorkingSet->bwset.data[mFixed + b_idx] = WorkingSet->beq[b_idx];
    memcpy(&WorkingSet->ATwset.data[iw0], &WorkingSet->Aeq.data[iEq0], 69U *
           sizeof(real_T));
    iw0 += WorkingSet->ldA;
    iEq0 += WorkingSet->ldA;
  }

  for (b_idx = 0; b_idx < mIneq; b_idx++) {
    WorkingSet->bineq.data[b_idx] = -cIneq_data[b_idx];
  }

  for (b_idx = 0; b_idx < mLB; b_idx++) {
    WorkingSet->lb.data[WorkingSet->indexLB.data[b_idx] - 1] = -lb
      [WorkingSet->indexLB.data[b_idx] - 1] + xk[WorkingSet->indexLB.data[b_idx]
      - 1];
  }

  for (b_idx = 0; b_idx < mUB; b_idx++) {
    WorkingSet->ub.data[WorkingSet->indexUB.data[b_idx] - 1] = (rtInf) -
      xk[WorkingSet->indexUB.data[b_idx] - 1];
  }

  for (b_idx = 0; b_idx < mFixed; b_idx++) {
    WorkingSet->ub.data[WorkingSet->indexFixed.data[b_idx] - 1] = (rtInf) -
      xk[WorkingSet->indexFixed.data[b_idx] - 1];
    WorkingSet->bwset.data[b_idx] = (rtInf) - xk[WorkingSet->
      indexFixed.data[b_idx] - 1];
  }
}

// Function for MATLAB Function: '<S94>/NLMPC'
static void proc_co_modifyOverheadPhaseOne_(s_MFLHEgKtV7gODWBOEr7maD_proc_T *obj)
{
  int32_T idxEq;
  int32_T idxUpperExisting;
  int32_T tmp;
  for (idxUpperExisting = 0; idxUpperExisting < obj->sizes[0]; idxUpperExisting
       ++) {
    obj->ATwset.data[(obj->nVar + obj->ldA * idxUpperExisting) - 1] = 0.0;
  }

  for (idxUpperExisting = 0; idxUpperExisting < 52; idxUpperExisting++) {
    idxEq = (obj->ldA * idxUpperExisting + obj->nVar) - 1;
    obj->Aeq.data[idxEq] = 0.0;
    obj->ATwset.data[idxEq + obj->ldA * (obj->isActiveIdx[1] - 1)] = 0.0;
  }

  for (idxUpperExisting = 0; idxUpperExisting < obj->sizes[2]; idxUpperExisting
       ++) {
    obj->Aineq.data[(obj->nVar + obj->ldA * idxUpperExisting) - 1] = -1.0;
  }

  obj->indexLB.data[obj->sizes[3] - 1] = obj->nVar;
  obj->lb.data[obj->nVar - 1] = 1.0E-5;
  for (idxUpperExisting = obj->isActiveIdx[2]; idxUpperExisting <=
       obj->nActiveConstr; idxUpperExisting++) {
    obj->ATwset.data[(obj->nVar + obj->ldA * (idxUpperExisting - 1)) - 1] = -1.0;
  }

  idxUpperExisting = obj->isActiveIdx[4] - 1;
  if (obj->nWConstr[4] > 0) {
    for (idxEq = 1; idxEq - 1 < obj->sizesNormal[4]; idxEq++) {
      tmp = idxUpperExisting + idxEq;
      obj->isActiveConstr.data[tmp] = obj->isActiveConstr.data[tmp - 1];
    }
  }

  obj->isActiveConstr.data[obj->isActiveIdx[4] - 2] = false;
}

// Function for MATLAB Function: '<S94>/NLMPC'
static void proc_control_nod_setProblemType(s_MFLHEgKtV7gODWBOEr7maD_proc_T *obj,
  int32_T PROBLEM_TYPE)
{
  int32_T b_tmp;
  int32_T f_idx_row;
  switch (PROBLEM_TYPE) {
   case 3:
    obj->nVar = 69;
    obj->mConstr = obj->mConstrOrig;
    if (obj->nWConstr[4] > 0) {
      proc_control_node_B.mIneq_j = -1;
      while (proc_control_node_B.mIneq_j + 1 <= obj->sizesNormal[4] - 1) {
        obj->isActiveConstr.data[obj->isActiveIdxNormal[4] +
          proc_control_node_B.mIneq_j] = obj->isActiveConstr.data
          [obj->isActiveIdx[4] + proc_control_node_B.mIneq_j];
        proc_control_node_B.mIneq_j++;
      }
    }

    for (proc_control_node_B.d_idx_row = 0; proc_control_node_B.d_idx_row < 5;
         proc_control_node_B.d_idx_row++) {
      obj->sizes[proc_control_node_B.d_idx_row] = obj->
        sizesNormal[proc_control_node_B.d_idx_row];
    }

    for (proc_control_node_B.d_idx_row = 0; proc_control_node_B.d_idx_row < 6;
         proc_control_node_B.d_idx_row++) {
      obj->isActiveIdx[proc_control_node_B.d_idx_row] = obj->
        isActiveIdxNormal[proc_control_node_B.d_idx_row];
    }
    break;

   case 1:
    obj->nVar = 70;
    obj->mConstr = obj->mConstrOrig + 1;
    for (proc_control_node_B.d_idx_row = 0; proc_control_node_B.d_idx_row < 5;
         proc_control_node_B.d_idx_row++) {
      obj->sizes[proc_control_node_B.d_idx_row] = obj->
        sizesPhaseOne[proc_control_node_B.d_idx_row];
    }

    for (proc_control_node_B.d_idx_row = 0; proc_control_node_B.d_idx_row < 6;
         proc_control_node_B.d_idx_row++) {
      obj->isActiveIdx[proc_control_node_B.d_idx_row] = obj->
        isActiveIdxPhaseOne[proc_control_node_B.d_idx_row];
    }

    proc_co_modifyOverheadPhaseOne_(obj);
    break;

   case 2:
    obj->nVar = obj->nVarMax - 1;
    obj->mConstr = obj->mConstrMax - 1;
    for (proc_control_node_B.d_idx_row = 0; proc_control_node_B.d_idx_row < 5;
         proc_control_node_B.d_idx_row++) {
      obj->sizes[proc_control_node_B.d_idx_row] = obj->
        sizesRegularized[proc_control_node_B.d_idx_row];
    }

    if (obj->probType != 4) {
      proc_control_node_B.mIneq_j = obj->sizes[2] + 69;
      proc_control_node_B.offsetEq1 = obj->sizes[2];
      proc_control_node_B.offsetEq2 = obj->sizes[2];
      proc_control_node_B.colOffsetAineq = 0;
      while (proc_control_node_B.colOffsetAineq <= obj->sizes[0] - 1) {
        proc_control_node_B.colOffsetATw = obj->ldA *
          proc_control_node_B.colOffsetAineq;
        proc_control_node_B.colOffsetAeq = 70;
        while (proc_control_node_B.colOffsetAeq <= obj->nVar) {
          obj->ATwset.data[(proc_control_node_B.colOffsetAeq +
                            proc_control_node_B.colOffsetATw) - 1] = 0.0;
          proc_control_node_B.colOffsetAeq++;
        }

        proc_control_node_B.colOffsetAineq++;
      }

      proc_control_node_B.colOffsetATw = 0;
      while (proc_control_node_B.colOffsetATw <= proc_control_node_B.mIneq_j -
             70) {
        proc_control_node_B.colOffsetAineq = obj->ldA *
          proc_control_node_B.colOffsetATw - 1;
        proc_control_node_B.colOffsetAeq = 70;
        while (proc_control_node_B.colOffsetAeq <=
               proc_control_node_B.colOffsetATw + 69) {
          obj->Aineq.data[proc_control_node_B.colOffsetAeq +
            proc_control_node_B.colOffsetAineq] = 0.0;
          proc_control_node_B.colOffsetAeq++;
        }

        obj->Aineq.data[(proc_control_node_B.colOffsetATw +
                         proc_control_node_B.colOffsetAineq) + 70] = -1.0;
        proc_control_node_B.colOffsetAeq = proc_control_node_B.colOffsetATw + 71;
        while (proc_control_node_B.colOffsetAeq <= obj->nVar) {
          obj->Aineq.data[proc_control_node_B.colOffsetAeq +
            proc_control_node_B.colOffsetAineq] = 0.0;
          proc_control_node_B.colOffsetAeq++;
        }

        proc_control_node_B.colOffsetATw++;
      }

      for (proc_control_node_B.colOffsetAineq = 0;
           proc_control_node_B.colOffsetAineq < 52;
           proc_control_node_B.colOffsetAineq++) {
        proc_control_node_B.colOffsetAeq = obj->ldA *
          proc_control_node_B.colOffsetAineq - 1;
        proc_control_node_B.colOffsetATw = (obj->isActiveIdx[1] - 1) * obj->ldA
          + proc_control_node_B.colOffsetAeq;
        proc_control_node_B.d_idx_row = 70;
        while (proc_control_node_B.d_idx_row <= proc_control_node_B.mIneq_j) {
          obj->Aeq.data[proc_control_node_B.d_idx_row +
            proc_control_node_B.colOffsetAeq] = 0.0;
          obj->ATwset.data[proc_control_node_B.d_idx_row +
            proc_control_node_B.colOffsetATw] = 0.0;
          proc_control_node_B.d_idx_row++;
        }

        b_tmp = proc_control_node_B.mIneq_j + proc_control_node_B.colOffsetAineq;
        proc_control_node_B.d_idx_row = proc_control_node_B.offsetEq1 + 70;
        while (proc_control_node_B.d_idx_row <= b_tmp) {
          obj->Aeq.data[proc_control_node_B.d_idx_row +
            proc_control_node_B.colOffsetAeq] = 0.0;
          obj->ATwset.data[proc_control_node_B.d_idx_row +
            proc_control_node_B.colOffsetATw] = 0.0;
          proc_control_node_B.d_idx_row++;
        }

        proc_control_node_B.d_idx_row = b_tmp + proc_control_node_B.colOffsetAeq;
        obj->Aeq.data[proc_control_node_B.d_idx_row + 1] = -1.0;
        obj->ATwset.data[(b_tmp + proc_control_node_B.colOffsetATw) + 1] = -1.0;
        for (f_idx_row = (proc_control_node_B.offsetEq1 +
                          proc_control_node_B.colOffsetAineq) + 71; f_idx_row <=
             proc_control_node_B.mIneq_j + 52; f_idx_row++) {
          obj->Aeq.data[f_idx_row + proc_control_node_B.colOffsetAeq] = 0.0;
          obj->ATwset.data[f_idx_row + proc_control_node_B.colOffsetATw] = 0.0;
        }

        for (f_idx_row = proc_control_node_B.offsetEq2 + 122; f_idx_row <= b_tmp
             + 52; f_idx_row++) {
          obj->Aeq.data[f_idx_row + proc_control_node_B.colOffsetAeq] = 0.0;
          obj->ATwset.data[f_idx_row + proc_control_node_B.colOffsetATw] = 0.0;
        }

        obj->Aeq.data[proc_control_node_B.d_idx_row + 53] = 1.0;
        obj->ATwset.data[(b_tmp + proc_control_node_B.colOffsetATw) + 53] = 1.0;
        proc_control_node_B.d_idx_row = (proc_control_node_B.offsetEq2 +
          proc_control_node_B.colOffsetAineq) + 123;
        while (proc_control_node_B.d_idx_row <= obj->nVar) {
          obj->Aeq.data[proc_control_node_B.d_idx_row +
            proc_control_node_B.colOffsetAeq] = 0.0;
          obj->ATwset.data[proc_control_node_B.d_idx_row +
            proc_control_node_B.colOffsetATw] = 0.0;
          proc_control_node_B.d_idx_row++;
        }
      }

      proc_control_node_B.offsetEq1 = 69;
      proc_control_node_B.offsetEq2 = obj->sizesNormal[3];
      while (proc_control_node_B.offsetEq2 + 1 <= obj->sizesRegularized[3]) {
        proc_control_node_B.offsetEq1++;
        obj->indexLB.data[proc_control_node_B.offsetEq2] =
          proc_control_node_B.offsetEq1;
        proc_control_node_B.offsetEq2++;
      }

      if (obj->nWConstr[4] > 0) {
        proc_control_node_B.offsetEq1 = -1;
        while (proc_control_node_B.offsetEq1 + 1 <= obj->sizesRegularized[4] - 1)
        {
          obj->isActiveConstr.data[(obj->isActiveIdxRegularized[4] +
            proc_control_node_B.offsetEq1) + 1] = obj->isActiveConstr.data
            [obj->isActiveIdx[4] + proc_control_node_B.offsetEq1];
          proc_control_node_B.offsetEq1++;
        }
      }

      proc_control_node_B.offsetEq1 = obj->isActiveIdx[4];
      while (proc_control_node_B.offsetEq1 <= obj->isActiveIdxRegularized[4] - 1)
      {
        obj->isActiveConstr.data[proc_control_node_B.offsetEq1 - 1] = false;
        proc_control_node_B.offsetEq1++;
      }

      proc_control_node_B.offsetEq1 = 70;
      while (proc_control_node_B.offsetEq1 <= proc_control_node_B.mIneq_j + 104)
      {
        obj->lb.data[proc_control_node_B.offsetEq1 - 1] = 0.0;
        proc_control_node_B.offsetEq1++;
      }

      proc_control_node_B.mIneq_j = obj->isActiveIdx[2] - 1;
      while (proc_control_node_B.mIneq_j + 1 <= obj->nActiveConstr) {
        proc_control_node_B.colOffsetATw = obj->ldA *
          proc_control_node_B.mIneq_j - 1;
        if (obj->Wid.data[proc_control_node_B.mIneq_j] == 3) {
          proc_control_node_B.offsetEq1 = 70;
          while (proc_control_node_B.offsetEq1 <= obj->
                 Wlocalidx.data[proc_control_node_B.mIneq_j] + 68) {
            obj->ATwset.data[proc_control_node_B.offsetEq1 +
              proc_control_node_B.colOffsetATw] = 0.0;
            proc_control_node_B.offsetEq1++;
          }

          obj->ATwset.data[(obj->Wlocalidx.data[proc_control_node_B.mIneq_j] +
                            proc_control_node_B.colOffsetATw) + 69] = -1.0;
          proc_control_node_B.offsetEq1 = obj->
            Wlocalidx.data[proc_control_node_B.mIneq_j] + 70;
          while (proc_control_node_B.offsetEq1 <= obj->nVar) {
            obj->ATwset.data[proc_control_node_B.offsetEq1 +
              proc_control_node_B.colOffsetATw] = 0.0;
            proc_control_node_B.offsetEq1++;
          }
        } else {
          proc_control_node_B.offsetEq1 = 70;
          while (proc_control_node_B.offsetEq1 <= obj->nVar) {
            obj->ATwset.data[proc_control_node_B.offsetEq1 +
              proc_control_node_B.colOffsetATw] = 0.0;
            proc_control_node_B.offsetEq1++;
          }
        }

        proc_control_node_B.mIneq_j++;
      }
    }

    for (proc_control_node_B.d_idx_row = 0; proc_control_node_B.d_idx_row < 6;
         proc_control_node_B.d_idx_row++) {
      obj->isActiveIdx[proc_control_node_B.d_idx_row] =
        obj->isActiveIdxRegularized[proc_control_node_B.d_idx_row];
    }
    break;

   default:
    obj->nVar = obj->nVarMax;
    obj->mConstr = obj->mConstrMax;
    for (proc_control_node_B.d_idx_row = 0; proc_control_node_B.d_idx_row < 5;
         proc_control_node_B.d_idx_row++) {
      obj->sizes[proc_control_node_B.d_idx_row] = obj->
        sizesRegPhaseOne[proc_control_node_B.d_idx_row];
    }

    for (proc_control_node_B.d_idx_row = 0; proc_control_node_B.d_idx_row < 6;
         proc_control_node_B.d_idx_row++) {
      obj->isActiveIdx[proc_control_node_B.d_idx_row] =
        obj->isActiveIdxRegPhaseOne[proc_control_node_B.d_idx_row];
    }

    proc_co_modifyOverheadPhaseOne_(obj);
    break;
  }

  obj->probType = PROBLEM_TYPE;
}

// Function for MATLAB Function: '<S94>/NLMPC'
static void proc_control_node_initActiveSet(s_MFLHEgKtV7gODWBOEr7maD_proc_T *obj)
{
  proc_control_nod_setProblemType(obj, 3);
  proc_control_node_B.nWFixed = obj->isActiveIdx[2];
  while (proc_control_node_B.nWFixed <= obj->mConstrMax) {
    obj->isActiveConstr.data[proc_control_node_B.nWFixed - 1] = false;
    proc_control_node_B.nWFixed++;
  }

  obj->nWConstr[0] = obj->sizes[0];
  obj->nWConstr[1] = 52;
  obj->nWConstr[2] = 0;
  obj->nWConstr[3] = 0;
  obj->nWConstr[4] = 0;
  obj->nActiveConstr = obj->nWConstr[0] + 52;
  proc_control_node_B.nWFixed = obj->sizes[0];
  proc_control_node_B.b_idx_local = 0;
  while (proc_control_node_B.b_idx_local <= proc_control_node_B.nWFixed - 1) {
    obj->Wid.data[proc_control_node_B.b_idx_local] = 1;
    obj->Wlocalidx.data[proc_control_node_B.b_idx_local] =
      proc_control_node_B.b_idx_local + 1;
    obj->isActiveConstr.data[proc_control_node_B.b_idx_local] = true;
    proc_control_node_B.idx_global = obj->ldA * proc_control_node_B.b_idx_local
      - 1;
    proc_control_node_B.iAeq0 = 0;
    while (proc_control_node_B.iAeq0 <= obj->
           indexFixed.data[proc_control_node_B.b_idx_local] - 2) {
      obj->ATwset.data[(proc_control_node_B.iAeq0 +
                        proc_control_node_B.idx_global) + 1] = 0.0;
      proc_control_node_B.iAeq0++;
    }

    obj->ATwset.data[obj->indexFixed.data[proc_control_node_B.b_idx_local] +
      proc_control_node_B.idx_global] = 1.0;
    proc_control_node_B.iAeq0 = obj->
      indexFixed.data[proc_control_node_B.b_idx_local] + 1;
    while (proc_control_node_B.iAeq0 <= obj->nVar) {
      obj->ATwset.data[proc_control_node_B.iAeq0 +
        proc_control_node_B.idx_global] = 0.0;
      proc_control_node_B.iAeq0++;
    }

    obj->bwset.data[proc_control_node_B.b_idx_local] = obj->ub.data
      [obj->indexFixed.data[proc_control_node_B.b_idx_local] - 1];
    proc_control_node_B.b_idx_local++;
  }

  for (proc_control_node_B.b_idx_local = 0; proc_control_node_B.b_idx_local < 52;
       proc_control_node_B.b_idx_local++) {
    proc_control_node_B.idx_global = proc_control_node_B.nWFixed +
      proc_control_node_B.b_idx_local;
    obj->Wid.data[proc_control_node_B.idx_global] = 2;
    obj->Wlocalidx.data[proc_control_node_B.idx_global] =
      proc_control_node_B.b_idx_local + 1;
    obj->isActiveConstr.data[proc_control_node_B.idx_global] = true;
    proc_control_node_B.iAeq0 = obj->ldA * proc_control_node_B.b_idx_local;
    proc_control_node_B.iATw0 = obj->ldA * proc_control_node_B.idx_global;
    proc_control_node_B.c_i_lt = 0;
    while (proc_control_node_B.c_i_lt <= obj->nVar - 1) {
      obj->ATwset.data[proc_control_node_B.iATw0 + proc_control_node_B.c_i_lt] =
        obj->Aeq.data[proc_control_node_B.iAeq0 + proc_control_node_B.c_i_lt];
      proc_control_node_B.c_i_lt++;
    }

    obj->bwset.data[proc_control_node_B.idx_global] = obj->
      beq[proc_control_node_B.b_idx_local];
  }
}

// Function for MATLAB Function: '<S94>/NLMPC'
static void proc_contro_factoryConstruct_cn(int32_T maxRows, int32_T maxCols,
  int32_T *obj_ldq, int32_T obj_QR_size[2], real_T obj_Q_data[], int32_T
  obj_Q_size[2], int32_T obj_jpvt_data[], int32_T *obj_jpvt_size, int32_T
  *obj_mrows, int32_T *obj_ncols, int32_T *obj_tau_size, int32_T *obj_minRowCol,
  boolean_T *obj_usedPivoting)
{
  int32_T loop_ub;
  *obj_ldq = maxRows;
  obj_QR_size[0] = maxRows;
  obj_QR_size[1] = maxCols;
  obj_Q_size[0] = maxRows;
  obj_Q_size[1] = maxRows;
  loop_ub = maxRows * maxRows - 1;
  if (0 <= loop_ub) {
    memset(&obj_Q_data[0], 0, (loop_ub + 1) * sizeof(real_T));
  }

  *obj_jpvt_size = maxCols;
  if (0 <= maxCols - 1) {
    memset(&obj_jpvt_data[0], 0, maxCols * sizeof(int32_T));
  }

  *obj_mrows = 0;
  *obj_ncols = 0;
  if (maxRows < maxCols) {
    *obj_tau_size = maxRows;
  } else {
    *obj_tau_size = maxCols;
  }

  *obj_minRowCol = 0;
  *obj_usedPivoting = false;
}

// Function for MATLAB Function: '<S94>/NLMPC'
static void proc_contr_factoryConstruct_cnt(int32_T MaxDims, int32_T
  obj_FMat_size[2], int32_T *obj_ldm, int32_T *obj_ndims, int32_T *obj_info,
  real_T *obj_scaleFactor, boolean_T *obj_ConvexCheck, real_T *obj_regTol_,
  real_T *obj_workspace_, real_T *obj_workspace2_)
{
  obj_FMat_size[0] = MaxDims;
  obj_FMat_size[1] = MaxDims;
  *obj_ldm = MaxDims;
  *obj_ndims = 0;
  *obj_info = 0;
  *obj_scaleFactor = 0.0;
  *obj_ConvexCheck = true;
  *obj_regTol_ = (rtInf);
  *obj_workspace_ = (rtInf);
  *obj_workspace2_ = (rtInf);
}

// Function for MATLAB Function: '<S94>/NLMPC'
static void proc_control_node_xgemv(int32_T m, int32_T n, const real_T A_data[],
  int32_T lda, const real_T x_data[], int32_T ix0, real_T y_data[])
{
  int32_T b;
  int32_T c;
  int32_T ia;
  int32_T iac;
  if (n != 0) {
    proc_control_node_B.ix_dq = ix0;
    c = (n - 1) * lda + 1;
    iac = 1;
    while (((lda > 0) && (iac <= c)) || ((lda < 0) && (iac >= c))) {
      proc_control_node_B.iy_a3 = 0;
      b = (iac + m) - 1;
      for (ia = iac; ia <= b; ia++) {
        y_data[proc_control_node_B.iy_a3] += A_data[ia - 1] *
          x_data[proc_control_node_B.ix_dq - 1];
        proc_control_node_B.iy_a3++;
      }

      proc_control_node_B.ix_dq++;
      iac += lda;
    }
  }
}

// Function for MATLAB Function: '<S94>/NLMPC'
static void proc_control_nod_computeGradLag(real_T workspace_data[], int32_T ldA,
  int32_T nVar, const real_T grad_data[], int32_T mIneq, const real_T
  AineqTrans_data[], const real_T AeqTrans_data[], const int32_T
  finiteFixed_data[], int32_T mFixed, const int32_T finiteLB_data[], int32_T mLB,
  const int32_T finiteUB_data[], int32_T mUB, const real_T lambda_data[])
{
  proc_control_node_B.iL0_n = 0;
  while (proc_control_node_B.iL0_n <= nVar - 1) {
    workspace_data[proc_control_node_B.iL0_n] =
      grad_data[proc_control_node_B.iL0_n];
    proc_control_node_B.iL0_n++;
  }

  proc_control_node_B.iL0_n = 0;
  while (proc_control_node_B.iL0_n <= mFixed - 1) {
    workspace_data[finiteFixed_data[proc_control_node_B.iL0_n] - 1] +=
      lambda_data[proc_control_node_B.iL0_n];
    proc_control_node_B.iL0_n++;
  }

  proc_control_node_xgemv(nVar, 52, AeqTrans_data, ldA, lambda_data, mFixed + 1,
    workspace_data);
  proc_control_node_xgemv(nVar, mIneq, AineqTrans_data, ldA, lambda_data, mFixed
    + 53, workspace_data);
  proc_control_node_B.iL0_n = (mFixed + mIneq) + 52;
  proc_control_node_B.c_idx_p = 0;
  while (proc_control_node_B.c_idx_p <= mLB - 1) {
    workspace_data[finiteLB_data[proc_control_node_B.c_idx_p] - 1] -=
      lambda_data[proc_control_node_B.iL0_n];
    proc_control_node_B.iL0_n++;
    proc_control_node_B.c_idx_p++;
  }

  proc_control_node_B.c_idx_p = 0;
  while (proc_control_node_B.c_idx_p <= mUB - 1) {
    workspace_data[finiteUB_data[proc_control_node_B.c_idx_p] - 1] +=
      lambda_data[proc_control_node_B.iL0_n];
    proc_control_node_B.iL0_n++;
    proc_control_node_B.c_idx_p++;
  }
}

// Function for MATLAB Function: '<S94>/NLMPC'
static real_T proc_con_computePrimalFeasError(const real_T x[69], int32_T
  mLinIneq, int32_T mNonlinIneq, const real_T cIneq_data[], const real_T cEq[52],
  const int32_T finiteLB_data[], int32_T mLB, const real_T lb[69], const int32_T
  finiteUB_data[], int32_T mUB)
{
  real_T feasError;
  real_T u1;
  int32_T b_idx;
  int32_T mIneq;
  feasError = 0.0;
  mIneq = mNonlinIneq + mLinIneq;
  for (b_idx = 0; b_idx < 52; b_idx++) {
    u1 = fabs(cEq[b_idx]);
    if ((!(feasError > u1)) && (!rtIsNaN(u1))) {
      feasError = u1;
    }
  }

  for (b_idx = 0; b_idx < mIneq; b_idx++) {
    u1 = cIneq_data[b_idx];
    if ((!(feasError > u1)) && (!rtIsNaN(u1))) {
      feasError = u1;
    }
  }

  for (mIneq = 0; mIneq < mLB; mIneq++) {
    u1 = lb[finiteLB_data[mIneq] - 1] - x[finiteLB_data[mIneq] - 1];
    if ((!(feasError > u1)) && (!rtIsNaN(u1))) {
      feasError = u1;
    }
  }

  for (mIneq = 0; mIneq < mUB; mIneq++) {
    u1 = x[finiteUB_data[mIneq] - 1] - (rtInf);
    if ((!(feasError > u1)) && (!rtIsNaN(u1))) {
      feasError = u1;
    }
  }

  return feasError;
}

// Function for MATLAB Function: '<S94>/NLMPC'
static void proc_contr_computeDualFeasError(int32_T nVar, const real_T
  gradLag_data[], boolean_T *gradOK, real_T *val)
{
  real_T u1;
  int32_T b_idx;
  boolean_T exitg1;
  *gradOK = true;
  *val = 0.0;
  b_idx = 0;
  exitg1 = false;
  while ((!exitg1) && (b_idx <= nVar - 1)) {
    *gradOK = ((!rtIsInf(gradLag_data[b_idx])) && (!rtIsNaN(gradLag_data[b_idx])));
    if (!*gradOK) {
      exitg1 = true;
    } else {
      u1 = fabs(gradLag_data[b_idx]);
      if ((!(*val > u1)) && (!rtIsNaN(u1))) {
        *val = u1;
      }

      b_idx++;
    }
  }
}

// Function for MATLAB Function: '<S94>/NLMPC'
static void proc_control_node_saveJacobian(s_YLC2gJhPBjEs8VvOTvcE4B_proc_T *obj,
  int32_T nVar, int32_T mIneq, const real_T JacCineqTrans_data[], int32_T
  ineqCol0, const real_T JacCeqTrans_data[], int32_T ldJ)
{
  int32_T b;
  int32_T iCol;
  int32_T iCol_old;
  int32_T idx_col;
  int32_T loop_ub_tmp;
  int32_T y_size_idx_0;
  int32_T y_size_idx_1;
  iCol = (ineqCol0 - 1) * ldJ;
  iCol_old = -1;
  b = mIneq - ineqCol0;
  for (idx_col = 0; idx_col <= b; idx_col++) {
    y_size_idx_0 = obj->JacCineqTrans_old.size[0];
    y_size_idx_1 = obj->JacCineqTrans_old.size[1];
    loop_ub_tmp = obj->JacCineqTrans_old.size[0] * obj->JacCineqTrans_old.size[1];
    if (0 <= loop_ub_tmp - 1) {
      memcpy(&proc_control_node_B.y_data[0], &obj->JacCineqTrans_old.data[0],
             loop_ub_tmp * sizeof(real_T));
    }

    for (loop_ub_tmp = 1; loop_ub_tmp - 1 < nVar; loop_ub_tmp++) {
      proc_control_node_B.y_data[iCol_old + loop_ub_tmp] = JacCineqTrans_data
        [(iCol + loop_ub_tmp) - 1];
    }

    obj->JacCineqTrans_old.size[1] = y_size_idx_1;
    y_size_idx_0 *= y_size_idx_1;
    if (0 <= y_size_idx_0 - 1) {
      memcpy(&obj->JacCineqTrans_old.data[0], &proc_control_node_B.y_data[0],
             y_size_idx_0 * sizeof(real_T));
    }

    iCol += ldJ;
    iCol_old += ldJ;
  }

  iCol = -1;
  iCol_old = -1;
  for (b = 0; b < 52; b++) {
    for (idx_col = 1; idx_col - 1 < nVar; idx_col++) {
      obj->JacCeqTrans_old.data[iCol_old + idx_col] = JacCeqTrans_data[iCol +
        idx_col];
    }

    iCol += ldJ;
    iCol_old += ldJ;
  }
}

// Function for MATLAB Function: '<S94>/NLMPC'
static void proc_control_node_saveState(s_YLC2gJhPBjEs8VvOTvcE4B_proc_T *obj)
{
  int32_T k;
  int32_T y_size_idx_0;
  obj->sqpFval_old = obj->sqpFval;
  for (k = 0; k < 69; k++) {
    obj->xstarsqp_old[k] = obj->xstarsqp[k];
    obj->grad_old.data[k] = obj->grad.data[k];
  }

  y_size_idx_0 = obj->cIneq_old.size;
  if (0 <= obj->cIneq_old.size - 1) {
    memcpy(&proc_control_node_B.y_data_o[0], &obj->cIneq_old.data[0],
           obj->cIneq_old.size * sizeof(real_T));
  }

  for (k = 0; k < obj->mIneq; k++) {
    proc_control_node_B.y_data_o[k] = obj->cIneq.data[k];
  }

  if (0 <= y_size_idx_0 - 1) {
    memcpy(&obj->cIneq_old.data[0], &proc_control_node_B.y_data_o[0],
           y_size_idx_0 * sizeof(real_T));
  }

  memcpy(&obj->cEq_old[0], &obj->cEq[0], 52U * sizeof(real_T));
}

// Function for MATLAB Function: '<S94>/NLMPC'
static real_T proc_control__computeComplError(const int32_T
  *fscales_lineq_constraint_size, const int32_T *fscales_cineq_constraint_size,
  const real_T xCurrent[69], int32_T mIneq, const real_T cIneq_data[], const
  int32_T finiteLB_data[], int32_T mLB, const real_T lb[69], const int32_T
  finiteUB_data[], int32_T mUB, const real_T lambda_data[], int32_T iL0)
{
  real_T nlpComplError;
  int32_T c_idx;
  int32_T iLineq0;
  int32_T mLinIneq;
  nlpComplError = 0.0;
  if ((mIneq + mLB) + mUB > 0) {
    for (iLineq0 = 0; iLineq0 < *fscales_lineq_constraint_size; iLineq0++) {
      proc_control_node_B.ubLambda = fabs(cIneq_data[iLineq0]);
      proc_control_node_B.lbDelta = lambda_data[(iL0 + iLineq0) - 1];
      if ((!(proc_control_node_B.ubLambda < proc_control_node_B.lbDelta)) &&
          (!rtIsNaN(proc_control_node_B.lbDelta))) {
        proc_control_node_B.ubLambda = proc_control_node_B.lbDelta;
      }

      proc_control_node_B.lbDelta = fabs(proc_control_node_B.lbDelta *
        cIneq_data[iLineq0]);
      if ((proc_control_node_B.lbDelta < proc_control_node_B.ubLambda) ||
          rtIsNaN(proc_control_node_B.ubLambda)) {
        proc_control_node_B.ubLambda = proc_control_node_B.lbDelta;
      }

      if ((!(nlpComplError > proc_control_node_B.ubLambda)) && (!rtIsNaN
           (proc_control_node_B.ubLambda))) {
        nlpComplError = proc_control_node_B.ubLambda;
      }
    }

    iLineq0 = (iL0 + *fscales_lineq_constraint_size) - 2;
    for (c_idx = 1; c_idx - 1 < *fscales_cineq_constraint_size; c_idx++) {
      proc_control_node_B.ubLambda = fabs(cIneq_data
        [(*fscales_lineq_constraint_size - 1) + c_idx]);
      proc_control_node_B.lbDelta = lambda_data[iLineq0 + c_idx];
      if ((!(proc_control_node_B.ubLambda < proc_control_node_B.lbDelta)) &&
          (!rtIsNaN(proc_control_node_B.lbDelta))) {
        proc_control_node_B.ubLambda = proc_control_node_B.lbDelta;
      }

      proc_control_node_B.lbDelta = fabs(cIneq_data
        [(*fscales_lineq_constraint_size - 1) + c_idx] *
        proc_control_node_B.lbDelta);
      if ((proc_control_node_B.lbDelta < proc_control_node_B.ubLambda) ||
          rtIsNaN(proc_control_node_B.ubLambda)) {
        proc_control_node_B.ubLambda = proc_control_node_B.lbDelta;
      }

      if ((!(nlpComplError > proc_control_node_B.ubLambda)) && (!rtIsNaN
           (proc_control_node_B.ubLambda))) {
        nlpComplError = proc_control_node_B.ubLambda;
      }
    }

    iLineq0 = (iL0 + mIneq) - 1;
    mLinIneq = iLineq0 + mLB;
    for (c_idx = 0; c_idx < mLB; c_idx++) {
      proc_control_node_B.lbDelta = xCurrent[finiteLB_data[c_idx] - 1] -
        lb[finiteLB_data[c_idx] - 1];
      proc_control_node_B.lbLambda = lambda_data[iLineq0 + c_idx];
      proc_control_node_B.ubLambda = fabs(proc_control_node_B.lbDelta);
      if ((!(proc_control_node_B.ubLambda < proc_control_node_B.lbLambda)) &&
          (!rtIsNaN(proc_control_node_B.lbLambda))) {
        proc_control_node_B.ubLambda = proc_control_node_B.lbLambda;
      }

      proc_control_node_B.lbDelta = fabs(proc_control_node_B.lbDelta *
        proc_control_node_B.lbLambda);
      if ((proc_control_node_B.lbDelta < proc_control_node_B.ubLambda) ||
          rtIsNaN(proc_control_node_B.ubLambda)) {
        proc_control_node_B.ubLambda = proc_control_node_B.lbDelta;
      }

      if ((!(nlpComplError > proc_control_node_B.ubLambda)) && (!rtIsNaN
           (proc_control_node_B.ubLambda))) {
        nlpComplError = proc_control_node_B.ubLambda;
      }
    }

    for (iLineq0 = 0; iLineq0 < mUB; iLineq0++) {
      proc_control_node_B.ubLambda = lambda_data[mLinIneq + iLineq0];
      if (rtIsNaN(proc_control_node_B.ubLambda)) {
        proc_control_node_B.lbDelta = (rtInf) - xCurrent[finiteUB_data[iLineq0]
          - 1];
      } else {
        proc_control_node_B.lbDelta = proc_control_node_B.ubLambda;
      }

      proc_control_node_B.ubLambda = fabs(((rtInf) -
        xCurrent[finiteUB_data[iLineq0] - 1]) * proc_control_node_B.ubLambda);
      if ((proc_control_node_B.ubLambda < proc_control_node_B.lbDelta) ||
          rtIsNaN(proc_control_node_B.lbDelta)) {
        proc_control_node_B.lbDelta = proc_control_node_B.ubLambda;
      }

      if ((!(nlpComplError > proc_control_node_B.lbDelta)) && (!rtIsNaN
           (proc_control_node_B.lbDelta))) {
        nlpComplError = proc_control_node_B.lbDelta;
      }
    }
  }

  return nlpComplError;
}

// Function for MATLAB Function: '<S94>/NLMPC'
static void proc_control_node_xgemv_j(int32_T m, int32_T n, const real_T A_data[],
  int32_T lda, const real_T x_data[], int32_T ix0, real_T y_data[])
{
  int32_T b;
  int32_T c;
  int32_T ia;
  int32_T iac;
  if (n != 0) {
    proc_control_node_B.ix_k3 = ix0;
    c = (n - 1) * lda + 1;
    iac = 1;
    while (((lda > 0) && (iac <= c)) || ((lda < 0) && (iac >= c))) {
      proc_control_node_B.iy_a = 0;
      b = (iac + m) - 1;
      for (ia = iac; ia <= b; ia++) {
        y_data[proc_control_node_B.iy_a] += A_data[ia - 1] *
          x_data[proc_control_node_B.ix_k3 - 1];
        proc_control_node_B.iy_a++;
      }

      proc_control_node_B.ix_k3++;
      iac += lda;
    }
  }
}

// Function for MATLAB Function: '<S94>/NLMPC'
static void proc_control_n_computeGradLag_a(real_T workspace_data[], int32_T ldA,
  int32_T nVar, const real_T grad_data[], int32_T mIneq, const real_T
  AineqTrans_data[], const real_T AeqTrans_data[], const int32_T
  finiteFixed_data[], int32_T mFixed, const int32_T finiteLB_data[], int32_T mLB,
  const int32_T finiteUB_data[], int32_T mUB, const real_T lambda_data[])
{
  proc_control_node_B.iL0 = 0;
  while (proc_control_node_B.iL0 <= nVar - 1) {
    workspace_data[proc_control_node_B.iL0] = grad_data[proc_control_node_B.iL0];
    proc_control_node_B.iL0++;
  }

  proc_control_node_B.iL0 = 0;
  while (proc_control_node_B.iL0 <= mFixed - 1) {
    workspace_data[finiteFixed_data[proc_control_node_B.iL0] - 1] +=
      lambda_data[proc_control_node_B.iL0];
    proc_control_node_B.iL0++;
  }

  proc_control_node_xgemv_j(nVar, 52, AeqTrans_data, ldA, lambda_data, mFixed +
    1, workspace_data);
  proc_control_node_xgemv_j(nVar, mIneq, AineqTrans_data, ldA, lambda_data,
    mFixed + 53, workspace_data);
  proc_control_node_B.iL0 = (mFixed + mIneq) + 52;
  proc_control_node_B.c_idx_o = 0;
  while (proc_control_node_B.c_idx_o <= mLB - 1) {
    workspace_data[finiteLB_data[proc_control_node_B.c_idx_o] - 1] -=
      lambda_data[proc_control_node_B.iL0];
    proc_control_node_B.iL0++;
    proc_control_node_B.c_idx_o++;
  }

  proc_control_node_B.c_idx_o = 0;
  while (proc_control_node_B.c_idx_o <= mUB - 1) {
    workspace_data[finiteUB_data[proc_control_node_B.c_idx_o] - 1] +=
      lambda_data[proc_control_node_B.iL0];
    proc_control_node_B.iL0++;
    proc_control_node_B.c_idx_o++;
  }
}

// Function for MATLAB Function: '<S94>/NLMPC'
static void proc_con_computeDualFeasError_m(int32_T nVar, const real_T
  gradLag_data[], boolean_T *gradOK, real_T *val)
{
  real_T u1;
  int32_T b_idx;
  boolean_T exitg1;
  *gradOK = true;
  *val = 0.0;
  b_idx = 0;
  exitg1 = false;
  while ((!exitg1) && (b_idx <= nVar - 1)) {
    *gradOK = ((!rtIsInf(gradLag_data[b_idx])) && (!rtIsNaN(gradLag_data[b_idx])));
    if (!*gradOK) {
      exitg1 = true;
    } else {
      u1 = fabs(gradLag_data[b_idx]);
      if ((!(*val > u1)) && (!rtIsNaN(u1))) {
        *val = u1;
      }

      b_idx++;
    }
  }
}

// Function for MATLAB Function: '<S94>/NLMPC'
static void proc_updateWorkingSetForNewQP_h(const real_T xk[69],
  s_MFLHEgKtV7gODWBOEr7maD_proc_T *WorkingSet, int32_T mIneq, int32_T
  mNonlinIneq, const real_T cIneq_data[], const real_T cEq[52], int32_T mLB,
  const real_T lb[69], int32_T mUB, int32_T mFixed)
{
  int32_T b_idx;
  int32_T i;
  int32_T iEq0;
  int32_T iw0;
  int32_T nVar;
  nVar = WorkingSet->nVar - 1;
  iw0 = WorkingSet->ldA * mFixed;
  iEq0 = 0;
  for (b_idx = 0; b_idx < 52; b_idx++) {
    WorkingSet->beq[b_idx] = -cEq[b_idx];
    WorkingSet->bwset.data[mFixed + b_idx] = WorkingSet->beq[b_idx];
    for (i = 0; i <= nVar; i++) {
      WorkingSet->ATwset.data[iw0 + i] = WorkingSet->Aeq.data[iEq0 + i];
    }

    iw0 += WorkingSet->ldA;
    iEq0 += WorkingSet->ldA;
  }

  for (iw0 = 0; iw0 < mIneq; iw0++) {
    WorkingSet->bineq.data[iw0] = -cIneq_data[iw0];
  }

  for (iw0 = 0; iw0 < mLB; iw0++) {
    WorkingSet->lb.data[WorkingSet->indexLB.data[iw0] - 1] = -lb
      [WorkingSet->indexLB.data[iw0] - 1] + xk[WorkingSet->indexLB.data[iw0] - 1];
  }

  for (iw0 = 0; iw0 < mUB; iw0++) {
    WorkingSet->ub.data[WorkingSet->indexUB.data[iw0] - 1] = (rtInf) -
      xk[WorkingSet->indexUB.data[iw0] - 1];
  }

  for (iw0 = 0; iw0 < mFixed; iw0++) {
    WorkingSet->ub.data[WorkingSet->indexFixed.data[iw0] - 1] = (rtInf) -
      xk[WorkingSet->indexFixed.data[iw0] - 1];
    WorkingSet->bwset.data[iw0] = (rtInf) - xk[WorkingSet->indexFixed.data[iw0]
      - 1];
  }

  if (WorkingSet->nActiveConstr > mFixed + 52) {
    for (b_idx = mFixed + 52; b_idx < WorkingSet->nActiveConstr; b_idx++) {
      switch (WorkingSet->Wid.data[b_idx]) {
       case 4:
        WorkingSet->bwset.data[b_idx] = WorkingSet->lb.data
          [WorkingSet->indexLB.data[WorkingSet->Wlocalidx.data[b_idx] - 1] - 1];
        break;

       case 5:
        WorkingSet->bwset.data[b_idx] = WorkingSet->ub.data
          [WorkingSet->indexUB.data[WorkingSet->Wlocalidx.data[b_idx] - 1] - 1];
        break;

       default:
        WorkingSet->bwset.data[b_idx] = WorkingSet->bineq.data
          [WorkingSet->Wlocalidx.data[b_idx] - 1];
        if ((mNonlinIneq > 0) && (WorkingSet->Wlocalidx.data[b_idx] >=
             mNonlinIneq)) {
          iw0 = WorkingSet->ldA * b_idx;
          iEq0 = (WorkingSet->Wlocalidx.data[b_idx] - 1) * WorkingSet->ldA;
          for (i = 1; i - 1 <= nVar; i++) {
            WorkingSet->ATwset.data[(iw0 + i) - 1] = WorkingSet->Aineq.data
              [(iEq0 + i) - 1];
          }
        }
        break;
      }
    }
  }
}

// Function for MATLAB Function: '<S94>/NLMPC'
static real_T proc_control_node_xnrm2(int32_T n, const real_T x_data[], int32_T
  ix0)
{
  real_T y;
  int32_T k;
  int32_T kend;
  y = 0.0;
  if (n >= 1) {
    if (n == 1) {
      y = fabs(x_data[ix0 - 1]);
    } else {
      proc_control_node_B.scale_fb = 3.3121686421112381E-170;
      kend = (ix0 + n) - 1;
      for (k = ix0; k <= kend; k++) {
        proc_control_node_B.absxk_f = fabs(x_data[k - 1]);
        if (proc_control_node_B.absxk_f > proc_control_node_B.scale_fb) {
          proc_control_node_B.t_c1 = proc_control_node_B.scale_fb /
            proc_control_node_B.absxk_f;
          y = y * proc_control_node_B.t_c1 * proc_control_node_B.t_c1 + 1.0;
          proc_control_node_B.scale_fb = proc_control_node_B.absxk_f;
        } else {
          proc_control_node_B.t_c1 = proc_control_node_B.absxk_f /
            proc_control_node_B.scale_fb;
          y += proc_control_node_B.t_c1 * proc_control_node_B.t_c1;
        }
      }

      y = proc_control_node_B.scale_fb * sqrt(y);
    }
  }

  return y;
}

// Function for MATLAB Function: '<S94>/NLMPC'
static real_T proc_control_node_xzlarfg(int32_T n, real_T *alpha1, real_T
  x_data[], int32_T ix0)
{
  real_T tau;
  int32_T c_k;
  tau = 0.0;
  if (n > 0) {
    proc_control_node_B.xnorm_d = proc_control_node_xnrm2(n - 1, x_data, ix0);
    if (proc_control_node_B.xnorm_d != 0.0) {
      proc_control_node_B.xnorm_d = proc_control_node_rt_hypotd_snf(*alpha1,
        proc_control_node_B.xnorm_d);
      if (*alpha1 >= 0.0) {
        proc_control_node_B.xnorm_d = -proc_control_node_B.xnorm_d;
      }

      if (fabs(proc_control_node_B.xnorm_d) < 1.0020841800044864E-292) {
        proc_control_node_B.knt_l = -1;
        c_k = (ix0 + n) - 2;
        do {
          proc_control_node_B.knt_l++;
          proc_control_node_B.b_k_o = ix0;
          while (proc_control_node_B.b_k_o <= c_k) {
            x_data[proc_control_node_B.b_k_o - 1] *= 9.9792015476736E+291;
            proc_control_node_B.b_k_o++;
          }

          proc_control_node_B.xnorm_d *= 9.9792015476736E+291;
          *alpha1 *= 9.9792015476736E+291;
        } while (!(fabs(proc_control_node_B.xnorm_d) >= 1.0020841800044864E-292));

        proc_control_node_B.xnorm_d = proc_control_node_rt_hypotd_snf(*alpha1,
          proc_control_node_xnrm2(n - 1, x_data, ix0));
        if (*alpha1 >= 0.0) {
          proc_control_node_B.xnorm_d = -proc_control_node_B.xnorm_d;
        }

        tau = (proc_control_node_B.xnorm_d - *alpha1) /
          proc_control_node_B.xnorm_d;
        *alpha1 = 1.0 / (*alpha1 - proc_control_node_B.xnorm_d);
        proc_control_node_B.b_k_o = ix0;
        while (proc_control_node_B.b_k_o <= c_k) {
          x_data[proc_control_node_B.b_k_o - 1] *= *alpha1;
          proc_control_node_B.b_k_o++;
        }

        for (c_k = 0; c_k <= proc_control_node_B.knt_l; c_k++) {
          proc_control_node_B.xnorm_d *= 1.0020841800044864E-292;
        }

        *alpha1 = proc_control_node_B.xnorm_d;
      } else {
        tau = (proc_control_node_B.xnorm_d - *alpha1) /
          proc_control_node_B.xnorm_d;
        *alpha1 = 1.0 / (*alpha1 - proc_control_node_B.xnorm_d);
        proc_control_node_B.knt_l = (ix0 + n) - 2;
        for (c_k = ix0; c_k <= proc_control_node_B.knt_l; c_k++) {
          x_data[c_k - 1] *= *alpha1;
        }

        *alpha1 = proc_control_node_B.xnorm_d;
      }
    }
  }

  return tau;
}

// Function for MATLAB Function: '<S94>/NLMPC'
static void proc_control_node_xgemv_jh(int32_T m, int32_T n, const real_T
  A_data[], int32_T ia0, int32_T lda, const real_T x_data[], int32_T ix0, real_T
  y_data[])
{
  int32_T b;
  int32_T d;
  int32_T ia;
  int32_T iac;
  if (n != 0) {
    proc_control_node_B.b_iy_a = 0;
    while (proc_control_node_B.b_iy_a <= n - 1) {
      y_data[proc_control_node_B.b_iy_a] = 0.0;
      proc_control_node_B.b_iy_a++;
    }

    proc_control_node_B.b_iy_a = 0;
    b = (n - 1) * lda + ia0;
    iac = ia0;
    while (((lda > 0) && (iac <= b)) || ((lda < 0) && (iac >= b))) {
      proc_control_node_B.ix_mz = ix0;
      proc_control_node_B.c_ny = 0.0;
      d = (iac + m) - 1;
      for (ia = iac; ia <= d; ia++) {
        proc_control_node_B.c_ny += A_data[ia - 1] *
          x_data[proc_control_node_B.ix_mz - 1];
        proc_control_node_B.ix_mz++;
      }

      y_data[proc_control_node_B.b_iy_a] += proc_control_node_B.c_ny;
      proc_control_node_B.b_iy_a++;
      iac += lda;
    }
  }
}

// Function for MATLAB Function: '<S94>/NLMPC'
static void proc_control_node_xgerc(int32_T m, int32_T n, real_T alpha1, int32_T
  ix0, const real_T y_data[], real_T A_data[], int32_T ia0, int32_T lda)
{
  int32_T b;
  int32_T ijA;
  int32_T ix;
  int32_T j;
  if (!(alpha1 == 0.0)) {
    proc_control_node_B.jA_o = ia0 - 1;
    proc_control_node_B.jy_p = 0;
    for (j = 0; j < n; j++) {
      if (y_data[proc_control_node_B.jy_p] != 0.0) {
        proc_control_node_B.temp_a = y_data[proc_control_node_B.jy_p] * alpha1;
        ix = ix0;
        b = m + proc_control_node_B.jA_o;
        for (ijA = proc_control_node_B.jA_o; ijA < b; ijA++) {
          A_data[ijA] += A_data[ix - 1] * proc_control_node_B.temp_a;
          ix++;
        }
      }

      proc_control_node_B.jy_p++;
      proc_control_node_B.jA_o += lda;
    }
  }
}

// Function for MATLAB Function: '<S94>/NLMPC'
static void proc_control_node_xzlarf(int32_T m, int32_T n, int32_T iv0, real_T
  tau, real_T C_data[], int32_T ic0, int32_T ldc, real_T work_data[])
{
  int32_T exitg1;
  boolean_T exitg2;
  if (tau != 0.0) {
    proc_control_node_B.lastv_g4 = m;
    proc_control_node_B.lastc_j = iv0 + m;
    while ((proc_control_node_B.lastv_g4 > 0) &&
           (C_data[proc_control_node_B.lastc_j - 2] == 0.0)) {
      proc_control_node_B.lastv_g4--;
      proc_control_node_B.lastc_j--;
    }

    proc_control_node_B.lastc_j = n;
    exitg2 = false;
    while ((!exitg2) && (proc_control_node_B.lastc_j > 0)) {
      proc_control_node_B.coltop_m = (proc_control_node_B.lastc_j - 1) * ldc +
        ic0;
      proc_control_node_B.ia_l = proc_control_node_B.coltop_m;
      do {
        exitg1 = 0;
        if (proc_control_node_B.ia_l <= (proc_control_node_B.coltop_m +
             proc_control_node_B.lastv_g4) - 1) {
          if (C_data[proc_control_node_B.ia_l - 1] != 0.0) {
            exitg1 = 1;
          } else {
            proc_control_node_B.ia_l++;
          }
        } else {
          proc_control_node_B.lastc_j--;
          exitg1 = 2;
        }
      } while (exitg1 == 0);

      if (exitg1 == 1) {
        exitg2 = true;
      }
    }
  } else {
    proc_control_node_B.lastv_g4 = 0;
    proc_control_node_B.lastc_j = 0;
  }

  if (proc_control_node_B.lastv_g4 > 0) {
    proc_control_node_xgemv_jh(proc_control_node_B.lastv_g4,
      proc_control_node_B.lastc_j, C_data, ic0, ldc, C_data, iv0, work_data);
    proc_control_node_xgerc(proc_control_node_B.lastv_g4,
      proc_control_node_B.lastc_j, -tau, iv0, work_data, C_data, ic0, ldc);
  }
}

// Function for MATLAB Function: '<S94>/NLMPC'
static void proc_control_node_qrf(real_T A_data[], const int32_T A_size[2],
  int32_T m, int32_T n, int32_T nfxd, real_T tau_data[])
{
  proc_control_node_B.lda = A_size[0];
  proc_control_node_B.ii_b = A_size[1];
  if (0 <= proc_control_node_B.ii_b - 1) {
    memset(&proc_control_node_B.work_data[0], 0, proc_control_node_B.ii_b *
           sizeof(real_T));
  }

  proc_control_node_B.i_m1 = 0;
  while (proc_control_node_B.i_m1 <= nfxd - 1) {
    proc_control_node_B.ii_b = proc_control_node_B.i_m1 *
      proc_control_node_B.lda + proc_control_node_B.i_m1;
    proc_control_node_B.mmi_i = m - proc_control_node_B.i_m1;
    if (proc_control_node_B.i_m1 + 1 < m) {
      proc_control_node_B.b_atmp = A_data[proc_control_node_B.ii_b];
      tau_data[proc_control_node_B.i_m1] = proc_control_node_xzlarfg
        (proc_control_node_B.mmi_i, &proc_control_node_B.b_atmp, A_data,
         proc_control_node_B.ii_b + 2);
      A_data[proc_control_node_B.ii_b] = proc_control_node_B.b_atmp;
    } else {
      tau_data[proc_control_node_B.i_m1] = 0.0;
    }

    if (proc_control_node_B.i_m1 + 1 < n) {
      proc_control_node_B.b_atmp = A_data[proc_control_node_B.ii_b];
      A_data[proc_control_node_B.ii_b] = 1.0;
      proc_control_node_xzlarf(proc_control_node_B.mmi_i, (n -
        proc_control_node_B.i_m1) - 1, proc_control_node_B.ii_b + 1,
        tau_data[proc_control_node_B.i_m1], A_data, (proc_control_node_B.ii_b +
        proc_control_node_B.lda) + 1, proc_control_node_B.lda,
        proc_control_node_B.work_data);
      A_data[proc_control_node_B.ii_b] = proc_control_node_B.b_atmp;
    }

    proc_control_node_B.i_m1++;
  }
}

// Function for MATLAB Function: '<S94>/NLMPC'
static void proc_control_node_xswap(int32_T n, real_T x_data[], int32_T ix0,
  int32_T iy0)
{
  int32_T ix;
  int32_T iy;
  int32_T k;
  ix = ix0 - 1;
  iy = iy0 - 1;
  for (k = 0; k < n; k++) {
    proc_control_node_B.temp_h = x_data[ix];
    x_data[ix] = x_data[iy];
    x_data[iy] = proc_control_node_B.temp_h;
    ix++;
    iy++;
  }
}

// Function for MATLAB Function: '<S94>/NLMPC'
static void proc_control_node_qrpf(real_T A_data[], const int32_T A_size[2],
  int32_T m, int32_T n, int32_T nfxd, real_T tau_data[], int32_T jpvt_data[])
{
  proc_control_node_B.ma_n = A_size[0];
  if (m < n) {
    proc_control_node_B.minmn_b = m;
  } else {
    proc_control_node_B.minmn_b = n;
  }

  proc_control_node_B.mmi_a = A_size[1];
  if (0 <= proc_control_node_B.mmi_a - 1) {
    memset(&proc_control_node_B.work_data_i[0], 0, proc_control_node_B.mmi_a *
           sizeof(real_T));
  }

  proc_control_node_B.mmi_a = A_size[1];
  if (0 <= proc_control_node_B.mmi_a - 1) {
    memset(&proc_control_node_B.vn1_data[0], 0, proc_control_node_B.mmi_a *
           sizeof(real_T));
  }

  proc_control_node_B.mmi_a = A_size[1];
  if (0 <= proc_control_node_B.mmi_a - 1) {
    memset(&proc_control_node_B.vn2_data[0], 0, proc_control_node_B.mmi_a *
           sizeof(real_T));
  }

  proc_control_node_B.j_l = nfxd;
  while (proc_control_node_B.j_l + 1 <= n) {
    proc_control_node_B.vn1_data[proc_control_node_B.j_l] =
      proc_control_node_xnrm2(m - nfxd, A_data, (proc_control_node_B.j_l *
      proc_control_node_B.ma_n + nfxd) + 1);
    proc_control_node_B.vn2_data[proc_control_node_B.j_l] =
      proc_control_node_B.vn1_data[proc_control_node_B.j_l];
    proc_control_node_B.j_l++;
  }

  proc_control_node_B.j_l = nfxd;
  while (proc_control_node_B.j_l + 1 <= proc_control_node_B.minmn_b) {
    proc_control_node_B.ii_h = proc_control_node_B.j_l *
      proc_control_node_B.ma_n + proc_control_node_B.j_l;
    proc_control_node_B.nmi_b = n - proc_control_node_B.j_l;
    proc_control_node_B.mmi_a = m - proc_control_node_B.j_l;
    if (proc_control_node_B.nmi_b < 1) {
      proc_control_node_B.pvt_b = -1;
    } else {
      proc_control_node_B.pvt_b = 0;
      if (proc_control_node_B.nmi_b > 1) {
        proc_control_node_B.ix_h = proc_control_node_B.j_l;
        proc_control_node_B.smax_d = fabs
          (proc_control_node_B.vn1_data[proc_control_node_B.j_l]);
        proc_control_node_B.k_do = 2;
        while (proc_control_node_B.k_do <= proc_control_node_B.nmi_b) {
          proc_control_node_B.ix_h++;
          proc_control_node_B.temp2 = fabs
            (proc_control_node_B.vn1_data[proc_control_node_B.ix_h]);
          if (proc_control_node_B.temp2 > proc_control_node_B.smax_d) {
            proc_control_node_B.pvt_b = proc_control_node_B.k_do - 1;
            proc_control_node_B.smax_d = proc_control_node_B.temp2;
          }

          proc_control_node_B.k_do++;
        }
      }
    }

    proc_control_node_B.pvt_b += proc_control_node_B.j_l;
    if (proc_control_node_B.pvt_b + 1 != proc_control_node_B.j_l + 1) {
      proc_control_node_xswap(m, A_data, proc_control_node_B.pvt_b *
        proc_control_node_B.ma_n + 1, proc_control_node_B.j_l *
        proc_control_node_B.ma_n + 1);
      proc_control_node_B.ix_h = jpvt_data[proc_control_node_B.pvt_b];
      jpvt_data[proc_control_node_B.pvt_b] = jpvt_data[proc_control_node_B.j_l];
      jpvt_data[proc_control_node_B.j_l] = proc_control_node_B.ix_h;
      proc_control_node_B.vn1_data[proc_control_node_B.pvt_b] =
        proc_control_node_B.vn1_data[proc_control_node_B.j_l];
      proc_control_node_B.vn2_data[proc_control_node_B.pvt_b] =
        proc_control_node_B.vn2_data[proc_control_node_B.j_l];
    }

    if (proc_control_node_B.j_l + 1 < m) {
      proc_control_node_B.smax_d = A_data[proc_control_node_B.ii_h];
      tau_data[proc_control_node_B.j_l] = proc_control_node_xzlarfg
        (proc_control_node_B.mmi_a, &proc_control_node_B.smax_d, A_data,
         proc_control_node_B.ii_h + 2);
      A_data[proc_control_node_B.ii_h] = proc_control_node_B.smax_d;
    } else {
      tau_data[proc_control_node_B.j_l] = 0.0;
    }

    if (proc_control_node_B.j_l + 1 < n) {
      proc_control_node_B.smax_d = A_data[proc_control_node_B.ii_h];
      A_data[proc_control_node_B.ii_h] = 1.0;
      proc_control_node_xzlarf(proc_control_node_B.mmi_a,
        proc_control_node_B.nmi_b - 1, proc_control_node_B.ii_h + 1,
        tau_data[proc_control_node_B.j_l], A_data, (proc_control_node_B.ii_h +
        proc_control_node_B.ma_n) + 1, proc_control_node_B.ma_n,
        proc_control_node_B.work_data_i);
      A_data[proc_control_node_B.ii_h] = proc_control_node_B.smax_d;
    }

    proc_control_node_B.ii_h = proc_control_node_B.j_l + 1;
    while (proc_control_node_B.ii_h + 1 <= n) {
      proc_control_node_B.nmi_b = proc_control_node_B.ii_h *
        proc_control_node_B.ma_n + proc_control_node_B.j_l;
      if (proc_control_node_B.vn1_data[proc_control_node_B.ii_h] != 0.0) {
        proc_control_node_B.smax_d = fabs(A_data[proc_control_node_B.nmi_b]) /
          proc_control_node_B.vn1_data[proc_control_node_B.ii_h];
        proc_control_node_B.smax_d = 1.0 - proc_control_node_B.smax_d *
          proc_control_node_B.smax_d;
        if (proc_control_node_B.smax_d < 0.0) {
          proc_control_node_B.smax_d = 0.0;
        }

        proc_control_node_B.temp2 =
          proc_control_node_B.vn1_data[proc_control_node_B.ii_h] /
          proc_control_node_B.vn2_data[proc_control_node_B.ii_h];
        proc_control_node_B.temp2 = proc_control_node_B.temp2 *
          proc_control_node_B.temp2 * proc_control_node_B.smax_d;
        if (proc_control_node_B.temp2 <= 1.4901161193847656E-8) {
          if (proc_control_node_B.j_l + 1 < m) {
            proc_control_node_B.vn1_data[proc_control_node_B.ii_h] =
              proc_control_node_xnrm2(proc_control_node_B.mmi_a - 1, A_data,
              proc_control_node_B.nmi_b + 2);
            proc_control_node_B.vn2_data[proc_control_node_B.ii_h] =
              proc_control_node_B.vn1_data[proc_control_node_B.ii_h];
          } else {
            proc_control_node_B.vn1_data[proc_control_node_B.ii_h] = 0.0;
            proc_control_node_B.vn2_data[proc_control_node_B.ii_h] = 0.0;
          }
        } else {
          proc_control_node_B.vn1_data[proc_control_node_B.ii_h] *= sqrt
            (proc_control_node_B.smax_d);
        }
      }

      proc_control_node_B.ii_h++;
    }

    proc_control_node_B.j_l++;
  }
}

// Function for MATLAB Function: '<S94>/NLMPC'
static void proc_control_node_xgeqp3(real_T A_data[], const int32_T A_size[2],
  int32_T m, int32_T n, int32_T jpvt_data[], real_T tau_data[], int32_T
  *tau_size)
{
  proc_control_node_B.ma_a = A_size[0];
  if (A_size[0] < A_size[1]) {
    proc_control_node_B.minmana_l = A_size[0];
  } else {
    proc_control_node_B.minmana_l = A_size[1];
  }

  if (m < n) {
    proc_control_node_B.minmn_i = m;
  } else {
    proc_control_node_B.minmn_i = n;
  }

  *tau_size = proc_control_node_B.minmana_l;
  if (0 <= proc_control_node_B.minmana_l - 1) {
    memset(&tau_data[0], 0, proc_control_node_B.minmana_l * sizeof(real_T));
  }

  if (proc_control_node_B.minmn_i < 1) {
    proc_control_node_B.ma_a = 0;
    while (proc_control_node_B.ma_a <= n - 1) {
      jpvt_data[proc_control_node_B.ma_a] = proc_control_node_B.ma_a + 1;
      proc_control_node_B.ma_a++;
    }
  } else {
    proc_control_node_B.nfxd = -1;
    proc_control_node_B.minmana_l = 0;
    while (proc_control_node_B.minmana_l <= n - 1) {
      if (jpvt_data[proc_control_node_B.minmana_l] != 0) {
        proc_control_node_B.nfxd++;
        if (proc_control_node_B.minmana_l + 1 != proc_control_node_B.nfxd + 1) {
          proc_control_node_xswap(m, A_data, proc_control_node_B.minmana_l *
            proc_control_node_B.ma_a + 1, proc_control_node_B.nfxd *
            proc_control_node_B.ma_a + 1);
          jpvt_data[proc_control_node_B.minmana_l] =
            jpvt_data[proc_control_node_B.nfxd];
          jpvt_data[proc_control_node_B.nfxd] = proc_control_node_B.minmana_l +
            1;
        } else {
          jpvt_data[proc_control_node_B.minmana_l] =
            proc_control_node_B.minmana_l + 1;
        }
      } else {
        jpvt_data[proc_control_node_B.minmana_l] = proc_control_node_B.minmana_l
          + 1;
      }

      proc_control_node_B.minmana_l++;
    }

    if (proc_control_node_B.nfxd + 1 < proc_control_node_B.minmn_i) {
      proc_control_node_B.nfxd++;
    } else {
      proc_control_node_B.nfxd = proc_control_node_B.minmn_i;
    }

    proc_control_node_qrf(A_data, A_size, m, n, proc_control_node_B.nfxd,
                          tau_data);
    if (proc_control_node_B.nfxd < proc_control_node_B.minmn_i) {
      proc_control_node_qrpf(A_data, A_size, m, n, proc_control_node_B.nfxd,
        tau_data, jpvt_data);
    }
  }
}

// Function for MATLAB Function: '<S94>/NLMPC'
static void proc_control_node_factorQRE(s_1UhBFHxHKUXshhZtLgMUHE_proc_T *obj,
  const real_T A_data[], int32_T mrows, int32_T ncols, int32_T ldA)
{
  proc_control_node_B.b_idx_o = 0;
  while (proc_control_node_B.b_idx_o <= ncols - 1) {
    proc_control_node_B.iA0_f = ldA * proc_control_node_B.b_idx_o;
    proc_control_node_B.iQR0_l = obj->ldq * proc_control_node_B.b_idx_o;
    proc_control_node_B.b_l = 1;
    while (proc_control_node_B.b_l - 1 <= mrows - 1) {
      obj->QR.data[(proc_control_node_B.iQR0_l + proc_control_node_B.b_l) - 1] =
        A_data[(proc_control_node_B.iA0_f + proc_control_node_B.b_l) - 1];
      proc_control_node_B.b_l++;
    }

    proc_control_node_B.b_idx_o++;
  }

  obj->usedPivoting = true;
  obj->mrows = mrows;
  obj->ncols = ncols;
  if (mrows < ncols) {
    obj->minRowCol = mrows;
  } else {
    obj->minRowCol = ncols;
  }

  proc_control_node_B.b_size_l[0] = obj->QR.size[0];
  proc_control_node_B.b_size_l[1] = obj->QR.size[1];
  proc_control_node_B.iA0_f = obj->QR.size[0] * obj->QR.size[1];
  if (0 <= proc_control_node_B.iA0_f - 1) {
    memcpy(&proc_control_node_B.b_data[0], &obj->QR.data[0],
           proc_control_node_B.iA0_f * sizeof(real_T));
  }

  proc_control_node_xgeqp3(proc_control_node_B.b_data,
    proc_control_node_B.b_size_l, mrows, ncols, obj->jpvt.data, obj->tau.data,
    &obj->tau.size);
  obj->QR.size[0] = proc_control_node_B.b_size_l[0];
  obj->QR.size[1] = proc_control_node_B.b_size_l[1];
  proc_control_node_B.iA0_f = proc_control_node_B.b_size_l[0] *
    proc_control_node_B.b_size_l[1];
  if (0 <= proc_control_node_B.iA0_f - 1) {
    memcpy(&obj->QR.data[0], &proc_control_node_B.b_data[0],
           proc_control_node_B.iA0_f * sizeof(real_T));
  }
}

// Function for MATLAB Function: '<S94>/NLMPC'
static void proc_control_node_xorgqr(int32_T m, int32_T n, int32_T k, real_T
  A_data[], const int32_T A_size[2], int32_T lda, const real_T tau_data[])
{
  if (n >= 1) {
    proc_control_node_B.itau = k;
    while (proc_control_node_B.itau <= n - 1) {
      proc_control_node_B.i_b1 = proc_control_node_B.itau * lda;
      proc_control_node_B.iaii = 0;
      while (proc_control_node_B.iaii <= m - 1) {
        A_data[proc_control_node_B.i_b1 + proc_control_node_B.iaii] = 0.0;
        proc_control_node_B.iaii++;
      }

      A_data[proc_control_node_B.i_b1 + proc_control_node_B.itau] = 1.0;
      proc_control_node_B.itau++;
    }

    proc_control_node_B.itau = k - 1;
    proc_control_node_B.iaii = static_cast<int16_T>(A_size[1]);
    if (0 <= proc_control_node_B.iaii - 1) {
      memset(&proc_control_node_B.work_data_l[0], 0, proc_control_node_B.iaii *
             sizeof(real_T));
    }

    proc_control_node_B.i_b1 = k;
    while (proc_control_node_B.i_b1 >= 1) {
      proc_control_node_B.iaii = (proc_control_node_B.i_b1 - 1) * lda +
        proc_control_node_B.i_b1;
      if (proc_control_node_B.i_b1 < n) {
        A_data[proc_control_node_B.iaii - 1] = 1.0;
        proc_control_node_xzlarf((m - proc_control_node_B.i_b1) + 1, n -
          proc_control_node_B.i_b1, proc_control_node_B.iaii,
          tau_data[proc_control_node_B.itau], A_data, proc_control_node_B.iaii +
          lda, lda, proc_control_node_B.work_data_l);
      }

      if (proc_control_node_B.i_b1 < m) {
        proc_control_node_B.d_e3 = (proc_control_node_B.iaii + m) -
          proc_control_node_B.i_b1;
        proc_control_node_B.b_k_f = proc_control_node_B.iaii;
        while (proc_control_node_B.b_k_f + 1 <= proc_control_node_B.d_e3) {
          A_data[proc_control_node_B.b_k_f] *=
            -tau_data[proc_control_node_B.itau];
          proc_control_node_B.b_k_f++;
        }
      }

      A_data[proc_control_node_B.iaii - 1] = 1.0 -
        tau_data[proc_control_node_B.itau];
      proc_control_node_B.d_e3 = 0;
      while (proc_control_node_B.d_e3 <= proc_control_node_B.i_b1 - 2) {
        A_data[(proc_control_node_B.iaii - proc_control_node_B.d_e3) - 2] = 0.0;
        proc_control_node_B.d_e3++;
      }

      proc_control_node_B.itau--;
      proc_control_node_B.i_b1--;
    }
  }
}

// Function for MATLAB Function: '<S94>/NLMPC'
static void proc_control_node_computeQ_(s_1UhBFHxHKUXshhZtLgMUHE_proc_T *obj,
  int32_T nrows)
{
  proc_control_node_B.idx_i = 0;
  while (proc_control_node_B.idx_i <= obj->minRowCol - 1) {
    proc_control_node_B.iQR0_a = obj->ldq * proc_control_node_B.idx_i +
      proc_control_node_B.idx_i;
    proc_control_node_B.n_p = obj->mrows - proc_control_node_B.idx_i;
    proc_control_node_B.k_me = 1;
    while (proc_control_node_B.k_me - 1 <= proc_control_node_B.n_p - 2) {
      proc_control_node_B.i21 = proc_control_node_B.iQR0_a +
        proc_control_node_B.k_me;
      obj->Q.data[proc_control_node_B.i21] = obj->
        QR.data[proc_control_node_B.i21];
      proc_control_node_B.k_me++;
    }

    proc_control_node_B.idx_i++;
  }

  proc_control_node_xorgqr(obj->mrows, nrows, obj->minRowCol, obj->Q.data,
    obj->Q.size, obj->ldq, obj->tau.data);
}

// Function for MATLAB Function: '<S94>/NLMPC'
static void proc_control_node_xgemv_jhg(int32_T m, int32_T n, const real_T
  A_data[], int32_T lda, const real_T x_data[], real_T y_data[])
{
  int32_T b;
  int32_T b_c;
  int32_T ia;
  int32_T iac;
  if (m != 0) {
    proc_control_node_B.b_iy_h = 0;
    while (proc_control_node_B.b_iy_h <= n - 1) {
      y_data[proc_control_node_B.b_iy_h] = 0.0;
      proc_control_node_B.b_iy_h++;
    }

    proc_control_node_B.b_iy_h = 0;
    b_c = (n - 1) * lda + 1;
    iac = 1;
    while (((lda > 0) && (iac <= b_c)) || ((lda < 0) && (iac >= b_c))) {
      proc_control_node_B.ix_a = 0;
      proc_control_node_B.c_m = 0.0;
      b = (iac + m) - 1;
      for (ia = iac; ia <= b; ia++) {
        proc_control_node_B.c_m += A_data[ia - 1] *
          x_data[proc_control_node_B.ix_a];
        proc_control_node_B.ix_a++;
      }

      y_data[proc_control_node_B.b_iy_h] += proc_control_node_B.c_m;
      proc_control_node_B.b_iy_h++;
      iac += lda;
    }
  }
}

// Function for MATLAB Function: '<S94>/NLMPC'
static void proc_control_node_xtrsv(int32_T n, const real_T A_data[], int32_T
  lda, real_T x_data[])
{
  int32_T i;
  int32_T ix;
  int32_T j;
  int32_T jjA;
  if (n != 0) {
    for (j = n - 1; j + 1 > 0; j--) {
      jjA = j * lda + j;
      x_data[j] /= A_data[jjA];
      for (i = 1; i - 1 < j; i++) {
        ix = j - i;
        x_data[ix] -= x_data[j] * A_data[jjA - i];
      }
    }
  }
}

// Function for MATLAB Function: '<S94>/NLMPC'
static void proc_control_node_sortLambdaQP(real_T lambda_data[], int32_T
  WorkingSet_nActiveConstr, const int32_T WorkingSet_sizes[5], const int32_T
  WorkingSet_isActiveIdx[6], const int32_T WorkingSet_Wid_data[], const int32_T
  WorkingSet_Wlocalidx_data[], real_T workspace_data[])
{
  int32_T idx;
  int32_T idxOffset;
  int32_T mAll;
  if (WorkingSet_nActiveConstr != 0) {
    mAll = (((WorkingSet_sizes[0] + WorkingSet_sizes[3]) + WorkingSet_sizes[4])
            + WorkingSet_sizes[2]) + 51;
    for (idx = 0; idx <= mAll; idx++) {
      workspace_data[idx] = lambda_data[idx];
    }

    for (idx = 0; idx <= mAll; idx++) {
      lambda_data[idx] = 0.0;
    }

    mAll = 0;
    idx = 0;
    while ((idx + 1 <= WorkingSet_nActiveConstr) && (WorkingSet_Wid_data[idx] <=
            2)) {
      if (WorkingSet_Wid_data[idx] == 1) {
        idxOffset = 1;
      } else {
        idxOffset = WorkingSet_isActiveIdx[1];
      }

      lambda_data[(idxOffset + WorkingSet_Wlocalidx_data[idx]) - 2] =
        workspace_data[mAll];
      mAll++;
      idx++;
    }

    while (idx + 1 <= WorkingSet_nActiveConstr) {
      switch (WorkingSet_Wid_data[idx]) {
       case 3:
        idxOffset = WorkingSet_isActiveIdx[2];
        break;

       case 4:
        idxOffset = WorkingSet_isActiveIdx[3];
        break;

       default:
        idxOffset = WorkingSet_isActiveIdx[4];
        break;
      }

      lambda_data[(idxOffset + WorkingSet_Wlocalidx_data[idx]) - 2] =
        workspace_data[mAll];
      mAll++;
      idx++;
    }
  }
}

// Function for MATLAB Function: '<S94>/NLMPC'
static int32_T proc_control_node_ixamax(int32_T n, const real_T x_data[])
{
  real_T smax;
  real_T y;
  int32_T idxmax;
  int32_T ix;
  int32_T k;
  if (n < 1) {
    idxmax = 0;
  } else {
    idxmax = 1;
    if (n > 1) {
      ix = 0;
      smax = fabs(x_data[0]);
      for (k = 2; k <= n; k++) {
        ix++;
        y = fabs(x_data[ix]);
        if (y > smax) {
          idxmax = k;
          smax = y;
        }
      }
    }
  }

  return idxmax;
}

// Function for MATLAB Function: '<S94>/NLMPC'
static void proc_control_node_test_exit(s7RdrPWkr8UPAUyTdDJkLaG_proc__T *Flags,
  s_JXDNdI64oJvyHGrBwTBHI_proc__T *memspace, sG8JZ69axY52WWR6RKyApQC_proc__T
  *MeritFunction, const int32_T *fscales_lineq_constraint_size, const int32_T
  *fscales_cineq_constraint_size, s_MFLHEgKtV7gODWBOEr7maD_proc_T *WorkingSet,
  s_YLC2gJhPBjEs8VvOTvcE4B_proc_T *TrialState, s_1UhBFHxHKUXshhZtLgMUHE_proc_T
  *QRManager, const real_T lb[69])
{
  boolean_T dxTooSmall;
  boolean_T exitg1;
  boolean_T guard1 = false;
  boolean_T isFeasible;
  proc_control_node_B.nVar_j = WorkingSet->nVar;
  proc_control_node_B.mFixed_a = WorkingSet->sizes[0];
  proc_control_node_B.mIneq_do = WorkingSet->sizes[2];
  proc_control_node_B.mLB_b = WorkingSet->sizes[3];
  proc_control_node_B.mUB_c = WorkingSet->sizes[4];
  proc_control_node_B.mLambda = (((WorkingSet->sizes[0] + WorkingSet->sizes[2])
    + WorkingSet->sizes[3]) + WorkingSet->sizes[4]) + 51;
  proc_control_nod_computeGradLag(TrialState->gradLag.data, WorkingSet->ldA,
    WorkingSet->nVar, TrialState->grad.data, WorkingSet->sizes[2],
    WorkingSet->Aineq.data, WorkingSet->Aeq.data, WorkingSet->indexFixed.data,
    WorkingSet->sizes[0], WorkingSet->indexLB.data, WorkingSet->sizes[3],
    WorkingSet->indexUB.data, WorkingSet->sizes[4], TrialState->lambdasqp.data);
  proc_control_node_B.optimRelativeFactor_j = fabs(TrialState->
    grad.data[proc_control_node_ixamax(WorkingSet->nVar, TrialState->grad.data)
    - 1]);
  if ((1.0 > proc_control_node_B.optimRelativeFactor_j) || rtIsNaN
      (proc_control_node_B.optimRelativeFactor_j)) {
    proc_control_node_B.optimRelativeFactor_j = 1.0;
  }

  if (rtIsInf(proc_control_node_B.optimRelativeFactor_j)) {
    proc_control_node_B.optimRelativeFactor_j = 1.0;
  }

  MeritFunction->nlpPrimalFeasError = proc_con_computePrimalFeasError
    (TrialState->xstarsqp, WorkingSet->sizes[2] - TrialState->mNonlinIneq,
     TrialState->mNonlinIneq, TrialState->cIneq.data, TrialState->cEq,
     WorkingSet->indexLB.data, WorkingSet->sizes[3], lb,
     WorkingSet->indexUB.data, WorkingSet->sizes[4]);
  if (TrialState->sqpIterations == 0) {
    if ((1.0 > MeritFunction->nlpPrimalFeasError) || rtIsNaN
        (MeritFunction->nlpPrimalFeasError)) {
      MeritFunction->feasRelativeFactor = 1.0;
    } else {
      MeritFunction->feasRelativeFactor = MeritFunction->nlpPrimalFeasError;
    }
  }

  isFeasible = (MeritFunction->nlpPrimalFeasError <= 0.02 *
                MeritFunction->feasRelativeFactor);
  proc_contr_computeDualFeasError(WorkingSet->nVar, TrialState->gradLag.data,
    &dxTooSmall, &proc_control_node_B.tol_b);
  Flags->gradOK = dxTooSmall;
  MeritFunction->nlpDualFeasError = proc_control_node_B.tol_b;
  if (!dxTooSmall) {
    Flags->done = true;
    if (isFeasible) {
      TrialState->sqpExitFlag = 2;
    } else {
      TrialState->sqpExitFlag = -2;
    }
  } else {
    MeritFunction->nlpComplError = proc_control__computeComplError
      (fscales_lineq_constraint_size, fscales_cineq_constraint_size,
       TrialState->xstarsqp, WorkingSet->sizes[2], TrialState->cIneq.data,
       WorkingSet->indexLB.data, WorkingSet->sizes[3], lb,
       WorkingSet->indexUB.data, WorkingSet->sizes[4],
       TrialState->lambdasqp.data, WorkingSet->sizes[0] + 53);
    if ((proc_control_node_B.tol_b > MeritFunction->nlpComplError) || rtIsNaN
        (MeritFunction->nlpComplError)) {
      MeritFunction->firstOrderOpt = proc_control_node_B.tol_b;
    } else {
      MeritFunction->firstOrderOpt = MeritFunction->nlpComplError;
    }

    if (TrialState->sqpIterations > 1) {
      proc_control_n_computeGradLag_a(memspace->workspace_double.data,
        WorkingSet->ldA, WorkingSet->nVar, TrialState->grad.data,
        WorkingSet->sizes[2], WorkingSet->Aineq.data, WorkingSet->Aeq.data,
        WorkingSet->indexFixed.data, WorkingSet->sizes[0],
        WorkingSet->indexLB.data, WorkingSet->sizes[3], WorkingSet->indexUB.data,
        WorkingSet->sizes[4], TrialState->lambdasqp_old.data);
      proc_con_computeDualFeasError_m(WorkingSet->nVar,
        memspace->workspace_double.data, &dxTooSmall,
        &proc_control_node_B.nlpComplErrorLSQ);
      proc_control_node_B.nlpComplErrorTmp = proc_control__computeComplError
        (fscales_lineq_constraint_size, fscales_cineq_constraint_size,
         TrialState->xstarsqp, WorkingSet->sizes[2], TrialState->cIneq.data,
         WorkingSet->indexLB.data, WorkingSet->sizes[3], lb,
         WorkingSet->indexUB.data, WorkingSet->sizes[4],
         TrialState->lambdasqp_old.data, WorkingSet->sizes[0] + 1);
      if ((proc_control_node_B.nlpComplErrorLSQ >
           proc_control_node_B.nlpComplErrorTmp) || rtIsNaN
          (proc_control_node_B.nlpComplErrorTmp)) {
        proc_control_node_B.d5 = proc_control_node_B.nlpComplErrorLSQ;
      } else {
        proc_control_node_B.d5 = proc_control_node_B.nlpComplErrorTmp;
      }

      if ((!(proc_control_node_B.tol_b > MeritFunction->nlpComplError)) &&
          (!rtIsNaN(MeritFunction->nlpComplError))) {
        proc_control_node_B.tol_b = MeritFunction->nlpComplError;
      }

      if (proc_control_node_B.d5 < proc_control_node_B.tol_b) {
        MeritFunction->nlpDualFeasError = proc_control_node_B.nlpComplErrorLSQ;
        MeritFunction->nlpComplError = proc_control_node_B.nlpComplErrorTmp;
        MeritFunction->firstOrderOpt = proc_control_node_B.d5;
        proc_control_node_B.iQR_diag = 0;
        while (proc_control_node_B.iQR_diag <= proc_control_node_B.mLambda) {
          TrialState->lambdasqp.data[proc_control_node_B.iQR_diag] =
            TrialState->lambdasqp_old.data[proc_control_node_B.iQR_diag];
          proc_control_node_B.iQR_diag++;
        }
      } else {
        proc_control_node_B.iQR_diag = 0;
        while (proc_control_node_B.iQR_diag <= proc_control_node_B.mLambda) {
          TrialState->lambdasqp_old.data[proc_control_node_B.iQR_diag] =
            TrialState->lambdasqp.data[proc_control_node_B.iQR_diag];
          proc_control_node_B.iQR_diag++;
        }
      }
    } else {
      proc_control_node_B.iQR_diag = 0;
      while (proc_control_node_B.iQR_diag <= proc_control_node_B.mLambda) {
        TrialState->lambdasqp_old.data[proc_control_node_B.iQR_diag] =
          TrialState->lambdasqp.data[proc_control_node_B.iQR_diag];
        proc_control_node_B.iQR_diag++;
      }
    }

    if (isFeasible && (MeritFunction->nlpDualFeasError <= 0.02 *
                       proc_control_node_B.optimRelativeFactor_j) &&
        (MeritFunction->nlpComplError <= 0.02 *
         proc_control_node_B.optimRelativeFactor_j)) {
      Flags->done = true;
      TrialState->sqpExitFlag = 1;
    } else {
      Flags->done = false;
      if (isFeasible && (TrialState->sqpFval < -1.0E+20)) {
        Flags->done = true;
        TrialState->sqpExitFlag = -3;
      } else {
        guard1 = false;
        if (TrialState->sqpIterations > 0) {
          dxTooSmall = true;
          proc_control_node_B.iQR_diag = 0;
          exitg1 = false;
          while ((!exitg1) && (proc_control_node_B.iQR_diag <=
                               proc_control_node_B.nVar_j - 1)) {
            proc_control_node_B.tol_b = fabs(TrialState->
              xstarsqp[proc_control_node_B.iQR_diag]);
            if ((1.0 > proc_control_node_B.tol_b) || rtIsNaN
                (proc_control_node_B.tol_b)) {
              proc_control_node_B.tol_b = 1.0;
            }

            if (0.1 * proc_control_node_B.tol_b <= fabs(TrialState->
                 delta_x.data[proc_control_node_B.iQR_diag])) {
              dxTooSmall = false;
              exitg1 = true;
            } else {
              proc_control_node_B.iQR_diag++;
            }
          }

          if (dxTooSmall) {
            if (!isFeasible) {
              if (Flags->stepType != 2) {
                Flags->stepType = 2;
                Flags->failedLineSearch = false;
                Flags->stepAccepted = false;
                guard1 = true;
              } else {
                Flags->done = true;
                TrialState->sqpExitFlag = -2;
              }
            } else {
              proc_control_node_B.nActiveConstr = WorkingSet->nActiveConstr;
              if (WorkingSet->nActiveConstr > 0) {
                proc_updateWorkingSetForNewQP_h(TrialState->xstarsqp, WorkingSet,
                  WorkingSet->sizes[2], TrialState->mNonlinIneq,
                  TrialState->cIneq.data, TrialState->cEq, WorkingSet->sizes[3],
                  lb, WorkingSet->sizes[4], WorkingSet->sizes[0]);
                proc_control_node_B.iQR_diag = 0;
                while (proc_control_node_B.iQR_diag <=
                       proc_control_node_B.nActiveConstr - 1) {
                  TrialState->lambda.data[proc_control_node_B.iQR_diag] = 0.0;
                  proc_control_node_B.iQR_diag++;
                }

                proc_control_node_factorQRE(QRManager, WorkingSet->ATwset.data,
                  proc_control_node_B.nVar_j, proc_control_node_B.nActiveConstr,
                  WorkingSet->ldA);
                proc_control_node_computeQ_(QRManager, QRManager->mrows);
                if (proc_control_node_B.nVar_j >
                    proc_control_node_B.nActiveConstr) {
                  proc_control_node_B.iQR_diag = proc_control_node_B.nVar_j;
                } else {
                  proc_control_node_B.iQR_diag =
                    proc_control_node_B.nActiveConstr;
                }

                proc_control_node_B.tol_b = static_cast<real_T>
                  (proc_control_node_B.iQR_diag) * 2.2204460492503131E-16;
                if (1.4901161193847656E-8 < proc_control_node_B.tol_b) {
                  proc_control_node_B.tol_b = 1.4901161193847656E-8;
                }

                proc_control_node_B.tol_b *= fabs(QRManager->QR.data[0]);
                if (proc_control_node_B.nVar_j <
                    proc_control_node_B.nActiveConstr) {
                  proc_control_node_B.fullRank_R = proc_control_node_B.nVar_j;
                } else {
                  proc_control_node_B.fullRank_R =
                    proc_control_node_B.nActiveConstr;
                }

                proc_control_node_B.rankR = 0;
                proc_control_node_B.iQR_diag = 0;
                while ((proc_control_node_B.rankR <
                        proc_control_node_B.fullRank_R) && (fabs
                        (QRManager->QR.data[proc_control_node_B.iQR_diag]) >
                        proc_control_node_B.tol_b)) {
                  proc_control_node_B.rankR++;
                  proc_control_node_B.iQR_diag = (proc_control_node_B.iQR_diag +
                    QRManager->ldq) + 1;
                }

                proc_control_node_B.e_size_c[0] =
                  memspace->workspace_double.size[0];
                proc_control_node_B.e_size_c[1] =
                  memspace->workspace_double.size[1];
                proc_control_node_B.iQR_diag = memspace->workspace_double.size[0]
                  * memspace->workspace_double.size[1];
                if (0 <= proc_control_node_B.iQR_diag - 1) {
                  memcpy(&proc_control_node_B.e_data[0],
                         &memspace->workspace_double.data[0],
                         proc_control_node_B.iQR_diag * sizeof(real_T));
                }

                proc_control_node_xgemv_jhg(proc_control_node_B.nVar_j,
                  proc_control_node_B.nVar_j, QRManager->Q.data, QRManager->ldq,
                  TrialState->grad.data, proc_control_node_B.e_data);
                proc_control_node_xtrsv(proc_control_node_B.rankR,
                  QRManager->QR.data, QRManager->ldq, proc_control_node_B.e_data);
                if (proc_control_node_B.nActiveConstr <
                    proc_control_node_B.fullRank_R) {
                  proc_control_node_B.fullRank_R =
                    proc_control_node_B.nActiveConstr;
                }

                proc_control_node_B.iQR_diag = 0;
                while (proc_control_node_B.iQR_diag <=
                       proc_control_node_B.fullRank_R - 1) {
                  TrialState->lambda.data[QRManager->
                    jpvt.data[proc_control_node_B.iQR_diag] - 1] =
                    proc_control_node_B.e_data[proc_control_node_B.iQR_diag];
                  proc_control_node_B.iQR_diag++;
                }

                proc_control_node_B.iQR_diag = proc_control_node_B.mFixed_a;
                while (proc_control_node_B.iQR_diag + 1 <=
                       proc_control_node_B.mFixed_a + 52) {
                  TrialState->lambda.data[proc_control_node_B.iQR_diag] =
                    -TrialState->lambda.data[proc_control_node_B.iQR_diag];
                  proc_control_node_B.iQR_diag++;
                }

                proc_control_node_sortLambdaQP(TrialState->lambda.data,
                  WorkingSet->nActiveConstr, WorkingSet->sizes,
                  WorkingSet->isActiveIdx, WorkingSet->Wid.data,
                  WorkingSet->Wlocalidx.data, proc_control_node_B.e_data);
                memspace->workspace_double.size[0] =
                  proc_control_node_B.e_size_c[0];
                memspace->workspace_double.size[1] =
                  proc_control_node_B.e_size_c[1];
                proc_control_node_B.iQR_diag = proc_control_node_B.e_size_c[0] *
                  proc_control_node_B.e_size_c[1];
                if (0 <= proc_control_node_B.iQR_diag - 1) {
                  memcpy(&memspace->workspace_double.data[0],
                         &proc_control_node_B.e_data[0],
                         proc_control_node_B.iQR_diag * sizeof(real_T));
                }

                proc_control_n_computeGradLag_a(memspace->workspace_double.data,
                  WorkingSet->ldA, proc_control_node_B.nVar_j,
                  TrialState->grad.data, proc_control_node_B.mIneq_do,
                  WorkingSet->Aineq.data, WorkingSet->Aeq.data,
                  WorkingSet->indexFixed.data, proc_control_node_B.mFixed_a,
                  WorkingSet->indexLB.data, proc_control_node_B.mLB_b,
                  WorkingSet->indexUB.data, proc_control_node_B.mUB_c,
                  TrialState->lambda.data);
                proc_con_computeDualFeasError_m(proc_control_node_B.nVar_j,
                  memspace->workspace_double.data, &isFeasible,
                  &proc_control_node_B.tol_b);
                proc_control_node_B.nlpComplErrorLSQ =
                  proc_control__computeComplError(fscales_lineq_constraint_size,
                  fscales_cineq_constraint_size, TrialState->xstarsqp,
                  proc_control_node_B.mIneq_do, TrialState->cIneq.data,
                  WorkingSet->indexLB.data, proc_control_node_B.mLB_b, lb,
                  WorkingSet->indexUB.data, proc_control_node_B.mUB_c,
                  TrialState->lambda.data, proc_control_node_B.mFixed_a + 1);
                if ((proc_control_node_B.tol_b <= 0.02 *
                     proc_control_node_B.optimRelativeFactor_j) &&
                    (proc_control_node_B.nlpComplErrorLSQ <= 0.02 *
                     proc_control_node_B.optimRelativeFactor_j)) {
                  MeritFunction->nlpDualFeasError = proc_control_node_B.tol_b;
                  MeritFunction->nlpComplError =
                    proc_control_node_B.nlpComplErrorLSQ;
                  if (proc_control_node_B.tol_b >
                      proc_control_node_B.nlpComplErrorLSQ) {
                    MeritFunction->firstOrderOpt = proc_control_node_B.tol_b;
                  } else {
                    MeritFunction->firstOrderOpt =
                      proc_control_node_B.nlpComplErrorLSQ;
                  }

                  proc_control_node_B.nVar_j = 0;
                  while (proc_control_node_B.nVar_j <=
                         proc_control_node_B.mLambda) {
                    TrialState->lambdasqp.data[proc_control_node_B.nVar_j] =
                      TrialState->lambda.data[proc_control_node_B.nVar_j];
                    proc_control_node_B.nVar_j++;
                  }

                  Flags->done = true;
                  TrialState->sqpExitFlag = 1;
                } else {
                  Flags->done = true;
                  TrialState->sqpExitFlag = 2;
                }
              } else {
                Flags->done = true;
                TrialState->sqpExitFlag = 2;
              }
            }
          } else {
            guard1 = true;
          }
        } else {
          guard1 = true;
        }

        if (guard1) {
          if (TrialState->sqpIterations >= 400) {
            Flags->done = true;
            TrialState->sqpExitFlag = 0;
          } else if (TrialState->FunctionEvaluations >= 6900) {
            Flags->done = true;
            TrialState->sqpExitFlag = 0;
          }
        }
      }
    }
  }
}

// Function for MATLAB Function: '<S94>/NLMPC'
static void proc_control_xgemv_jhgj1v0ny5es(int32_T m, int32_T n, const real_T
  A_data[], int32_T ia0, int32_T lda, const real_T x_data[], int32_T ix0, real_T
  y_data[])
{
  int32_T b;
  int32_T c;
  int32_T ia;
  int32_T iac;
  int32_T ix;
  int32_T iy;
  ix = ix0;
  b = (n - 1) * lda + ia0;
  iac = ia0;
  while (((lda > 0) && (iac <= b)) || ((lda < 0) && (iac >= b))) {
    iy = 0;
    c = (iac + m) - 1;
    for (ia = iac; ia <= c; ia++) {
      y_data[iy] += A_data[ia - 1] * x_data[ix - 1];
      iy++;
    }

    ix++;
    iac += lda;
  }
}

// Function for MATLAB Function: '<S94>/NLMPC'
static boolean_T proc_control_node_BFGSUpdate(int32_T nvar, real_T Bk[4761],
  const real_T sk_data[], real_T yk_data[], real_T workspace_data[])
{
  int32_T b_ix;
  int32_T d;
  int32_T iac;
  int32_T ijA;
  int32_T jy;
  boolean_T success;
  proc_control_node_B.dotSY = 0.0;
  if (nvar >= 1) {
    proc_control_node_B.ix_ir = 0;
    while (proc_control_node_B.ix_ir <= nvar - 1) {
      proc_control_node_B.dotSY += sk_data[proc_control_node_B.ix_ir] *
        yk_data[proc_control_node_B.ix_ir];
      proc_control_node_B.ix_ir++;
    }
  }

  proc_control_node_B.ix_ir = 0;
  while (proc_control_node_B.ix_ir <= nvar - 1) {
    workspace_data[proc_control_node_B.ix_ir] = 0.0;
    proc_control_node_B.ix_ir++;
  }

  proc_control_node_B.ix_ir = 0;
  jy = (nvar - 1) * 69;
  for (iac = 1; iac <= jy + 1; iac += 69) {
    b_ix = 0;
    d = (iac + nvar) - 1;
    for (ijA = iac; ijA <= d; ijA++) {
      workspace_data[b_ix] += Bk[ijA - 1] * sk_data[proc_control_node_B.ix_ir];
      b_ix++;
    }

    proc_control_node_B.ix_ir++;
  }

  proc_control_node_B.curvatureS = 0.0;
  if (nvar >= 1) {
    proc_control_node_B.ix_ir = 0;
    while (proc_control_node_B.ix_ir <= nvar - 1) {
      proc_control_node_B.curvatureS += workspace_data[proc_control_node_B.ix_ir]
        * sk_data[proc_control_node_B.ix_ir];
      proc_control_node_B.ix_ir++;
    }
  }

  if (proc_control_node_B.dotSY < 0.2 * proc_control_node_B.curvatureS) {
    proc_control_node_B.dotSY = 0.8 * proc_control_node_B.curvatureS /
      (proc_control_node_B.curvatureS - proc_control_node_B.dotSY);
    proc_control_node_B.ix_ir = 0;
    while (proc_control_node_B.ix_ir <= nvar - 1) {
      yk_data[proc_control_node_B.ix_ir] *= proc_control_node_B.dotSY;
      proc_control_node_B.ix_ir++;
    }

    proc_control_node_B.dotSY = 1.0 - proc_control_node_B.dotSY;
    if (!(proc_control_node_B.dotSY == 0.0)) {
      proc_control_node_B.ix_ir = 0;
      while (proc_control_node_B.ix_ir <= nvar - 1) {
        yk_data[proc_control_node_B.ix_ir] +=
          workspace_data[proc_control_node_B.ix_ir] * proc_control_node_B.dotSY;
        proc_control_node_B.ix_ir++;
      }
    }

    proc_control_node_B.dotSY = 0.0;
    if (nvar >= 1) {
      proc_control_node_B.ix_ir = 0;
      while (proc_control_node_B.ix_ir <= nvar - 1) {
        proc_control_node_B.dotSY += sk_data[proc_control_node_B.ix_ir] *
          yk_data[proc_control_node_B.ix_ir];
        proc_control_node_B.ix_ir++;
      }
    }
  }

  success = ((proc_control_node_B.curvatureS > 2.2204460492503131E-16) &&
             (proc_control_node_B.dotSY > 2.2204460492503131E-16));
  if (success) {
    proc_control_node_B.curvatureS = -1.0 / proc_control_node_B.curvatureS;
    if (!(proc_control_node_B.curvatureS == 0.0)) {
      proc_control_node_B.ix_ir = 0;
      jy = 0;
      for (iac = 0; iac < nvar; iac++) {
        if (workspace_data[jy] != 0.0) {
          proc_control_node_B.temp_f = workspace_data[jy] *
            proc_control_node_B.curvatureS;
          b_ix = 0;
          d = nvar + proc_control_node_B.ix_ir;
          for (ijA = proc_control_node_B.ix_ir; ijA < d; ijA++) {
            Bk[ijA] += workspace_data[b_ix] * proc_control_node_B.temp_f;
            b_ix++;
          }
        }

        jy++;
        proc_control_node_B.ix_ir += 69;
      }
    }

    proc_control_node_B.curvatureS = 1.0 / proc_control_node_B.dotSY;
    if (!(proc_control_node_B.curvatureS == 0.0)) {
      proc_control_node_B.ix_ir = 0;
      jy = 0;
      for (iac = 0; iac < nvar; iac++) {
        if (yk_data[jy] != 0.0) {
          proc_control_node_B.dotSY = yk_data[jy] *
            proc_control_node_B.curvatureS;
          b_ix = 0;
          d = nvar + proc_control_node_B.ix_ir;
          for (ijA = proc_control_node_B.ix_ir; ijA < d; ijA++) {
            Bk[ijA] += yk_data[b_ix] * proc_control_node_B.dotSY;
            b_ix++;
          }
        }

        jy++;
        proc_control_node_B.ix_ir += 69;
      }
    }
  }

  return success;
}

// Function for MATLAB Function: '<S94>/NLMPC'
static void proc_control_node_factorQRE_n(s_1UhBFHxHKUXshhZtLgMUHE_proc_T *obj,
  int32_T mrows, int32_T ncols)
{
  if (mrows * ncols == 0) {
    obj->mrows = mrows;
    obj->ncols = ncols;
    obj->minRowCol = 0;
  } else {
    obj->usedPivoting = true;
    obj->mrows = mrows;
    obj->ncols = ncols;
    if (mrows < ncols) {
      obj->minRowCol = mrows;
    } else {
      obj->minRowCol = ncols;
    }

    proc_control_node_B.b_size[0] = obj->QR.size[0];
    proc_control_node_B.b_size[1] = obj->QR.size[1];
    proc_control_node_B.loop_ub_al = obj->QR.size[0] * obj->QR.size[1];
    if (0 <= proc_control_node_B.loop_ub_al - 1) {
      memcpy(&proc_control_node_B.b_data_m[0], &obj->QR.data[0],
             proc_control_node_B.loop_ub_al * sizeof(real_T));
    }

    proc_control_node_xgeqp3(proc_control_node_B.b_data_m,
      proc_control_node_B.b_size, mrows, ncols, obj->jpvt.data, obj->tau.data,
      &obj->tau.size);
    obj->QR.size[0] = proc_control_node_B.b_size[0];
    obj->QR.size[1] = proc_control_node_B.b_size[1];
    proc_control_node_B.loop_ub_al = proc_control_node_B.b_size[0] *
      proc_control_node_B.b_size[1];
    if (0 <= proc_control_node_B.loop_ub_al - 1) {
      memcpy(&obj->QR.data[0], &proc_control_node_B.b_data_m[0],
             proc_control_node_B.loop_ub_al * sizeof(real_T));
    }
  }
}

// Function for MATLAB Function: '<S94>/NLMPC'
static void proc_control_node_countsort(int32_T x_data[], int32_T xLen, int32_T
  workspace_data[], int32_T xMin, int32_T xMax)
{
  int32_T b_idxW;
  int32_T b_tmp;
  int32_T idxEnd;
  int32_T idxStart;
  if ((xLen > 1) && (xMax > xMin)) {
    b_tmp = xMax - xMin;
    for (idxStart = 0; idxStart <= b_tmp; idxStart++) {
      workspace_data[idxStart] = 0;
    }

    for (idxStart = 0; idxStart < xLen; idxStart++) {
      idxEnd = x_data[idxStart] - xMin;
      workspace_data[idxEnd]++;
    }

    for (idxStart = 1; idxStart < b_tmp + 1; idxStart++) {
      workspace_data[idxStart] += workspace_data[idxStart - 1];
    }

    idxStart = 1;
    idxEnd = workspace_data[0];
    for (b_idxW = 0; b_idxW < b_tmp; b_idxW++) {
      while (idxStart <= idxEnd) {
        x_data[idxStart - 1] = b_idxW + xMin;
        idxStart++;
      }

      idxStart = workspace_data[b_idxW] + 1;
      idxEnd = workspace_data[b_idxW + 1];
    }

    while (idxStart <= idxEnd) {
      x_data[idxStart - 1] = xMax;
      idxStart++;
    }
  }
}

// Function for MATLAB Function: '<S94>/NLMPC'
static void proc_control_node_removeConstr(s_MFLHEgKtV7gODWBOEr7maD_proc_T *obj,
  int32_T idx_global)
{
  int32_T TYPE_tmp;
  int32_T b_idx;
  int32_T idx_global_start_tmp_tmp;
  TYPE_tmp = obj->Wid.data[idx_global - 1] - 1;
  obj->isActiveConstr.data[(obj->isActiveIdx[TYPE_tmp] + obj->
    Wlocalidx.data[idx_global - 1]) - 2] = false;
  idx_global_start_tmp_tmp = obj->nActiveConstr - 1;
  obj->Wid.data[idx_global - 1] = obj->Wid.data[obj->nActiveConstr - 1];
  obj->Wlocalidx.data[idx_global - 1] = obj->
    Wlocalidx.data[idx_global_start_tmp_tmp];
  for (b_idx = 0; b_idx < obj->nVar; b_idx++) {
    obj->ATwset.data[b_idx + obj->ldA * (idx_global - 1)] = obj->ATwset.data
      [obj->ldA * idx_global_start_tmp_tmp + b_idx];
  }

  obj->bwset.data[idx_global - 1] = obj->bwset.data[idx_global_start_tmp_tmp];
  obj->nActiveConstr--;
  obj->nWConstr[TYPE_tmp]--;
}

// Function for MATLAB Function: '<S94>/NLMPC'
static int32_T proc_control_RemoveDependentEq_(s_JXDNdI64oJvyHGrBwTBHI_proc__T
  *memspace, s_MFLHEgKtV7gODWBOEr7maD_proc_T *workingset,
  s_1UhBFHxHKUXshhZtLgMUHE_proc_T *qrmanager)
{
  int32_T nDepInd;
  boolean_T exitg1;
  proc_control_node_B.totalEq = workingset->nVar - 1;
  proc_control_node_B.mTotalWorkingEq = workingset->nWConstr[0] +
    workingset->nWConstr[1];
  nDepInd = 0;
  if (proc_control_node_B.mTotalWorkingEq > 0) {
    proc_control_node_B.totalRank = 0;
    while (proc_control_node_B.totalRank <= proc_control_node_B.mTotalWorkingEq
           - 1) {
      proc_control_node_B.ix_d = 0;
      while (proc_control_node_B.ix_d <= proc_control_node_B.totalEq) {
        qrmanager->QR.data[proc_control_node_B.totalRank + qrmanager->ldq *
          proc_control_node_B.ix_d] = workingset->ATwset.data[workingset->ldA *
          proc_control_node_B.totalRank + proc_control_node_B.ix_d];
        proc_control_node_B.ix_d++;
      }

      proc_control_node_B.totalRank++;
    }

    nDepInd = proc_control_node_B.mTotalWorkingEq - workingset->nVar;
    if (0 > nDepInd) {
      nDepInd = 0;
    }

    proc_control_node_B.totalRank = 0;
    while (proc_control_node_B.totalRank <= proc_control_node_B.totalEq) {
      qrmanager->jpvt.data[proc_control_node_B.totalRank] = 0;
      proc_control_node_B.totalRank++;
    }

    proc_control_node_factorQRE_n(qrmanager, proc_control_node_B.mTotalWorkingEq,
      workingset->nVar);
    proc_control_node_B.tol_c = 100.0 * static_cast<real_T>(workingset->nVar) *
      2.2204460492503131E-16;
    if (workingset->nVar < proc_control_node_B.mTotalWorkingEq) {
      proc_control_node_B.totalRank = workingset->nVar;
    } else {
      proc_control_node_B.totalRank = proc_control_node_B.mTotalWorkingEq;
    }

    proc_control_node_B.totalRank += (proc_control_node_B.totalRank - 1) *
      qrmanager->ldq;
    while ((proc_control_node_B.totalRank > 0) && (fabs(qrmanager->
             QR.data[proc_control_node_B.totalRank - 1]) <
            proc_control_node_B.tol_c)) {
      proc_control_node_B.totalRank = (proc_control_node_B.totalRank -
        qrmanager->ldq) - 1;
      nDepInd++;
    }

    if (nDepInd > 0) {
      proc_control_node_computeQ_(qrmanager, qrmanager->mrows);
      proc_control_node_B.totalRank = 0;
      exitg1 = false;
      while ((!exitg1) && (proc_control_node_B.totalRank <= nDepInd - 1)) {
        proc_control_node_B.qtb = 0.0;
        proc_control_node_B.ix_d = ((proc_control_node_B.mTotalWorkingEq -
          proc_control_node_B.totalRank) - 1) * qrmanager->ldq;
        proc_control_node_B.iy_j = 0;
        proc_control_node_B.b_k_aw = 0;
        while (proc_control_node_B.b_k_aw <= proc_control_node_B.mTotalWorkingEq
               - 1) {
          proc_control_node_B.qtb += qrmanager->Q.data[proc_control_node_B.ix_d]
            * workingset->bwset.data[proc_control_node_B.iy_j];
          proc_control_node_B.ix_d++;
          proc_control_node_B.iy_j++;
          proc_control_node_B.b_k_aw++;
        }

        if (fabs(proc_control_node_B.qtb) >= proc_control_node_B.tol_c) {
          nDepInd = -1;
          exitg1 = true;
        } else {
          proc_control_node_B.totalRank++;
        }
      }
    }

    if (nDepInd > 0) {
      proc_control_node_B.totalRank = 0;
      while (proc_control_node_B.totalRank <=
             proc_control_node_B.mTotalWorkingEq - 1) {
        proc_control_node_B.ix_d = qrmanager->ldq *
          proc_control_node_B.totalRank;
        proc_control_node_B.iy_j = workingset->ldA *
          proc_control_node_B.totalRank;
        proc_control_node_B.b_k_aw = 1;
        while (proc_control_node_B.b_k_aw - 1 <= proc_control_node_B.totalEq) {
          qrmanager->QR.data[(proc_control_node_B.ix_d +
                              proc_control_node_B.b_k_aw) - 1] =
            workingset->ATwset.data[(proc_control_node_B.iy_j +
            proc_control_node_B.b_k_aw) - 1];
          proc_control_node_B.b_k_aw++;
        }

        proc_control_node_B.totalRank++;
      }

      proc_control_node_B.totalEq = 0;
      while (proc_control_node_B.totalEq <= workingset->nWConstr[0] - 1) {
        qrmanager->jpvt.data[proc_control_node_B.totalEq] = 1;
        proc_control_node_B.totalEq++;
      }

      proc_control_node_B.totalEq = workingset->nWConstr[0];
      while (proc_control_node_B.totalEq + 1 <=
             proc_control_node_B.mTotalWorkingEq) {
        qrmanager->jpvt.data[proc_control_node_B.totalEq] = 0;
        proc_control_node_B.totalEq++;
      }

      proc_control_node_factorQRE_n(qrmanager, workingset->nVar,
        proc_control_node_B.mTotalWorkingEq);
      proc_control_node_B.totalEq = 0;
      while (proc_control_node_B.totalEq <= nDepInd - 1) {
        memspace->workspace_int.data[proc_control_node_B.totalEq] =
          qrmanager->jpvt.data[(proc_control_node_B.mTotalWorkingEq - nDepInd) +
          proc_control_node_B.totalEq];
        proc_control_node_B.totalEq++;
      }

      proc_control_node_countsort(memspace->workspace_int.data, nDepInd,
        memspace->workspace_sort.data, 1, proc_control_node_B.mTotalWorkingEq);
      proc_control_node_B.mTotalWorkingEq = nDepInd - 1;
      while (proc_control_node_B.mTotalWorkingEq + 1 > 0) {
        proc_control_node_B.totalEq = (workingset->nWConstr[0] +
          workingset->nWConstr[1]) - 1;
        if ((proc_control_node_B.totalEq + 1 != 0) &&
            (memspace->workspace_int.data[proc_control_node_B.mTotalWorkingEq] <=
             proc_control_node_B.totalEq + 1)) {
          if ((proc_control_node_B.totalEq + 1 == workingset->nActiveConstr) ||
              (proc_control_node_B.totalEq + 1 == memspace->
               workspace_int.data[proc_control_node_B.mTotalWorkingEq])) {
            workingset->mEqRemoved++;
            workingset->indexEqRemoved[workingset->mEqRemoved - 1] =
              workingset->Wlocalidx.data[memspace->
              workspace_int.data[proc_control_node_B.mTotalWorkingEq] - 1];
            proc_control_node_removeConstr(workingset,
              memspace->workspace_int.data[proc_control_node_B.mTotalWorkingEq]);
          } else {
            workingset->mEqRemoved++;
            proc_control_node_B.totalRank = workingset->Wid.data
              [memspace->workspace_int.data[proc_control_node_B.mTotalWorkingEq]
              - 1] - 1;
            workingset->indexEqRemoved[workingset->mEqRemoved - 1] =
              workingset->Wlocalidx.data[memspace->
              workspace_int.data[proc_control_node_B.mTotalWorkingEq] - 1];
            workingset->isActiveConstr.data[(workingset->isActiveIdx
              [workingset->Wid.data[memspace->
              workspace_int.data[proc_control_node_B.mTotalWorkingEq] - 1] - 1]
              + workingset->Wlocalidx.data[memspace->
              workspace_int.data[proc_control_node_B.mTotalWorkingEq] - 1]) - 2]
              = false;
            workingset->Wid.data[memspace->
              workspace_int.data[proc_control_node_B.mTotalWorkingEq] - 1] =
              workingset->Wid.data[proc_control_node_B.totalEq];
            workingset->Wlocalidx.data[memspace->
              workspace_int.data[proc_control_node_B.mTotalWorkingEq] - 1] =
              workingset->Wlocalidx.data[proc_control_node_B.totalEq];
            proc_control_node_B.ix_d = 0;
            while (proc_control_node_B.ix_d <= workingset->nVar - 1) {
              workingset->ATwset.data[proc_control_node_B.ix_d + workingset->ldA
                * (memspace->
                   workspace_int.data[proc_control_node_B.mTotalWorkingEq] - 1)]
                = workingset->ATwset.data[workingset->ldA *
                proc_control_node_B.totalEq + proc_control_node_B.ix_d];
              proc_control_node_B.ix_d++;
            }

            workingset->bwset.data[memspace->
              workspace_int.data[proc_control_node_B.mTotalWorkingEq] - 1] =
              workingset->bwset.data[proc_control_node_B.totalEq];
            proc_control_node_B.ix_d = workingset->nActiveConstr - 1;
            workingset->Wid.data[proc_control_node_B.totalEq] =
              workingset->Wid.data[workingset->nActiveConstr - 1];
            workingset->Wlocalidx.data[proc_control_node_B.totalEq] =
              workingset->Wlocalidx.data[proc_control_node_B.ix_d];
            proc_control_node_B.iy_j = 0;
            while (proc_control_node_B.iy_j <= workingset->nVar - 1) {
              workingset->ATwset.data[proc_control_node_B.iy_j + workingset->ldA
                * proc_control_node_B.totalEq] = workingset->
                ATwset.data[workingset->ldA * proc_control_node_B.ix_d +
                proc_control_node_B.iy_j];
              proc_control_node_B.iy_j++;
            }

            workingset->bwset.data[proc_control_node_B.totalEq] =
              workingset->bwset.data[proc_control_node_B.ix_d];
            workingset->nActiveConstr--;
            workingset->nWConstr[proc_control_node_B.totalRank]--;
          }
        }

        proc_control_node_B.mTotalWorkingEq--;
      }
    }
  }

  return nDepInd;
}

// Function for MATLAB Function: '<S94>/NLMPC'
static void proc_contro_removeAllIneqConstr(s_MFLHEgKtV7gODWBOEr7maD_proc_T *obj)
{
  int32_T idx_global;
  for (idx_global = obj->nWConstr[0] + obj->nWConstr[1]; idx_global <
       obj->nActiveConstr; idx_global++) {
    obj->isActiveConstr.data[(obj->isActiveIdx[obj->Wid.data[idx_global] - 1] +
      obj->Wlocalidx.data[idx_global]) - 2] = false;
  }

  obj->nWConstr[2] = 0;
  obj->nWConstr[3] = 0;
  obj->nWConstr[4] = 0;
  obj->nActiveConstr = obj->nWConstr[0] + obj->nWConstr[1];
}

// Function for MATLAB Function: '<S94>/NLMPC'
static void proc_contr_RemoveDependentIneq_(s_MFLHEgKtV7gODWBOEr7maD_proc_T
  *workingset, s_1UhBFHxHKUXshhZtLgMUHE_proc_T *qrmanager,
  s_JXDNdI64oJvyHGrBwTBHI_proc__T *memspace)
{
  proc_control_node_B.nFixedConstr_b = workingset->nWConstr[0] +
    workingset->nWConstr[1];
  proc_control_node_B.nVar_iz = workingset->nVar;
  if ((workingset->nWConstr[2] + workingset->nWConstr[3]) + workingset->
      nWConstr[4] > 0) {
    proc_control_node_B.tol_d = 100.0 * static_cast<real_T>(workingset->nVar) *
      2.2204460492503131E-16;
    proc_control_node_B.nDepIneq_g = 0;
    while (proc_control_node_B.nDepIneq_g <= proc_control_node_B.nFixedConstr_b
           - 1) {
      qrmanager->jpvt.data[proc_control_node_B.nDepIneq_g] = 1;
      proc_control_node_B.nDepIneq_g++;
    }

    proc_control_node_B.nDepIneq_g = proc_control_node_B.nFixedConstr_b + 1;
    while (proc_control_node_B.nDepIneq_g <= workingset->nActiveConstr) {
      qrmanager->jpvt.data[proc_control_node_B.nDepIneq_g - 1] = 0;
      proc_control_node_B.nDepIneq_g++;
    }

    proc_control_node_B.nDepIneq_g = 0;
    while (proc_control_node_B.nDepIneq_g <= workingset->nActiveConstr - 1) {
      proc_control_node_B.idxPosQR_h = qrmanager->ldq *
        proc_control_node_B.nDepIneq_g;
      proc_control_node_B.idxPosATwset_d = workingset->ldA *
        proc_control_node_B.nDepIneq_g;
      proc_control_node_B.k_my = 1;
      while (proc_control_node_B.k_my - 1 <= proc_control_node_B.nVar_iz - 1) {
        qrmanager->QR.data[(proc_control_node_B.idxPosQR_h +
                            proc_control_node_B.k_my) - 1] =
          workingset->ATwset.data[(proc_control_node_B.idxPosATwset_d +
          proc_control_node_B.k_my) - 1];
        proc_control_node_B.k_my++;
      }

      proc_control_node_B.nDepIneq_g++;
    }

    proc_control_node_factorQRE_n(qrmanager, workingset->nVar,
      workingset->nActiveConstr);
    proc_control_node_B.nDepIneq_g = 0;
    proc_control_node_B.idxPosQR_h = workingset->nActiveConstr - 1;
    while (proc_control_node_B.idxPosQR_h + 1 > proc_control_node_B.nVar_iz) {
      proc_control_node_B.nDepIneq_g++;
      memspace->workspace_int.data[proc_control_node_B.nDepIneq_g - 1] =
        qrmanager->jpvt.data[proc_control_node_B.idxPosQR_h];
      proc_control_node_B.idxPosQR_h--;
    }

    if (proc_control_node_B.idxPosQR_h + 1 <= workingset->nVar) {
      proc_control_node_B.nVar_iz = qrmanager->ldq *
        proc_control_node_B.idxPosQR_h + proc_control_node_B.idxPosQR_h;
      while ((proc_control_node_B.idxPosQR_h + 1 >
              proc_control_node_B.nFixedConstr_b) && (fabs(qrmanager->
               QR.data[proc_control_node_B.nVar_iz]) < proc_control_node_B.tol_d))
      {
        proc_control_node_B.nDepIneq_g++;
        memspace->workspace_int.data[proc_control_node_B.nDepIneq_g - 1] =
          qrmanager->jpvt.data[proc_control_node_B.idxPosQR_h];
        proc_control_node_B.idxPosQR_h--;
        proc_control_node_B.nVar_iz = (proc_control_node_B.nVar_iz -
          qrmanager->ldq) - 1;
      }
    }

    proc_control_node_countsort(memspace->workspace_int.data,
      proc_control_node_B.nDepIneq_g, memspace->workspace_sort.data,
      proc_control_node_B.nFixedConstr_b + 1, workingset->nActiveConstr);
    while (proc_control_node_B.nDepIneq_g > 0) {
      proc_control_node_removeConstr(workingset, memspace->
        workspace_int.data[proc_control_node_B.nDepIneq_g - 1]);
      proc_control_node_B.nDepIneq_g--;
    }
  }
}

// Function for MATLAB Function: '<S94>/NLMPC'
static void proc_control_node_xgeqrf(real_T A_data[], const int32_T A_size[2],
  int32_T m, int32_T n, real_T tau_data[], int32_T *tau_size)
{
  if (A_size[0] < A_size[1]) {
    proc_control_node_B.minmana_b = A_size[0];
  } else {
    proc_control_node_B.minmana_b = A_size[1];
  }

  if (m < n) {
    proc_control_node_B.minmn_e = m;
  } else {
    proc_control_node_B.minmn_e = n;
  }

  *tau_size = proc_control_node_B.minmana_b;
  if (0 <= proc_control_node_B.minmana_b - 1) {
    memset(&tau_data[0], 0, proc_control_node_B.minmana_b * sizeof(real_T));
  }

  if (proc_control_node_B.minmn_e >= 1) {
    proc_control_node_qrf(A_data, A_size, m, n, proc_control_node_B.minmn_e,
                          tau_data);
  }
}

// Function for MATLAB Function: '<S94>/NLMPC'
static void proc_control_node_factorQR_i(s_1UhBFHxHKUXshhZtLgMUHE_proc_T *obj,
  const real_T A_data[], int32_T mrows, int32_T ncols, int32_T ldA)
{
  boolean_T guard1 = false;
  proc_control_node_B.b_idx_l = mrows * ncols;
  guard1 = false;
  if (proc_control_node_B.b_idx_l > 0) {
    proc_control_node_B.b_idx_l = 0;
    while (proc_control_node_B.b_idx_l <= ncols - 1) {
      proc_control_node_B.iA0 = ldA * proc_control_node_B.b_idx_l;
      proc_control_node_B.iQR0_e = obj->ldq * proc_control_node_B.b_idx_l;
      proc_control_node_B.obj_i = 1;
      while (proc_control_node_B.obj_i - 1 <= mrows - 1) {
        obj->QR.data[(proc_control_node_B.iQR0_e + proc_control_node_B.obj_i) -
          1] = A_data[(proc_control_node_B.iA0 + proc_control_node_B.obj_i) - 1];
        proc_control_node_B.obj_i++;
      }

      proc_control_node_B.b_idx_l++;
    }

    guard1 = true;
  } else if (proc_control_node_B.b_idx_l == 0) {
    obj->mrows = mrows;
    obj->ncols = ncols;
    obj->minRowCol = 0;
  } else {
    guard1 = true;
  }

  if (guard1) {
    obj->usedPivoting = false;
    obj->mrows = mrows;
    obj->ncols = ncols;
    proc_control_node_B.b_idx_l = 0;
    while (proc_control_node_B.b_idx_l <= ncols - 1) {
      obj->jpvt.data[proc_control_node_B.b_idx_l] = proc_control_node_B.b_idx_l
        + 1;
      proc_control_node_B.b_idx_l++;
    }

    if (mrows < ncols) {
      obj->minRowCol = mrows;
    } else {
      obj->minRowCol = ncols;
    }

    proc_control_node_B.iA0 = obj->QR.size[0] * obj->QR.size[1];
    for (proc_control_node_B.b_idx_l = 0; proc_control_node_B.b_idx_l <
         proc_control_node_B.iA0; proc_control_node_B.b_idx_l++) {
    }

    proc_control_node_xgeqrf(obj->QR.data, obj->QR.size, mrows, ncols,
      obj->tau.data, &obj->tau.size);
  }
}

// Function for MATLAB Function: '<S94>/NLMPC'
static void proc_control_node_factorQR(s_1UhBFHxHKUXshhZtLgMUHE_proc_T *obj,
  int32_T mrows, int32_T ncols)
{
  int32_T idx;
  obj->usedPivoting = false;
  obj->mrows = mrows;
  obj->ncols = ncols;
  for (idx = 0; idx < ncols; idx++) {
    obj->jpvt.data[idx] = idx + 1;
  }

  if (mrows < ncols) {
    obj->minRowCol = mrows;
  } else {
    obj->minRowCol = ncols;
  }

  proc_control_node_xgeqrf(obj->QR.data, obj->QR.size, mrows, ncols,
    obj->tau.data, &obj->tau.size);
}

// Function for MATLAB Function: '<S94>/NLMPC'
static void proc_control_node_xgemv_jhgj1(int32_T m, int32_T n, const real_T
  A_data[], int32_T lda, const real_T x_data[], real_T y_data[])
{
  int32_T b;
  int32_T b_c;
  int32_T ia;
  if (n != 0) {
    proc_control_node_B.b_iy_d = 0;
    while (proc_control_node_B.b_iy_d <= n - 1) {
      y_data[proc_control_node_B.b_iy_d] = -y_data[proc_control_node_B.b_iy_d];
      proc_control_node_B.b_iy_d++;
    }

    proc_control_node_B.b_iy_d = 0;
    b_c = (n - 1) * lda + 1;
    proc_control_node_B.iac_ce = 1;
    while (((lda > 0) && (proc_control_node_B.iac_ce <= b_c)) || ((lda < 0) &&
            (proc_control_node_B.iac_ce >= b_c))) {
      proc_control_node_B.ix_k = 0;
      proc_control_node_B.c_nl = 0.0;
      b = (proc_control_node_B.iac_ce + m) - 1;
      for (ia = proc_control_node_B.iac_ce; ia <= b; ia++) {
        proc_control_node_B.c_nl += x_data[proc_control_node_B.ix_k] * A_data[ia
          - 1];
        proc_control_node_B.ix_k++;
      }

      y_data[proc_control_node_B.b_iy_d] += proc_control_node_B.c_nl;
      proc_control_node_B.b_iy_d++;
      proc_control_node_B.iac_ce += lda;
    }
  }
}

// Function for MATLAB Function: '<S94>/NLMPC'
static void proc_control_node_xgemv_jhgj(int32_T n, const real_T A_data[],
  int32_T lda, const real_T x_data[], real_T y_data[])
{
  int32_T b_c;
  int32_T ia;
  int32_T iac;
  if (n != 0) {
    proc_control_node_B.b_iy_m = 0;
    while (proc_control_node_B.b_iy_m <= n - 1) {
      y_data[proc_control_node_B.b_iy_m] = -y_data[proc_control_node_B.b_iy_m];
      proc_control_node_B.b_iy_m++;
    }

    proc_control_node_B.b_iy_m = 0;
    b_c = (n - 1) * lda + 1;
    iac = 1;
    while (((lda > 0) && (iac <= b_c)) || ((lda < 0) && (iac >= b_c))) {
      proc_control_node_B.ix_es = 0;
      proc_control_node_B.c_i = 0.0;
      for (ia = iac; ia <= iac + 68; ia++) {
        proc_control_node_B.c_i += x_data[proc_control_node_B.ix_es] * A_data[ia
          - 1];
        proc_control_node_B.ix_es++;
      }

      y_data[proc_control_node_B.b_iy_m] += proc_control_node_B.c_i;
      proc_control_node_B.b_iy_m++;
      iac += lda;
    }
  }
}

// Function for MATLAB Function: '<S94>/NLMPC'
static real_T proc_con_maxConstraintViolation(s_MFLHEgKtV7gODWBOEr7maD_proc_T
  *obj, const real_T x_data[])
{
  real_T v;
  proc_control_node_B.mLB_d = obj->sizes[3];
  proc_control_node_B.mUB_d = obj->sizes[4];
  proc_control_node_B.mFixed_l = obj->sizes[0];
  if (obj->probType == 2) {
    v = 0.0;
    proc_control_node_B.mIneq_dz = obj->sizes[2] - 1;
    if (obj->Aineq.size != 0) {
      proc_control_node_B.b_k_jj = 0;
      while (proc_control_node_B.b_k_jj <= proc_control_node_B.mIneq_dz) {
        obj->maxConstrWorkspace.data[proc_control_node_B.b_k_jj] =
          obj->bineq.data[proc_control_node_B.b_k_jj];
        proc_control_node_B.b_k_jj++;
      }

      proc_control_node_xgemv_jhgj(obj->sizes[2], obj->Aineq.data, obj->ldA,
        x_data, obj->maxConstrWorkspace.data);
      proc_control_node_B.b_k_jj = 0;
      while (proc_control_node_B.b_k_jj <= proc_control_node_B.mIneq_dz) {
        obj->maxConstrWorkspace.data[proc_control_node_B.b_k_jj] -=
          x_data[proc_control_node_B.b_k_jj + 69];
        proc_control_node_B.u1_p = obj->
          maxConstrWorkspace.data[proc_control_node_B.b_k_jj];
        if ((!(v > proc_control_node_B.u1_p)) && (!rtIsNaN
             (proc_control_node_B.u1_p))) {
          v = proc_control_node_B.u1_p;
        }

        proc_control_node_B.b_k_jj++;
      }
    }

    memcpy(&obj->maxConstrWorkspace.data[0], &obj->beq[0], 52U * sizeof(real_T));
    proc_control_node_xgemv_jhgj(52, obj->Aeq.data, obj->ldA, x_data,
      obj->maxConstrWorkspace.data);
    for (proc_control_node_B.b_k_jj = 0; proc_control_node_B.b_k_jj < 52;
         proc_control_node_B.b_k_jj++) {
      obj->maxConstrWorkspace.data[proc_control_node_B.b_k_jj] =
        (obj->maxConstrWorkspace.data[proc_control_node_B.b_k_jj] - x_data
         [(proc_control_node_B.mIneq_dz + proc_control_node_B.b_k_jj) + 70]) +
        x_data[(obj->sizes[2] + proc_control_node_B.b_k_jj) + 121];
      proc_control_node_B.u1_p = fabs(obj->
        maxConstrWorkspace.data[proc_control_node_B.b_k_jj]);
      if ((!(v > proc_control_node_B.u1_p)) && (!rtIsNaN
           (proc_control_node_B.u1_p))) {
        v = proc_control_node_B.u1_p;
      }
    }
  } else {
    v = 0.0;
    proc_control_node_B.mIneq_dz = obj->sizes[2] - 1;
    if (obj->Aineq.size != 0) {
      proc_control_node_B.b_k_jj = 0;
      while (proc_control_node_B.b_k_jj <= proc_control_node_B.mIneq_dz) {
        obj->maxConstrWorkspace.data[proc_control_node_B.b_k_jj] =
          obj->bineq.data[proc_control_node_B.b_k_jj];
        proc_control_node_B.b_k_jj++;
      }

      proc_control_node_xgemv_jhgj1(obj->nVar, obj->sizes[2], obj->Aineq.data,
        obj->ldA, x_data, obj->maxConstrWorkspace.data);
      proc_control_node_B.b_k_jj = 0;
      while (proc_control_node_B.b_k_jj <= proc_control_node_B.mIneq_dz) {
        proc_control_node_B.u1_p = obj->
          maxConstrWorkspace.data[proc_control_node_B.b_k_jj];
        if ((!(v > proc_control_node_B.u1_p)) && (!rtIsNaN
             (proc_control_node_B.u1_p))) {
          v = proc_control_node_B.u1_p;
        }

        proc_control_node_B.b_k_jj++;
      }
    }

    memcpy(&obj->maxConstrWorkspace.data[0], &obj->beq[0], 52U * sizeof(real_T));
    proc_control_node_xgemv_jhgj1(obj->nVar, 52, obj->Aeq.data, obj->ldA, x_data,
      obj->maxConstrWorkspace.data);
    for (proc_control_node_B.mIneq_dz = 0; proc_control_node_B.mIneq_dz < 52;
         proc_control_node_B.mIneq_dz++) {
      proc_control_node_B.u1_p = fabs(obj->
        maxConstrWorkspace.data[proc_control_node_B.mIneq_dz]);
      if ((!(v > proc_control_node_B.u1_p)) && (!rtIsNaN
           (proc_control_node_B.u1_p))) {
        v = proc_control_node_B.u1_p;
      }
    }
  }

  if (proc_control_node_B.mLB_d > 0) {
    proc_control_node_B.mIneq_dz = 0;
    while (proc_control_node_B.mIneq_dz <= proc_control_node_B.mLB_d - 1) {
      proc_control_node_B.u1_p = -x_data[obj->
        indexLB.data[proc_control_node_B.mIneq_dz] - 1] - obj->lb.data
        [obj->indexLB.data[proc_control_node_B.mIneq_dz] - 1];
      if ((!(v > proc_control_node_B.u1_p)) && (!rtIsNaN
           (proc_control_node_B.u1_p))) {
        v = proc_control_node_B.u1_p;
      }

      proc_control_node_B.mIneq_dz++;
    }
  }

  if (proc_control_node_B.mUB_d > 0) {
    proc_control_node_B.mLB_d = 0;
    while (proc_control_node_B.mLB_d <= proc_control_node_B.mUB_d - 1) {
      proc_control_node_B.u1_p = x_data[obj->
        indexUB.data[proc_control_node_B.mLB_d] - 1] - obj->ub.data
        [obj->indexUB.data[proc_control_node_B.mLB_d] - 1];
      if ((!(v > proc_control_node_B.u1_p)) && (!rtIsNaN
           (proc_control_node_B.u1_p))) {
        v = proc_control_node_B.u1_p;
      }

      proc_control_node_B.mLB_d++;
    }
  }

  if (proc_control_node_B.mFixed_l > 0) {
    proc_control_node_B.mUB_d = 0;
    while (proc_control_node_B.mUB_d <= proc_control_node_B.mFixed_l - 1) {
      proc_control_node_B.u1_p = fabs(x_data[obj->
        indexFixed.data[proc_control_node_B.mUB_d] - 1] - obj->ub.data
        [obj->indexFixed.data[proc_control_node_B.mUB_d] - 1]);
      if ((!(v > proc_control_node_B.u1_p)) && (!rtIsNaN
           (proc_control_node_B.u1_p))) {
        v = proc_control_node_B.u1_p;
      }

      proc_control_node_B.mUB_d++;
    }
  }

  return v;
}

// Function for MATLAB Function: '<S94>/NLMPC'
static void proc_control_node_xgemv_jhgj1v(int32_T m, int32_T n, const real_T
  A_data[], int32_T lda, const real_T x_data[], int32_T ix0, real_T y_data[])
{
  int32_T b;
  int32_T b_c;
  int32_T ia;
  if (n != 0) {
    proc_control_node_B.b_iy_ay = 0;
    while (proc_control_node_B.b_iy_ay <= n - 1) {
      y_data[proc_control_node_B.b_iy_ay] = -y_data[proc_control_node_B.b_iy_ay];
      proc_control_node_B.b_iy_ay++;
    }

    proc_control_node_B.b_iy_ay = 0;
    b_c = (n - 1) * lda + 1;
    proc_control_node_B.iac_c = 1;
    while (((lda > 0) && (proc_control_node_B.iac_c <= b_c)) || ((lda < 0) &&
            (proc_control_node_B.iac_c >= b_c))) {
      proc_control_node_B.ix_oe = ix0;
      proc_control_node_B.c_g = 0.0;
      b = (proc_control_node_B.iac_c + m) - 1;
      for (ia = proc_control_node_B.iac_c; ia <= b; ia++) {
        proc_control_node_B.c_g += x_data[proc_control_node_B.ix_oe - 1] *
          A_data[ia - 1];
        proc_control_node_B.ix_oe++;
      }

      y_data[proc_control_node_B.b_iy_ay] += proc_control_node_B.c_g;
      proc_control_node_B.b_iy_ay++;
      proc_control_node_B.iac_c += lda;
    }
  }
}

// Function for MATLAB Function: '<S94>/NLMPC'
static real_T proc_c_maxConstraintViolation_a(s_MFLHEgKtV7gODWBOEr7maD_proc_T
  *obj, const real_T x_data[], int32_T ix0)
{
  real_T v;
  proc_control_node_B.mLB_bv = obj->sizes[3];
  proc_control_node_B.mUB_a = obj->sizes[4];
  proc_control_node_B.mFixed_j = obj->sizes[0];
  if (obj->probType == 2) {
    v = 0.0;
    proc_control_node_B.mIneq_a = obj->sizes[2] - 1;
    if (obj->Aineq.size != 0) {
      proc_control_node_B.b_k_g = 0;
      while (proc_control_node_B.b_k_g <= proc_control_node_B.mIneq_a) {
        obj->maxConstrWorkspace.data[proc_control_node_B.b_k_g] =
          obj->bineq.data[proc_control_node_B.b_k_g];
        proc_control_node_B.b_k_g++;
      }

      proc_control_node_xgemv_jhgj1v(69, obj->sizes[2], obj->Aineq.data,
        obj->ldA, x_data, ix0, obj->maxConstrWorkspace.data);
      proc_control_node_B.b_k_g = 0;
      while (proc_control_node_B.b_k_g <= proc_control_node_B.mIneq_a) {
        obj->maxConstrWorkspace.data[proc_control_node_B.b_k_g] -= x_data[(ix0 +
          proc_control_node_B.b_k_g) + 68];
        proc_control_node_B.u1_h = obj->
          maxConstrWorkspace.data[proc_control_node_B.b_k_g];
        if ((!(v > proc_control_node_B.u1_h)) && (!rtIsNaN
             (proc_control_node_B.u1_h))) {
          v = proc_control_node_B.u1_h;
        }

        proc_control_node_B.b_k_g++;
      }
    }

    memcpy(&obj->maxConstrWorkspace.data[0], &obj->beq[0], 52U * sizeof(real_T));
    proc_control_node_xgemv_jhgj1v(69, 52, obj->Aeq.data, obj->ldA, x_data, ix0,
      obj->maxConstrWorkspace.data);
    for (proc_control_node_B.b_k_g = 0; proc_control_node_B.b_k_g < 52;
         proc_control_node_B.b_k_g++) {
      obj->maxConstrWorkspace.data[proc_control_node_B.b_k_g] =
        (obj->maxConstrWorkspace.data[proc_control_node_B.b_k_g] - x_data[((ix0
           + proc_control_node_B.mIneq_a) + proc_control_node_B.b_k_g) + 69]) +
        x_data[((ix0 + obj->sizes[2]) + proc_control_node_B.b_k_g) + 120];
      proc_control_node_B.u1_h = fabs(obj->
        maxConstrWorkspace.data[proc_control_node_B.b_k_g]);
      if ((!(v > proc_control_node_B.u1_h)) && (!rtIsNaN
           (proc_control_node_B.u1_h))) {
        v = proc_control_node_B.u1_h;
      }
    }
  } else {
    v = 0.0;
    proc_control_node_B.mIneq_a = obj->sizes[2] - 1;
    if (obj->Aineq.size != 0) {
      proc_control_node_B.b_k_g = 0;
      while (proc_control_node_B.b_k_g <= proc_control_node_B.mIneq_a) {
        obj->maxConstrWorkspace.data[proc_control_node_B.b_k_g] =
          obj->bineq.data[proc_control_node_B.b_k_g];
        proc_control_node_B.b_k_g++;
      }

      proc_control_node_xgemv_jhgj1v(obj->nVar, obj->sizes[2], obj->Aineq.data,
        obj->ldA, x_data, ix0, obj->maxConstrWorkspace.data);
      proc_control_node_B.b_k_g = 0;
      while (proc_control_node_B.b_k_g <= proc_control_node_B.mIneq_a) {
        proc_control_node_B.u1_h = obj->
          maxConstrWorkspace.data[proc_control_node_B.b_k_g];
        if ((!(v > proc_control_node_B.u1_h)) && (!rtIsNaN
             (proc_control_node_B.u1_h))) {
          v = proc_control_node_B.u1_h;
        }

        proc_control_node_B.b_k_g++;
      }
    }

    memcpy(&obj->maxConstrWorkspace.data[0], &obj->beq[0], 52U * sizeof(real_T));
    proc_control_node_xgemv_jhgj1v(obj->nVar, 52, obj->Aeq.data, obj->ldA,
      x_data, ix0, obj->maxConstrWorkspace.data);
    for (proc_control_node_B.mIneq_a = 0; proc_control_node_B.mIneq_a < 52;
         proc_control_node_B.mIneq_a++) {
      proc_control_node_B.u1_h = fabs(obj->
        maxConstrWorkspace.data[proc_control_node_B.mIneq_a]);
      if ((!(v > proc_control_node_B.u1_h)) && (!rtIsNaN
           (proc_control_node_B.u1_h))) {
        v = proc_control_node_B.u1_h;
      }
    }
  }

  if (proc_control_node_B.mLB_bv > 0) {
    proc_control_node_B.mIneq_a = 0;
    while (proc_control_node_B.mIneq_a <= proc_control_node_B.mLB_bv - 1) {
      proc_control_node_B.u1_h = -x_data[(ix0 + obj->
        indexLB.data[proc_control_node_B.mIneq_a]) - 2] - obj->lb.data
        [obj->indexLB.data[proc_control_node_B.mIneq_a] - 1];
      if ((!(v > proc_control_node_B.u1_h)) && (!rtIsNaN
           (proc_control_node_B.u1_h))) {
        v = proc_control_node_B.u1_h;
      }

      proc_control_node_B.mIneq_a++;
    }
  }

  if (proc_control_node_B.mUB_a > 0) {
    proc_control_node_B.mLB_bv = 0;
    while (proc_control_node_B.mLB_bv <= proc_control_node_B.mUB_a - 1) {
      proc_control_node_B.u1_h = x_data[(ix0 + obj->
        indexUB.data[proc_control_node_B.mLB_bv]) - 2] - obj->ub.data
        [obj->indexUB.data[proc_control_node_B.mLB_bv] - 1];
      if ((!(v > proc_control_node_B.u1_h)) && (!rtIsNaN
           (proc_control_node_B.u1_h))) {
        v = proc_control_node_B.u1_h;
      }

      proc_control_node_B.mLB_bv++;
    }
  }

  if (proc_control_node_B.mFixed_j > 0) {
    proc_control_node_B.mUB_a = 0;
    while (proc_control_node_B.mUB_a <= proc_control_node_B.mFixed_j - 1) {
      proc_control_node_B.u1_h = fabs(x_data[(ix0 + obj->
        indexFixed.data[proc_control_node_B.mUB_a]) - 2] - obj->ub.data
        [obj->indexFixed.data[proc_control_node_B.mUB_a] - 1]);
      if ((!(v > proc_control_node_B.u1_h)) && (!rtIsNaN
           (proc_control_node_B.u1_h))) {
        v = proc_control_node_B.u1_h;
      }

      proc_control_node_B.mUB_a++;
    }
  }

  return v;
}

// Function for MATLAB Function: '<S94>/NLMPC'
static boolean_T proc_co_feasibleX0ForWorkingSet(real_T workspace_data[], const
  int32_T workspace_size[2], real_T xCurrent_data[],
  s_MFLHEgKtV7gODWBOEr7maD_proc_T *workingset, s_1UhBFHxHKUXshhZtLgMUHE_proc_T
  *qrmanager)
{
  int32_T exitg1;
  boolean_T nonDegenerateWset;
  proc_control_node_B.mWConstr_tmp_tmp = workingset->nActiveConstr - 1;
  proc_control_node_B.nVar_b = workingset->nVar;
  nonDegenerateWset = true;
  if (workingset->nActiveConstr != 0) {
    proc_control_node_B.ldq = 0;
    while (proc_control_node_B.ldq <= proc_control_node_B.mWConstr_tmp_tmp) {
      workspace_data[proc_control_node_B.ldq] = workingset->
        bwset.data[proc_control_node_B.ldq];
      workspace_data[proc_control_node_B.ldq + workspace_size[0]] =
        workingset->bwset.data[proc_control_node_B.ldq];
      proc_control_node_B.ldq++;
    }

    proc_control_node_B.ldq = workingset->ldA;
    if (workingset->nActiveConstr != 0) {
      proc_control_node_B.iy_kh = 0;
      proc_control_node_B.br_az = (workingset->nActiveConstr - 1) *
        workingset->ldA + 1;
      proc_control_node_B.iAcol = 1;
      while (((proc_control_node_B.ldq > 0) && (proc_control_node_B.iAcol <=
               proc_control_node_B.br_az)) || ((proc_control_node_B.ldq < 0) &&
              (proc_control_node_B.iAcol >= proc_control_node_B.br_az))) {
        proc_control_node_B.ix_iv = 0;
        proc_control_node_B.c_h5 = 0.0;
        proc_control_node_B.b_d = (proc_control_node_B.iAcol +
          proc_control_node_B.nVar_b) - 1;
        proc_control_node_B.ia_k = proc_control_node_B.iAcol;
        while (proc_control_node_B.ia_k <= proc_control_node_B.b_d) {
          proc_control_node_B.c_h5 += workingset->
            ATwset.data[proc_control_node_B.ia_k - 1] *
            xCurrent_data[proc_control_node_B.ix_iv];
          proc_control_node_B.ix_iv++;
          proc_control_node_B.ia_k++;
        }

        workspace_data[proc_control_node_B.iy_kh] += -proc_control_node_B.c_h5;
        proc_control_node_B.iy_kh++;
        proc_control_node_B.iAcol += proc_control_node_B.ldq;
      }
    }

    if (workingset->nActiveConstr >= workingset->nVar) {
      proc_control_node_B.ldq = 0;
      while (proc_control_node_B.ldq <= proc_control_node_B.nVar_b - 1) {
        proc_control_node_B.iy_kh = qrmanager->ldq * proc_control_node_B.ldq;
        proc_control_node_B.br_az = 0;
        while (proc_control_node_B.br_az <= proc_control_node_B.mWConstr_tmp_tmp)
        {
          qrmanager->QR.data[proc_control_node_B.br_az +
            proc_control_node_B.iy_kh] = workingset->ATwset.data[workingset->ldA
            * proc_control_node_B.br_az + proc_control_node_B.ldq];
          proc_control_node_B.br_az++;
        }

        proc_control_node_B.ldq++;
      }

      proc_control_node_factorQR(qrmanager, workingset->nActiveConstr,
        workingset->nVar);
      proc_control_node_computeQ_(qrmanager, qrmanager->mrows);
      proc_control_node_B.ldq = qrmanager->ldq;
      proc_control_node_B.iy_kh = workspace_size[0];
      proc_control_node_B.iAcol = workspace_size[0] * workspace_size[1];
      if (0 <= proc_control_node_B.iAcol - 1) {
        memcpy(&proc_control_node_B.B_data[0], &workspace_data[0],
               proc_control_node_B.iAcol * sizeof(real_T));
      }

      proc_control_node_B.br_az = 0;
      while ((proc_control_node_B.iy_kh > 0) && (proc_control_node_B.br_az <=
              proc_control_node_B.iy_kh)) {
        proc_control_node_B.iAcol = proc_control_node_B.br_az +
          proc_control_node_B.nVar_b;
        proc_control_node_B.ix_iv = proc_control_node_B.br_az;
        while (proc_control_node_B.ix_iv + 1 <= proc_control_node_B.iAcol) {
          workspace_data[proc_control_node_B.ix_iv] = 0.0;
          proc_control_node_B.ix_iv++;
        }

        proc_control_node_B.br_az += proc_control_node_B.iy_kh;
      }

      proc_control_node_B.br_az = -1;
      proc_control_node_B.iAcol = 0;
      while ((proc_control_node_B.iy_kh > 0) && (proc_control_node_B.iAcol <=
              proc_control_node_B.iy_kh)) {
        proc_control_node_B.ix_iv = -1;
        proc_control_node_B.b_d = proc_control_node_B.iAcol +
          proc_control_node_B.nVar_b;
        proc_control_node_B.ia_k = proc_control_node_B.iAcol;
        while (proc_control_node_B.ia_k + 1 <= proc_control_node_B.b_d) {
          proc_control_node_B.c_h5 = 0.0;
          proc_control_node_B.b_ia_i = 1;
          while (proc_control_node_B.b_ia_i - 1 <=
                 proc_control_node_B.mWConstr_tmp_tmp) {
            proc_control_node_B.c_h5 += qrmanager->
              Q.data[proc_control_node_B.b_ia_i + proc_control_node_B.ix_iv] *
              proc_control_node_B.B_data[proc_control_node_B.b_ia_i +
              proc_control_node_B.br_az];
            proc_control_node_B.b_ia_i++;
          }

          workspace_data[proc_control_node_B.ia_k] += proc_control_node_B.c_h5;
          proc_control_node_B.ix_iv += proc_control_node_B.ldq;
          proc_control_node_B.ia_k++;
        }

        proc_control_node_B.br_az += proc_control_node_B.iy_kh;
        proc_control_node_B.iAcol += proc_control_node_B.iy_kh;
      }

      proc_control_node_B.mWConstr_tmp_tmp = workingset->nVar;
      while (proc_control_node_B.mWConstr_tmp_tmp > 0) {
        proc_control_node_B.iAcol = (proc_control_node_B.mWConstr_tmp_tmp - 1) *
          proc_control_node_B.ldq - 1;
        proc_control_node_B.c_h5 =
          workspace_data[proc_control_node_B.mWConstr_tmp_tmp + -1];
        if (proc_control_node_B.c_h5 != 0.0) {
          workspace_data[proc_control_node_B.mWConstr_tmp_tmp + -1] =
            proc_control_node_B.c_h5 / qrmanager->
            QR.data[proc_control_node_B.mWConstr_tmp_tmp +
            proc_control_node_B.iAcol];
          proc_control_node_B.ix_iv = 1;
          while (proc_control_node_B.ix_iv - 1 <=
                 proc_control_node_B.mWConstr_tmp_tmp - 2) {
            workspace_data[proc_control_node_B.ix_iv + -1] -=
              workspace_data[proc_control_node_B.mWConstr_tmp_tmp + -1] *
              qrmanager->QR.data[proc_control_node_B.ix_iv +
              proc_control_node_B.iAcol];
            proc_control_node_B.ix_iv++;
          }
        }

        proc_control_node_B.mWConstr_tmp_tmp--;
      }

      proc_control_node_B.mWConstr_tmp_tmp = workingset->nVar;
      while (proc_control_node_B.mWConstr_tmp_tmp > 0) {
        proc_control_node_B.iAcol = (proc_control_node_B.mWConstr_tmp_tmp - 1) *
          proc_control_node_B.ldq - 1;
        proc_control_node_B.br_az = (proc_control_node_B.iy_kh +
          proc_control_node_B.mWConstr_tmp_tmp) - 1;
        if (workspace_data[proc_control_node_B.br_az] != 0.0) {
          workspace_data[proc_control_node_B.br_az] /= qrmanager->
            QR.data[proc_control_node_B.mWConstr_tmp_tmp +
            proc_control_node_B.iAcol];
          proc_control_node_B.ix_iv = 1;
          while (proc_control_node_B.ix_iv - 1 <=
                 proc_control_node_B.mWConstr_tmp_tmp - 2) {
            proc_control_node_B.b_d = (proc_control_node_B.iy_kh +
              proc_control_node_B.ix_iv) - 1;
            workspace_data[proc_control_node_B.b_d] -=
              workspace_data[proc_control_node_B.br_az] * qrmanager->
              QR.data[proc_control_node_B.ix_iv + proc_control_node_B.iAcol];
            proc_control_node_B.ix_iv++;
          }
        }

        proc_control_node_B.mWConstr_tmp_tmp--;
      }
    } else {
      proc_control_node_factorQR_i(qrmanager, workingset->ATwset.data,
        workingset->nVar, workingset->nActiveConstr, workingset->ldA);
      proc_control_node_computeQ_(qrmanager, qrmanager->minRowCol);
      proc_control_node_B.ldq = qrmanager->ldq;
      proc_control_node_B.iy_kh = workspace_size[0];
      proc_control_node_B.br_az = 1;
      while (proc_control_node_B.br_az - 1 <=
             proc_control_node_B.mWConstr_tmp_tmp) {
        proc_control_node_B.iAcol = (proc_control_node_B.br_az - 1) *
          proc_control_node_B.ldq - 1;
        proc_control_node_B.c_h5 = workspace_data[proc_control_node_B.br_az + -1];
        proc_control_node_B.b_d = 1;
        while (proc_control_node_B.b_d - 1 <= proc_control_node_B.br_az - 2) {
          proc_control_node_B.c_h5 -= qrmanager->QR.data[proc_control_node_B.b_d
            + proc_control_node_B.iAcol] *
            workspace_data[proc_control_node_B.b_d + -1];
          proc_control_node_B.b_d++;
        }

        workspace_data[proc_control_node_B.br_az + -1] =
          proc_control_node_B.c_h5 / qrmanager->
          QR.data[proc_control_node_B.br_az + proc_control_node_B.iAcol];
        proc_control_node_B.br_az++;
      }

      proc_control_node_B.br_az = 1;
      while (proc_control_node_B.br_az - 1 <=
             proc_control_node_B.mWConstr_tmp_tmp) {
        proc_control_node_B.iAcol = (proc_control_node_B.br_az - 1) *
          proc_control_node_B.ldq - 1;
        proc_control_node_B.ix_iv = (proc_control_node_B.iy_kh +
          proc_control_node_B.br_az) - 1;
        proc_control_node_B.c_h5 = workspace_data[proc_control_node_B.ix_iv];
        proc_control_node_B.b_d = 1;
        while (proc_control_node_B.b_d - 1 <= proc_control_node_B.br_az - 2) {
          proc_control_node_B.c_h5 -= qrmanager->QR.data[proc_control_node_B.b_d
            + proc_control_node_B.iAcol] * workspace_data
            [(proc_control_node_B.iy_kh + proc_control_node_B.b_d) - 1];
          proc_control_node_B.b_d++;
        }

        workspace_data[proc_control_node_B.ix_iv] = proc_control_node_B.c_h5 /
          qrmanager->QR.data[proc_control_node_B.br_az +
          proc_control_node_B.iAcol];
        proc_control_node_B.br_az++;
      }

      proc_control_node_B.iAcol = workspace_size[0] * workspace_size[1];
      if (0 <= proc_control_node_B.iAcol - 1) {
        memcpy(&proc_control_node_B.B_data[0], &workspace_data[0],
               proc_control_node_B.iAcol * sizeof(real_T));
      }

      proc_control_node_B.br_az = 0;
      while ((proc_control_node_B.iy_kh > 0) && (proc_control_node_B.br_az <=
              proc_control_node_B.iy_kh)) {
        proc_control_node_B.iAcol = proc_control_node_B.br_az +
          proc_control_node_B.nVar_b;
        proc_control_node_B.ix_iv = proc_control_node_B.br_az;
        while (proc_control_node_B.ix_iv + 1 <= proc_control_node_B.iAcol) {
          workspace_data[proc_control_node_B.ix_iv] = 0.0;
          proc_control_node_B.ix_iv++;
        }

        proc_control_node_B.br_az += proc_control_node_B.iy_kh;
      }

      proc_control_node_B.br_az = 1;
      proc_control_node_B.iAcol = 0;
      while ((proc_control_node_B.iy_kh > 0) && (proc_control_node_B.iAcol <=
              proc_control_node_B.iy_kh)) {
        proc_control_node_B.ix_iv = -1;
        proc_control_node_B.b_d = proc_control_node_B.br_az +
          proc_control_node_B.mWConstr_tmp_tmp;
        proc_control_node_B.ia_k = proc_control_node_B.br_az;
        while (proc_control_node_B.ia_k <= proc_control_node_B.b_d) {
          proc_control_node_B.b_ia_i = proc_control_node_B.ix_iv;
          proc_control_node_B.f_b = proc_control_node_B.iAcol +
            proc_control_node_B.nVar_b;
          proc_control_node_B.b_ic = proc_control_node_B.iAcol;
          while (proc_control_node_B.b_ic + 1 <= proc_control_node_B.f_b) {
            proc_control_node_B.b_ia_i++;
            workspace_data[proc_control_node_B.b_ic] +=
              proc_control_node_B.B_data[proc_control_node_B.ia_k - 1] *
              qrmanager->Q.data[proc_control_node_B.b_ia_i];
            proc_control_node_B.b_ic++;
          }

          proc_control_node_B.ix_iv += proc_control_node_B.ldq;
          proc_control_node_B.ia_k++;
        }

        proc_control_node_B.br_az += proc_control_node_B.iy_kh;
        proc_control_node_B.iAcol += proc_control_node_B.iy_kh;
      }
    }

    proc_control_node_B.mWConstr_tmp_tmp = 0;
    do {
      exitg1 = 0;
      if (proc_control_node_B.mWConstr_tmp_tmp <= proc_control_node_B.nVar_b - 1)
      {
        proc_control_node_B.c_h5 =
          workspace_data[proc_control_node_B.mWConstr_tmp_tmp];
        if (rtIsInf(proc_control_node_B.c_h5) || rtIsNaN
            (proc_control_node_B.c_h5)) {
          nonDegenerateWset = false;
          exitg1 = 1;
        } else {
          proc_control_node_B.c_h5 =
            workspace_data[proc_control_node_B.mWConstr_tmp_tmp +
            workspace_size[0]];
          if (rtIsInf(proc_control_node_B.c_h5) || rtIsNaN
              (proc_control_node_B.c_h5)) {
            nonDegenerateWset = false;
            exitg1 = 1;
          } else {
            proc_control_node_B.mWConstr_tmp_tmp++;
          }
        }
      } else {
        proc_control_node_B.mWConstr_tmp_tmp = 0;
        while (proc_control_node_B.mWConstr_tmp_tmp <=
               proc_control_node_B.nVar_b - 1) {
          workspace_data[proc_control_node_B.mWConstr_tmp_tmp] +=
            xCurrent_data[proc_control_node_B.mWConstr_tmp_tmp];
          proc_control_node_B.mWConstr_tmp_tmp++;
        }

        proc_control_node_B.c_h5 = proc_con_maxConstraintViolation(workingset,
          workspace_data);
        proc_control_node_B.constrViolation_basicX =
          proc_c_maxConstraintViolation_a(workingset, workspace_data,
          workspace_size[0] + 1);
        if ((proc_control_node_B.c_h5 <= 2.2204460492503131E-16) ||
            (proc_control_node_B.c_h5 <
             proc_control_node_B.constrViolation_basicX)) {
          proc_control_node_B.mWConstr_tmp_tmp = 0;
          while (proc_control_node_B.mWConstr_tmp_tmp <=
                 proc_control_node_B.nVar_b - 1) {
            xCurrent_data[proc_control_node_B.mWConstr_tmp_tmp] =
              workspace_data[proc_control_node_B.mWConstr_tmp_tmp];
            proc_control_node_B.mWConstr_tmp_tmp++;
          }
        } else {
          proc_control_node_B.mWConstr_tmp_tmp = 0;
          while (proc_control_node_B.mWConstr_tmp_tmp <=
                 proc_control_node_B.nVar_b - 1) {
            xCurrent_data[proc_control_node_B.mWConstr_tmp_tmp] =
              workspace_data[workspace_size[0] +
              proc_control_node_B.mWConstr_tmp_tmp];
            proc_control_node_B.mWConstr_tmp_tmp++;
          }
        }

        exitg1 = 1;
      }
    } while (exitg1 == 0);
  }

  return nonDegenerateWset;
}

// Function for MATLAB Function: '<S94>/NLMPC'
static void proc_con_RemoveDependentIneq__d(s_MFLHEgKtV7gODWBOEr7maD_proc_T
  *workingset, s_1UhBFHxHKUXshhZtLgMUHE_proc_T *qrmanager,
  s_JXDNdI64oJvyHGrBwTBHI_proc__T *memspace)
{
  int32_T k;
  proc_control_node_B.nFixedConstr = workingset->nWConstr[0] +
    workingset->nWConstr[1];
  proc_control_node_B.nVar_i = workingset->nVar;
  if ((workingset->nWConstr[2] + workingset->nWConstr[3]) + workingset->
      nWConstr[4] > 0) {
    proc_control_node_B.tol_f = 1000.0 * static_cast<real_T>(workingset->nVar) *
      2.2204460492503131E-16;
    proc_control_node_B.nDepIneq = 0;
    while (proc_control_node_B.nDepIneq <= proc_control_node_B.nFixedConstr - 1)
    {
      qrmanager->jpvt.data[proc_control_node_B.nDepIneq] = 1;
      proc_control_node_B.nDepIneq++;
    }

    proc_control_node_B.nDepIneq = proc_control_node_B.nFixedConstr + 1;
    while (proc_control_node_B.nDepIneq <= workingset->nActiveConstr) {
      qrmanager->jpvt.data[proc_control_node_B.nDepIneq - 1] = 0;
      proc_control_node_B.nDepIneq++;
    }

    proc_control_node_B.nDepIneq = 0;
    while (proc_control_node_B.nDepIneq <= workingset->nActiveConstr - 1) {
      proc_control_node_B.idxPosQR = qrmanager->ldq *
        proc_control_node_B.nDepIneq;
      proc_control_node_B.idxPosATwset = workingset->ldA *
        proc_control_node_B.nDepIneq;
      for (k = 1; k - 1 < proc_control_node_B.nVar_i; k++) {
        qrmanager->QR.data[(proc_control_node_B.idxPosQR + k) - 1] =
          workingset->ATwset.data[(proc_control_node_B.idxPosATwset + k) - 1];
      }

      proc_control_node_B.nDepIneq++;
    }

    proc_control_node_factorQRE_n(qrmanager, workingset->nVar,
      workingset->nActiveConstr);
    proc_control_node_B.nDepIneq = 0;
    proc_control_node_B.idxPosQR = workingset->nActiveConstr - 1;
    while (proc_control_node_B.idxPosQR + 1 > proc_control_node_B.nVar_i) {
      proc_control_node_B.nDepIneq++;
      memspace->workspace_int.data[proc_control_node_B.nDepIneq - 1] =
        qrmanager->jpvt.data[proc_control_node_B.idxPosQR];
      proc_control_node_B.idxPosQR--;
    }

    if (proc_control_node_B.idxPosQR + 1 <= workingset->nVar) {
      proc_control_node_B.nVar_i = qrmanager->ldq * proc_control_node_B.idxPosQR
        + proc_control_node_B.idxPosQR;
      while ((proc_control_node_B.idxPosQR + 1 >
              proc_control_node_B.nFixedConstr) && (fabs(qrmanager->
               QR.data[proc_control_node_B.nVar_i]) < proc_control_node_B.tol_f))
      {
        proc_control_node_B.nDepIneq++;
        memspace->workspace_int.data[proc_control_node_B.nDepIneq - 1] =
          qrmanager->jpvt.data[proc_control_node_B.idxPosQR];
        proc_control_node_B.idxPosQR--;
        proc_control_node_B.nVar_i = (proc_control_node_B.nVar_i -
          qrmanager->ldq) - 1;
      }
    }

    proc_control_node_countsort(memspace->workspace_int.data,
      proc_control_node_B.nDepIneq, memspace->workspace_sort.data,
      proc_control_node_B.nFixedConstr + 1, workingset->nActiveConstr);
    while (proc_control_node_B.nDepIneq > 0) {
      proc_control_node_removeConstr(workingset, memspace->
        workspace_int.data[proc_control_node_B.nDepIneq - 1]);
      proc_control_node_B.nDepIneq--;
    }
  }
}

// Function for MATLAB Function: '<S94>/NLMPC'
static void proc_control_nod_xgemv_jhgj1v0n(int32_T m, int32_T n, const real_T
  A_data[], int32_T lda, const real_T x_data[], real_T y_data[])
{
  int32_T b;
  int32_T b_c;
  int32_T ia;
  if (n != 0) {
    proc_control_node_B.b_iy_o = 0;
    while (proc_control_node_B.b_iy_o <= n - 1) {
      y_data[proc_control_node_B.b_iy_o] = -y_data[proc_control_node_B.b_iy_o];
      proc_control_node_B.b_iy_o++;
    }

    proc_control_node_B.b_iy_o = 0;
    b_c = (n - 1) * lda + 1;
    proc_control_node_B.iac_i = 1;
    while (((lda > 0) && (proc_control_node_B.iac_i <= b_c)) || ((lda < 0) &&
            (proc_control_node_B.iac_i >= b_c))) {
      proc_control_node_B.ix_e = 0;
      proc_control_node_B.c_e = 0.0;
      b = (proc_control_node_B.iac_i + m) - 1;
      for (ia = proc_control_node_B.iac_i; ia <= b; ia++) {
        proc_control_node_B.c_e += A_data[ia - 1] *
          x_data[proc_control_node_B.ix_e];
        proc_control_node_B.ix_e++;
      }

      y_data[proc_control_node_B.b_iy_o] += proc_control_node_B.c_e;
      proc_control_node_B.b_iy_o++;
      proc_control_node_B.iac_i += lda;
    }
  }
}

// Function for MATLAB Function: '<S94>/NLMPC'
static void proc_control_node_xgemv_jhgj1v0(int32_T n, const real_T A_data[],
  int32_T lda, const real_T x_data[], real_T y_data[])
{
  int32_T b_c;
  int32_T ia;
  int32_T iac;
  if (n != 0) {
    proc_control_node_B.b_iy_b = 0;
    while (proc_control_node_B.b_iy_b <= n - 1) {
      y_data[proc_control_node_B.b_iy_b] = -y_data[proc_control_node_B.b_iy_b];
      proc_control_node_B.b_iy_b++;
    }

    proc_control_node_B.b_iy_b = 0;
    b_c = (n - 1) * lda + 1;
    iac = 1;
    while (((lda > 0) && (iac <= b_c)) || ((lda < 0) && (iac >= b_c))) {
      proc_control_node_B.ix_j = 0;
      proc_control_node_B.c_hv = 0.0;
      for (ia = iac; ia <= iac + 68; ia++) {
        proc_control_node_B.c_hv += A_data[ia - 1] *
          x_data[proc_control_node_B.ix_j];
        proc_control_node_B.ix_j++;
      }

      y_data[proc_control_node_B.b_iy_b] += proc_control_node_B.c_hv;
      proc_control_node_B.b_iy_b++;
      iac += lda;
    }
  }
}

// Function for MATLAB Function: '<S94>/NLMPC'
static real_T proc__maxConstraintViolation_ae(s_MFLHEgKtV7gODWBOEr7maD_proc_T
  *obj, const real_T x_data[])
{
  real_T v;
  proc_control_node_B.mLB_n = obj->sizes[3];
  proc_control_node_B.mUB_g = obj->sizes[4];
  proc_control_node_B.mFixed_d = obj->sizes[0];
  if (obj->probType == 2) {
    v = 0.0;
    proc_control_node_B.mIneq_o = obj->sizes[2] - 1;
    if (obj->Aineq.size != 0) {
      proc_control_node_B.b_k_aj = 0;
      while (proc_control_node_B.b_k_aj <= proc_control_node_B.mIneq_o) {
        obj->maxConstrWorkspace.data[proc_control_node_B.b_k_aj] =
          obj->bineq.data[proc_control_node_B.b_k_aj];
        proc_control_node_B.b_k_aj++;
      }

      proc_control_node_xgemv_jhgj1v0(obj->sizes[2], obj->Aineq.data, obj->ldA,
        x_data, obj->maxConstrWorkspace.data);
      proc_control_node_B.b_k_aj = 0;
      while (proc_control_node_B.b_k_aj <= proc_control_node_B.mIneq_o) {
        obj->maxConstrWorkspace.data[proc_control_node_B.b_k_aj] -=
          x_data[proc_control_node_B.b_k_aj + 69];
        proc_control_node_B.u1_l = obj->
          maxConstrWorkspace.data[proc_control_node_B.b_k_aj];
        if ((!(v > proc_control_node_B.u1_l)) && (!rtIsNaN
             (proc_control_node_B.u1_l))) {
          v = proc_control_node_B.u1_l;
        }

        proc_control_node_B.b_k_aj++;
      }
    }

    memcpy(&obj->maxConstrWorkspace.data[0], &obj->beq[0], 52U * sizeof(real_T));
    proc_control_node_xgemv_jhgj1v0(52, obj->Aeq.data, obj->ldA, x_data,
      obj->maxConstrWorkspace.data);
    for (proc_control_node_B.b_k_aj = 0; proc_control_node_B.b_k_aj < 52;
         proc_control_node_B.b_k_aj++) {
      obj->maxConstrWorkspace.data[proc_control_node_B.b_k_aj] =
        (obj->maxConstrWorkspace.data[proc_control_node_B.b_k_aj] - x_data
         [(proc_control_node_B.mIneq_o + proc_control_node_B.b_k_aj) + 70]) +
        x_data[(obj->sizes[2] + proc_control_node_B.b_k_aj) + 121];
      proc_control_node_B.u1_l = fabs(obj->
        maxConstrWorkspace.data[proc_control_node_B.b_k_aj]);
      if ((!(v > proc_control_node_B.u1_l)) && (!rtIsNaN
           (proc_control_node_B.u1_l))) {
        v = proc_control_node_B.u1_l;
      }
    }
  } else {
    v = 0.0;
    proc_control_node_B.mIneq_o = obj->sizes[2] - 1;
    if (obj->Aineq.size != 0) {
      proc_control_node_B.b_k_aj = 0;
      while (proc_control_node_B.b_k_aj <= proc_control_node_B.mIneq_o) {
        obj->maxConstrWorkspace.data[proc_control_node_B.b_k_aj] =
          obj->bineq.data[proc_control_node_B.b_k_aj];
        proc_control_node_B.b_k_aj++;
      }

      proc_control_nod_xgemv_jhgj1v0n(obj->nVar, obj->sizes[2], obj->Aineq.data,
        obj->ldA, x_data, obj->maxConstrWorkspace.data);
      proc_control_node_B.b_k_aj = 0;
      while (proc_control_node_B.b_k_aj <= proc_control_node_B.mIneq_o) {
        proc_control_node_B.u1_l = obj->
          maxConstrWorkspace.data[proc_control_node_B.b_k_aj];
        if ((!(v > proc_control_node_B.u1_l)) && (!rtIsNaN
             (proc_control_node_B.u1_l))) {
          v = proc_control_node_B.u1_l;
        }

        proc_control_node_B.b_k_aj++;
      }
    }

    memcpy(&obj->maxConstrWorkspace.data[0], &obj->beq[0], 52U * sizeof(real_T));
    proc_control_nod_xgemv_jhgj1v0n(obj->nVar, 52, obj->Aeq.data, obj->ldA,
      x_data, obj->maxConstrWorkspace.data);
    for (proc_control_node_B.mIneq_o = 0; proc_control_node_B.mIneq_o < 52;
         proc_control_node_B.mIneq_o++) {
      proc_control_node_B.u1_l = fabs(obj->
        maxConstrWorkspace.data[proc_control_node_B.mIneq_o]);
      if ((!(v > proc_control_node_B.u1_l)) && (!rtIsNaN
           (proc_control_node_B.u1_l))) {
        v = proc_control_node_B.u1_l;
      }
    }
  }

  if (proc_control_node_B.mLB_n > 0) {
    proc_control_node_B.mIneq_o = 0;
    while (proc_control_node_B.mIneq_o <= proc_control_node_B.mLB_n - 1) {
      proc_control_node_B.u1_l = -x_data[obj->
        indexLB.data[proc_control_node_B.mIneq_o] - 1] - obj->lb.data
        [obj->indexLB.data[proc_control_node_B.mIneq_o] - 1];
      if ((!(v > proc_control_node_B.u1_l)) && (!rtIsNaN
           (proc_control_node_B.u1_l))) {
        v = proc_control_node_B.u1_l;
      }

      proc_control_node_B.mIneq_o++;
    }
  }

  if (proc_control_node_B.mUB_g > 0) {
    proc_control_node_B.mLB_n = 0;
    while (proc_control_node_B.mLB_n <= proc_control_node_B.mUB_g - 1) {
      proc_control_node_B.u1_l = x_data[obj->
        indexUB.data[proc_control_node_B.mLB_n] - 1] - obj->ub.data
        [obj->indexUB.data[proc_control_node_B.mLB_n] - 1];
      if ((!(v > proc_control_node_B.u1_l)) && (!rtIsNaN
           (proc_control_node_B.u1_l))) {
        v = proc_control_node_B.u1_l;
      }

      proc_control_node_B.mLB_n++;
    }
  }

  if (proc_control_node_B.mFixed_d > 0) {
    proc_control_node_B.mUB_g = 0;
    while (proc_control_node_B.mUB_g <= proc_control_node_B.mFixed_d - 1) {
      proc_control_node_B.u1_l = fabs(x_data[obj->
        indexFixed.data[proc_control_node_B.mUB_g] - 1] - obj->ub.data
        [obj->indexFixed.data[proc_control_node_B.mUB_g] - 1]);
      if ((!(v > proc_control_node_B.u1_l)) && (!rtIsNaN
           (proc_control_node_B.u1_l))) {
        v = proc_control_node_B.u1_l;
      }

      proc_control_node_B.mUB_g++;
    }
  }

  return v;
}

// Function for MATLAB Function: '<S94>/NLMPC'
static void proc_control_PresolveWorkingSet(s_YLC2gJhPBjEs8VvOTvcE4B_proc_T
  *solution, s_JXDNdI64oJvyHGrBwTBHI_proc__T *memspace,
  s_MFLHEgKtV7gODWBOEr7maD_proc_T *workingset, s_1UhBFHxHKUXshhZtLgMUHE_proc_T
  *qrmanager)
{
  boolean_T guard1 = false;
  boolean_T okWorkingSet;
  solution->state = 82;
  proc_control_node_B.b_dc = proc_control_RemoveDependentEq_(memspace,
    workingset, qrmanager);
  if ((proc_control_node_B.b_dc != -1) && (workingset->nActiveConstr <=
       qrmanager->ldq)) {
    proc_contr_RemoveDependentIneq_(workingset, qrmanager, memspace);
    proc_control_node_B.loop_ub_tmp_d = memspace->workspace_double.size[0] *
      memspace->workspace_double.size[1];
    for (proc_control_node_B.b_dc = 0; proc_control_node_B.b_dc <
         proc_control_node_B.loop_ub_tmp_d; proc_control_node_B.b_dc++) {
    }

    okWorkingSet = proc_co_feasibleX0ForWorkingSet
      (memspace->workspace_double.data, memspace->workspace_double.size,
       solution->xstar.data, workingset, qrmanager);
    guard1 = false;
    if (!okWorkingSet) {
      proc_con_RemoveDependentIneq__d(workingset, qrmanager, memspace);
      proc_control_node_B.loop_ub_tmp_d = memspace->workspace_double.size[0] *
        memspace->workspace_double.size[1];
      for (proc_control_node_B.b_dc = 0; proc_control_node_B.b_dc <
           proc_control_node_B.loop_ub_tmp_d; proc_control_node_B.b_dc++) {
      }

      okWorkingSet = proc_co_feasibleX0ForWorkingSet
        (memspace->workspace_double.data, memspace->workspace_double.size,
         solution->xstar.data, workingset, qrmanager);
      if (!okWorkingSet) {
        solution->state = -7;
      } else {
        guard1 = true;
      }
    } else {
      guard1 = true;
    }

    if (guard1) {
      if (workingset->nWConstr[0] + workingset->nWConstr[1] == workingset->nVar)
      {
        proc_control_node_B.constrViolation = proc__maxConstraintViolation_ae
          (workingset, solution->xstar.data);
        if (proc_control_node_B.constrViolation > 0.02) {
          solution->state = -2;
        }
      }
    }
  } else {
    solution->state = -3;
    proc_contro_removeAllIneqConstr(workingset);
  }
}

// Function for MATLAB Function: '<S94>/NLMPC'
static void proc_control_no_xgemv_jhgj1v0ny(int32_T m, int32_T n, const real_T
  A[4761], int32_T lda, const real_T x_data[], real_T y_data[])
{
  int32_T b;
  int32_T c;
  int32_T ia;
  int32_T iac;
  if ((m != 0) && (n != 0)) {
    proc_control_node_B.ix_om = 0;
    while (proc_control_node_B.ix_om <= m - 1) {
      y_data[proc_control_node_B.ix_om] = 0.0;
      proc_control_node_B.ix_om++;
    }

    proc_control_node_B.ix_om = 0;
    c = (n - 1) * lda + 1;
    iac = 1;
    while (((lda > 0) && (iac <= c)) || ((lda < 0) && (iac >= c))) {
      proc_control_node_B.iy_jd = 0;
      b = (iac + m) - 1;
      for (ia = iac; ia <= b; ia++) {
        y_data[proc_control_node_B.iy_jd] += A[ia - 1] *
          x_data[proc_control_node_B.ix_om];
        proc_control_node_B.iy_jd++;
      }

      proc_control_node_B.ix_om++;
      iac += lda;
    }
  }
}

// Function for MATLAB Function: '<S94>/NLMPC'
static void proc_contro_computeGrad_StoreHx(s_jPVC6k54fKlkrevS6u11qC_proc_T *obj,
  const real_T H[4761], const real_T f_data[], const real_T x_data[])
{
  switch (obj->objtype) {
   case 5:
    proc_control_node_B.maxRegVar = 0;
    while (proc_control_node_B.maxRegVar <= obj->nvar - 2) {
      obj->grad.data[proc_control_node_B.maxRegVar] = 0.0;
      proc_control_node_B.maxRegVar++;
    }

    obj->grad.data[obj->nvar - 1] = obj->gammaScalar;
    break;

   case 3:
    proc_control_no_xgemv_jhgj1v0ny(obj->nvar, obj->nvar, H, obj->nvar, x_data,
      obj->Hx.data);
    proc_control_node_B.maxRegVar = 0;
    while (proc_control_node_B.maxRegVar <= obj->nvar - 1) {
      obj->grad.data[proc_control_node_B.maxRegVar] = obj->
        Hx.data[proc_control_node_B.maxRegVar];
      proc_control_node_B.maxRegVar++;
    }

    if (obj->hasLinear && (obj->nvar >= 1)) {
      proc_control_node_B.maxRegVar = obj->nvar - 1;
      proc_control_node_B.iy_d = 0;
      while (proc_control_node_B.iy_d <= proc_control_node_B.maxRegVar) {
        obj->grad.data[proc_control_node_B.iy_d] +=
          f_data[proc_control_node_B.iy_d];
        proc_control_node_B.iy_d++;
      }
    }
    break;

   default:
    proc_control_node_B.maxRegVar = obj->maxVar - 1;
    proc_control_no_xgemv_jhgj1v0ny(obj->nvar, obj->nvar, H, obj->nvar, x_data,
      obj->Hx.data);
    proc_control_node_B.iy_d = obj->nvar;
    while (proc_control_node_B.iy_d + 1 <= proc_control_node_B.maxRegVar) {
      obj->Hx.data[proc_control_node_B.iy_d] = obj->beta *
        x_data[proc_control_node_B.iy_d];
      proc_control_node_B.iy_d++;
    }

    proc_control_node_B.iy_d = 0;
    while (proc_control_node_B.iy_d <= proc_control_node_B.maxRegVar - 1) {
      obj->grad.data[proc_control_node_B.iy_d] = obj->
        Hx.data[proc_control_node_B.iy_d];
      proc_control_node_B.iy_d++;
    }

    if (obj->hasLinear && (obj->nvar >= 1)) {
      proc_control_node_B.maxRegVar = obj->nvar - 1;
      proc_control_node_B.iy_d = 0;
      while (proc_control_node_B.iy_d <= proc_control_node_B.maxRegVar) {
        obj->grad.data[proc_control_node_B.iy_d] +=
          f_data[proc_control_node_B.iy_d];
        proc_control_node_B.iy_d++;
      }
    }

    proc_control_node_B.maxRegVar = (obj->maxVar - obj->nvar) - 1;
    if (proc_control_node_B.maxRegVar >= 1) {
      proc_control_node_B.iy_d = obj->nvar;
      proc_control_node_B.c_k_a = 0;
      while (proc_control_node_B.c_k_a <= proc_control_node_B.maxRegVar - 1) {
        obj->grad.data[proc_control_node_B.iy_d] += obj->rho;
        proc_control_node_B.iy_d++;
        proc_control_node_B.c_k_a++;
      }
    }
    break;
  }
}

// Function for MATLAB Function: '<S94>/NLMPC'
static real_T proc_contro_computeFval_ReuseHx(const
  s_jPVC6k54fKlkrevS6u11qC_proc_T *obj, real_T workspace_data[], const real_T
  f_data[], const real_T x_data[])
{
  real_T val;
  int32_T d_i;
  int32_T d_k;
  int32_T maxRegVar_tmp_tmp;
  switch (obj->objtype) {
   case 5:
    val = x_data[obj->nvar - 1] * obj->gammaScalar;
    break;

   case 3:
    if (obj->hasLinear) {
      for (maxRegVar_tmp_tmp = 0; maxRegVar_tmp_tmp < obj->nvar;
           maxRegVar_tmp_tmp++) {
        workspace_data[maxRegVar_tmp_tmp] = 0.5 * obj->Hx.data[maxRegVar_tmp_tmp]
          + f_data[maxRegVar_tmp_tmp];
      }

      val = 0.0;
      if (obj->nvar >= 1) {
        for (maxRegVar_tmp_tmp = 0; maxRegVar_tmp_tmp < obj->nvar;
             maxRegVar_tmp_tmp++) {
          val += workspace_data[maxRegVar_tmp_tmp] * x_data[maxRegVar_tmp_tmp];
        }
      }
    } else {
      val = 0.0;
      if (obj->nvar >= 1) {
        for (maxRegVar_tmp_tmp = 0; maxRegVar_tmp_tmp < obj->nvar;
             maxRegVar_tmp_tmp++) {
          val += x_data[maxRegVar_tmp_tmp] * obj->Hx.data[maxRegVar_tmp_tmp];
        }
      }

      val *= 0.5;
    }
    break;

   default:
    maxRegVar_tmp_tmp = obj->maxVar - 1;
    if (obj->hasLinear) {
      for (d_k = 0; d_k < obj->nvar; d_k++) {
        workspace_data[d_k] = f_data[d_k];
      }

      d_k = obj->maxVar - obj->nvar;
      for (d_i = 0; d_i <= d_k - 2; d_i++) {
        workspace_data[obj->nvar + d_i] = obj->rho;
      }

      for (d_k = 0; d_k < maxRegVar_tmp_tmp; d_k++) {
        workspace_data[d_k] += 0.5 * obj->Hx.data[d_k];
      }

      val = 0.0;
      if (obj->maxVar - 1 >= 1) {
        for (maxRegVar_tmp_tmp = 0; maxRegVar_tmp_tmp <= obj->maxVar - 2;
             maxRegVar_tmp_tmp++) {
          val += workspace_data[maxRegVar_tmp_tmp] * x_data[maxRegVar_tmp_tmp];
        }
      }
    } else {
      val = 0.0;
      if (obj->maxVar - 1 >= 1) {
        for (d_k = 0; d_k <= obj->maxVar - 2; d_k++) {
          val += x_data[d_k] * obj->Hx.data[d_k];
        }
      }

      val *= 0.5;
      for (d_k = obj->nvar; d_k < maxRegVar_tmp_tmp; d_k++) {
        val += x_data[d_k] * obj->rho;
      }
    }
    break;
  }

  return val;
}

// Function for MATLAB Function: '<S94>/NLMPC'
static void proc_control_node_xrotg(real_T *a, real_T *b, real_T *c, real_T *s)
{
  proc_control_node_B.roe_b = *b;
  proc_control_node_B.absa_a = fabs(*a);
  proc_control_node_B.absb_k = fabs(*b);
  if (proc_control_node_B.absa_a > proc_control_node_B.absb_k) {
    proc_control_node_B.roe_b = *a;
  }

  proc_control_node_B.scale_m2 = proc_control_node_B.absa_a +
    proc_control_node_B.absb_k;
  if (proc_control_node_B.scale_m2 == 0.0) {
    *s = 0.0;
    *c = 1.0;
    proc_control_node_B.scale_m2 = 0.0;
    *b = 0.0;
  } else {
    proc_control_node_B.ads_j = proc_control_node_B.absa_a /
      proc_control_node_B.scale_m2;
    proc_control_node_B.bds_j = proc_control_node_B.absb_k /
      proc_control_node_B.scale_m2;
    proc_control_node_B.scale_m2 *= sqrt(proc_control_node_B.ads_j *
      proc_control_node_B.ads_j + proc_control_node_B.bds_j *
      proc_control_node_B.bds_j);
    if (proc_control_node_B.roe_b < 0.0) {
      proc_control_node_B.scale_m2 = -proc_control_node_B.scale_m2;
    }

    *c = *a / proc_control_node_B.scale_m2;
    *s = *b / proc_control_node_B.scale_m2;
    if (proc_control_node_B.absa_a > proc_control_node_B.absb_k) {
      *b = *s;
    } else if (*c != 0.0) {
      *b = 1.0 / *c;
    } else {
      *b = 1.0;
    }
  }

  *a = proc_control_node_B.scale_m2;
}

// Function for MATLAB Function: '<S94>/NLMPC'
static void proc_control_n_deleteColMoveEnd(s_1UhBFHxHKUXshhZtLgMUHE_proc_T *obj,
  int32_T idx)
{
  int32_T QRk0;
  int32_T b_ix;
  int32_T d_k;
  int32_T ix;
  if (obj->usedPivoting) {
    proc_control_node_B.i_ej = 1;
    while ((proc_control_node_B.i_ej <= obj->ncols) && (obj->
            jpvt.data[proc_control_node_B.i_ej - 1] != idx)) {
      proc_control_node_B.i_ej++;
    }

    idx = proc_control_node_B.i_ej;
  }

  if (idx >= obj->ncols) {
    obj->ncols--;
  } else {
    obj->jpvt.data[idx - 1] = obj->jpvt.data[obj->ncols - 1];
    proc_control_node_B.i_ej = 0;
    while (proc_control_node_B.i_ej <= obj->minRowCol - 1) {
      obj->QR.data[proc_control_node_B.i_ej + obj->ldq * (idx - 1)] =
        obj->QR.data[(obj->ncols - 1) * obj->ldq + proc_control_node_B.i_ej];
      proc_control_node_B.i_ej++;
    }

    obj->ncols--;
    if (obj->mrows < obj->ncols) {
      obj->minRowCol = obj->mrows;
    } else {
      obj->minRowCol = obj->ncols;
    }

    if (idx < obj->mrows) {
      if (obj->mrows - 1 < obj->ncols) {
        proc_control_node_B.i_ej = obj->mrows - 1;
      } else {
        proc_control_node_B.i_ej = obj->ncols;
      }

      proc_control_node_B.k_mea = proc_control_node_B.i_ej;
      proc_control_node_B.idxRotGCol = (idx - 1) * obj->ldq;
      while (proc_control_node_B.k_mea >= idx) {
        QRk0 = proc_control_node_B.k_mea + proc_control_node_B.idxRotGCol;
        proc_control_node_B.b_temp = obj->QR.data[QRk0 - 1];
        proc_control_node_B.e_e = obj->QR.data[QRk0];
        proc_control_node_xrotg(&proc_control_node_B.b_temp,
          &proc_control_node_B.e_e, &proc_control_node_B.c_c_i,
          &proc_control_node_B.b_s);
        QRk0 = proc_control_node_B.k_mea + proc_control_node_B.idxRotGCol;
        obj->QR.data[QRk0 - 1] = proc_control_node_B.b_temp;
        obj->QR.data[QRk0] = proc_control_node_B.e_e;
        obj->QR.data[proc_control_node_B.k_mea + obj->ldq *
          (proc_control_node_B.k_mea - 1)] = 0.0;
        QRk0 = obj->ldq * idx + proc_control_node_B.k_mea;
        b_ix = obj->ncols - idx;
        if (b_ix >= 1) {
          ix = QRk0 - 1;
          for (d_k = 0; d_k < b_ix; d_k++) {
            proc_control_node_B.b_temp = obj->QR.data[ix] *
              proc_control_node_B.c_c_i + obj->QR.data[QRk0] *
              proc_control_node_B.b_s;
            obj->QR.data[QRk0] = obj->QR.data[QRk0] * proc_control_node_B.c_c_i
              - obj->QR.data[ix] * proc_control_node_B.b_s;
            obj->QR.data[ix] = proc_control_node_B.b_temp;
            QRk0 += obj->ldq;
            ix += obj->ldq;
          }
        }

        QRk0 = (proc_control_node_B.k_mea - 1) * obj->ldq;
        if (obj->mrows >= 1) {
          b_ix = obj->ldq + QRk0;
          for (ix = 0; ix < obj->mrows; ix++) {
            proc_control_node_B.b_temp = obj->Q.data[QRk0] *
              proc_control_node_B.c_c_i + obj->Q.data[b_ix] *
              proc_control_node_B.b_s;
            obj->Q.data[b_ix] = obj->Q.data[b_ix] * proc_control_node_B.c_c_i -
              obj->Q.data[QRk0] * proc_control_node_B.b_s;
            obj->Q.data[QRk0] = proc_control_node_B.b_temp;
            b_ix++;
            QRk0++;
          }
        }

        proc_control_node_B.k_mea--;
      }

      proc_control_node_B.k_mea = idx + 1;
      while (proc_control_node_B.k_mea <= proc_control_node_B.i_ej) {
        proc_control_node_B.idxRotGCol = proc_control_node_B.k_mea +
          (proc_control_node_B.k_mea - 1) * obj->ldq;
        proc_control_node_B.b_temp = obj->QR.data[proc_control_node_B.idxRotGCol
          - 1];
        proc_control_node_B.e_e = obj->QR.data[proc_control_node_B.idxRotGCol];
        proc_control_node_xrotg(&proc_control_node_B.b_temp,
          &proc_control_node_B.e_e, &proc_control_node_B.c_c_i,
          &proc_control_node_B.b_s);
        obj->QR.data[proc_control_node_B.idxRotGCol - 1] =
          proc_control_node_B.b_temp;
        obj->QR.data[proc_control_node_B.idxRotGCol] = proc_control_node_B.e_e;
        QRk0 = (obj->ldq + 1) * proc_control_node_B.k_mea;
        proc_control_node_B.idxRotGCol = obj->ncols - proc_control_node_B.k_mea;
        if (proc_control_node_B.idxRotGCol >= 1) {
          b_ix = QRk0 - 1;
          for (ix = 0; ix < proc_control_node_B.idxRotGCol; ix++) {
            proc_control_node_B.b_temp = obj->QR.data[b_ix] *
              proc_control_node_B.c_c_i + obj->QR.data[QRk0] *
              proc_control_node_B.b_s;
            obj->QR.data[QRk0] = obj->QR.data[QRk0] * proc_control_node_B.c_c_i
              - obj->QR.data[b_ix] * proc_control_node_B.b_s;
            obj->QR.data[b_ix] = proc_control_node_B.b_temp;
            QRk0 += obj->ldq;
            b_ix += obj->ldq;
          }
        }

        proc_control_node_B.idxRotGCol = (proc_control_node_B.k_mea - 1) *
          obj->ldq;
        if (obj->mrows >= 1) {
          QRk0 = obj->ldq + proc_control_node_B.idxRotGCol;
          for (b_ix = 0; b_ix < obj->mrows; b_ix++) {
            proc_control_node_B.b_temp = obj->
              Q.data[proc_control_node_B.idxRotGCol] * proc_control_node_B.c_c_i
              + obj->Q.data[QRk0] * proc_control_node_B.b_s;
            obj->Q.data[QRk0] = obj->Q.data[QRk0] * proc_control_node_B.c_c_i -
              obj->Q.data[proc_control_node_B.idxRotGCol] *
              proc_control_node_B.b_s;
            obj->Q.data[proc_control_node_B.idxRotGCol] =
              proc_control_node_B.b_temp;
            QRk0++;
            proc_control_node_B.idxRotGCol++;
          }
        }

        proc_control_node_B.k_mea++;
      }
    }
  }
}

// Function for MATLAB Function: '<S94>/NLMPC'
static boolean_T proc_control_node_strcmp(const char_T a[7])
{
  int32_T ret;
  static const char_T b[7] = { 'f', 'm', 'i', 'n', 'c', 'o', 'n' };

  ret = memcmp(&a[0], &b[0], 7);
  return ret == 0;
}

// Function for MATLAB Function: '<S94>/NLMPC'
static void proc_control_node_xgemm(int32_T m, int32_T n, int32_T k, const
  real_T A[4761], int32_T lda, const real_T B_data[], int32_T ib0, int32_T ldb,
  real_T C_data[], int32_T ldc)
{
  int32_T b_c;
  int32_T b_ic;
  int32_T d;
  int32_T ib;
  if ((m != 0) && (n != 0)) {
    b_c = (n - 1) * ldc;
    proc_control_node_B.br_d = 0;
    while (((ldc > 0) && (proc_control_node_B.br_d <= b_c)) || ((ldc < 0) &&
            (proc_control_node_B.br_d >= b_c))) {
      proc_control_node_B.b_cr_k = proc_control_node_B.br_d + m;
      proc_control_node_B.ar_c = proc_control_node_B.br_d;
      while (proc_control_node_B.ar_c + 1 <= proc_control_node_B.b_cr_k) {
        C_data[proc_control_node_B.ar_c] = 0.0;
        proc_control_node_B.ar_c++;
      }

      proc_control_node_B.br_d += ldc;
    }

    proc_control_node_B.br_d = ib0;
    proc_control_node_B.b_cr_k = 0;
    while (((ldc > 0) && (proc_control_node_B.b_cr_k <= b_c)) || ((ldc < 0) &&
            (proc_control_node_B.b_cr_k >= b_c))) {
      proc_control_node_B.ar_c = -1;
      proc_control_node_B.c_c5 = proc_control_node_B.br_d + k;
      for (ib = proc_control_node_B.br_d; ib < proc_control_node_B.c_c5; ib++) {
        proc_control_node_B.ia_i = proc_control_node_B.ar_c;
        d = proc_control_node_B.b_cr_k + m;
        for (b_ic = proc_control_node_B.b_cr_k; b_ic < d; b_ic++) {
          proc_control_node_B.ia_i++;
          C_data[b_ic] += B_data[ib - 1] * A[proc_control_node_B.ia_i];
        }

        proc_control_node_B.ar_c += lda;
      }

      proc_control_node_B.br_d += ldb;
      proc_control_node_B.b_cr_k += ldc;
    }
  }
}

// Function for MATLAB Function: '<S94>/NLMPC'
static void proc_control_node_xgemm_g(int32_T m, int32_T n, int32_T k, const
  real_T A_data[], int32_T ia0, int32_T lda, const real_T B_data[], int32_T ldb,
  real_T C_data[], int32_T ldc)
{
  int32_T b_c;
  int32_T b_ic;
  int32_T c;
  int32_T w;
  if ((m != 0) && (n != 0)) {
    b_c = (n - 1) * ldc;
    proc_control_node_B.br_eh = 0;
    while (((ldc > 0) && (proc_control_node_B.br_eh <= b_c)) || ((ldc < 0) &&
            (proc_control_node_B.br_eh >= b_c))) {
      proc_control_node_B.b_cr = proc_control_node_B.br_eh + m;
      proc_control_node_B.ar_m = proc_control_node_B.br_eh;
      while (proc_control_node_B.ar_m + 1 <= proc_control_node_B.b_cr) {
        C_data[proc_control_node_B.ar_m] = 0.0;
        proc_control_node_B.ar_m++;
      }

      proc_control_node_B.br_eh += ldc;
    }

    proc_control_node_B.br_eh = -1;
    proc_control_node_B.b_cr = 0;
    while (((ldc > 0) && (proc_control_node_B.b_cr <= b_c)) || ((ldc < 0) &&
            (proc_control_node_B.b_cr >= b_c))) {
      proc_control_node_B.ar_m = ia0;
      c = proc_control_node_B.b_cr + m;
      for (b_ic = proc_control_node_B.b_cr; b_ic < c; b_ic++) {
        proc_control_node_B.temp_c = 0.0;
        for (w = 1; w - 1 < k; w++) {
          proc_control_node_B.temp_c += A_data[(w + proc_control_node_B.ar_m) -
            2] * B_data[w + proc_control_node_B.br_eh];
        }

        C_data[b_ic] += proc_control_node_B.temp_c;
        proc_control_node_B.ar_m += lda;
      }

      proc_control_node_B.br_eh += ldb;
      proc_control_node_B.b_cr += ldc;
    }
  }
}

// Function for MATLAB Function: '<S94>/NLMPC'
static int32_T proc_control_node_ixamax_l(int32_T n, const real_T x_data[],
  int32_T incx)
{
  real_T smax;
  real_T y;
  int32_T idxmax;
  int32_T ix;
  int32_T k;
  if (n < 1) {
    idxmax = 0;
  } else {
    idxmax = 1;
    if (n > 1) {
      ix = 0;
      smax = fabs(x_data[0]);
      for (k = 2; k <= n; k++) {
        ix += incx;
        y = fabs(x_data[ix]);
        if (y > smax) {
          idxmax = k;
          smax = y;
        }
      }
    }
  }

  return idxmax;
}

// Function for MATLAB Function: '<S94>/NLMPC'
static void proc_control_node_fullColLDL2_(s_B2KneB7ks2RV0bvoJc0bxC_proc_T *obj,
  int32_T LD_offset, int32_T NColsRemain)
{
  int32_T b;
  int32_T ijA;
  int32_T j;
  int32_T jA;
  proc_control_node_B.LDimSizeP1_k = obj->ldm;
  proc_control_node_B.k_em = 0;
  while (proc_control_node_B.k_em <= NColsRemain - 1) {
    proc_control_node_B.LD_diagOffset_p = ((proc_control_node_B.LDimSizeP1_k + 1)
      * proc_control_node_B.k_em + LD_offset) - 1;
    proc_control_node_B.neg_D = -1.0 / obj->
      FMat.data[proc_control_node_B.LD_diagOffset_p];
    proc_control_node_B.subMatrixDim = (NColsRemain - proc_control_node_B.k_em)
      - 2;
    for (jA = 1; jA - 1 <= proc_control_node_B.subMatrixDim; jA++) {
      obj->workspace_ = obj->FMat.data[proc_control_node_B.LD_diagOffset_p + jA];
    }

    proc_control_node_B.y_o2 = obj->workspace_;
    if (!(proc_control_node_B.neg_D == 0.0)) {
      jA = (proc_control_node_B.LD_diagOffset_p +
            proc_control_node_B.LDimSizeP1_k) + 1;
      for (j = 0; j <= proc_control_node_B.subMatrixDim; j++) {
        if (proc_control_node_B.y_o2 != 0.0) {
          proc_control_node_B.temp_l = proc_control_node_B.y_o2 *
            proc_control_node_B.neg_D;
          b = proc_control_node_B.subMatrixDim + jA;
          for (ijA = jA; ijA < b + 1; ijA++) {
            obj->FMat.data[ijA] += obj->workspace_ * proc_control_node_B.temp_l;
          }
        }

        jA += obj->ldm;
      }
    }

    for (jA = 1; jA - 1 <= proc_control_node_B.subMatrixDim; jA++) {
      j = proc_control_node_B.LD_diagOffset_p + jA;
      obj->FMat.data[j] /= obj->FMat.data[proc_control_node_B.LD_diagOffset_p];
    }

    proc_control_node_B.k_em++;
  }
}

// Function for MATLAB Function: '<S94>/NLMPC'
static void proc_control_no_partialColLDL3_(s_B2KneB7ks2RV0bvoJc0bxC_proc_T *obj,
  int32_T LD_offset, int32_T NColsRemain)
{
  int32_T b_ia;
  int32_T br;
  int32_T e;
  int32_T g;
  proc_control_node_B.LDimSizeP1 = obj->ldm + 1;
  for (proc_control_node_B.k_c = 0; proc_control_node_B.k_c < 48;
       proc_control_node_B.k_c++) {
    proc_control_node_B.subRows = (NColsRemain - proc_control_node_B.k_c) - 1;
    proc_control_node_B.LD_diagOffset_g = (proc_control_node_B.LDimSizeP1 *
      proc_control_node_B.k_c + LD_offset) - 1;
    proc_control_node_B.subBlockSize = 0;
    while (proc_control_node_B.subBlockSize <= proc_control_node_B.subRows) {
      obj->workspace_ = obj->FMat.data[proc_control_node_B.LD_diagOffset_g +
        proc_control_node_B.subBlockSize];
      proc_control_node_B.subBlockSize++;
    }

    proc_control_node_B.subBlockSize = 0;
    while (proc_control_node_B.subBlockSize <= NColsRemain - 1) {
      obj->workspace2_ = obj->workspace_;
      proc_control_node_B.subBlockSize++;
    }

    proc_control_node_B.subBlockSize = obj->ldm;
    proc_control_node_B.y_h = obj->workspace2_;
    if ((NColsRemain != 0) && (proc_control_node_B.k_c != 0)) {
      proc_control_node_B.ix_dw = LD_offset + proc_control_node_B.k_c;
      proc_control_node_B.FMat_offset = (proc_control_node_B.k_c - 1) * obj->ldm
        + 1;
      br = 1;
      while (((proc_control_node_B.subBlockSize > 0) && (br <=
               proc_control_node_B.FMat_offset)) ||
             ((proc_control_node_B.subBlockSize < 0) && (br >=
               proc_control_node_B.FMat_offset))) {
        proc_control_node_B.c_a1 = (br + NColsRemain) - 1;
        proc_control_node_B.ia_h = br;
        while (proc_control_node_B.ia_h <= proc_control_node_B.c_a1) {
          proc_control_node_B.y_h += -obj->FMat.data[proc_control_node_B.ix_dw -
            1] * obj->workspace_;
          proc_control_node_B.ia_h++;
        }

        proc_control_node_B.ix_dw += obj->ldm;
        br += proc_control_node_B.subBlockSize;
      }
    }

    obj->workspace2_ = proc_control_node_B.y_h;
    proc_control_node_B.subBlockSize = 0;
    while (proc_control_node_B.subBlockSize <= NColsRemain - 1) {
      obj->workspace_ = proc_control_node_B.y_h;
      proc_control_node_B.subBlockSize++;
    }

    proc_control_node_B.subBlockSize = 0;
    while (proc_control_node_B.subBlockSize <= proc_control_node_B.subRows) {
      obj->FMat.data[proc_control_node_B.LD_diagOffset_g +
        proc_control_node_B.subBlockSize] = obj->workspace_;
      proc_control_node_B.subBlockSize++;
    }

    proc_control_node_B.subBlockSize = 1;
    while (proc_control_node_B.subBlockSize - 1 <= proc_control_node_B.subRows -
           1) {
      proc_control_node_B.ix_dw = proc_control_node_B.LD_diagOffset_g +
        proc_control_node_B.subBlockSize;
      obj->FMat.data[proc_control_node_B.ix_dw] /= obj->
        FMat.data[proc_control_node_B.LD_diagOffset_g];
      proc_control_node_B.subBlockSize++;
    }
  }

  proc_control_node_B.k_c = 48;
  while (proc_control_node_B.k_c <= NColsRemain - 1) {
    proc_control_node_B.ix_dw = NColsRemain - proc_control_node_B.k_c;
    if (48 < proc_control_node_B.ix_dw) {
      proc_control_node_B.subBlockSize = 48;
    } else {
      proc_control_node_B.subBlockSize = proc_control_node_B.ix_dw;
    }

    proc_control_node_B.FMat_offset = proc_control_node_B.k_c +
      proc_control_node_B.subBlockSize;
    for (br = proc_control_node_B.k_c; br < proc_control_node_B.FMat_offset; br
         ++) {
      proc_control_node_B.subRows = proc_control_node_B.FMat_offset - br;
      proc_control_node_B.LD_diagOffset_g = (proc_control_node_B.LDimSizeP1 * br
        + LD_offset) - 1;
      for (proc_control_node_B.c_a1 = 0; proc_control_node_B.c_a1 < 48;
           proc_control_node_B.c_a1++) {
        obj->workspace2_ = obj->FMat.data[((LD_offset + br) +
          proc_control_node_B.c_a1 * obj->ldm) - 1];
      }

      proc_control_node_B.c_a1 = obj->ldm;
      if (proc_control_node_B.subRows != 0) {
        proc_control_node_B.ia_h = (obj->ldm * 47 + br) + 1;
        g = br + 1;
        while (((proc_control_node_B.c_a1 > 0) && (g <= proc_control_node_B.ia_h))
               || ((proc_control_node_B.c_a1 < 0) && (g >=
                 proc_control_node_B.ia_h))) {
          proc_control_node_B.iy_c = proc_control_node_B.LD_diagOffset_g;
          e = (g + proc_control_node_B.subRows) - 1;
          for (b_ia = g; b_ia <= e; b_ia++) {
            obj->FMat.data[proc_control_node_B.iy_c] += obj->workspace_ *
              -obj->workspace2_;
            proc_control_node_B.iy_c++;
          }

          g += proc_control_node_B.c_a1;
        }
      }
    }

    if (proc_control_node_B.FMat_offset < NColsRemain) {
      proc_control_node_B.subRows = proc_control_node_B.ix_dw -
        proc_control_node_B.subBlockSize;
      proc_control_node_B.LD_diagOffset_g = ((LD_offset +
        proc_control_node_B.subBlockSize) + proc_control_node_B.LDimSizeP1 *
        proc_control_node_B.k_c) - 1;
      for (proc_control_node_B.ix_dw = 0; proc_control_node_B.ix_dw < 48;
           proc_control_node_B.ix_dw++) {
        proc_control_node_B.FMat_offset = (LD_offset + proc_control_node_B.k_c)
          + proc_control_node_B.ix_dw * obj->ldm;
        for (br = 0; br < proc_control_node_B.subBlockSize; br++) {
          obj->workspace2_ = obj->FMat.data[(proc_control_node_B.FMat_offset +
            br) - 1];
        }
      }

      proc_control_node_B.ix_dw = obj->ldm;
      proc_control_node_B.FMat_offset = obj->ldm;
      if ((proc_control_node_B.subRows != 0) &&
          (proc_control_node_B.subBlockSize != 0)) {
        proc_control_node_B.subBlockSize = (proc_control_node_B.subBlockSize - 1)
          * obj->ldm + proc_control_node_B.LD_diagOffset_g;
        br = 0;
        while (((proc_control_node_B.FMat_offset > 0) &&
                (proc_control_node_B.LD_diagOffset_g <=
                 proc_control_node_B.subBlockSize)) ||
               ((proc_control_node_B.FMat_offset < 0) &&
                (proc_control_node_B.LD_diagOffset_g >=
                 proc_control_node_B.subBlockSize))) {
          br++;
          proc_control_node_B.c_a1 = proc_control_node_B.ix_dw * 47 + br;
          proc_control_node_B.ia_h = br;
          while (((proc_control_node_B.ix_dw > 0) && (proc_control_node_B.ia_h <=
                   proc_control_node_B.c_a1)) || ((proc_control_node_B.ix_dw < 0)
                  && (proc_control_node_B.ia_h >= proc_control_node_B.c_a1))) {
            g = proc_control_node_B.LD_diagOffset_g +
              proc_control_node_B.subRows;
            proc_control_node_B.iy_c = proc_control_node_B.LD_diagOffset_g;
            while (proc_control_node_B.iy_c + 1 <= g) {
              obj->FMat.data[proc_control_node_B.iy_c] += -obj->workspace2_ *
                obj->workspace_;
              proc_control_node_B.iy_c++;
            }

            proc_control_node_B.ia_h += proc_control_node_B.ix_dw;
          }

          proc_control_node_B.LD_diagOffset_g += proc_control_node_B.FMat_offset;
        }
      }
    }

    proc_control_node_B.k_c += 48;
  }
}

// Function for MATLAB Function: '<S94>/NLMPC'
static int32_T proc_control_node_xpotrf(int32_T n, real_T A_data[], int32_T lda)
{
  int32_T b_ix;
  int32_T b_iy;
  int32_T d;
  int32_T ia;
  int32_T info;
  boolean_T exitg1;
  info = 0;
  proc_control_node_B.b_j_jo = 0;
  exitg1 = false;
  while ((!exitg1) && (proc_control_node_B.b_j_jo <= n - 1)) {
    proc_control_node_B.idxA1j = proc_control_node_B.b_j_jo * lda;
    proc_control_node_B.idxAjj = proc_control_node_B.idxA1j +
      proc_control_node_B.b_j_jo;
    proc_control_node_B.ssq = 0.0;
    if (proc_control_node_B.b_j_jo >= 1) {
      b_ix = proc_control_node_B.idxA1j;
      b_iy = proc_control_node_B.idxA1j;
      proc_control_node_B.iy_n = 0;
      while (proc_control_node_B.iy_n <= proc_control_node_B.b_j_jo - 1) {
        proc_control_node_B.ssq += A_data[b_ix] * A_data[b_iy];
        b_ix++;
        b_iy++;
        proc_control_node_B.iy_n++;
      }
    }

    proc_control_node_B.ssq = A_data[proc_control_node_B.idxAjj] -
      proc_control_node_B.ssq;
    if (proc_control_node_B.ssq > 0.0) {
      proc_control_node_B.ssq = sqrt(proc_control_node_B.ssq);
      A_data[proc_control_node_B.idxAjj] = proc_control_node_B.ssq;
      if (proc_control_node_B.b_j_jo + 1 < n) {
        b_ix = (n - proc_control_node_B.b_j_jo) - 2;
        b_iy = (proc_control_node_B.idxA1j + lda) + 1;
        proc_control_node_B.idxAjj += lda;
        if ((proc_control_node_B.b_j_jo != 0) && (b_ix + 1 != 0)) {
          proc_control_node_B.iy_n = proc_control_node_B.idxAjj;
          proc_control_node_B.b_jc = lda * b_ix + b_iy;
          while (((lda > 0) && (b_iy <= proc_control_node_B.b_jc)) || ((lda < 0)
                  && (b_iy >= proc_control_node_B.b_jc))) {
            proc_control_node_B.ix_hj = proc_control_node_B.idxA1j;
            proc_control_node_B.c_k = 0.0;
            d = (b_iy + proc_control_node_B.b_j_jo) - 1;
            for (ia = b_iy; ia <= d; ia++) {
              proc_control_node_B.c_k += A_data[ia - 1] *
                A_data[proc_control_node_B.ix_hj];
              proc_control_node_B.ix_hj++;
            }

            A_data[proc_control_node_B.iy_n] += -proc_control_node_B.c_k;
            proc_control_node_B.iy_n += lda;
            b_iy += lda;
          }
        }

        proc_control_node_B.ssq = 1.0 / proc_control_node_B.ssq;
        proc_control_node_B.idxA1j = (lda * b_ix + proc_control_node_B.idxAjj) +
          1;
        b_ix = proc_control_node_B.idxAjj + 1;
        while (((lda > 0) && (b_ix <= proc_control_node_B.idxA1j)) || ((lda < 0)
                && (b_ix >= proc_control_node_B.idxA1j))) {
          A_data[b_ix - 1] *= proc_control_node_B.ssq;
          b_ix += lda;
        }
      }

      proc_control_node_B.b_j_jo++;
    } else {
      A_data[proc_control_node_B.idxAjj] = proc_control_node_B.ssq;
      info = proc_control_node_B.b_j_jo + 1;
      exitg1 = true;
    }
  }

  return info;
}

// Function for MATLAB Function: '<S94>/NLMPC'
static void proc_control_n_xgemv_jhgj1v0ny5(int32_T m, int32_T n, const real_T
  A_data[], int32_T ia0, int32_T lda, const real_T x_data[], real_T y_data[])
{
  int32_T b;
  int32_T c;
  int32_T ia;
  int32_T iac;
  int32_T ix;
  int32_T iy;
  if (m != 0) {
    for (ix = 0; ix < m; ix++) {
      y_data[ix] = 0.0;
    }

    ix = 0;
    b = (n - 1) * lda + ia0;
    iac = ia0;
    while (((lda > 0) && (iac <= b)) || ((lda < 0) && (iac >= b))) {
      iy = 0;
      c = (iac + m) - 1;
      for (ia = iac; ia <= c; ia++) {
        y_data[iy] += A_data[ia - 1] * x_data[ix];
        iy++;
      }

      ix++;
      iac += lda;
    }
  }
}

// Function for MATLAB Function: '<S94>/NLMPC'
static void proc_control_node_factor(s_B2KneB7ks2RV0bvoJc0bxC_proc_T *obj, const
  real_T A[4761], int32_T ndims, int32_T ldA)
{
  obj->ndims = ndims;
  proc_control_node_B.b_idx_e = 0;
  while (proc_control_node_B.b_idx_e <= ndims - 1) {
    proc_control_node_B.iA0_o = ldA * proc_control_node_B.b_idx_e;
    proc_control_node_B.iUU0 = obj->ldm * proc_control_node_B.b_idx_e;
    proc_control_node_B.b_m = 1;
    while (proc_control_node_B.b_m - 1 <= ndims - 1) {
      obj->FMat.data[(proc_control_node_B.iUU0 + proc_control_node_B.b_m) - 1] =
        A[(proc_control_node_B.iA0_o + proc_control_node_B.b_m) - 1];
      proc_control_node_B.b_m++;
    }

    proc_control_node_B.b_idx_e++;
  }

  proc_control_node_B.b_size_d[0] = obj->FMat.size[0];
  proc_control_node_B.b_size_d[1] = obj->FMat.size[1];
  proc_control_node_B.iA0_o = obj->FMat.size[0] * obj->FMat.size[1];
  if (0 <= proc_control_node_B.iA0_o - 1) {
    memcpy(&proc_control_node_B.b_data_k[0], &obj->FMat.data[0],
           proc_control_node_B.iA0_o * sizeof(real_T));
  }

  proc_control_node_B.iUU0 = proc_control_node_xpotrf(ndims,
    proc_control_node_B.b_data_k, obj->ldm);
  obj->FMat.size[0] = proc_control_node_B.b_size_d[0];
  obj->FMat.size[1] = proc_control_node_B.b_size_d[1];
  proc_control_node_B.iA0_o = proc_control_node_B.b_size_d[0] *
    proc_control_node_B.b_size_d[1];
  if (0 <= proc_control_node_B.iA0_o - 1) {
    memcpy(&obj->FMat.data[0], &proc_control_node_B.b_data_k[0],
           proc_control_node_B.iA0_o * sizeof(real_T));
  }

  obj->info = proc_control_node_B.iUU0;
}

// Function for MATLAB Function: '<S94>/NLMPC'
static void proc_control_node_solve(const s_B2KneB7ks2RV0bvoJc0bxC_proc_T *obj,
  real_T rhs_data[])
{
  real_T temp;
  int32_T b_j;
  int32_T c_i;
  int32_T ix;
  int32_T jjA;
  if (obj->ndims != 0) {
    for (b_j = 0; b_j < obj->ndims; b_j++) {
      jjA = b_j * obj->ldm;
      temp = rhs_data[b_j];
      for (c_i = 0; c_i < b_j; c_i++) {
        temp -= obj->FMat.data[jjA + c_i] * rhs_data[c_i];
      }

      rhs_data[b_j] = temp / obj->FMat.data[jjA + b_j];
    }

    for (b_j = obj->ndims - 1; b_j + 1 > 0; b_j--) {
      jjA = b_j * obj->ldm + b_j;
      rhs_data[b_j] /= obj->FMat.data[jjA];
      for (c_i = 1; c_i - 1 < b_j; c_i++) {
        ix = b_j - c_i;
        rhs_data[ix] -= obj->FMat.data[jjA - c_i] * rhs_data[b_j];
      }
    }
  }
}

// Function for MATLAB Function: '<S94>/NLMPC'
static void proc_control_node_factor_a(s_B2KneB7ks2RV0bvoJc0bxC_proc_T *obj,
  const real_T A[4761], int32_T ndims, int32_T ldA)
{
  int32_T exitg2;
  boolean_T exitg1;
  proc_control_node_B.LDimSizeP1_tmp_tmp = obj->ldm + 1;
  obj->ndims = ndims;
  proc_control_node_B.A_maxDiag_idx_c = 0;
  while (proc_control_node_B.A_maxDiag_idx_c <= ndims - 1) {
    proc_control_node_B.LD_diagOffset_b = ldA *
      proc_control_node_B.A_maxDiag_idx_c;
    proc_control_node_B.order_b = obj->ldm * proc_control_node_B.A_maxDiag_idx_c;
    proc_control_node_B.b_k_hh = 1;
    while (proc_control_node_B.b_k_hh - 1 <= ndims - 1) {
      obj->FMat.data[(proc_control_node_B.order_b + proc_control_node_B.b_k_hh)
        - 1] = A[(proc_control_node_B.LD_diagOffset_b +
                  proc_control_node_B.b_k_hh) - 1];
      proc_control_node_B.b_k_hh++;
    }

    proc_control_node_B.A_maxDiag_idx_c++;
  }

  proc_control_node_B.A_maxDiag_idx_c = proc_control_node_ixamax_l(ndims,
    obj->FMat.data, obj->ldm + 1) - 1;
  proc_control_node_B.u0 = fabs(obj->FMat.data[obj->ldm *
    proc_control_node_B.A_maxDiag_idx_c + proc_control_node_B.A_maxDiag_idx_c]) *
    2.2204460492503131E-16;
  if (proc_control_node_B.u0 > 0.0) {
    obj->regTol_ = proc_control_node_B.u0;
  } else {
    obj->regTol_ = 0.0;
  }

  if (ndims > 128) {
    proc_control_node_B.A_maxDiag_idx_c = 0;
    exitg1 = false;
    while ((!exitg1) && (proc_control_node_B.A_maxDiag_idx_c < ndims)) {
      proc_control_node_B.LD_diagOffset_b =
        proc_control_node_B.LDimSizeP1_tmp_tmp *
        proc_control_node_B.A_maxDiag_idx_c + 1;
      proc_control_node_B.order_b = ndims - proc_control_node_B.A_maxDiag_idx_c;
      if (proc_control_node_B.A_maxDiag_idx_c + 48 <= ndims) {
        proc_control_no_partialColLDL3_(obj, proc_control_node_B.LD_diagOffset_b,
          proc_control_node_B.order_b);
        proc_control_node_B.A_maxDiag_idx_c += 48;
      } else {
        proc_control_node_fullColLDL2_(obj, proc_control_node_B.LD_diagOffset_b,
          proc_control_node_B.order_b);
        exitg1 = true;
      }
    }
  } else {
    proc_control_node_fullColLDL2_(obj, 1, ndims);
  }

  if (obj->ConvexCheck) {
    proc_control_node_B.LDimSizeP1_tmp_tmp = 0;
    do {
      exitg2 = 0;
      if (proc_control_node_B.LDimSizeP1_tmp_tmp <= ndims - 1) {
        if (obj->FMat.data[obj->ldm * proc_control_node_B.LDimSizeP1_tmp_tmp +
            proc_control_node_B.LDimSizeP1_tmp_tmp] <= 0.0) {
          obj->info = -proc_control_node_B.LDimSizeP1_tmp_tmp - 1;
          exitg2 = 1;
        } else {
          proc_control_node_B.LDimSizeP1_tmp_tmp++;
        }
      } else {
        obj->ConvexCheck = false;
        exitg2 = 1;
      }
    } while (exitg2 == 0);
  }
}

// Function for MATLAB Function: '<S94>/NLMPC'
static void proc_control_node_solve_k(const s_B2KneB7ks2RV0bvoJc0bxC_proc_T *obj,
  real_T rhs_data[])
{
  int32_T b;
  int32_T i;
  int32_T j;
  int32_T n_tmp;
  n_tmp = obj->ndims - 1;
  if (obj->ndims != 0) {
    for (j = 0; j <= n_tmp; j++) {
      proc_control_node_B.jjA = j * obj->ldm + j;
      b = n_tmp - j;
      for (i = 1; i - 1 < b; i++) {
        proc_control_node_B.ix_kc = j + i;
        rhs_data[proc_control_node_B.ix_kc] -= obj->
          FMat.data[proc_control_node_B.jjA + i] * rhs_data[j];
      }
    }
  }

  for (j = 0; j <= n_tmp; j++) {
    rhs_data[j] /= obj->FMat.data[obj->ldm * j + j];
  }

  if (obj->ndims != 0) {
    for (n_tmp = obj->ndims - 1; n_tmp + 1 > 0; n_tmp--) {
      j = n_tmp * obj->ldm;
      proc_control_node_B.temp_ex = rhs_data[n_tmp];
      proc_control_node_B.jjA = obj->ndims;
      while (proc_control_node_B.jjA >= n_tmp + 2) {
        proc_control_node_B.temp_ex -= obj->FMat.data[(j +
          proc_control_node_B.jjA) - 1] * rhs_data[proc_control_node_B.jjA - 1];
        proc_control_node_B.jjA--;
      }

      rhs_data[n_tmp] = proc_control_node_B.temp_ex;
    }
  }
}

// Function for MATLAB Function: '<S94>/NLMPC'
static void proc_control_nod_compute_deltax(const real_T H[4761],
  s_YLC2gJhPBjEs8VvOTvcE4B_proc_T *solution, s_JXDNdI64oJvyHGrBwTBHI_proc__T
  *memspace, const s_1UhBFHxHKUXshhZtLgMUHE_proc_T *qrmanager,
  s_B2KneB7ks2RV0bvoJc0bxC_proc_T *cholmanager, const
  s_jPVC6k54fKlkrevS6u11qC_proc_T *objective, boolean_T alwaysPositiveDef)
{
  int32_T exitg2;
  boolean_T exitg1;
  proc_control_node_B.nVar_d = qrmanager->mrows - 1;
  proc_control_node_B.mNull_tmp = qrmanager->mrows - qrmanager->ncols;
  if (proc_control_node_B.mNull_tmp <= 0) {
    proc_control_node_B.mNull_tmp = 0;
    while (proc_control_node_B.mNull_tmp <= proc_control_node_B.nVar_d) {
      solution->searchDir.data[proc_control_node_B.mNull_tmp] = 0.0;
      proc_control_node_B.mNull_tmp++;
    }
  } else {
    proc_control_node_B.c_idx = 0;
    while (proc_control_node_B.c_idx <= proc_control_node_B.nVar_d) {
      solution->searchDir.data[proc_control_node_B.c_idx] =
        -objective->grad.data[proc_control_node_B.c_idx];
      proc_control_node_B.c_idx++;
    }

    if (qrmanager->ncols <= 0) {
      switch (objective->objtype) {
       case 5:
        break;

       case 3:
        if (alwaysPositiveDef) {
          proc_control_node_factor(cholmanager, H, qrmanager->mrows,
            qrmanager->mrows);
        } else {
          proc_control_node_factor_a(cholmanager, H, qrmanager->mrows,
            qrmanager->mrows);
        }

        if (cholmanager->info != 0) {
          solution->state = -6;
        } else if (alwaysPositiveDef) {
          proc_control_node_solve(cholmanager, solution->searchDir.data);
        } else {
          proc_control_node_solve_k(cholmanager, solution->searchDir.data);
        }
        break;

       default:
        if (alwaysPositiveDef) {
          proc_control_node_factor(cholmanager, H, objective->nvar,
            objective->nvar);
          if (cholmanager->info != 0) {
            solution->state = -6;
          } else {
            proc_control_node_solve(cholmanager, solution->searchDir.data);
            proc_control_node_B.b_c_f = 1.0 / objective->beta;
            proc_control_node_B.mNull_tmp = objective->nvar;
            while (proc_control_node_B.mNull_tmp + 1 <= qrmanager->mrows) {
              solution->searchDir.data[proc_control_node_B.mNull_tmp] *=
                proc_control_node_B.b_c_f;
              proc_control_node_B.mNull_tmp++;
            }
          }
        }
        break;
      }
    } else {
      proc_control_node_B.c_idx = qrmanager->ldq * qrmanager->ncols + 1;
      if (objective->objtype == 5) {
        proc_control_node_B.b_ldw = 0;
        while (proc_control_node_B.b_ldw <= proc_control_node_B.mNull_tmp - 1) {
          memspace->workspace_double.data[proc_control_node_B.b_ldw] =
            -qrmanager->Q.data[(qrmanager->ncols + proc_control_node_B.b_ldw) *
            qrmanager->ldq + proc_control_node_B.nVar_d];
          proc_control_node_B.b_ldw++;
        }

        proc_control_n_xgemv_jhgj1v0ny5(qrmanager->mrows,
          proc_control_node_B.mNull_tmp, qrmanager->Q.data,
          proc_control_node_B.c_idx, qrmanager->ldq,
          memspace->workspace_double.data, solution->searchDir.data);
      } else {
        if (objective->objtype == 3) {
          proc_control_node_B.b_ldw = memspace->workspace_double.size[0];
          proc_control_node_xgemm(qrmanager->mrows,
            proc_control_node_B.mNull_tmp, qrmanager->mrows, H, qrmanager->mrows,
            qrmanager->Q.data, proc_control_node_B.c_idx, qrmanager->ldq,
            memspace->workspace_double.data, memspace->workspace_double.size[0]);
          proc_control_node_xgemm_g(proc_control_node_B.mNull_tmp,
            proc_control_node_B.mNull_tmp, qrmanager->mrows, qrmanager->Q.data,
            proc_control_node_B.c_idx, qrmanager->ldq,
            memspace->workspace_double.data, proc_control_node_B.b_ldw,
            cholmanager->FMat.data, cholmanager->ldm);
        } else if (alwaysPositiveDef) {
          proc_control_node_B.b_ldw = memspace->workspace_double.size[0];
          proc_control_node_xgemm(objective->nvar, proc_control_node_B.mNull_tmp,
            objective->nvar, H, objective->nvar, qrmanager->Q.data,
            proc_control_node_B.c_idx, qrmanager->ldq,
            memspace->workspace_double.data, memspace->workspace_double.size[0]);
          proc_control_node_B.A_maxDiag_idx = 0;
          while (proc_control_node_B.A_maxDiag_idx <=
                 proc_control_node_B.mNull_tmp - 1) {
            proc_control_node_B.LD_diagOffset = objective->nvar;
            while (proc_control_node_B.LD_diagOffset + 1 <= qrmanager->mrows) {
              memspace->workspace_double.data[proc_control_node_B.LD_diagOffset
                + memspace->workspace_double.size[0] *
                proc_control_node_B.A_maxDiag_idx] = qrmanager->
                Q.data[proc_control_node_B.LD_diagOffset + qrmanager->Q.size[0] *
                (proc_control_node_B.A_maxDiag_idx + qrmanager->ncols)] *
                objective->beta;
              proc_control_node_B.LD_diagOffset++;
            }

            proc_control_node_B.A_maxDiag_idx++;
          }

          proc_control_node_xgemm_g(proc_control_node_B.mNull_tmp,
            proc_control_node_B.mNull_tmp, qrmanager->mrows, qrmanager->Q.data,
            proc_control_node_B.c_idx, qrmanager->ldq,
            memspace->workspace_double.data, proc_control_node_B.b_ldw,
            cholmanager->FMat.data, cholmanager->ldm);
        }

        if (alwaysPositiveDef) {
          cholmanager->ndims = proc_control_node_B.mNull_tmp;
          proc_control_node_B.b_size_h[0] = cholmanager->FMat.size[0];
          proc_control_node_B.b_size_h[1] = cholmanager->FMat.size[1];
          proc_control_node_B.A_maxDiag_idx = cholmanager->FMat.size[0] *
            cholmanager->FMat.size[1];
          if (0 <= proc_control_node_B.A_maxDiag_idx - 1) {
            memcpy(&proc_control_node_B.b_data_c[0], &cholmanager->FMat.data[0],
                   proc_control_node_B.A_maxDiag_idx * sizeof(real_T));
          }

          proc_control_node_B.LD_diagOffset = proc_control_node_xpotrf
            (proc_control_node_B.mNull_tmp, proc_control_node_B.b_data_c,
             cholmanager->ldm);
          cholmanager->FMat.size[0] = proc_control_node_B.b_size_h[0];
          cholmanager->FMat.size[1] = proc_control_node_B.b_size_h[1];
          proc_control_node_B.A_maxDiag_idx = proc_control_node_B.b_size_h[0] *
            proc_control_node_B.b_size_h[1];
          if (0 <= proc_control_node_B.A_maxDiag_idx - 1) {
            memcpy(&cholmanager->FMat.data[0], &proc_control_node_B.b_data_c[0],
                   proc_control_node_B.A_maxDiag_idx * sizeof(real_T));
          }

          cholmanager->info = proc_control_node_B.LD_diagOffset;
        } else {
          proc_control_node_B.b_ldw = cholmanager->ldm + 1;
          cholmanager->ndims = proc_control_node_B.mNull_tmp;
          proc_control_node_B.A_maxDiag_idx = proc_control_node_ixamax_l
            (proc_control_node_B.mNull_tmp, cholmanager->FMat.data,
             cholmanager->ldm + 1) - 1;
          proc_control_node_B.b_c_f = fabs(cholmanager->FMat.data
            [cholmanager->ldm * proc_control_node_B.A_maxDiag_idx +
            proc_control_node_B.A_maxDiag_idx]) * 2.2204460492503131E-16;
          if (proc_control_node_B.b_c_f > 0.0) {
            cholmanager->regTol_ = proc_control_node_B.b_c_f;
          } else {
            cholmanager->regTol_ = 0.0;
          }

          if (proc_control_node_B.mNull_tmp > 128) {
            proc_control_node_B.A_maxDiag_idx = 0;
            exitg1 = false;
            while ((!exitg1) && (proc_control_node_B.A_maxDiag_idx <
                                 proc_control_node_B.mNull_tmp)) {
              proc_control_node_B.LD_diagOffset = proc_control_node_B.b_ldw *
                proc_control_node_B.A_maxDiag_idx + 1;
              proc_control_node_B.order = proc_control_node_B.mNull_tmp -
                proc_control_node_B.A_maxDiag_idx;
              if (proc_control_node_B.A_maxDiag_idx + 48 <=
                  proc_control_node_B.mNull_tmp) {
                proc_control_no_partialColLDL3_(cholmanager,
                  proc_control_node_B.LD_diagOffset, proc_control_node_B.order);
                proc_control_node_B.A_maxDiag_idx += 48;
              } else {
                proc_control_node_fullColLDL2_(cholmanager,
                  proc_control_node_B.LD_diagOffset, proc_control_node_B.order);
                exitg1 = true;
              }
            }
          } else {
            proc_control_node_fullColLDL2_(cholmanager, 1,
              proc_control_node_B.mNull_tmp);
          }

          if (cholmanager->ConvexCheck) {
            proc_control_node_B.b_ldw = 0;
            do {
              exitg2 = 0;
              if (proc_control_node_B.b_ldw <= proc_control_node_B.mNull_tmp - 1)
              {
                if (cholmanager->FMat.data[cholmanager->ldm *
                    proc_control_node_B.b_ldw + proc_control_node_B.b_ldw] <=
                    0.0) {
                  cholmanager->info = -proc_control_node_B.b_ldw - 1;
                  exitg2 = 1;
                } else {
                  proc_control_node_B.b_ldw++;
                }
              } else {
                cholmanager->ConvexCheck = false;
                exitg2 = 1;
              }
            } while (exitg2 == 0);
          }
        }

        if (cholmanager->info != 0) {
          solution->state = -6;
        } else {
          proc_control_node_B.b_ldw = qrmanager->ldq;
          if (qrmanager->mrows != 0) {
            proc_control_node_B.A_maxDiag_idx = 0;
            while (proc_control_node_B.A_maxDiag_idx <=
                   proc_control_node_B.mNull_tmp - 1) {
              memspace->workspace_double.data[proc_control_node_B.A_maxDiag_idx]
                = 0.0;
              proc_control_node_B.A_maxDiag_idx++;
            }

            proc_control_node_B.A_maxDiag_idx = 0;
            proc_control_node_B.LD_diagOffset = (proc_control_node_B.mNull_tmp -
              1) * qrmanager->ldq + proc_control_node_B.c_idx;
            proc_control_node_B.order = proc_control_node_B.c_idx;
            while (((proc_control_node_B.b_ldw > 0) &&
                    (proc_control_node_B.order <=
                     proc_control_node_B.LD_diagOffset)) ||
                   ((proc_control_node_B.b_ldw < 0) &&
                    (proc_control_node_B.order >=
                     proc_control_node_B.LD_diagOffset))) {
              proc_control_node_B.ix_f = 0;
              proc_control_node_B.b_c_f = 0.0;
              proc_control_node_B.e_nq = proc_control_node_B.order +
                proc_control_node_B.nVar_d;
              proc_control_node_B.ia_d = proc_control_node_B.order;
              while (proc_control_node_B.ia_d <= proc_control_node_B.e_nq) {
                proc_control_node_B.b_c_f += qrmanager->
                  Q.data[proc_control_node_B.ia_d - 1] * objective->
                  grad.data[proc_control_node_B.ix_f];
                proc_control_node_B.ix_f++;
                proc_control_node_B.ia_d++;
              }

              memspace->workspace_double.data[proc_control_node_B.A_maxDiag_idx]
                += -proc_control_node_B.b_c_f;
              proc_control_node_B.A_maxDiag_idx++;
              proc_control_node_B.order += proc_control_node_B.b_ldw;
            }
          }

          if (alwaysPositiveDef) {
            proc_control_node_B.b_rhs_size[0] = memspace->workspace_double.size
              [0];
            proc_control_node_B.b_rhs_size[1] = memspace->workspace_double.size
              [1];
            proc_control_node_B.A_maxDiag_idx = memspace->workspace_double.size
              [0] * memspace->workspace_double.size[1];
            if (0 <= proc_control_node_B.A_maxDiag_idx - 1) {
              memcpy(&proc_control_node_B.b_rhs_data[0],
                     &memspace->workspace_double.data[0],
                     proc_control_node_B.A_maxDiag_idx * sizeof(real_T));
            }

            if (cholmanager->ndims != 0) {
              proc_control_node_B.nVar_d = 0;
              while (proc_control_node_B.nVar_d <= cholmanager->ndims - 1) {
                proc_control_node_B.b_ldw = proc_control_node_B.nVar_d *
                  cholmanager->ldm;
                proc_control_node_B.b_c_f =
                  proc_control_node_B.b_rhs_data[proc_control_node_B.nVar_d];
                proc_control_node_B.A_maxDiag_idx = 0;
                while (proc_control_node_B.A_maxDiag_idx <=
                       proc_control_node_B.nVar_d - 1) {
                  proc_control_node_B.b_c_f -= cholmanager->
                    FMat.data[proc_control_node_B.b_ldw +
                    proc_control_node_B.A_maxDiag_idx] *
                    proc_control_node_B.b_rhs_data[proc_control_node_B.A_maxDiag_idx];
                  proc_control_node_B.A_maxDiag_idx++;
                }

                proc_control_node_B.b_rhs_data[proc_control_node_B.nVar_d] =
                  proc_control_node_B.b_c_f / cholmanager->
                  FMat.data[proc_control_node_B.b_ldw +
                  proc_control_node_B.nVar_d];
                proc_control_node_B.nVar_d++;
              }
            }

            proc_control_node_xtrsv(cholmanager->ndims, cholmanager->FMat.data,
              cholmanager->ldm, proc_control_node_B.b_rhs_data);
          } else {
            proc_control_node_B.nVar_d = cholmanager->ndims - 1;
            proc_control_node_B.b_rhs_size[0] = memspace->workspace_double.size
              [0];
            proc_control_node_B.b_rhs_size[1] = memspace->workspace_double.size
              [1];
            proc_control_node_B.A_maxDiag_idx = memspace->workspace_double.size
              [0] * memspace->workspace_double.size[1];
            if (0 <= proc_control_node_B.A_maxDiag_idx - 1) {
              memcpy(&proc_control_node_B.b_rhs_data[0],
                     &memspace->workspace_double.data[0],
                     proc_control_node_B.A_maxDiag_idx * sizeof(real_T));
            }

            if (cholmanager->ndims != 0) {
              proc_control_node_B.b_ldw = 0;
              while (proc_control_node_B.b_ldw <= proc_control_node_B.nVar_d) {
                proc_control_node_B.A_maxDiag_idx = proc_control_node_B.b_ldw *
                  cholmanager->ldm + proc_control_node_B.b_ldw;
                proc_control_node_B.LD_diagOffset = proc_control_node_B.nVar_d -
                  proc_control_node_B.b_ldw;
                proc_control_node_B.order = 1;
                while (proc_control_node_B.order - 1 <=
                       proc_control_node_B.LD_diagOffset - 1) {
                  proc_control_node_B.ix_f = proc_control_node_B.b_ldw +
                    proc_control_node_B.order;
                  proc_control_node_B.b_rhs_data[proc_control_node_B.ix_f] -=
                    proc_control_node_B.b_rhs_data[proc_control_node_B.b_ldw] *
                    cholmanager->FMat.data[proc_control_node_B.A_maxDiag_idx +
                    proc_control_node_B.order];
                  proc_control_node_B.order++;
                }

                proc_control_node_B.b_ldw++;
              }
            }

            proc_control_node_B.b_ldw = 0;
            while (proc_control_node_B.b_ldw <= proc_control_node_B.nVar_d) {
              proc_control_node_B.b_rhs_data[proc_control_node_B.b_ldw] /=
                cholmanager->FMat.data[cholmanager->ldm *
                proc_control_node_B.b_ldw + proc_control_node_B.b_ldw];
              proc_control_node_B.b_ldw++;
            }

            if (cholmanager->ndims != 0) {
              proc_control_node_B.nVar_d = cholmanager->ndims - 1;
              while (proc_control_node_B.nVar_d + 1 > 0) {
                proc_control_node_B.b_ldw = proc_control_node_B.nVar_d *
                  cholmanager->ldm;
                proc_control_node_B.b_c_f =
                  proc_control_node_B.b_rhs_data[proc_control_node_B.nVar_d];
                proc_control_node_B.A_maxDiag_idx = cholmanager->ndims;
                while (proc_control_node_B.A_maxDiag_idx >=
                       proc_control_node_B.nVar_d + 2) {
                  proc_control_node_B.b_c_f -= cholmanager->FMat.data
                    [(proc_control_node_B.b_ldw +
                      proc_control_node_B.A_maxDiag_idx) - 1] *
                    proc_control_node_B.b_rhs_data[proc_control_node_B.A_maxDiag_idx
                    - 1];
                  proc_control_node_B.A_maxDiag_idx--;
                }

                proc_control_node_B.b_rhs_data[proc_control_node_B.nVar_d] =
                  proc_control_node_B.b_c_f;
                proc_control_node_B.nVar_d--;
              }
            }
          }

          memspace->workspace_double.size[0] = proc_control_node_B.b_rhs_size[0];
          memspace->workspace_double.size[1] = proc_control_node_B.b_rhs_size[1];
          proc_control_node_B.A_maxDiag_idx = proc_control_node_B.b_rhs_size[0] *
            proc_control_node_B.b_rhs_size[1];
          if (0 <= proc_control_node_B.A_maxDiag_idx - 1) {
            memcpy(&memspace->workspace_double.data[0],
                   &proc_control_node_B.b_rhs_data[0],
                   proc_control_node_B.A_maxDiag_idx * sizeof(real_T));
          }

          proc_control_n_xgemv_jhgj1v0ny5(qrmanager->mrows,
            proc_control_node_B.mNull_tmp, qrmanager->Q.data,
            proc_control_node_B.c_idx, qrmanager->ldq,
            proc_control_node_B.b_rhs_data, solution->searchDir.data);
        }
      }
    }
  }
}

// Function for MATLAB Function: '<S94>/NLMPC'
static real_T proc_control_node_xnrm2_n(int32_T n, const real_T x_data[])
{
  real_T t;
  real_T y;
  int32_T k;
  y = 0.0;
  if (n >= 1) {
    if (n == 1) {
      y = fabs(x_data[0]);
    } else {
      proc_control_node_B.scale_aa = 3.3121686421112381E-170;
      for (k = 0; k < n; k++) {
        proc_control_node_B.absxk_fj = fabs(x_data[k]);
        if (proc_control_node_B.absxk_fj > proc_control_node_B.scale_aa) {
          t = proc_control_node_B.scale_aa / proc_control_node_B.absxk_fj;
          y = y * t * t + 1.0;
          proc_control_node_B.scale_aa = proc_control_node_B.absxk_fj;
        } else {
          t = proc_control_node_B.absxk_fj / proc_control_node_B.scale_aa;
          y += t * t;
        }
      }

      y = proc_control_node_B.scale_aa * sqrt(y);
    }
  }

  return y;
}

// Function for MATLAB Function: '<S94>/NLMPC'
static void proc_control__xgemv_jhgj1v0ny5e(int32_T m, int32_T n, const real_T
  A_data[], int32_T lda, const real_T x_data[], real_T y_data[])
{
  int32_T b;
  int32_T b_c;
  int32_T ia;
  int32_T iac;
  if (n != 0) {
    proc_control_node_B.b_iy_l = 0;
    while (proc_control_node_B.b_iy_l <= n - 1) {
      y_data[proc_control_node_B.b_iy_l] = -y_data[proc_control_node_B.b_iy_l];
      proc_control_node_B.b_iy_l++;
    }

    proc_control_node_B.b_iy_l = 0;
    b_c = (n - 1) * lda + 1;
    iac = 1;
    while (((lda > 0) && (iac <= b_c)) || ((lda < 0) && (iac >= b_c))) {
      proc_control_node_B.ix_o = 0;
      proc_control_node_B.c_dq = 0.0;
      b = (iac + m) - 1;
      for (ia = iac; ia <= b; ia++) {
        proc_control_node_B.c_dq += A_data[ia - 1] *
          x_data[proc_control_node_B.ix_o];
        proc_control_node_B.ix_o++;
      }

      y_data[proc_control_node_B.b_iy_l] += proc_control_node_B.c_dq;
      proc_control_node_B.b_iy_l++;
      iac += lda;
    }
  }
}

// Function for MATLAB Function: '<S94>/NLMPC'
static void proc_control__feasibleratiotest(const real_T solution_xstar_data[],
  const real_T solution_searchDir_data[], real_T workspace_data[], const int32_T
  workspace_size[2], int32_T workingset_nVar, int32_T workingset_ldA, const
  real_T workingset_Aineq_data[], const real_T workingset_bineq_data[], const
  real_T workingset_lb_data[], const int32_T workingset_indexLB_data[], const
  int32_T workingset_sizes[5], const int32_T workingset_isActiveIdx[6], const
  boolean_T workingset_isActiveConstr_data[], const int32_T workingset_nWConstr
  [5], boolean_T isPhaseOne, real_T *alpha, boolean_T *newBlocking, int32_T
  *constrType, int32_T *constrIdx)
{
  proc_control_node_B.totalIneq = workingset_sizes[2] - 1;
  *alpha = 1.0E+30;
  *newBlocking = false;
  *constrType = 0;
  *constrIdx = 0;
  proc_control_node_B.denomTol = 2.2204460492503131E-13 *
    proc_control_node_xnrm2_n(workingset_nVar, solution_searchDir_data);
  if (workingset_nWConstr[2] < workingset_sizes[2]) {
    proc_control_node_B.ldw = 0;
    while (proc_control_node_B.ldw <= proc_control_node_B.totalIneq) {
      workspace_data[proc_control_node_B.ldw] =
        workingset_bineq_data[proc_control_node_B.ldw];
      proc_control_node_B.ldw++;
    }

    proc_control__xgemv_jhgj1v0ny5e(workingset_nVar, workingset_sizes[2],
      workingset_Aineq_data, workingset_ldA, solution_xstar_data, workspace_data);
    proc_control_node_B.ldw = workspace_size[0];
    if (workingset_sizes[2] != 0) {
      proc_control_node_B.iyend_j = workspace_size[0] + workingset_sizes[2];
      proc_control_node_B.b_iy_k = workspace_size[0];
      while (proc_control_node_B.b_iy_k + 1 <= proc_control_node_B.iyend_j) {
        workspace_data[proc_control_node_B.b_iy_k] = 0.0;
        proc_control_node_B.b_iy_k++;
      }

      proc_control_node_B.iyend_j = workspace_size[0];
      proc_control_node_B.b_iy_k = (workingset_sizes[2] - 1) * workingset_ldA +
        1;
      proc_control_node_B.iac_e = 1;
      while (((workingset_ldA > 0) && (proc_control_node_B.iac_e <=
               proc_control_node_B.b_iy_k)) || ((workingset_ldA < 0) &&
              (proc_control_node_B.iac_e >= proc_control_node_B.b_iy_k))) {
        proc_control_node_B.ix_hr = 0;
        proc_control_node_B.c_aj = 0.0;
        proc_control_node_B.b_gi = (proc_control_node_B.iac_e + workingset_nVar)
          - 1;
        proc_control_node_B.ia_c = proc_control_node_B.iac_e;
        while (proc_control_node_B.ia_c <= proc_control_node_B.b_gi) {
          proc_control_node_B.c_aj +=
            workingset_Aineq_data[proc_control_node_B.ia_c - 1] *
            solution_searchDir_data[proc_control_node_B.ix_hr];
          proc_control_node_B.ix_hr++;
          proc_control_node_B.ia_c++;
        }

        workspace_data[proc_control_node_B.iyend_j] += proc_control_node_B.c_aj;
        proc_control_node_B.iyend_j++;
        proc_control_node_B.iac_e += workingset_ldA;
      }
    }

    proc_control_node_B.iyend_j = 0;
    while (proc_control_node_B.iyend_j <= proc_control_node_B.totalIneq) {
      proc_control_node_B.b_iy_k = proc_control_node_B.ldw +
        proc_control_node_B.iyend_j;
      if ((workspace_data[proc_control_node_B.b_iy_k] >
           proc_control_node_B.denomTol) && (!workingset_isActiveConstr_data
           [(workingset_isActiveIdx[2] + proc_control_node_B.iyend_j) - 1])) {
        proc_control_node_B.c_aj = fabs
          (workspace_data[proc_control_node_B.iyend_j]);
        proc_control_node_B.phaseOneCorrectionX = 0.02 -
          workspace_data[proc_control_node_B.iyend_j];
        if ((proc_control_node_B.c_aj < proc_control_node_B.phaseOneCorrectionX)
            || rtIsNaN(proc_control_node_B.phaseOneCorrectionX)) {
          proc_control_node_B.phaseOneCorrectionX = proc_control_node_B.c_aj;
        }

        proc_control_node_B.c_aj = proc_control_node_B.phaseOneCorrectionX /
          workspace_data[proc_control_node_B.b_iy_k];
        if (proc_control_node_B.c_aj < *alpha) {
          *alpha = proc_control_node_B.c_aj;
          *constrType = 3;
          *constrIdx = proc_control_node_B.iyend_j + 1;
          *newBlocking = true;
        }
      }

      proc_control_node_B.iyend_j++;
    }
  }

  if (workingset_nWConstr[3] < workingset_sizes[3]) {
    proc_control_node_B.phaseOneCorrectionX =
      solution_xstar_data[workingset_nVar - 1] * static_cast<real_T>(isPhaseOne);
    proc_control_node_B.phaseOneCorrectionP =
      solution_searchDir_data[workingset_nVar - 1] * static_cast<real_T>
      (isPhaseOne);
    proc_control_node_B.totalIneq = 0;
    while (proc_control_node_B.totalIneq <= workingset_sizes[3] - 2) {
      proc_control_node_B.pk_corrected =
        -solution_searchDir_data[workingset_indexLB_data[proc_control_node_B.totalIneq]
        - 1] - proc_control_node_B.phaseOneCorrectionP;
      if ((proc_control_node_B.pk_corrected > proc_control_node_B.denomTol) && (
           !workingset_isActiveConstr_data[(workingset_isActiveIdx[3] +
            proc_control_node_B.totalIneq) - 1])) {
        proc_control_node_B.ratio_o =
          (-solution_xstar_data[workingset_indexLB_data[proc_control_node_B.totalIneq]
           - 1] -
           workingset_lb_data[workingset_indexLB_data[proc_control_node_B.totalIneq]
           - 1]) - proc_control_node_B.phaseOneCorrectionX;
        proc_control_node_B.c_aj = fabs(proc_control_node_B.ratio_o);
        if ((!(proc_control_node_B.c_aj < 0.02 - proc_control_node_B.ratio_o)) &&
            (!rtIsNaN(0.02 - proc_control_node_B.ratio_o))) {
          proc_control_node_B.c_aj = 0.02 - proc_control_node_B.ratio_o;
        }

        proc_control_node_B.c_aj /= proc_control_node_B.pk_corrected;
        if (proc_control_node_B.c_aj < *alpha) {
          *alpha = proc_control_node_B.c_aj;
          *constrType = 4;
          *constrIdx = proc_control_node_B.totalIneq + 1;
          *newBlocking = true;
        }
      }

      proc_control_node_B.totalIneq++;
    }

    proc_control_node_B.b_iy_k = workingset_indexLB_data[workingset_sizes[3] - 1]
      - 1;
    proc_control_node_B.phaseOneCorrectionX =
      -solution_searchDir_data[proc_control_node_B.b_iy_k];
    if ((proc_control_node_B.phaseOneCorrectionX > proc_control_node_B.denomTol)
        && (!workingset_isActiveConstr_data[(workingset_isActiveIdx[3] +
          workingset_sizes[3]) - 2])) {
      proc_control_node_B.ratio_o =
        -solution_xstar_data[proc_control_node_B.b_iy_k] -
        workingset_lb_data[proc_control_node_B.b_iy_k];
      proc_control_node_B.c_aj = fabs(proc_control_node_B.ratio_o);
      if ((!(proc_control_node_B.c_aj < 0.02 - proc_control_node_B.ratio_o)) &&
          (!rtIsNaN(0.02 - proc_control_node_B.ratio_o))) {
        proc_control_node_B.c_aj = 0.02 - proc_control_node_B.ratio_o;
      }

      proc_control_node_B.c_aj /= proc_control_node_B.phaseOneCorrectionX;
      if (proc_control_node_B.c_aj < *alpha) {
        *alpha = proc_control_node_B.c_aj;
        *constrType = 4;
        *constrIdx = workingset_sizes[3];
        *newBlocking = true;
      }
    }
  }

  if (!isPhaseOne) {
    *newBlocking = (((!*newBlocking) || (!(*alpha > 1.0))) && (*newBlocking));
    if (!(*alpha < 1.0)) {
      *alpha = 1.0;
    }
  }
}

// Function for MATLAB Function: '<S94>/NLMPC'
static void proc_c_checkUnboundedOrIllPosed(s_YLC2gJhPBjEs8VvOTvcE4B_proc_T
  *solution, const s_jPVC6k54fKlkrevS6u11qC_proc_T *objective)
{
  if (objective->objtype == 5) {
    if (proc_control_node_xnrm2_n(objective->nvar, solution->searchDir.data) >
        100.0 * static_cast<real_T>(objective->nvar) * 1.4901161193847656E-8) {
      solution->state = 3;
    } else {
      solution->state = 4;
    }
  }
}

// Function for MATLAB Function: '<S94>/NLMPC'
static void proc_addBoundToActiveSetMatrix_(s_MFLHEgKtV7gODWBOEr7maD_proc_T *obj,
  int32_T TYPE, int32_T idx_local)
{
  int32_T colOffset;
  int32_T idx;
  int32_T idx_bnd_local;
  obj->nWConstr[TYPE - 1]++;
  obj->isActiveConstr.data[(obj->isActiveIdx[TYPE - 1] + idx_local) - 2] = true;
  obj->nActiveConstr++;
  obj->Wid.data[obj->nActiveConstr - 1] = TYPE;
  obj->Wlocalidx.data[obj->nActiveConstr - 1] = idx_local;
  colOffset = (obj->nActiveConstr - 1) * obj->ldA - 1;
  if (TYPE == 5) {
    idx_bnd_local = obj->indexUB.data[idx_local - 1];
    obj->bwset.data[obj->nActiveConstr - 1] = obj->ub.data[idx_bnd_local - 1];
  } else {
    idx_bnd_local = obj->indexLB.data[idx_local - 1];
    obj->bwset.data[obj->nActiveConstr - 1] = obj->lb.data[idx_bnd_local - 1];
  }

  for (idx = 0; idx <= idx_bnd_local - 2; idx++) {
    obj->ATwset.data[(idx + colOffset) + 1] = 0.0;
  }

  obj->ATwset.data[idx_bnd_local + colOffset] = static_cast<real_T>(TYPE == 5) *
    2.0 - 1.0;
  for (idx_bnd_local++; idx_bnd_local <= obj->nVar; idx_bnd_local++) {
    obj->ATwset.data[idx_bnd_local + colOffset] = 0.0;
  }

  switch (obj->probType) {
   case 3:
   case 2:
    break;

   default:
    obj->ATwset.data[obj->nVar + colOffset] = -1.0;
    break;
  }
}

// Function for MATLAB Function: '<S94>/NLMPC'
static void proc_control_nod_addAineqConstr(s_MFLHEgKtV7gODWBOEr7maD_proc_T *obj,
  int32_T idx_local)
{
  int32_T iAineq0;
  int32_T iAw0;
  int32_T idx;
  obj->nWConstr[2]++;
  obj->isActiveConstr.data[(obj->isActiveIdx[2] + idx_local) - 2] = true;
  obj->nActiveConstr++;
  obj->Wid.data[obj->nActiveConstr - 1] = 3;
  obj->Wlocalidx.data[obj->nActiveConstr - 1] = idx_local;
  iAineq0 = (idx_local - 1) * obj->ldA;
  iAw0 = (obj->nActiveConstr - 1) * obj->ldA;
  for (idx = 0; idx < obj->nVar; idx++) {
    obj->ATwset.data[iAw0 + idx] = obj->Aineq.data[iAineq0 + idx];
  }

  obj->bwset.data[obj->nActiveConstr - 1] = obj->bineq.data[idx_local - 1];
}

// Function for MATLAB Function: '<S94>/NLMPC'
static void proc_checkStoppingAndUpdateFval(int32_T *activeSetChangeID, const
  real_T f_data[], s_YLC2gJhPBjEs8VvOTvcE4B_proc_T *solution,
  s_JXDNdI64oJvyHGrBwTBHI_proc__T *memspace, const
  s_jPVC6k54fKlkrevS6u11qC_proc_T *objective, s_MFLHEgKtV7gODWBOEr7maD_proc_T
  *workingset, s_1UhBFHxHKUXshhZtLgMUHE_proc_T *qrmanager, real_T
  options_ObjectiveLimit, int32_T runTimeOptions_MaxIterations, boolean_T
  updateFval)
{
  boolean_T nonDegenerateWset;
  solution->iterations++;
  proc_control_node_B.nVar_nl = objective->nvar - 1;
  if ((solution->iterations >= runTimeOptions_MaxIterations) &&
      ((solution->state != 1) || (objective->objtype == 5))) {
    solution->state = 0;
  }

  if (solution->iterations - div_nzp_s32(solution->iterations, 50) * 50 == 0) {
    proc_control_node_B.b_po = proc__maxConstraintViolation_ae(workingset,
      solution->xstar.data);
    solution->maxConstr = proc_control_node_B.b_po;
    if (proc_control_node_B.b_po > 0.02) {
      proc_control_node_B.y_size_idx_0_e = solution->searchDir.size;
      proc_control_node_B.loop_ub_ev = solution->searchDir.size;
      if (0 <= proc_control_node_B.loop_ub_ev - 1) {
        memcpy(&proc_control_node_B.y_data_iz[0], &solution->searchDir.data[0],
               proc_control_node_B.loop_ub_ev * sizeof(real_T));
      }

      proc_control_node_B.b_k_ic = 0;
      while (proc_control_node_B.b_k_ic <= proc_control_node_B.nVar_nl) {
        proc_control_node_B.y_data_iz[proc_control_node_B.b_k_ic] =
          solution->xstar.data[proc_control_node_B.b_k_ic];
        proc_control_node_B.b_k_ic++;
      }

      if (0 <= proc_control_node_B.y_size_idx_0_e - 1) {
        memcpy(&solution->searchDir.data[0], &proc_control_node_B.y_data_iz[0],
               proc_control_node_B.y_size_idx_0_e * sizeof(real_T));
      }

      proc_control_node_B.loop_ub_ev = memspace->workspace_double.size[0] *
        memspace->workspace_double.size[1];
      for (proc_control_node_B.b_k_ic = 0; proc_control_node_B.b_k_ic <
           proc_control_node_B.loop_ub_ev; proc_control_node_B.b_k_ic++) {
      }

      nonDegenerateWset = proc_co_feasibleX0ForWorkingSet
        (memspace->workspace_double.data, memspace->workspace_double.size,
         solution->searchDir.data, workingset, qrmanager);
      if ((!nonDegenerateWset) && (solution->state != 0)) {
        solution->state = -2;
      }

      *activeSetChangeID = 0;
      proc_control_node_B.constrViolation_new = proc__maxConstraintViolation_ae
        (workingset, solution->searchDir.data);
      if (proc_control_node_B.constrViolation_new < proc_control_node_B.b_po) {
        proc_control_node_B.b_k_ic = 0;
        while (proc_control_node_B.b_k_ic <= proc_control_node_B.nVar_nl) {
          solution->xstar.data[proc_control_node_B.b_k_ic] =
            solution->searchDir.data[proc_control_node_B.b_k_ic];
          proc_control_node_B.b_k_ic++;
        }

        solution->maxConstr = proc_control_node_B.constrViolation_new;
      }
    }
  }

  if ((options_ObjectiveLimit > (rtMinusInf)) && updateFval) {
    proc_control_node_B.loop_ub_ev = memspace->workspace_double.size[0] *
      memspace->workspace_double.size[1];
    for (proc_control_node_B.b_k_ic = 0; proc_control_node_B.b_k_ic <
         proc_control_node_B.loop_ub_ev; proc_control_node_B.b_k_ic++) {
    }

    proc_control_node_B.b_po = proc_contro_computeFval_ReuseHx(objective,
      memspace->workspace_double.data, f_data, solution->xstar.data);
    solution->fstar = proc_control_node_B.b_po;
    if ((proc_control_node_B.b_po < options_ObjectiveLimit) && ((solution->state
          != 0) || (objective->objtype != 5))) {
      solution->state = 2;
    }
  }
}

// Function for MATLAB Function: '<S94>/NLMPC'
static void proc_control_node_iterate(const real_T H[4761], const real_T f_data[],
  s_YLC2gJhPBjEs8VvOTvcE4B_proc_T *solution, s_JXDNdI64oJvyHGrBwTBHI_proc__T
  *memspace, s_MFLHEgKtV7gODWBOEr7maD_proc_T *workingset,
  s_1UhBFHxHKUXshhZtLgMUHE_proc_T *qrmanager, s_B2KneB7ks2RV0bvoJc0bxC_proc_T
  *cholmanager, s_jPVC6k54fKlkrevS6u11qC_proc_T *objective, const char_T
  options_SolverName[7], real_T options_StepTolerance, real_T
  options_ObjectiveLimit, int32_T runTimeOptions_MaxIterations)
{
  int32_T exitg1;
  boolean_T guard1 = false;
  boolean_T guard11 = false;
  boolean_T subProblemChanged;
  boolean_T updateFval;
  subProblemChanged = true;
  updateFval = true;
  proc_control_node_B.activeSetChangeID = 0;
  proc_control_node_B.TYPE = objective->objtype;
  proc_control_node_B.nVar_a = workingset->nVar;
  proc_control_node_B.globalActiveConstrIdx = 0;
  proc_contro_computeGrad_StoreHx(objective, H, f_data, solution->xstar.data);
  proc_control_node_B.iQR0 = memspace->workspace_double.size[0] *
    memspace->workspace_double.size[1];
  for (proc_control_node_B.workingIdx = 0; proc_control_node_B.workingIdx <
       proc_control_node_B.iQR0; proc_control_node_B.workingIdx++) {
  }

  solution->fstar = proc_contro_computeFval_ReuseHx(objective,
    memspace->workspace_double.data, f_data, solution->xstar.data);
  if (solution->iterations < runTimeOptions_MaxIterations) {
    solution->state = -5;
  } else {
    solution->state = 0;
  }

  proc_control_node_B.workingIdx = 0;
  while (proc_control_node_B.workingIdx <= workingset->mConstrMax - 1) {
    solution->lambda.data[proc_control_node_B.workingIdx] = 0.0;
    proc_control_node_B.workingIdx++;
  }

  do {
    exitg1 = 0;
    if (solution->state == -5) {
      guard11 = false;
      if (subProblemChanged) {
        switch (proc_control_node_B.activeSetChangeID) {
         case 1:
          proc_control_node_B.workingIdx = (workingset->nActiveConstr - 1) *
            workingset->ldA;
          if (qrmanager->mrows < qrmanager->ncols + 1) {
            qrmanager->minRowCol = qrmanager->mrows;
          } else {
            qrmanager->minRowCol = qrmanager->ncols + 1;
          }

          proc_control_node_B.iQR0 = qrmanager->ldq * qrmanager->ncols;
          proc_control_node_B.iy_k = qrmanager->ldq;
          if (qrmanager->mrows != 0) {
            proc_control_node_B.iyend = proc_control_node_B.iQR0 +
              qrmanager->mrows;
            proc_control_node_B.c_iy = proc_control_node_B.iQR0;
            while (proc_control_node_B.c_iy + 1 <= proc_control_node_B.iyend) {
              qrmanager->QR.data[proc_control_node_B.c_iy] = 0.0;
              proc_control_node_B.c_iy++;
            }

            proc_control_node_B.iyend = (qrmanager->mrows - 1) * qrmanager->ldq
              + 1;
            proc_control_node_B.c_iy = 1;
            while (((proc_control_node_B.iy_k > 0) && (proc_control_node_B.c_iy <=
                     proc_control_node_B.iyend)) || ((proc_control_node_B.iy_k <
                     0) && (proc_control_node_B.c_iy >=
                            proc_control_node_B.iyend))) {
              proc_control_node_B.b_ix = proc_control_node_B.workingIdx;
              proc_control_node_B.normDelta = 0.0;
              proc_control_node_B.j_mi = (proc_control_node_B.c_iy +
                qrmanager->mrows) - 1;
              proc_control_node_B.ia_gp = proc_control_node_B.c_iy;
              while (proc_control_node_B.ia_gp <= proc_control_node_B.j_mi) {
                proc_control_node_B.normDelta += qrmanager->
                  Q.data[proc_control_node_B.ia_gp - 1] *
                  workingset->ATwset.data[proc_control_node_B.b_ix];
                proc_control_node_B.b_ix++;
                proc_control_node_B.ia_gp++;
              }

              qrmanager->QR.data[proc_control_node_B.iQR0] +=
                proc_control_node_B.normDelta;
              proc_control_node_B.iQR0++;
              proc_control_node_B.c_iy += proc_control_node_B.iy_k;
            }
          }

          qrmanager->ncols++;
          qrmanager->jpvt.data[qrmanager->ncols - 1] = qrmanager->ncols;
          proc_control_node_B.workingIdx = qrmanager->mrows - 2;
          while (proc_control_node_B.workingIdx + 2 > qrmanager->ncols) {
            proc_control_node_B.iQR0 = proc_control_node_B.workingIdx +
              (qrmanager->ncols - 1) * qrmanager->ldq;
            proc_control_node_B.temp_g = qrmanager->
              QR.data[proc_control_node_B.iQR0];
            proc_control_node_B.i_b = qrmanager->
              QR.data[proc_control_node_B.iQR0 + 1];
            proc_control_node_xrotg(&proc_control_node_B.temp_g,
              &proc_control_node_B.i_b, &proc_control_node_B.normDelta,
              &proc_control_node_B.s_it);
            qrmanager->QR.data[proc_control_node_B.iQR0] =
              proc_control_node_B.temp_g;
            qrmanager->QR.data[proc_control_node_B.iQR0 + 1] =
              proc_control_node_B.i_b;
            proc_control_node_B.iQR0 = qrmanager->ldq *
              proc_control_node_B.workingIdx;
            if (qrmanager->mrows >= 1) {
              proc_control_node_B.iy_k = qrmanager->ldq +
                proc_control_node_B.iQR0;
              proc_control_node_B.iyend = 0;
              while (proc_control_node_B.iyend <= qrmanager->mrows - 1) {
                proc_control_node_B.temp_g = qrmanager->
                  Q.data[proc_control_node_B.iQR0] *
                  proc_control_node_B.normDelta + qrmanager->
                  Q.data[proc_control_node_B.iy_k] * proc_control_node_B.s_it;
                qrmanager->Q.data[proc_control_node_B.iy_k] = qrmanager->
                  Q.data[proc_control_node_B.iy_k] *
                  proc_control_node_B.normDelta - qrmanager->
                  Q.data[proc_control_node_B.iQR0] * proc_control_node_B.s_it;
                qrmanager->Q.data[proc_control_node_B.iQR0] =
                  proc_control_node_B.temp_g;
                proc_control_node_B.iy_k++;
                proc_control_node_B.iQR0++;
                proc_control_node_B.iyend++;
              }
            }

            proc_control_node_B.workingIdx--;
          }
          break;

         case -1:
          proc_control_n_deleteColMoveEnd(qrmanager,
            proc_control_node_B.globalActiveConstrIdx);
          break;

         default:
          proc_control_node_factorQR_i(qrmanager, workingset->ATwset.data,
            proc_control_node_B.nVar_a, workingset->nActiveConstr,
            workingset->ldA);
          proc_control_node_computeQ_(qrmanager, qrmanager->mrows);
          break;
        }

        proc_control_nod_compute_deltax(H, solution, memspace, qrmanager,
          cholmanager, objective, proc_control_node_strcmp(options_SolverName));
        if (solution->state != -5) {
          exitg1 = 1;
        } else {
          proc_control_node_B.normDelta = proc_control_node_xnrm2_n
            (proc_control_node_B.nVar_a, solution->searchDir.data);
          guard11 = true;
        }
      } else {
        proc_control_node_B.iy_k = solution->searchDir.size;
        proc_control_node_B.iQR0 = solution->searchDir.size;
        if (0 <= proc_control_node_B.iQR0 - 1) {
          memcpy(&proc_control_node_B.y_data_f[0], &solution->searchDir.data[0],
                 proc_control_node_B.iQR0 * sizeof(real_T));
        }

        proc_control_node_B.workingIdx = 0;
        while (proc_control_node_B.workingIdx <= proc_control_node_B.nVar_a - 1)
        {
          proc_control_node_B.y_data_f[proc_control_node_B.workingIdx] = 0.0;
          proc_control_node_B.workingIdx++;
        }

        if (0 <= proc_control_node_B.iy_k - 1) {
          memcpy(&solution->searchDir.data[0], &proc_control_node_B.y_data_f[0],
                 proc_control_node_B.iy_k * sizeof(real_T));
        }

        proc_control_node_B.normDelta = 0.0;
        guard11 = true;
      }

      if (guard11) {
        if ((!subProblemChanged) || (proc_control_node_B.normDelta <
             options_StepTolerance) || (workingset->nActiveConstr >=
             proc_control_node_B.nVar_a)) {
          proc_control_node_B.c_size_h[0] = memspace->workspace_double.size[0];
          proc_control_node_B.c_size_h[1] = memspace->workspace_double.size[1];
          proc_control_node_B.iQR0 = memspace->workspace_double.size[0] *
            memspace->workspace_double.size[1];
          if (0 <= proc_control_node_B.iQR0 - 1) {
            memcpy(&proc_control_node_B.c_data[0],
                   &memspace->workspace_double.data[0], proc_control_node_B.iQR0
                   * sizeof(real_T));
          }

          if (qrmanager->ncols > 0) {
            proc_control_node_B.normDelta = 100.0 * static_cast<real_T>
              (qrmanager->mrows) * 2.2204460492503131E-16;
            updateFval = ((qrmanager->mrows > 0) && (qrmanager->ncols > 0));
            if (updateFval) {
              proc_control_node_B.workingIdx = qrmanager->ncols;
              guard1 = false;
              if (qrmanager->mrows < qrmanager->ncols) {
                proc_control_node_B.iQR0 = (qrmanager->ncols - 1) *
                  qrmanager->ldq + qrmanager->mrows;
                while ((proc_control_node_B.workingIdx > qrmanager->mrows) &&
                       (fabs(qrmanager->QR.data[proc_control_node_B.iQR0 - 1]) >=
                        proc_control_node_B.normDelta)) {
                  proc_control_node_B.workingIdx--;
                  proc_control_node_B.iQR0 -= qrmanager->ldq;
                }

                updateFval = (proc_control_node_B.workingIdx == qrmanager->mrows);
                if (!updateFval) {
                } else {
                  guard1 = true;
                }
              } else {
                guard1 = true;
              }

              if (guard1) {
                proc_control_node_B.iQR0 = (proc_control_node_B.workingIdx - 1) *
                  qrmanager->ldq + proc_control_node_B.workingIdx;
                while ((proc_control_node_B.workingIdx >= 1) && (fabs
                        (qrmanager->QR.data[proc_control_node_B.iQR0 - 1]) >=
                        proc_control_node_B.normDelta)) {
                  proc_control_node_B.workingIdx--;
                  proc_control_node_B.iQR0 = (proc_control_node_B.iQR0 -
                    qrmanager->ldq) - 1;
                }

                updateFval = (proc_control_node_B.workingIdx == 0);
              }
            }

            if (!updateFval) {
              solution->state = -7;
            } else {
              proc_control_node_B.c_size_h[0] = memspace->workspace_double.size
                [0];
              proc_control_node_B.c_size_h[1] = memspace->workspace_double.size
                [1];
              proc_control_node_B.iQR0 = memspace->workspace_double.size[0] *
                memspace->workspace_double.size[1];
              if (0 <= proc_control_node_B.iQR0 - 1) {
                memcpy(&proc_control_node_B.c_data[0],
                       &memspace->workspace_double.data[0],
                       proc_control_node_B.iQR0 * sizeof(real_T));
              }

              proc_control_node_xgemv_jhg(qrmanager->mrows, qrmanager->ncols,
                qrmanager->Q.data, qrmanager->ldq, objective->grad.data,
                proc_control_node_B.c_data);
              proc_control_node_xtrsv(qrmanager->ncols, qrmanager->QR.data,
                qrmanager->ldq, proc_control_node_B.c_data);
              proc_control_node_B.workingIdx = 0;
              while (proc_control_node_B.workingIdx <= qrmanager->ncols - 1) {
                solution->lambda.data[proc_control_node_B.workingIdx] =
                  -proc_control_node_B.c_data[proc_control_node_B.workingIdx];
                proc_control_node_B.workingIdx++;
              }
            }
          }

          memspace->workspace_double.size[0] = proc_control_node_B.c_size_h[0];
          memspace->workspace_double.size[1] = proc_control_node_B.c_size_h[1];
          proc_control_node_B.iQR0 = proc_control_node_B.c_size_h[0] *
            proc_control_node_B.c_size_h[1];
          if (0 <= proc_control_node_B.iQR0 - 1) {
            memcpy(&memspace->workspace_double.data[0],
                   &proc_control_node_B.c_data[0], proc_control_node_B.iQR0 *
                   sizeof(real_T));
          }

          if ((solution->state != -7) || (workingset->nActiveConstr >
               proc_control_node_B.nVar_a)) {
            proc_control_node_B.workingIdx = 0;
            proc_control_node_B.normDelta = 0.0;
            proc_control_node_B.iQR0 = workingset->nWConstr[0] +
              workingset->nWConstr[1];
            while (proc_control_node_B.iQR0 + 1 <= workingset->nActiveConstr) {
              if (solution->lambda.data[proc_control_node_B.iQR0] <
                  proc_control_node_B.normDelta) {
                proc_control_node_B.normDelta = solution->
                  lambda.data[proc_control_node_B.iQR0];
                proc_control_node_B.workingIdx = proc_control_node_B.iQR0 + 1;
              }

              proc_control_node_B.iQR0++;
            }

            if (proc_control_node_B.workingIdx == 0) {
              solution->state = 1;
            } else {
              proc_control_node_B.activeSetChangeID = -1;
              proc_control_node_B.globalActiveConstrIdx =
                proc_control_node_B.workingIdx;
              subProblemChanged = true;
              proc_control_node_removeConstr(workingset,
                proc_control_node_B.workingIdx);
              solution->lambda.data[proc_control_node_B.workingIdx - 1] = 0.0;
            }
          } else {
            proc_control_node_B.workingIdx = workingset->nActiveConstr;
            proc_control_node_B.activeSetChangeID = 0;
            proc_control_node_B.globalActiveConstrIdx =
              workingset->nActiveConstr;
            subProblemChanged = true;
            proc_control_node_removeConstr(workingset, workingset->nActiveConstr);
            solution->lambda.data[proc_control_node_B.workingIdx - 1] = 0.0;
          }

          updateFval = false;
        } else {
          proc_control_node_B.iQR0 = memspace->workspace_double.size[0] *
            memspace->workspace_double.size[1];
          for (proc_control_node_B.workingIdx = 0;
               proc_control_node_B.workingIdx < proc_control_node_B.iQR0;
               proc_control_node_B.workingIdx++) {
          }

          proc_control__feasibleratiotest(solution->xstar.data,
            solution->searchDir.data, memspace->workspace_double.data,
            memspace->workspace_double.size, workingset->nVar, workingset->ldA,
            workingset->Aineq.data, workingset->bineq.data, workingset->lb.data,
            workingset->indexLB.data, workingset->sizes, workingset->isActiveIdx,
            workingset->isActiveConstr.data, workingset->nWConstr,
            proc_control_node_B.TYPE == 5, &proc_control_node_B.normDelta,
            &updateFval, &proc_control_node_B.workingIdx,
            &proc_control_node_B.iQR0);
          if (updateFval) {
            switch (proc_control_node_B.workingIdx) {
             case 3:
              proc_control_nod_addAineqConstr(workingset,
                proc_control_node_B.iQR0);
              break;

             case 4:
              proc_addBoundToActiveSetMatrix_(workingset, 4,
                proc_control_node_B.iQR0);
              break;

             default:
              proc_addBoundToActiveSetMatrix_(workingset, 5,
                proc_control_node_B.iQR0);
              break;
            }

            proc_control_node_B.activeSetChangeID = 1;
          } else {
            proc_c_checkUnboundedOrIllPosed(solution, objective);
            subProblemChanged = false;
            if (workingset->nActiveConstr == 0) {
              solution->state = 1;
            }
          }

          if ((proc_control_node_B.nVar_a >= 1) &&
              (!(proc_control_node_B.normDelta == 0.0))) {
            proc_control_node_B.workingIdx = 0;
            while (proc_control_node_B.workingIdx <= proc_control_node_B.nVar_a
                   - 1) {
              solution->xstar.data[proc_control_node_B.workingIdx] +=
                proc_control_node_B.normDelta * solution->
                searchDir.data[proc_control_node_B.workingIdx];
              proc_control_node_B.workingIdx++;
            }
          }

          proc_contro_computeGrad_StoreHx(objective, H, f_data,
            solution->xstar.data);
          updateFval = true;
        }

        proc_checkStoppingAndUpdateFval(&proc_control_node_B.activeSetChangeID,
          f_data, solution, memspace, objective, workingset, qrmanager,
          options_ObjectiveLimit, runTimeOptions_MaxIterations, updateFval);
      }
    } else {
      if (!updateFval) {
        proc_control_node_B.iQR0 = memspace->workspace_double.size[0] *
          memspace->workspace_double.size[1];
        for (proc_control_node_B.workingIdx = 0; proc_control_node_B.workingIdx <
             proc_control_node_B.iQR0; proc_control_node_B.workingIdx++) {
        }

        solution->fstar = proc_contro_computeFval_ReuseHx(objective,
          memspace->workspace_double.data, f_data, solution->xstar.data);
      }

      exitg1 = 1;
    }
  } while (exitg1 == 0);
}

// Function for MATLAB Function: '<S94>/NLMPC'
static void proc_control_node_linearForm_(boolean_T obj_hasLinear, int32_T
  obj_nvar, real_T workspace_data[], const real_T H[4761], const real_T f_data[],
  const real_T x_data[])
{
  int32_T b;
  int32_T b_c;
  int32_T ia;
  int32_T iac;
  proc_control_node_B.fMultiplier = 0;
  if (obj_hasLinear) {
    proc_control_node_B.fMultiplier = 0;
    while (proc_control_node_B.fMultiplier <= obj_nvar - 1) {
      workspace_data[proc_control_node_B.fMultiplier] =
        f_data[proc_control_node_B.fMultiplier];
      proc_control_node_B.fMultiplier++;
    }

    proc_control_node_B.fMultiplier = 1;
  }

  if (obj_nvar != 0) {
    if (proc_control_node_B.fMultiplier != 1) {
      proc_control_node_B.fMultiplier = 0;
      while (proc_control_node_B.fMultiplier <= obj_nvar - 1) {
        workspace_data[proc_control_node_B.fMultiplier] = 0.0;
        proc_control_node_B.fMultiplier++;
      }
    }

    proc_control_node_B.fMultiplier = 0;
    b_c = (obj_nvar - 1) * obj_nvar + 1;
    iac = 1;
    while (((obj_nvar > 0) && (iac <= b_c)) || ((obj_nvar < 0) && (iac >= b_c)))
    {
      proc_control_node_B.c_go = 0.5 * x_data[proc_control_node_B.fMultiplier];
      proc_control_node_B.iy_da = 0;
      b = (iac + obj_nvar) - 1;
      for (ia = iac; ia <= b; ia++) {
        workspace_data[proc_control_node_B.iy_da] += H[ia - 1] *
          proc_control_node_B.c_go;
        proc_control_node_B.iy_da++;
      }

      proc_control_node_B.fMultiplier++;
      iac += obj_nvar;
    }
  }
}

// Function for MATLAB Function: '<S94>/NLMPC'
static real_T proc_control_node_computeFval(const
  s_jPVC6k54fKlkrevS6u11qC_proc_T *obj, real_T workspace_data[], const real_T H
  [4761], const real_T f_data[], const real_T x_data[])
{
  real_T val;
  switch (obj->objtype) {
   case 5:
    val = x_data[obj->nvar - 1] * obj->gammaScalar;
    break;

   case 3:
    proc_control_node_linearForm_(obj->hasLinear, obj->nvar, workspace_data, H,
      f_data, x_data);
    val = 0.0;
    if (obj->nvar >= 1) {
      proc_control_node_B.idx_c = 0;
      while (proc_control_node_B.idx_c <= obj->nvar - 1) {
        val += workspace_data[proc_control_node_B.idx_c] *
          x_data[proc_control_node_B.idx_c];
        proc_control_node_B.idx_c++;
      }
    }
    break;

   default:
    proc_control_node_linearForm_(obj->hasLinear, obj->nvar, workspace_data, H,
      f_data, x_data);
    proc_control_node_B.idx_c = obj->nvar;
    while (proc_control_node_B.idx_c + 1 <= obj->maxVar - 1) {
      workspace_data[proc_control_node_B.idx_c] = 0.5 * obj->beta *
        x_data[proc_control_node_B.idx_c] + obj->rho;
      proc_control_node_B.idx_c++;
    }

    val = 0.0;
    if (obj->maxVar - 1 >= 1) {
      proc_control_node_B.idx_c = 0;
      while (proc_control_node_B.idx_c <= obj->maxVar - 2) {
        val += workspace_data[proc_control_node_B.idx_c] *
          x_data[proc_control_node_B.idx_c];
        proc_control_node_B.idx_c++;
      }
    }
    break;
  }

  return val;
}

// Function for MATLAB Function: '<S94>/NLMPC'
static void proc_control_node_phaseone(const real_T H[4761], const real_T
  f_data[], s_YLC2gJhPBjEs8VvOTvcE4B_proc_T *solution,
  s_JXDNdI64oJvyHGrBwTBHI_proc__T *memspace, s_MFLHEgKtV7gODWBOEr7maD_proc_T
  *workingset, s_1UhBFHxHKUXshhZtLgMUHE_proc_T *qrmanager,
  s_B2KneB7ks2RV0bvoJc0bxC_proc_T *cholmanager, s_jPVC6k54fKlkrevS6u11qC_proc_T *
  objective, s1TgE9KstXgkd2qJxO1bF4F_proc__T *options, const
  s1TgE9KstXgkd2qJxO1bF4F_proc__T *runTimeOptions)
{
  boolean_T exitg1;
  proc_control_node_B.PROBTYPE_ORIG = workingset->probType;
  proc_control_node_B.nVar_tmp = workingset->nVar;
  solution->xstar.data[workingset->nVar] = solution->maxConstr + 1.0;
  if (workingset->probType == 3) {
    proc_control_node_B.PHASEONE = 1;
  } else {
    proc_control_node_B.PHASEONE = 4;
  }

  proc_contro_removeAllIneqConstr(workingset);
  proc_control_nod_setProblemType(workingset, proc_control_node_B.PHASEONE);
  objective->prev_objtype = objective->objtype;
  objective->prev_nvar = objective->nvar;
  objective->prev_hasLinear = objective->hasLinear;
  objective->objtype = 5;
  objective->nvar = proc_control_node_B.nVar_tmp + 1;
  objective->gammaScalar = 1.0;
  objective->hasLinear = true;
  options->ObjectiveLimit = 0.02;
  options->StepTolerance = 1.4901161193847657E-10;
  proc_control_node_B.mEqFixed = memspace->workspace_double.size[0] *
    memspace->workspace_double.size[1];
  for (proc_control_node_B.PHASEONE = 0; proc_control_node_B.PHASEONE <
       proc_control_node_B.mEqFixed; proc_control_node_B.PHASEONE++) {
  }

  solution->fstar = proc_control_node_computeFval(objective,
    memspace->workspace_double.data, H, f_data, solution->xstar.data);
  solution->state = 5;
  proc_control_node_iterate(H, f_data, solution, memspace, workingset, qrmanager,
    cholmanager, objective, options->SolverName, options->StepTolerance,
    options->ObjectiveLimit, runTimeOptions->MaxIterations);
  if (workingset->isActiveConstr.data[(workingset->isActiveIdx[3] +
       workingset->sizes[3]) - 2]) {
    proc_control_node_B.PHASEONE = workingset->sizes[0] + 53;
    exitg1 = false;
    while ((!exitg1) && (proc_control_node_B.PHASEONE <=
                         workingset->nActiveConstr)) {
      if ((workingset->Wid.data[proc_control_node_B.PHASEONE - 1] == 4) &&
          (workingset->Wlocalidx.data[proc_control_node_B.PHASEONE - 1] ==
           workingset->sizes[3])) {
        proc_control_node_removeConstr(workingset, proc_control_node_B.PHASEONE);
        exitg1 = true;
      } else {
        proc_control_node_B.PHASEONE++;
      }
    }
  }

  proc_control_node_B.PHASEONE = workingset->nActiveConstr;
  proc_control_node_B.mEqFixed = workingset->sizes[0] + 52;
  while ((proc_control_node_B.PHASEONE > proc_control_node_B.mEqFixed) &&
         (proc_control_node_B.PHASEONE > proc_control_node_B.nVar_tmp)) {
    proc_control_node_removeConstr(workingset, proc_control_node_B.PHASEONE);
    proc_control_node_B.PHASEONE--;
  }

  solution->maxConstr = solution->xstar.data[proc_control_node_B.nVar_tmp];
  proc_control_nod_setProblemType(workingset, proc_control_node_B.PROBTYPE_ORIG);
  objective->objtype = objective->prev_objtype;
  objective->nvar = objective->prev_nvar;
  objective->hasLinear = objective->prev_hasLinear;
  options->ObjectiveLimit = (rtMinusInf);
  options->StepTolerance = 1.0E-6;
}

// Function for MATLAB Function: '<S94>/NLMPC'
static void proc_control_node_driver_e(const real_T H[4761], const real_T
  f_data[], s_YLC2gJhPBjEs8VvOTvcE4B_proc_T *solution,
  s_JXDNdI64oJvyHGrBwTBHI_proc__T *memspace, s_MFLHEgKtV7gODWBOEr7maD_proc_T
  *workingset, s_1UhBFHxHKUXshhZtLgMUHE_proc_T *qrmanager,
  s_B2KneB7ks2RV0bvoJc0bxC_proc_T *cholmanager, s_jPVC6k54fKlkrevS6u11qC_proc_T *
  objective, s1TgE9KstXgkd2qJxO1bF4F_proc__T *options,
  s1TgE9KstXgkd2qJxO1bF4F_proc__T *runTimeOptions)
{
  boolean_T guard1 = false;
  solution->iterations = 0;
  runTimeOptions->RemainFeasible = true;
  proc_control_node_B.nVar_n = workingset->nVar - 1;
  guard1 = false;
  if (workingset->probType == 3) {
    proc_control_node_B.b_idx_m = 0;
    while (proc_control_node_B.b_idx_m <= workingset->sizes[0] - 1) {
      solution->xstar.data[workingset->
        indexFixed.data[proc_control_node_B.b_idx_m] - 1] = workingset->
        ub.data[workingset->indexFixed.data[proc_control_node_B.b_idx_m] - 1];
      proc_control_node_B.b_idx_m++;
    }

    proc_control_node_B.b_idx_m = 0;
    while (proc_control_node_B.b_idx_m <= workingset->sizes[3] - 1) {
      if (workingset->isActiveConstr.data[(workingset->isActiveIdx[3] +
           proc_control_node_B.b_idx_m) - 1]) {
        solution->xstar.data[workingset->
          indexLB.data[proc_control_node_B.b_idx_m] - 1] = -workingset->
          lb.data[workingset->indexLB.data[proc_control_node_B.b_idx_m] - 1];
      }

      proc_control_node_B.b_idx_m++;
    }

    proc_control_node_B.b_idx_m = 0;
    while (proc_control_node_B.b_idx_m <= workingset->sizes[4] - 1) {
      if (workingset->isActiveConstr.data[(workingset->isActiveIdx[4] +
           proc_control_node_B.b_idx_m) - 1]) {
        solution->xstar.data[workingset->
          indexUB.data[proc_control_node_B.b_idx_m] - 1] = workingset->
          ub.data[workingset->indexUB.data[proc_control_node_B.b_idx_m] - 1];
      }

      proc_control_node_B.b_idx_m++;
    }

    proc_control_PresolveWorkingSet(solution, memspace, workingset, qrmanager);
    if (solution->state < 0) {
    } else {
      guard1 = true;
    }
  } else {
    solution->state = 82;
    guard1 = true;
  }

  if (guard1) {
    solution->iterations = 0;
    proc_control_node_B.b_o = proc__maxConstraintViolation_ae(workingset,
      solution->xstar.data);
    solution->maxConstr = proc_control_node_B.b_o;
    if (proc_control_node_B.b_o > 0.02) {
      proc_control_node_phaseone(H, f_data, solution, memspace, workingset,
        qrmanager, cholmanager, objective, options, runTimeOptions);
      if (solution->state != 0) {
        proc_control_node_B.b_o = proc__maxConstraintViolation_ae(workingset,
          solution->xstar.data);
        solution->maxConstr = proc_control_node_B.b_o;
        if (proc_control_node_B.b_o > 0.02) {
          proc_control_node_B.b_idx_m = 0;
          while (proc_control_node_B.b_idx_m <= workingset->mConstrMax - 1) {
            solution->lambda.data[proc_control_node_B.b_idx_m] = 0.0;
            proc_control_node_B.b_idx_m++;
          }

          proc_control_node_B.loop_ub_in = memspace->workspace_double.size[0] *
            memspace->workspace_double.size[1];
          for (proc_control_node_B.b_idx_m = 0; proc_control_node_B.b_idx_m <
               proc_control_node_B.loop_ub_in; proc_control_node_B.b_idx_m++) {
          }

          solution->fstar = proc_control_node_computeFval(objective,
            memspace->workspace_double.data, H, f_data, solution->xstar.data);
          solution->state = -2;
        } else {
          if (proc_control_node_B.b_o > 0.0) {
            proc_control_node_B.y_size_idx_0_ol = solution->searchDir.size;
            proc_control_node_B.loop_ub_in = solution->searchDir.size;
            if (0 <= proc_control_node_B.loop_ub_in - 1) {
              memcpy(&proc_control_node_B.y_data_i[0], &solution->
                     searchDir.data[0], proc_control_node_B.loop_ub_in * sizeof
                     (real_T));
            }

            proc_control_node_B.b_idx_m = 0;
            while (proc_control_node_B.b_idx_m <= proc_control_node_B.nVar_n) {
              proc_control_node_B.y_data_i[proc_control_node_B.b_idx_m] =
                solution->xstar.data[proc_control_node_B.b_idx_m];
              proc_control_node_B.b_idx_m++;
            }

            if (0 <= proc_control_node_B.y_size_idx_0_ol - 1) {
              memcpy(&solution->searchDir.data[0],
                     &proc_control_node_B.y_data_i[0],
                     proc_control_node_B.y_size_idx_0_ol * sizeof(real_T));
            }

            proc_control_PresolveWorkingSet(solution, memspace, workingset,
              qrmanager);
            proc_control_node_B.b_o = proc__maxConstraintViolation_ae(workingset,
              solution->xstar.data);
            if (proc_control_node_B.b_o >= solution->maxConstr) {
              solution->maxConstr = proc_control_node_B.b_o;
              proc_control_node_B.y_size_idx_0_ol = solution->xstar.size;
              proc_control_node_B.loop_ub_in = solution->xstar.size;
              if (0 <= proc_control_node_B.loop_ub_in - 1) {
                memcpy(&proc_control_node_B.y_data_i[0], &solution->xstar.data[0],
                       proc_control_node_B.loop_ub_in * sizeof(real_T));
              }

              proc_control_node_B.b_idx_m = 0;
              while (proc_control_node_B.b_idx_m <= proc_control_node_B.nVar_n)
              {
                proc_control_node_B.y_data_i[proc_control_node_B.b_idx_m] =
                  solution->searchDir.data[proc_control_node_B.b_idx_m];
                proc_control_node_B.b_idx_m++;
              }

              if (0 <= proc_control_node_B.y_size_idx_0_ol - 1) {
                memcpy(&solution->xstar.data[0], &proc_control_node_B.y_data_i[0],
                       proc_control_node_B.y_size_idx_0_ol * sizeof(real_T));
              }
            }
          }

          proc_control_node_iterate(H, f_data, solution, memspace, workingset,
            qrmanager, cholmanager, objective, options->SolverName,
            options->StepTolerance, options->ObjectiveLimit,
            runTimeOptions->MaxIterations);
        }
      }
    } else {
      proc_control_node_iterate(H, f_data, solution, memspace, workingset,
        qrmanager, cholmanager, objective, options->SolverName,
        options->StepTolerance, options->ObjectiveLimit,
        runTimeOptions->MaxIterations);
    }
  }
}

// Function for MATLAB Function: '<S94>/NLMPC'
static void proc_control_node_addAeqConstr(s_MFLHEgKtV7gODWBOEr7maD_proc_T *obj,
  int32_T idx_local)
{
  int32_T b_idx;
  int32_T iAeq0;
  int32_T iAw0;
  int32_T totalEq;
  totalEq = obj->nWConstr[0] + obj->nWConstr[1];
  if ((obj->nActiveConstr == totalEq) && (idx_local > obj->nWConstr[1])) {
    obj->nWConstr[1]++;
    obj->isActiveConstr.data[(obj->isActiveIdx[1] + idx_local) - 2] = true;
    obj->nActiveConstr++;
    obj->Wid.data[obj->nActiveConstr - 1] = 2;
    obj->Wlocalidx.data[obj->nActiveConstr - 1] = idx_local;
    iAeq0 = (idx_local - 1) * obj->ldA;
    iAw0 = (obj->nActiveConstr - 1) * obj->ldA;
    for (totalEq = 1; totalEq - 1 < obj->nVar; totalEq++) {
      obj->ATwset.data[(iAw0 + totalEq) - 1] = obj->Aeq.data[(iAeq0 + totalEq) -
        1];
    }

    obj->bwset.data[obj->nActiveConstr - 1] = obj->beq[idx_local - 1];
  } else {
    obj->nActiveConstr++;
    iAeq0 = obj->nActiveConstr - 1;
    obj->Wid.data[obj->nActiveConstr - 1] = obj->Wid.data[totalEq];
    obj->Wlocalidx.data[iAeq0] = obj->Wlocalidx.data[totalEq];
    for (iAw0 = 0; iAw0 < obj->nVar; iAw0++) {
      obj->ATwset.data[iAw0 + obj->ldA * iAeq0] = obj->ATwset.data[obj->ldA *
        totalEq + iAw0];
    }

    obj->bwset.data[iAeq0] = obj->bwset.data[totalEq];
    obj->nWConstr[1]++;
    obj->isActiveConstr.data[(obj->isActiveIdx[1] + idx_local) - 2] = true;
    obj->Wid.data[totalEq] = 2;
    obj->Wlocalidx.data[totalEq] = idx_local;
    iAeq0 = (idx_local - 1) * obj->ldA;
    iAw0 = obj->ldA * totalEq;
    for (b_idx = 1; b_idx - 1 < obj->nVar; b_idx++) {
      obj->ATwset.data[(iAw0 + b_idx) - 1] = obj->Aeq.data[(iAeq0 + b_idx) - 1];
    }

    obj->bwset.data[totalEq] = obj->beq[idx_local - 1];
  }
}

// Function for MATLAB Function: '<S94>/NLMPC'
static boolean_T proc_control_node_soc(const real_T Hessian[4761], const real_T
  grad_data[], s_YLC2gJhPBjEs8VvOTvcE4B_proc_T *TrialState,
  s_JXDNdI64oJvyHGrBwTBHI_proc__T *memspace, s_MFLHEgKtV7gODWBOEr7maD_proc_T
  *WorkingSet, s_1UhBFHxHKUXshhZtLgMUHE_proc_T *QRManager,
  s_B2KneB7ks2RV0bvoJc0bxC_proc_T *CholManager, s_jPVC6k54fKlkrevS6u11qC_proc_T *
  QPObjective, const s1TgE9KstXgkd2qJxO1bF4F_proc__T *qpoptions)
{
  boolean_T success;
  proc_control_node_B.nWIneq_old = WorkingSet->nWConstr[2];
  proc_control_node_B.nWLower_old = WorkingSet->nWConstr[3];
  proc_control_node_B.nWUpper_old = WorkingSet->nWConstr[4];
  proc_control_node_B.nVar_f = WorkingSet->nVar - 1;
  proc_control_node_B.mConstrMax_k = WorkingSet->mConstrMax - 1;
  proc_control_node_B.idx_Aineq = 0;
  while (proc_control_node_B.idx_Aineq <= proc_control_node_B.nVar_f) {
    TrialState->xstarsqp[proc_control_node_B.idx_Aineq] =
      TrialState->xstarsqp_old[proc_control_node_B.idx_Aineq];
    proc_control_node_B.idx_Aineq++;
  }

  proc_control_node_B.idx_Aineq = 0;
  while (proc_control_node_B.idx_Aineq <= proc_control_node_B.nVar_f) {
    TrialState->socDirection.data[proc_control_node_B.idx_Aineq] =
      TrialState->xstar.data[proc_control_node_B.idx_Aineq];
    proc_control_node_B.idx_Aineq++;
  }

  proc_control_node_B.idx_Aineq = 0;
  while (proc_control_node_B.idx_Aineq <= proc_control_node_B.mConstrMax_k) {
    TrialState->lambda_old.data[proc_control_node_B.idx_Aineq] =
      TrialState->lambda.data[proc_control_node_B.idx_Aineq];
    proc_control_node_B.idx_Aineq++;
  }

  for (proc_control_node_B.idx_Aineq = 0; proc_control_node_B.idx_Aineq < 52;
       proc_control_node_B.idx_Aineq++) {
    WorkingSet->beq[proc_control_node_B.idx_Aineq] = -TrialState->
      cEq[proc_control_node_B.idx_Aineq];
  }

  proc_control_node_B.idx_Aineq_tmp = WorkingSet->ldA;
  proc_control_node_B.iy_p = 0;
  proc_control_node_B.idx_upper = WorkingSet->ldA * 51 + 1;
  proc_control_node_B.iac = 1;
  while (((proc_control_node_B.idx_Aineq_tmp > 0) && (proc_control_node_B.iac <=
           proc_control_node_B.idx_upper)) ||
         ((proc_control_node_B.idx_Aineq_tmp < 0) && (proc_control_node_B.iac >=
           proc_control_node_B.idx_upper))) {
    proc_control_node_B.idx_Partition = 0;
    proc_control_node_B.oldDirIdx = 0.0;
    proc_control_node_B.idx_Aineq = (proc_control_node_B.iac + WorkingSet->nVar)
      - 1;
    proc_control_node_B.b_ia_h = proc_control_node_B.iac;
    while (proc_control_node_B.b_ia_h <= proc_control_node_B.idx_Aineq) {
      proc_control_node_B.oldDirIdx += WorkingSet->
        Aeq.data[proc_control_node_B.b_ia_h - 1] * TrialState->
        searchDir.data[proc_control_node_B.idx_Partition];
      proc_control_node_B.idx_Partition++;
      proc_control_node_B.b_ia_h++;
    }

    WorkingSet->beq[proc_control_node_B.iy_p] += proc_control_node_B.oldDirIdx;
    proc_control_node_B.iy_p++;
    proc_control_node_B.iac += proc_control_node_B.idx_Aineq_tmp;
  }

  for (proc_control_node_B.idx_Aineq = 0; proc_control_node_B.idx_Aineq < 52;
       proc_control_node_B.idx_Aineq++) {
    WorkingSet->bwset.data[WorkingSet->sizes[0] + proc_control_node_B.idx_Aineq]
      = WorkingSet->beq[proc_control_node_B.idx_Aineq];
  }

  if (WorkingSet->sizes[2] > 0) {
    proc_control_node_B.idx_Aineq = 0;
    while (proc_control_node_B.idx_Aineq <= WorkingSet->sizes[2] - 1) {
      WorkingSet->bineq.data[proc_control_node_B.idx_Aineq] =
        -TrialState->cIneq.data[proc_control_node_B.idx_Aineq];
      proc_control_node_B.idx_Aineq++;
    }

    proc_control_node_B.idx_Aineq_tmp = WorkingSet->ldA;
    proc_control_node_B.iy_p = 0;
    proc_control_node_B.idx_upper = (WorkingSet->sizes[2] - 1) * WorkingSet->ldA
      + 1;
    proc_control_node_B.iac = 1;
    while (((proc_control_node_B.idx_Aineq_tmp > 0) && (proc_control_node_B.iac <=
             proc_control_node_B.idx_upper)) ||
           ((proc_control_node_B.idx_Aineq_tmp < 0) && (proc_control_node_B.iac >=
             proc_control_node_B.idx_upper))) {
      proc_control_node_B.idx_Partition = 0;
      proc_control_node_B.oldDirIdx = 0.0;
      proc_control_node_B.idx_Aineq = (proc_control_node_B.iac +
        WorkingSet->nVar) - 1;
      proc_control_node_B.b_ia_h = proc_control_node_B.iac;
      while (proc_control_node_B.b_ia_h <= proc_control_node_B.idx_Aineq) {
        proc_control_node_B.oldDirIdx += WorkingSet->
          Aineq.data[proc_control_node_B.b_ia_h - 1] *
          TrialState->searchDir.data[proc_control_node_B.idx_Partition];
        proc_control_node_B.idx_Partition++;
        proc_control_node_B.b_ia_h++;
      }

      WorkingSet->bineq.data[proc_control_node_B.iy_p] +=
        proc_control_node_B.oldDirIdx;
      proc_control_node_B.iy_p++;
      proc_control_node_B.iac += proc_control_node_B.idx_Aineq_tmp;
    }

    proc_control_node_B.idx_Aineq = 1;
    proc_control_node_B.iy_p = WorkingSet->sizes[2] + 1;
    proc_control_node_B.idx_upper = (WorkingSet->sizes[2] + WorkingSet->sizes[3])
      + 1;
    proc_control_node_B.iac = WorkingSet->isActiveIdx[2] - 1;
    while (proc_control_node_B.iac + 1 <= WorkingSet->nActiveConstr) {
      switch (WorkingSet->Wid.data[proc_control_node_B.iac]) {
       case 3:
        proc_control_node_B.idx_Partition = proc_control_node_B.idx_Aineq;
        proc_control_node_B.idx_Aineq++;
        WorkingSet->bwset.data[proc_control_node_B.iac] = WorkingSet->
          bineq.data[WorkingSet->Wlocalidx.data[proc_control_node_B.iac] - 1];
        break;

       case 4:
        proc_control_node_B.idx_Partition = proc_control_node_B.iy_p;
        proc_control_node_B.iy_p++;
        break;

       default:
        proc_control_node_B.idx_Partition = proc_control_node_B.idx_upper;
        proc_control_node_B.idx_upper++;
        break;
      }

      TrialState->workingset_old.data[proc_control_node_B.idx_Partition - 1] =
        WorkingSet->Wlocalidx.data[proc_control_node_B.iac];
      proc_control_node_B.iac++;
    }
  }

  proc_control_node_B.idx_Aineq = 0;
  while (proc_control_node_B.idx_Aineq <= proc_control_node_B.nVar_f) {
    TrialState->xstar.data[proc_control_node_B.idx_Aineq] = TrialState->
      xstarsqp[proc_control_node_B.idx_Aineq];
    proc_control_node_B.idx_Aineq++;
  }

  proc_control_node_B.qpoptions_c = *qpoptions;
  proc_control_node_B.qpoptions_g = *qpoptions;
  proc_control_node_driver_e(Hessian, grad_data, TrialState, memspace,
    WorkingSet, QRManager, CholManager, QPObjective,
    &proc_control_node_B.qpoptions_c, &proc_control_node_B.qpoptions_g);
  while ((WorkingSet->mEqRemoved > 0) && (WorkingSet->indexEqRemoved
          [WorkingSet->mEqRemoved - 1] >= 1)) {
    proc_control_node_addAeqConstr(WorkingSet, WorkingSet->
      indexEqRemoved[WorkingSet->mEqRemoved - 1]);
    WorkingSet->mEqRemoved--;
  }

  proc_control_node_B.idx_Aineq = 0;
  while (proc_control_node_B.idx_Aineq <= proc_control_node_B.nVar_f) {
    proc_control_node_B.oldDirIdx = TrialState->
      socDirection.data[proc_control_node_B.idx_Aineq];
    TrialState->socDirection.data[proc_control_node_B.idx_Aineq] =
      TrialState->xstar.data[proc_control_node_B.idx_Aineq] -
      TrialState->socDirection.data[proc_control_node_B.idx_Aineq];
    TrialState->xstar.data[proc_control_node_B.idx_Aineq] =
      proc_control_node_B.oldDirIdx;
    proc_control_node_B.idx_Aineq++;
  }

  success = (proc_control_node_xnrm2_n(proc_control_node_B.nVar_f + 1,
              TrialState->socDirection.data) <= proc_control_node_xnrm2_n
             (proc_control_node_B.nVar_f + 1, TrialState->xstar.data) * 2.0);
  proc_control_node_B.idx_Aineq = WorkingSet->sizes[2];
  proc_control_node_B.iy_p = WorkingSet->sizes[3];
  for (proc_control_node_B.nVar_f = 0; proc_control_node_B.nVar_f < 52;
       proc_control_node_B.nVar_f++) {
    WorkingSet->beq[proc_control_node_B.nVar_f] = -TrialState->
      cEq[proc_control_node_B.nVar_f];
  }

  for (proc_control_node_B.nVar_f = 0; proc_control_node_B.nVar_f < 52;
       proc_control_node_B.nVar_f++) {
    WorkingSet->bwset.data[WorkingSet->sizes[0] + proc_control_node_B.nVar_f] =
      WorkingSet->beq[proc_control_node_B.nVar_f];
  }

  if (WorkingSet->sizes[2] > 0) {
    proc_control_node_B.nVar_f = 0;
    while (proc_control_node_B.nVar_f <= proc_control_node_B.idx_Aineq - 1) {
      WorkingSet->bineq.data[proc_control_node_B.nVar_f] =
        -TrialState->cIneq.data[proc_control_node_B.nVar_f];
      proc_control_node_B.nVar_f++;
    }

    if (!success) {
      proc_contro_removeAllIneqConstr(WorkingSet);
      proc_control_node_B.nVar_f = 0;
      while (proc_control_node_B.nVar_f <= proc_control_node_B.nWIneq_old - 1) {
        proc_control_nod_addAineqConstr(WorkingSet,
          TrialState->workingset_old.data[proc_control_node_B.nVar_f]);
        proc_control_node_B.nVar_f++;
      }

      proc_control_node_B.nWIneq_old = 0;
      while (proc_control_node_B.nWIneq_old <= proc_control_node_B.nWLower_old -
             1) {
        proc_addBoundToActiveSetMatrix_(WorkingSet, 4,
          TrialState->workingset_old.data[proc_control_node_B.nWIneq_old +
          proc_control_node_B.idx_Aineq]);
        proc_control_node_B.nWIneq_old++;
      }

      proc_control_node_B.nWLower_old = 0;
      while (proc_control_node_B.nWLower_old <= proc_control_node_B.nWUpper_old
             - 1) {
        proc_addBoundToActiveSetMatrix_(WorkingSet, 5,
          TrialState->workingset_old.data[(proc_control_node_B.nWLower_old +
          proc_control_node_B.idx_Aineq) + proc_control_node_B.iy_p]);
        proc_control_node_B.nWLower_old++;
      }
    }
  }

  if (!success) {
    proc_control_node_B.nWUpper_old = 0;
    while (proc_control_node_B.nWUpper_old <= proc_control_node_B.mConstrMax_k)
    {
      TrialState->lambda.data[proc_control_node_B.nWUpper_old] =
        TrialState->lambda_old.data[proc_control_node_B.nWUpper_old];
      proc_control_node_B.nWUpper_old++;
    }
  } else {
    proc_control_node_B.nWUpper_old = memspace->workspace_double.size[0] *
      memspace->workspace_double.size[1];
    for (proc_control_node_B.mConstrMax_k = 0; proc_control_node_B.mConstrMax_k <
         proc_control_node_B.nWUpper_old; proc_control_node_B.mConstrMax_k++) {
    }

    proc_control_node_sortLambdaQP(TrialState->lambda.data,
      WorkingSet->nActiveConstr, WorkingSet->sizes, WorkingSet->isActiveIdx,
      WorkingSet->Wid.data, WorkingSet->Wlocalidx.data,
      memspace->workspace_double.data);
  }

  return success;
}

// Function for MATLAB Function: '<S94>/NLMPC'
static void proc_control_node_normal(const real_T Hessian[4761], const real_T
  grad_data[], s_YLC2gJhPBjEs8VvOTvcE4B_proc_T *TrialState,
  sG8JZ69axY52WWR6RKyApQC_proc__T *MeritFunction,
  s_JXDNdI64oJvyHGrBwTBHI_proc__T *memspace, s_MFLHEgKtV7gODWBOEr7maD_proc_T
  *WorkingSet, s_1UhBFHxHKUXshhZtLgMUHE_proc_T *QRManager,
  s_B2KneB7ks2RV0bvoJc0bxC_proc_T *CholManager, s_jPVC6k54fKlkrevS6u11qC_proc_T *
  QPObjective, const s1TgE9KstXgkd2qJxO1bF4F_proc__T *qpoptions)
{
  boolean_T nonlinEqRemoved;
  proc_control_node_B.qpoptions_e = *qpoptions;
  proc_control_node_B.qpoptions_n = *qpoptions;
  proc_control_node_driver_e(Hessian, grad_data, TrialState, memspace,
    WorkingSet, QRManager, CholManager, QPObjective,
    &proc_control_node_B.qpoptions_e, &proc_control_node_B.qpoptions_n);
  if (TrialState->state > 0) {
    proc_control_node_B.penaltyParamTrial = MeritFunction->penaltyParam;
    proc_control_node_B.constrViolationEq = 0.0;
    for (proc_control_node_B.k_f = 0; proc_control_node_B.k_f < 52;
         proc_control_node_B.k_f++) {
      proc_control_node_B.constrViolationEq += fabs(TrialState->
        cEq[proc_control_node_B.k_f]);
    }

    proc_control_node_B.constrViolationIneq = 0.0;
    proc_control_node_B.k_f = 0;
    while (proc_control_node_B.k_f <= WorkingSet->sizes[2] - 1) {
      if (TrialState->cIneq.data[proc_control_node_B.k_f] > 0.0) {
        proc_control_node_B.constrViolationIneq += TrialState->
          cIneq.data[proc_control_node_B.k_f];
      }

      proc_control_node_B.k_f++;
    }

    proc_control_node_B.constrViolationEq +=
      proc_control_node_B.constrViolationIneq;
    proc_control_node_B.constrViolationIneq =
      MeritFunction->linearizedConstrViol;
    MeritFunction->linearizedConstrViol = 0.0;
    proc_control_node_B.constrViolationIneq +=
      proc_control_node_B.constrViolationEq;
    if ((proc_control_node_B.constrViolationIneq > 2.2204460492503131E-16) &&
        (TrialState->fstar > 0.0)) {
      if (TrialState->sqpFval == 0.0) {
        proc_control_node_B.penaltyParamTrial = 1.0;
      } else {
        proc_control_node_B.penaltyParamTrial = 1.5;
      }

      proc_control_node_B.penaltyParamTrial =
        proc_control_node_B.penaltyParamTrial * TrialState->fstar /
        proc_control_node_B.constrViolationIneq;
    }

    if (proc_control_node_B.penaltyParamTrial < MeritFunction->penaltyParam) {
      MeritFunction->phi = proc_control_node_B.penaltyParamTrial *
        proc_control_node_B.constrViolationEq + TrialState->sqpFval;
      if (((MeritFunction->initConstrViolationEq +
            MeritFunction->initConstrViolationIneq) *
           proc_control_node_B.penaltyParamTrial + MeritFunction->initFval) -
          MeritFunction->phi > static_cast<real_T>
          (MeritFunction->nPenaltyDecreases) * MeritFunction->threshold) {
        MeritFunction->nPenaltyDecreases++;
        if ((MeritFunction->nPenaltyDecreases << 1) > TrialState->sqpIterations)
        {
          MeritFunction->threshold *= 10.0;
        }

        if (proc_control_node_B.penaltyParamTrial > 1.0E-10) {
          MeritFunction->penaltyParam = proc_control_node_B.penaltyParamTrial;
        } else {
          MeritFunction->penaltyParam = 1.0E-10;
        }
      } else {
        MeritFunction->phi = MeritFunction->penaltyParam *
          proc_control_node_B.constrViolationEq + TrialState->sqpFval;
      }
    } else {
      if (!(proc_control_node_B.penaltyParamTrial > 1.0E-10)) {
        proc_control_node_B.penaltyParamTrial = 1.0E-10;
      }

      MeritFunction->penaltyParam = proc_control_node_B.penaltyParamTrial;
      MeritFunction->phi = proc_control_node_B.penaltyParamTrial *
        proc_control_node_B.constrViolationEq + TrialState->sqpFval;
    }

    proc_control_node_B.penaltyParamTrial = TrialState->fstar -
      MeritFunction->penaltyParam * proc_control_node_B.constrViolationEq;
    if (proc_control_node_B.penaltyParamTrial < 0.0) {
      MeritFunction->phiPrimePlus = proc_control_node_B.penaltyParamTrial;
    } else {
      MeritFunction->phiPrimePlus = 0.0;
    }
  }

  proc_control_node_B.loop_ub_ip = memspace->workspace_double.size[0] *
    memspace->workspace_double.size[1];
  for (proc_control_node_B.k_f = 0; proc_control_node_B.k_f <
       proc_control_node_B.loop_ub_ip; proc_control_node_B.k_f++) {
  }

  proc_control_node_sortLambdaQP(TrialState->lambda.data,
    WorkingSet->nActiveConstr, WorkingSet->sizes, WorkingSet->isActiveIdx,
    WorkingSet->Wid.data, WorkingSet->Wlocalidx.data,
    memspace->workspace_double.data);
  nonlinEqRemoved = (WorkingSet->mEqRemoved > 0);
  while ((WorkingSet->mEqRemoved > 0) && (WorkingSet->indexEqRemoved
          [WorkingSet->mEqRemoved - 1] >= 1)) {
    proc_control_node_addAeqConstr(WorkingSet, WorkingSet->
      indexEqRemoved[WorkingSet->mEqRemoved - 1]);
    WorkingSet->mEqRemoved--;
  }

  if (nonlinEqRemoved) {
    for (proc_control_node_B.k_f = 0; proc_control_node_B.k_f < 52;
         proc_control_node_B.k_f++) {
      WorkingSet->Wlocalidx.data[WorkingSet->sizes[0] + proc_control_node_B.k_f]
        = proc_control_node_B.k_f + 1;
    }
  }
}

// Function for MATLAB Function: '<S94>/NLMPC'
static void proc_control_node_relaxed(const real_T Hessian[4761], const real_T
  grad_data[], s_YLC2gJhPBjEs8VvOTvcE4B_proc_T *TrialState,
  sG8JZ69axY52WWR6RKyApQC_proc__T *MeritFunction,
  s_JXDNdI64oJvyHGrBwTBHI_proc__T *memspace, s_MFLHEgKtV7gODWBOEr7maD_proc_T
  *WorkingSet, s_1UhBFHxHKUXshhZtLgMUHE_proc_T *QRManager,
  s_B2KneB7ks2RV0bvoJc0bxC_proc_T *CholManager, s_jPVC6k54fKlkrevS6u11qC_proc_T *
  QPObjective, s1TgE9KstXgkd2qJxO1bF4F_proc__T *qpoptions)
{
  boolean_T b_tf;
  boolean_T tf;
  proc_control_node_B.nVarOrig = WorkingSet->nVar;
  proc_control_node_B.nVarMax = WorkingSet->nVarMax;
  proc_control_node_B.mIneq_d = WorkingSet->sizes[2];
  proc_control_node_B.beta_l = 0.0;
  proc_control_node_B.temp_mw = 0;
  while (proc_control_node_B.temp_mw <= proc_control_node_B.nVarOrig - 1) {
    proc_control_node_B.beta_l += Hessian[69 * proc_control_node_B.temp_mw +
      proc_control_node_B.temp_mw];
    proc_control_node_B.temp_mw++;
  }

  proc_control_node_B.beta_l /= static_cast<real_T>(WorkingSet->nVar);
  if (TrialState->sqpIterations <= 1) {
    proc_control_node_B.rho = fabs(grad_data[proc_control_node_ixamax
      (QPObjective->nvar, grad_data) - 1]);
    if ((1.0 > proc_control_node_B.rho) || rtIsNaN(proc_control_node_B.rho)) {
      proc_control_node_B.rho = 1.0;
    }

    proc_control_node_B.rho *= 100.0;
  } else {
    proc_control_node_B.rho = fabs(TrialState->
      lambdasqp.data[proc_control_node_ixamax(WorkingSet->mConstr,
      TrialState->lambdasqp.data) - 1]);
  }

  QPObjective->hasLinear = true;
  QPObjective->nvar = WorkingSet->nVar;
  QPObjective->objtype = 4;
  QPObjective->beta = proc_control_node_B.beta_l;
  QPObjective->rho = proc_control_node_B.rho;
  proc_control_nod_setProblemType(WorkingSet, 2);
  proc_control_node_B.b_WorkingSet = *WorkingSet;
  proc_control_node_B.b_mIneq = WorkingSet->sizes[2] - 1;
  proc_control_node_B.mLBOrig = (WorkingSet->sizes[3] - WorkingSet->sizes[2]) -
    103;
  proc_control_node_B.temp_mw = 0;
  while (proc_control_node_B.temp_mw <= proc_control_node_B.b_mIneq) {
    memspace->workspace_double.data[proc_control_node_B.temp_mw] =
      WorkingSet->bineq.data[proc_control_node_B.temp_mw];
    proc_control_node_B.temp_mw++;
  }

  proc_control__xgemv_jhgj1v0ny5e(proc_control_node_B.nVarOrig,
    WorkingSet->sizes[2], WorkingSet->Aineq.data, WorkingSet->ldA,
    TrialState->xstar.data, memspace->workspace_double.data);
  proc_control_node_B.temp_mw = 0;
  while (proc_control_node_B.temp_mw <= proc_control_node_B.b_mIneq) {
    TrialState->xstar.data[proc_control_node_B.nVarOrig +
      proc_control_node_B.temp_mw] = static_cast<real_T>
      (memspace->workspace_double.data[proc_control_node_B.temp_mw] > 0.0) *
      memspace->workspace_double.data[proc_control_node_B.temp_mw];
    if (memspace->workspace_double.data[proc_control_node_B.temp_mw] <= 0.02) {
      proc_addBoundToActiveSetMatrix_(&proc_control_node_B.b_WorkingSet, 4,
        proc_control_node_B.mLBOrig + proc_control_node_B.temp_mw);
    }

    proc_control_node_B.temp_mw++;
  }

  memcpy(&memspace->workspace_double.data[0],
         &proc_control_node_B.b_WorkingSet.beq[0], 52U * sizeof(real_T));
  proc_control__xgemv_jhgj1v0ny5e(proc_control_node_B.nVarOrig, 52,
    proc_control_node_B.b_WorkingSet.Aeq.data,
    proc_control_node_B.b_WorkingSet.ldA, TrialState->xstar.data,
    memspace->workspace_double.data);
  for (proc_control_node_B.temp_mw = 0; proc_control_node_B.temp_mw < 52;
       proc_control_node_B.temp_mw++) {
    proc_control_node_B.mFiniteLB = proc_control_node_B.b_mIneq +
      proc_control_node_B.temp_mw;
    if (memspace->workspace_double.data[proc_control_node_B.temp_mw] <= 0.0) {
      TrialState->xstar.data[(proc_control_node_B.nVarOrig +
        proc_control_node_B.mFiniteLB) + 1] = 0.0;
      TrialState->xstar.data[(proc_control_node_B.nVarOrig +
        proc_control_node_B.mFiniteLB) + 53] = -memspace->
        workspace_double.data[proc_control_node_B.temp_mw];
      proc_addBoundToActiveSetMatrix_(&proc_control_node_B.b_WorkingSet, 4,
        (proc_control_node_B.mLBOrig + proc_control_node_B.mFiniteLB) + 1);
      if (memspace->workspace_double.data[proc_control_node_B.temp_mw] >= -0.02)
      {
        proc_addBoundToActiveSetMatrix_(&proc_control_node_B.b_WorkingSet, 4,
          (proc_control_node_B.mLBOrig + proc_control_node_B.mFiniteLB) + 53);
      }
    } else {
      proc_control_node_B.tf_tmp = proc_control_node_B.nVarOrig +
        proc_control_node_B.mFiniteLB;
      TrialState->xstar.data[proc_control_node_B.tf_tmp + 1] =
        memspace->workspace_double.data[proc_control_node_B.temp_mw];
      TrialState->xstar.data[proc_control_node_B.tf_tmp + 53] = 0.0;
      proc_addBoundToActiveSetMatrix_(&proc_control_node_B.b_WorkingSet, 4,
        (proc_control_node_B.mLBOrig + proc_control_node_B.mFiniteLB) + 53);
      if (memspace->workspace_double.data[proc_control_node_B.temp_mw] <= 0.02)
      {
        proc_addBoundToActiveSetMatrix_(&proc_control_node_B.b_WorkingSet, 4,
          (proc_control_node_B.mLBOrig + proc_control_node_B.mFiniteLB) + 1);
      }
    }
  }

  proc_control_node_B.temp_mw = qpoptions->MaxIterations;
  qpoptions->MaxIterations = (qpoptions->MaxIterations +
    proc_control_node_B.b_WorkingSet.nVar) - proc_control_node_B.nVarOrig;
  proc_control_node_B.qpoptions = *qpoptions;
  proc_control_node_B.qpoptions_h = *qpoptions;
  proc_control_node_driver_e(Hessian, grad_data, TrialState, memspace,
    &proc_control_node_B.b_WorkingSet, QRManager, CholManager, QPObjective,
    &proc_control_node_B.qpoptions, &proc_control_node_B.qpoptions_h);
  qpoptions->MaxIterations = proc_control_node_B.temp_mw;
  proc_control_node_B.mLBOrig = proc_control_node_B.b_WorkingSet.sizes[2] - 1;
  proc_control_node_B.mFiniteLB = proc_control_node_B.b_WorkingSet.sizes[3] -
    105;
  proc_control_node_B.temp_mw = 0;
  for (proc_control_node_B.b_mIneq = 0; proc_control_node_B.b_mIneq < 52;
       proc_control_node_B.b_mIneq++) {
    proc_control_node_B.tf_tmp = (proc_control_node_B.b_WorkingSet.isActiveIdx[3]
      + proc_control_node_B.mFiniteLB) + proc_control_node_B.b_mIneq;
    tf =
      proc_control_node_B.b_WorkingSet.isActiveConstr.data[proc_control_node_B.tf_tmp];
    b_tf =
      proc_control_node_B.b_WorkingSet.isActiveConstr.data[proc_control_node_B.tf_tmp
      + 52];
    memspace->workspace_int.data[proc_control_node_B.b_mIneq] = tf;
    memspace->workspace_int.data[proc_control_node_B.b_mIneq + 52] = b_tf;
    proc_control_node_B.temp_mw = (proc_control_node_B.temp_mw + tf) + b_tf;
  }

  proc_control_node_B.b_mIneq = 0;
  while (proc_control_node_B.b_mIneq <= proc_control_node_B.mLBOrig) {
    tf = proc_control_node_B.b_WorkingSet.isActiveConstr.data
      [(((proc_control_node_B.b_WorkingSet.isActiveIdx[3] +
          proc_control_node_B.mFiniteLB) - proc_control_node_B.mLBOrig) +
        proc_control_node_B.b_mIneq) - 1];
    memspace->workspace_int.data[proc_control_node_B.b_mIneq + 104] = tf;
    proc_control_node_B.temp_mw += tf;
    proc_control_node_B.b_mIneq++;
  }

  if (TrialState->state != -6) {
    proc_control_node_B.b_mIneq = (proc_control_node_B.b_WorkingSet.nVarMax -
      proc_control_node_B.nVarOrig) - 1;
    proc_control_node_B.qpfvalLinearExcess = 0.0;
    proc_control_node_B.qpfvalQuadExcess = 0.0;
    if (proc_control_node_B.b_mIneq >= 1) {
      proc_control_node_B.mLBOrig = proc_control_node_B.nVarOrig +
        proc_control_node_B.b_mIneq;
      proc_control_node_B.mFiniteLB = proc_control_node_B.nVarOrig;
      while (proc_control_node_B.mFiniteLB + 1 <= proc_control_node_B.mLBOrig) {
        proc_control_node_B.qpfvalLinearExcess += fabs(TrialState->
          xstar.data[proc_control_node_B.mFiniteLB]);
        proc_control_node_B.mFiniteLB++;
      }

      proc_control_node_B.mLBOrig = proc_control_node_B.nVarOrig;
      proc_control_node_B.mFiniteLB = proc_control_node_B.nVarOrig;
      proc_control_node_B.tf_tmp = 0;
      while (proc_control_node_B.tf_tmp <= proc_control_node_B.b_mIneq - 1) {
        proc_control_node_B.qpfvalQuadExcess += TrialState->
          xstar.data[proc_control_node_B.mLBOrig] * TrialState->
          xstar.data[proc_control_node_B.mFiniteLB];
        proc_control_node_B.mLBOrig++;
        proc_control_node_B.mFiniteLB++;
        proc_control_node_B.tf_tmp++;
      }
    }

    proc_control_node_B.beta_l = (TrialState->fstar - proc_control_node_B.rho *
      proc_control_node_B.qpfvalLinearExcess) - proc_control_node_B.beta_l / 2.0
      * proc_control_node_B.qpfvalQuadExcess;
    proc_control_node_B.b_mIneq = (proc_control_node_B.nVarMax -
      proc_control_node_B.nVarOrig) - 1;
    proc_control_node_B.rho = MeritFunction->penaltyParam;
    proc_control_node_B.qpfvalLinearExcess = 0.0;
    for (proc_control_node_B.nVarMax = 0; proc_control_node_B.nVarMax < 52;
         proc_control_node_B.nVarMax++) {
      proc_control_node_B.qpfvalLinearExcess += fabs(TrialState->
        cEq[proc_control_node_B.nVarMax]);
    }

    proc_control_node_B.qpfvalQuadExcess = 0.0;
    proc_control_node_B.nVarMax = 0;
    while (proc_control_node_B.nVarMax <= proc_control_node_B.mIneq_d - 1) {
      if (TrialState->cIneq.data[proc_control_node_B.nVarMax] > 0.0) {
        proc_control_node_B.qpfvalQuadExcess += TrialState->
          cIneq.data[proc_control_node_B.nVarMax];
      }

      proc_control_node_B.nVarMax++;
    }

    proc_control_node_B.qpfvalLinearExcess +=
      proc_control_node_B.qpfvalQuadExcess;
    proc_control_node_B.qpfvalQuadExcess = MeritFunction->linearizedConstrViol;
    proc_control_node_B.y_i = 0.0;
    if (proc_control_node_B.b_mIneq >= 1) {
      proc_control_node_B.mIneq_d = proc_control_node_B.nVarOrig +
        proc_control_node_B.b_mIneq;
      proc_control_node_B.nVarMax = proc_control_node_B.nVarOrig;
      while (proc_control_node_B.nVarMax + 1 <= proc_control_node_B.mIneq_d) {
        proc_control_node_B.y_i += fabs(TrialState->
          xstar.data[proc_control_node_B.nVarMax]);
        proc_control_node_B.nVarMax++;
      }
    }

    MeritFunction->linearizedConstrViol = proc_control_node_B.y_i;
    proc_control_node_B.qpfvalQuadExcess =
      (proc_control_node_B.qpfvalLinearExcess +
       proc_control_node_B.qpfvalQuadExcess) - proc_control_node_B.y_i;
    if ((proc_control_node_B.qpfvalQuadExcess > 2.2204460492503131E-16) &&
        (proc_control_node_B.beta_l > 0.0)) {
      if (TrialState->sqpFval == 0.0) {
        proc_control_node_B.rho = 1.0;
      } else {
        proc_control_node_B.rho = 1.5;
      }

      proc_control_node_B.rho = proc_control_node_B.rho *
        proc_control_node_B.beta_l / proc_control_node_B.qpfvalQuadExcess;
    }

    if (proc_control_node_B.rho < MeritFunction->penaltyParam) {
      MeritFunction->phi = proc_control_node_B.rho *
        proc_control_node_B.qpfvalLinearExcess + TrialState->sqpFval;
      if (((MeritFunction->initConstrViolationEq +
            MeritFunction->initConstrViolationIneq) * proc_control_node_B.rho +
           MeritFunction->initFval) - MeritFunction->phi > static_cast<real_T>
          (MeritFunction->nPenaltyDecreases) * MeritFunction->threshold) {
        MeritFunction->nPenaltyDecreases++;
        if ((MeritFunction->nPenaltyDecreases << 1) > TrialState->sqpIterations)
        {
          MeritFunction->threshold *= 10.0;
        }

        if (proc_control_node_B.rho > 1.0E-10) {
          MeritFunction->penaltyParam = proc_control_node_B.rho;
        } else {
          MeritFunction->penaltyParam = 1.0E-10;
        }
      } else {
        MeritFunction->phi = MeritFunction->penaltyParam *
          proc_control_node_B.qpfvalLinearExcess + TrialState->sqpFval;
      }
    } else {
      if (!(proc_control_node_B.rho > 1.0E-10)) {
        proc_control_node_B.rho = 1.0E-10;
      }

      MeritFunction->penaltyParam = proc_control_node_B.rho;
      MeritFunction->phi = proc_control_node_B.rho *
        proc_control_node_B.qpfvalLinearExcess + TrialState->sqpFval;
    }

    proc_control_node_B.beta_l -= MeritFunction->penaltyParam *
      proc_control_node_B.qpfvalLinearExcess;
    if (proc_control_node_B.beta_l < 0.0) {
      MeritFunction->phiPrimePlus = proc_control_node_B.beta_l;
    } else {
      MeritFunction->phiPrimePlus = 0.0;
    }

    proc_control_node_B.b_mIneq = proc_control_node_B.b_WorkingSet.isActiveIdx[1]
      - 1;
    for (proc_control_node_B.nVarMax = 0; proc_control_node_B.nVarMax < 52;
         proc_control_node_B.nVarMax++) {
      if (memspace->workspace_int.data[proc_control_node_B.nVarMax] != 0) {
        if (memspace->workspace_int.data[proc_control_node_B.nVarMax + 52] != 0)
        {
          tf = true;
        } else {
          tf = false;
        }
      } else {
        tf = false;
      }

      proc_control_node_B.mIneq_d = proc_control_node_B.b_mIneq +
        proc_control_node_B.nVarMax;
      TrialState->lambda.data[proc_control_node_B.mIneq_d] *= static_cast<real_T>
        (tf);
    }

    proc_control_node_B.mIneq_d = proc_control_node_B.b_WorkingSet.isActiveIdx[2]
      - 1;
    while (proc_control_node_B.mIneq_d + 1 <=
           proc_control_node_B.b_WorkingSet.nActiveConstr) {
      if (proc_control_node_B.b_WorkingSet.Wid.data[proc_control_node_B.mIneq_d]
          == 3) {
        TrialState->lambda.data[proc_control_node_B.mIneq_d] *=
          static_cast<real_T>(memspace->
                              workspace_int.data[proc_control_node_B.b_WorkingSet.Wlocalidx.data
                              [proc_control_node_B.mIneq_d] + 103]);
      }

      proc_control_node_B.mIneq_d++;
    }
  }

  *WorkingSet = proc_control_node_B.b_WorkingSet;
  proc_control_node_B.mIneq_d = (proc_control_node_B.b_WorkingSet.sizes[3] -
    proc_control_node_B.b_WorkingSet.sizes[2]) - 104;
  proc_control_node_B.nVarMax = proc_control_node_B.b_WorkingSet.nActiveConstr;
  while ((proc_control_node_B.nVarMax > proc_control_node_B.b_WorkingSet.sizes[0]
          + 52) && (proc_control_node_B.temp_mw > 0)) {
    if ((WorkingSet->Wid.data[proc_control_node_B.nVarMax - 1] == 4) &&
        (WorkingSet->Wlocalidx.data[proc_control_node_B.nVarMax - 1] >
         proc_control_node_B.mIneq_d)) {
      proc_control_node_B.beta_l = TrialState->lambda.data
        [WorkingSet->nActiveConstr - 1];
      TrialState->lambda.data[WorkingSet->nActiveConstr - 1] = 0.0;
      TrialState->lambda.data[proc_control_node_B.nVarMax - 1] =
        proc_control_node_B.beta_l;
      proc_control_node_removeConstr(WorkingSet, proc_control_node_B.nVarMax);
      proc_control_node_B.temp_mw--;
    }

    proc_control_node_B.nVarMax--;
  }

  QPObjective->hasLinear = true;
  QPObjective->nvar = proc_control_node_B.nVarOrig;
  QPObjective->objtype = 3;
  proc_control_nod_setProblemType(WorkingSet, 3);
  proc_control_node_B.nVarOrig = memspace->workspace_double.size[0] *
    memspace->workspace_double.size[1];
  for (proc_control_node_B.mIneq_d = 0; proc_control_node_B.mIneq_d <
       proc_control_node_B.nVarOrig; proc_control_node_B.mIneq_d++) {
  }

  proc_control_node_sortLambdaQP(TrialState->lambda.data,
    WorkingSet->nActiveConstr, WorkingSet->sizes, WorkingSet->isActiveIdx,
    WorkingSet->Wid.data, WorkingSet->Wlocalidx.data,
    memspace->workspace_double.data);
}

// Function for MATLAB Function: '<S94>/NLMPC'
static boolean_T proc_control_node_step_n(int32_T *STEP_TYPE, real_T Hessian
  [4761], const real_T lb[69], s_YLC2gJhPBjEs8VvOTvcE4B_proc_T *TrialState,
  sG8JZ69axY52WWR6RKyApQC_proc__T *MeritFunction,
  s_JXDNdI64oJvyHGrBwTBHI_proc__T *memspace, s_MFLHEgKtV7gODWBOEr7maD_proc_T
  *WorkingSet, s_1UhBFHxHKUXshhZtLgMUHE_proc_T *QRManager,
  s_B2KneB7ks2RV0bvoJc0bxC_proc_T *CholManager, s_jPVC6k54fKlkrevS6u11qC_proc_T *
  QPObjective, s1TgE9KstXgkd2qJxO1bF4F_proc__T *qpoptions)
{
  int32_T exitg1;
  boolean_T checkBoundViolation;
  boolean_T guard1 = false;
  boolean_T stepSuccess;
  stepSuccess = true;
  checkBoundViolation = true;
  proc_control_node_B.nVar = WorkingSet->nVar - 1;
  if (*STEP_TYPE != 3) {
    proc_control_node_B.b_k_lt = 0;
    while (proc_control_node_B.b_k_lt <= proc_control_node_B.nVar) {
      TrialState->xstar.data[proc_control_node_B.b_k_lt] = TrialState->
        xstarsqp[proc_control_node_B.b_k_lt];
      proc_control_node_B.b_k_lt++;
    }
  } else {
    proc_control_node_B.y_size_idx_0_o = TrialState->searchDir.size;
    proc_control_node_B.iH0 = TrialState->searchDir.size;
    if (0 <= proc_control_node_B.iH0 - 1) {
      memcpy(&proc_control_node_B.y_data_o2[0], &TrialState->searchDir.data[0],
             proc_control_node_B.iH0 * sizeof(real_T));
    }

    proc_control_node_B.b_k_lt = 0;
    while (proc_control_node_B.b_k_lt <= proc_control_node_B.nVar) {
      proc_control_node_B.y_data_o2[proc_control_node_B.b_k_lt] =
        TrialState->xstar.data[proc_control_node_B.b_k_lt];
      proc_control_node_B.b_k_lt++;
    }

    if (0 <= proc_control_node_B.y_size_idx_0_o - 1) {
      memcpy(&TrialState->searchDir.data[0], &proc_control_node_B.y_data_o2[0],
             proc_control_node_B.y_size_idx_0_o * sizeof(real_T));
    }
  }

  do {
    exitg1 = 0;
    guard1 = false;
    switch (*STEP_TYPE) {
     case 1:
      proc_control_node_normal(Hessian, TrialState->grad.data, TrialState,
        MeritFunction, memspace, WorkingSet, QRManager, CholManager, QPObjective,
        qpoptions);
      if ((TrialState->state <= 0) && (TrialState->state != -6)) {
        *STEP_TYPE = 2;
      } else {
        proc_control_node_B.y_size_idx_0_o = TrialState->delta_x.size;
        proc_control_node_B.iH0 = TrialState->delta_x.size;
        if (0 <= proc_control_node_B.iH0 - 1) {
          memcpy(&proc_control_node_B.y_data_o2[0], &TrialState->delta_x.data[0],
                 proc_control_node_B.iH0 * sizeof(real_T));
        }

        proc_control_node_B.b_k_lt = 0;
        while (proc_control_node_B.b_k_lt <= proc_control_node_B.nVar) {
          proc_control_node_B.y_data_o2[proc_control_node_B.b_k_lt] =
            TrialState->xstar.data[proc_control_node_B.b_k_lt];
          proc_control_node_B.b_k_lt++;
        }

        if (0 <= proc_control_node_B.y_size_idx_0_o - 1) {
          memcpy(&TrialState->delta_x.data[0], &proc_control_node_B.y_data_o2[0],
                 proc_control_node_B.y_size_idx_0_o * sizeof(real_T));
        }

        guard1 = true;
      }
      break;

     case 2:
      proc_contro_removeAllIneqConstr(WorkingSet);
      proc_control_node_B.b_k_lt = 0;
      while (proc_control_node_B.b_k_lt <= WorkingSet->sizes[3] - 1) {
        proc_control_node_B.nrmGradInf = WorkingSet->lb.data
          [WorkingSet->indexLB.data[proc_control_node_B.b_k_lt] - 1];
        if (-TrialState->xstar.data[WorkingSet->
            indexLB.data[proc_control_node_B.b_k_lt] - 1] >
            proc_control_node_B.nrmGradInf) {
          TrialState->xstar.data[WorkingSet->
            indexLB.data[proc_control_node_B.b_k_lt] - 1] =
            -proc_control_node_B.nrmGradInf + fabs
            (proc_control_node_B.nrmGradInf);
        }

        proc_control_node_B.b_k_lt++;
      }

      proc_control_node_relaxed(Hessian, TrialState->grad.data, TrialState,
        MeritFunction, memspace, WorkingSet, QRManager, CholManager, QPObjective,
        qpoptions);
      proc_control_node_B.y_size_idx_0_o = TrialState->delta_x.size;
      proc_control_node_B.iH0 = TrialState->delta_x.size;
      if (0 <= proc_control_node_B.iH0 - 1) {
        memcpy(&proc_control_node_B.y_data_o2[0], &TrialState->delta_x.data[0],
               proc_control_node_B.iH0 * sizeof(real_T));
      }

      proc_control_node_B.b_k_lt = 0;
      while (proc_control_node_B.b_k_lt <= proc_control_node_B.nVar) {
        proc_control_node_B.y_data_o2[proc_control_node_B.b_k_lt] =
          TrialState->xstar.data[proc_control_node_B.b_k_lt];
        proc_control_node_B.b_k_lt++;
      }

      if (0 <= proc_control_node_B.y_size_idx_0_o - 1) {
        memcpy(&TrialState->delta_x.data[0], &proc_control_node_B.y_data_o2[0],
               proc_control_node_B.y_size_idx_0_o * sizeof(real_T));
      }

      guard1 = true;
      break;

     default:
      stepSuccess = proc_control_node_soc(Hessian, TrialState->grad.data,
        TrialState, memspace, WorkingSet, QRManager, CholManager, QPObjective,
        qpoptions);
      checkBoundViolation = stepSuccess;
      if (stepSuccess && (TrialState->state != -6)) {
        proc_control_node_B.b_k_lt = 0;
        while (proc_control_node_B.b_k_lt <= proc_control_node_B.nVar) {
          TrialState->delta_x.data[proc_control_node_B.b_k_lt] =
            TrialState->xstar.data[proc_control_node_B.b_k_lt] +
            TrialState->socDirection.data[proc_control_node_B.b_k_lt];
          proc_control_node_B.b_k_lt++;
        }
      }

      guard1 = true;
      break;
    }

    if (guard1) {
      if (TrialState->state != -6) {
        exitg1 = 1;
      } else {
        proc_control_node_B.nrmGradInf = 0.0;
        proc_control_node_B.nrmDirInf = 1.0;
        for (proc_control_node_B.b_k_lt = 0; proc_control_node_B.b_k_lt < 69;
             proc_control_node_B.b_k_lt++) {
          proc_control_node_B.u1 = fabs(TrialState->
            grad.data[proc_control_node_B.b_k_lt]);
          if ((!(proc_control_node_B.nrmGradInf > proc_control_node_B.u1)) &&
              (!rtIsNaN(proc_control_node_B.u1))) {
            proc_control_node_B.nrmGradInf = proc_control_node_B.u1;
          }

          proc_control_node_B.u1 = fabs(TrialState->
            xstar.data[proc_control_node_B.b_k_lt]);
          if ((!(proc_control_node_B.nrmDirInf > proc_control_node_B.u1)) &&
              (!rtIsNaN(proc_control_node_B.u1))) {
            proc_control_node_B.nrmDirInf = proc_control_node_B.u1;
          }
        }

        proc_control_node_B.nrmGradInf /= proc_control_node_B.nrmDirInf;
        if ((2.2204460492503131E-16 > proc_control_node_B.nrmGradInf) || rtIsNaN
            (proc_control_node_B.nrmGradInf)) {
          proc_control_node_B.nrmGradInf = 2.2204460492503131E-16;
        }

        for (proc_control_node_B.b_k_lt = 0; proc_control_node_B.b_k_lt < 69;
             proc_control_node_B.b_k_lt++) {
          proc_control_node_B.iH0 = 69 * proc_control_node_B.b_k_lt;
          proc_control_node_B.y_size_idx_0_o = 0;
          while (proc_control_node_B.y_size_idx_0_o <=
                 proc_control_node_B.b_k_lt - 1) {
            Hessian[proc_control_node_B.iH0 + proc_control_node_B.y_size_idx_0_o]
              = 0.0;
            proc_control_node_B.y_size_idx_0_o++;
          }

          Hessian[proc_control_node_B.b_k_lt + 69 * proc_control_node_B.b_k_lt] =
            proc_control_node_B.nrmGradInf;
          proc_control_node_B.iH0 += proc_control_node_B.b_k_lt;
          proc_control_node_B.y_size_idx_0_o = 0;
          while (proc_control_node_B.y_size_idx_0_o <= 67 -
                 proc_control_node_B.b_k_lt) {
            Hessian[(proc_control_node_B.iH0 +
                     proc_control_node_B.y_size_idx_0_o) + 1] = 0.0;
            proc_control_node_B.y_size_idx_0_o++;
          }
        }
      }
    }
  } while (exitg1 == 0);

  if (checkBoundViolation) {
    proc_control_node_B.nVar = 0;
    while (proc_control_node_B.nVar <= WorkingSet->sizes[3] - 1) {
      proc_control_node_B.nrmGradInf = TrialState->delta_x.data
        [WorkingSet->indexLB.data[proc_control_node_B.nVar] - 1];
      proc_control_node_B.nrmDirInf = (TrialState->xstarsqp
        [WorkingSet->indexLB.data[proc_control_node_B.nVar] - 1] +
        proc_control_node_B.nrmGradInf) - lb[WorkingSet->
        indexLB.data[proc_control_node_B.nVar] - 1];
      if (proc_control_node_B.nrmDirInf < 0.0) {
        TrialState->delta_x.data[WorkingSet->
          indexLB.data[proc_control_node_B.nVar] - 1] =
          proc_control_node_B.nrmGradInf - proc_control_node_B.nrmDirInf;
        TrialState->xstar.data[WorkingSet->indexLB.data[proc_control_node_B.nVar]
          - 1] -= proc_control_node_B.nrmDirInf;
      }

      proc_control_node_B.nVar++;
    }
  }

  return stepSuccess;
}

// Function for MATLAB Function: '<S94>/NLMPC'
static real_T proc_control_node_anon_ep(const real_T runtimedata_x[13], const
  real_T runtimedata_lastMV[8], const real_T runtimedata_ref[52], const real_T
  runtimedata_OutputWeights[52], const real_T runtimedata_MVWeights[32], const
  real_T runtimedata_MVRateWeights[32], const real_T runtimedata_MVScaledTarget
  [32], const real_T z[69])
{
  real_T varargout_1;
  int32_T wtYerr_tmp;
  proc_control_node_znlmpc_getXUe(z, runtimedata_x, proc_control_node_B.X_o,
    proc_control_node_B.U_o, &proc_control_node_B.e_na);
  proc_control_node_B.fs = 0.0;
  for (proc_control_node_B.i_ak = 0; proc_control_node_B.i_ak < 5;
       proc_control_node_B.i_ak++) {
    for (proc_control_node_B.i_l = 0; proc_control_node_B.i_l < 13;
         proc_control_node_B.i_l++) {
      proc_control_node_B.b_X_n[proc_control_node_B.i_l + 13 *
        proc_control_node_B.i_ak] = proc_control_node_B.X_o[5 *
        proc_control_node_B.i_l + proc_control_node_B.i_ak];
    }

    for (proc_control_node_B.i_l = 0; proc_control_node_B.i_l < 8;
         proc_control_node_B.i_l++) {
      proc_control_node_B.b_U_c[proc_control_node_B.i_l +
        (proc_control_node_B.i_ak << 3)] = proc_control_node_B.U_o[5 *
        proc_control_node_B.i_l + proc_control_node_B.i_ak];
    }
  }

  for (proc_control_node_B.i_l = 0; proc_control_node_B.i_l < 4;
       proc_control_node_B.i_l++) {
    proc_control_node_B.wtYerr = 0.0;
    for (proc_control_node_B.i_ak = 0; proc_control_node_B.i_ak < 13;
         proc_control_node_B.i_ak++) {
      wtYerr_tmp = (proc_control_node_B.i_ak << 2) + proc_control_node_B.i_l;
      proc_control_node_B.wtYerr_o = (proc_control_node_B.b_X_n
        [(proc_control_node_B.i_l + 1) * 13 + proc_control_node_B.i_ak] -
        runtimedata_ref[wtYerr_tmp]) * runtimedata_OutputWeights[wtYerr_tmp];
      proc_control_node_B.wtYerr += proc_control_node_B.wtYerr_o *
        proc_control_node_B.wtYerr_o;
    }

    proc_control_node_B.fs += proc_control_node_B.wtYerr;
    memcpy(&proc_control_node_B.umvk[0],
           &proc_control_node_B.b_U_c[proc_control_node_B.i_l << 3], sizeof
           (real_T) << 3U);
    if (proc_control_node_B.i_l + 1 == 1) {
      for (proc_control_node_B.i_ak = 0; proc_control_node_B.i_ak < 8;
           proc_control_node_B.i_ak++) {
        proc_control_node_B.duk[proc_control_node_B.i_ak] =
          proc_control_node_B.umvk[proc_control_node_B.i_ak] -
          runtimedata_lastMV[proc_control_node_B.i_ak];
      }
    } else {
      for (proc_control_node_B.i_ak = 0; proc_control_node_B.i_ak < 8;
           proc_control_node_B.i_ak++) {
        proc_control_node_B.duk[proc_control_node_B.i_ak] =
          proc_control_node_B.umvk[proc_control_node_B.i_ak] -
          proc_control_node_B.b_U_c[((proc_control_node_B.i_l - 1) << 3) +
          proc_control_node_B.i_ak];
      }
    }

    proc_control_node_B.wtYerr = 0.0;
    proc_control_node_B.wtYerr_o = 0.0;
    for (proc_control_node_B.i_ak = 0; proc_control_node_B.i_ak < 8;
         proc_control_node_B.i_ak++) {
      wtYerr_tmp = (proc_control_node_B.i_ak << 2) + proc_control_node_B.i_l;
      proc_control_node_B.umvk_ad =
        (proc_control_node_B.umvk[proc_control_node_B.i_ak] -
         runtimedata_MVScaledTarget[wtYerr_tmp]) *
        runtimedata_MVWeights[wtYerr_tmp];
      proc_control_node_B.duk_b = runtimedata_MVRateWeights[wtYerr_tmp] *
        proc_control_node_B.duk[proc_control_node_B.i_ak];
      proc_control_node_B.wtYerr += proc_control_node_B.umvk_ad *
        proc_control_node_B.umvk_ad;
      proc_control_node_B.wtYerr_o += proc_control_node_B.duk_b *
        proc_control_node_B.duk_b;
      proc_control_node_B.umvk[proc_control_node_B.i_ak] =
        proc_control_node_B.umvk_ad;
      proc_control_node_B.duk[proc_control_node_B.i_ak] =
        proc_control_node_B.duk_b;
    }

    proc_control_node_B.fs = (proc_control_node_B.fs +
      proc_control_node_B.wtYerr) + proc_control_node_B.wtYerr_o;
  }

  varargout_1 = 100000.0 * proc_control_node_B.e_na * proc_control_node_B.e_na +
    proc_control_node_B.fs;
  return varargout_1;
}

// Function for MATLAB Function: '<S94>/NLMPC'
static void proc_control__computeObjective_(const real_T
  obj_objfun_workspace_runtimedat[13], const real_T
  obj_objfun_workspace_runtimed_0[8], const real_T
  obj_objfun_workspace_runtimed_1[52], const real_T
  obj_objfun_workspace_runtimed_2[52], const real_T
  obj_objfun_workspace_runtimed_3[32], const real_T
  obj_objfun_workspace_runtimed_4[32], const real_T
  obj_objfun_workspace_runtimed_5[32], const real_T x[69], real_T *fval, int32_T
  *status)
{
  *fval = proc_control_node_anon_ep(obj_objfun_workspace_runtimedat,
    obj_objfun_workspace_runtimed_0, obj_objfun_workspace_runtimed_1,
    obj_objfun_workspace_runtimed_2, obj_objfun_workspace_runtimed_3,
    obj_objfun_workspace_runtimed_4, obj_objfun_workspace_runtimed_5, x);
  *status = 1;
  if (rtIsInf(*fval) || rtIsNaN(*fval)) {
    if (rtIsNaN(*fval)) {
      *status = -3;
    } else if (*fval < 0.0) {
      *status = -1;
    } else {
      *status = -2;
    }
  }
}

// Function for MATLAB Function: '<S94>/NLMPC'
static void proc_control_n_stateEvolution_b(const real_T X[65], const real_T U
  [40], real_T c[52])
{
  int32_T i;
  int32_T i_0;
  int32_T i_1;
  memset(&c[0], 0, 52U * sizeof(real_T));
  for (i_0 = 0; i_0 < 13; i_0++) {
    proc_control_node_B.ic_ge[i_0] = static_cast<real_T>(i_0) + 1.0;
  }

  for (i_0 = 0; i_0 < 5; i_0++) {
    for (i_1 = 0; i_1 < 8; i_1++) {
      proc_control_node_B.b_U_e[i_1 + (i_0 << 3)] = U[5 * i_1 + i_0];
    }

    for (i_1 = 0; i_1 < 13; i_1++) {
      proc_control_node_B.b_X_p[i_1 + 13 * i_0] = X[5 * i_1 + i_0];
    }
  }

  for (i = 0; i < 4; i++) {
    i_0 = i << 3;
    proc_control_node_AUVQuatSimFcn(&proc_control_node_B.b_X_p[13 * i],
      &proc_control_node_B.b_U_e[i_0], proc_control_node_B.dv16);
    i_1 = (i + 1) * 13;
    proc_control_node_AUVQuatSimFcn(&proc_control_node_B.b_X_p[i_1],
      &proc_control_node_B.b_U_e[i_0], proc_control_node_B.dv17);
    for (i_0 = 0; i_0 < 13; i_0++) {
      c[static_cast<int32_T>(proc_control_node_B.ic_ge[i_0]) - 1] =
        (proc_control_node_B.b_X_p[13 * i + i_0] + (proc_control_node_B.dv16[i_0]
          + proc_control_node_B.dv17[i_0]) * 0.125) -
        proc_control_node_B.b_X_p[i_1 + i_0];
    }

    for (i_0 = 0; i_0 < 13; i_0++) {
      proc_control_node_B.ic_ge[i_0] += 13.0;
    }
  }
}

// Function for MATLAB Function: '<S94>/NLMPC'
static void proc_control_nod_outputBounds_p(const real_T runtimedata_OutputMin
  [52], const real_T runtimedata_OutputMax[52], const real_T X[65], real_T e,
  real_T c_data[], int32_T c_size[2])
{
  int32_T b_size_idx_0;
  int32_T i;
  int32_T k;
  boolean_T exitg1;
  boolean_T y;
  for (k = 0; k < 52; k++) {
    proc_control_node_B.bv[k] = rtIsInf(runtimedata_OutputMin[k]);
  }

  proc_control_node_all(proc_control_node_B.bv, proc_control_node_B.x_fo);
  y = true;
  k = 0;
  exitg1 = false;
  while ((!exitg1) && (k < 13)) {
    if (!proc_control_node_B.x_fo[k]) {
      y = false;
      exitg1 = true;
    } else {
      k++;
    }
  }

  if (y) {
    for (k = 0; k < 52; k++) {
      proc_control_node_B.bv[k] = rtIsInf(runtimedata_OutputMax[k]);
    }

    proc_control_node_all(proc_control_node_B.bv, proc_control_node_B.x_fo);
    y = true;
    k = 0;
    exitg1 = false;
    while ((!exitg1) && (k < 13)) {
      if (!proc_control_node_B.x_fo[k]) {
        y = false;
        exitg1 = true;
      } else {
        k++;
      }
    }
  } else {
    y = false;
  }

  if (y) {
    c_size[0] = 0;
    c_size[1] = 0;
  } else {
    for (i = 0; i < 104; i++) {
      proc_control_node_B.b_c[i] = 0.0;
      proc_control_node_B.icf_n[i] = true;
    }

    for (k = 0; k < 13; k++) {
      proc_control_node_B.ic_e[k] = static_cast<real_T>(k) + 1.0;
    }

    for (i = 0; i < 4; i++) {
      for (k = 0; k < 13; k++) {
        proc_control_node_B.runtimedata_OutputMin[k] = runtimedata_OutputMin[(k <<
          2) + i];
      }

      proc_control_node_isfinite_m(proc_control_node_B.runtimedata_OutputMin,
        proc_control_node_B.x_fo);
      for (k = 0; k < 13; k++) {
        proc_control_node_B.icf_n[static_cast<int32_T>
          (proc_control_node_B.ic_e[k]) - 1] = proc_control_node_B.x_fo[k];
        proc_control_node_B.runtimedata_OutputMin[k] = runtimedata_OutputMax[(k <<
          2) + i];
      }

      proc_control_node_isfinite_m(proc_control_node_B.runtimedata_OutputMin,
        proc_control_node_B.x_fo);
      for (k = 0; k < 13; k++) {
        proc_control_node_B.ic_b = proc_control_node_B.ic_e[k];
        proc_control_node_B.icf_n[static_cast<int32_T>(proc_control_node_B.ic_b
          + 13.0) - 1] = proc_control_node_B.x_fo[k];
        proc_control_node_B.ic[k] = static_cast<int32_T>
          (proc_control_node_B.ic_b) - 1;
        proc_control_node_B.ic[k + 13] = static_cast<int32_T>
          (proc_control_node_B.ic_b + 13.0) - 1;
      }

      for (k = 0; k < 26; k++) {
        proc_control_node_B.icf_i[k] =
          proc_control_node_B.icf_n[proc_control_node_B.ic[k]];
      }

      if (proc_control_node_any(proc_control_node_B.icf_i)) {
        for (k = 0; k < 13; k++) {
          proc_control_node_B.b_c[static_cast<int32_T>
            (proc_control_node_B.ic_e[k]) - 1] = (runtimedata_OutputMin[(k << 2)
            + i] - e) - X[(5 * k + i) + 1];
        }

        for (k = 0; k < 13; k++) {
          proc_control_node_B.b_c[static_cast<int32_T>
            (proc_control_node_B.ic_e[k] + 13.0) - 1] = (X[(5 * k + i) + 1] -
            runtimedata_OutputMax[(k << 2) + i]) - e;
        }
      }

      for (k = 0; k < 13; k++) {
        proc_control_node_B.ic_e[k] += 26.0;
      }
    }

    k = 0;
    for (i = 0; i < 104; i++) {
      if (proc_control_node_B.icf_n[i]) {
        k++;
      }
    }

    b_size_idx_0 = k;
    k = 0;
    for (i = 0; i < 104; i++) {
      if (proc_control_node_B.icf_n[i]) {
        proc_control_node_B.b_data_i[k] = static_cast<int8_T>(i + 1);
        k++;
      }
    }

    for (k = 0; k < b_size_idx_0; k++) {
      proc_control_node_B.b_c_data[k] =
        proc_control_node_B.b_c[proc_control_node_B.b_data_i[k] - 1];
    }

    c_size[0] = b_size_idx_0;
    c_size[1] = 1;
    if (0 <= b_size_idx_0 - 1) {
      memcpy(&c_data[0], &proc_control_node_B.b_c_data[0], b_size_idx_0 * sizeof
             (real_T));
    }
  }
}

// Function for MATLAB Function: '<S94>/NLMPC'
static void proc_control_node_anon_epa(const real_T runtimedata_x[13], const
  real_T runtimedata_OutputMin[52], const real_T runtimedata_OutputMax[52],
  const real_T z[69], real_T varargout_1_data[], int32_T varargout_1_size[2],
  real_T varargout_2[52])
{
  proc_control_node_znlmpc_getXUe(z, runtimedata_x, proc_control_node_B.X_p,
    proc_control_node_B.U_h, &proc_control_node_B.e_m);
  proc_control_n_stateEvolution_b(proc_control_node_B.X_p,
    proc_control_node_B.U_h, varargout_2);
  proc_control_nod_outputBounds_p(runtimedata_OutputMin, runtimedata_OutputMax,
    proc_control_node_B.X_p, proc_control_node_B.e_m,
    proc_control_node_B.c_data_b, proc_control_node_B.c_size_g);
  proc_control_node_B.result_m0 = ((proc_control_node_B.c_size_g[0] != 0) &&
    (proc_control_node_B.c_size_g[1] != 0));
  if (proc_control_node_B.result_m0 == 0) {
    proc_control_node_B.result_idx_0_p = proc_control_node_B.c_size_g[0];
  } else if ((proc_control_node_B.c_size_g[0] != 0) &&
             (proc_control_node_B.c_size_g[1] != 0)) {
    proc_control_node_B.result_idx_0_p = proc_control_node_B.c_size_g[0];
  } else {
    proc_control_node_B.result_idx_0_p = 0;
  }

  varargout_1_size[0] = proc_control_node_B.result_idx_0_p;
  varargout_1_size[1] = proc_control_node_B.result_m0;
  if ((0 <= proc_control_node_B.result_m0 - 1) && (0 <=
       proc_control_node_B.result_idx_0_p - 1)) {
    memcpy(&varargout_1_data[0], &proc_control_node_B.c_data_b[0],
           proc_control_node_B.result_idx_0_p * sizeof(real_T));
  }
}

// Function for MATLAB Function: '<S94>/NLMPC'
static int32_T proc_contro_computeConstraints_(const real_T
  obj_nonlcon_workspace_runtimeda[13], const real_T
  obj_nonlcon_workspace_runtime_0[52], const real_T
  obj_nonlcon_workspace_runtime_1[52], int32_T obj_mCineq, const real_T x[69],
  real_T Cineq_workspace_data[], int32_T ineq0, real_T Ceq_workspace[52])
{
  int32_T status;
  proc_control_node_B.ineqEnd = (ineq0 + obj_mCineq) - 2;
  proc_control_node_anon_epa(obj_nonlcon_workspace_runtimeda,
    obj_nonlcon_workspace_runtime_0, obj_nonlcon_workspace_runtime_1, x,
    proc_control_node_B.varargout_1_data_o,
    proc_control_node_B.varargout_1_size_g, proc_control_node_B.varargout_2_k);
  if (ineq0 > proc_control_node_B.ineqEnd + 1) {
    proc_control_node_B.c_nj = -1;
    proc_control_node_B.ineqEnd = -1;
  } else {
    proc_control_node_B.c_nj = ineq0 - 2;
  }

  proc_control_node_B.unnamed_idx_1 = proc_control_node_B.ineqEnd -
    proc_control_node_B.c_nj;
  for (proc_control_node_B.ineqEnd = 0; proc_control_node_B.ineqEnd <
       proc_control_node_B.unnamed_idx_1; proc_control_node_B.ineqEnd++) {
    Cineq_workspace_data[(proc_control_node_B.c_nj + proc_control_node_B.ineqEnd)
      + 1] = proc_control_node_B.varargout_1_data_o[proc_control_node_B.ineqEnd];
  }

  memcpy(&Ceq_workspace[0], &proc_control_node_B.varargout_2_k[0], 52U * sizeof
         (real_T));
  status = proc_contr_checkVectorNonFinite(obj_mCineq, Cineq_workspace_data,
    ineq0);
  if (status == 1) {
    status = proc_con_checkVectorNonFinite_e(Ceq_workspace);
  }

  return status;
}

// Function for MATLAB Function: '<S94>/NLMPC'
static void proc_control_n_evalObjAndConstr(const real_T
  obj_objfun_workspace_runtimedat[13], const real_T
  obj_objfun_workspace_runtimed_0[8], const real_T
  obj_objfun_workspace_runtimed_1[52], const real_T
  obj_objfun_workspace_runtimed_2[52], const real_T
  obj_objfun_workspace_runtimed_3[32], const real_T
  obj_objfun_workspace_runtimed_4[32], const real_T
  obj_objfun_workspace_runtimed_5[32], const real_T
  obj_nonlcon_workspace_runtimeda[13], const real_T
  obj_nonlcon_workspace_runtime_0[52], const real_T
  obj_nonlcon_workspace_runtime_1[52], int32_T obj_mCineq, const real_T x[69],
  real_T Cineq_workspace_data[], int32_T ineq0, real_T Ceq_workspace[52], real_T
  *fval, int32_T *status)
{
  proc_control__computeObjective_(obj_objfun_workspace_runtimedat,
    obj_objfun_workspace_runtimed_0, obj_objfun_workspace_runtimed_1,
    obj_objfun_workspace_runtimed_2, obj_objfun_workspace_runtimed_3,
    obj_objfun_workspace_runtimed_4, obj_objfun_workspace_runtimed_5, x, fval,
    status);
  if (*status == 1) {
    *status = proc_contro_computeConstraints_(obj_nonlcon_workspace_runtimeda,
      obj_nonlcon_workspace_runtime_0, obj_nonlcon_workspace_runtime_1,
      obj_mCineq, x, Cineq_workspace_data, ineq0, Ceq_workspace);
  }
}

// Function for MATLAB Function: '<S94>/NLMPC'
static void proc_con_computeLinearResiduals(const real_T x[69], int32_T nVar,
  real_T workspaceIneq_data[], const int32_T *workspaceIneq_size, int32_T
  mLinIneq, const real_T AineqT_data[], const real_T bineq_data[], int32_T ldAi)
{
  int32_T b;
  int32_T ia;
  int32_T ix;
  int32_T loop_ub;
  int32_T y_size_idx_0;
  if (mLinIneq > 0) {
    if (0 <= *workspaceIneq_size - 1) {
      memcpy(&proc_control_node_B.y_data_ff[0], &workspaceIneq_data[0],
             *workspaceIneq_size * sizeof(real_T));
    }

    proc_control_node_B.k_ee = 0;
    while (proc_control_node_B.k_ee <= mLinIneq - 1) {
      proc_control_node_B.y_data_ff[proc_control_node_B.k_ee] =
        bineq_data[proc_control_node_B.k_ee];
      proc_control_node_B.k_ee++;
    }

    if (0 <= *workspaceIneq_size - 1) {
      memcpy(&workspaceIneq_data[0], &proc_control_node_B.y_data_ff[0],
             *workspaceIneq_size * sizeof(real_T));
    }

    proc_control_node_B.k_ee = 0;
    while (proc_control_node_B.k_ee <= mLinIneq - 1) {
      workspaceIneq_data[proc_control_node_B.k_ee] =
        -workspaceIneq_data[proc_control_node_B.k_ee];
      proc_control_node_B.k_ee++;
    }

    proc_control_node_B.k_ee = 0;
    loop_ub = (mLinIneq - 1) * ldAi + 1;
    y_size_idx_0 = 1;
    while (((ldAi > 0) && (y_size_idx_0 <= loop_ub)) || ((ldAi < 0) &&
            (y_size_idx_0 >= loop_ub))) {
      ix = 0;
      proc_control_node_B.c_pi = 0.0;
      b = (y_size_idx_0 + nVar) - 1;
      for (ia = y_size_idx_0; ia <= b; ia++) {
        proc_control_node_B.c_pi += AineqT_data[ia - 1] * x[ix];
        ix++;
      }

      workspaceIneq_data[proc_control_node_B.k_ee] += proc_control_node_B.c_pi;
      proc_control_node_B.k_ee++;
      y_size_idx_0 += ldAi;
    }
  }
}

// Function for MATLAB Function: '<S94>/NLMPC'
static real_T proc_control_no_computeMeritFcn(real_T obj_penaltyParam, real_T
  fval, const real_T Cineq_workspace_data[], int32_T mIneq, const real_T
  Ceq_workspace[52], boolean_T evalWellDefined)
{
  real_T constrViolationEq;
  real_T constrViolationIneq;
  real_T val;
  int32_T k;
  if (evalWellDefined) {
    constrViolationEq = 0.0;
    for (k = 0; k < 52; k++) {
      constrViolationEq += fabs(Ceq_workspace[k]);
    }

    constrViolationIneq = 0.0;
    for (k = 0; k < mIneq; k++) {
      if (Cineq_workspace_data[k] > 0.0) {
        constrViolationIneq += Cineq_workspace_data[k];
      }
    }

    val = (constrViolationEq + constrViolationIneq) * obj_penaltyParam + fval;
  } else {
    val = (rtInf);
  }

  return val;
}

// Function for MATLAB Function: '<S94>/NLMPC'
static void proc_control_node_linesearch(boolean_T *evalWellDefined, const
  real_T bineq_data[], int32_T WorkingSet_nVar, int32_T WorkingSet_ldA, const
  real_T WorkingSet_Aineq_data[], s_YLC2gJhPBjEs8VvOTvcE4B_proc_T *TrialState,
  real_T MeritFunction_penaltyParam, real_T MeritFunction_phi, real_T
  MeritFunction_phiPrimePlus, real_T MeritFunction_phiFullStep, const
  s_REWc8VgrfSKVLBFK433XbH_proc_T *FcnEvaluator_objfun_workspace_r, const
  s_REWc8VgrfSKVLBFK433XbH_proc_T *FcnEvaluator_nonlcon_workspace_, int32_T
  FcnEvaluator_mCineq, boolean_T socTaken, real_T *alpha, int32_T *exitflag)
{
  int32_T exitg1;
  boolean_T exitg2;
  boolean_T tooSmallX;
  proc_control_node_B.mLinIneq = TrialState->mIneq - TrialState->mNonlinIneq;
  *alpha = 1.0;
  *exitflag = 1;
  proc_control_node_B.phi_alpha = MeritFunction_phiFullStep;
  proc_control_node_B.y_size_idx_0_i = TrialState->searchDir.size;
  proc_control_node_B.loop_ub_n = TrialState->searchDir.size;
  if (0 <= proc_control_node_B.loop_ub_n - 1) {
    memcpy(&proc_control_node_B.y_data_g[0], &TrialState->searchDir.data[0],
           proc_control_node_B.loop_ub_n * sizeof(real_T));
  }

  proc_control_node_B.loop_ub_n = 0;
  while (proc_control_node_B.loop_ub_n <= WorkingSet_nVar - 1) {
    proc_control_node_B.y_data_g[proc_control_node_B.loop_ub_n] =
      TrialState->delta_x.data[proc_control_node_B.loop_ub_n];
    proc_control_node_B.loop_ub_n++;
  }

  if (0 <= proc_control_node_B.y_size_idx_0_i - 1) {
    memcpy(&TrialState->searchDir.data[0], &proc_control_node_B.y_data_g[0],
           proc_control_node_B.y_size_idx_0_i * sizeof(real_T));
  }

  do {
    exitg1 = 0;
    if (TrialState->FunctionEvaluations < 6900) {
      if ((*evalWellDefined) && (proc_control_node_B.phi_alpha <= *alpha *
           0.0001 * MeritFunction_phiPrimePlus + MeritFunction_phi)) {
        exitg1 = 1;
      } else {
        *alpha *= 0.7;
        proc_control_node_B.loop_ub_n = 0;
        while (proc_control_node_B.loop_ub_n <= WorkingSet_nVar - 1) {
          TrialState->delta_x.data[proc_control_node_B.loop_ub_n] = *alpha *
            TrialState->xstar.data[proc_control_node_B.loop_ub_n];
          proc_control_node_B.loop_ub_n++;
        }

        if (socTaken) {
          proc_control_node_B.phi_alpha = *alpha * *alpha;
          if ((WorkingSet_nVar >= 1) && (!(proc_control_node_B.phi_alpha == 0.0)))
          {
            proc_control_node_B.loop_ub_n = 0;
            while (proc_control_node_B.loop_ub_n <= WorkingSet_nVar - 1) {
              TrialState->delta_x.data[proc_control_node_B.loop_ub_n] +=
                proc_control_node_B.phi_alpha * TrialState->
                socDirection.data[proc_control_node_B.loop_ub_n];
              proc_control_node_B.loop_ub_n++;
            }
          }
        }

        tooSmallX = true;
        proc_control_node_B.loop_ub_n = 0;
        exitg2 = false;
        while ((!exitg2) && (proc_control_node_B.loop_ub_n <= WorkingSet_nVar -
                             1)) {
          proc_control_node_B.phi_alpha = fabs(TrialState->
            xstarsqp[proc_control_node_B.loop_ub_n]);
          if ((1.0 > proc_control_node_B.phi_alpha) || rtIsNaN
              (proc_control_node_B.phi_alpha)) {
            proc_control_node_B.phi_alpha = 1.0;
          }

          if (0.1 * proc_control_node_B.phi_alpha <= fabs
              (TrialState->delta_x.data[proc_control_node_B.loop_ub_n])) {
            tooSmallX = false;
            exitg2 = true;
          } else {
            proc_control_node_B.loop_ub_n++;
          }
        }

        if (tooSmallX) {
          *exitflag = -2;
          exitg1 = 1;
        } else {
          proc_control_node_B.loop_ub_n = 0;
          while (proc_control_node_B.loop_ub_n <= WorkingSet_nVar - 1) {
            TrialState->xstarsqp[proc_control_node_B.loop_ub_n] =
              TrialState->xstarsqp_old[proc_control_node_B.loop_ub_n] +
              TrialState->delta_x.data[proc_control_node_B.loop_ub_n];
            proc_control_node_B.loop_ub_n++;
          }

          proc_control_n_evalObjAndConstr(FcnEvaluator_objfun_workspace_r->x,
            FcnEvaluator_objfun_workspace_r->lastMV,
            FcnEvaluator_objfun_workspace_r->ref,
            FcnEvaluator_objfun_workspace_r->OutputWeights,
            FcnEvaluator_objfun_workspace_r->MVWeights,
            FcnEvaluator_objfun_workspace_r->MVRateWeights,
            FcnEvaluator_objfun_workspace_r->MVScaledTarget,
            FcnEvaluator_nonlcon_workspace_->x,
            FcnEvaluator_nonlcon_workspace_->OutputMin,
            FcnEvaluator_nonlcon_workspace_->OutputMax, FcnEvaluator_mCineq,
            TrialState->xstarsqp, TrialState->cIneq.data, TrialState->iNonIneq0,
            TrialState->cEq, &proc_control_node_B.phi_alpha,
            &proc_control_node_B.loop_ub_n);
          TrialState->sqpFval = proc_control_node_B.phi_alpha;
          proc_con_computeLinearResiduals(TrialState->xstarsqp, WorkingSet_nVar,
            TrialState->cIneq.data, &TrialState->cIneq.size,
            proc_control_node_B.mLinIneq, WorkingSet_Aineq_data, bineq_data,
            WorkingSet_ldA);
          TrialState->FunctionEvaluations++;
          *evalWellDefined = (proc_control_node_B.loop_ub_n == 1);
          proc_control_node_B.phi_alpha = proc_control_no_computeMeritFcn
            (MeritFunction_penaltyParam, proc_control_node_B.phi_alpha,
             TrialState->cIneq.data, TrialState->mIneq, TrialState->cEq,
             *evalWellDefined);
        }
      }
    } else {
      *exitflag = 0;
      exitg1 = 1;
    }
  } while (exitg1 == 0);
}

// Function for MATLAB Function: '<S94>/NLMPC'
static void proc_control_node_driver(const real_T bineq_data[], const real_T lb
  [69], s_YLC2gJhPBjEs8VvOTvcE4B_proc_T *TrialState,
  sG8JZ69axY52WWR6RKyApQC_proc__T *MeritFunction, const
  s_51JXCAVDTNAZBtNXKIWdnB_proc_T *FcnEvaluator, s_JXDNdI64oJvyHGrBwTBHI_proc__T
  *memspace, s_MFLHEgKtV7gODWBOEr7maD_proc_T *WorkingSet,
  s_1UhBFHxHKUXshhZtLgMUHE_proc_T *QRManager, s_B2KneB7ks2RV0bvoJc0bxC_proc_T
  *CholManager, s_jPVC6k54fKlkrevS6u11qC_proc_T *QPObjective, const int32_T
  *fscales_lineq_constraint_size, const int32_T *fscales_cineq_constraint_size,
  real_T Hessian[4761])
{
  boolean_T isFeasible;
  boolean_T o;
  static const int8_T u[4761] = { 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 };

  static const char_T t[7] = { 'f', 'm', 'i', 'n', 'c', 'o', 'n' };

  for (proc_control_node_B.idxLambdaNonlinIneq = 0;
       proc_control_node_B.idxLambdaNonlinIneq < 4761;
       proc_control_node_B.idxLambdaNonlinIneq++) {
    Hessian[proc_control_node_B.idxLambdaNonlinIneq] =
      u[proc_control_node_B.idxLambdaNonlinIneq];
  }

  proc_control_node_B.nVar_tmp_tmp = WorkingSet->nVar;
  proc_control_node_B.mFixed = WorkingSet->sizes[0];
  proc_control_node_B.mIneq_b = WorkingSet->sizes[2];
  proc_control_node_B.mLB_k = WorkingSet->sizes[3];
  proc_control_node_B.mUB = WorkingSet->sizes[4];
  proc_control_node_B.mConstr_tmp = (((WorkingSet->sizes[0] + WorkingSet->sizes
    [2]) + WorkingSet->sizes[3]) + WorkingSet->sizes[4]) + 51;
  proc_control_node_B.mLinIneq_tmp_tmp = WorkingSet->sizes[2] -
    TrialState->mNonlinIneq;
  proc_control_node_B.u1_b = ((WorkingSet->sizes[2] + WorkingSet->sizes[3]) +
    WorkingSet->sizes[4]) + (WorkingSet->sizes[0] << 1);
  if (WorkingSet->nVar > proc_control_node_B.u1_b) {
    proc_control_node_B.u1_b = WorkingSet->nVar;
  }

  proc_control_node_B.u1_b *= 10;
  TrialState->steplength = 1.0;
  proc_control_node_B.Flags.fevalOK = true;
  proc_control_node_B.Flags.stepAccepted = false;
  proc_control_node_B.Flags.failedLineSearch = false;
  proc_control_node_B.Flags.stepType = 1;
  proc_control_nod_computeGradLag(TrialState->gradLag.data, WorkingSet->ldA,
    WorkingSet->nVar, TrialState->grad.data, WorkingSet->sizes[2],
    WorkingSet->Aineq.data, WorkingSet->Aeq.data, WorkingSet->indexFixed.data,
    WorkingSet->sizes[0], WorkingSet->indexLB.data, WorkingSet->sizes[3],
    WorkingSet->indexUB.data, WorkingSet->sizes[4], TrialState->lambdasqp.data);
  proc_control_node_B.optimRelativeFactor = fabs(TrialState->
    grad.data[proc_control_node_ixamax(WorkingSet->nVar, TrialState->grad.data)
    - 1]);
  if ((1.0 > proc_control_node_B.optimRelativeFactor) || rtIsNaN
      (proc_control_node_B.optimRelativeFactor)) {
    proc_control_node_B.optimRelativeFactor = 1.0;
  }

  if (rtIsInf(proc_control_node_B.optimRelativeFactor)) {
    proc_control_node_B.optimRelativeFactor = 1.0;
  }

  MeritFunction->nlpPrimalFeasError = proc_con_computePrimalFeasError
    (TrialState->xstarsqp, WorkingSet->sizes[2] - TrialState->mNonlinIneq,
     TrialState->mNonlinIneq, TrialState->cIneq.data, TrialState->cEq,
     WorkingSet->indexLB.data, WorkingSet->sizes[3], lb,
     WorkingSet->indexUB.data, WorkingSet->sizes[4]);
  if ((1.0 > MeritFunction->nlpPrimalFeasError) || rtIsNaN
      (MeritFunction->nlpPrimalFeasError)) {
    MeritFunction->feasRelativeFactor = 1.0;
  } else {
    MeritFunction->feasRelativeFactor = MeritFunction->nlpPrimalFeasError;
  }

  if ((1.0 > MeritFunction->nlpPrimalFeasError) || rtIsNaN
      (MeritFunction->nlpPrimalFeasError)) {
    proc_control_node_B.p = 1.0;
  } else {
    proc_control_node_B.p = MeritFunction->nlpPrimalFeasError;
  }

  isFeasible = (MeritFunction->nlpPrimalFeasError <= 0.02 *
                proc_control_node_B.p);
  proc_contr_computeDualFeasError(WorkingSet->nVar, TrialState->gradLag.data, &o,
    &proc_control_node_B.p);
  proc_control_node_B.Flags.gradOK = o;
  MeritFunction->nlpDualFeasError = proc_control_node_B.p;
  if (!o) {
    proc_control_node_B.Flags.done = true;
    if (isFeasible) {
      TrialState->sqpExitFlag = 2;
    } else {
      TrialState->sqpExitFlag = -2;
    }
  } else {
    MeritFunction->nlpComplError = 0.0;
    if (proc_control_node_B.p > 0.0) {
      MeritFunction->firstOrderOpt = proc_control_node_B.p;
    } else {
      MeritFunction->firstOrderOpt = 0.0;
    }

    proc_control_node_B.idxLambdaNonlinIneq = 0;
    while (proc_control_node_B.idxLambdaNonlinIneq <=
           proc_control_node_B.mConstr_tmp) {
      TrialState->lambdasqp_old.data[proc_control_node_B.idxLambdaNonlinIneq] =
        TrialState->lambdasqp.data[proc_control_node_B.idxLambdaNonlinIneq];
      proc_control_node_B.idxLambdaNonlinIneq++;
    }

    if (isFeasible && (proc_control_node_B.p <= 0.02 *
                       proc_control_node_B.optimRelativeFactor)) {
      proc_control_node_B.Flags.done = true;
      TrialState->sqpExitFlag = 1;
    } else {
      proc_control_node_B.Flags.done = false;
      if (isFeasible && (TrialState->sqpFval < -1.0E+20)) {
        proc_control_node_B.Flags.done = true;
        TrialState->sqpExitFlag = -3;
      }
    }
  }

  proc_control_node_saveJacobian(TrialState, WorkingSet->nVar, WorkingSet->
    sizes[2], WorkingSet->Aineq.data, TrialState->iNonIneq0,
    WorkingSet->Aeq.data, WorkingSet->ldA);
  proc_control_node_saveState(TrialState);
  if (!proc_control_node_B.Flags.done) {
    TrialState->sqpIterations = 1;
  }

  while (!proc_control_node_B.Flags.done) {
    if ((!proc_control_node_B.Flags.stepAccepted) &&
        (!proc_control_node_B.Flags.failedLineSearch)) {
      proc_control_node_B.expl_temp_l.IterDisplayQP = false;
      proc_control_node_B.expl_temp_l.RemainFeasible = false;
      proc_control_node_B.expl_temp_l.ProbRelTolFactor = 1.0;
      proc_control_node_B.expl_temp_l.ConstrRelTolFactor = 1.0;
      proc_control_node_B.expl_temp_l.PricingTolerance = 0.0;
      proc_control_node_B.expl_temp_l.ObjectiveLimit = (rtMinusInf);
      proc_control_node_B.expl_temp_l.ConstraintTolerance = 0.02;
      proc_control_node_B.expl_temp_l.OptimalityTolerance =
        2.2204460492503131E-14;
      proc_control_node_B.expl_temp_l.StepTolerance = 1.0E-6;
      proc_control_node_B.expl_temp_l.MaxIterations = proc_control_node_B.u1_b;
      for (proc_control_node_B.idxLambdaNonlinIneq = 0;
           proc_control_node_B.idxLambdaNonlinIneq < 7;
           proc_control_node_B.idxLambdaNonlinIneq++) {
        proc_control_node_B.expl_temp_l.SolverName[proc_control_node_B.idxLambdaNonlinIneq]
          = t[proc_control_node_B.idxLambdaNonlinIneq];
      }
    }

    while ((!proc_control_node_B.Flags.stepAccepted) &&
           (!proc_control_node_B.Flags.failedLineSearch)) {
      proc_updateWorkingSetForNewQP_h(TrialState->xstarsqp, WorkingSet,
        proc_control_node_B.mIneq_b, TrialState->mNonlinIneq,
        TrialState->cIneq.data, TrialState->cEq, proc_control_node_B.mLB_k, lb,
        proc_control_node_B.mUB, proc_control_node_B.mFixed);
      proc_control_node_B.idxLambdaNonlinIneq =
        proc_control_node_B.Flags.stepType;
      proc_control_node_B.expl_temp_ld = proc_control_node_B.expl_temp_l;
      isFeasible = proc_control_node_step_n
        (&proc_control_node_B.idxLambdaNonlinIneq, Hessian, lb, TrialState,
         MeritFunction, memspace, WorkingSet, QRManager, CholManager,
         QPObjective, &proc_control_node_B.expl_temp_ld);
      proc_control_node_B.Flags.stepAccepted = isFeasible;
      proc_control_node_B.Flags.stepType =
        proc_control_node_B.idxLambdaNonlinIneq;
      if (isFeasible) {
        proc_control_node_B.loop_ub_il = 0;
        while (proc_control_node_B.loop_ub_il <=
               proc_control_node_B.nVar_tmp_tmp - 1) {
          TrialState->xstarsqp[proc_control_node_B.loop_ub_il] +=
            TrialState->delta_x.data[proc_control_node_B.loop_ub_il];
          proc_control_node_B.loop_ub_il++;
        }

        proc_control_n_evalObjAndConstr
          (FcnEvaluator->objfun.workspace.runtimedata.x,
           FcnEvaluator->objfun.workspace.runtimedata.lastMV,
           FcnEvaluator->objfun.workspace.runtimedata.ref,
           FcnEvaluator->objfun.workspace.runtimedata.OutputWeights,
           FcnEvaluator->objfun.workspace.runtimedata.MVWeights,
           FcnEvaluator->objfun.workspace.runtimedata.MVRateWeights,
           FcnEvaluator->objfun.workspace.runtimedata.MVScaledTarget,
           FcnEvaluator->nonlcon.workspace.runtimedata.x,
           FcnEvaluator->nonlcon.workspace.runtimedata.OutputMin,
           FcnEvaluator->nonlcon.workspace.runtimedata.OutputMax,
           FcnEvaluator->mCineq, TrialState->xstarsqp, TrialState->cIneq.data,
           TrialState->iNonIneq0, TrialState->cEq,
           &proc_control_node_B.optimRelativeFactor,
           &proc_control_node_B.loop_ub_il);
        TrialState->sqpFval = proc_control_node_B.optimRelativeFactor;
        proc_control_node_B.Flags.fevalOK = (proc_control_node_B.loop_ub_il == 1);
        TrialState->FunctionEvaluations++;
        proc_con_computeLinearResiduals(TrialState->xstarsqp,
          proc_control_node_B.nVar_tmp_tmp, TrialState->cIneq.data,
          &TrialState->cIneq.size, proc_control_node_B.mLinIneq_tmp_tmp,
          WorkingSet->Aineq.data, bineq_data, WorkingSet->ldA);
        MeritFunction->phiFullStep = proc_control_no_computeMeritFcn
          (MeritFunction->penaltyParam, proc_control_node_B.optimRelativeFactor,
           TrialState->cIneq.data, proc_control_node_B.mIneq_b, TrialState->cEq,
           proc_control_node_B.Flags.fevalOK);
      }

      if ((proc_control_node_B.idxLambdaNonlinIneq == 1) && isFeasible &&
          proc_control_node_B.Flags.fevalOK && (MeritFunction->phi <
           MeritFunction->phiFullStep) && (TrialState->sqpFval <
           TrialState->sqpFval_old)) {
        proc_control_node_B.Flags.stepType = 3;
        proc_control_node_B.Flags.stepAccepted = false;
      } else {
        proc_control_node_linesearch(&proc_control_node_B.Flags.fevalOK,
          bineq_data, WorkingSet->nVar, WorkingSet->ldA, WorkingSet->Aineq.data,
          TrialState, MeritFunction->penaltyParam, MeritFunction->phi,
          MeritFunction->phiPrimePlus, MeritFunction->phiFullStep,
          &FcnEvaluator->objfun.workspace.runtimedata,
          &FcnEvaluator->nonlcon.workspace.runtimedata, FcnEvaluator->mCineq,
          (proc_control_node_B.idxLambdaNonlinIneq == 3) && isFeasible,
          &proc_control_node_B.optimRelativeFactor,
          &proc_control_node_B.loop_ub_il);
        TrialState->steplength = proc_control_node_B.optimRelativeFactor;
        if (proc_control_node_B.loop_ub_il > 0) {
          proc_control_node_B.Flags.stepAccepted = true;
        } else {
          proc_control_node_B.Flags.failedLineSearch = true;
        }
      }
    }

    if (proc_control_node_B.Flags.stepAccepted &&
        (!proc_control_node_B.Flags.failedLineSearch)) {
      proc_control_node_B.idxLambdaNonlinIneq = 0;
      while (proc_control_node_B.idxLambdaNonlinIneq <=
             proc_control_node_B.nVar_tmp_tmp - 1) {
        TrialState->xstarsqp[proc_control_node_B.idxLambdaNonlinIneq] =
          TrialState->xstarsqp_old[proc_control_node_B.idxLambdaNonlinIneq] +
          TrialState->delta_x.data[proc_control_node_B.idxLambdaNonlinIneq];
        proc_control_node_B.idxLambdaNonlinIneq++;
      }

      proc_control_node_B.idxLambdaNonlinIneq = 0;
      while (proc_control_node_B.idxLambdaNonlinIneq <=
             proc_control_node_B.mConstr_tmp) {
        TrialState->lambdasqp.data[proc_control_node_B.idxLambdaNonlinIneq] +=
          (TrialState->lambda.data[proc_control_node_B.idxLambdaNonlinIneq] -
           TrialState->lambdasqp.data[proc_control_node_B.idxLambdaNonlinIneq]) *
          TrialState->steplength;
        proc_control_node_B.idxLambdaNonlinIneq++;
      }

      proc_control_node_saveState(TrialState);
      proc_control_node_B.Flags.gradOK = true;
      memcpy(&proc_control_node_B.TrialState_d[0], &TrialState->xstarsqp[0], 69U
             * sizeof(real_T));
      evalObjAndConstrAndDerivatives
        (FcnEvaluator->objfun.workspace.runtimedata.x,
         FcnEvaluator->objfun.workspace.runtimedata.lastMV,
         FcnEvaluator->objfun.workspace.runtimedata.ref,
         FcnEvaluator->objfun.workspace.runtimedata.OutputWeights,
         FcnEvaluator->objfun.workspace.runtimedata.MVWeights,
         FcnEvaluator->objfun.workspace.runtimedata.MVRateWeights,
         FcnEvaluator->objfun.workspace.runtimedata.MVScaledTarget,
         FcnEvaluator->nonlcon.workspace.runtimedata.x,
         FcnEvaluator->nonlcon.workspace.runtimedata.OutputMin,
         FcnEvaluator->nonlcon.workspace.runtimedata.OutputMax,
         FcnEvaluator->mCineq, proc_control_node_B.TrialState_d,
         TrialState->grad.data, TrialState->cIneq.data, TrialState->iNonIneq0,
         TrialState->cEq, WorkingSet->Aineq.data, TrialState->iNonIneq0,
         WorkingSet->ldA, WorkingSet->Aeq.data, WorkingSet->ldA,
         &TrialState->sqpFval, &proc_control_node_B.idxLambdaNonlinIneq);
      TrialState->FunctionEvaluations++;
      proc_control_node_B.Flags.fevalOK =
        (proc_control_node_B.idxLambdaNonlinIneq == 1);
    } else {
      TrialState->sqpFval = TrialState->sqpFval_old;
      memcpy(&TrialState->xstarsqp[0], &TrialState->xstarsqp_old[0], 69U *
             sizeof(real_T));
      proc_control_node_B.ix_m = TrialState->cIneq.size;
      proc_control_node_B.loop_ub_il = TrialState->cIneq.size;
      if (0 <= proc_control_node_B.loop_ub_il - 1) {
        memcpy(&proc_control_node_B.y_data_a[0], &TrialState->cIneq.data[0],
               proc_control_node_B.loop_ub_il * sizeof(real_T));
      }

      proc_control_node_B.idxLambdaNonlinIneq = 0;
      while (proc_control_node_B.idxLambdaNonlinIneq <= TrialState->mIneq - 1) {
        proc_control_node_B.y_data_a[proc_control_node_B.idxLambdaNonlinIneq] =
          TrialState->cIneq_old.data[proc_control_node_B.idxLambdaNonlinIneq];
        proc_control_node_B.idxLambdaNonlinIneq++;
      }

      if (0 <= proc_control_node_B.ix_m - 1) {
        memcpy(&TrialState->cIneq.data[0], &proc_control_node_B.y_data_a[0],
               proc_control_node_B.ix_m * sizeof(real_T));
      }

      memcpy(&TrialState->cEq[0], &TrialState->cEq_old[0], 52U * sizeof(real_T));
    }

    proc_control_node_test_exit(&proc_control_node_B.Flags, memspace,
      MeritFunction, fscales_lineq_constraint_size,
      fscales_cineq_constraint_size, WorkingSet, TrialState, QRManager, lb);
    if ((!proc_control_node_B.Flags.done) &&
        proc_control_node_B.Flags.stepAccepted) {
      proc_control_node_B.Flags.stepAccepted = false;
      proc_control_node_B.Flags.stepType = 1;
      proc_control_node_B.Flags.failedLineSearch = false;
      proc_control_node_B.idxLambdaNonlinIneq = proc_control_node_B.mFixed +
        TrialState->iNonIneq0;
      proc_control_node_B.loop_ub_il = WorkingSet->ldA;
      proc_control_node_B.ix_m = 0;
      while (proc_control_node_B.ix_m <= proc_control_node_B.nVar_tmp_tmp - 1) {
        TrialState->delta_gradLag.data[proc_control_node_B.ix_m] =
          TrialState->grad.data[proc_control_node_B.ix_m];
        proc_control_node_B.ix_m++;
      }

      if (proc_control_node_B.nVar_tmp_tmp >= 1) {
        proc_control_node_B.ix_m = 0;
        while (proc_control_node_B.ix_m <= proc_control_node_B.nVar_tmp_tmp - 1)
        {
          TrialState->delta_gradLag.data[proc_control_node_B.ix_m] +=
            -TrialState->grad_old.data[proc_control_node_B.ix_m];
          proc_control_node_B.ix_m++;
        }
      }

      proc_control_xgemv_jhgj1v0ny5es(proc_control_node_B.nVar_tmp_tmp, 52,
        WorkingSet->Aeq.data, 1, WorkingSet->ldA, TrialState->lambdasqp.data,
        proc_control_node_B.mFixed + 1, TrialState->delta_gradLag.data);
      proc_control_node_B.ix_m = proc_control_node_B.mFixed;
      proc_control_node_B.b_c_b = WorkingSet->ldA * 51 + 1;
      proc_control_node_B.b_iy = 1;
      while (((proc_control_node_B.loop_ub_il > 0) && (proc_control_node_B.b_iy <=
               proc_control_node_B.b_c_b)) || ((proc_control_node_B.loop_ub_il <
               0) && (proc_control_node_B.b_iy >= proc_control_node_B.b_c_b))) {
        proc_control_node_B.iy = 0;
        proc_control_node_B.b_ia = (proc_control_node_B.b_iy +
          proc_control_node_B.nVar_tmp_tmp) - 1;
        proc_control_node_B.ia_g = proc_control_node_B.b_iy;
        while (proc_control_node_B.ia_g <= proc_control_node_B.b_ia) {
          TrialState->delta_gradLag.data[proc_control_node_B.iy] +=
            TrialState->JacCeqTrans_old.data[proc_control_node_B.ia_g - 1] *
            -TrialState->lambdasqp.data[proc_control_node_B.ix_m];
          proc_control_node_B.iy++;
          proc_control_node_B.ia_g++;
        }

        proc_control_node_B.ix_m++;
        proc_control_node_B.b_iy += proc_control_node_B.loop_ub_il;
      }

      if (TrialState->mNonlinIneq > 0) {
        proc_control_xgemv_jhgj1v0ny5es(proc_control_node_B.nVar_tmp_tmp,
          TrialState->mNonlinIneq, WorkingSet->Aineq.data, WorkingSet->ldA *
          (TrialState->iNonIneq0 - 1) + 1, WorkingSet->ldA,
          TrialState->lambdasqp.data, proc_control_node_B.idxLambdaNonlinIneq +
          52, TrialState->delta_gradLag.data);
        proc_control_node_B.ix_m = (TrialState->mNonlinIneq - 1) *
          WorkingSet->ldA + 1;
        proc_control_node_B.b_c_b = 1;
        while (((proc_control_node_B.loop_ub_il > 0) &&
                (proc_control_node_B.b_c_b <= proc_control_node_B.ix_m)) ||
               ((proc_control_node_B.loop_ub_il < 0) &&
                (proc_control_node_B.b_c_b >= proc_control_node_B.ix_m))) {
          proc_control_node_B.b_iy = 0;
          proc_control_node_B.iy = (proc_control_node_B.b_c_b +
            proc_control_node_B.nVar_tmp_tmp) - 1;
          proc_control_node_B.b_ia = proc_control_node_B.b_c_b;
          while (proc_control_node_B.b_ia <= proc_control_node_B.iy) {
            TrialState->delta_gradLag.data[proc_control_node_B.b_iy] +=
              TrialState->JacCineqTrans_old.data[proc_control_node_B.b_ia - 1] *
              -TrialState->
              lambdasqp.data[proc_control_node_B.idxLambdaNonlinIneq + 51];
            proc_control_node_B.b_iy++;
            proc_control_node_B.b_ia++;
          }

          proc_control_node_B.idxLambdaNonlinIneq++;
          proc_control_node_B.b_c_b += proc_control_node_B.loop_ub_il;
        }
      }

      proc_control_node_saveJacobian(TrialState,
        proc_control_node_B.nVar_tmp_tmp, proc_control_node_B.mIneq_b,
        WorkingSet->Aineq.data, TrialState->iNonIneq0, WorkingSet->Aeq.data,
        WorkingSet->ldA);
      proc_control_node_B.loop_ub_il = memspace->workspace_double.size[0] *
        memspace->workspace_double.size[1];
      for (proc_control_node_B.idxLambdaNonlinIneq = 0;
           proc_control_node_B.idxLambdaNonlinIneq <
           proc_control_node_B.loop_ub_il;
           proc_control_node_B.idxLambdaNonlinIneq++) {
      }

      proc_control_node_BFGSUpdate(proc_control_node_B.nVar_tmp_tmp, Hessian,
        TrialState->delta_x.data, TrialState->delta_gradLag.data,
        memspace->workspace_double.data);
      TrialState->sqpIterations++;
    }
  }
}

// Function for MATLAB Function: '<S94>/NLMPC'
static void proc_control_node_fmincon(const s_REWc8VgrfSKVLBFK433XbH_proc_T
  *fun_workspace_runtimedata, const sACkMJ1zT2VJOHR6eMwwEPC_proc__T
  *fun_workspace_userdata, const real_T x0[69], const real_T Aineq_data[], const
  real_T bineq_data[], const int32_T *bineq_size, const real_T lb[69], const
  s_REWc8VgrfSKVLBFK433XbH_proc_T *nonlcon_workspace_runtimedata, const
  sACkMJ1zT2VJOHR6eMwwEPC_proc__T *nonlcon_workspace_userdata, real_T x[69],
  real_T *fval, real_T *exitflag, real_T *output_iterations, real_T
  *output_funcCount, char_T output_algorithm[3], real_T *output_constrviolation,
  real_T *output_stepsize, real_T *output_lssteplength, real_T
  *output_firstorderopt)
{
  proc_control_node_anon(nonlcon_workspace_runtimedata->x,
    nonlcon_workspace_runtimedata->OutputMin,
    nonlcon_workspace_runtimedata->OutputMax, x0,
    proc_control_node_B.varargout_1_data, proc_control_node_B.varargout_1_size,
    proc_control_node_B.TrialState.cEq, proc_control_node_B.varargout_3_data,
    proc_control_node_B.varargout_3_size, proc_control_node_B.varargout_4);
  proc_control_node_B.c_k_l = proc_control_node_B.varargout_1_size[0] *
    proc_control_node_B.varargout_1_size[1];
  proc_control_node_B.mIneq = *bineq_size + proc_control_node_B.c_k_l;
  proc_control_node_B.mConstrMax = (proc_control_node_B.mIneq +
    proc_control_node_B.mIneq) + 295;
  if (proc_control_node_B.mIneq + 174 > proc_control_node_B.mConstrMax) {
    proc_control_node_B.maxDims = proc_control_node_B.mIneq + 174;
  } else {
    proc_control_node_B.maxDims = proc_control_node_B.mConstrMax;
  }

  proc_control_n_factoryConstruct(proc_control_node_B.mIneq + 174,
    proc_control_node_B.mConstrMax, proc_control_node_B.mIneq,
    proc_control_node_B.c_k_l, &proc_control_node_B.TrialState);
  proc_control_node_B.FcnEvaluator.objfun.workspace.runtimedata =
    *fun_workspace_runtimedata;
  proc_control_node_B.FcnEvaluator.objfun.workspace.userdata =
    *fun_workspace_userdata;
  proc_control_node_B.FcnEvaluator.nonlcon.workspace.runtimedata =
    *nonlcon_workspace_runtimedata;
  proc_control_node_B.FcnEvaluator.nonlcon.workspace.userdata =
    *nonlcon_workspace_userdata;
  proc_control_node_B.FcnEvaluator.nVar = 69;
  proc_control_node_B.FcnEvaluator.mCineq = proc_control_node_B.c_k_l;
  proc_control_node_B.FcnEvaluator.mCeq = 52;
  proc_control_node_B.FcnEvaluator.NonFiniteSupport = true;
  proc_control_node_B.FcnEvaluator.SpecifyObjectiveGradient = true;
  proc_control_node_B.FcnEvaluator.SpecifyConstraintGradient = true;
  proc_control_node_B.FcnEvaluator.ScaleProblem = false;
  proc_cont_factoryConstruct_cntp(proc_control_node_B.mIneq + 174,
    &proc_control_node_B.QPObjective.grad.size,
    &proc_control_node_B.QPObjective.Hx.size,
    &proc_control_node_B.QPObjective.hasLinear,
    &proc_control_node_B.QPObjective.nvar,
    &proc_control_node_B.QPObjective.maxVar,
    &proc_control_node_B.QPObjective.beta, &proc_control_node_B.QPObjective.rho,
    &proc_control_node_B.QPObjective.objtype,
    &proc_control_node_B.QPObjective.prev_objtype,
    &proc_control_node_B.QPObjective.prev_nvar,
    &proc_control_node_B.QPObjective.prev_hasLinear,
    &proc_control_node_B.QPObjective.gammaScalar);
  proc_control_node_B.QPObjective.hasLinear = true;
  proc_control_node_B.QPObjective.nvar = 69;
  proc_control_node_B.QPObjective.objtype = 3;
  proc_control_node_B.memspace.workspace_double.size[0] =
    proc_control_node_B.maxDims;
  proc_control_node_B.memspace.workspace_double.size[1] =
    proc_control_node_B.mIneq + 174;
  proc_control_node_B.memspace.workspace_int.size = proc_control_node_B.maxDims;
  proc_control_node_B.memspace.workspace_sort.size = proc_control_node_B.maxDims;
  proc_con_factoryConstruct_cntp2(proc_control_node_B.mIneq,
    proc_control_node_B.mIneq + 174, proc_control_node_B.mConstrMax,
    &proc_control_node_B.WorkingSet);
  proc_control_node_B.mLB = 0;
  for (proc_control_node_B.k_ar = 0; proc_control_node_B.k_ar < 69;
       proc_control_node_B.k_ar++) {
    proc_control_node_B.TrialState.xstarsqp[proc_control_node_B.k_ar] =
      x0[proc_control_node_B.k_ar];
    proc_control_node_B.lb = lb[proc_control_node_B.k_ar];
    if ((!rtIsInf(proc_control_node_B.lb)) && (!rtIsNaN(proc_control_node_B.lb)))
    {
      proc_control_node_B.mLB++;
      proc_control_node_B.WorkingSet.indexLB.data[proc_control_node_B.mLB - 1] =
        proc_control_node_B.k_ar + 1;
    }
  }

  proc_control_node_loadProblem(&proc_control_node_B.WorkingSet,
    proc_control_node_B.mIneq, *bineq_size, Aineq_data, proc_control_node_B.mLB,
    0, 0, proc_control_node_B.mConstrMax);
  proc_control_node_B.mConstrMax = 0;
  while (proc_control_node_B.mConstrMax <= proc_control_node_B.mLB - 1) {
    proc_control_node_B.lb =
      proc_control_node_B.TrialState.xstarsqp[proc_control_node_B.WorkingSet.indexLB.data
      [proc_control_node_B.mConstrMax] - 1];
    proc_control_node_B.scale_b =
      lb[proc_control_node_B.WorkingSet.indexLB.data[proc_control_node_B.mConstrMax]
      - 1];
    if ((proc_control_node_B.lb > proc_control_node_B.scale_b) || rtIsNaN
        (proc_control_node_B.scale_b)) {
      proc_control_node_B.TrialState.xstarsqp[proc_control_node_B.WorkingSet.indexLB.data
        [proc_control_node_B.mConstrMax] - 1] = proc_control_node_B.lb;
    } else {
      proc_control_node_B.TrialState.xstarsqp[proc_control_node_B.WorkingSet.indexLB.data
        [proc_control_node_B.mConstrMax] - 1] = proc_control_node_B.scale_b;
    }

    proc_control_node_B.mConstrMax++;
  }

  evalObjAndConstrAndDerivatives(fun_workspace_runtimedata->x,
    fun_workspace_runtimedata->lastMV, fun_workspace_runtimedata->ref,
    fun_workspace_runtimedata->OutputWeights,
    fun_workspace_runtimedata->MVWeights,
    fun_workspace_runtimedata->MVRateWeights,
    fun_workspace_runtimedata->MVScaledTarget, nonlcon_workspace_runtimedata->x,
    nonlcon_workspace_runtimedata->OutputMin,
    nonlcon_workspace_runtimedata->OutputMax, proc_control_node_B.c_k_l,
    proc_control_node_B.TrialState.xstarsqp,
    proc_control_node_B.TrialState.grad.data,
    proc_control_node_B.TrialState.cIneq.data,
    proc_control_node_B.TrialState.iNonIneq0, proc_control_node_B.TrialState.cEq,
    proc_control_node_B.WorkingSet.Aineq.data,
    proc_control_node_B.TrialState.iNonIneq0, proc_control_node_B.WorkingSet.ldA,
    proc_control_node_B.WorkingSet.Aeq.data, proc_control_node_B.WorkingSet.ldA,
    &proc_control_node_B.lb, &proc_control_node_B.mConstrMax);
  proc_control_node_B.TrialState.sqpFval = proc_control_node_B.lb;
  proc_control_node_B.TrialState.FunctionEvaluations = 1;
  proc_control_node_B.mConstrMax = proc_control_node_B.WorkingSet.ldA;
  if (*bineq_size > 0) {
    proc_control_node_B.b_y_size_idx_0 =
      proc_control_node_B.TrialState.cIneq.size;
    proc_control_node_B.loop_ub_f = proc_control_node_B.TrialState.cIneq.size;
    if (0 <= proc_control_node_B.loop_ub_f - 1) {
      memcpy(&proc_control_node_B.b_y_data[0],
             &proc_control_node_B.TrialState.cIneq.data[0],
             proc_control_node_B.loop_ub_f * sizeof(real_T));
    }

    proc_control_node_B.k_ar = 0;
    while (proc_control_node_B.k_ar <= *bineq_size - 1) {
      proc_control_node_B.b_y_data[proc_control_node_B.k_ar] =
        bineq_data[proc_control_node_B.k_ar];
      proc_control_node_B.k_ar++;
    }

    if (0 <= proc_control_node_B.b_y_size_idx_0 - 1) {
      memcpy(&proc_control_node_B.TrialState.cIneq.data[0],
             &proc_control_node_B.b_y_data[0],
             proc_control_node_B.b_y_size_idx_0 * sizeof(real_T));
    }

    proc_control_node_B.k_ar = 0;
    while (proc_control_node_B.k_ar <= *bineq_size - 1) {
      proc_control_node_B.TrialState.cIneq.data[proc_control_node_B.k_ar] =
        -proc_control_node_B.TrialState.cIneq.data[proc_control_node_B.k_ar];
      proc_control_node_B.k_ar++;
    }

    proc_control_node_B.k_ar = 0;
    proc_control_node_B.loop_ub_f = (*bineq_size - 1) *
      proc_control_node_B.WorkingSet.ldA + 1;
    proc_control_node_B.b_y_size_idx_0 = 1;
    while (((proc_control_node_B.mConstrMax > 0) &&
            (proc_control_node_B.b_y_size_idx_0 <= proc_control_node_B.loop_ub_f))
           || ((proc_control_node_B.mConstrMax < 0) &&
               (proc_control_node_B.b_y_size_idx_0 >=
                proc_control_node_B.loop_ub_f))) {
      proc_control_node_B.ix_p = 0;
      proc_control_node_B.scale_b = 0.0;
      proc_control_node_B.ia_o = proc_control_node_B.b_y_size_idx_0;
      while (proc_control_node_B.ia_o <= proc_control_node_B.b_y_size_idx_0 + 68)
      {
        proc_control_node_B.scale_b +=
          proc_control_node_B.WorkingSet.Aineq.data[proc_control_node_B.ia_o - 1]
          * proc_control_node_B.TrialState.xstarsqp[proc_control_node_B.ix_p];
        proc_control_node_B.ix_p++;
        proc_control_node_B.ia_o++;
      }

      proc_control_node_B.TrialState.cIneq.data[proc_control_node_B.k_ar] +=
        proc_control_node_B.scale_b;
      proc_control_node_B.k_ar++;
      proc_control_node_B.b_y_size_idx_0 += proc_control_node_B.mConstrMax;
    }
  }

  proc_c_updateWorkingSetForNewQP(x0, &proc_control_node_B.WorkingSet,
    proc_control_node_B.mIneq, proc_control_node_B.TrialState.cIneq.data,
    proc_control_node_B.TrialState.cEq, proc_control_node_B.mLB, lb, 0, 0);
  proc_control_node_initActiveSet(&proc_control_node_B.WorkingSet);
  proc_control_node_B.MeritFunction.penaltyParam = 1.0;
  proc_control_node_B.MeritFunction.threshold = 0.0001;
  proc_control_node_B.MeritFunction.nPenaltyDecreases = 0;
  proc_control_node_B.MeritFunction.linearizedConstrViol = 0.0;
  proc_control_node_B.MeritFunction.initFval = proc_control_node_B.lb;
  proc_control_node_B.lb = 0.0;
  for (proc_control_node_B.mLB = 0; proc_control_node_B.mLB < 52;
       proc_control_node_B.mLB++) {
    proc_control_node_B.lb += fabs
      (proc_control_node_B.TrialState.cEq[proc_control_node_B.mLB]);
  }

  proc_control_node_B.MeritFunction.initConstrViolationEq =
    proc_control_node_B.lb;
  proc_control_node_B.lb = 0.0;
  proc_control_node_B.mLB = 0;
  while (proc_control_node_B.mLB <= proc_control_node_B.mIneq - 1) {
    if (proc_control_node_B.TrialState.cIneq.data[proc_control_node_B.mLB] > 0.0)
    {
      proc_control_node_B.lb +=
        proc_control_node_B.TrialState.cIneq.data[proc_control_node_B.mLB];
    }

    proc_control_node_B.mLB++;
  }

  proc_control_node_B.MeritFunction.initConstrViolationIneq =
    proc_control_node_B.lb;
  proc_control_node_B.MeritFunction.phi = 0.0;
  proc_control_node_B.MeritFunction.phiPrimePlus = 0.0;
  proc_control_node_B.MeritFunction.phiFullStep = 0.0;
  proc_control_node_B.MeritFunction.feasRelativeFactor = 0.0;
  proc_control_node_B.MeritFunction.nlpPrimalFeasError = 0.0;
  proc_control_node_B.MeritFunction.nlpDualFeasError = 0.0;
  proc_control_node_B.MeritFunction.nlpComplError = 0.0;
  proc_control_node_B.MeritFunction.firstOrderOpt = 0.0;
  proc_control_node_B.MeritFunction.hasObjective = true;
  proc_contro_factoryConstruct_cn(proc_control_node_B.maxDims,
    proc_control_node_B.maxDims, &proc_control_node_B.QRManager.ldq,
    proc_control_node_B.QRManager.QR.size, proc_control_node_B.QRManager.Q.data,
    proc_control_node_B.QRManager.Q.size,
    proc_control_node_B.QRManager.jpvt.data,
    &proc_control_node_B.QRManager.jpvt.size,
    &proc_control_node_B.QRManager.mrows, &proc_control_node_B.QRManager.ncols,
    &proc_control_node_B.QRManager.tau.size,
    &proc_control_node_B.QRManager.minRowCol,
    &proc_control_node_B.QRManager.usedPivoting);
  proc_contr_factoryConstruct_cnt(proc_control_node_B.maxDims,
    proc_control_node_B.CholManager.FMat.size,
    &proc_control_node_B.CholManager.ldm, &proc_control_node_B.CholManager.ndims,
    &proc_control_node_B.CholManager.info,
    &proc_control_node_B.CholManager.scaleFactor,
    &proc_control_node_B.CholManager.ConvexCheck,
    &proc_control_node_B.CholManager.regTol_,
    &proc_control_node_B.CholManager.workspace_,
    &proc_control_node_B.CholManager.workspace2_);
  proc_control_node_B.tmp_size_pn = *bineq_size;
  proc_control_node_B.tmp_size_p5 = proc_control_node_B.c_k_l;
  proc_control_node_driver(bineq_data, lb, &proc_control_node_B.TrialState,
    &proc_control_node_B.MeritFunction, &proc_control_node_B.FcnEvaluator,
    &proc_control_node_B.memspace, &proc_control_node_B.WorkingSet,
    &proc_control_node_B.QRManager, &proc_control_node_B.CholManager,
    &proc_control_node_B.QPObjective, &proc_control_node_B.tmp_size_pn,
    &proc_control_node_B.tmp_size_p5, proc_control_node_B.unusedExpr);
  *fval = proc_control_node_B.TrialState.sqpFval;
  *exitflag = proc_control_node_B.TrialState.sqpExitFlag;
  *output_iterations = proc_control_node_B.TrialState.sqpIterations;
  *output_funcCount = proc_control_node_B.TrialState.FunctionEvaluations;
  output_algorithm[0] = 's';
  output_algorithm[1] = 'q';
  output_algorithm[2] = 'p';
  *output_constrviolation = proc_control_node_B.MeritFunction.nlpPrimalFeasError;
  proc_control_node_B.lb = 0.0;
  proc_control_node_B.scale_b = 3.3121686421112381E-170;
  for (proc_control_node_B.c_k_l = 0; proc_control_node_B.c_k_l < 69;
       proc_control_node_B.c_k_l++) {
    x[proc_control_node_B.c_k_l] =
      proc_control_node_B.TrialState.xstarsqp[proc_control_node_B.c_k_l];
    proc_control_node_B.absxk_o = fabs
      (proc_control_node_B.TrialState.delta_x.data[proc_control_node_B.c_k_l]);
    if (proc_control_node_B.absxk_o > proc_control_node_B.scale_b) {
      proc_control_node_B.t_c = proc_control_node_B.scale_b /
        proc_control_node_B.absxk_o;
      proc_control_node_B.lb = proc_control_node_B.lb * proc_control_node_B.t_c *
        proc_control_node_B.t_c + 1.0;
      proc_control_node_B.scale_b = proc_control_node_B.absxk_o;
    } else {
      proc_control_node_B.t_c = proc_control_node_B.absxk_o /
        proc_control_node_B.scale_b;
      proc_control_node_B.lb += proc_control_node_B.t_c *
        proc_control_node_B.t_c;
    }
  }

  *output_stepsize = proc_control_node_B.scale_b * sqrt(proc_control_node_B.lb);
  *output_lssteplength = proc_control_node_B.TrialState.steplength;
  *output_firstorderopt = proc_control_node_B.MeritFunction.firstOrderOpt;
}

static boolean_T proc_control_node_isequal(const real_T varargin_1[3], const
  real_T varargin_2[3])
{
  int32_T b_k;
  boolean_T exitg1;
  boolean_T p;
  boolean_T p_0;
  p = false;
  p_0 = true;
  b_k = 0;
  exitg1 = false;
  while ((!exitg1) && (b_k < 3)) {
    if (!(varargin_1[b_k] == varargin_2[b_k])) {
      p_0 = false;
      exitg1 = true;
    } else {
      b_k++;
    }
  }

  if (p_0) {
    p = true;
  }

  return p;
}

static boolean_T proc_control_node_isequal_b4nw(const real_T varargin_1[6],
  const real_T varargin_2[6])
{
  int32_T b_k;
  boolean_T exitg1;
  boolean_T p;
  boolean_T p_0;
  p = false;
  p_0 = true;
  b_k = 0;
  exitg1 = false;
  while ((!exitg1) && (b_k < 6)) {
    if (!(varargin_1[b_k] == varargin_2[b_k])) {
      p_0 = false;
      exitg1 = true;
    } else {
      b_k++;
    }
  }

  if (p_0) {
    p = true;
  }

  return p;
}

// Function for MATLAB Function: '<S1>/AUV State Equation'
static real_T proc_control_node_erf(real_T x)
{
  real_T R;
  real_T s;
  real_T y;
  int32_T e;

  // ========================== COPYRIGHT NOTICE ============================
  //  The algorithms for calculating ERF(X) and ERFC(X) are derived
  //  from FDLIBM, which has the following notice:
  //
  //  Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.
  //
  //  Developed at SunSoft, a Sun Microsystems, Inc. business.
  //  Permission to use, copy, modify, and distribute this
  //  software is freely granted, provided that this notice
  //  is preserved.
  // =============================    END    ================================
  proc_control_node_B.absx_i = fabs(x);
  if (rtIsNaN(x)) {
    y = x;
  } else if (rtIsInf(x)) {
    if (x < 0.0) {
      y = -1.0;
    } else {
      y = 1.0;
    }
  } else if (proc_control_node_B.absx_i < 0.84375) {
    if (proc_control_node_B.absx_i < 3.7252902984619141E-9) {
      if (proc_control_node_B.absx_i < 2.8480945388892178E-306) {
        y = (8.0 * x + 1.0270333367641007 * x) * 0.125;
      } else {
        y = 0.12837916709551259 * x + x;
      }
    } else {
      proc_control_node_B.z_f = x * x;
      y = ((((proc_control_node_B.z_f * -2.3763016656650163E-5 +
              -0.0057702702964894416) * proc_control_node_B.z_f +
             -0.02848174957559851) * proc_control_node_B.z_f +
            -0.3250421072470015) * proc_control_node_B.z_f + 0.12837916709551256)
        / (((((proc_control_node_B.z_f * -3.9602282787753681E-6 +
               0.00013249473800432164) * proc_control_node_B.z_f +
              0.0050813062818757656) * proc_control_node_B.z_f +
             0.0650222499887673) * proc_control_node_B.z_f + 0.39791722395915535)
           * proc_control_node_B.z_f + 1.0) * x + x;
    }
  } else if (proc_control_node_B.absx_i < 1.25) {
    if (x >= 0.0) {
      y = (((((((proc_control_node_B.absx_i - 1.0) * -0.0021663755948687908 +
                0.035478304325618236) * (proc_control_node_B.absx_i - 1.0) +
               -0.11089469428239668) * (proc_control_node_B.absx_i - 1.0) +
              0.31834661990116175) * (proc_control_node_B.absx_i - 1.0) +
             -0.37220787603570132) * (proc_control_node_B.absx_i - 1.0) +
            0.41485611868374833) * (proc_control_node_B.absx_i - 1.0) +
           -0.0023621185607526594) / (((((((proc_control_node_B.absx_i - 1.0) *
        0.011984499846799107 + 0.013637083912029051) *
        (proc_control_node_B.absx_i - 1.0) + 0.12617121980876164) *
        (proc_control_node_B.absx_i - 1.0) + 0.071828654414196266) *
        (proc_control_node_B.absx_i - 1.0) + 0.540397917702171) *
        (proc_control_node_B.absx_i - 1.0) + 0.10642088040084423) *
        (proc_control_node_B.absx_i - 1.0) + 1.0) + 0.84506291151046753;
    } else {
      y = -0.84506291151046753 - (((((((proc_control_node_B.absx_i - 1.0) *
        -0.0021663755948687908 + 0.035478304325618236) *
        (proc_control_node_B.absx_i - 1.0) + -0.11089469428239668) *
        (proc_control_node_B.absx_i - 1.0) + 0.31834661990116175) *
        (proc_control_node_B.absx_i - 1.0) + -0.37220787603570132) *
        (proc_control_node_B.absx_i - 1.0) + 0.41485611868374833) *
        (proc_control_node_B.absx_i - 1.0) + -0.0023621185607526594) /
        (((((((proc_control_node_B.absx_i - 1.0) * 0.011984499846799107 +
              0.013637083912029051) * (proc_control_node_B.absx_i - 1.0) +
             0.12617121980876164) * (proc_control_node_B.absx_i - 1.0) +
            0.071828654414196266) * (proc_control_node_B.absx_i - 1.0) +
           0.540397917702171) * (proc_control_node_B.absx_i - 1.0) +
          0.10642088040084423) * (proc_control_node_B.absx_i - 1.0) + 1.0);
    }
  } else if (proc_control_node_B.absx_i > 6.0) {
    if (x < 0.0) {
      y = -1.0;
    } else {
      y = 1.0;
    }
  } else {
    s = 1.0 / (proc_control_node_B.absx_i * proc_control_node_B.absx_i);
    if (proc_control_node_B.absx_i < 2.8571434020996094) {
      R = ((((((s * -9.8143293441691455 + -81.2874355063066) * s +
               -184.60509290671104) * s + -162.39666946257347) * s +
             -62.375332450326006) * s + -10.558626225323291) * s +
           -0.69385857270718176) * s + -0.0098649440348471482;
      s = (((((((s * -0.0604244152148581 + 6.5702497703192817) * s +
                108.63500554177944) * s + 429.00814002756783) * s +
              645.38727173326788) * s + 434.56587747522923) * s +
            137.65775414351904) * s + 19.651271667439257) * s + 1.0;
    } else {
      R = (((((s * -483.5191916086514 + -1025.0951316110772) * s +
              -637.56644336838963) * s + -160.63638485582192) * s +
            -17.757954917754752) * s + -0.799283237680523) * s +
        -0.0098649429247001;
      s = ((((((s * -22.440952446585818 + 474.52854120695537) * s +
               2553.0504064331644) * s + 3199.8582195085955) * s +
             1536.729586084437) * s + 325.79251299657392) * s +
           30.338060743482458) * s + 1.0;
    }

    if (!rtIsNaN(proc_control_node_B.absx_i)) {
      proc_control_node_B.z_f = frexp(proc_control_node_B.absx_i, &e);
    } else {
      proc_control_node_B.z_f = proc_control_node_B.absx_i;
      e = 0;
    }

    proc_control_node_B.z_f = floor(proc_control_node_B.z_f * 2.097152E+6) /
      2.097152E+6 * proc_control_node_rt_powd_snf(2.0, static_cast<real_T>(e));
    if (x < 0.0) {
      y = exp((proc_control_node_B.z_f - proc_control_node_B.absx_i) *
              (proc_control_node_B.z_f + proc_control_node_B.absx_i) + R / s) *
        exp(-proc_control_node_B.z_f * proc_control_node_B.z_f - 0.5625) /
        proc_control_node_B.absx_i - 1.0;
    } else {
      y = 1.0 - exp((proc_control_node_B.z_f - proc_control_node_B.absx_i) *
                    (proc_control_node_B.z_f + proc_control_node_B.absx_i) + R /
                    s) * exp(-proc_control_node_B.z_f * proc_control_node_B.z_f
        - 0.5625) / proc_control_node_B.absx_i;
    }
  }

  return y;
}

static void imuSensor_set_MagneticFieldNED(fusion_simulink_imuSensor_pro_T *obj,
  const real_T val[3])
{
  if (obj->isInitialized == 1) {
    obj->TunablePropsChanged = true;
    obj->tunablePropertyChanged[2] = true;
  }

  obj->MagneticField[0] = val[0];
  obj->MagneticField[1] = val[1];
  obj->MagneticField[2] = val[2];
}

static void IMUSensorParameters_updateSyste(real_T obj_MeasurementRange, real_T
  obj_Resolution, const real_T obj_ConstantBias[3], const real_T
  obj_AxesMisalignment[3], const real_T obj_NoiseDensity[3], const real_T
  obj_BiasInstability[3], const real_T obj_RandomWalk[3], const real_T
  obj_TemperatureBias[3], const real_T obj_TemperatureScaleFactor[3],
  h_fusion_internal_Acceleromet_T *sobj)
{
  if (sobj->isInitialized == 1) {
    sobj->TunablePropsChanged = true;
    sobj->tunablePropertyChanged[0] = true;
  }

  sobj->MeasurementRange = obj_MeasurementRange;
  if (sobj->isInitialized == 1) {
    sobj->TunablePropsChanged = true;
    sobj->tunablePropertyChanged[1] = true;
  }

  sobj->Resolution = obj_Resolution;
  if (sobj->isInitialized == 1) {
    sobj->TunablePropsChanged = true;
    sobj->tunablePropertyChanged[2] = true;
  }

  sobj->ConstantBias[0] = obj_ConstantBias[0];
  sobj->ConstantBias[1] = obj_ConstantBias[1];
  sobj->ConstantBias[2] = obj_ConstantBias[2];
  if (sobj->isInitialized == 1) {
    sobj->TunablePropsChanged = true;
    sobj->tunablePropertyChanged[3] = true;
  }

  sobj->AxesMisalignment[0] = obj_AxesMisalignment[0];
  sobj->AxesMisalignment[1] = obj_AxesMisalignment[1];
  sobj->AxesMisalignment[2] = obj_AxesMisalignment[2];
  if (sobj->isInitialized == 1) {
    sobj->TunablePropsChanged = true;
    sobj->tunablePropertyChanged[4] = true;
  }

  sobj->NoiseDensity[0] = obj_NoiseDensity[0];
  sobj->NoiseDensity[1] = obj_NoiseDensity[1];
  sobj->NoiseDensity[2] = obj_NoiseDensity[2];
  if (sobj->isInitialized == 1) {
    sobj->TunablePropsChanged = true;
    sobj->tunablePropertyChanged[5] = true;
  }

  sobj->BiasInstability[0] = obj_BiasInstability[0];
  sobj->BiasInstability[1] = obj_BiasInstability[1];
  sobj->BiasInstability[2] = obj_BiasInstability[2];
  if (sobj->isInitialized == 1) {
    sobj->TunablePropsChanged = true;
    sobj->tunablePropertyChanged[6] = true;
  }

  sobj->RandomWalk[0] = obj_RandomWalk[0];
  sobj->RandomWalk[1] = obj_RandomWalk[1];
  sobj->RandomWalk[2] = obj_RandomWalk[2];
  if (sobj->isInitialized == 1) {
    sobj->TunablePropsChanged = true;
    sobj->tunablePropertyChanged[7] = true;
  }

  sobj->TemperatureBias[0] = obj_TemperatureBias[0];
  sobj->TemperatureBias[1] = obj_TemperatureBias[1];
  sobj->TemperatureBias[2] = obj_TemperatureBias[2];
  if (sobj->isInitialized == 1) {
    sobj->TunablePropsChanged = true;
    sobj->tunablePropertyChanged[8] = true;
  }

  sobj->TemperatureScaleFactor[0] = obj_TemperatureScaleFactor[0];
  sobj->TemperatureScaleFactor[1] = obj_TemperatureScaleFactor[1];
  sobj->TemperatureScaleFactor[2] = obj_TemperatureScaleFactor[2];
}

static void IMUSensorParameters_updateSys_b(real_T obj_MeasurementRange, real_T
  obj_Resolution, const real_T obj_ConstantBias[3], const real_T
  obj_AxesMisalignment[3], const real_T obj_NoiseDensity[3], const real_T
  obj_BiasInstability[3], const real_T obj_RandomWalk[3], const real_T
  obj_TemperatureBias[3], const real_T obj_TemperatureScaleFactor[3], const
  real_T obj_AccelerationBias[3], h_fusion_internal_GyroscopeSi_T *sobj)
{
  if (sobj->isInitialized == 1) {
    sobj->TunablePropsChanged = true;
    sobj->tunablePropertyChanged[0] = true;
  }

  sobj->AccelerationBias[0] = obj_AccelerationBias[0];
  sobj->AccelerationBias[1] = obj_AccelerationBias[1];
  sobj->AccelerationBias[2] = obj_AccelerationBias[2];
  if (sobj->isInitialized == 1) {
    sobj->TunablePropsChanged = true;
    sobj->tunablePropertyChanged[1] = true;
  }

  sobj->MeasurementRange = obj_MeasurementRange;
  if (sobj->isInitialized == 1) {
    sobj->TunablePropsChanged = true;
    sobj->tunablePropertyChanged[2] = true;
  }

  sobj->Resolution = obj_Resolution;
  if (sobj->isInitialized == 1) {
    sobj->TunablePropsChanged = true;
    sobj->tunablePropertyChanged[3] = true;
  }

  sobj->ConstantBias[0] = obj_ConstantBias[0];
  sobj->ConstantBias[1] = obj_ConstantBias[1];
  sobj->ConstantBias[2] = obj_ConstantBias[2];
  if (sobj->isInitialized == 1) {
    sobj->TunablePropsChanged = true;
    sobj->tunablePropertyChanged[4] = true;
  }

  sobj->AxesMisalignment[0] = obj_AxesMisalignment[0];
  sobj->AxesMisalignment[1] = obj_AxesMisalignment[1];
  sobj->AxesMisalignment[2] = obj_AxesMisalignment[2];
  if (sobj->isInitialized == 1) {
    sobj->TunablePropsChanged = true;
    sobj->tunablePropertyChanged[5] = true;
  }

  sobj->NoiseDensity[0] = obj_NoiseDensity[0];
  sobj->NoiseDensity[1] = obj_NoiseDensity[1];
  sobj->NoiseDensity[2] = obj_NoiseDensity[2];
  if (sobj->isInitialized == 1) {
    sobj->TunablePropsChanged = true;
    sobj->tunablePropertyChanged[6] = true;
  }

  sobj->BiasInstability[0] = obj_BiasInstability[0];
  sobj->BiasInstability[1] = obj_BiasInstability[1];
  sobj->BiasInstability[2] = obj_BiasInstability[2];
  if (sobj->isInitialized == 1) {
    sobj->TunablePropsChanged = true;
    sobj->tunablePropertyChanged[7] = true;
  }

  sobj->RandomWalk[0] = obj_RandomWalk[0];
  sobj->RandomWalk[1] = obj_RandomWalk[1];
  sobj->RandomWalk[2] = obj_RandomWalk[2];
  if (sobj->isInitialized == 1) {
    sobj->TunablePropsChanged = true;
    sobj->tunablePropertyChanged[8] = true;
  }

  sobj->TemperatureBias[0] = obj_TemperatureBias[0];
  sobj->TemperatureBias[1] = obj_TemperatureBias[1];
  sobj->TemperatureBias[2] = obj_TemperatureBias[2];
  if (sobj->isInitialized == 1) {
    sobj->TunablePropsChanged = true;
    sobj->tunablePropertyChanged[9] = true;
  }

  sobj->TemperatureScaleFactor[0] = obj_TemperatureScaleFactor[0];
  sobj->TemperatureScaleFactor[1] = obj_TemperatureScaleFactor[1];
  sobj->TemperatureScaleFactor[2] = obj_TemperatureScaleFactor[2];
}

static void IMUSensorParameters_updateSy_b4(real_T obj_MeasurementRange, real_T
  obj_Resolution, const real_T obj_ConstantBias[3], const real_T
  obj_AxesMisalignment[3], const real_T obj_NoiseDensity[3], const real_T
  obj_BiasInstability[3], const real_T obj_RandomWalk[3], const real_T
  obj_TemperatureBias[3], const real_T obj_TemperatureScaleFactor[3],
  h_fusion_internal_Magnetomete_T *sobj)
{
  if (sobj->isInitialized == 1) {
    sobj->TunablePropsChanged = true;
    sobj->tunablePropertyChanged[0] = true;
  }

  sobj->MeasurementRange = obj_MeasurementRange;
  if (sobj->isInitialized == 1) {
    sobj->TunablePropsChanged = true;
    sobj->tunablePropertyChanged[1] = true;
  }

  sobj->Resolution = obj_Resolution;
  if (sobj->isInitialized == 1) {
    sobj->TunablePropsChanged = true;
    sobj->tunablePropertyChanged[2] = true;
  }

  sobj->ConstantBias[0] = obj_ConstantBias[0];
  sobj->ConstantBias[1] = obj_ConstantBias[1];
  sobj->ConstantBias[2] = obj_ConstantBias[2];
  if (sobj->isInitialized == 1) {
    sobj->TunablePropsChanged = true;
    sobj->tunablePropertyChanged[3] = true;
  }

  sobj->AxesMisalignment[0] = obj_AxesMisalignment[0];
  sobj->AxesMisalignment[1] = obj_AxesMisalignment[1];
  sobj->AxesMisalignment[2] = obj_AxesMisalignment[2];
  if (sobj->isInitialized == 1) {
    sobj->TunablePropsChanged = true;
    sobj->tunablePropertyChanged[4] = true;
  }

  sobj->NoiseDensity[0] = obj_NoiseDensity[0];
  sobj->NoiseDensity[1] = obj_NoiseDensity[1];
  sobj->NoiseDensity[2] = obj_NoiseDensity[2];
  if (sobj->isInitialized == 1) {
    sobj->TunablePropsChanged = true;
    sobj->tunablePropertyChanged[5] = true;
  }

  sobj->BiasInstability[0] = obj_BiasInstability[0];
  sobj->BiasInstability[1] = obj_BiasInstability[1];
  sobj->BiasInstability[2] = obj_BiasInstability[2];
  if (sobj->isInitialized == 1) {
    sobj->TunablePropsChanged = true;
    sobj->tunablePropertyChanged[6] = true;
  }

  sobj->RandomWalk[0] = obj_RandomWalk[0];
  sobj->RandomWalk[1] = obj_RandomWalk[1];
  sobj->RandomWalk[2] = obj_RandomWalk[2];
  if (sobj->isInitialized == 1) {
    sobj->TunablePropsChanged = true;
    sobj->tunablePropertyChanged[7] = true;
  }

  sobj->TemperatureBias[0] = obj_TemperatureBias[0];
  sobj->TemperatureBias[1] = obj_TemperatureBias[1];
  sobj->TemperatureBias[2] = obj_TemperatureBias[2];
  if (sobj->isInitialized == 1) {
    sobj->TunablePropsChanged = true;
    sobj->tunablePropertyChanged[8] = true;
  }

  sobj->TemperatureScaleFactor[0] = obj_TemperatureScaleFactor[0];
  sobj->TemperatureScaleFactor[1] = obj_TemperatureScaleFactor[1];
  sobj->TemperatureScaleFactor[2] = obj_TemperatureScaleFactor[2];
}

static boolean_T proc_control_node_vectorAny(const boolean_T x_data[], const
  int32_T x_size[2])
{
  int32_T b_k;
  boolean_T exitg1;
  boolean_T y;
  y = false;
  b_k = 0;
  exitg1 = false;
  while ((!exitg1) && (b_k <= x_size[1] - 1)) {
    if (!x_data[b_k]) {
      b_k++;
    } else {
      y = true;
      exitg1 = true;
    }
  }

  return y;
}

static void proc_co_genrand_uint32_vector_b(uint32_T mt[625], uint32_T u[2])
{
  for (proc_control_node_B.b_j_c = 0; proc_control_node_B.b_j_c < 2;
       proc_control_node_B.b_j_c++) {
    proc_control_node_B.mti = mt[624] + 1U;
    if (mt[624] + 1U >= 625U) {
      for (proc_control_node_B.b_kk = 0; proc_control_node_B.b_kk < 227;
           proc_control_node_B.b_kk++) {
        proc_control_node_B.y_h1 = (mt[proc_control_node_B.b_kk + 1] &
          2147483647U) | (mt[proc_control_node_B.b_kk] & 2147483648U);
        if ((proc_control_node_B.y_h1 & 1U) == 0U) {
          proc_control_node_B.y_h1 >>= 1U;
        } else {
          proc_control_node_B.y_h1 = proc_control_node_B.y_h1 >> 1U ^
            2567483615U;
        }

        mt[proc_control_node_B.b_kk] = mt[proc_control_node_B.b_kk + 397] ^
          proc_control_node_B.y_h1;
      }

      for (proc_control_node_B.b_kk = 0; proc_control_node_B.b_kk < 396;
           proc_control_node_B.b_kk++) {
        proc_control_node_B.y_h1 = (mt[proc_control_node_B.b_kk + 227] &
          2147483648U) | (mt[proc_control_node_B.b_kk + 228] & 2147483647U);
        if ((proc_control_node_B.y_h1 & 1U) == 0U) {
          proc_control_node_B.y_h1 >>= 1U;
        } else {
          proc_control_node_B.y_h1 = proc_control_node_B.y_h1 >> 1U ^
            2567483615U;
        }

        mt[proc_control_node_B.b_kk + 227] = mt[proc_control_node_B.b_kk] ^
          proc_control_node_B.y_h1;
      }

      proc_control_node_B.y_h1 = (mt[623] & 2147483648U) | (mt[0] & 2147483647U);
      if ((proc_control_node_B.y_h1 & 1U) == 0U) {
        proc_control_node_B.y_h1 >>= 1U;
      } else {
        proc_control_node_B.y_h1 = proc_control_node_B.y_h1 >> 1U ^ 2567483615U;
      }

      mt[623] = mt[396] ^ proc_control_node_B.y_h1;
      proc_control_node_B.mti = 1U;
    }

    proc_control_node_B.y_h1 = mt[static_cast<int32_T>(proc_control_node_B.mti)
      - 1];
    mt[624] = proc_control_node_B.mti;
    proc_control_node_B.y_h1 ^= proc_control_node_B.y_h1 >> 11U;
    proc_control_node_B.y_h1 ^= proc_control_node_B.y_h1 << 7U & 2636928640U;
    proc_control_node_B.y_h1 ^= proc_control_node_B.y_h1 << 15U & 4022730752U;
    u[proc_control_node_B.b_j_c] = proc_control_node_B.y_h1 >> 18U ^
      proc_control_node_B.y_h1;
  }
}

static real_T proc_control_node_genrandu_b(uint32_T mt[625])
{
  real_T r;
  int32_T exitg1;
  boolean_T exitg2;

  // ========================= COPYRIGHT NOTICE ============================
  //  This is a uniform (0,1) pseudorandom number generator based on:
  //
  //  A C-program for MT19937, with initialization improved 2002/1/26.
  //  Coded by Takuji Nishimura and Makoto Matsumoto.
  //
  //  Copyright (C) 1997 - 2002, Makoto Matsumoto and Takuji Nishimura,
  //  All rights reserved.
  //
  //  Redistribution and use in source and binary forms, with or without
  //  modification, are permitted provided that the following conditions
  //  are met:
  //
  //    1. Redistributions of source code must retain the above copyright
  //       notice, this list of conditions and the following disclaimer.
  //
  //    2. Redistributions in binary form must reproduce the above copyright
  //       notice, this list of conditions and the following disclaimer
  //       in the documentation and/or other materials provided with the
  //       distribution.
  //
  //    3. The names of its contributors may not be used to endorse or
  //       promote products derived from this software without specific
  //       prior written permission.
  //
  //  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
  //  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
  //  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
  //  A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT
  //  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
  //  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
  //  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
  //  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
  //  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  //  (INCLUDING  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  //  OF THIS  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  //
  // =============================   END   =================================
  do {
    exitg1 = 0;
    proc_co_genrand_uint32_vector_b(mt, proc_control_node_B.b_u);
    r = (static_cast<real_T>(proc_control_node_B.b_u[0] >> 5U) * 6.7108864E+7 +
         static_cast<real_T>(proc_control_node_B.b_u[1] >> 6U)) *
      1.1102230246251565E-16;
    if (r == 0.0) {
      if ((mt[624] >= 1U) && (mt[624] < 625U)) {
        proc_control_node_B.b_isvalid = true;
      } else {
        proc_control_node_B.b_isvalid = false;
      }

      if (proc_control_node_B.b_isvalid) {
        proc_control_node_B.b_isvalid = false;
        proc_control_node_B.k_de = 0;
        exitg2 = false;
        while ((!exitg2) && (proc_control_node_B.k_de + 1 < 625)) {
          if (mt[proc_control_node_B.k_de] == 0U) {
            proc_control_node_B.k_de++;
          } else {
            proc_control_node_B.b_isvalid = true;
            exitg2 = true;
          }
        }
      }

      if (!proc_control_node_B.b_isvalid) {
        proc_control_node_B.r_f = 67U;
        mt[0] = 67U;
        for (proc_control_node_B.k_de = 0; proc_control_node_B.k_de < 623;
             proc_control_node_B.k_de++) {
          proc_control_node_B.r_f = ((proc_control_node_B.r_f >> 30U ^
            proc_control_node_B.r_f) * 1812433253U + proc_control_node_B.k_de) +
            1U;
          mt[proc_control_node_B.k_de + 1] = proc_control_node_B.r_f;
        }

        mt[624] = 624U;
      }
    } else {
      exitg1 = 1;
    }
  } while (exitg1 == 0);

  return r;
}

static real_T proc_contr_eml_rand_mt19937ar_b(uint32_T state[625])
{
  real_T r;
  static const real_T tmp[257] = { 1.0, 0.977101701267673, 0.959879091800108,
    0.9451989534423, 0.932060075959231, 0.919991505039348, 0.908726440052131,
    0.898095921898344, 0.887984660755834, 0.878309655808918, 0.869008688036857,
    0.860033621196332, 0.851346258458678, 0.842915653112205, 0.834716292986884,
    0.826726833946222, 0.818929191603703, 0.811307874312656, 0.803849483170964,
    0.796542330422959, 0.789376143566025, 0.782341832654803, 0.775431304981187,
    0.768637315798486, 0.761953346836795, 0.755373506507096, 0.748892447219157,
    0.742505296340151, 0.736207598126863, 0.729995264561476, 0.72386453346863,
    0.717811932630722, 0.711834248878248, 0.705928501332754, 0.700091918136512,
    0.694321916126117, 0.688616083004672, 0.682972161644995, 0.677388036218774,
    0.671861719897082, 0.66639134390875, 0.660975147776663, 0.655611470579697,
    0.650298743110817, 0.645035480820822, 0.639820277453057, 0.634651799287624,
    0.629528779924837, 0.624450015547027, 0.619414360605834, 0.614420723888914,
    0.609468064925773, 0.604555390697468, 0.599681752619125, 0.594846243767987,
    0.590047996332826, 0.585286179263371, 0.580559996100791, 0.575868682972354,
    0.571211506735253, 0.566587763256165, 0.561996775814525, 0.557437893618766,
    0.552910490425833, 0.548413963255266, 0.543947731190026, 0.539511234256952,
    0.535103932380458, 0.530725304403662, 0.526374847171684, 0.522052074672322,
    0.517756517229756, 0.513487720747327, 0.509245245995748, 0.505028667943468,
    0.500837575126149, 0.49667156905249, 0.492530263643869, 0.488413284705458,
    0.484320269426683, 0.480250865909047, 0.476204732719506, 0.47218153846773,
    0.468180961405694, 0.464202689048174, 0.460246417812843, 0.456311852678716,
    0.452398706861849, 0.448506701507203, 0.444635565395739, 0.440785034665804,
    0.436954852547985, 0.433144769112652, 0.429354541029442, 0.425583931338022,
    0.421832709229496, 0.418100649837848, 0.414387534040891, 0.410693148270188,
    0.407017284329473, 0.403359739221114, 0.399720314980197, 0.396098818515832,
    0.392495061459315, 0.388908860018789, 0.385340034840077, 0.381788410873393,
    0.378253817245619, 0.374736087137891, 0.371235057668239, 0.367750569779032,
    0.364282468129004, 0.360830600989648, 0.357394820145781, 0.353974980800077,
    0.350570941481406, 0.347182563956794, 0.343809713146851, 0.340452257044522,
    0.337110066637006, 0.333783015830718, 0.330470981379163, 0.327173842813601,
    0.323891482376391, 0.320623784956905, 0.317370638029914, 0.314131931596337,
    0.310907558126286, 0.307697412504292, 0.30450139197665, 0.301319396100803,
    0.298151326696685, 0.294997087799962, 0.291856585617095, 0.288729728482183,
    0.285616426815502, 0.282516593083708, 0.279430141761638, 0.276356989295668,
    0.273297054068577, 0.270250256365875, 0.267216518343561, 0.264195763997261,
    0.261187919132721, 0.258192911337619, 0.255210669954662, 0.252241126055942,
    0.249284212418529, 0.246339863501264, 0.24340801542275, 0.240488605940501,
    0.237581574431238, 0.23468686187233, 0.231804410824339, 0.228934165414681,
    0.226076071322381, 0.223230075763918, 0.220396127480152, 0.217574176724331,
    0.214764175251174, 0.211966076307031, 0.209179834621125, 0.206405406397881,
    0.203642749310335, 0.200891822494657, 0.198152586545776, 0.195425003514135,
    0.192709036903589, 0.190004651670465, 0.187311814223801, 0.1846304924268,
    0.181960655599523, 0.179302274522848, 0.176655321443735, 0.174019770081839,
    0.171395595637506, 0.168782774801212, 0.166181285764482, 0.163591108232366,
    0.161012223437511, 0.158444614155925, 0.15588826472448, 0.153343161060263,
    0.150809290681846, 0.148286642732575, 0.145775208005994, 0.143274978973514,
    0.140785949814445, 0.138308116448551, 0.135841476571254, 0.133386029691669,
    0.130941777173644, 0.12850872228, 0.126086870220186, 0.123676228201597,
    0.12127680548479, 0.11888861344291, 0.116511665625611, 0.114145977827839,
    0.111791568163838, 0.109448457146812, 0.107116667774684, 0.104796225622487,
    0.102487158941935, 0.10018949876881, 0.0979032790388625, 0.095628536713009,
    0.093365311912691, 0.0911136480663738, 0.0888735920682759,
    0.0866451944505581, 0.0844285095703535, 0.082223595813203,
    0.0800305158146631, 0.0778493367020961, 0.0756801303589272,
    0.0735229737139814, 0.0713779490588905, 0.0692451443970068,
    0.0671246538277886, 0.065016577971243, 0.0629210244377582, 0.06083810834954,
    0.0587679529209339, 0.0567106901062031, 0.0546664613248891,
    0.0526354182767924, 0.0506177238609479, 0.0486135532158687,
    0.0466230949019305, 0.0446465522512946, 0.0426841449164746,
    0.0407361106559411, 0.0388027074045262, 0.0368842156885674,
    0.0349809414617162, 0.0330932194585786, 0.0312214171919203,
    0.0293659397581334, 0.0275272356696031, 0.0257058040085489,
    0.0239022033057959, 0.0221170627073089, 0.0203510962300445,
    0.0186051212757247, 0.0168800831525432, 0.0151770883079353,
    0.0134974506017399, 0.0118427578579079, 0.0102149714397015,
    0.00861658276939875, 0.00705087547137324, 0.00552240329925101,
    0.00403797259336304, 0.00260907274610216, 0.0012602859304986,
    0.000477467764609386 };

  const real_T *fitab;
  int32_T exitg1;
  proc_control_node_B.xi[0] = 0.0;
  proc_control_node_B.xi[1] = 0.215241895984875;
  proc_control_node_B.xi[2] = 0.286174591792068;
  proc_control_node_B.xi[3] = 0.335737519214422;
  proc_control_node_B.xi[4] = 0.375121332878378;
  proc_control_node_B.xi[5] = 0.408389134611989;
  proc_control_node_B.xi[6] = 0.43751840220787;
  proc_control_node_B.xi[7] = 0.46363433679088;
  proc_control_node_B.xi[8] = 0.487443966139235;
  proc_control_node_B.xi[9] = 0.50942332960209;
  proc_control_node_B.xi[10] = 0.529909720661557;
  proc_control_node_B.xi[11] = 0.549151702327164;
  proc_control_node_B.xi[12] = 0.567338257053817;
  proc_control_node_B.xi[13] = 0.584616766106378;
  proc_control_node_B.xi[14] = 0.601104617755991;
  proc_control_node_B.xi[15] = 0.61689699000775;
  proc_control_node_B.xi[16] = 0.63207223638606;
  proc_control_node_B.xi[17] = 0.646695714894993;
  proc_control_node_B.xi[18] = 0.660822574244419;
  proc_control_node_B.xi[19] = 0.674499822837293;
  proc_control_node_B.xi[20] = 0.687767892795788;
  proc_control_node_B.xi[21] = 0.700661841106814;
  proc_control_node_B.xi[22] = 0.713212285190975;
  proc_control_node_B.xi[23] = 0.725446140909999;
  proc_control_node_B.xi[24] = 0.737387211434295;
  proc_control_node_B.xi[25] = 0.749056662017815;
  proc_control_node_B.xi[26] = 0.760473406430107;
  proc_control_node_B.xi[27] = 0.771654424224568;
  proc_control_node_B.xi[28] = 0.782615023307232;
  proc_control_node_B.xi[29] = 0.793369058840623;
  proc_control_node_B.xi[30] = 0.80392911698997;
  proc_control_node_B.xi[31] = 0.814306670135215;
  proc_control_node_B.xi[32] = 0.824512208752291;
  proc_control_node_B.xi[33] = 0.834555354086381;
  proc_control_node_B.xi[34] = 0.844444954909153;
  proc_control_node_B.xi[35] = 0.854189171008163;
  proc_control_node_B.xi[36] = 0.863795545553308;
  proc_control_node_B.xi[37] = 0.87327106808886;
  proc_control_node_B.xi[38] = 0.882622229585165;
  proc_control_node_B.xi[39] = 0.891855070732941;
  proc_control_node_B.xi[40] = 0.900975224461221;
  proc_control_node_B.xi[41] = 0.909987953496718;
  proc_control_node_B.xi[42] = 0.91889818364959;
  proc_control_node_B.xi[43] = 0.927710533401999;
  proc_control_node_B.xi[44] = 0.936429340286575;
  proc_control_node_B.xi[45] = 0.945058684468165;
  proc_control_node_B.xi[46] = 0.953602409881086;
  proc_control_node_B.xi[47] = 0.96206414322304;
  proc_control_node_B.xi[48] = 0.970447311064224;
  proc_control_node_B.xi[49] = 0.978755155294224;
  proc_control_node_B.xi[50] = 0.986990747099062;
  proc_control_node_B.xi[51] = 0.99515699963509;
  proc_control_node_B.xi[52] = 1.00325667954467;
  proc_control_node_B.xi[53] = 1.01129241744;
  proc_control_node_B.xi[54] = 1.01926671746548;
  proc_control_node_B.xi[55] = 1.02718196603564;
  proc_control_node_B.xi[56] = 1.03504043983344;
  proc_control_node_B.xi[57] = 1.04284431314415;
  proc_control_node_B.xi[58] = 1.05059566459093;
  proc_control_node_B.xi[59] = 1.05829648333067;
  proc_control_node_B.xi[60] = 1.06594867476212;
  proc_control_node_B.xi[61] = 1.07355406579244;
  proc_control_node_B.xi[62] = 1.0811144097034;
  proc_control_node_B.xi[63] = 1.08863139065398;
  proc_control_node_B.xi[64] = 1.09610662785202;
  proc_control_node_B.xi[65] = 1.10354167942464;
  proc_control_node_B.xi[66] = 1.11093804601357;
  proc_control_node_B.xi[67] = 1.11829717411934;
  proc_control_node_B.xi[68] = 1.12562045921553;
  proc_control_node_B.xi[69] = 1.13290924865253;
  proc_control_node_B.xi[70] = 1.14016484436815;
  proc_control_node_B.xi[71] = 1.14738850542085;
  proc_control_node_B.xi[72] = 1.15458145035993;
  proc_control_node_B.xi[73] = 1.16174485944561;
  proc_control_node_B.xi[74] = 1.16887987673083;
  proc_control_node_B.xi[75] = 1.17598761201545;
  proc_control_node_B.xi[76] = 1.18306914268269;
  proc_control_node_B.xi[77] = 1.19012551542669;
  proc_control_node_B.xi[78] = 1.19715774787944;
  proc_control_node_B.xi[79] = 1.20416683014438;
  proc_control_node_B.xi[80] = 1.2111537262437;
  proc_control_node_B.xi[81] = 1.21811937548548;
  proc_control_node_B.xi[82] = 1.22506469375653;
  proc_control_node_B.xi[83] = 1.23199057474614;
  proc_control_node_B.xi[84] = 1.23889789110569;
  proc_control_node_B.xi[85] = 1.24578749554863;
  proc_control_node_B.xi[86] = 1.2526602218949;
  proc_control_node_B.xi[87] = 1.25951688606371;
  proc_control_node_B.xi[88] = 1.26635828701823;
  proc_control_node_B.xi[89] = 1.27318520766536;
  proc_control_node_B.xi[90] = 1.27999841571382;
  proc_control_node_B.xi[91] = 1.28679866449324;
  proc_control_node_B.xi[92] = 1.29358669373695;
  proc_control_node_B.xi[93] = 1.30036323033084;
  proc_control_node_B.xi[94] = 1.30712898903073;
  proc_control_node_B.xi[95] = 1.31388467315022;
  proc_control_node_B.xi[96] = 1.32063097522106;
  proc_control_node_B.xi[97] = 1.32736857762793;
  proc_control_node_B.xi[98] = 1.33409815321936;
  proc_control_node_B.xi[99] = 1.3408203658964;
  proc_control_node_B.xi[100] = 1.34753587118059;
  proc_control_node_B.xi[101] = 1.35424531676263;
  proc_control_node_B.xi[102] = 1.36094934303328;
  proc_control_node_B.xi[103] = 1.36764858359748;
  proc_control_node_B.xi[104] = 1.37434366577317;
  proc_control_node_B.xi[105] = 1.38103521107586;
  proc_control_node_B.xi[106] = 1.38772383568998;
  proc_control_node_B.xi[107] = 1.39441015092814;
  proc_control_node_B.xi[108] = 1.40109476367925;
  proc_control_node_B.xi[109] = 1.4077782768464;
  proc_control_node_B.xi[110] = 1.41446128977547;
  proc_control_node_B.xi[111] = 1.42114439867531;
  proc_control_node_B.xi[112] = 1.42782819703026;
  proc_control_node_B.xi[113] = 1.43451327600589;
  proc_control_node_B.xi[114] = 1.44120022484872;
  proc_control_node_B.xi[115] = 1.44788963128058;
  proc_control_node_B.xi[116] = 1.45458208188841;
  proc_control_node_B.xi[117] = 1.46127816251028;
  proc_control_node_B.xi[118] = 1.46797845861808;
  proc_control_node_B.xi[119] = 1.47468355569786;
  proc_control_node_B.xi[120] = 1.48139403962819;
  proc_control_node_B.xi[121] = 1.48811049705745;
  proc_control_node_B.xi[122] = 1.49483351578049;
  proc_control_node_B.xi[123] = 1.50156368511546;
  proc_control_node_B.xi[124] = 1.50830159628131;
  proc_control_node_B.xi[125] = 1.51504784277671;
  proc_control_node_B.xi[126] = 1.521803020761;
  proc_control_node_B.xi[127] = 1.52856772943771;
  proc_control_node_B.xi[128] = 1.53534257144151;
  proc_control_node_B.xi[129] = 1.542128153229;
  proc_control_node_B.xi[130] = 1.54892508547417;
  proc_control_node_B.xi[131] = 1.55573398346918;
  proc_control_node_B.xi[132] = 1.56255546753104;
  proc_control_node_B.xi[133] = 1.56939016341512;
  proc_control_node_B.xi[134] = 1.57623870273591;
  proc_control_node_B.xi[135] = 1.58310172339603;
  proc_control_node_B.xi[136] = 1.58997987002419;
  proc_control_node_B.xi[137] = 1.59687379442279;
  proc_control_node_B.xi[138] = 1.60378415602609;
  proc_control_node_B.xi[139] = 1.61071162236983;
  proc_control_node_B.xi[140] = 1.61765686957301;
  proc_control_node_B.xi[141] = 1.62462058283303;
  proc_control_node_B.xi[142] = 1.63160345693487;
  proc_control_node_B.xi[143] = 1.63860619677555;
  proc_control_node_B.xi[144] = 1.64562951790478;
  proc_control_node_B.xi[145] = 1.65267414708306;
  proc_control_node_B.xi[146] = 1.65974082285818;
  proc_control_node_B.xi[147] = 1.66683029616166;
  proc_control_node_B.xi[148] = 1.67394333092612;
  proc_control_node_B.xi[149] = 1.68108070472517;
  proc_control_node_B.xi[150] = 1.68824320943719;
  proc_control_node_B.xi[151] = 1.69543165193456;
  proc_control_node_B.xi[152] = 1.70264685479992;
  proc_control_node_B.xi[153] = 1.7098896570713;
  proc_control_node_B.xi[154] = 1.71716091501782;
  proc_control_node_B.xi[155] = 1.72446150294804;
  proc_control_node_B.xi[156] = 1.73179231405296;
  proc_control_node_B.xi[157] = 1.73915426128591;
  proc_control_node_B.xi[158] = 1.74654827828172;
  proc_control_node_B.xi[159] = 1.75397532031767;
  proc_control_node_B.xi[160] = 1.76143636531891;
  proc_control_node_B.xi[161] = 1.76893241491127;
  proc_control_node_B.xi[162] = 1.77646449552452;
  proc_control_node_B.xi[163] = 1.78403365954944;
  proc_control_node_B.xi[164] = 1.79164098655216;
  proc_control_node_B.xi[165] = 1.79928758454972;
  proc_control_node_B.xi[166] = 1.80697459135082;
  proc_control_node_B.xi[167] = 1.81470317596628;
  proc_control_node_B.xi[168] = 1.82247454009388;
  proc_control_node_B.xi[169] = 1.83028991968276;
  proc_control_node_B.xi[170] = 1.83815058658281;
  proc_control_node_B.xi[171] = 1.84605785028518;
  proc_control_node_B.xi[172] = 1.8540130597602;
  proc_control_node_B.xi[173] = 1.86201760539967;
  proc_control_node_B.xi[174] = 1.87007292107127;
  proc_control_node_B.xi[175] = 1.878180486293;
  proc_control_node_B.xi[176] = 1.88634182853678;
  proc_control_node_B.xi[177] = 1.8945585256707;
  proc_control_node_B.xi[178] = 1.90283220855043;
  proc_control_node_B.xi[179] = 1.91116456377125;
  proc_control_node_B.xi[180] = 1.91955733659319;
  proc_control_node_B.xi[181] = 1.92801233405266;
  proc_control_node_B.xi[182] = 1.93653142827569;
  proc_control_node_B.xi[183] = 1.94511656000868;
  proc_control_node_B.xi[184] = 1.95376974238465;
  proc_control_node_B.xi[185] = 1.96249306494436;
  proc_control_node_B.xi[186] = 1.97128869793366;
  proc_control_node_B.xi[187] = 1.98015889690048;
  proc_control_node_B.xi[188] = 1.98910600761744;
  proc_control_node_B.xi[189] = 1.99813247135842;
  proc_control_node_B.xi[190] = 2.00724083056053;
  proc_control_node_B.xi[191] = 2.0164337349062;
  proc_control_node_B.xi[192] = 2.02571394786385;
  proc_control_node_B.xi[193] = 2.03508435372962;
  proc_control_node_B.xi[194] = 2.04454796521753;
  proc_control_node_B.xi[195] = 2.05410793165065;
  proc_control_node_B.xi[196] = 2.06376754781173;
  proc_control_node_B.xi[197] = 2.07353026351874;
  proc_control_node_B.xi[198] = 2.0833996939983;
  proc_control_node_B.xi[199] = 2.09337963113879;
  proc_control_node_B.xi[200] = 2.10347405571488;
  proc_control_node_B.xi[201] = 2.11368715068665;
  proc_control_node_B.xi[202] = 2.12402331568952;
  proc_control_node_B.xi[203] = 2.13448718284602;
  proc_control_node_B.xi[204] = 2.14508363404789;
  proc_control_node_B.xi[205] = 2.15581781987674;
  proc_control_node_B.xi[206] = 2.16669518035431;
  proc_control_node_B.xi[207] = 2.17772146774029;
  proc_control_node_B.xi[208] = 2.18890277162636;
  proc_control_node_B.xi[209] = 2.20024554661128;
  proc_control_node_B.xi[210] = 2.21175664288416;
  proc_control_node_B.xi[211] = 2.22344334009251;
  proc_control_node_B.xi[212] = 2.23531338492992;
  proc_control_node_B.xi[213] = 2.24737503294739;
  proc_control_node_B.xi[214] = 2.25963709517379;
  proc_control_node_B.xi[215] = 2.27210899022838;
  proc_control_node_B.xi[216] = 2.28480080272449;
  proc_control_node_B.xi[217] = 2.29772334890286;
  proc_control_node_B.xi[218] = 2.31088825060137;
  proc_control_node_B.xi[219] = 2.32430801887113;
  proc_control_node_B.xi[220] = 2.33799614879653;
  proc_control_node_B.xi[221] = 2.35196722737914;
  proc_control_node_B.xi[222] = 2.36623705671729;
  proc_control_node_B.xi[223] = 2.38082279517208;
  proc_control_node_B.xi[224] = 2.39574311978193;
  proc_control_node_B.xi[225] = 2.41101841390112;
  proc_control_node_B.xi[226] = 2.42667098493715;
  proc_control_node_B.xi[227] = 2.44272531820036;
  proc_control_node_B.xi[228] = 2.4592083743347;
  proc_control_node_B.xi[229] = 2.47614993967052;
  proc_control_node_B.xi[230] = 2.49358304127105;
  proc_control_node_B.xi[231] = 2.51154444162669;
  proc_control_node_B.xi[232] = 2.53007523215985;
  proc_control_node_B.xi[233] = 2.54922155032478;
  proc_control_node_B.xi[234] = 2.56903545268184;
  proc_control_node_B.xi[235] = 2.58957598670829;
  proc_control_node_B.xi[236] = 2.61091051848882;
  proc_control_node_B.xi[237] = 2.63311639363158;
  proc_control_node_B.xi[238] = 2.65628303757674;
  proc_control_node_B.xi[239] = 2.68051464328574;
  proc_control_node_B.xi[240] = 2.70593365612306;
  proc_control_node_B.xi[241] = 2.73268535904401;
  proc_control_node_B.xi[242] = 2.76094400527999;
  proc_control_node_B.xi[243] = 2.79092117400193;
  proc_control_node_B.xi[244] = 2.82287739682644;
  proc_control_node_B.xi[245] = 2.85713873087322;
  proc_control_node_B.xi[246] = 2.89412105361341;
  proc_control_node_B.xi[247] = 2.93436686720889;
  proc_control_node_B.xi[248] = 2.97860327988184;
  proc_control_node_B.xi[249] = 3.02783779176959;
  proc_control_node_B.xi[250] = 3.08352613200214;
  proc_control_node_B.xi[251] = 3.147889289518;
  proc_control_node_B.xi[252] = 3.2245750520478;
  proc_control_node_B.xi[253] = 3.32024473383983;
  proc_control_node_B.xi[254] = 3.44927829856143;
  proc_control_node_B.xi[255] = 3.65415288536101;
  proc_control_node_B.xi[256] = 3.91075795952492;
  fitab = &tmp[0];
  do {
    exitg1 = 0;
    proc_co_genrand_uint32_vector_b(state, proc_control_node_B.u32);
    proc_control_node_B.i_c = static_cast<int32_T>((proc_control_node_B.u32[1] >>
      24U) + 1U);
    r = ((static_cast<real_T>(proc_control_node_B.u32[0] >> 3U) * 1.6777216E+7 +
          static_cast<real_T>(static_cast<int32_T>(proc_control_node_B.u32[1]) &
           16777215)) * 2.2204460492503131E-16 - 1.0) *
      proc_control_node_B.xi[proc_control_node_B.i_c];
    if (fabs(r) <= proc_control_node_B.xi[proc_control_node_B.i_c - 1]) {
      exitg1 = 1;
    } else if (proc_control_node_B.i_c < 256) {
      proc_control_node_B.x_kg = proc_control_node_genrandu_b(state);
      if ((fitab[proc_control_node_B.i_c - 1] - fitab[proc_control_node_B.i_c]) *
          proc_control_node_B.x_kg + fitab[proc_control_node_B.i_c] < exp(-0.5 *
           r * r)) {
        exitg1 = 1;
      }
    } else {
      do {
        proc_control_node_B.x_kg = proc_control_node_genrandu_b(state);
        proc_control_node_B.x_kg = log(proc_control_node_B.x_kg) *
          0.273661237329758;
        proc_control_node_B.d_u = proc_control_node_genrandu_b(state);
      } while (!(-2.0 * log(proc_control_node_B.d_u) > proc_control_node_B.x_kg *
                 proc_control_node_B.x_kg));

      if (r < 0.0) {
        r = proc_control_node_B.x_kg - 3.65415288536101;
      } else {
        r = 3.65415288536101 - proc_control_node_B.x_kg;
      }

      exitg1 = 1;
    }
  } while (exitg1 == 0);

  return r;
}

static void IMUSensorBase_stepRandomStream(fusion_simulink_imuSensor_pro_T *obj,
  real_T whiteNoise[27])
{
  for (proc_control_node_B.b_colIdx = 0; proc_control_node_B.b_colIdx < 27;
       proc_control_node_B.b_colIdx++) {
    whiteNoise[proc_control_node_B.b_colIdx] = proc_contr_eml_rand_mt19937ar_b
      (obj->pStreamState);
  }
}

static void proc_control_node_filter(real_T b, real_T a[2], const real_T x[3],
  const real_T zi[3], real_T y[3], real_T zf[3])
{
  if ((!rtIsInf(a[0])) && (!rtIsNaN(a[0])) && (!(a[0] == 0.0)) && (a[0] != 1.0))
  {
    b /= a[0];
    a[1] /= a[0];
  }

  y[0] = x[0] * b + zi[0];
  zf[0] = -y[0] * a[1];
  y[1] = x[1] * b + zi[1];
  zf[1] = -y[1] * a[1];
  y[2] = x[2] * b + zi[2];
  zf[2] = -y[2] * a[1];
}

static void proc_control__SystemCore_step_b(h_fusion_internal_Acceleromet_T *obj,
  const real_T varargin_1[3], const real_T varargin_2[9], const real_T
  varargin_3[9], real_T varargout_1[3])
{
  static const int8_T tmp[9] = { 0, 1, 1, 1, 0, 1, 1, 1, 0 };

  if (obj->isInitialized != 1) {
    obj->isInitialized = 1;
    for (proc_control_node_B.k_g5 = 0; proc_control_node_B.k_g5 < 9;
         proc_control_node_B.k_g5++) {
      proc_control_node_B.b_I_f[proc_control_node_B.k_g5] = 0;
    }

    proc_control_node_B.b_I_f[0] = 1;
    proc_control_node_B.b_I_f[4] = 1;
    proc_control_node_B.b_I_f[8] = 1;
    for (proc_control_node_B.k_g5 = 0; proc_control_node_B.k_g5 < 9;
         proc_control_node_B.k_g5++) {
      proc_control_node_B.a_l[proc_control_node_B.k_g5] =
        tmp[proc_control_node_B.k_g5];
    }

    proc_control_node_B.temperatureDrift_h[0] = obj->AxesMisalignment[0] / 100.0;
    proc_control_node_B.temperatureDrift_h[1] = obj->AxesMisalignment[1] / 100.0;
    proc_control_node_B.temperatureDrift_h[2] = obj->AxesMisalignment[2] / 100.0;
    for (proc_control_node_B.k_g5 = 0; proc_control_node_B.k_g5 < 3;
         proc_control_node_B.k_g5++) {
      proc_control_node_B.B_idx_0 =
        proc_control_node_B.temperatureDrift_h[proc_control_node_B.k_g5];
      proc_control_node_B.c_j[3 * proc_control_node_B.k_g5] =
        proc_control_node_B.a_l[3 * proc_control_node_B.k_g5] *
        proc_control_node_B.B_idx_0;
      proc_control_node_B.nx_d = 3 * proc_control_node_B.k_g5 + 1;
      proc_control_node_B.c_j[proc_control_node_B.nx_d] =
        proc_control_node_B.a_l[proc_control_node_B.nx_d] *
        proc_control_node_B.B_idx_0;
      proc_control_node_B.nx_d = 3 * proc_control_node_B.k_g5 + 2;
      proc_control_node_B.c_j[proc_control_node_B.nx_d] =
        proc_control_node_B.a_l[proc_control_node_B.nx_d] *
        proc_control_node_B.B_idx_0;
    }

    for (proc_control_node_B.k_g5 = 0; proc_control_node_B.k_g5 < 9;
         proc_control_node_B.k_g5++) {
      obj->pGain[proc_control_node_B.k_g5] = static_cast<real_T>
        (proc_control_node_B.b_I_f[proc_control_node_B.k_g5]) +
        proc_control_node_B.c_j[proc_control_node_B.k_g5];
    }

    obj->pBiasInstFilterNum = 1.0;
    obj->pBiasInstFilterDen[0] = 1.0;
    obj->pBiasInstFilterDen[1] = -0.5;
    obj->pBiasInstFilterStates[0] = 0.0;
    obj->pBiasInstFilterStates[1] = 0.0;
    obj->pBiasInstFilterStates[2] = 0.0;
    obj->pStdDevBiasInst[0] = obj->BiasInstability[0];
    obj->pStdDevBiasInst[1] = obj->BiasInstability[1];
    obj->pStdDevBiasInst[2] = obj->BiasInstability[2];
    obj->pStdDevWhiteNoise[0] = 7.0710678118654755 * obj->NoiseDensity[0];
    obj->pStdDevWhiteNoise[1] = 7.0710678118654755 * obj->NoiseDensity[1];
    obj->pStdDevWhiteNoise[2] = 7.0710678118654755 * obj->NoiseDensity[2];
    obj->pRandWalkFilterStates[0] = 0.0;
    obj->pRandWalkFilterStates[1] = 0.0;
    obj->pRandWalkFilterStates[2] = 0.0;
    obj->pStdDevRandWalk[0] = obj->RandomWalk[0] / 7.0710678118654755;
    obj->pStdDevRandWalk[1] = obj->RandomWalk[1] / 7.0710678118654755;
    obj->pStdDevRandWalk[2] = obj->RandomWalk[2] / 7.0710678118654755;
    obj->pRefFrame = &obj->_pobj0;
    obj->TunablePropsChanged = false;
    obj->pBiasInstFilterStates[0] = 0.0;
    obj->pBiasInstFilterStates[1] = 0.0;
    obj->pBiasInstFilterStates[2] = 0.0;
    obj->pRandWalkFilterStates[0] = 0.0;
    obj->pRandWalkFilterStates[1] = 0.0;
    obj->pRandWalkFilterStates[2] = 0.0;
  }

  if (obj->TunablePropsChanged) {
    obj->TunablePropsChanged = false;
    proc_control_node_B.flag_g = obj->tunablePropertyChanged[3];
    if (proc_control_node_B.flag_g) {
      for (proc_control_node_B.k_g5 = 0; proc_control_node_B.k_g5 < 9;
           proc_control_node_B.k_g5++) {
        proc_control_node_B.b_I_f[proc_control_node_B.k_g5] = 0;
      }

      proc_control_node_B.b_I_f[0] = 1;
      proc_control_node_B.b_I_f[4] = 1;
      proc_control_node_B.b_I_f[8] = 1;
      for (proc_control_node_B.k_g5 = 0; proc_control_node_B.k_g5 < 9;
           proc_control_node_B.k_g5++) {
        proc_control_node_B.a_l[proc_control_node_B.k_g5] =
          tmp[proc_control_node_B.k_g5];
      }

      proc_control_node_B.temperatureDrift_h[0] = obj->AxesMisalignment[0] /
        100.0;
      proc_control_node_B.temperatureDrift_h[1] = obj->AxesMisalignment[1] /
        100.0;
      proc_control_node_B.temperatureDrift_h[2] = obj->AxesMisalignment[2] /
        100.0;
      for (proc_control_node_B.k_g5 = 0; proc_control_node_B.k_g5 < 3;
           proc_control_node_B.k_g5++) {
        proc_control_node_B.B_idx_0 =
          proc_control_node_B.temperatureDrift_h[proc_control_node_B.k_g5];
        proc_control_node_B.c_j[3 * proc_control_node_B.k_g5] =
          proc_control_node_B.a_l[3 * proc_control_node_B.k_g5] *
          proc_control_node_B.B_idx_0;
        proc_control_node_B.nx_d = 3 * proc_control_node_B.k_g5 + 1;
        proc_control_node_B.c_j[proc_control_node_B.nx_d] =
          proc_control_node_B.a_l[proc_control_node_B.nx_d] *
          proc_control_node_B.B_idx_0;
        proc_control_node_B.nx_d = 3 * proc_control_node_B.k_g5 + 2;
        proc_control_node_B.c_j[proc_control_node_B.nx_d] =
          proc_control_node_B.a_l[proc_control_node_B.nx_d] *
          proc_control_node_B.B_idx_0;
      }

      for (proc_control_node_B.k_g5 = 0; proc_control_node_B.k_g5 < 9;
           proc_control_node_B.k_g5++) {
        obj->pGain[proc_control_node_B.k_g5] = static_cast<real_T>
          (proc_control_node_B.b_I_f[proc_control_node_B.k_g5]) +
          proc_control_node_B.c_j[proc_control_node_B.k_g5];
      }
    }

    proc_control_node_B.flag_g = obj->tunablePropertyChanged[4];
    if (proc_control_node_B.flag_g) {
      obj->pStdDevWhiteNoise[0] = 7.0710678118654755 * obj->NoiseDensity[0];
      obj->pStdDevWhiteNoise[1] = 7.0710678118654755 * obj->NoiseDensity[1];
      obj->pStdDevWhiteNoise[2] = 7.0710678118654755 * obj->NoiseDensity[2];
    }

    proc_control_node_B.flag_g = obj->tunablePropertyChanged[5];
    if (proc_control_node_B.flag_g) {
      obj->pStdDevBiasInst[0] = obj->BiasInstability[0];
      obj->pStdDevBiasInst[1] = obj->BiasInstability[1];
      obj->pStdDevBiasInst[2] = obj->BiasInstability[2];
    }

    proc_control_node_B.flag_g = obj->tunablePropertyChanged[6];
    if (proc_control_node_B.flag_g) {
      obj->pStdDevRandWalk[0] = obj->RandomWalk[0] / 7.0710678118654755;
      obj->pStdDevRandWalk[1] = obj->RandomWalk[1] / 7.0710678118654755;
      obj->pStdDevRandWalk[2] = obj->RandomWalk[2] / 7.0710678118654755;
    }

    for (proc_control_node_B.k_g5 = 0; proc_control_node_B.k_g5 < 10;
         proc_control_node_B.k_g5++) {
      obj->tunablePropertyChanged[proc_control_node_B.k_g5] = false;
    }
  }

  for (proc_control_node_B.k_g5 = 0; proc_control_node_B.k_g5 < 9;
       proc_control_node_B.k_g5++) {
    proc_control_node_B.a_l[proc_control_node_B.k_g5] = obj->
      pGain[proc_control_node_B.k_g5];
  }

  proc_control_node_B.B_idx_0 = -varargin_1[0];
  proc_control_node_B.B_idx_1 = -varargin_1[1];
  proc_control_node_B.B_idx_2 = -varargin_1[2] + 9.81;
  for (proc_control_node_B.k_g5 = 0; proc_control_node_B.k_g5 < 3;
       proc_control_node_B.k_g5++) {
    proc_control_node_B.temperatureDrift_h[proc_control_node_B.k_g5] =
      varargin_2[proc_control_node_B.k_g5 + 6] * proc_control_node_B.B_idx_2 +
      (varargin_2[proc_control_node_B.k_g5 + 3] * proc_control_node_B.B_idx_1 +
       varargin_2[proc_control_node_B.k_g5] * proc_control_node_B.B_idx_0);
  }

  for (proc_control_node_B.k_g5 = 0; proc_control_node_B.k_g5 < 3;
       proc_control_node_B.k_g5++) {
    proc_control_node_B.y_ol[proc_control_node_B.k_g5] =
      proc_control_node_B.a_l[proc_control_node_B.k_g5 + 6] *
      proc_control_node_B.temperatureDrift_h[2] +
      (proc_control_node_B.a_l[proc_control_node_B.k_g5 + 3] *
       proc_control_node_B.temperatureDrift_h[1] +
       proc_control_node_B.a_l[proc_control_node_B.k_g5] *
       proc_control_node_B.temperatureDrift_h[0]);
  }

  proc_control_node_B.temperatureDrift_h[0] = obj->ConstantBias[0];
  proc_control_node_B.temperatureDrift_h[1] = obj->ConstantBias[1];
  proc_control_node_B.temperatureDrift_h[2] = obj->ConstantBias[2];
  proc_control_node_B.B_idx_0 = proc_control_node_B.y_ol[0] +
    proc_control_node_B.temperatureDrift_h[0];
  proc_control_node_B.B_idx_1 = proc_control_node_B.y_ol[1] +
    proc_control_node_B.temperatureDrift_h[1];
  proc_control_node_B.B_idx_2 = proc_control_node_B.y_ol[2] +
    proc_control_node_B.temperatureDrift_h[2];
  proc_control_node_B.temperatureDrift_h[0] = obj->pStdDevBiasInst[0];
  proc_control_node_B.temperatureDrift_h[1] = obj->pStdDevBiasInst[1];
  proc_control_node_B.temperatureDrift_h[2] = obj->pStdDevBiasInst[2];
  proc_control_node_B.a_oc[0] = varargin_3[0] *
    proc_control_node_B.temperatureDrift_h[0];
  proc_control_node_B.a_oc[1] = varargin_3[1] *
    proc_control_node_B.temperatureDrift_h[1];
  proc_control_node_B.a_oc[2] = varargin_3[2] *
    proc_control_node_B.temperatureDrift_h[2];
  for (proc_control_node_B.i18 = 0; proc_control_node_B.i18 < 2;
       proc_control_node_B.i18++) {
    proc_control_node_B.obj_ls[proc_control_node_B.i18] =
      obj->pBiasInstFilterDen[proc_control_node_B.i18];
  }

  proc_control_node_filter(obj->pBiasInstFilterNum, proc_control_node_B.obj_ls,
    proc_control_node_B.a_oc, obj->pBiasInstFilterStates,
    proc_control_node_B.y_ol, proc_control_node_B.temperatureDrift_h);
  obj->pBiasInstFilterStates[0] = proc_control_node_B.temperatureDrift_h[0];
  obj->pBiasInstFilterStates[1] = proc_control_node_B.temperatureDrift_h[1];
  obj->pBiasInstFilterStates[2] = proc_control_node_B.temperatureDrift_h[2];
  proc_control_node_B.temperatureDrift_h[0] = obj->pStdDevWhiteNoise[0];
  proc_control_node_B.temperatureDrift_h[1] = obj->pStdDevWhiteNoise[1];
  proc_control_node_B.temperatureDrift_h[2] = obj->pStdDevWhiteNoise[2];
  proc_control_node_B.whiteNoiseDrift_idx_0 =
    proc_control_node_B.temperatureDrift_h[0] * varargin_3[3];
  proc_control_node_B.whiteNoiseDrift_idx_1 =
    proc_control_node_B.temperatureDrift_h[1] * varargin_3[4];
  proc_control_node_B.whiteNoiseDrift_idx_2 =
    proc_control_node_B.temperatureDrift_h[2] * varargin_3[5];
  proc_control_node_B.temperatureDrift_h[0] = obj->pStdDevRandWalk[0];
  proc_control_node_B.temperatureDrift_h[1] = obj->pStdDevRandWalk[1];
  proc_control_node_B.temperatureDrift_h[2] = obj->pStdDevRandWalk[2];
  proc_control_node_B.x_idx_0 = obj->pRandWalkFilterStates[0];
  proc_control_node_B.x_idx_2 = obj->pRandWalkFilterStates[1];
  proc_control_node_B.x_idx_4 = obj->pRandWalkFilterStates[2];
  proc_control_node_B.x_idx_0 += proc_control_node_B.temperatureDrift_h[0] *
    varargin_3[6];
  proc_control_node_B.x_idx_2 += proc_control_node_B.temperatureDrift_h[1] *
    varargin_3[7];
  proc_control_node_B.x_idx_4 += proc_control_node_B.temperatureDrift_h[2] *
    varargin_3[8];
  obj->pRandWalkFilterStates[0] = proc_control_node_B.x_idx_0;
  obj->pRandWalkFilterStates[1] = proc_control_node_B.x_idx_2;
  obj->pRandWalkFilterStates[2] = proc_control_node_B.x_idx_4;
  proc_control_node_B.obj_p = obj->Temperature - 25.0;
  proc_control_node_B.a_oc[0] = proc_control_node_B.obj_p * obj->
    TemperatureBias[0];
  proc_control_node_B.a_oc[1] = proc_control_node_B.obj_p * obj->
    TemperatureBias[1];
  proc_control_node_B.a_oc[2] = proc_control_node_B.obj_p * obj->
    TemperatureBias[2];
  proc_control_node_B.temperatureDrift_h[0] = proc_control_node_B.a_oc[0];
  proc_control_node_B.temperatureDrift_h[1] = proc_control_node_B.a_oc[1];
  proc_control_node_B.temperatureDrift_h[2] = proc_control_node_B.a_oc[2];
  proc_control_node_B.obj_p = (obj->Temperature - 25.0) * 0.01;
  proc_control_node_B.a_oc[0] = proc_control_node_B.obj_p *
    obj->TemperatureScaleFactor[0] + 1.0;
  proc_control_node_B.a_oc[1] = proc_control_node_B.obj_p *
    obj->TemperatureScaleFactor[1] + 1.0;
  proc_control_node_B.a_oc[2] = proc_control_node_B.obj_p *
    obj->TemperatureScaleFactor[2] + 1.0;
  varargout_1[0] = ((((proc_control_node_B.whiteNoiseDrift_idx_0 +
                       proc_control_node_B.y_ol[0]) +
                      proc_control_node_B.x_idx_0) +
                     proc_control_node_B.temperatureDrift_h[0]) +
                    proc_control_node_B.B_idx_0) * proc_control_node_B.a_oc[0];
  varargout_1[1] = ((((proc_control_node_B.whiteNoiseDrift_idx_1 +
                       proc_control_node_B.y_ol[1]) +
                      proc_control_node_B.x_idx_2) +
                     proc_control_node_B.temperatureDrift_h[1]) +
                    proc_control_node_B.B_idx_1) * proc_control_node_B.a_oc[1];
  varargout_1[2] = ((((proc_control_node_B.whiteNoiseDrift_idx_2 +
                       proc_control_node_B.y_ol[2]) +
                      proc_control_node_B.x_idx_4) +
                     proc_control_node_B.temperatureDrift_h[2]) +
                    proc_control_node_B.B_idx_2) * proc_control_node_B.a_oc[2];
  proc_control_node_B.B_idx_0 = obj->MeasurementRange;
  if (!rtIsInf(proc_control_node_B.B_idx_0)) {
    proc_control_node_B.B_idx_0 = obj->MeasurementRange;
    proc_control_node_B.B_idx_1 = fabs(varargout_1[0]);
    proc_control_node_B.d_pr[0] = (proc_control_node_B.B_idx_1 >
      proc_control_node_B.B_idx_0);
    proc_control_node_B.B_idx_2 = fabs(varargout_1[1]);
    proc_control_node_B.d_pr[1] = (proc_control_node_B.B_idx_2 >
      proc_control_node_B.B_idx_0);
    proc_control_node_B.whiteNoiseDrift_idx_0 = fabs(varargout_1[2]);
    proc_control_node_B.d_pr[2] = (proc_control_node_B.whiteNoiseDrift_idx_0 >
      proc_control_node_B.B_idx_0);
    proc_control_node_B.nx_d = 0;
    for (proc_control_node_B.k_g5 = 0; proc_control_node_B.k_g5 < 3;
         proc_control_node_B.k_g5++) {
      if (proc_control_node_B.d_pr[proc_control_node_B.k_g5]) {
        proc_control_node_B.b_data_px[proc_control_node_B.nx_d] =
          static_cast<int8_T>(proc_control_node_B.k_g5 + 1);
        proc_control_node_B.nx_d++;
      }
    }

    proc_control_node_B.d_pr[0] = (proc_control_node_B.B_idx_1 >
      proc_control_node_B.B_idx_0);
    proc_control_node_B.d_pr[1] = (proc_control_node_B.B_idx_2 >
      proc_control_node_B.B_idx_0);
    proc_control_node_B.d_pr[2] = (proc_control_node_B.whiteNoiseDrift_idx_0 >
      proc_control_node_B.B_idx_0);
    proc_control_node_B.nx_d = 0;
    for (proc_control_node_B.k_g5 = 0; proc_control_node_B.k_g5 < 3;
         proc_control_node_B.k_g5++) {
      if (proc_control_node_B.d_pr[proc_control_node_B.k_g5]) {
        proc_control_node_B.nx_d++;
      }
    }

    proc_control_node_B.f_size_idx_1_m = proc_control_node_B.nx_d;
    proc_control_node_B.nx_d = 0;
    for (proc_control_node_B.k_g5 = 0; proc_control_node_B.k_g5 < 3;
         proc_control_node_B.k_g5++) {
      if (proc_control_node_B.d_pr[proc_control_node_B.k_g5]) {
        proc_control_node_B.f_data_n[proc_control_node_B.nx_d] =
          static_cast<int8_T>(proc_control_node_B.k_g5 + 1);
        proc_control_node_B.nx_d++;
      }
    }

    proc_control_node_B.nx_d = proc_control_node_B.f_size_idx_1_m - 1;
    for (proc_control_node_B.k_g5 = 0; proc_control_node_B.k_g5 <=
         proc_control_node_B.nx_d; proc_control_node_B.k_g5++) {
      proc_control_node_B.b_x_data_tmp_o = proc_control_node_B.k_g5;
      proc_control_node_B.temperatureDrift_h[proc_control_node_B.b_x_data_tmp_o]
        =
        varargout_1[proc_control_node_B.f_data_n[proc_control_node_B.b_x_data_tmp_o]
        - 1];
    }

    for (proc_control_node_B.k_g5 = 0; proc_control_node_B.k_g5 <=
         proc_control_node_B.nx_d; proc_control_node_B.k_g5++) {
      proc_control_node_B.b_x_data_tmp_o = proc_control_node_B.k_g5;
      proc_control_node_B.B_idx_1 =
        proc_control_node_B.temperatureDrift_h[proc_control_node_B.b_x_data_tmp_o];
      if (proc_control_node_B.B_idx_1 < 0.0) {
        proc_control_node_B.B_idx_1 = -1.0;
      } else if (proc_control_node_B.B_idx_1 > 0.0) {
        proc_control_node_B.B_idx_1 = 1.0;
      } else if (proc_control_node_B.B_idx_1 == 0.0) {
        proc_control_node_B.B_idx_1 = 0.0;
      } else {
        proc_control_node_B.B_idx_1 = (rtNaN);
      }

      proc_control_node_B.temperatureDrift_h[proc_control_node_B.b_x_data_tmp_o]
        = proc_control_node_B.B_idx_1;
    }

    for (proc_control_node_B.k_g5 = 0; proc_control_node_B.k_g5 <
         proc_control_node_B.f_size_idx_1_m; proc_control_node_B.k_g5++) {
      proc_control_node_B.nx_d = proc_control_node_B.k_g5;
      varargout_1[proc_control_node_B.b_data_px[proc_control_node_B.nx_d] - 1] =
        proc_control_node_B.temperatureDrift_h[proc_control_node_B.nx_d] *
        proc_control_node_B.B_idx_0;
    }
  }

  if (obj->Resolution != 0.0) {
    proc_control_node_B.B_idx_0 = obj->Resolution;
    varargout_1[0] = rt_roundd_snf(varargout_1[0] / proc_control_node_B.B_idx_0);
    varargout_1[1] = rt_roundd_snf(varargout_1[1] / proc_control_node_B.B_idx_0);
    varargout_1[2] = rt_roundd_snf(varargout_1[2] / proc_control_node_B.B_idx_0);
    varargout_1[0] *= proc_control_node_B.B_idx_0;
    varargout_1[1] *= proc_control_node_B.B_idx_0;
    varargout_1[2] *= proc_control_node_B.B_idx_0;
  }
}

static void proc_control_SystemCore_step_b4(h_fusion_internal_GyroscopeSi_T *obj,
  const real_T varargin_1[3], const real_T varargin_2[3], const real_T
  varargin_3[9], const real_T varargin_4[9], real_T varargout_1[3])
{
  static const int8_T tmp[9] = { 0, 1, 1, 1, 0, 1, 1, 1, 0 };

  if (obj->isInitialized != 1) {
    obj->isInitialized = 1;
    for (proc_control_node_B.k_m = 0; proc_control_node_B.k_m < 9;
         proc_control_node_B.k_m++) {
      proc_control_node_B.b_I_kx[proc_control_node_B.k_m] = 0;
    }

    proc_control_node_B.b_I_kx[0] = 1;
    proc_control_node_B.b_I_kx[4] = 1;
    proc_control_node_B.b_I_kx[8] = 1;
    for (proc_control_node_B.k_m = 0; proc_control_node_B.k_m < 9;
         proc_control_node_B.k_m++) {
      proc_control_node_B.a_n[proc_control_node_B.k_m] =
        tmp[proc_control_node_B.k_m];
    }

    for (proc_control_node_B.k_m = 0; proc_control_node_B.k_m < 3;
         proc_control_node_B.k_m++) {
      proc_control_node_B.whiteNoiseDrift_idx_0_o = obj->
        AxesMisalignment[proc_control_node_B.k_m] / 100.0;
      proc_control_node_B.c_p[3 * proc_control_node_B.k_m] = static_cast<real_T>
        (proc_control_node_B.a_n[3 * proc_control_node_B.k_m]) *
        proc_control_node_B.whiteNoiseDrift_idx_0_o;
      proc_control_node_B.nx_c = 3 * proc_control_node_B.k_m + 1;
      proc_control_node_B.c_p[proc_control_node_B.nx_c] = static_cast<real_T>
        (proc_control_node_B.a_n[proc_control_node_B.nx_c]) *
        proc_control_node_B.whiteNoiseDrift_idx_0_o;
      proc_control_node_B.nx_c = 3 * proc_control_node_B.k_m + 2;
      proc_control_node_B.c_p[proc_control_node_B.nx_c] = static_cast<real_T>
        (proc_control_node_B.a_n[proc_control_node_B.nx_c]) *
        proc_control_node_B.whiteNoiseDrift_idx_0_o;
    }

    for (proc_control_node_B.k_m = 0; proc_control_node_B.k_m < 9;
         proc_control_node_B.k_m++) {
      obj->pGain[proc_control_node_B.k_m] = static_cast<real_T>
        (proc_control_node_B.b_I_kx[proc_control_node_B.k_m]) +
        proc_control_node_B.c_p[proc_control_node_B.k_m];
    }

    obj->pBiasInstFilterNum = 1.0;
    obj->pBiasInstFilterDen[0] = 1.0;
    obj->pBiasInstFilterDen[1] = -0.5;
    obj->TunablePropsChanged = false;
    obj->pBiasInstFilterStates[0] = 0.0;
    obj->pStdDevBiasInst[0] = obj->BiasInstability[0];
    obj->pStdDevWhiteNoise[0] = 7.0710678118654755 * obj->NoiseDensity[0];
    obj->pRandWalkFilterStates[0] = 0.0;
    obj->pStdDevRandWalk[0] = obj->RandomWalk[0] / 7.0710678118654755;
    obj->pBiasInstFilterStates[0] = 0.0;
    obj->pRandWalkFilterStates[0] = 0.0;
    obj->pBiasInstFilterStates[1] = 0.0;
    obj->pStdDevBiasInst[1] = obj->BiasInstability[1];
    obj->pStdDevWhiteNoise[1] = 7.0710678118654755 * obj->NoiseDensity[1];
    obj->pRandWalkFilterStates[1] = 0.0;
    obj->pStdDevRandWalk[1] = obj->RandomWalk[1] / 7.0710678118654755;
    obj->pBiasInstFilterStates[1] = 0.0;
    obj->pRandWalkFilterStates[1] = 0.0;
    obj->pBiasInstFilterStates[2] = 0.0;
    obj->pStdDevBiasInst[2] = obj->BiasInstability[2];
    obj->pStdDevWhiteNoise[2] = 7.0710678118654755 * obj->NoiseDensity[2];
    obj->pRandWalkFilterStates[2] = 0.0;
    obj->pStdDevRandWalk[2] = obj->RandomWalk[2] / 7.0710678118654755;
    obj->pBiasInstFilterStates[2] = 0.0;
    obj->pRandWalkFilterStates[2] = 0.0;
  }

  if (obj->TunablePropsChanged) {
    obj->TunablePropsChanged = false;
    if (obj->tunablePropertyChanged[4]) {
      for (proc_control_node_B.k_m = 0; proc_control_node_B.k_m < 9;
           proc_control_node_B.k_m++) {
        proc_control_node_B.b_I_kx[proc_control_node_B.k_m] = 0;
      }

      proc_control_node_B.b_I_kx[0] = 1;
      proc_control_node_B.b_I_kx[4] = 1;
      proc_control_node_B.b_I_kx[8] = 1;
      for (proc_control_node_B.k_m = 0; proc_control_node_B.k_m < 9;
           proc_control_node_B.k_m++) {
        proc_control_node_B.a_n[proc_control_node_B.k_m] =
          tmp[proc_control_node_B.k_m];
      }

      for (proc_control_node_B.k_m = 0; proc_control_node_B.k_m < 3;
           proc_control_node_B.k_m++) {
        proc_control_node_B.whiteNoiseDrift_idx_0_o = obj->
          AxesMisalignment[proc_control_node_B.k_m] / 100.0;
        proc_control_node_B.c_p[3 * proc_control_node_B.k_m] =
          static_cast<real_T>(proc_control_node_B.a_n[3 *
                              proc_control_node_B.k_m]) *
          proc_control_node_B.whiteNoiseDrift_idx_0_o;
        proc_control_node_B.nx_c = 3 * proc_control_node_B.k_m + 1;
        proc_control_node_B.c_p[proc_control_node_B.nx_c] = static_cast<real_T>
          (proc_control_node_B.a_n[proc_control_node_B.nx_c]) *
          proc_control_node_B.whiteNoiseDrift_idx_0_o;
        proc_control_node_B.nx_c = 3 * proc_control_node_B.k_m + 2;
        proc_control_node_B.c_p[proc_control_node_B.nx_c] = static_cast<real_T>
          (proc_control_node_B.a_n[proc_control_node_B.nx_c]) *
          proc_control_node_B.whiteNoiseDrift_idx_0_o;
      }

      for (proc_control_node_B.k_m = 0; proc_control_node_B.k_m < 9;
           proc_control_node_B.k_m++) {
        obj->pGain[proc_control_node_B.k_m] = static_cast<real_T>
          (proc_control_node_B.b_I_kx[proc_control_node_B.k_m]) +
          proc_control_node_B.c_p[proc_control_node_B.k_m];
      }
    }

    if (obj->tunablePropertyChanged[5]) {
      obj->pStdDevWhiteNoise[0] = 7.0710678118654755 * obj->NoiseDensity[0];
      obj->pStdDevWhiteNoise[1] = 7.0710678118654755 * obj->NoiseDensity[1];
      obj->pStdDevWhiteNoise[2] = 7.0710678118654755 * obj->NoiseDensity[2];
    }

    if (obj->tunablePropertyChanged[6]) {
      obj->pStdDevBiasInst[0] = obj->BiasInstability[0];
      obj->pStdDevBiasInst[1] = obj->BiasInstability[1];
      obj->pStdDevBiasInst[2] = obj->BiasInstability[2];
    }

    if (obj->tunablePropertyChanged[7]) {
      obj->pStdDevRandWalk[0] = obj->RandomWalk[0] / 7.0710678118654755;
      obj->pStdDevRandWalk[1] = obj->RandomWalk[1] / 7.0710678118654755;
      obj->pStdDevRandWalk[2] = obj->RandomWalk[2] / 7.0710678118654755;
    }

    for (proc_control_node_B.k_m = 0; proc_control_node_B.k_m < 11;
         proc_control_node_B.k_m++) {
      obj->tunablePropertyChanged[proc_control_node_B.k_m] = false;
    }
  }

  for (proc_control_node_B.k_m = 0; proc_control_node_B.k_m < 3;
       proc_control_node_B.k_m++) {
    obj->pAcceleration[proc_control_node_B.k_m] =
      varargin_2[proc_control_node_B.k_m];
    proc_control_node_B.y_gn[proc_control_node_B.k_m] =
      varargin_3[proc_control_node_B.k_m + 6] * varargin_1[2] +
      (varargin_3[proc_control_node_B.k_m + 3] * varargin_1[1] +
       varargin_3[proc_control_node_B.k_m] * varargin_1[0]);
  }

  for (proc_control_node_B.k_m = 0; proc_control_node_B.k_m < 3;
       proc_control_node_B.k_m++) {
    proc_control_node_B.B_i[proc_control_node_B.k_m] = (obj->
      pGain[proc_control_node_B.k_m + 6] * proc_control_node_B.y_gn[2] +
      (obj->pGain[proc_control_node_B.k_m + 3] * proc_control_node_B.y_gn[1] +
       obj->pGain[proc_control_node_B.k_m] * proc_control_node_B.y_gn[0])) +
      obj->ConstantBias[proc_control_node_B.k_m];
    proc_control_node_B.c_c[proc_control_node_B.k_m] =
      varargin_4[proc_control_node_B.k_m] * obj->
      pStdDevBiasInst[proc_control_node_B.k_m];
  }

  for (proc_control_node_B.i19 = 0; proc_control_node_B.i19 < 2;
       proc_control_node_B.i19++) {
    proc_control_node_B.obj_dr[proc_control_node_B.i19] =
      obj->pBiasInstFilterDen[proc_control_node_B.i19];
  }

  for (proc_control_node_B.i20 = 0; proc_control_node_B.i20 < 3;
       proc_control_node_B.i20++) {
    proc_control_node_B.obj_ok[proc_control_node_B.i20] =
      obj->pBiasInstFilterStates[proc_control_node_B.i20];
  }

  proc_control_node_filter(obj->pBiasInstFilterNum, proc_control_node_B.obj_dr,
    proc_control_node_B.c_c, proc_control_node_B.obj_ok,
    proc_control_node_B.y_gn, obj->pBiasInstFilterStates);
  proc_control_node_B.whiteNoiseDrift_idx_0_o = obj->pStdDevWhiteNoise[0] *
    varargin_4[3];
  proc_control_node_B.whiteNoiseDrift_idx_1_d = obj->pStdDevWhiteNoise[1] *
    varargin_4[4];
  proc_control_node_B.whiteNoiseDrift_idx_2_a = obj->pStdDevWhiteNoise[2] *
    varargin_4[5];
  proc_control_node_B.x_idx_1 = obj->pStdDevRandWalk[0] * varargin_4[6] +
    obj->pRandWalkFilterStates[0];
  proc_control_node_B.x_idx_3 = obj->pStdDevRandWalk[1] * varargin_4[7] +
    obj->pRandWalkFilterStates[1];
  proc_control_node_B.x_idx_5 = obj->pStdDevRandWalk[2] * varargin_4[8] +
    obj->pRandWalkFilterStates[2];
  proc_control_node_B.obj_tmp_tmp = obj->Temperature - 25.0;
  obj->pRandWalkFilterStates[0] = proc_control_node_B.x_idx_1;
  proc_control_node_B.c_c[0] = proc_control_node_B.obj_tmp_tmp *
    obj->TemperatureBias[0];
  obj->pRandWalkFilterStates[1] = proc_control_node_B.x_idx_3;
  proc_control_node_B.c_c[1] = proc_control_node_B.obj_tmp_tmp *
    obj->TemperatureBias[1];
  obj->pRandWalkFilterStates[2] = proc_control_node_B.x_idx_5;
  proc_control_node_B.temperatureDrift_idx_0 = proc_control_node_B.c_c[0];
  proc_control_node_B.temperatureDrift_idx_1 = proc_control_node_B.c_c[1];
  proc_control_node_B.obj_o1 = (obj->Temperature - 25.0) * 0.01;
  varargout_1[0] = ((((proc_control_node_B.whiteNoiseDrift_idx_0_o +
                       proc_control_node_B.y_gn[0]) +
                      proc_control_node_B.x_idx_1) + (obj->pAcceleration[0] *
    obj->AccelerationBias[0] + proc_control_node_B.temperatureDrift_idx_0)) +
                    proc_control_node_B.B_i[0]) * (proc_control_node_B.obj_o1 *
    obj->TemperatureScaleFactor[0] + 1.0);
  varargout_1[1] = ((((proc_control_node_B.whiteNoiseDrift_idx_1_d +
                       proc_control_node_B.y_gn[1]) +
                      proc_control_node_B.x_idx_3) + (obj->pAcceleration[1] *
    obj->AccelerationBias[1] + proc_control_node_B.temperatureDrift_idx_1)) +
                    proc_control_node_B.B_i[1]) * (proc_control_node_B.obj_o1 *
    obj->TemperatureScaleFactor[1] + 1.0);
  varargout_1[2] = ((((proc_control_node_B.whiteNoiseDrift_idx_2_a +
                       proc_control_node_B.y_gn[2]) +
                      proc_control_node_B.x_idx_5) +
                     (proc_control_node_B.obj_tmp_tmp * obj->TemperatureBias[2]
                      + obj->pAcceleration[2] * obj->AccelerationBias[2])) +
                    proc_control_node_B.B_i[2]) * (proc_control_node_B.obj_o1 *
    obj->TemperatureScaleFactor[2] + 1.0);
  if (!rtIsInf(obj->MeasurementRange)) {
    proc_control_node_B.whiteNoiseDrift_idx_0_o = fabs(varargout_1[0]);
    proc_control_node_B.d_o[0] = (proc_control_node_B.whiteNoiseDrift_idx_0_o >
      obj->MeasurementRange);
    proc_control_node_B.whiteNoiseDrift_idx_1_d = fabs(varargout_1[1]);
    proc_control_node_B.d_o[1] = (proc_control_node_B.whiteNoiseDrift_idx_1_d >
      obj->MeasurementRange);
    proc_control_node_B.whiteNoiseDrift_idx_2_a = fabs(varargout_1[2]);
    proc_control_node_B.d_o[2] = (proc_control_node_B.whiteNoiseDrift_idx_2_a >
      obj->MeasurementRange);
    proc_control_node_B.nx_c = 0;
    for (proc_control_node_B.k_m = 0; proc_control_node_B.k_m < 3;
         proc_control_node_B.k_m++) {
      if (proc_control_node_B.d_o[proc_control_node_B.k_m]) {
        proc_control_node_B.b_data_id[proc_control_node_B.nx_c] =
          static_cast<int8_T>(proc_control_node_B.k_m + 1);
        proc_control_node_B.nx_c++;
      }
    }

    proc_control_node_B.d_o[0] = (proc_control_node_B.whiteNoiseDrift_idx_0_o >
      obj->MeasurementRange);
    proc_control_node_B.d_o[1] = (proc_control_node_B.whiteNoiseDrift_idx_1_d >
      obj->MeasurementRange);
    proc_control_node_B.d_o[2] = (proc_control_node_B.whiteNoiseDrift_idx_2_a >
      obj->MeasurementRange);
    proc_control_node_B.nx_c = 0;
    for (proc_control_node_B.k_m = 0; proc_control_node_B.k_m < 3;
         proc_control_node_B.k_m++) {
      if (proc_control_node_B.d_o[proc_control_node_B.k_m]) {
        proc_control_node_B.nx_c++;
      }
    }

    proc_control_node_B.f_size_idx_1_o = proc_control_node_B.nx_c;
    proc_control_node_B.nx_c = 0;
    for (proc_control_node_B.k_m = 0; proc_control_node_B.k_m < 3;
         proc_control_node_B.k_m++) {
      if (proc_control_node_B.d_o[proc_control_node_B.k_m]) {
        proc_control_node_B.f_data_b[proc_control_node_B.nx_c] =
          static_cast<int8_T>(proc_control_node_B.k_m + 1);
        proc_control_node_B.nx_c++;
      }
    }

    proc_control_node_B.nx_c = proc_control_node_B.f_size_idx_1_o - 1;
    for (proc_control_node_B.k_m = 0; proc_control_node_B.k_m <=
         proc_control_node_B.nx_c; proc_control_node_B.k_m++) {
      proc_control_node_B.b_x_data_tmp_e = proc_control_node_B.k_m;
      proc_control_node_B.B_i[proc_control_node_B.b_x_data_tmp_e] =
        varargout_1[proc_control_node_B.f_data_b[proc_control_node_B.b_x_data_tmp_e]
        - 1];
    }

    for (proc_control_node_B.k_m = 0; proc_control_node_B.k_m <=
         proc_control_node_B.nx_c; proc_control_node_B.k_m++) {
      proc_control_node_B.b_x_data_tmp_e = proc_control_node_B.k_m;
      proc_control_node_B.whiteNoiseDrift_idx_0_o =
        proc_control_node_B.B_i[proc_control_node_B.b_x_data_tmp_e];
      if (proc_control_node_B.whiteNoiseDrift_idx_0_o < 0.0) {
        proc_control_node_B.whiteNoiseDrift_idx_0_o = -1.0;
      } else if (proc_control_node_B.whiteNoiseDrift_idx_0_o > 0.0) {
        proc_control_node_B.whiteNoiseDrift_idx_0_o = 1.0;
      } else if (proc_control_node_B.whiteNoiseDrift_idx_0_o == 0.0) {
        proc_control_node_B.whiteNoiseDrift_idx_0_o = 0.0;
      } else {
        proc_control_node_B.whiteNoiseDrift_idx_0_o = (rtNaN);
      }

      proc_control_node_B.B_i[proc_control_node_B.b_x_data_tmp_e] =
        proc_control_node_B.whiteNoiseDrift_idx_0_o;
    }

    for (proc_control_node_B.k_m = 0; proc_control_node_B.k_m <
         proc_control_node_B.f_size_idx_1_o; proc_control_node_B.k_m++) {
      proc_control_node_B.nx_c = proc_control_node_B.k_m;
      varargout_1[proc_control_node_B.b_data_id[proc_control_node_B.nx_c] - 1] =
        proc_control_node_B.B_i[proc_control_node_B.nx_c] *
        obj->MeasurementRange;
    }
  }

  if (obj->Resolution != 0.0) {
    proc_control_node_B.whiteNoiseDrift_idx_0_o = varargout_1[1] /
      obj->Resolution;
    proc_control_node_B.whiteNoiseDrift_idx_1_d = varargout_1[2] /
      obj->Resolution;
    varargout_1[0] = rt_roundd_snf(varargout_1[0] / obj->Resolution);
    varargout_1[1] = rt_roundd_snf(proc_control_node_B.whiteNoiseDrift_idx_0_o);
    varargout_1[2] = rt_roundd_snf(proc_control_node_B.whiteNoiseDrift_idx_1_d);
    varargout_1[0] *= obj->Resolution;
    varargout_1[1] *= obj->Resolution;
    varargout_1[2] *= obj->Resolution;
  }
}

static void proc_control_no_SystemCore_step(fusion_simulink_imuSensor_pro_T *obj,
  const real_T varargin_1[3], const real_T varargin_2[3], const real_T
  varargin_3[4], real_T varargout_1[3], real_T varargout_2[3], real_T
  varargout_3[3])
{
  h_fusion_internal_Acceleromet_T *obj_0;
  h_fusion_internal_GyroscopeSi_T *obj_1;
  h_fusion_internal_Magnetomete_T *obj_2;
  static const int8_T tmp[9] = { 0, 1, 1, 1, 0, 1, 1, 1, 0 };

  static const int32_T tmp_0[2] = { 1, 9 };

  static const int32_T tmp_1[2] = { 1, 10 };

  if (obj->TunablePropsChanged) {
    obj->TunablePropsChanged = false;
    proc_control_node_B.maximum = obj->AccelParamsMeasurementRange;
    proc_control_node_B.val_ce = obj->AccelParamsResolution;
    proc_control_node_B.magneticfield[0] = obj->AccelParamsConstantBias[0];
    proc_control_node_B.magneticfield[1] = obj->AccelParamsConstantBias[1];
    proc_control_node_B.magneticfield[2] = obj->AccelParamsConstantBias[2];
    proc_control_node_B.val_p[0] = obj->AccelParamsAxesMisalignment[0];
    proc_control_node_B.val_p[1] = obj->AccelParamsAxesMisalignment[1];
    proc_control_node_B.val_p[2] = obj->AccelParamsAxesMisalignment[2];
    proc_control_node_B.whiteNoiseDrift[0] = obj->AccelParamsNoiseDensity[0];
    proc_control_node_B.whiteNoiseDrift[1] = obj->AccelParamsNoiseDensity[1];
    proc_control_node_B.whiteNoiseDrift[2] = obj->AccelParamsNoiseDensity[2];
    proc_control_node_B.val_b[0] = obj->AccelParamsBiasInstability[0];
    proc_control_node_B.val_b[1] = obj->AccelParamsBiasInstability[1];
    proc_control_node_B.val_b[2] = obj->AccelParamsBiasInstability[2];
    proc_control_node_B.temperatureDrift[0] = obj->AccelParamsRandomWalk[0];
    proc_control_node_B.temperatureDrift[1] = obj->AccelParamsRandomWalk[1];
    proc_control_node_B.temperatureDrift[2] = obj->AccelParamsRandomWalk[2];
    proc_control_node_B.val_pn[0] = obj->AccelParamsTemperatureBias[0];
    proc_control_node_B.val_pn[1] = obj->AccelParamsTemperatureBias[1];
    proc_control_node_B.val_pn[2] = obj->AccelParamsTemperatureBias[2];
    proc_control_node_B.val_n[0] = obj->AccelParamsTemperatureScaleFactor[0];
    proc_control_node_B.val_n[1] = obj->AccelParamsTemperatureScaleFactor[1];
    proc_control_node_B.val_n[2] = obj->AccelParamsTemperatureScaleFactor[2];
    proc_control_node_B.aasq = obj->GyroParamsMeasurementRange;
    proc_control_node_B.n_b = obj->GyroParamsResolution;
    proc_control_node_B.val_c[0] = obj->GyroParamsConstantBias[0];
    proc_control_node_B.val_c[1] = obj->GyroParamsConstantBias[1];
    proc_control_node_B.val_c[2] = obj->GyroParamsConstantBias[2];
    proc_control_node_B.val_nh[0] = obj->GyroParamsAxesMisalignment[0];
    proc_control_node_B.val_nh[1] = obj->GyroParamsAxesMisalignment[1];
    proc_control_node_B.val_nh[2] = obj->GyroParamsAxesMisalignment[2];
    proc_control_node_B.val_d[0] = obj->GyroParamsNoiseDensity[0];
    proc_control_node_B.val_d[1] = obj->GyroParamsNoiseDensity[1];
    proc_control_node_B.val_d[2] = obj->GyroParamsNoiseDensity[2];
    proc_control_node_B.val_i[0] = obj->GyroParamsBiasInstability[0];
    proc_control_node_B.val_i[1] = obj->GyroParamsBiasInstability[1];
    proc_control_node_B.val_i[2] = obj->GyroParamsBiasInstability[2];
    proc_control_node_B.val_no[0] = obj->GyroParamsRandomWalk[0];
    proc_control_node_B.val_no[1] = obj->GyroParamsRandomWalk[1];
    proc_control_node_B.val_no[2] = obj->GyroParamsRandomWalk[2];
    proc_control_node_B.val_bi[0] = obj->GyroParamsTemperatureBias[0];
    proc_control_node_B.val_bi[1] = obj->GyroParamsTemperatureBias[1];
    proc_control_node_B.val_bi[2] = obj->GyroParamsTemperatureBias[2];
    proc_control_node_B.val_bt[0] = obj->GyroParamsTemperatureScaleFactor[0];
    proc_control_node_B.val_bt[1] = obj->GyroParamsTemperatureScaleFactor[1];
    proc_control_node_B.val_bt[2] = obj->GyroParamsTemperatureScaleFactor[2];
    proc_control_node_B.val_j[0] = obj->GyroParamsAccelerationBias[0];
    proc_control_node_B.val_j[1] = obj->GyroParamsAccelerationBias[1];
    proc_control_node_B.val_j[2] = obj->GyroParamsAccelerationBias[2];
    proc_control_node_B.ab2 = obj->MagParamsMeasurementRange;
    proc_control_node_B.ac2 = obj->MagParamsResolution;
    proc_control_node_B.val_n0[0] = obj->MagParamsConstantBias[0];
    proc_control_node_B.val_n0[1] = obj->MagParamsConstantBias[1];
    proc_control_node_B.val_n0[2] = obj->MagParamsConstantBias[2];
    proc_control_node_B.val_f[0] = obj->MagParamsAxesMisalignment[0];
    proc_control_node_B.val_f[1] = obj->MagParamsAxesMisalignment[1];
    proc_control_node_B.val_f[2] = obj->MagParamsAxesMisalignment[2];
    proc_control_node_B.val_e[0] = obj->MagParamsNoiseDensity[0];
    proc_control_node_B.val_e[1] = obj->MagParamsNoiseDensity[1];
    proc_control_node_B.val_e[2] = obj->MagParamsNoiseDensity[2];
    proc_control_node_B.val_in[0] = obj->MagParamsBiasInstability[0];
    proc_control_node_B.val_in[1] = obj->MagParamsBiasInstability[1];
    proc_control_node_B.val_in[2] = obj->MagParamsBiasInstability[2];
    proc_control_node_B.val_a[0] = obj->MagParamsRandomWalk[0];
    proc_control_node_B.val_a[1] = obj->MagParamsRandomWalk[1];
    proc_control_node_B.val_a[2] = obj->MagParamsRandomWalk[2];
    proc_control_node_B.val_fd[0] = obj->MagParamsTemperatureBias[0];
    proc_control_node_B.val_fd[1] = obj->MagParamsTemperatureBias[1];
    proc_control_node_B.val_fd[2] = obj->MagParamsTemperatureBias[2];
    proc_control_node_B.val_k[0] = obj->MagParamsTemperatureScaleFactor[0];
    proc_control_node_B.val_k[1] = obj->MagParamsTemperatureScaleFactor[1];
    proc_control_node_B.val_k[2] = obj->MagParamsTemperatureScaleFactor[2];
    proc_control_node_B.flag_h = obj->tunablePropertyChanged[31];
    if (proc_control_node_B.flag_h) {
      obj_0 = obj->pAccel;
      proc_control_node_B.flag_h = (obj_0->isInitialized == 1);
      if (proc_control_node_B.flag_h) {
        obj_0->TunablePropsChanged = true;
        obj_0->tunablePropertyChanged[9] = true;
      }

      obj->pAccel->Temperature = obj->Temperature;
      IMUSensorParameters_updateSyste(proc_control_node_B.maximum,
        proc_control_node_B.val_ce, proc_control_node_B.magneticfield,
        proc_control_node_B.val_p, proc_control_node_B.whiteNoiseDrift,
        proc_control_node_B.val_b, proc_control_node_B.temperatureDrift,
        proc_control_node_B.val_pn, proc_control_node_B.val_n, obj->pAccel);
      obj_1 = obj->pGyro;
      proc_control_node_B.flag_h = (obj_1->isInitialized == 1);
      if (proc_control_node_B.flag_h) {
        obj_1->TunablePropsChanged = true;
        obj_1->tunablePropertyChanged[10] = true;
      }

      obj->pGyro->Temperature = obj->Temperature;
      IMUSensorParameters_updateSys_b(proc_control_node_B.aasq,
        proc_control_node_B.n_b, proc_control_node_B.val_c,
        proc_control_node_B.val_nh, proc_control_node_B.val_d,
        proc_control_node_B.val_i, proc_control_node_B.val_no,
        proc_control_node_B.val_bi, proc_control_node_B.val_bt,
        proc_control_node_B.val_j, obj->pGyro);
      obj_2 = obj->pMag;
      proc_control_node_B.flag_h = (obj_2->isInitialized == 1);
      if (proc_control_node_B.flag_h) {
        obj_2->TunablePropsChanged = true;
        obj_2->tunablePropertyChanged[9] = true;
      }

      obj->pMag->Temperature = obj->Temperature;
      IMUSensorParameters_updateSy_b4(proc_control_node_B.ab2,
        proc_control_node_B.ac2, proc_control_node_B.val_n0,
        proc_control_node_B.val_f, proc_control_node_B.val_e,
        proc_control_node_B.val_in, proc_control_node_B.val_a,
        proc_control_node_B.val_fd, proc_control_node_B.val_k, obj->pMag);
    }

    proc_control_node_B.flag_k[0] = obj->tunablePropertyChanged[3];
    proc_control_node_B.flag_k[1] = obj->tunablePropertyChanged[4];
    proc_control_node_B.flag_k[2] = obj->tunablePropertyChanged[5];
    proc_control_node_B.flag_k[3] = obj->tunablePropertyChanged[6];
    proc_control_node_B.flag_k[4] = obj->tunablePropertyChanged[7];
    proc_control_node_B.flag_k[5] = obj->tunablePropertyChanged[8];
    proc_control_node_B.flag_k[6] = obj->tunablePropertyChanged[9];
    proc_control_node_B.flag_k[7] = obj->tunablePropertyChanged[10];
    proc_control_node_B.flag_k[8] = obj->tunablePropertyChanged[11];
    if (proc_control_node_vectorAny(proc_control_node_B.flag_k, tmp_0)) {
      IMUSensorParameters_updateSyste(proc_control_node_B.maximum,
        proc_control_node_B.val_ce, proc_control_node_B.magneticfield,
        proc_control_node_B.val_p, proc_control_node_B.whiteNoiseDrift,
        proc_control_node_B.val_b, proc_control_node_B.temperatureDrift,
        proc_control_node_B.val_pn, proc_control_node_B.val_n, obj->pAccel);
    }

    proc_control_node_B.flag[0] = obj->tunablePropertyChanged[12];
    proc_control_node_B.flag[1] = obj->tunablePropertyChanged[13];
    proc_control_node_B.flag[2] = obj->tunablePropertyChanged[14];
    proc_control_node_B.flag[3] = obj->tunablePropertyChanged[15];
    proc_control_node_B.flag[4] = obj->tunablePropertyChanged[16];
    proc_control_node_B.flag[5] = obj->tunablePropertyChanged[17];
    proc_control_node_B.flag[6] = obj->tunablePropertyChanged[18];
    proc_control_node_B.flag[7] = obj->tunablePropertyChanged[19];
    proc_control_node_B.flag[8] = obj->tunablePropertyChanged[20];
    proc_control_node_B.flag[9] = obj->tunablePropertyChanged[21];
    if (proc_control_node_vectorAny(proc_control_node_B.flag, tmp_1)) {
      IMUSensorParameters_updateSys_b(proc_control_node_B.aasq,
        proc_control_node_B.n_b, proc_control_node_B.val_c,
        proc_control_node_B.val_nh, proc_control_node_B.val_d,
        proc_control_node_B.val_i, proc_control_node_B.val_no,
        proc_control_node_B.val_bi, proc_control_node_B.val_bt,
        proc_control_node_B.val_j, obj->pGyro);
    }

    proc_control_node_B.flag_k[0] = obj->tunablePropertyChanged[22];
    proc_control_node_B.flag_k[1] = obj->tunablePropertyChanged[23];
    proc_control_node_B.flag_k[2] = obj->tunablePropertyChanged[24];
    proc_control_node_B.flag_k[3] = obj->tunablePropertyChanged[25];
    proc_control_node_B.flag_k[4] = obj->tunablePropertyChanged[26];
    proc_control_node_B.flag_k[5] = obj->tunablePropertyChanged[27];
    proc_control_node_B.flag_k[6] = obj->tunablePropertyChanged[28];
    proc_control_node_B.flag_k[7] = obj->tunablePropertyChanged[29];
    proc_control_node_B.flag_k[8] = obj->tunablePropertyChanged[30];
    if (proc_control_node_vectorAny(proc_control_node_B.flag_k, tmp_0)) {
      IMUSensorParameters_updateSy_b4(proc_control_node_B.ab2,
        proc_control_node_B.ac2, proc_control_node_B.val_n0,
        proc_control_node_B.val_f, proc_control_node_B.val_e,
        proc_control_node_B.val_in, proc_control_node_B.val_a,
        proc_control_node_B.val_fd, proc_control_node_B.val_k, obj->pMag);
    }

    for (proc_control_node_B.k_bp = 0; proc_control_node_B.k_bp < 32;
         proc_control_node_B.k_bp++) {
      obj->tunablePropertyChanged[proc_control_node_B.k_bp] = false;
    }
  }

  proc_control_node_B.n_b = sqrt(((varargin_3[0] * varargin_3[0] + varargin_3[1]
    * varargin_3[1]) + varargin_3[2] * varargin_3[2]) + varargin_3[3] *
    varargin_3[3]);
  proc_control_node_B.aasq = varargin_3[0] / proc_control_node_B.n_b;
  proc_control_node_B.maximum = varargin_3[1] / proc_control_node_B.n_b;
  proc_control_node_B.val_ce = varargin_3[2] / proc_control_node_B.n_b;
  proc_control_node_B.n_b = varargin_3[3] / proc_control_node_B.n_b;
  proc_control_node_B.ab2 = proc_control_node_B.aasq *
    proc_control_node_B.maximum * 2.0;
  proc_control_node_B.ac2 = proc_control_node_B.aasq *
    proc_control_node_B.val_ce * 2.0;
  proc_control_node_B.ad2 = proc_control_node_B.aasq * proc_control_node_B.n_b *
    2.0;
  proc_control_node_B.bc2 = proc_control_node_B.maximum *
    proc_control_node_B.val_ce * 2.0;
  proc_control_node_B.bd2 = proc_control_node_B.maximum *
    proc_control_node_B.n_b * 2.0;
  proc_control_node_B.cd2 = proc_control_node_B.val_ce * proc_control_node_B.n_b
    * 2.0;
  proc_control_node_B.aasq = proc_control_node_B.aasq * proc_control_node_B.aasq
    * 2.0 - 1.0;
  proc_control_node_B.rmat[0] = proc_control_node_B.maximum *
    proc_control_node_B.maximum * 2.0 + proc_control_node_B.aasq;
  proc_control_node_B.rmat[3] = proc_control_node_B.bc2 +
    proc_control_node_B.ad2;
  proc_control_node_B.rmat[6] = proc_control_node_B.bd2 -
    proc_control_node_B.ac2;
  proc_control_node_B.rmat[1] = proc_control_node_B.bc2 -
    proc_control_node_B.ad2;
  proc_control_node_B.rmat[4] = proc_control_node_B.val_ce *
    proc_control_node_B.val_ce * 2.0 + proc_control_node_B.aasq;
  proc_control_node_B.rmat[7] = proc_control_node_B.cd2 +
    proc_control_node_B.ab2;
  proc_control_node_B.rmat[2] = proc_control_node_B.bd2 +
    proc_control_node_B.ac2;
  proc_control_node_B.rmat[5] = proc_control_node_B.cd2 -
    proc_control_node_B.ab2;
  proc_control_node_B.rmat[8] = proc_control_node_B.n_b *
    proc_control_node_B.n_b * 2.0 + proc_control_node_B.aasq;
  IMUSensorBase_stepRandomStream(obj, proc_control_node_B.randNums);
  proc_control__SystemCore_step_b(obj->pAccel, varargin_1,
    proc_control_node_B.rmat, &proc_control_node_B.randNums[0], varargout_1);
  proc_control_SystemCore_step_b4(obj->pGyro, varargin_2, varargin_1,
    proc_control_node_B.rmat, &proc_control_node_B.randNums[9], varargout_2);
  proc_control_node_B.val_b[0] = obj->MagneticField[0];
  proc_control_node_B.val_b[1] = obj->MagneticField[1];
  proc_control_node_B.val_b[2] = obj->MagneticField[2];
  proc_control_node_B.magneticfield[0] = proc_control_node_B.val_b[0];
  proc_control_node_B.magneticfield[1] = proc_control_node_B.val_b[1];
  proc_control_node_B.magneticfield[2] = proc_control_node_B.val_b[2];
  obj_2 = obj->pMag;
  if (obj_2->isInitialized != 1) {
    obj_2->isInitialized = 1;
    for (proc_control_node_B.k_bp = 0; proc_control_node_B.k_bp < 9;
         proc_control_node_B.k_bp++) {
      proc_control_node_B.b_I_iv[proc_control_node_B.k_bp] = 0;
    }

    proc_control_node_B.b_I_iv[0] = 1;
    proc_control_node_B.b_I_iv[4] = 1;
    proc_control_node_B.b_I_iv[8] = 1;
    for (proc_control_node_B.k_bp = 0; proc_control_node_B.k_bp < 9;
         proc_control_node_B.k_bp++) {
      proc_control_node_B.a_j[proc_control_node_B.k_bp] =
        tmp[proc_control_node_B.k_bp];
    }

    proc_control_node_B.val_b[0] = obj_2->AxesMisalignment[0] / 100.0;
    proc_control_node_B.val_b[1] = obj_2->AxesMisalignment[1] / 100.0;
    proc_control_node_B.val_b[2] = obj_2->AxesMisalignment[2] / 100.0;
    for (proc_control_node_B.k_bp = 0; proc_control_node_B.k_bp < 3;
         proc_control_node_B.k_bp++) {
      proc_control_node_B.maximum =
        proc_control_node_B.val_b[proc_control_node_B.k_bp];
      proc_control_node_B.c_d[3 * proc_control_node_B.k_bp] =
        proc_control_node_B.a_j[3 * proc_control_node_B.k_bp] *
        proc_control_node_B.maximum;
      proc_control_node_B.nx_p = 3 * proc_control_node_B.k_bp + 1;
      proc_control_node_B.c_d[proc_control_node_B.nx_p] =
        proc_control_node_B.a_j[proc_control_node_B.nx_p] *
        proc_control_node_B.maximum;
      proc_control_node_B.nx_p = 3 * proc_control_node_B.k_bp + 2;
      proc_control_node_B.c_d[proc_control_node_B.nx_p] =
        proc_control_node_B.a_j[proc_control_node_B.nx_p] *
        proc_control_node_B.maximum;
    }

    for (proc_control_node_B.k_bp = 0; proc_control_node_B.k_bp < 9;
         proc_control_node_B.k_bp++) {
      obj_2->pGain[proc_control_node_B.k_bp] = static_cast<real_T>
        (proc_control_node_B.b_I_iv[proc_control_node_B.k_bp]) +
        proc_control_node_B.c_d[proc_control_node_B.k_bp];
    }

    obj_2->pBiasInstFilterNum = 1.0;
    obj_2->pBiasInstFilterDen[0] = 1.0;
    obj_2->pBiasInstFilterDen[1] = -0.5;
    obj_2->pBiasInstFilterStates[0] = 0.0;
    obj_2->pBiasInstFilterStates[1] = 0.0;
    obj_2->pBiasInstFilterStates[2] = 0.0;
    obj_2->pStdDevBiasInst[0] = obj_2->BiasInstability[0];
    obj_2->pStdDevBiasInst[1] = obj_2->BiasInstability[1];
    obj_2->pStdDevBiasInst[2] = obj_2->BiasInstability[2];
    obj_2->pStdDevWhiteNoise[0] = 7.0710678118654755 * obj_2->NoiseDensity[0];
    obj_2->pStdDevWhiteNoise[1] = 7.0710678118654755 * obj_2->NoiseDensity[1];
    obj_2->pStdDevWhiteNoise[2] = 7.0710678118654755 * obj_2->NoiseDensity[2];
    obj_2->pRandWalkFilterStates[0] = 0.0;
    obj_2->pRandWalkFilterStates[1] = 0.0;
    obj_2->pRandWalkFilterStates[2] = 0.0;
    obj_2->pStdDevRandWalk[0] = obj_2->RandomWalk[0] / 7.0710678118654755;
    obj_2->pStdDevRandWalk[1] = obj_2->RandomWalk[1] / 7.0710678118654755;
    obj_2->pStdDevRandWalk[2] = obj_2->RandomWalk[2] / 7.0710678118654755;
    obj_2->TunablePropsChanged = false;
    obj_2->pBiasInstFilterStates[0] = 0.0;
    obj_2->pBiasInstFilterStates[1] = 0.0;
    obj_2->pBiasInstFilterStates[2] = 0.0;
    obj_2->pRandWalkFilterStates[0] = 0.0;
    obj_2->pRandWalkFilterStates[1] = 0.0;
    obj_2->pRandWalkFilterStates[2] = 0.0;
  }

  if (obj_2->TunablePropsChanged) {
    obj_2->TunablePropsChanged = false;
    proc_control_node_B.flag_h = obj_2->tunablePropertyChanged[3];
    if (proc_control_node_B.flag_h) {
      for (proc_control_node_B.k_bp = 0; proc_control_node_B.k_bp < 9;
           proc_control_node_B.k_bp++) {
        proc_control_node_B.b_I_iv[proc_control_node_B.k_bp] = 0;
      }

      proc_control_node_B.b_I_iv[0] = 1;
      proc_control_node_B.b_I_iv[4] = 1;
      proc_control_node_B.b_I_iv[8] = 1;
      for (proc_control_node_B.k_bp = 0; proc_control_node_B.k_bp < 9;
           proc_control_node_B.k_bp++) {
        proc_control_node_B.a_j[proc_control_node_B.k_bp] =
          tmp[proc_control_node_B.k_bp];
      }

      proc_control_node_B.val_b[0] = obj_2->AxesMisalignment[0] / 100.0;
      proc_control_node_B.val_b[1] = obj_2->AxesMisalignment[1] / 100.0;
      proc_control_node_B.val_b[2] = obj_2->AxesMisalignment[2] / 100.0;
      for (proc_control_node_B.k_bp = 0; proc_control_node_B.k_bp < 3;
           proc_control_node_B.k_bp++) {
        proc_control_node_B.maximum =
          proc_control_node_B.val_b[proc_control_node_B.k_bp];
        proc_control_node_B.c_d[3 * proc_control_node_B.k_bp] =
          proc_control_node_B.a_j[3 * proc_control_node_B.k_bp] *
          proc_control_node_B.maximum;
        proc_control_node_B.nx_p = 3 * proc_control_node_B.k_bp + 1;
        proc_control_node_B.c_d[proc_control_node_B.nx_p] =
          proc_control_node_B.a_j[proc_control_node_B.nx_p] *
          proc_control_node_B.maximum;
        proc_control_node_B.nx_p = 3 * proc_control_node_B.k_bp + 2;
        proc_control_node_B.c_d[proc_control_node_B.nx_p] =
          proc_control_node_B.a_j[proc_control_node_B.nx_p] *
          proc_control_node_B.maximum;
      }

      for (proc_control_node_B.k_bp = 0; proc_control_node_B.k_bp < 9;
           proc_control_node_B.k_bp++) {
        obj_2->pGain[proc_control_node_B.k_bp] = static_cast<real_T>
          (proc_control_node_B.b_I_iv[proc_control_node_B.k_bp]) +
          proc_control_node_B.c_d[proc_control_node_B.k_bp];
      }
    }

    proc_control_node_B.flag_h = obj_2->tunablePropertyChanged[4];
    if (proc_control_node_B.flag_h) {
      obj_2->pStdDevWhiteNoise[0] = 7.0710678118654755 * obj_2->NoiseDensity[0];
      obj_2->pStdDevWhiteNoise[1] = 7.0710678118654755 * obj_2->NoiseDensity[1];
      obj_2->pStdDevWhiteNoise[2] = 7.0710678118654755 * obj_2->NoiseDensity[2];
    }

    proc_control_node_B.flag_h = obj_2->tunablePropertyChanged[5];
    if (proc_control_node_B.flag_h) {
      obj_2->pStdDevBiasInst[0] = obj_2->BiasInstability[0];
      obj_2->pStdDevBiasInst[1] = obj_2->BiasInstability[1];
      obj_2->pStdDevBiasInst[2] = obj_2->BiasInstability[2];
    }

    proc_control_node_B.flag_h = obj_2->tunablePropertyChanged[6];
    if (proc_control_node_B.flag_h) {
      obj_2->pStdDevRandWalk[0] = obj_2->RandomWalk[0] / 7.0710678118654755;
      obj_2->pStdDevRandWalk[1] = obj_2->RandomWalk[1] / 7.0710678118654755;
      obj_2->pStdDevRandWalk[2] = obj_2->RandomWalk[2] / 7.0710678118654755;
    }

    for (proc_control_node_B.k_bp = 0; proc_control_node_B.k_bp < 10;
         proc_control_node_B.k_bp++) {
      obj_2->tunablePropertyChanged[proc_control_node_B.k_bp] = false;
    }
  }

  for (proc_control_node_B.k_bp = 0; proc_control_node_B.k_bp < 9;
       proc_control_node_B.k_bp++) {
    proc_control_node_B.a_j[proc_control_node_B.k_bp] = obj_2->
      pGain[proc_control_node_B.k_bp];
  }

  for (proc_control_node_B.k_bp = 0; proc_control_node_B.k_bp < 3;
       proc_control_node_B.k_bp++) {
    proc_control_node_B.whiteNoiseDrift[proc_control_node_B.k_bp] =
      proc_control_node_B.rmat[proc_control_node_B.k_bp + 6] *
      proc_control_node_B.magneticfield[2] +
      (proc_control_node_B.rmat[proc_control_node_B.k_bp + 3] *
       proc_control_node_B.magneticfield[1] +
       proc_control_node_B.rmat[proc_control_node_B.k_bp] *
       proc_control_node_B.magneticfield[0]);
  }

  for (proc_control_node_B.k_bp = 0; proc_control_node_B.k_bp < 3;
       proc_control_node_B.k_bp++) {
    proc_control_node_B.val_p[proc_control_node_B.k_bp] =
      proc_control_node_B.a_j[proc_control_node_B.k_bp + 6] *
      proc_control_node_B.whiteNoiseDrift[2] +
      (proc_control_node_B.a_j[proc_control_node_B.k_bp + 3] *
       proc_control_node_B.whiteNoiseDrift[1] +
       proc_control_node_B.a_j[proc_control_node_B.k_bp] *
       proc_control_node_B.whiteNoiseDrift[0]);
  }

  proc_control_node_B.val_b[0] = obj_2->ConstantBias[0];
  proc_control_node_B.val_b[1] = obj_2->ConstantBias[1];
  proc_control_node_B.val_b[2] = obj_2->ConstantBias[2];
  proc_control_node_B.magneticfield[0] = proc_control_node_B.val_p[0] +
    proc_control_node_B.val_b[0];
  proc_control_node_B.magneticfield[1] = proc_control_node_B.val_p[1] +
    proc_control_node_B.val_b[1];
  proc_control_node_B.magneticfield[2] = proc_control_node_B.val_p[2] +
    proc_control_node_B.val_b[2];
  proc_control_node_B.val_b[0] = obj_2->pStdDevBiasInst[0];
  proc_control_node_B.val_b[1] = obj_2->pStdDevBiasInst[1];
  proc_control_node_B.val_b[2] = obj_2->pStdDevBiasInst[2];
  proc_control_node_B.temperatureDrift[0] = proc_control_node_B.val_b[0] *
    proc_control_node_B.randNums[18];
  proc_control_node_B.temperatureDrift[1] = proc_control_node_B.val_b[1] *
    proc_control_node_B.randNums[19];
  proc_control_node_B.temperatureDrift[2] = proc_control_node_B.val_b[2] *
    proc_control_node_B.randNums[20];
  for (proc_control_node_B.i9 = 0; proc_control_node_B.i9 < 2;
       proc_control_node_B.i9++) {
    proc_control_node_B.obj_l[proc_control_node_B.i9] =
      obj_2->pBiasInstFilterDen[proc_control_node_B.i9];
  }

  proc_control_node_filter(obj_2->pBiasInstFilterNum, proc_control_node_B.obj_l,
    proc_control_node_B.temperatureDrift, obj_2->pBiasInstFilterStates,
    proc_control_node_B.val_p, proc_control_node_B.val_b);
  obj_2->pBiasInstFilterStates[0] = proc_control_node_B.val_b[0];
  obj_2->pBiasInstFilterStates[1] = proc_control_node_B.val_b[1];
  obj_2->pBiasInstFilterStates[2] = proc_control_node_B.val_b[2];
  proc_control_node_B.val_b[0] = obj_2->pStdDevWhiteNoise[0];
  proc_control_node_B.val_b[1] = obj_2->pStdDevWhiteNoise[1];
  proc_control_node_B.val_b[2] = obj_2->pStdDevWhiteNoise[2];
  proc_control_node_B.whiteNoiseDrift[0] = proc_control_node_B.val_b[0] *
    proc_control_node_B.randNums[21];
  proc_control_node_B.whiteNoiseDrift[1] = proc_control_node_B.val_b[1] *
    proc_control_node_B.randNums[22];
  proc_control_node_B.whiteNoiseDrift[2] = proc_control_node_B.val_b[2] *
    proc_control_node_B.randNums[23];
  proc_control_node_B.val_b[0] = obj_2->pStdDevRandWalk[0];
  proc_control_node_B.val_b[1] = obj_2->pStdDevRandWalk[1];
  proc_control_node_B.val_b[2] = obj_2->pStdDevRandWalk[2];
  proc_control_node_B.val_ce = obj_2->pRandWalkFilterStates[0];
  proc_control_node_B.aasq = obj_2->pRandWalkFilterStates[1];
  proc_control_node_B.maximum = obj_2->pRandWalkFilterStates[2];
  proc_control_node_B.val_ce += proc_control_node_B.val_b[0] *
    proc_control_node_B.randNums[24];
  proc_control_node_B.aasq += proc_control_node_B.val_b[1] *
    proc_control_node_B.randNums[25];
  proc_control_node_B.n_b = proc_control_node_B.val_b[2] *
    proc_control_node_B.randNums[26] + proc_control_node_B.maximum;
  obj_2->pRandWalkFilterStates[0] = proc_control_node_B.val_ce;
  obj_2->pRandWalkFilterStates[1] = proc_control_node_B.aasq;
  obj_2->pRandWalkFilterStates[2] = proc_control_node_B.n_b;
  proc_control_node_B.maximum = obj_2->Temperature - 25.0;
  proc_control_node_B.val_b[0] = proc_control_node_B.maximum *
    obj_2->TemperatureBias[0];
  proc_control_node_B.val_b[1] = proc_control_node_B.maximum *
    obj_2->TemperatureBias[1];
  proc_control_node_B.val_b[2] = proc_control_node_B.maximum *
    obj_2->TemperatureBias[2];
  proc_control_node_B.temperatureDrift[0] = proc_control_node_B.val_b[0];
  proc_control_node_B.temperatureDrift[1] = proc_control_node_B.val_b[1];
  proc_control_node_B.temperatureDrift[2] = proc_control_node_B.val_b[2];
  proc_control_node_B.maximum = (obj_2->Temperature - 25.0) * 0.01;
  proc_control_node_B.val_b[0] = proc_control_node_B.maximum *
    obj_2->TemperatureScaleFactor[0] + 1.0;
  proc_control_node_B.val_b[1] = proc_control_node_B.maximum *
    obj_2->TemperatureScaleFactor[1] + 1.0;
  proc_control_node_B.val_b[2] = proc_control_node_B.maximum *
    obj_2->TemperatureScaleFactor[2] + 1.0;
  varargout_3[0] = ((((proc_control_node_B.whiteNoiseDrift[0] +
                       proc_control_node_B.val_p[0]) +
                      proc_control_node_B.val_ce) +
                     proc_control_node_B.temperatureDrift[0]) +
                    proc_control_node_B.magneticfield[0]) *
    proc_control_node_B.val_b[0];
  varargout_3[1] = ((((proc_control_node_B.whiteNoiseDrift[1] +
                       proc_control_node_B.val_p[1]) + proc_control_node_B.aasq)
                     + proc_control_node_B.temperatureDrift[1]) +
                    proc_control_node_B.magneticfield[1]) *
    proc_control_node_B.val_b[1];
  varargout_3[2] = ((((proc_control_node_B.whiteNoiseDrift[2] +
                       proc_control_node_B.val_p[2]) + proc_control_node_B.n_b)
                     + proc_control_node_B.temperatureDrift[2]) +
                    proc_control_node_B.magneticfield[2]) *
    proc_control_node_B.val_b[2];
  proc_control_node_B.maximum = obj_2->MeasurementRange;
  if (!rtIsInf(proc_control_node_B.maximum)) {
    proc_control_node_B.maximum = obj_2->MeasurementRange;
    proc_control_node_B.val_ce = fabs(varargout_3[0]);
    proc_control_node_B.d_ev[0] = (proc_control_node_B.val_ce >
      proc_control_node_B.maximum);
    proc_control_node_B.aasq = fabs(varargout_3[1]);
    proc_control_node_B.d_ev[1] = (proc_control_node_B.aasq >
      proc_control_node_B.maximum);
    proc_control_node_B.n_b = fabs(varargout_3[2]);
    proc_control_node_B.d_ev[2] = (proc_control_node_B.n_b >
      proc_control_node_B.maximum);
    proc_control_node_B.nx_p = 0;
    for (proc_control_node_B.k_bp = 0; proc_control_node_B.k_bp < 3;
         proc_control_node_B.k_bp++) {
      if (proc_control_node_B.d_ev[proc_control_node_B.k_bp]) {
        proc_control_node_B.b_data_fx[proc_control_node_B.nx_p] =
          static_cast<int8_T>(proc_control_node_B.k_bp + 1);
        proc_control_node_B.nx_p++;
      }
    }

    proc_control_node_B.d_ev[0] = (proc_control_node_B.val_ce >
      proc_control_node_B.maximum);
    proc_control_node_B.d_ev[1] = (proc_control_node_B.aasq >
      proc_control_node_B.maximum);
    proc_control_node_B.d_ev[2] = (proc_control_node_B.n_b >
      proc_control_node_B.maximum);
    proc_control_node_B.nx_p = 0;
    for (proc_control_node_B.k_bp = 0; proc_control_node_B.k_bp < 3;
         proc_control_node_B.k_bp++) {
      if (proc_control_node_B.d_ev[proc_control_node_B.k_bp]) {
        proc_control_node_B.nx_p++;
      }
    }

    proc_control_node_B.f_size_idx_1 = proc_control_node_B.nx_p;
    proc_control_node_B.nx_p = 0;
    for (proc_control_node_B.k_bp = 0; proc_control_node_B.k_bp < 3;
         proc_control_node_B.k_bp++) {
      if (proc_control_node_B.d_ev[proc_control_node_B.k_bp]) {
        proc_control_node_B.f_data_l[proc_control_node_B.nx_p] =
          static_cast<int8_T>(proc_control_node_B.k_bp + 1);
        proc_control_node_B.nx_p++;
      }
    }

    proc_control_node_B.nx_p = proc_control_node_B.f_size_idx_1 - 1;
    for (proc_control_node_B.k_bp = 0; proc_control_node_B.k_bp <=
         proc_control_node_B.nx_p; proc_control_node_B.k_bp++) {
      proc_control_node_B.b_x_data_tmp = proc_control_node_B.k_bp;
      proc_control_node_B.magneticfield[proc_control_node_B.b_x_data_tmp] =
        varargout_3[proc_control_node_B.f_data_l[proc_control_node_B.b_x_data_tmp]
        - 1];
    }

    for (proc_control_node_B.k_bp = 0; proc_control_node_B.k_bp <=
         proc_control_node_B.nx_p; proc_control_node_B.k_bp++) {
      proc_control_node_B.b_x_data_tmp = proc_control_node_B.k_bp;
      proc_control_node_B.val_ce =
        proc_control_node_B.magneticfield[proc_control_node_B.b_x_data_tmp];
      if (proc_control_node_B.val_ce < 0.0) {
        proc_control_node_B.val_ce = -1.0;
      } else if (proc_control_node_B.val_ce > 0.0) {
        proc_control_node_B.val_ce = 1.0;
      } else if (proc_control_node_B.val_ce == 0.0) {
        proc_control_node_B.val_ce = 0.0;
      } else {
        proc_control_node_B.val_ce = (rtNaN);
      }

      proc_control_node_B.magneticfield[proc_control_node_B.b_x_data_tmp] =
        proc_control_node_B.val_ce;
    }

    for (proc_control_node_B.k_bp = 0; proc_control_node_B.k_bp <
         proc_control_node_B.f_size_idx_1; proc_control_node_B.k_bp++) {
      proc_control_node_B.nx_p = proc_control_node_B.k_bp;
      varargout_3[proc_control_node_B.b_data_fx[proc_control_node_B.nx_p] - 1] =
        proc_control_node_B.magneticfield[proc_control_node_B.nx_p] *
        proc_control_node_B.maximum;
    }
  }

  if (obj_2->Resolution != 0.0) {
    proc_control_node_B.maximum = obj_2->Resolution;
    varargout_3[0] = rt_roundd_snf(varargout_3[0] / proc_control_node_B.maximum);
    varargout_3[1] = rt_roundd_snf(varargout_3[1] / proc_control_node_B.maximum);
    varargout_3[2] = rt_roundd_snf(varargout_3[2] / proc_control_node_B.maximum);
    varargout_3[0] *= proc_control_node_B.maximum;
    varargout_3[1] *= proc_control_node_B.maximum;
    varargout_3[2] *= proc_control_node_B.maximum;
  }
}

static void IMUFusionCommon_computeAngularV(const real_T gfast[3], const real_T
  offset[3], real_T av[3])
{
  av[0] = gfast[0] - offset[0];
  av[1] = gfast[1] - offset[1];
  av[2] = gfast[2] - offset[2];
}

static void proc_control_node_NED_ecompass(const real_T a[3], const real_T m[3],
  real_T R[9])
{
  real_T R_0;
  int32_T b_xi;
  int32_T xpageoffset;
  boolean_T y[3];
  boolean_T exitg1;
  boolean_T nanPageIdx;
  proc_control_node_B.Reast[0] = a[1] * m[2] - m[1] * a[2];
  proc_control_node_B.Reast[1] = m[0] * a[2] - a[0] * m[2];
  proc_control_node_B.Reast[2] = a[0] * m[1] - m[0] * a[1];
  R[6] = a[0];
  R[3] = proc_control_node_B.Reast[0];
  R[7] = a[1];
  R[4] = proc_control_node_B.Reast[1];
  R[8] = a[2];
  R[5] = proc_control_node_B.Reast[2];
  R[0] = proc_control_node_B.Reast[1] * a[2] - a[1] * proc_control_node_B.Reast
    [2];
  R[1] = a[0] * proc_control_node_B.Reast[2] - proc_control_node_B.Reast[0] * a
    [2];
  R[2] = proc_control_node_B.Reast[0] * a[1] - a[0] * proc_control_node_B.Reast
    [1];
  for (b_xi = 0; b_xi < 9; b_xi++) {
    R_0 = R[b_xi];
    proc_control_node_B.x_p[b_xi] = R_0 * R_0;
  }

  for (b_xi = 0; b_xi < 3; b_xi++) {
    xpageoffset = b_xi * 3;
    proc_control_node_B.Reast[b_xi] = proc_control_node_B.x_p[xpageoffset + 2] +
      (proc_control_node_B.x_p[xpageoffset + 1] +
       proc_control_node_B.x_p[xpageoffset]);
  }

  proc_control_node_B.Reast[0] = sqrt(proc_control_node_B.Reast[0]);
  proc_control_node_B.Reast[1] = sqrt(proc_control_node_B.Reast[1]);
  proc_control_node_B.Reast[2] = sqrt(proc_control_node_B.Reast[2]);
  memcpy(&proc_control_node_B.x_p[0], &R[0], 9U * sizeof(real_T));
  for (b_xi = 0; b_xi < 3; b_xi++) {
    R_0 = proc_control_node_B.Reast[b_xi];
    R[3 * b_xi] = proc_control_node_B.x_p[3 * b_xi] / R_0;
    xpageoffset = 3 * b_xi + 1;
    R[xpageoffset] = proc_control_node_B.x_p[xpageoffset] / R_0;
    xpageoffset = 3 * b_xi + 2;
    R[xpageoffset] = proc_control_node_B.x_p[xpageoffset] / R_0;
  }

  for (b_xi = 0; b_xi < 9; b_xi++) {
    proc_control_node_B.b_i[b_xi] = rtIsNaN(R[b_xi]);
  }

  y[0] = false;
  y[1] = false;
  y[2] = false;
  b_xi = 1;
  exitg1 = false;
  while ((!exitg1) && (b_xi <= 3)) {
    if (!proc_control_node_B.b_i[b_xi - 1]) {
      b_xi++;
    } else {
      y[0] = true;
      exitg1 = true;
    }
  }

  b_xi = 4;
  exitg1 = false;
  while ((!exitg1) && (b_xi <= 6)) {
    if (!proc_control_node_B.b_i[b_xi - 1]) {
      b_xi++;
    } else {
      y[1] = true;
      exitg1 = true;
    }
  }

  b_xi = 7;
  exitg1 = false;
  while ((!exitg1) && (b_xi <= 9)) {
    if (!proc_control_node_B.b_i[b_xi - 1]) {
      b_xi++;
    } else {
      y[2] = true;
      exitg1 = true;
    }
  }

  nanPageIdx = false;
  b_xi = 0;
  exitg1 = false;
  while ((!exitg1) && (b_xi < 3)) {
    if (!y[b_xi]) {
      b_xi++;
    } else {
      nanPageIdx = true;
      exitg1 = true;
    }
  }

  if (nanPageIdx) {
    memset(&R[0], 0, 9U * sizeof(real_T));
    R[0] = 1.0;
    R[4] = 1.0;
    R[8] = 1.0;
  }
}

static void proc_cont_quaternion_quaternion(const real_T varargin_1[9], real_T
  *obj_a, real_T *obj_b, real_T *obj_c, real_T *obj_d)
{
  real_T tmp;
  int32_T b_idx;
  int32_T b_idx_0;
  int32_T k;
  boolean_T exitg1;
  proc_control_node_B.pd = (varargin_1[0] + varargin_1[4]) + varargin_1[8];
  proc_control_node_B.psquared[0] = (proc_control_node_B.pd * 2.0 + 1.0) -
    proc_control_node_B.pd;
  proc_control_node_B.psquared[1] = (2.0 * varargin_1[0] + 1.0) -
    proc_control_node_B.pd;
  proc_control_node_B.psquared[2] = (2.0 * varargin_1[4] + 1.0) -
    proc_control_node_B.pd;
  proc_control_node_B.psquared[3] = (2.0 * varargin_1[8] + 1.0) -
    proc_control_node_B.pd;
  if (!rtIsNaN(proc_control_node_B.psquared[0])) {
    b_idx = 1;
  } else {
    b_idx = 0;
    k = 2;
    exitg1 = false;
    while ((!exitg1) && (k < 5)) {
      if (!rtIsNaN(proc_control_node_B.psquared[k - 1])) {
        b_idx = k;
        exitg1 = true;
      } else {
        k++;
      }
    }
  }

  if (b_idx == 0) {
    proc_control_node_B.pd = proc_control_node_B.psquared[0];
    b_idx = 1;
  } else {
    proc_control_node_B.pd = proc_control_node_B.psquared[b_idx - 1];
    b_idx_0 = b_idx;
    for (k = b_idx + 1; k < 5; k++) {
      tmp = proc_control_node_B.psquared[k - 1];
      if (proc_control_node_B.pd < tmp) {
        proc_control_node_B.pd = tmp;
        b_idx_0 = k;
      }
    }

    b_idx = b_idx_0;
  }

  switch (b_idx) {
   case 1:
    proc_control_node_B.pd = sqrt(proc_control_node_B.pd);
    *obj_a = 0.5 * proc_control_node_B.pd;
    proc_control_node_B.pd = 0.5 / proc_control_node_B.pd;
    *obj_b = (varargin_1[7] - varargin_1[5]) * proc_control_node_B.pd;
    *obj_c = (varargin_1[2] - varargin_1[6]) * proc_control_node_B.pd;
    *obj_d = (varargin_1[3] - varargin_1[1]) * proc_control_node_B.pd;
    break;

   case 2:
    proc_control_node_B.pd = sqrt(proc_control_node_B.pd);
    *obj_b = 0.5 * proc_control_node_B.pd;
    proc_control_node_B.pd = 0.5 / proc_control_node_B.pd;
    *obj_a = (varargin_1[7] - varargin_1[5]) * proc_control_node_B.pd;
    *obj_c = (varargin_1[1] + varargin_1[3]) * proc_control_node_B.pd;
    *obj_d = (varargin_1[2] + varargin_1[6]) * proc_control_node_B.pd;
    break;

   case 3:
    proc_control_node_B.pd = sqrt(proc_control_node_B.pd);
    *obj_c = 0.5 * proc_control_node_B.pd;
    proc_control_node_B.pd = 0.5 / proc_control_node_B.pd;
    *obj_a = (varargin_1[2] - varargin_1[6]) * proc_control_node_B.pd;
    *obj_b = (varargin_1[1] + varargin_1[3]) * proc_control_node_B.pd;
    *obj_d = (varargin_1[5] + varargin_1[7]) * proc_control_node_B.pd;
    break;

   default:
    proc_control_node_B.pd = sqrt(proc_control_node_B.pd);
    *obj_d = 0.5 * proc_control_node_B.pd;
    proc_control_node_B.pd = 0.5 / proc_control_node_B.pd;
    *obj_a = (varargin_1[3] - varargin_1[1]) * proc_control_node_B.pd;
    *obj_b = (varargin_1[2] + varargin_1[6]) * proc_control_node_B.pd;
    *obj_c = (varargin_1[5] + varargin_1[7]) * proc_control_node_B.pd;
    break;
  }

  if (*obj_a < 0.0) {
    *obj_a = -*obj_a;
    *obj_b = -*obj_b;
    *obj_c = -*obj_c;
    *obj_d = -*obj_d;
  }
}

static void proc_co_quaternion_quaternion_b(const real_T varargin_1[3], real_T
  *obj_a, real_T *obj_b, real_T *obj_c, real_T *obj_d)
{
  real_T st;
  real_T theta;
  *obj_a = 1.0;
  *obj_b = 0.0;
  *obj_c = 0.0;
  *obj_d = 0.0;
  theta = sqrt((varargin_1[0] * varargin_1[0] + varargin_1[1] * varargin_1[1]) +
               varargin_1[2] * varargin_1[2]);
  st = sin(theta / 2.0);
  if (theta != 0.0) {
    *obj_a = cos(theta / 2.0);
    *obj_b = varargin_1[0] / theta * st;
    *obj_c = varargin_1[1] / theta * st;
    *obj_d = varargin_1[2] / theta * st;
  }
}

static void IMUFusionCommon_predictOrientat(const
  fusion_simulink_ahrsfilter_pr_T *obj, const real_T gfast[3], const real_T
  offset[3], real_T qorient_a, real_T qorient_b, real_T qorient_c, real_T
  qorient_d, real_T *b_qorient_a, real_T *b_qorient_b, real_T *b_qorient_c,
  real_T *b_qorient_d)
{
  proc_control_node_B.c_cx[0] = (gfast[0] - offset[0]) * obj->pSensorPeriod;
  proc_control_node_B.c_cx[1] = (gfast[1] - offset[1]) * obj->pSensorPeriod;
  proc_control_node_B.c_cx[2] = (gfast[2] - offset[2]) * obj->pSensorPeriod;
  proc_co_quaternion_quaternion_b(proc_control_node_B.c_cx,
    &proc_control_node_B.deltaq_a, &proc_control_node_B.deltaq_b,
    &proc_control_node_B.deltaq_c, &proc_control_node_B.deltaq_d);
  *b_qorient_a = ((qorient_a * proc_control_node_B.deltaq_a - qorient_b *
                   proc_control_node_B.deltaq_b) - qorient_c *
                  proc_control_node_B.deltaq_c) - qorient_d *
    proc_control_node_B.deltaq_d;
  *b_qorient_b = ((qorient_a * proc_control_node_B.deltaq_b + qorient_b *
                   proc_control_node_B.deltaq_a) + qorient_c *
                  proc_control_node_B.deltaq_d) - qorient_d *
    proc_control_node_B.deltaq_c;
  *b_qorient_c = ((qorient_a * proc_control_node_B.deltaq_c - qorient_b *
                   proc_control_node_B.deltaq_d) + qorient_c *
                  proc_control_node_B.deltaq_a) + qorient_d *
    proc_control_node_B.deltaq_b;
  *b_qorient_d = ((qorient_a * proc_control_node_B.deltaq_d + qorient_b *
                   proc_control_node_B.deltaq_c) - qorient_c *
                  proc_control_node_B.deltaq_b) + qorient_d *
    proc_control_node_B.deltaq_a;
  if (*b_qorient_a < 0.0) {
    *b_qorient_a = -*b_qorient_a;
    *b_qorient_b = -*b_qorient_b;
    *b_qorient_c = -*b_qorient_c;
    *b_qorient_d = -*b_qorient_d;
  }
}

static void proc_control_node_mrdiv(const real_T A[72], const real_T B[36],
  real_T Y[72])
{
  int32_T a;
  int32_T c;
  int32_T ijA;
  int32_T jA;
  int32_T k;
  int8_T b_ipiv;
  memcpy(&proc_control_node_B.c_A_g[0], &B[0], 36U * sizeof(real_T));
  for (proc_control_node_B.b_j_jd = 0; proc_control_node_B.b_j_jd < 6;
       proc_control_node_B.b_j_jd++) {
    proc_control_node_B.b_ipiv[proc_control_node_B.b_j_jd] = static_cast<int8_T>
      (proc_control_node_B.b_j_jd + 1);
  }

  for (proc_control_node_B.b_j_jd = 0; proc_control_node_B.b_j_jd < 5;
       proc_control_node_B.b_j_jd++) {
    proc_control_node_B.c_a2 = proc_control_node_B.b_j_jd * 7 + 2;
    proc_control_node_B.jj = proc_control_node_B.b_j_jd * 7;
    c = 6 - proc_control_node_B.b_j_jd;
    a = 1;
    proc_control_node_B.smax_a = fabs
      (proc_control_node_B.c_A_g[proc_control_node_B.jj]);
    for (k = 2; k <= c; k++) {
      proc_control_node_B.s_h = fabs(proc_control_node_B.c_A_g
        [(proc_control_node_B.c_a2 + k) - 3]);
      if (proc_control_node_B.s_h > proc_control_node_B.smax_a) {
        a = k;
        proc_control_node_B.smax_a = proc_control_node_B.s_h;
      }
    }

    if (proc_control_node_B.c_A_g[(proc_control_node_B.c_a2 + a) - 3] != 0.0) {
      if (a - 1 != 0) {
        a += proc_control_node_B.b_j_jd;
        proc_control_node_B.b_ipiv[proc_control_node_B.b_j_jd] =
          static_cast<int8_T>(a);
        for (k = 0; k < 6; k++) {
          jA = k * 6 + proc_control_node_B.b_j_jd;
          proc_control_node_B.smax_a = proc_control_node_B.c_A_g[jA];
          c = (k * 6 + a) - 1;
          proc_control_node_B.c_A_g[jA] = proc_control_node_B.c_A_g[c];
          proc_control_node_B.c_A_g[c] = proc_control_node_B.smax_a;
        }
      }

      k = proc_control_node_B.c_a2 - proc_control_node_B.b_j_jd;
      for (a = proc_control_node_B.c_a2; a <= k + 4; a++) {
        proc_control_node_B.c_A_g[a - 1] /=
          proc_control_node_B.c_A_g[proc_control_node_B.jj];
      }
    }

    c = 5 - proc_control_node_B.b_j_jd;
    jA = proc_control_node_B.jj;
    for (a = 0; a < c; a++) {
      proc_control_node_B.smax_a = proc_control_node_B.c_A_g
        [(proc_control_node_B.jj + a * 6) + 6];
      if (proc_control_node_B.smax_a != 0.0) {
        k = jA + 8;
        proc_control_node_B.kBcol = jA - proc_control_node_B.b_j_jd;
        for (ijA = k; ijA <= proc_control_node_B.kBcol + 12; ijA++) {
          proc_control_node_B.c_A_g[ijA - 1] += proc_control_node_B.c_A_g
            [((proc_control_node_B.c_a2 + ijA) - jA) - 9] *
            -proc_control_node_B.smax_a;
        }
      }

      jA += 6;
    }
  }

  memcpy(&Y[0], &A[0], 72U * sizeof(real_T));
  for (proc_control_node_B.b_j_jd = 0; proc_control_node_B.b_j_jd < 6;
       proc_control_node_B.b_j_jd++) {
    proc_control_node_B.jj = 12 * proc_control_node_B.b_j_jd - 1;
    jA = 6 * proc_control_node_B.b_j_jd - 1;
    k = proc_control_node_B.b_j_jd - 1;
    for (a = 0; a <= k; a++) {
      proc_control_node_B.kBcol = 12 * a - 1;
      proc_control_node_B.smax_a = proc_control_node_B.c_A_g[(a + jA) + 1];
      if (proc_control_node_B.smax_a != 0.0) {
        for (c = 0; c < 12; c++) {
          proc_control_node_B.c_a2 = (c + proc_control_node_B.jj) + 1;
          Y[proc_control_node_B.c_a2] -= proc_control_node_B.smax_a * Y[(c +
            proc_control_node_B.kBcol) + 1];
        }
      }
    }

    proc_control_node_B.smax_a = 1.0 / proc_control_node_B.c_A_g
      [(proc_control_node_B.b_j_jd + jA) + 1];
    for (k = 0; k < 12; k++) {
      proc_control_node_B.c_a2 = (k + proc_control_node_B.jj) + 1;
      Y[proc_control_node_B.c_a2] *= proc_control_node_B.smax_a;
    }
  }

  for (a = 5; a >= 0; a--) {
    proc_control_node_B.jj = 12 * a - 1;
    jA = 6 * a - 1;
    for (k = a + 2; k < 7; k++) {
      proc_control_node_B.kBcol = (k - 1) * 12 - 1;
      proc_control_node_B.smax_a = proc_control_node_B.c_A_g[k + jA];
      if (proc_control_node_B.smax_a != 0.0) {
        for (c = 0; c < 12; c++) {
          proc_control_node_B.c_a2 = (c + proc_control_node_B.jj) + 1;
          Y[proc_control_node_B.c_a2] -= Y[(c + proc_control_node_B.kBcol) + 1] *
            proc_control_node_B.smax_a;
        }
      }
    }
  }

  for (a = 4; a >= 0; a--) {
    b_ipiv = proc_control_node_B.b_ipiv[a];
    if (a + 1 != b_ipiv) {
      for (c = 0; c < 12; c++) {
        jA = 12 * a + c;
        proc_control_node_B.smax_a = Y[jA];
        proc_control_node_B.c_a2 = 12 * (b_ipiv - 1) + c;
        Y[jA] = Y[proc_control_node_B.c_a2];
        Y[proc_control_node_B.c_a2] = proc_control_node_B.smax_a;
      }
    }
  }
}

static void proc_contro_ahrsfilter_stepImpl(fusion_simulink_ahrsfilter_pr_T *obj,
  const real_T accelIn[3], const real_T gyroIn[3], const real_T magIn[3], real_T
  orientOut[4], real_T av[3])
{
  boolean_T isJamming;
  static const int8_T tmp[9] = { 1, 0, 0, 0, 1, 0, 0, 0, 1 };

  static const int8_T tmp_0[9] = { -1, 0, 0, 0, -1, 0, 0, 0, -1 };

  IMUFusionCommon_computeAngularV(gyroIn, obj->pGyroOffset, av);
  if (obj->pFirstTime) {
    obj->pFirstTime = false;
    proc_control_node_NED_ecompass(accelIn, magIn, proc_control_node_B.Rprior);
    proc_cont_quaternion_quaternion(proc_control_node_B.Rprior,
      &obj->pOrientPost.a, &obj->pOrientPost.b, &obj->pOrientPost.c,
      &obj->pOrientPost.d);
  }

  for (proc_control_node_B.i4 = 0; proc_control_node_B.i4 < 3;
       proc_control_node_B.i4++) {
    proc_control_node_B.gravityAccelGyroDiff[proc_control_node_B.i4] =
      obj->pGyroOffset[proc_control_node_B.i4];
  }

  IMUFusionCommon_predictOrientat(obj, gyroIn,
    proc_control_node_B.gravityAccelGyroDiff, obj->pOrientPost.a,
    obj->pOrientPost.b, obj->pOrientPost.c, obj->pOrientPost.d,
    &proc_control_node_B.scale_m, &proc_control_node_B.absxk_j,
    &proc_control_node_B.t_i, &proc_control_node_B.linAccelErr_idx_1);
  obj->pOrientPrior.d = proc_control_node_B.linAccelErr_idx_1;
  obj->pOrientPrior.c = proc_control_node_B.t_i;
  obj->pOrientPrior.b = proc_control_node_B.absxk_j;
  obj->pOrientPrior.a = proc_control_node_B.scale_m;
  proc_cont_quaternionBase_rotmat(obj->pOrientPrior.a, obj->pOrientPrior.b,
    obj->pOrientPrior.c, obj->pOrientPrior.d, proc_control_node_B.Rprior);
  for (proc_control_node_B.b_i_e = 0; proc_control_node_B.b_i_e < 3;
       proc_control_node_B.b_i_e++) {
    obj->pLinAccelPrior[proc_control_node_B.b_i_e] =
      obj->LinearAccelerationDecayFactor * obj->
      pLinAccelPost[proc_control_node_B.b_i_e];
    proc_control_node_B.scale_m =
      proc_control_node_B.Rprior[proc_control_node_B.b_i_e + 6];
    proc_control_node_B.gravityAccelGyroDiff[proc_control_node_B.b_i_e] =
      (accelIn[proc_control_node_B.b_i_e] + obj->
       pLinAccelPrior[proc_control_node_B.b_i_e]) - proc_control_node_B.scale_m;
    proc_control_node_B.offDiag[proc_control_node_B.b_i_e] =
      proc_control_node_B.scale_m * obj->pMagVec[2] +
      (proc_control_node_B.Rprior[proc_control_node_B.b_i_e + 3] * obj->pMagVec
       [1] + proc_control_node_B.Rprior[proc_control_node_B.b_i_e] *
       obj->pMagVec[0]);
  }

  memset(&proc_control_node_B.h1[0], 0, 9U * sizeof(real_T));
  proc_control_node_B.h1[3] = proc_control_node_B.Rprior[8];
  proc_control_node_B.h1[6] = -proc_control_node_B.Rprior[7];
  proc_control_node_B.h1[7] = proc_control_node_B.Rprior[6];
  for (proc_control_node_B.b_i_e = 0; proc_control_node_B.b_i_e < 3;
       proc_control_node_B.b_i_e++) {
    proc_control_node_B.h1_h[3 * proc_control_node_B.b_i_e] =
      proc_control_node_B.h1[3 * proc_control_node_B.b_i_e];
    proc_control_node_B.aoffset = 3 * proc_control_node_B.b_i_e + 1;
    proc_control_node_B.h1_h[proc_control_node_B.aoffset] =
      proc_control_node_B.h1[proc_control_node_B.aoffset] -
      proc_control_node_B.h1[proc_control_node_B.b_i_e + 3];
    proc_control_node_B.aoffset = 3 * proc_control_node_B.b_i_e + 2;
    proc_control_node_B.h1_h[proc_control_node_B.aoffset] =
      proc_control_node_B.h1[proc_control_node_B.aoffset] -
      proc_control_node_B.h1[proc_control_node_B.b_i_e + 6];
  }

  for (proc_control_node_B.b_i_e = 0; proc_control_node_B.b_i_e < 9;
       proc_control_node_B.b_i_e++) {
    proc_control_node_B.h1[proc_control_node_B.b_i_e] =
      proc_control_node_B.h1_h[proc_control_node_B.b_i_e];
    proc_control_node_B.Rprior[proc_control_node_B.b_i_e] = 0.0;
  }

  proc_control_node_B.Rprior[3] = proc_control_node_B.offDiag[2];
  proc_control_node_B.Rprior[6] = -proc_control_node_B.offDiag[1];
  proc_control_node_B.Rprior[7] = proc_control_node_B.offDiag[0];
  for (proc_control_node_B.b_i_e = 0; proc_control_node_B.b_i_e < 3;
       proc_control_node_B.b_i_e++) {
    proc_control_node_B.h1_h[3 * proc_control_node_B.b_i_e] =
      proc_control_node_B.Rprior[3 * proc_control_node_B.b_i_e];
    proc_control_node_B.aoffset = 3 * proc_control_node_B.b_i_e + 1;
    proc_control_node_B.h1_h[proc_control_node_B.aoffset] =
      proc_control_node_B.Rprior[proc_control_node_B.aoffset] -
      proc_control_node_B.Rprior[proc_control_node_B.b_i_e + 3];
    proc_control_node_B.aoffset = 3 * proc_control_node_B.b_i_e + 2;
    proc_control_node_B.h1_h[proc_control_node_B.aoffset] =
      proc_control_node_B.Rprior[proc_control_node_B.aoffset] -
      proc_control_node_B.Rprior[proc_control_node_B.b_i_e + 6];
  }

  memcpy(&proc_control_node_B.Rprior[0], &proc_control_node_B.h1_h[0], 9U *
         sizeof(real_T));
  for (proc_control_node_B.b_i_e = 0; proc_control_node_B.b_i_e < 3;
       proc_control_node_B.b_i_e++) {
    proc_control_node_B.scale_m = proc_control_node_B.Rprior[3 *
      proc_control_node_B.b_i_e];
    proc_control_node_B.absxk_j = proc_control_node_B.h1[3 *
      proc_control_node_B.b_i_e];
    proc_control_node_B.H[6 * proc_control_node_B.b_i_e] =
      proc_control_node_B.absxk_j;
    proc_control_node_B.H_tmp = 6 * (proc_control_node_B.b_i_e + 3);
    proc_control_node_B.H[proc_control_node_B.H_tmp] =
      -proc_control_node_B.absxk_j * obj->pKalmanPeriod;
    proc_control_node_B.H_tmp_h = 6 * (proc_control_node_B.b_i_e + 6);
    proc_control_node_B.H[proc_control_node_B.H_tmp_h] = tmp[3 *
      proc_control_node_B.b_i_e];
    proc_control_node_B.H_tmp_i = 6 * (proc_control_node_B.b_i_e + 9);
    proc_control_node_B.H[proc_control_node_B.H_tmp_i] = 0.0;
    proc_control_node_B.H[6 * proc_control_node_B.b_i_e + 3] =
      proc_control_node_B.scale_m;
    proc_control_node_B.H[proc_control_node_B.H_tmp + 3] =
      -proc_control_node_B.scale_m * obj->pKalmanPeriod;
    proc_control_node_B.H[proc_control_node_B.H_tmp_h + 3] = 0.0;
    proc_control_node_B.H[proc_control_node_B.H_tmp_i + 3] = tmp_0[3 *
      proc_control_node_B.b_i_e];
    proc_control_node_B.aoffset = 3 * proc_control_node_B.b_i_e + 1;
    proc_control_node_B.scale_m =
      proc_control_node_B.Rprior[proc_control_node_B.aoffset];
    proc_control_node_B.absxk_j =
      proc_control_node_B.h1[proc_control_node_B.aoffset];
    proc_control_node_B.H[6 * proc_control_node_B.b_i_e + 1] =
      proc_control_node_B.absxk_j;
    proc_control_node_B.H[proc_control_node_B.H_tmp + 1] =
      -proc_control_node_B.absxk_j * obj->pKalmanPeriod;
    proc_control_node_B.H[proc_control_node_B.H_tmp_h + 1] =
      tmp[proc_control_node_B.aoffset];
    proc_control_node_B.H[proc_control_node_B.H_tmp_i + 1] = 0.0;
    proc_control_node_B.H[6 * proc_control_node_B.b_i_e + 4] =
      proc_control_node_B.scale_m;
    proc_control_node_B.H[proc_control_node_B.H_tmp + 4] =
      -proc_control_node_B.scale_m * obj->pKalmanPeriod;
    proc_control_node_B.H[proc_control_node_B.H_tmp_h + 4] = 0.0;
    proc_control_node_B.H[proc_control_node_B.H_tmp_i + 4] =
      tmp_0[proc_control_node_B.aoffset];
    proc_control_node_B.aoffset = 3 * proc_control_node_B.b_i_e + 2;
    proc_control_node_B.scale_m =
      proc_control_node_B.Rprior[proc_control_node_B.aoffset];
    proc_control_node_B.absxk_j =
      proc_control_node_B.h1[proc_control_node_B.aoffset];
    proc_control_node_B.H[6 * proc_control_node_B.b_i_e + 2] =
      proc_control_node_B.absxk_j;
    proc_control_node_B.H[proc_control_node_B.H_tmp + 2] =
      -proc_control_node_B.absxk_j * obj->pKalmanPeriod;
    proc_control_node_B.H[proc_control_node_B.H_tmp_h + 2] =
      tmp[proc_control_node_B.aoffset];
    proc_control_node_B.H[proc_control_node_B.H_tmp_i + 2] = 0.0;
    proc_control_node_B.H[6 * proc_control_node_B.b_i_e + 5] =
      proc_control_node_B.scale_m;
    proc_control_node_B.H[proc_control_node_B.H_tmp + 5] =
      -proc_control_node_B.scale_m * obj->pKalmanPeriod;
    proc_control_node_B.H[proc_control_node_B.H_tmp_h + 5] = 0.0;
    proc_control_node_B.H[proc_control_node_B.H_tmp_i + 5] =
      tmp_0[proc_control_node_B.aoffset];
  }

  for (proc_control_node_B.b_i_e = 0; proc_control_node_B.b_i_e < 6;
       proc_control_node_B.b_i_e++) {
    for (proc_control_node_B.aoffset = 0; proc_control_node_B.aoffset < 12;
         proc_control_node_B.aoffset++) {
      proc_control_node_B.H_tmp = 6 * proc_control_node_B.aoffset +
        proc_control_node_B.b_i_e;
      proc_control_node_B.K[proc_control_node_B.aoffset + 12 *
        proc_control_node_B.b_i_e] =
        proc_control_node_B.H[proc_control_node_B.H_tmp];
      proc_control_node_B.H_c[proc_control_node_B.H_tmp] = 0.0;
      for (proc_control_node_B.H_tmp_h = 0; proc_control_node_B.H_tmp_h < 12;
           proc_control_node_B.H_tmp_h++) {
        proc_control_node_B.H_c[proc_control_node_B.H_tmp] +=
          proc_control_node_B.H[6 * proc_control_node_B.H_tmp_h +
          proc_control_node_B.b_i_e] * obj->pQw[12 * proc_control_node_B.aoffset
          + proc_control_node_B.H_tmp_h];
      }
    }
  }

  for (proc_control_node_B.b_i_e = 0; proc_control_node_B.b_i_e < 6;
       proc_control_node_B.b_i_e++) {
    for (proc_control_node_B.aoffset = 0; proc_control_node_B.aoffset < 12;
         proc_control_node_B.aoffset++) {
      proc_control_node_B.H_tmp = proc_control_node_B.aoffset + 12 *
        proc_control_node_B.b_i_e;
      proc_control_node_B.obj_a[proc_control_node_B.H_tmp] = 0.0;
      for (proc_control_node_B.H_tmp_h = 0; proc_control_node_B.H_tmp_h < 12;
           proc_control_node_B.H_tmp_h++) {
        proc_control_node_B.obj_a[proc_control_node_B.H_tmp] += obj->pQw[12 *
          proc_control_node_B.H_tmp_h + proc_control_node_B.aoffset] *
          proc_control_node_B.K[12 * proc_control_node_B.b_i_e +
          proc_control_node_B.H_tmp_h];
      }
    }

    for (proc_control_node_B.aoffset = 0; proc_control_node_B.aoffset < 6;
         proc_control_node_B.aoffset++) {
      proc_control_node_B.scale_m = 0.0;
      for (proc_control_node_B.H_tmp_h = 0; proc_control_node_B.H_tmp_h < 12;
           proc_control_node_B.H_tmp_h++) {
        proc_control_node_B.scale_m += proc_control_node_B.H_c[6 *
          proc_control_node_B.H_tmp_h + proc_control_node_B.aoffset] *
          proc_control_node_B.K[12 * proc_control_node_B.b_i_e +
          proc_control_node_B.H_tmp_h];
      }

      proc_control_node_B.H_i[proc_control_node_B.b_i_e + 6 *
        proc_control_node_B.aoffset] = obj->pQv[6 * proc_control_node_B.b_i_e +
        proc_control_node_B.aoffset] + proc_control_node_B.scale_m;
    }
  }

  proc_control_node_mrdiv(proc_control_node_B.obj_a, proc_control_node_B.H_i,
    proc_control_node_B.K);
  proc_control_node_B.ze[0] = proc_control_node_B.gravityAccelGyroDiff[0];
  proc_control_node_B.ze[3] = magIn[0] - proc_control_node_B.offDiag[0];
  proc_control_node_B.ze[1] = proc_control_node_B.gravityAccelGyroDiff[1];
  proc_control_node_B.ze[4] = magIn[1] - proc_control_node_B.offDiag[1];
  proc_control_node_B.ze[2] = proc_control_node_B.gravityAccelGyroDiff[2];
  proc_control_node_B.ze[5] = magIn[2] - proc_control_node_B.offDiag[2];
  for (proc_control_node_B.b_i_e = 0; proc_control_node_B.b_i_e < 3;
       proc_control_node_B.b_i_e++) {
    proc_control_node_B.offDiag[proc_control_node_B.b_i_e] = 0.0;
    for (proc_control_node_B.aoffset = 0; proc_control_node_B.aoffset < 6;
         proc_control_node_B.aoffset++) {
      proc_control_node_B.offDiag[proc_control_node_B.b_i_e] +=
        proc_control_node_B.K[(12 * proc_control_node_B.aoffset +
        proc_control_node_B.b_i_e) + 9] *
        proc_control_node_B.ze[proc_control_node_B.aoffset];
    }
  }

  proc_control_node_B.scale_m = 3.3121686421112381E-170;
  proc_control_node_B.absxk_j = fabs(proc_control_node_B.offDiag[0]);
  if (proc_control_node_B.absxk_j > 3.3121686421112381E-170) {
    proc_control_node_B.linAccelErr_idx_1 = 1.0;
    proc_control_node_B.scale_m = proc_control_node_B.absxk_j;
  } else {
    proc_control_node_B.t_i = proc_control_node_B.absxk_j /
      3.3121686421112381E-170;
    proc_control_node_B.linAccelErr_idx_1 = proc_control_node_B.t_i *
      proc_control_node_B.t_i;
  }

  proc_control_node_B.absxk_j = fabs(proc_control_node_B.offDiag[1]);
  if (proc_control_node_B.absxk_j > proc_control_node_B.scale_m) {
    proc_control_node_B.t_i = proc_control_node_B.scale_m /
      proc_control_node_B.absxk_j;
    proc_control_node_B.linAccelErr_idx_1 =
      proc_control_node_B.linAccelErr_idx_1 * proc_control_node_B.t_i *
      proc_control_node_B.t_i + 1.0;
    proc_control_node_B.scale_m = proc_control_node_B.absxk_j;
  } else {
    proc_control_node_B.t_i = proc_control_node_B.absxk_j /
      proc_control_node_B.scale_m;
    proc_control_node_B.linAccelErr_idx_1 += proc_control_node_B.t_i *
      proc_control_node_B.t_i;
  }

  proc_control_node_B.absxk_j = fabs(proc_control_node_B.offDiag[2]);
  if (proc_control_node_B.absxk_j > proc_control_node_B.scale_m) {
    proc_control_node_B.t_i = proc_control_node_B.scale_m /
      proc_control_node_B.absxk_j;
    proc_control_node_B.linAccelErr_idx_1 =
      proc_control_node_B.linAccelErr_idx_1 * proc_control_node_B.t_i *
      proc_control_node_B.t_i + 1.0;
    proc_control_node_B.scale_m = proc_control_node_B.absxk_j;
  } else {
    proc_control_node_B.t_i = proc_control_node_B.absxk_j /
      proc_control_node_B.scale_m;
    proc_control_node_B.linAccelErr_idx_1 += proc_control_node_B.t_i *
      proc_control_node_B.t_i;
  }

  proc_control_node_B.linAccelErr_idx_1 = proc_control_node_B.scale_m * sqrt
    (proc_control_node_B.linAccelErr_idx_1);
  isJamming = (proc_control_node_B.linAccelErr_idx_1 *
               proc_control_node_B.linAccelErr_idx_1 >
               obj->ExpectedMagneticFieldStrength *
               obj->ExpectedMagneticFieldStrength * 4.0);
  if (isJamming) {
    for (proc_control_node_B.b_i_e = 0; proc_control_node_B.b_i_e < 9;
         proc_control_node_B.b_i_e++) {
      proc_control_node_B.h1[proc_control_node_B.b_i_e] =
        proc_control_node_B.K[proc_control_node_B.b_i_e + 24] *
        proc_control_node_B.gravityAccelGyroDiff[2] +
        (proc_control_node_B.K[proc_control_node_B.b_i_e + 12] *
         proc_control_node_B.gravityAccelGyroDiff[1] +
         proc_control_node_B.K[proc_control_node_B.b_i_e] *
         proc_control_node_B.gravityAccelGyroDiff[0]);
    }

    proc_control_node_B.gravityAccelGyroDiff[0] = proc_control_node_B.h1[0];
    proc_control_node_B.scale_m = proc_control_node_B.h1[3];
    proc_control_node_B.absxk_j = proc_control_node_B.h1[6];
    proc_control_node_B.gravityAccelGyroDiff[1] = proc_control_node_B.h1[1];
    proc_control_node_B.t_i = proc_control_node_B.h1[4];
    proc_control_node_B.linAccelErr_idx_1 = proc_control_node_B.h1[7];
    proc_control_node_B.gravityAccelGyroDiff[2] = proc_control_node_B.h1[2];
    proc_control_node_B.gyroOffsetErr_idx_2 = proc_control_node_B.h1[5];
    proc_control_node_B.linAccelErr_idx_2 = proc_control_node_B.h1[8];
  } else {
    for (proc_control_node_B.b_i_e = 0; proc_control_node_B.b_i_e < 12;
         proc_control_node_B.b_i_e++) {
      proc_control_node_B.xe_post[proc_control_node_B.b_i_e] = 0.0;
      for (proc_control_node_B.aoffset = 0; proc_control_node_B.aoffset < 6;
           proc_control_node_B.aoffset++) {
        proc_control_node_B.xe_post[proc_control_node_B.b_i_e] +=
          proc_control_node_B.K[12 * proc_control_node_B.aoffset +
          proc_control_node_B.b_i_e] *
          proc_control_node_B.ze[proc_control_node_B.aoffset];
      }
    }

    proc_control_node_B.gravityAccelGyroDiff[0] = proc_control_node_B.xe_post[0];
    proc_control_node_B.scale_m = proc_control_node_B.xe_post[3];
    proc_control_node_B.absxk_j = proc_control_node_B.xe_post[6];
    proc_control_node_B.gravityAccelGyroDiff[1] = proc_control_node_B.xe_post[1];
    proc_control_node_B.t_i = proc_control_node_B.xe_post[4];
    proc_control_node_B.linAccelErr_idx_1 = proc_control_node_B.xe_post[7];
    proc_control_node_B.gravityAccelGyroDiff[2] = proc_control_node_B.xe_post[2];
    proc_control_node_B.gyroOffsetErr_idx_2 = proc_control_node_B.xe_post[5];
    proc_control_node_B.linAccelErr_idx_2 = proc_control_node_B.xe_post[8];
  }

  proc_co_quaternion_quaternion_b(proc_control_node_B.gravityAccelGyroDiff,
    &proc_control_node_B.qerr_a, &proc_control_node_B.qerr_b,
    &proc_control_node_B.qerr_c, &proc_control_node_B.n_j);
  proc_control_node_B.x_a = obj->pOrientPrior.a;
  proc_control_node_B.x_b = obj->pOrientPrior.b;
  proc_control_node_B.x_c_l = obj->pOrientPrior.c;
  proc_control_node_B.x_d = obj->pOrientPrior.d;
  obj->pOrientPost.a = ((obj->pOrientPrior.a * proc_control_node_B.qerr_a -
    obj->pOrientPrior.b * -proc_control_node_B.qerr_b) - obj->pOrientPrior.c *
                        -proc_control_node_B.qerr_c) - obj->pOrientPrior.d *
    -proc_control_node_B.n_j;
  obj->pOrientPost.b = ((proc_control_node_B.x_a * -proc_control_node_B.qerr_b +
    proc_control_node_B.x_b * proc_control_node_B.qerr_a) +
                        proc_control_node_B.x_c_l * -proc_control_node_B.n_j) -
    proc_control_node_B.x_d * -proc_control_node_B.qerr_c;
  obj->pOrientPost.c = ((proc_control_node_B.x_a * -proc_control_node_B.qerr_c -
    proc_control_node_B.x_b * -proc_control_node_B.n_j) +
                        proc_control_node_B.x_c_l * proc_control_node_B.qerr_a)
    + proc_control_node_B.x_d * -proc_control_node_B.qerr_b;
  obj->pOrientPost.d = ((proc_control_node_B.x_a * -proc_control_node_B.n_j +
    proc_control_node_B.x_b * -proc_control_node_B.qerr_c) -
                        proc_control_node_B.x_c_l * -proc_control_node_B.qerr_b)
    + proc_control_node_B.x_d * proc_control_node_B.qerr_a;
  if (obj->pOrientPost.a < 0.0) {
    proc_control_node_B.qerr_a = obj->pOrientPost.b;
    proc_control_node_B.qerr_b = obj->pOrientPost.c;
    proc_control_node_B.qerr_c = obj->pOrientPost.d;
    obj->pOrientPost.a = -obj->pOrientPost.a;
    obj->pOrientPost.b = -proc_control_node_B.qerr_a;
    obj->pOrientPost.c = -proc_control_node_B.qerr_b;
    obj->pOrientPost.d = -proc_control_node_B.qerr_c;
  }

  proc_control_node_B.qerr_a = obj->pOrientPost.b;
  proc_control_node_B.qerr_b = obj->pOrientPost.c;
  proc_control_node_B.qerr_c = obj->pOrientPost.d;
  proc_control_node_B.n_j = sqrt(((obj->pOrientPost.a * obj->pOrientPost.a +
    obj->pOrientPost.b * obj->pOrientPost.b) + obj->pOrientPost.c *
    obj->pOrientPost.c) + obj->pOrientPost.d * obj->pOrientPost.d);
  obj->pOrientPost.a /= proc_control_node_B.n_j;
  obj->pOrientPost.b = proc_control_node_B.qerr_a / proc_control_node_B.n_j;
  obj->pOrientPost.c = proc_control_node_B.qerr_b / proc_control_node_B.n_j;
  obj->pOrientPost.d = proc_control_node_B.qerr_c / proc_control_node_B.n_j;
  proc_cont_quaternionBase_rotmat(obj->pOrientPost.a, obj->pOrientPost.b,
    obj->pOrientPost.c, obj->pOrientPost.d, proc_control_node_B.h1);
  obj->pGyroOffset[0] -= proc_control_node_B.scale_m;
  obj->pLinAccelPost[0] = obj->pLinAccelPrior[0] - proc_control_node_B.absxk_j;
  obj->pGyroOffset[1] -= proc_control_node_B.t_i;
  obj->pLinAccelPost[1] = obj->pLinAccelPrior[1] -
    proc_control_node_B.linAccelErr_idx_1;
  obj->pGyroOffset[2] -= proc_control_node_B.gyroOffsetErr_idx_2;
  obj->pLinAccelPost[2] = obj->pLinAccelPrior[2] -
    proc_control_node_B.linAccelErr_idx_2;
  if (!isJamming) {
    for (proc_control_node_B.b_i_e = 0; proc_control_node_B.b_i_e < 3;
         proc_control_node_B.b_i_e++) {
      proc_control_node_B.aoffset = proc_control_node_B.b_i_e * 3 - 1;
      proc_control_node_B.gravityAccelGyroDiff[proc_control_node_B.b_i_e] =
        (proc_control_node_B.h1[proc_control_node_B.aoffset + 1] *
         proc_control_node_B.offDiag[0] +
         proc_control_node_B.h1[proc_control_node_B.aoffset + 2] *
         proc_control_node_B.offDiag[1]) +
        proc_control_node_B.h1[proc_control_node_B.aoffset + 3] *
        proc_control_node_B.offDiag[2];
    }

    proc_control_node_B.scale_m = rt_atan2d_snf(obj->pMagVec[2] -
      proc_control_node_B.gravityAccelGyroDiff[2], obj->pMagVec[0] -
      proc_control_node_B.gravityAccelGyroDiff[0]);
    if (proc_control_node_B.scale_m < -1.5707963267948966) {
      proc_control_node_B.scale_m = -1.5707963267948966;
    }

    if (proc_control_node_B.scale_m > 1.5707963267948966) {
      proc_control_node_B.scale_m = 1.5707963267948966;
    }

    obj->pMagVec[0] = 0.0;
    obj->pMagVec[1] = 0.0;
    obj->pMagVec[2] = 0.0;
    obj->pMagVec[0] = cos(proc_control_node_B.scale_m);
    obj->pMagVec[2] = sin(proc_control_node_B.scale_m);
    obj->pMagVec[0] *= obj->ExpectedMagneticFieldStrength;
    obj->pMagVec[1] *= obj->ExpectedMagneticFieldStrength;
    obj->pMagVec[2] *= obj->ExpectedMagneticFieldStrength;
  }

  for (proc_control_node_B.b_i_e = 0; proc_control_node_B.b_i_e < 12;
       proc_control_node_B.b_i_e++) {
    for (proc_control_node_B.aoffset = 0; proc_control_node_B.aoffset < 6;
         proc_control_node_B.aoffset++) {
      proc_control_node_B.H_tmp = proc_control_node_B.aoffset + 6 *
        proc_control_node_B.b_i_e;
      proc_control_node_B.H_c[proc_control_node_B.H_tmp] = 0.0;
      for (proc_control_node_B.H_tmp_h = 0; proc_control_node_B.H_tmp_h < 12;
           proc_control_node_B.H_tmp_h++) {
        proc_control_node_B.H_c[proc_control_node_B.H_tmp] +=
          proc_control_node_B.H[6 * proc_control_node_B.H_tmp_h +
          proc_control_node_B.aoffset] * obj->pQw[12 * proc_control_node_B.b_i_e
          + proc_control_node_B.H_tmp_h];
      }
    }
  }

  for (proc_control_node_B.b_i_e = 0; proc_control_node_B.b_i_e < 12;
       proc_control_node_B.b_i_e++) {
    for (proc_control_node_B.aoffset = 0; proc_control_node_B.aoffset < 12;
         proc_control_node_B.aoffset++) {
      proc_control_node_B.scale_m = 0.0;
      for (proc_control_node_B.H_tmp_h = 0; proc_control_node_B.H_tmp_h < 6;
           proc_control_node_B.H_tmp_h++) {
        proc_control_node_B.scale_m += proc_control_node_B.K[12 *
          proc_control_node_B.H_tmp_h + proc_control_node_B.b_i_e] *
          proc_control_node_B.H_c[6 * proc_control_node_B.aoffset +
          proc_control_node_B.H_tmp_h];
      }

      proc_control_node_B.H_tmp = 12 * proc_control_node_B.aoffset +
        proc_control_node_B.b_i_e;
      proc_control_node_B.Ppost[proc_control_node_B.H_tmp] = obj->
        pQw[proc_control_node_B.H_tmp] - proc_control_node_B.scale_m;
    }
  }

  memset(&obj->pQw[0], 0, 144U * sizeof(real_T));
  proc_control_node_B.scale_m = obj->pKalmanPeriod * obj->pKalmanPeriod;
  proc_control_node_B.absxk_j = obj->GyroscopeDriftNoise + obj->GyroscopeNoise;
  obj->pQw[0] = (proc_control_node_B.Ppost[39] + proc_control_node_B.absxk_j) *
    proc_control_node_B.scale_m + proc_control_node_B.Ppost[0];
  obj->pQw[39] = proc_control_node_B.Ppost[39] + obj->GyroscopeDriftNoise;
  obj->pQw[13] = (proc_control_node_B.Ppost[52] + proc_control_node_B.absxk_j) *
    proc_control_node_B.scale_m + proc_control_node_B.Ppost[13];
  obj->pQw[52] = proc_control_node_B.Ppost[52] + obj->GyroscopeDriftNoise;
  obj->pQw[26] = (proc_control_node_B.Ppost[65] + proc_control_node_B.absxk_j) *
    proc_control_node_B.scale_m + proc_control_node_B.Ppost[26];
  obj->pQw[65] = proc_control_node_B.Ppost[65] + obj->GyroscopeDriftNoise;
  proc_control_node_B.offDiag[0] = -obj->pKalmanPeriod * obj->pQw[39];
  proc_control_node_B.offDiag[1] = -obj->pKalmanPeriod * obj->pQw[52];
  proc_control_node_B.offDiag[2] = -obj->pKalmanPeriod * obj->pQw[65];
  obj->pQw[3] = proc_control_node_B.offDiag[0];
  obj->pQw[16] = proc_control_node_B.offDiag[1];
  obj->pQw[29] = proc_control_node_B.offDiag[2];
  obj->pQw[36] = proc_control_node_B.offDiag[0];
  obj->pQw[49] = proc_control_node_B.offDiag[1];
  obj->pQw[62] = proc_control_node_B.offDiag[2];
  proc_control_node_B.scale_m = obj->LinearAccelerationDecayFactor *
    obj->LinearAccelerationDecayFactor;
  obj->pQw[78] = proc_control_node_B.scale_m * proc_control_node_B.Ppost[78] +
    obj->LinearAccelerationNoise;
  obj->pQw[91] = proc_control_node_B.scale_m * proc_control_node_B.Ppost[91] +
    obj->LinearAccelerationNoise;
  obj->pQw[104] = proc_control_node_B.scale_m * proc_control_node_B.Ppost[104] +
    obj->LinearAccelerationNoise;
  proc_control_node_B.scale_m = obj->MagneticDisturbanceDecayFactor *
    obj->MagneticDisturbanceDecayFactor;
  obj->pQw[117] = proc_control_node_B.scale_m * proc_control_node_B.Ppost[117] +
    obj->MagneticDisturbanceNoise;
  obj->pQw[130] = proc_control_node_B.scale_m * proc_control_node_B.Ppost[130] +
    obj->MagneticDisturbanceNoise;
  obj->pQw[143] = proc_control_node_B.scale_m * proc_control_node_B.Ppost[143] +
    obj->MagneticDisturbanceNoise;
  orientOut[0] = obj->pOrientPost.a;
  orientOut[1] = obj->pOrientPost.b;
  orientOut[2] = obj->pOrientPost.c;
  orientOut[3] = obj->pOrientPost.d;
}

real_T rt_urand_Upu32_Yd_f_pw_snf(uint32_T *u)
{
  uint32_T hi;
  uint32_T lo;

  // Uniform random number generator (random number between 0 and 1)

  // #define IA      16807                      magic multiplier = 7^5
  // #define IM      2147483647                 modulus = 2^31-1
  // #define IQ      127773                     IM div IA
  // #define IR      2836                       IM modulo IA
  // #define S       4.656612875245797e-10      reciprocal of 2^31-1
  // test = IA * (seed % IQ) - IR * (seed/IQ)
  // seed = test < 0 ? (test + IM) : test
  // return (seed*S)

  lo = *u % 127773U * 16807U;
  hi = *u / 127773U * 2836U;
  if (lo < hi) {
    *u = 2147483647U - (hi - lo);
  } else {
    *u = lo - hi;
  }

  return static_cast<real_T>(*u) * 4.6566128752457969E-10;
}

real_T rt_nrand_Upu32_Yd_f_pw_snf(uint32_T *u)
{
  real_T si;
  real_T sr;
  real_T y;

  // Normal (Gaussian) random number generator
  do {
    sr = 2.0 * rt_urand_Upu32_Yd_f_pw_snf(u) - 1.0;
    si = 2.0 * rt_urand_Upu32_Yd_f_pw_snf(u) - 1.0;
    si = sr * sr + si * si;
  } while (si > 1.0);

  y = sqrt(-2.0 * log(si) / si) * sr;
  return y;
}

static void pro_TrajectoryManager_setupImpl(TrajectoryManager_proc_contro_T
  *b_this)
{
  int32_T i;
  int32_T i_0;

  //  Perform one-time calculations, such as computing constants
  b_this->generationNumber = 0.0;
  b_this->dummy = 999.0;

  //  Chiffre NULL
  //  Vecteur pose NULL
  b_this->targetReachedCount = 0.0;

  //  Buffer trajectoire
  for (i = 0; i < 13; i++) {
    b_this->emptyArray[i] = b_this->dummy;
    for (i_0 = 0; i_0 < 6001; i_0++) {
      b_this->poseBuffer[i_0 + 6001 * i] = b_this->dummy;
    }
  }

  b_this->bufferCount = 0.0;
  b_this->done = false;
  b_this->init = 0.0;
}

static void proc_control_n_SystemCore_setup(fusion_simulink_imuSensor_pro_T *obj)
{
  h_fusion_internal_Acceleromet_T *obj_0;
  h_fusion_internal_GyroscopeSi_T *obj_1;
  h_fusion_internal_Magnetomete_T *obj_2;
  real_T val;
  real_T val_0;
  int32_T i;
  boolean_T flag;
  obj->isInitialized = 1;
  obj->pRefFrame = &obj->_pobj3;
  val = obj->AccelParamsMeasurementRange;
  val_0 = obj->AccelParamsResolution;
  proc_control_node_B.val_ad[0] = obj->AccelParamsConstantBias[0];
  proc_control_node_B.val_ad[1] = obj->AccelParamsConstantBias[1];
  proc_control_node_B.val_ad[2] = obj->AccelParamsConstantBias[2];
  proc_control_node_B.val_g[0] = obj->AccelParamsAxesMisalignment[0];
  proc_control_node_B.val_g[1] = obj->AccelParamsAxesMisalignment[1];
  proc_control_node_B.val_g[2] = obj->AccelParamsAxesMisalignment[2];
  proc_control_node_B.val_bp[0] = obj->AccelParamsNoiseDensity[0];
  proc_control_node_B.val_bp[1] = obj->AccelParamsNoiseDensity[1];
  proc_control_node_B.val_bp[2] = obj->AccelParamsNoiseDensity[2];
  proc_control_node_B.val_kn[0] = obj->AccelParamsBiasInstability[0];
  proc_control_node_B.val_kn[1] = obj->AccelParamsBiasInstability[1];
  proc_control_node_B.val_kn[2] = obj->AccelParamsBiasInstability[2];
  proc_control_node_B.val_ca[0] = obj->AccelParamsRandomWalk[0];
  proc_control_node_B.val_ca[1] = obj->AccelParamsRandomWalk[1];
  proc_control_node_B.val_ca[2] = obj->AccelParamsRandomWalk[2];
  proc_control_node_B.val_ji[0] = obj->AccelParamsTemperatureBias[0];
  proc_control_node_B.val_ji[1] = obj->AccelParamsTemperatureBias[1];
  proc_control_node_B.val_ji[2] = obj->AccelParamsTemperatureBias[2];
  proc_control_node_B.val_al[0] = obj->AccelParamsTemperatureScaleFactor[0];
  proc_control_node_B.val_al[1] = obj->AccelParamsTemperatureScaleFactor[1];
  proc_control_node_B.val_al[2] = obj->AccelParamsTemperatureScaleFactor[2];
  obj->_pobj2.isInitialized = 0;
  for (i = 0; i < 10; i++) {
    obj->_pobj2.tunablePropertyChanged[i] = false;
  }

  IMUSensorParameters_updateSyste(val, val_0, proc_control_node_B.val_ad,
    proc_control_node_B.val_g, proc_control_node_B.val_bp,
    proc_control_node_B.val_kn, proc_control_node_B.val_ca,
    proc_control_node_B.val_ji, proc_control_node_B.val_al, &obj->_pobj2);
  obj->pAccel = &obj->_pobj2;
  obj_0 = obj->pAccel;
  flag = (obj_0->isInitialized == 1);
  if (flag) {
    obj_0->TunablePropsChanged = true;
    obj_0->tunablePropertyChanged[9] = true;
  }

  obj->pAccel->Temperature = obj->Temperature;
  val = obj->GyroParamsMeasurementRange;
  val_0 = obj->GyroParamsResolution;
  proc_control_node_B.val_ad[0] = obj->GyroParamsConstantBias[0];
  proc_control_node_B.val_ad[1] = obj->GyroParamsConstantBias[1];
  proc_control_node_B.val_ad[2] = obj->GyroParamsConstantBias[2];
  proc_control_node_B.val_g[0] = obj->GyroParamsAxesMisalignment[0];
  proc_control_node_B.val_g[1] = obj->GyroParamsAxesMisalignment[1];
  proc_control_node_B.val_g[2] = obj->GyroParamsAxesMisalignment[2];
  proc_control_node_B.val_bp[0] = obj->GyroParamsNoiseDensity[0];
  proc_control_node_B.val_bp[1] = obj->GyroParamsNoiseDensity[1];
  proc_control_node_B.val_bp[2] = obj->GyroParamsNoiseDensity[2];
  proc_control_node_B.val_kn[0] = obj->GyroParamsBiasInstability[0];
  proc_control_node_B.val_kn[1] = obj->GyroParamsBiasInstability[1];
  proc_control_node_B.val_kn[2] = obj->GyroParamsBiasInstability[2];
  proc_control_node_B.val_ca[0] = obj->GyroParamsRandomWalk[0];
  proc_control_node_B.val_ca[1] = obj->GyroParamsRandomWalk[1];
  proc_control_node_B.val_ca[2] = obj->GyroParamsRandomWalk[2];
  proc_control_node_B.val_ji[0] = obj->GyroParamsTemperatureBias[0];
  proc_control_node_B.val_ji[1] = obj->GyroParamsTemperatureBias[1];
  proc_control_node_B.val_ji[2] = obj->GyroParamsTemperatureBias[2];
  proc_control_node_B.val_al[0] = obj->GyroParamsTemperatureScaleFactor[0];
  proc_control_node_B.val_al[1] = obj->GyroParamsTemperatureScaleFactor[1];
  proc_control_node_B.val_al[2] = obj->GyroParamsTemperatureScaleFactor[2];
  proc_control_node_B.val_dm[0] = obj->GyroParamsAccelerationBias[0];
  proc_control_node_B.val_dm[1] = obj->GyroParamsAccelerationBias[1];
  proc_control_node_B.val_dm[2] = obj->GyroParamsAccelerationBias[2];
  obj->_pobj1.isInitialized = 0;
  for (i = 0; i < 11; i++) {
    obj->_pobj1.tunablePropertyChanged[i] = false;
  }

  IMUSensorParameters_updateSys_b(val, val_0, proc_control_node_B.val_ad,
    proc_control_node_B.val_g, proc_control_node_B.val_bp,
    proc_control_node_B.val_kn, proc_control_node_B.val_ca,
    proc_control_node_B.val_ji, proc_control_node_B.val_al,
    proc_control_node_B.val_dm, &obj->_pobj1);
  obj->pGyro = &obj->_pobj1;
  obj_1 = obj->pGyro;
  flag = (obj_1->isInitialized == 1);
  if (flag) {
    obj_1->TunablePropsChanged = true;
    obj_1->tunablePropertyChanged[10] = true;
  }

  obj->pGyro->Temperature = obj->Temperature;
  val = obj->MagParamsMeasurementRange;
  val_0 = obj->MagParamsResolution;
  proc_control_node_B.val_ad[0] = obj->MagParamsConstantBias[0];
  proc_control_node_B.val_ad[1] = obj->MagParamsConstantBias[1];
  proc_control_node_B.val_ad[2] = obj->MagParamsConstantBias[2];
  proc_control_node_B.val_g[0] = obj->MagParamsAxesMisalignment[0];
  proc_control_node_B.val_g[1] = obj->MagParamsAxesMisalignment[1];
  proc_control_node_B.val_g[2] = obj->MagParamsAxesMisalignment[2];
  proc_control_node_B.val_bp[0] = obj->MagParamsNoiseDensity[0];
  proc_control_node_B.val_bp[1] = obj->MagParamsNoiseDensity[1];
  proc_control_node_B.val_bp[2] = obj->MagParamsNoiseDensity[2];
  proc_control_node_B.val_kn[0] = obj->MagParamsBiasInstability[0];
  proc_control_node_B.val_kn[1] = obj->MagParamsBiasInstability[1];
  proc_control_node_B.val_kn[2] = obj->MagParamsBiasInstability[2];
  proc_control_node_B.val_ca[0] = obj->MagParamsRandomWalk[0];
  proc_control_node_B.val_ca[1] = obj->MagParamsRandomWalk[1];
  proc_control_node_B.val_ca[2] = obj->MagParamsRandomWalk[2];
  proc_control_node_B.val_ji[0] = obj->MagParamsTemperatureBias[0];
  proc_control_node_B.val_ji[1] = obj->MagParamsTemperatureBias[1];
  proc_control_node_B.val_ji[2] = obj->MagParamsTemperatureBias[2];
  proc_control_node_B.val_al[0] = obj->MagParamsTemperatureScaleFactor[0];
  proc_control_node_B.val_al[1] = obj->MagParamsTemperatureScaleFactor[1];
  proc_control_node_B.val_al[2] = obj->MagParamsTemperatureScaleFactor[2];
  obj->_pobj0.isInitialized = 0;
  for (i = 0; i < 10; i++) {
    obj->_pobj0.tunablePropertyChanged[i] = false;
  }

  IMUSensorParameters_updateSy_b4(val, val_0, proc_control_node_B.val_ad,
    proc_control_node_B.val_g, proc_control_node_B.val_bp,
    proc_control_node_B.val_kn, proc_control_node_B.val_ca,
    proc_control_node_B.val_ji, proc_control_node_B.val_al, &obj->_pobj0);
  obj->pMag = &obj->_pobj0;
  obj_2 = obj->pMag;
  flag = (obj_2->isInitialized == 1);
  if (flag) {
    obj_2->TunablePropsChanged = true;
    obj_2->tunablePropertyChanged[9] = true;
  }

  obj->pMag->Temperature = obj->Temperature;
  obj->TunablePropsChanged = false;
}

static void proc_co_IMUSensorBase_resetImpl(fusion_simulink_imuSensor_pro_T *obj)
{
  h_fusion_internal_Acceleromet_T *obj_0;
  h_fusion_internal_GyroscopeSi_T *obj_1;
  h_fusion_internal_Magnetomete_T *obj_2;
  int32_T i;
  uint32_T r;
  boolean_T flag;
  for (i = 0; i < 625; i++) {
    obj->pStreamState[i] = 0U;
  }

  for (i = 0; i < 625; i++) {
    proc_control_node_B.b_state[i] = obj->pStreamState[i];
  }

  r = 67U;
  proc_control_node_B.b_state[0] = 67U;
  for (i = 0; i < 623; i++) {
    r = ((r >> 30U ^ r) * 1812433253U + i) + 1U;
    proc_control_node_B.b_state[i + 1] = r;
  }

  proc_control_node_B.b_state[624] = 624U;
  for (i = 0; i < 625; i++) {
    obj->pStreamState[i] = proc_control_node_B.b_state[i];
  }

  flag = (obj->isInitialized == 1);
  if (flag) {
    obj_0 = obj->pAccel;
    if (obj_0->isInitialized == 1) {
      obj_0->pBiasInstFilterStates[0] = 0.0;
      obj_0->pBiasInstFilterStates[1] = 0.0;
      obj_0->pBiasInstFilterStates[2] = 0.0;
      obj_0->pRandWalkFilterStates[0] = 0.0;
      obj_0->pRandWalkFilterStates[1] = 0.0;
      obj_0->pRandWalkFilterStates[2] = 0.0;
    }

    obj_1 = obj->pGyro;
    if (obj_1->isInitialized == 1) {
      obj_1->pBiasInstFilterStates[0] = 0.0;
      obj_1->pBiasInstFilterStates[1] = 0.0;
      obj_1->pBiasInstFilterStates[2] = 0.0;
      obj_1->pRandWalkFilterStates[0] = 0.0;
      obj_1->pRandWalkFilterStates[1] = 0.0;
      obj_1->pRandWalkFilterStates[2] = 0.0;
    }

    obj_2 = obj->pMag;
    if (obj_2->isInitialized == 1) {
      obj_2->pBiasInstFilterStates[0] = 0.0;
      obj_2->pBiasInstFilterStates[1] = 0.0;
      obj_2->pBiasInstFilterStates[2] = 0.0;
      obj_2->pRandWalkFilterStates[0] = 0.0;
      obj_2->pRandWalkFilterStates[1] = 0.0;
      obj_2->pRandWalkFilterStates[2] = 0.0;
    }
  }
}

static void proc_c_AHRSFilterBase_resetImpl(fusion_simulink_ahrsfilter_pr_T *obj)
{
  real_T accelMeasNoiseVar;
  real_T magMeasNoiseVar;
  int32_T i;
  int32_T tmp;
  int32_T tmp_0;
  static const int8_T tmp_1[9] = { 1, 0, 0, 0, 1, 0, 0, 0, 1 };

  static const real_T tmp_2[144] = { 6.0923483957341713E-6, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.0923483957341713E-6, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.0923483957341713E-6, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.6154354946677142E-5, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.6154354946677142E-5,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    7.6154354946677142E-5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0096236100000000012, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0096236100000000012, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0096236100000000012, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.6, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.6, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.6 };

  obj->pOrientPost.a = 1.0;
  obj->pOrientPost.b = 0.0;
  obj->pOrientPost.c = 0.0;
  obj->pOrientPost.d = 0.0;
  obj->pGyroOffset[0] = 0.0;
  obj->pMagVec[0] = 0.0;
  obj->pGyroOffset[1] = 0.0;
  obj->pMagVec[1] = 0.0;
  obj->pGyroOffset[2] = 0.0;
  obj->pMagVec[2] = 0.0;
  obj->pMagVec[0] = obj->ExpectedMagneticFieldStrength;
  magMeasNoiseVar = obj->pKalmanPeriod * obj->pKalmanPeriod *
    (obj->GyroscopeDriftNoise + obj->GyroscopeNoise);
  accelMeasNoiseVar = magMeasNoiseVar + (obj->AccelerometerNoise +
    obj->LinearAccelerationNoise);
  magMeasNoiseVar += obj->MagnetometerNoise + obj->MagneticDisturbanceNoise;
  memset(&obj->pQv[0], 0, 36U * sizeof(real_T));
  for (i = 0; i < 3; i++) {
    tmp = tmp_1[3 * i];
    obj->pQv[6 * i] = accelMeasNoiseVar * static_cast<real_T>(tmp);
    tmp_0 = 6 * (i + 3);
    obj->pQv[tmp_0 + 3] = magMeasNoiseVar * static_cast<real_T>(tmp);
    tmp = tmp_1[3 * i + 1];
    obj->pQv[6 * i + 1] = accelMeasNoiseVar * static_cast<real_T>(tmp);
    obj->pQv[tmp_0 + 4] = magMeasNoiseVar * static_cast<real_T>(tmp);
    tmp = tmp_1[3 * i + 2];
    obj->pQv[6 * i + 2] = accelMeasNoiseVar * static_cast<real_T>(tmp);
    obj->pQv[tmp_0 + 5] = magMeasNoiseVar * static_cast<real_T>(tmp);
  }

  memcpy(&obj->pQw[0], &tmp_2[0], 144U * sizeof(real_T));
  obj->pLinAccelPost[0] = 0.0;
  obj->pLinAccelPost[1] = 0.0;
  obj->pLinAccelPost[2] = 0.0;
  obj->pFirstTime = true;
}

// Model step function
void proc_control_node_step(void)
{
  if (rtmIsMajorTimeStep(proc_control_node_M)) {
    // set solver stop time
    rtsiSetSolverStopTime(&proc_control_node_M->solverInfo,
                          ((proc_control_node_M->Timing.clockTick0+1)*
      proc_control_node_M->Timing.stepSize0));
  }                                    // end MajorTimeStep

  // Update absolute time of base rate at minor time step
  if (rtmIsMinorTimeStep(proc_control_node_M)) {
    proc_control_node_M->Timing.t[0] = rtsiGetT(&proc_control_node_M->solverInfo);
  }

  {
    static const int8_T tmp[9] = { 1, 0, 0, 0, 1, 0, 0, 0, 1 };

    boolean_T exitg1;

    // Reset subsysRan breadcrumbs
    srClearBC(proc_control_node_DW.ModlePhysique_SubsysRanBC);

    // Reset subsysRan breadcrumbs
    srClearBC(proc_control_node_DW.Plotvalues_SubsysRanBC);

    // Reset subsysRan breadcrumbs
    srClearBC(proc_control_node_DW.EnabledSubsystem_SubsysRanBC_j);

    // Reset subsysRan breadcrumbs
    srClearBC(proc_control_node_DW.EnabledSubsystem_SubsysRanBC_o);

    // Reset subsysRan breadcrumbs
    srClearBC(proc_control_node_DW.ROSOutput_SubsysRanBC);

    // Reset subsysRan breadcrumbs
    srClearBC(proc_control_node_DW.SendTargetReached_SubsysRanBC);

    // Reset subsysRan breadcrumbs
    srClearBC(proc_control_node_DW.QuaternionNonlinearMPC_SubsysRa);

    // Reset subsysRan breadcrumbs
    srClearBC(proc_control_node_DW.JoyStickOpenLoop_SubsysRanBC);

    // Reset subsysRan breadcrumbs
    srClearBC(proc_control_node_DW.IDLE_SubsysRanBC);

    // Reset subsysRan breadcrumbs
    srClearBC(proc_control_node_DW.IfActionSubsystem_SubsysRanBC_b);

    // Reset subsysRan breadcrumbs
    srClearBC(proc_control_node_DW.IfActionSubsystem1_SubsysRanB_a);

    // Reset subsysRan breadcrumbs
    srClearBC(proc_control_node_DW.IfActionSubsystem2_SubsysRanB_g);

    // Reset subsysRan breadcrumbs
    srClearBC(proc_control_node_DW.EnabledSubsystem_SubsysRanBC_m);

    // Reset subsysRan breadcrumbs
    srClearBC(proc_control_node_DW.SubsystemManual_SubsysRanBC);

    // Reset subsysRan breadcrumbs
    srClearBC(proc_control_node_DW.EnabledSubsystem_SubsysRanBC_e);

    // Reset subsysRan breadcrumbs
    srClearBC(proc_control_node_DW.EnabledSubsystem_SubsysRanBC_g);

    // Reset subsysRan breadcrumbs
    srClearBC(proc_control_node_DW.EnabledSubsystem_SubsysRanBC_k);

    // Reset subsysRan breadcrumbs
    srClearBC(proc_control_node_DW.Subsystem1.Subsystem1_SubsysRanBC);

    // Reset subsysRan breadcrumbs
    srClearBC(proc_control_node_DW.Subsystem2_SubsysRanBC);

    // Reset subsysRan breadcrumbs
    srClearBC(proc_control_node_DW.SubsystemAuto_SubsysRanBC);

    // Reset subsysRan breadcrumbs
    srClearBC(proc_control_node_DW.Pretraitement_SubsysRanBC);

    // Reset subsysRan breadcrumbs
    srClearBC(proc_control_node_DW.EnabledSubsystem_SubsysRanBC_n);

    // Reset subsysRan breadcrumbs
    srClearBC(proc_control_node_DW.IfActionSubsystem_SubsysRanBC_h);

    // Reset subsysRan breadcrumbs
    srClearBC(proc_control_node_DW.IfActionSubsystem1_SubsysRanBC);

    // Reset subsysRan breadcrumbs
    srClearBC(proc_control_node_DW.IfActionSubsystem2_SubsysRanBC);

    // Reset subsysRan breadcrumbs
    srClearBC(proc_control_node_DW.EnabledSubsystem_SubsysRanBC_co);

    // Reset subsysRan breadcrumbs
    srClearBC(proc_control_node_DW.singleWptsTrajectory_SubsysRanB);

    // Reset subsysRan breadcrumbs
    srClearBC(proc_control_node_DW.IfActionSubsystem_SubsysRanBC);

    // Reset subsysRan breadcrumbs
    srClearBC(proc_control_node_DW.EnabledSubsystem_SubsysRanBC_l);

    // Reset subsysRan breadcrumbs
    srClearBC(proc_control_node_DW.EnabledSubsystem_SubsysRanBC_c);

    // Reset subsysRan breadcrumbs
    srClearBC(proc_control_node_DW.EnabledSubsystem_SubsysRanBC_b);

    // Reset subsysRan breadcrumbs
    srClearBC(proc_control_node_DW.EnabledSubsystem_SubsysRanBC);
    if (rtmIsMajorTimeStep(proc_control_node_M) &&
        proc_control_node_M->Timing.TaskCounters.TID[4] == 0) {
      // Outputs for Atomic SubSystem: '<S3>/Subscribe1'
      // MATLABSystem: '<S47>/SourceBlock' incorporates:
      //   Inport: '<S49>/In1'

      proc_control_node_B.SourceBlock_o1_m =
        Sub_proc_control_node_1050_6.getLatestMessage(&proc_control_node_B.msg_p);

      // Outputs for Enabled SubSystem: '<S47>/Enabled Subsystem' incorporates:
      //   EnablePort: '<S49>/Enable'

      if (proc_control_node_B.SourceBlock_o1_m) {
        proc_control_node_B.In1_h = proc_control_node_B.msg_p;
        srUpdateBC(proc_control_node_DW.EnabledSubsystem_SubsysRanBC_o);
      }

      // End of MATLABSystem: '<S47>/SourceBlock'
      // End of Outputs for SubSystem: '<S47>/Enabled Subsystem'
      // End of Outputs for SubSystem: '<S3>/Subscribe1'

      // MATLAB Function: '<S10>/MATLAB Function1' incorporates:
      //   Constant: '<S10>/Constant1'
      //   Delay: '<S10>/Delay'
      //   SignalConversion generated from: '<S3>/Bus Selector1'

      proc_control_node_B.y_g[0] = proc_control_node_B.In1_h.XVelBtm;
      if (proc_control_node_B.y_g[0] < -proc_control_node_P.Constant1_Value_p) {
        proc_control_node_B.y_g[0] = proc_control_node_DW.Delay_DSTATE[0];
      } else if (proc_control_node_B.y_g[0] >
                 proc_control_node_P.Constant1_Value_p) {
        proc_control_node_B.y_g[0] = proc_control_node_DW.Delay_DSTATE[0];
      }

      // Gain: '<S120>/1//2' incorporates:
      //   Constant: '<S10>/si y devant'

      proc_control_node_B.Product2_ks = proc_control_node_P.u2_Gain_k *
        proc_control_node_P.siydevant_Value[0];

      // Trigonometry: '<S120>/sincos'
      proc_control_node_B.sincos_o1[0] = sin(proc_control_node_B.Product2_ks);
      proc_control_node_B.TmpSignalConversionAtSFun_f[0] = cos
        (proc_control_node_B.Product2_ks);

      // MATLAB Function: '<S10>/MATLAB Function1' incorporates:
      //   Constant: '<S10>/Constant1'
      //   Delay: '<S10>/Delay'
      //   SignalConversion generated from: '<S3>/Bus Selector1'

      proc_control_node_B.y_g[1] = proc_control_node_B.In1_h.YVelBtm;
      if (proc_control_node_B.y_g[1] < -proc_control_node_P.Constant1_Value_p) {
        proc_control_node_B.y_g[1] = proc_control_node_DW.Delay_DSTATE[1];
      } else if (proc_control_node_B.y_g[1] >
                 proc_control_node_P.Constant1_Value_p) {
        proc_control_node_B.y_g[1] = proc_control_node_DW.Delay_DSTATE[1];
      }

      // Gain: '<S120>/1//2' incorporates:
      //   Constant: '<S10>/si y devant'

      proc_control_node_B.Product2_ks = proc_control_node_P.u2_Gain_k *
        proc_control_node_P.siydevant_Value[1];

      // Trigonometry: '<S120>/sincos'
      proc_control_node_B.sincos_o1[1] = sin(proc_control_node_B.Product2_ks);
      proc_control_node_B.TmpSignalConversionAtSFun_f[1] = cos
        (proc_control_node_B.Product2_ks);

      // MATLAB Function: '<S10>/MATLAB Function1' incorporates:
      //   Constant: '<S10>/Constant1'
      //   Delay: '<S10>/Delay'
      //   SignalConversion generated from: '<S3>/Bus Selector1'

      proc_control_node_B.y_g[2] = proc_control_node_B.In1_h.ZVelBtm;
      if (proc_control_node_B.y_g[2] < -proc_control_node_P.Constant1_Value_p) {
        proc_control_node_B.y_g[2] = proc_control_node_DW.Delay_DSTATE[2];
      } else if (proc_control_node_B.y_g[2] >
                 proc_control_node_P.Constant1_Value_p) {
        proc_control_node_B.y_g[2] = proc_control_node_DW.Delay_DSTATE[2];
      }

      // Gain: '<S120>/1//2' incorporates:
      //   Constant: '<S10>/si y devant'

      proc_control_node_B.Product2_ks = proc_control_node_P.u2_Gain_k *
        proc_control_node_P.siydevant_Value[2];

      // Trigonometry: '<S120>/sincos'
      proc_control_node_B.sincos_o1[2] = sin(proc_control_node_B.Product2_ks);
      proc_control_node_B.Product2_ks = cos(proc_control_node_B.Product2_ks);

      // Fcn: '<S120>/q1' incorporates:
      //   Fcn: '<S120>/q2'

      proc_control_node_B.Product3_na =
        proc_control_node_B.TmpSignalConversionAtSFun_f[0] *
        proc_control_node_B.sincos_o1[1];
      proc_control_node_B.t25 = proc_control_node_B.sincos_o1[0] *
        proc_control_node_B.TmpSignalConversionAtSFun_f[1];
      proc_control_node_B.Product1_a5 = proc_control_node_B.Product3_na *
        proc_control_node_B.sincos_o1[2] + proc_control_node_B.t25 *
        proc_control_node_B.Product2_ks;

      // Fcn: '<S120>/q0' incorporates:
      //   Fcn: '<S120>/q3'

      proc_control_node_B.Product1_dz =
        proc_control_node_B.TmpSignalConversionAtSFun_f[0] *
        proc_control_node_B.TmpSignalConversionAtSFun_f[1];
      proc_control_node_B.t12 = proc_control_node_B.sincos_o1[0] *
        proc_control_node_B.sincos_o1[1];
      proc_control_node_B.fcn2 = proc_control_node_B.Product1_dz *
        proc_control_node_B.Product2_ks - proc_control_node_B.t12 *
        proc_control_node_B.sincos_o1[2];

      // Fcn: '<S120>/q2'
      proc_control_node_B.Product3_na = proc_control_node_B.Product3_na *
        proc_control_node_B.Product2_ks - proc_control_node_B.t25 *
        proc_control_node_B.sincos_o1[2];

      // Fcn: '<S120>/q3'
      proc_control_node_B.Product2_ks = proc_control_node_B.Product1_dz *
        proc_control_node_B.sincos_o1[2] + proc_control_node_B.t12 *
        proc_control_node_B.Product2_ks;

      // Sqrt: '<S134>/sqrt' incorporates:
      //   Product: '<S135>/Product'
      //   Product: '<S135>/Product1'
      //   Product: '<S135>/Product2'
      //   Product: '<S135>/Product3'
      //   Sum: '<S135>/Sum'

      proc_control_node_B.Product1_dz = sqrt(((proc_control_node_B.fcn2 *
        proc_control_node_B.fcn2 + proc_control_node_B.Product1_a5 *
        proc_control_node_B.Product1_a5) + proc_control_node_B.Product3_na *
        proc_control_node_B.Product3_na) + proc_control_node_B.Product2_ks *
        proc_control_node_B.Product2_ks);

      // Product: '<S130>/Product1'
      proc_control_node_B.Product1_a5 /= proc_control_node_B.Product1_dz;

      // Product: '<S130>/Product3'
      proc_control_node_B.Product2_ks /= proc_control_node_B.Product1_dz;

      // Product: '<S130>/Product'
      proc_control_node_B.fcn2 /= proc_control_node_B.Product1_dz;

      // Product: '<S130>/Product2'
      proc_control_node_B.Product3_na /= proc_control_node_B.Product1_dz;

      // Product: '<S133>/Product6' incorporates:
      //   Product: '<S132>/Product6'

      proc_control_node_B.t29 = proc_control_node_B.Product1_a5 *
        proc_control_node_B.Product1_a5;

      // Product: '<S133>/Product2' incorporates:
      //   Product: '<S132>/Product2'

      proc_control_node_B.t65 = proc_control_node_B.fcn2 *
        proc_control_node_B.Product1_a5;

      // Product: '<S133>/Product3' incorporates:
      //   Product: '<S132>/Product3'

      proc_control_node_B.TransferFcn_a = proc_control_node_B.Product3_na *
        proc_control_node_B.Product2_ks;

      // Product: '<S133>/Product7' incorporates:
      //   Product: '<S131>/Product6'

      proc_control_node_B.Product1_dz = proc_control_node_B.Product3_na *
        proc_control_node_B.Product3_na;

      // Product: '<S133>/Product' incorporates:
      //   Product: '<S131>/Product3'

      proc_control_node_B.t12 = proc_control_node_B.Product1_a5 *
        proc_control_node_B.Product2_ks;

      // Product: '<S133>/Product1' incorporates:
      //   Product: '<S131>/Product2'

      proc_control_node_B.t25 = proc_control_node_B.fcn2 *
        proc_control_node_B.Product3_na;

      // Sum: '<S133>/Sum' incorporates:
      //   Constant: '<S133>/Constant'
      //   Gain: '<S133>/Gain'
      //   Gain: '<S133>/Gain1'
      //   Gain: '<S133>/Gain2'
      //   Product: '<S133>/Product'
      //   Product: '<S133>/Product1'
      //   Product: '<S133>/Product2'
      //   Product: '<S133>/Product3'
      //   Product: '<S133>/Product4'
      //   Product: '<S133>/Product5'
      //   Product: '<S133>/Product6'
      //   Product: '<S133>/Product7'
      //   Product: '<S133>/Product8'
      //   Sum: '<S133>/Sum1'
      //   Sum: '<S133>/Sum2'
      //   Sum: '<S133>/Sum3'

      proc_control_node_B.Sum = ((proc_control_node_B.t12 +
        proc_control_node_B.t25) * proc_control_node_P.Gain_Gain_a *
        proc_control_node_B.y_g[0] + (proc_control_node_B.TransferFcn_a -
        proc_control_node_B.t65) * proc_control_node_P.Gain1_Gain_c *
        proc_control_node_B.y_g[1]) + ((proc_control_node_P.Constant_Value_n5 -
        proc_control_node_B.t29) - proc_control_node_B.Product1_dz) *
        proc_control_node_P.Gain2_Gain_l * proc_control_node_B.y_g[2];

      // Product: '<S132>/Product7' incorporates:
      //   Product: '<S131>/Product7'

      proc_control_node_B.fcn3 = proc_control_node_B.Product2_ks *
        proc_control_node_B.Product2_ks;

      // Product: '<S132>/Product' incorporates:
      //   Product: '<S131>/Product'

      proc_control_node_B.Product3_na *= proc_control_node_B.Product1_a5;

      // Product: '<S132>/Product1' incorporates:
      //   Product: '<S131>/Product1'

      proc_control_node_B.Product2_ks *= proc_control_node_B.fcn2;

      // Sum: '<S132>/Sum' incorporates:
      //   Constant: '<S132>/Constant'
      //   Gain: '<S132>/Gain'
      //   Gain: '<S132>/Gain1'
      //   Gain: '<S132>/Gain2'
      //   Product: '<S132>/Product'
      //   Product: '<S132>/Product1'
      //   Product: '<S132>/Product4'
      //   Product: '<S132>/Product5'
      //   Product: '<S132>/Product7'
      //   Product: '<S132>/Product8'
      //   Sum: '<S132>/Sum1'
      //   Sum: '<S132>/Sum2'
      //   Sum: '<S132>/Sum3'

      proc_control_node_B.Sum_m = (((proc_control_node_P.Constant_Value_ja -
        proc_control_node_B.t29) - proc_control_node_B.fcn3) *
        proc_control_node_P.Gain2_Gain_b * proc_control_node_B.y_g[1] +
        (proc_control_node_B.Product3_na - proc_control_node_B.Product2_ks) *
        proc_control_node_P.Gain_Gain_i5 * proc_control_node_B.y_g[0]) +
        (proc_control_node_B.t65 + proc_control_node_B.TransferFcn_a) *
        proc_control_node_P.Gain1_Gain_m * proc_control_node_B.y_g[2];

      // Sum: '<S131>/Sum' incorporates:
      //   Constant: '<S131>/Constant'
      //   Gain: '<S131>/Gain'
      //   Gain: '<S131>/Gain1'
      //   Gain: '<S131>/Gain2'
      //   Product: '<S131>/Product4'
      //   Product: '<S131>/Product5'
      //   Product: '<S131>/Product8'
      //   Sum: '<S131>/Sum1'
      //   Sum: '<S131>/Sum2'
      //   Sum: '<S131>/Sum3'

      proc_control_node_B.Sum_i = (((proc_control_node_P.Constant_Value_pns -
        proc_control_node_B.Product1_dz) - proc_control_node_B.fcn3) *
        proc_control_node_P.Gain2_Gain_bx * proc_control_node_B.y_g[0] +
        (proc_control_node_B.Product3_na + proc_control_node_B.Product2_ks) *
        proc_control_node_P.Gain_Gain_b * proc_control_node_B.y_g[1]) +
        (proc_control_node_B.t12 - proc_control_node_B.t25) *
        proc_control_node_P.Gain1_Gain_p * proc_control_node_B.y_g[2];

      // Outputs for Atomic SubSystem: '<S3>/Subscribe'
      // MATLABSystem: '<S46>/SourceBlock' incorporates:
      //   Inport: '<S48>/In1'

      proc_control_node_B.SourceBlock_o1_cz =
        Sub_proc_control_node_1050_5.getLatestMessage(&proc_control_node_B.msg_c);

      // Outputs for Enabled SubSystem: '<S46>/Enabled Subsystem' incorporates:
      //   EnablePort: '<S48>/Enable'

      if (proc_control_node_B.SourceBlock_o1_cz) {
        proc_control_node_B.In1 = proc_control_node_B.msg_c;
        srUpdateBC(proc_control_node_DW.EnabledSubsystem_SubsysRanBC_j);
      }

      // End of MATLABSystem: '<S46>/SourceBlock'
      // End of Outputs for SubSystem: '<S46>/Enabled Subsystem'
      // End of Outputs for SubSystem: '<S3>/Subscribe'

      // MATLAB Function: '<S3>/Quaternion Normalise'
      proc_contro_QuaternionNormalise(proc_control_node_B.In1.Orientation.W,
        proc_control_node_B.In1.Orientation.X,
        proc_control_node_B.In1.Orientation.Y,
        proc_control_node_B.In1.Orientation.Z, proc_control_node_B.y_a);

      // Gain: '<S10>/Gain'
      proc_control_node_B.qW2S[0] = proc_control_node_P.Gain_Gain_g *
        proc_control_node_B.y_a[0];
      proc_control_node_B.qW2S[1] = proc_control_node_P.Gain_Gain_g *
        proc_control_node_B.y_a[1];
      proc_control_node_B.qW2S[2] = proc_control_node_P.Gain_Gain_g *
        proc_control_node_B.y_a[2];
      proc_control_node_B.qW2S[3] = proc_control_node_P.Gain_Gain_g *
        proc_control_node_B.y_a[3];

      // Sqrt: '<S128>/sqrt' incorporates:
      //   Product: '<S129>/Product'
      //   Product: '<S129>/Product1'
      //   Product: '<S129>/Product2'
      //   Product: '<S129>/Product3'
      //   Sum: '<S129>/Sum'

      proc_control_node_B.fcn2 = sqrt(((proc_control_node_B.qW2S[0] *
        proc_control_node_B.qW2S[0] + proc_control_node_B.qW2S[1] *
        proc_control_node_B.qW2S[1]) + proc_control_node_B.qW2S[2] *
        proc_control_node_B.qW2S[2]) + proc_control_node_B.qW2S[3] *
        proc_control_node_B.qW2S[3]);

      // Product: '<S124>/Product2'
      proc_control_node_B.Product1_a5 = proc_control_node_B.qW2S[2] /
        proc_control_node_B.fcn2;

      // Product: '<S124>/Product3'
      proc_control_node_B.Product1_dz = proc_control_node_B.qW2S[3] /
        proc_control_node_B.fcn2;

      // Product: '<S124>/Product1'
      proc_control_node_B.Product2_ks = proc_control_node_B.qW2S[1] /
        proc_control_node_B.fcn2;

      // Product: '<S124>/Product'
      proc_control_node_B.fcn2 = proc_control_node_B.qW2S[0] /
        proc_control_node_B.fcn2;

      // Product: '<S125>/Product7' incorporates:
      //   Product: '<S126>/Product7'

      proc_control_node_B.fcn3 = proc_control_node_B.Product1_dz *
        proc_control_node_B.Product1_dz;

      // Product: '<S125>/Product' incorporates:
      //   Product: '<S126>/Product'

      proc_control_node_B.t29 = proc_control_node_B.Product2_ks *
        proc_control_node_B.Product1_a5;

      // Product: '<S125>/Product1' incorporates:
      //   Product: '<S126>/Product1'

      proc_control_node_B.t65 = proc_control_node_B.fcn2 *
        proc_control_node_B.Product1_dz;

      // Product: '<S125>/Product3' incorporates:
      //   Product: '<S127>/Product'

      proc_control_node_B.Product3_na = proc_control_node_B.Product2_ks *
        proc_control_node_B.Product1_dz;

      // Product: '<S125>/Product2' incorporates:
      //   Product: '<S127>/Product1'

      proc_control_node_B.t12 = proc_control_node_B.fcn2 *
        proc_control_node_B.Product1_a5;

      // Product: '<S125>/Product6' incorporates:
      //   Product: '<S127>/Product7'

      proc_control_node_B.t25 = proc_control_node_B.Product1_a5 *
        proc_control_node_B.Product1_a5;

      // Sum: '<S125>/Sum' incorporates:
      //   Constant: '<S125>/Constant'
      //   Gain: '<S125>/Gain'
      //   Gain: '<S125>/Gain1'
      //   Gain: '<S125>/Gain2'
      //   Product: '<S125>/Product'
      //   Product: '<S125>/Product1'
      //   Product: '<S125>/Product2'
      //   Product: '<S125>/Product3'
      //   Product: '<S125>/Product4'
      //   Product: '<S125>/Product5'
      //   Product: '<S125>/Product6'
      //   Product: '<S125>/Product7'
      //   Product: '<S125>/Product8'
      //   Sum: '<S125>/Sum1'
      //   Sum: '<S125>/Sum2'
      //   Sum: '<S125>/Sum3'

      proc_control_node_B.Sum_a = (((proc_control_node_P.Constant_Value_er -
        proc_control_node_B.t25) - proc_control_node_B.fcn3) *
        proc_control_node_P.Gain2_Gain_a * proc_control_node_B.Sum_i +
        (proc_control_node_B.t29 + proc_control_node_B.t65) *
        proc_control_node_P.Gain_Gain_cg * proc_control_node_B.Sum_m) +
        (proc_control_node_B.Product3_na - proc_control_node_B.t12) *
        proc_control_node_P.Gain1_Gain_g * proc_control_node_B.Sum;

      // Product: '<S126>/Product3' incorporates:
      //   Product: '<S127>/Product3'

      proc_control_node_B.Product1_dz *= proc_control_node_B.Product1_a5;

      // Product: '<S126>/Product2' incorporates:
      //   Product: '<S127>/Product2'

      proc_control_node_B.fcn2 *= proc_control_node_B.Product2_ks;

      // Product: '<S126>/Product6' incorporates:
      //   Product: '<S127>/Product6'

      proc_control_node_B.Product2_ks *= proc_control_node_B.Product2_ks;

      // Sum: '<S126>/Sum' incorporates:
      //   Constant: '<S126>/Constant'
      //   Gain: '<S126>/Gain'
      //   Gain: '<S126>/Gain1'
      //   Gain: '<S126>/Gain2'
      //   Product: '<S126>/Product2'
      //   Product: '<S126>/Product3'
      //   Product: '<S126>/Product4'
      //   Product: '<S126>/Product5'
      //   Product: '<S126>/Product6'
      //   Product: '<S126>/Product8'
      //   Sum: '<S126>/Sum1'
      //   Sum: '<S126>/Sum2'
      //   Sum: '<S126>/Sum3'

      proc_control_node_B.Sum_g = (((proc_control_node_P.Constant_Value_or -
        proc_control_node_B.Product2_ks) - proc_control_node_B.fcn3) *
        proc_control_node_P.Gain2_Gain_f * proc_control_node_B.Sum_m +
        (proc_control_node_B.t29 - proc_control_node_B.t65) *
        proc_control_node_P.Gain_Gain_ca * proc_control_node_B.Sum_i) +
        (proc_control_node_B.fcn2 + proc_control_node_B.Product1_dz) *
        proc_control_node_P.Gain1_Gain_c1 * proc_control_node_B.Sum;

      // Sum: '<S127>/Sum' incorporates:
      //   Constant: '<S127>/Constant'
      //   Gain: '<S127>/Gain'
      //   Gain: '<S127>/Gain1'
      //   Gain: '<S127>/Gain2'
      //   Product: '<S127>/Product4'
      //   Product: '<S127>/Product5'
      //   Product: '<S127>/Product8'
      //   Sum: '<S127>/Sum1'
      //   Sum: '<S127>/Sum2'
      //   Sum: '<S127>/Sum3'

      proc_control_node_B.Sum_e = ((proc_control_node_B.Product3_na +
        proc_control_node_B.t12) * proc_control_node_P.Gain_Gain_n *
        proc_control_node_B.Sum_i + (proc_control_node_B.Product1_dz -
        proc_control_node_B.fcn2) * proc_control_node_P.Gain1_Gain_d *
        proc_control_node_B.Sum_m) + ((proc_control_node_P.Constant_Value_ao -
        proc_control_node_B.Product2_ks) - proc_control_node_B.t25) *
        proc_control_node_P.Gain2_Gain_g * proc_control_node_B.Sum;
    }

    if (rtmIsMajorTimeStep(proc_control_node_M) &&
        proc_control_node_M->Timing.TaskCounters.TID[5] == 0) {
      // Outputs for Atomic SubSystem: '<S12>/Subscribe'
      // MATLABSystem: '<S190>/SourceBlock' incorporates:
      //   Inport: '<S195>/In1'

      proc_control_node_B.SourceBlock_o1_g =
        Sub_proc_control_node_796.getLatestMessage
        (&proc_control_node_B.b_varargout_2_i);

      // Outputs for Enabled SubSystem: '<S190>/Enabled Subsystem' incorporates:
      //   EnablePort: '<S195>/Enable'

      if (proc_control_node_B.SourceBlock_o1_g) {
        proc_control_node_B.In1_k = proc_control_node_B.b_varargout_2_i;
        srUpdateBC(proc_control_node_DW.EnabledSubsystem_SubsysRanBC_l);
      }

      // End of Outputs for SubSystem: '<S190>/Enabled Subsystem'
      // End of Outputs for SubSystem: '<S12>/Subscribe'

      // Outputs for Atomic SubSystem: '<S12>/Subscribe3'
      // MATLABSystem: '<S193>/SourceBlock'
      proc_control_node_B.b_varargout_1_i =
        Sub_proc_control_node_1123.getLatestMessage
        (&proc_control_node_B.b_varargout_2_l);

      // Outputs for Enabled SubSystem: '<S193>/Enabled Subsystem' incorporates:
      //   EnablePort: '<S198>/Enable'

      if (proc_control_node_B.b_varargout_1_i) {
        srUpdateBC(proc_control_node_DW.EnabledSubsystem_SubsysRanBC);
      }

      // End of Outputs for SubSystem: '<S193>/Enabled Subsystem'

      // Outputs for Atomic SubSystem: '<S12>/Subscribe'
      // Logic: '<S12>/OR' incorporates:
      //   MATLABSystem: '<S190>/SourceBlock'
      //   MATLABSystem: '<S193>/SourceBlock'

      proc_control_node_B.OR = (proc_control_node_B.b_varargout_1_i ||
        proc_control_node_B.SourceBlock_o1_g);

      // End of Outputs for SubSystem: '<S12>/Subscribe'
      // End of Outputs for SubSystem: '<S12>/Subscribe3'
    }

    if (rtmIsMajorTimeStep(proc_control_node_M) &&
        proc_control_node_M->Timing.TaskCounters.TID[4] == 0) {
      // DiscreteIntegrator: '<S10>/Discrete-Time Integrator'
      if (proc_control_node_DW.DiscreteTimeIntegrator_IC_LOADI != 0) {
        proc_control_node_DW.DiscreteTimeIntegrator_DSTATE[0] =
          proc_control_node_B.In1_k.Position.X;
        proc_control_node_DW.DiscreteTimeIntegrator_DSTATE[1] =
          proc_control_node_B.In1_k.Position.Y;
        proc_control_node_DW.DiscreteTimeIntegrator_DSTATE[2] =
          proc_control_node_B.In1_k.Position.Z;
      }

      if (proc_control_node_B.OR &&
          (proc_control_node_DW.DiscreteTimeIntegrator_PrevRese <= 0)) {
        proc_control_node_DW.DiscreteTimeIntegrator_DSTATE[0] =
          proc_control_node_B.In1_k.Position.X;
        proc_control_node_DW.DiscreteTimeIntegrator_DSTATE[1] =
          proc_control_node_B.In1_k.Position.Y;
        proc_control_node_DW.DiscreteTimeIntegrator_DSTATE[2] =
          proc_control_node_B.In1_k.Position.Z;
      }

      // DiscreteIntegrator: '<S10>/Discrete-Time Integrator'
      proc_control_node_B.WorldPosition[0] =
        proc_control_node_P.DiscreteTimeIntegrator_gainva_a *
        proc_control_node_B.Sum_a +
        proc_control_node_DW.DiscreteTimeIntegrator_DSTATE[0];
      proc_control_node_B.WorldPosition[1] =
        proc_control_node_P.DiscreteTimeIntegrator_gainva_a *
        proc_control_node_B.Sum_g +
        proc_control_node_DW.DiscreteTimeIntegrator_DSTATE[1];
      proc_control_node_B.WorldPosition[2] =
        proc_control_node_P.DiscreteTimeIntegrator_gainva_a *
        proc_control_node_B.Sum_e +
        proc_control_node_DW.DiscreteTimeIntegrator_DSTATE[2];

      // Sqrt: '<S144>/sqrt' incorporates:
      //   Product: '<S145>/Product'
      //   Product: '<S145>/Product1'
      //   Product: '<S145>/Product2'
      //   Product: '<S145>/Product3'
      //   Sum: '<S145>/Sum'

      proc_control_node_B.fcn2 = sqrt(((proc_control_node_B.y_a[0] *
        proc_control_node_B.y_a[0] + proc_control_node_B.y_a[1] *
        proc_control_node_B.y_a[1]) + proc_control_node_B.y_a[2] *
        proc_control_node_B.y_a[2]) + proc_control_node_B.y_a[3] *
        proc_control_node_B.y_a[3]);

      // Product: '<S139>/Product'
      proc_control_node_B.Product1_a5 = proc_control_node_B.y_a[0] /
        proc_control_node_B.fcn2;

      // Product: '<S139>/Product1'
      proc_control_node_B.Product1_dz = proc_control_node_B.y_a[1] /
        proc_control_node_B.fcn2;

      // Product: '<S139>/Product2'
      proc_control_node_B.Product2_ks = proc_control_node_B.y_a[2] /
        proc_control_node_B.fcn2;

      // Product: '<S139>/Product3'
      proc_control_node_B.fcn2 = proc_control_node_B.y_a[3] /
        proc_control_node_B.fcn2;

      // Fcn: '<S136>/fcn1'
      proc_control_node_B.Product3_na = (proc_control_node_B.Product2_ks *
        proc_control_node_B.fcn2 - proc_control_node_B.Product1_a5 *
        proc_control_node_B.Product1_dz) * -2.0;

      // Fcn: '<S136>/fcn2' incorporates:
      //   Fcn: '<S136>/fcn5'

      proc_control_node_B.t12 = proc_control_node_B.Product1_a5 *
        proc_control_node_B.Product1_a5;
      proc_control_node_B.t25 = proc_control_node_B.fcn2 *
        proc_control_node_B.fcn2;

      // Trigonometry: '<S138>/Trigonometric Function1' incorporates:
      //   Fcn: '<S136>/fcn2'

      proc_control_node_B.TmpSignalConversionAtSFun_f[0] = rt_atan2d_snf
        (proc_control_node_B.Product3_na, ((proc_control_node_B.t12 -
           proc_control_node_B.Product1_dz * proc_control_node_B.Product1_dz) -
          proc_control_node_B.Product2_ks * proc_control_node_B.Product2_ks) +
         proc_control_node_B.t25);

      // Fcn: '<S136>/fcn3'
      proc_control_node_B.fcn3 = (proc_control_node_B.Product1_dz *
        proc_control_node_B.fcn2 + proc_control_node_B.Product1_a5 *
        proc_control_node_B.Product2_ks) * 2.0;

      // If: '<S140>/If' incorporates:
      //   Constant: '<S141>/Constant'
      //   Constant: '<S142>/Constant'
      //   Inport: '<S143>/In'

      if (rtmIsMajorTimeStep(proc_control_node_M)) {
        if (proc_control_node_B.fcn3 > 1.0) {
          proc_control_node_DW.If_ActiveSubsystem = 0;
        } else if (proc_control_node_B.fcn3 < -1.0) {
          proc_control_node_DW.If_ActiveSubsystem = 1;
        } else {
          proc_control_node_DW.If_ActiveSubsystem = 2;
        }
      }

      switch (proc_control_node_DW.If_ActiveSubsystem) {
       case 0:
        // Outputs for IfAction SubSystem: '<S140>/If Action Subsystem' incorporates:
        //   ActionPort: '<S141>/Action Port'

        proc_control_node_B.Product3_na = proc_control_node_P.Constant_Value_ms;
        if (rtmIsMajorTimeStep(proc_control_node_M)) {
          srUpdateBC(proc_control_node_DW.IfActionSubsystem_SubsysRanBC_b);
        }

        // End of Outputs for SubSystem: '<S140>/If Action Subsystem'
        break;

       case 1:
        // Outputs for IfAction SubSystem: '<S140>/If Action Subsystem1' incorporates:
        //   ActionPort: '<S142>/Action Port'

        proc_control_node_B.Product3_na = proc_control_node_P.Constant_Value_jf;
        if (rtmIsMajorTimeStep(proc_control_node_M)) {
          srUpdateBC(proc_control_node_DW.IfActionSubsystem1_SubsysRanB_a);
        }

        // End of Outputs for SubSystem: '<S140>/If Action Subsystem1'
        break;

       case 2:
        // Outputs for IfAction SubSystem: '<S140>/If Action Subsystem2' incorporates:
        //   ActionPort: '<S143>/Action Port'

        proc_control_node_B.Product3_na = proc_control_node_B.fcn3;
        if (rtmIsMajorTimeStep(proc_control_node_M)) {
          srUpdateBC(proc_control_node_DW.IfActionSubsystem2_SubsysRanB_g);
        }

        // End of Outputs for SubSystem: '<S140>/If Action Subsystem2'
        break;
      }

      // End of If: '<S140>/If'

      // Gain: '<S10>/Gain1' incorporates:
      //   SignalConversion generated from: '<S3>/Bus Selector3'

      proc_control_node_B.AngularRate[0] = proc_control_node_P.Gain1_Gain_pq *
        proc_control_node_B.In1.AngularVelocity.X;
      proc_control_node_B.AngularRate[1] = proc_control_node_P.Gain1_Gain_pq *
        proc_control_node_B.In1.AngularVelocity.Y;
      proc_control_node_B.AngularRate[2] = proc_control_node_P.Gain1_Gain_pq *
        proc_control_node_B.In1.AngularVelocity.Z;

      // SignalConversion generated from: '<S8>/First Order Hold' incorporates:
      //   Gain: '<S137>/Gain'
      //   Gain: '<S80>/Gain'
      //   Gain: '<S84>/Gain'

      proc_control_node_B.TmpSignalConversionAtFirstOrder[6] =
        proc_control_node_B.Sum_i;
      proc_control_node_B.TmpSignalConversionAtFirstOrder[7] =
        proc_control_node_B.Sum_m;
      proc_control_node_B.TmpSignalConversionAtFirstOrder[8] =
        proc_control_node_B.Sum;
      proc_control_node_B.TmpSignalConversionAtFirstOrder[0] =
        proc_control_node_B.WorldPosition[0];
      proc_control_node_B.TmpSignalConversionAtFirstOrder[3] =
        proc_control_node_P.Gain_Gain_bc *
        proc_control_node_B.TmpSignalConversionAtSFun_f[0];
      proc_control_node_B.TmpSignalConversionAtFirstOrder[9] =
        proc_control_node_P.Gain_Gain_n3 * proc_control_node_B.AngularRate[0] *
        proc_control_node_P.Gain_Gain_m;
      proc_control_node_B.TmpSignalConversionAtFirstOrder[1] =
        proc_control_node_B.WorldPosition[1];

      // Trigonometry: '<S138>/trigFcn'
      if (proc_control_node_B.Product3_na > 1.0) {
        proc_control_node_B.Product3_na = 1.0;
      } else if (proc_control_node_B.Product3_na < -1.0) {
        proc_control_node_B.Product3_na = -1.0;
      }

      // SignalConversion generated from: '<S8>/First Order Hold' incorporates:
      //   Fcn: '<S136>/fcn4'
      //   Fcn: '<S136>/fcn5'
      //   Gain: '<S137>/Gain'
      //   Gain: '<S80>/Gain'
      //   Gain: '<S84>/Gain'
      //   Trigonometry: '<S138>/Trigonometric Function3'
      //   Trigonometry: '<S138>/trigFcn'

      proc_control_node_B.TmpSignalConversionAtFirstOrder[4] =
        proc_control_node_P.Gain_Gain_bc * asin(proc_control_node_B.Product3_na);
      proc_control_node_B.TmpSignalConversionAtFirstOrder[10] =
        proc_control_node_P.Gain_Gain_n3 * proc_control_node_B.AngularRate[1] *
        proc_control_node_P.Gain_Gain_m;
      proc_control_node_B.TmpSignalConversionAtFirstOrder[2] =
        proc_control_node_B.WorldPosition[2];
      proc_control_node_B.TmpSignalConversionAtFirstOrder[5] = rt_atan2d_snf
        ((proc_control_node_B.Product1_dz * proc_control_node_B.Product2_ks -
          proc_control_node_B.Product1_a5 * proc_control_node_B.fcn2) * -2.0,
         ((proc_control_node_B.t12 + proc_control_node_B.Product1_dz *
           proc_control_node_B.Product1_dz) - proc_control_node_B.Product2_ks *
          proc_control_node_B.Product2_ks) - proc_control_node_B.t25) *
        proc_control_node_P.Gain_Gain_bc;
      proc_control_node_B.TmpSignalConversionAtFirstOrder[11] =
        proc_control_node_P.Gain_Gain_n3 * proc_control_node_B.AngularRate[2] *
        proc_control_node_P.Gain_Gain_m;
    }

    if (rtmIsMajorTimeStep(proc_control_node_M) &&
        proc_control_node_M->Timing.TaskCounters.TID[5] == 0) {
      // Outputs for Atomic SubSystem: '<S12>/Subscribe2'
      // MATLABSystem: '<S192>/SourceBlock' incorporates:
      //   Inport: '<S197>/In1'

      proc_control_node_B.SourceBlock_o1_j =
        Sub_proc_control_node_854.getLatestMessage
        (&proc_control_node_B.b_varargout_2_m);

      // Outputs for Enabled SubSystem: '<S192>/Enabled Subsystem' incorporates:
      //   EnablePort: '<S197>/Enable'

      if (proc_control_node_B.SourceBlock_o1_j) {
        proc_control_node_B.In1_g = proc_control_node_B.b_varargout_2_m;
        srUpdateBC(proc_control_node_DW.EnabledSubsystem_SubsysRanBC_b);
      }

      // End of MATLABSystem: '<S192>/SourceBlock'
      // End of Outputs for SubSystem: '<S192>/Enabled Subsystem'
      // End of Outputs for SubSystem: '<S12>/Subscribe2'

      // SignalConversion generated from: '<S12>/Bus Selector3'
      proc_control_node_B.Data = proc_control_node_B.In1_g.Data;
    }

    if (rtmIsMajorTimeStep(proc_control_node_M) &&
        proc_control_node_M->Timing.TaskCounters.TID[4] == 0) {
      // Sum: '<S123>/Sum' incorporates:
      //   Product: '<S123>/Product'
      //   Product: '<S123>/Product1'
      //   Product: '<S123>/Product2'
      //   Product: '<S123>/Product3'

      proc_control_node_B.Product1_a5 = ((proc_control_node_B.y_a[0] *
        proc_control_node_B.y_a[0] + proc_control_node_B.y_a[1] *
        proc_control_node_B.y_a[1]) + proc_control_node_B.y_a[2] *
        proc_control_node_B.y_a[2]) + proc_control_node_B.y_a[3] *
        proc_control_node_B.y_a[3];

      // Product: '<S117>/Divide3' incorporates:
      //   UnaryMinus: '<S122>/Unary Minus2'

      proc_control_node_B.Divide3 = -proc_control_node_B.y_a[3] /
        proc_control_node_B.Product1_a5;

      // Product: '<S117>/Divide2' incorporates:
      //   UnaryMinus: '<S122>/Unary Minus1'

      proc_control_node_B.Divide2 = -proc_control_node_B.y_a[2] /
        proc_control_node_B.Product1_a5;

      // Product: '<S117>/Divide1' incorporates:
      //   UnaryMinus: '<S122>/Unary Minus'

      proc_control_node_B.Divide1 = -proc_control_node_B.y_a[1] /
        proc_control_node_B.Product1_a5;

      // Product: '<S117>/Divide'
      proc_control_node_B.Divide = proc_control_node_B.y_a[0] /
        proc_control_node_B.Product1_a5;

      // DiscreteIntegrator: '<S10>/Discrete-Time Integrator1'
      if (proc_control_node_B.OR &&
          (proc_control_node_DW.DiscreteTimeIntegrator1_PrevRes <= 0)) {
        proc_control_node_DW.DiscreteTimeIntegrator1_DSTATE =
          proc_control_node_P.DiscreteTimeIntegrator1_IC;
      }

      // DiscreteIntegrator: '<S10>/Discrete-Time Integrator1'
      proc_control_node_B.BodyPosition =
        proc_control_node_P.DiscreteTimeIntegrator1_gainval * 0.0 +
        proc_control_node_DW.DiscreteTimeIntegrator1_DSTATE;
    }

    if (rtmIsMajorTimeStep(proc_control_node_M) &&
        proc_control_node_M->Timing.TaskCounters.TID[5] == 0) {
      // Logic: '<S12>/OR1'
      proc_control_node_B.OR1 = (proc_control_node_B.SourceBlock_o1_j ||
        proc_control_node_B.OR);
    }

    if (rtmIsMajorTimeStep(proc_control_node_M) &&
        proc_control_node_M->Timing.TaskCounters.TID[3] == 0) {
      // Gain: '<S152>/Gain'
      proc_control_node_B.TransferFcn_a = 2.0 * proc_control_node_P.zeta_l *
        (6.2831853071795862 * proc_control_node_P.wn_l);
      for (proc_control_node_B.i_n = 0; proc_control_node_B.i_n < 6;
           proc_control_node_B.i_n++) {
        // DiscreteIntegrator: '<S156>/Integrator' incorporates:
        //   Constant: '<S152>/Constant'
        //   Constant: '<S152>/Constant3'

        if ((proc_control_node_P.Constant_Value_ji != 0.0) ||
            (proc_control_node_DW.Integrator_PrevResetState != 0)) {
          proc_control_node_DW.Integrator_DSTATE[proc_control_node_B.i_n] =
            proc_control_node_P.Constant3_Value;
          if (proc_control_node_DW.Integrator_DSTATE[proc_control_node_B.i_n] >=
              proc_control_node_P.Integrator_UpperSat) {
            proc_control_node_DW.Integrator_DSTATE[proc_control_node_B.i_n] =
              proc_control_node_P.Integrator_UpperSat;
          } else if
              (proc_control_node_DW.Integrator_DSTATE[proc_control_node_B.i_n] <=
               proc_control_node_P.Integrator_LowerSat) {
            proc_control_node_DW.Integrator_DSTATE[proc_control_node_B.i_n] =
              proc_control_node_P.Integrator_LowerSat;
          }
        }

        if (proc_control_node_DW.Integrator_DSTATE[proc_control_node_B.i_n] >=
            proc_control_node_P.Integrator_UpperSat) {
          proc_control_node_DW.Integrator_DSTATE[proc_control_node_B.i_n] =
            proc_control_node_P.Integrator_UpperSat;
        } else if
            (proc_control_node_DW.Integrator_DSTATE[proc_control_node_B.i_n] <=
             proc_control_node_P.Integrator_LowerSat) {
          proc_control_node_DW.Integrator_DSTATE[proc_control_node_B.i_n] =
            proc_control_node_P.Integrator_LowerSat;
        }

        proc_control_node_B.Product2_ks =
          proc_control_node_DW.Integrator_DSTATE[proc_control_node_B.i_n];

        // End of DiscreteIntegrator: '<S156>/Integrator'

        // Saturate: '<S156>/Saturation'
        if (proc_control_node_B.Product2_ks >
            proc_control_node_P.Saturation_UpperSat) {
          proc_control_node_B.MultiportSwitch[proc_control_node_B.i_n] =
            proc_control_node_P.Saturation_UpperSat;
        } else if (proc_control_node_B.Product2_ks <
                   proc_control_node_P.Saturation_LowerSat) {
          proc_control_node_B.MultiportSwitch[proc_control_node_B.i_n] =
            proc_control_node_P.Saturation_LowerSat;
        } else {
          proc_control_node_B.MultiportSwitch[proc_control_node_B.i_n] =
            proc_control_node_B.Product2_ks;
        }

        // Gain: '<S152>/Gain3' incorporates:
        //   Saturate: '<S156>/Saturation'

        proc_control_node_B.MultiportSwitch[proc_control_node_B.i_n] *=
          proc_control_node_P.Gain3_Gain;

        // DiscreteIntegrator: '<S157>/Integrator' incorporates:
        //   Constant: '<S152>/Constant1'
        //   Constant: '<S152>/Constant2'

        if ((proc_control_node_P.Constant1_Value_pt != 0.0) ||
            (proc_control_node_DW.Integrator_PrevResetState_l != 0)) {
          proc_control_node_DW.Integrator_DSTATE_h[proc_control_node_B.i_n] =
            proc_control_node_P.Constant2_Value;
          if (proc_control_node_DW.Integrator_DSTATE_h[proc_control_node_B.i_n] >=
              proc_control_node_P.Integrator_UpperSat_p) {
            proc_control_node_DW.Integrator_DSTATE_h[proc_control_node_B.i_n] =
              proc_control_node_P.Integrator_UpperSat_p;
          } else if
              (proc_control_node_DW.Integrator_DSTATE_h[proc_control_node_B.i_n]
               <= proc_control_node_P.Integrator_LowerSat_j) {
            proc_control_node_DW.Integrator_DSTATE_h[proc_control_node_B.i_n] =
              proc_control_node_P.Integrator_LowerSat_j;
          }
        }

        if (proc_control_node_DW.Integrator_DSTATE_h[proc_control_node_B.i_n] >=
            proc_control_node_P.Integrator_UpperSat_p) {
          proc_control_node_DW.Integrator_DSTATE_h[proc_control_node_B.i_n] =
            proc_control_node_P.Integrator_UpperSat_p;
        } else if
            (proc_control_node_DW.Integrator_DSTATE_h[proc_control_node_B.i_n] <=
             proc_control_node_P.Integrator_LowerSat_j) {
          proc_control_node_DW.Integrator_DSTATE_h[proc_control_node_B.i_n] =
            proc_control_node_P.Integrator_LowerSat_j;
        }

        proc_control_node_B.Product2_ks =
          proc_control_node_DW.Integrator_DSTATE_h[proc_control_node_B.i_n];

        // End of DiscreteIntegrator: '<S157>/Integrator'

        // Saturate: '<S157>/Saturation'
        if (proc_control_node_B.Product2_ks >
            proc_control_node_P.Saturation_UpperSat_n) {
          // Saturate: '<S157>/Saturation'
          proc_control_node_B.Saturation_h[proc_control_node_B.i_n] =
            proc_control_node_P.Saturation_UpperSat_n;
        } else if (proc_control_node_B.Product2_ks <
                   proc_control_node_P.Saturation_LowerSat_p) {
          // Saturate: '<S157>/Saturation'
          proc_control_node_B.Saturation_h[proc_control_node_B.i_n] =
            proc_control_node_P.Saturation_LowerSat_p;
        } else {
          // Saturate: '<S157>/Saturation'
          proc_control_node_B.Saturation_h[proc_control_node_B.i_n] =
            proc_control_node_B.Product2_ks;
        }

        // End of Saturate: '<S157>/Saturation'

        // Gain: '<S152>/Gain'
        proc_control_node_B.Gain_o[proc_control_node_B.i_n] =
          proc_control_node_B.TransferFcn_a *
          proc_control_node_B.Saturation_h[proc_control_node_B.i_n];
      }

      // Outputs for Atomic SubSystem: '<S147>/Subscribe2'
      // MATLABSystem: '<S153>/SourceBlock' incorporates:
      //   Inport: '<S158>/In1'

      proc_control_node_B.b_varargout_1_i =
        Sub_proc_control_node_644_1122.getLatestMessage
        (&proc_control_node_B.b_varargout_2_k);

      // Outputs for Enabled SubSystem: '<S153>/Enabled Subsystem' incorporates:
      //   EnablePort: '<S158>/Enable'

      if (proc_control_node_B.b_varargout_1_i) {
        proc_control_node_B.In1_pv = proc_control_node_B.b_varargout_2_k;
        srUpdateBC(proc_control_node_DW.EnabledSubsystem_SubsysRanBC_m);
      }

      // End of MATLABSystem: '<S153>/SourceBlock'
      // End of Outputs for SubSystem: '<S153>/Enabled Subsystem'
      // End of Outputs for SubSystem: '<S147>/Subscribe2'

      // Sum: '<S152>/Sum' incorporates:
      //   Gain: '<S147>/Gain'

      proc_control_node_B.Sum_n[0] = (proc_control_node_B.In1_pv.Linear.X -
        proc_control_node_B.MultiportSwitch[0]) - proc_control_node_B.Gain_o[0];
      proc_control_node_B.Sum_n[1] = (proc_control_node_B.In1_pv.Linear.Y -
        proc_control_node_B.MultiportSwitch[1]) - proc_control_node_B.Gain_o[1];
      proc_control_node_B.Sum_n[2] = (proc_control_node_B.In1_pv.Linear.Z -
        proc_control_node_B.MultiportSwitch[2]) - proc_control_node_B.Gain_o[2];
      proc_control_node_B.Sum_n[3] = (proc_control_node_P.Gain_Gain_ib *
        proc_control_node_B.In1_pv.Angular.X -
        proc_control_node_B.MultiportSwitch[3]) - proc_control_node_B.Gain_o[3];
      proc_control_node_B.Sum_n[4] = (proc_control_node_P.Gain_Gain_ib *
        proc_control_node_B.In1_pv.Angular.Y -
        proc_control_node_B.MultiportSwitch[4]) - proc_control_node_B.Gain_o[4];
      proc_control_node_B.Sum_n[5] = (proc_control_node_P.Gain_Gain_ib *
        proc_control_node_B.In1_pv.Angular.Z -
        proc_control_node_B.MultiportSwitch[5]) - proc_control_node_B.Gain_o[5];

      // MultiPortSwitch: '<S152>/Multiport Switch' incorporates:
      //   Constant: '<S152>/Constant4'

      switch (static_cast<int32_T>
              (proc_control_node_P.SecondOrderFilter_FilterType)) {
       case 1:
        break;

       case 2:
        // MultiPortSwitch: '<S152>/Multiport Switch'
        for (proc_control_node_B.i_n = 0; proc_control_node_B.i_n < 6;
             proc_control_node_B.i_n++) {
          proc_control_node_B.MultiportSwitch[proc_control_node_B.i_n] =
            proc_control_node_B.Sum_n[proc_control_node_B.i_n];
        }
        break;

       case 3:
        // MultiPortSwitch: '<S152>/Multiport Switch'
        for (proc_control_node_B.i_n = 0; proc_control_node_B.i_n < 6;
             proc_control_node_B.i_n++) {
          proc_control_node_B.MultiportSwitch[proc_control_node_B.i_n] =
            proc_control_node_B.Gain_o[proc_control_node_B.i_n];
        }
        break;

       default:
        // MultiPortSwitch: '<S152>/Multiport Switch' incorporates:
        //   Sum: '<S152>/Sum1'

        for (proc_control_node_B.i_n = 0; proc_control_node_B.i_n < 6;
             proc_control_node_B.i_n++) {
          proc_control_node_B.MultiportSwitch[proc_control_node_B.i_n] +=
            proc_control_node_B.Sum_n[proc_control_node_B.i_n];
        }
        break;
      }

      // End of MultiPortSwitch: '<S152>/Multiport Switch'
    }

    if (rtmIsMajorTimeStep(proc_control_node_M) &&
        proc_control_node_M->Timing.TaskCounters.TID[5] == 0) {
      // SwitchCase: '<S11>/Switch Case' incorporates:
      //   Constant: '<S171>/Constant1'
      //   Delay: '<S174>/Delay'
      //   Inport: '<S165>/In1'
      //   Inport: '<S176>/In1'
      //   Logic: '<S150>/OR'
      //   MATLABSystem: '<S160>/SourceBlock'
      //   MATLABSystem: '<S161>/SourceBlock'
      //   MATLABSystem: '<S162>/SourceBlock'
      //   MATLABSystem: '<S172>/SourceBlock'

      if (rtmIsMajorTimeStep(proc_control_node_M)) {
        switch (proc_control_node_B.Data) {
         case 19:
         case 20:
         case 21:
          proc_control_node_DW.SwitchCase_ActiveSubsystem = 0;
          break;

         case 10:
          proc_control_node_DW.SwitchCase_ActiveSubsystem = 1;
          break;

         case 11:
          proc_control_node_DW.SwitchCase_ActiveSubsystem = 2;
          break;

         default:
          proc_control_node_DW.SwitchCase_ActiveSubsystem = 3;
          break;
        }
      }

      switch (proc_control_node_DW.SwitchCase_ActiveSubsystem) {
       case 0:
        // Outputs for IfAction SubSystem: '<S11>/SubsystemManual' incorporates:
        //   ActionPort: '<S149>/Action Port'

        // SignalConversion generated from: '<S149>/Transpose' incorporates:
        //   Constant: '<S149>/Constant7'

        for (proc_control_node_B.i_n = 0; proc_control_node_B.i_n < 7;
             proc_control_node_B.i_n++) {
          proc_control_node_B.TmpSignalConversionAtTran_h[proc_control_node_B.i_n]
            = proc_control_node_P.Constant7_Value[proc_control_node_B.i_n];
        }

        for (proc_control_node_B.i_n = 0; proc_control_node_B.i_n < 6;
             proc_control_node_B.i_n++) {
          proc_control_node_B.TmpSignalConversionAtTran_h[proc_control_node_B.i_n
            + 7] = proc_control_node_B.MultiportSwitch[proc_control_node_B.i_n];
        }

        // Merge: '<S11>/Merge' incorporates:
        //   MATLAB Function: '<S149>/MATLAB Function1'
        //   Math: '<S149>/Transpose'

        proc_control_no_MATLABFunction1
          (proc_control_node_B.TmpSignalConversionAtTran_h,
           proc_control_node_B.Quaternion,
           &proc_control_node_B.sf_MATLABFunction1_ly);
        if (rtmIsMajorTimeStep(proc_control_node_M)) {
          srUpdateBC(proc_control_node_DW.SubsystemManual_SubsysRanBC);
        }

        // End of Outputs for SubSystem: '<S11>/SubsystemManual'
        break;

       case 1:
        // Outputs for IfAction SubSystem: '<S11>/SubsystemAuto' incorporates:
        //   ActionPort: '<S148>/Action Port'

        // Outputs for Atomic SubSystem: '<S148>/Subscribe2'
        // MATLABSystem: '<S162>/SourceBlock'
        proc_control_node_B.b_varargout_1_i =
          Sub_proc_control_node_644_946.getLatestMessage
          (&proc_control_node_B.b_varargout_2_l);

        // Outputs for Enabled SubSystem: '<S162>/Enabled Subsystem' incorporates:
        //   EnablePort: '<S167>/Enable'

        if (proc_control_node_B.b_varargout_1_i) {
          srUpdateBC(proc_control_node_DW.EnabledSubsystem_SubsysRanBC_k);
        }

        // End of Outputs for SubSystem: '<S162>/Enabled Subsystem'
        // End of Outputs for SubSystem: '<S148>/Subscribe2'

        // Outputs for Atomic SubSystem: '<S148>/Subscribe'
        // MATLABSystem: '<S160>/SourceBlock' incorporates:
        //   MATLABSystem: '<S162>/SourceBlock'

        proc_control_node_B.SourceBlock_o1_j =
          Sub_proc_control_node_644_945.getLatestMessage
          (&proc_control_node_B.b_varargout_2_f);

        // Outputs for Enabled SubSystem: '<S160>/Enabled Subsystem' incorporates:
        //   EnablePort: '<S165>/Enable'

        if (proc_control_node_B.SourceBlock_o1_j) {
          proc_control_node_B.In1_ph = proc_control_node_B.b_varargout_2_f;
          srUpdateBC(proc_control_node_DW.EnabledSubsystem_SubsysRanBC_e);
        }

        // End of Outputs for SubSystem: '<S160>/Enabled Subsystem'

        // Outputs for Enabled SubSystem: '<S148>/Subsystem1'
        proc_control_node_Subsystem1(proc_control_node_B.SourceBlock_o1_j,
          &proc_control_node_B.In1_ph, proc_control_node_B.DataTypeConversion_p,
          proc_control_node_B.DataTypeConversion1_o,
          &proc_control_node_B.DataTypeConversion2_m,
          &proc_control_node_DW.Subsystem1);

        // End of Outputs for SubSystem: '<S148>/Subsystem1'
        // End of Outputs for SubSystem: '<S148>/Subscribe'

        // SignalConversion generated from: '<S148>/MATLAB System1' incorporates:
        //   Inport: '<S165>/In1'
        //   MATLABSystem: '<S160>/SourceBlock'

        for (proc_control_node_B.i_n = 0; proc_control_node_B.i_n < 6;
             proc_control_node_B.i_n++) {
          proc_control_node_B.TmpSignalConversionAtMATLAB[proc_control_node_B.i_n]
            = proc_control_node_B.DataTypeConversion_p[proc_control_node_B.i_n];
        }

        proc_control_node_B.TmpSignalConversionAtMATLAB[6] =
          proc_control_node_B.DataTypeConversion1_o[0];
        proc_control_node_B.TmpSignalConversionAtMATLAB[7] =
          proc_control_node_B.DataTypeConversion1_o[1];
        proc_control_node_B.TmpSignalConversionAtMATLAB[8] =
          proc_control_node_B.DataTypeConversion2_m;

        // MATLABSystem: '<S148>/MATLAB System1' incorporates:
        //   Delay: '<S148>/Delay'
        //   MATLAB Function: '<S148>/MATLAB Function'
        //   MATLABSystem: '<S160>/SourceBlock'
        //   MATLABSystem: '<S162>/SourceBlock'
        //   SignalConversion generated from: '<S159>/ SFunction '

        proc_control_node_B.dv18[0] = proc_control_node_B.WorldPosition[0];
        proc_control_node_B.dv18[1] = proc_control_node_B.WorldPosition[1];
        proc_control_node_B.dv18[2] = proc_control_node_B.WorldPosition[2];
        proc_control_node_B.dv18[3] = proc_control_node_B.Divide;
        proc_control_node_B.dv18[4] = proc_control_node_B.Divide1;
        proc_control_node_B.dv18[5] = proc_control_node_B.Divide2;
        proc_control_node_B.dv18[6] = proc_control_node_B.Divide3;

        // Outputs for Atomic SubSystem: '<S148>/Subscribe2'
        // Outputs for Atomic SubSystem: '<S148>/Subscribe'
        proc_control_n_AddPose_stepImpl(&proc_control_node_DW.obj_o,
          proc_control_node_DW.Delay_DSTATE_e,
          proc_control_node_B.b_varargout_1_i,
          proc_control_node_B.SourceBlock_o1_j,
          proc_control_node_B.TmpSignalConversionAtMATLAB,
          proc_control_node_B.dv18, proc_control_node_B.OR1,
          proc_control_node_B.b_varargout_1_k, &proc_control_node_B.Product2_ks);

        // End of Outputs for SubSystem: '<S148>/Subscribe'
        // End of Outputs for SubSystem: '<S148>/Subscribe2'

        // Outputs for Atomic SubSystem: '<S148>/Subscribe1'
        // MATLABSystem: '<S161>/SourceBlock'
        proc_control_node_DW.Delay_DSTATE_e =
          Sub_proc_control_node_644_944.getLatestMessage
          (&proc_control_node_B.b_varargout_2_l);

        // Outputs for Enabled SubSystem: '<S161>/Enabled Subsystem' incorporates:
        //   EnablePort: '<S166>/Enable'

        if (proc_control_node_DW.Delay_DSTATE_e) {
          srUpdateBC(proc_control_node_DW.EnabledSubsystem_SubsysRanBC_g);
        }

        // End of Outputs for SubSystem: '<S161>/Enabled Subsystem'

        // Outputs for Triggered SubSystem: '<S148>/Subsystem2' incorporates:
        //   TriggerPort: '<S164>/Trigger'

        if (proc_control_node_DW.Delay_DSTATE_e &&
            (proc_control_node_PrevZCX.Subsystem2_Trig_ZCE != 1)) {
          // MATLABSystem: '<S164>/MATLAB System2' incorporates:
          //   MATLABSystem: '<S148>/MATLAB System1'

          proc_control_node_B.OR1 = false;
          proc_control_node_B.SourceBlock_o1_j = true;
          proc_control_node_B.i_n = 0;
          exitg1 = false;
          while ((!exitg1) && (proc_control_node_B.i_n < 7)) {
            if (!(proc_control_node_DW.obj_ce.avanceRapide[proc_control_node_B.i_n]
                  ==
                  proc_control_node_P.MATLABSystem2_avanceRapide[proc_control_node_B.i_n]))
            {
              proc_control_node_B.SourceBlock_o1_j = false;
              exitg1 = true;
            } else {
              proc_control_node_B.i_n++;
            }
          }

          if (proc_control_node_B.SourceBlock_o1_j) {
            proc_control_node_B.OR1 = true;
          }

          if (!proc_control_node_B.OR1) {
            for (proc_control_node_B.i_n = 0; proc_control_node_B.i_n < 7;
                 proc_control_node_B.i_n++) {
              proc_control_node_DW.obj_ce.avanceRapide[proc_control_node_B.i_n] =
                proc_control_node_P.MATLABSystem2_avanceRapide[proc_control_node_B.i_n];
            }
          }

          proc_control_node_B.OR1 = false;
          proc_control_node_B.SourceBlock_o1_j = true;
          proc_control_node_B.i_n = 0;
          exitg1 = false;
          while ((!exitg1) && (proc_control_node_B.i_n < 7)) {
            if (!(proc_control_node_DW.obj_ce.avancePrecision[proc_control_node_B.i_n]
                  ==
                  proc_control_node_P.MATLABSystem2_avancePrecision[proc_control_node_B.i_n]))
            {
              proc_control_node_B.SourceBlock_o1_j = false;
              exitg1 = true;
            } else {
              proc_control_node_B.i_n++;
            }
          }

          if (proc_control_node_B.SourceBlock_o1_j) {
            proc_control_node_B.OR1 = true;
          }

          if (!proc_control_node_B.OR1) {
            for (proc_control_node_B.i_n = 0; proc_control_node_B.i_n < 7;
                 proc_control_node_B.i_n++) {
              proc_control_node_DW.obj_ce.avancePrecision[proc_control_node_B.i_n]
                =
                proc_control_node_P.MATLABSystem2_avancePrecision[proc_control_node_B.i_n];
            }
          }

          proc_control_node_B.OR1 = false;
          proc_control_node_B.SourceBlock_o1_j = true;
          proc_control_node_B.i_n = 0;
          exitg1 = false;
          while ((!exitg1) && (proc_control_node_B.i_n < 7)) {
            if (!(proc_control_node_DW.obj_ce.accRapide[proc_control_node_B.i_n]
                  ==
                  proc_control_node_P.MATLABSystem2_accRapide[proc_control_node_B.i_n]))
            {
              proc_control_node_B.SourceBlock_o1_j = false;
              exitg1 = true;
            } else {
              proc_control_node_B.i_n++;
            }
          }

          if (proc_control_node_B.SourceBlock_o1_j) {
            proc_control_node_B.OR1 = true;
          }

          if (!proc_control_node_B.OR1) {
            for (proc_control_node_B.i_n = 0; proc_control_node_B.i_n < 7;
                 proc_control_node_B.i_n++) {
              proc_control_node_DW.obj_ce.accRapide[proc_control_node_B.i_n] =
                proc_control_node_P.MATLABSystem2_accRapide[proc_control_node_B.i_n];
            }
          }

          if (proc_control_node_DW.obj_ce.accPrecision !=
              proc_control_node_P.MATLABSystem2_accPrecision) {
            proc_control_node_DW.obj_ce.accPrecision =
              proc_control_node_P.MATLABSystem2_accPrecision;
          }

          if (proc_control_node_DW.obj_ce.Ts !=
              proc_control_node_P.MATLABSystem2_Ts) {
            proc_control_node_DW.obj_ce.Ts =
              proc_control_node_P.MATLABSystem2_Ts;
          }

          proc_contro_SystemCore_step_b4n(&proc_control_node_DW.obj_ce,
            proc_control_node_B.b_varargout_1_k, proc_control_node_B.Product2_ks,
            proc_control_node_B.b_varargout_1,
            proc_control_node_B.b_varargout_2_fb);

          // End of MATLABSystem: '<S164>/MATLAB System2'
          proc_control_node_DW.Subsystem2_SubsysRanBC = 4;
        }

        proc_control_node_PrevZCX.Subsystem2_Trig_ZCE =
          proc_control_node_DW.Delay_DSTATE_e;

        // End of Outputs for SubSystem: '<S148>/Subsystem2'
        // End of Outputs for SubSystem: '<S148>/Subscribe1'
        // Merge: '<S11>/Merge' incorporates:
        //   SignalConversion generated from: '<S148>/Reference'

        memset(&proc_control_node_B.Quaternion[0], 0, 52U * sizeof(real_T));

        // Merge: '<S11>/Merge1' incorporates:
        //   SignalConversion generated from: '<S148>/isReached'

        proc_control_node_B.Merge1 = false;
        if (rtmIsMajorTimeStep(proc_control_node_M)) {
          srUpdateBC(proc_control_node_DW.SubsystemAuto_SubsysRanBC);
        }

        // End of Outputs for SubSystem: '<S11>/SubsystemAuto'
        break;

       case 2:
        // Outputs for IfAction SubSystem: '<S11>/singleWpts Trajectory' incorporates:
        //   ActionPort: '<S150>/Action Port'

        // Outputs for Enabled SubSystem: '<S174>/Enabled Subsystem' incorporates:
        //   EnablePort: '<S177>/Enable'

        if (proc_control_node_DW.Delay_DSTATE_j > 0.0) {
          // Math: '<S177>/Transpose' incorporates:
          //   SignalConversion generated from: '<S177>/Transpose'

          proc_control_node_B.Transpose[0] = proc_control_node_B.WorldPosition[0];
          proc_control_node_B.Transpose[1] = proc_control_node_B.WorldPosition[1];
          proc_control_node_B.Transpose[2] = proc_control_node_B.WorldPosition[2];
          proc_control_node_B.Transpose[3] = proc_control_node_B.Divide;
          proc_control_node_B.Transpose[4] = proc_control_node_B.Divide1;
          proc_control_node_B.Transpose[5] = proc_control_node_B.Divide2;
          proc_control_node_B.Transpose[6] = proc_control_node_B.Divide3;

          // Update for IfAction SubSystem: '<S182>/If Action Subsystem2' incorporates:
          //   ActionPort: '<S185>/Action Port'

          // Update for If: '<S182>/If'
          srUpdateBC(proc_control_node_DW.IfActionSubsystem2_SubsysRanBC);

          // End of Update for SubSystem: '<S182>/If Action Subsystem2'
          srUpdateBC(proc_control_node_DW.EnabledSubsystem_SubsysRanBC_co);
        }

        // End of Outputs for SubSystem: '<S174>/Enabled Subsystem'

        // Outputs for Atomic SubSystem: '<S150>/Subscribe'
        // MATLABSystem: '<S172>/SourceBlock' incorporates:
        //   Delay: '<S174>/Delay'

        proc_control_node_B.b_varargout_1_i =
          Sub_proc_control_node_644_1168.getLatestMessage
          (&proc_control_node_B.b_varargout_2_f);

        // Outputs for Enabled SubSystem: '<S172>/Enabled Subsystem' incorporates:
        //   EnablePort: '<S176>/Enable'

        if (proc_control_node_B.b_varargout_1_i) {
          proc_control_node_B.In1_p = proc_control_node_B.b_varargout_2_f;
          srUpdateBC(proc_control_node_DW.EnabledSubsystem_SubsysRanBC_n);
        }

        // End of Outputs for SubSystem: '<S172>/Enabled Subsystem'

        // Outputs for Enabled SubSystem: '<S150>/Subsystem1'
        proc_control_node_Subsystem1(proc_control_node_B.b_varargout_1_i,
          &proc_control_node_B.In1_p, proc_control_node_B.DataTypeConversion,
          proc_control_node_B.DataTypeConversion1_l,
          &proc_control_node_B.DataTypeConversion2,
          &proc_control_node_DW.Subsystem1_e);

        // End of Outputs for SubSystem: '<S150>/Subsystem1'
        // End of Outputs for SubSystem: '<S150>/Subscribe'

        // SignalConversion generated from: '<S150>/MATLAB System1' incorporates:
        //   Inport: '<S176>/In1'
        //   MATLABSystem: '<S172>/SourceBlock'

        for (proc_control_node_B.i_n = 0; proc_control_node_B.i_n < 6;
             proc_control_node_B.i_n++) {
          proc_control_node_B.TmpSignalConversionAtMATLAB[proc_control_node_B.i_n]
            = proc_control_node_B.DataTypeConversion[proc_control_node_B.i_n];
        }

        proc_control_node_B.TmpSignalConversionAtMATLAB[6] =
          proc_control_node_B.DataTypeConversion1_l[0];
        proc_control_node_B.TmpSignalConversionAtMATLAB[7] =
          proc_control_node_B.DataTypeConversion1_l[1];
        proc_control_node_B.TmpSignalConversionAtMATLAB[8] =
          proc_control_node_B.DataTypeConversion2;

        // MATLABSystem: '<S150>/MATLAB System1' incorporates:
        //   Constant: '<S150>/Constant'
        //   Delay: '<S150>/Delay1'
        //   MATLABSystem: '<S172>/SourceBlock'
        //   Math: '<S177>/Transpose'
        //   SignalConversion generated from: '<S150>/MATLAB System1'

        //  Main appeller à chaque exécution
        //  Suppression du buffer.
        //  ======================================================================== 
        //  Sous Routines
        // ==========================================================================         
        //  Fonction qui interprete les message ROS
        if (proc_control_node_P.Constant_Value_ct == 1.0) {
          //  supprimer le buffer de way points
          for (proc_control_node_B.i_n = 0; proc_control_node_B.i_n < 8;
               proc_control_node_B.i_n++) {
            proc_control_node_DW.obj_or.poseList[(proc_control_node_B.i_n << 1)
              + 1] = 999.0;
          }

          proc_control_node_DW.obj_or.i = 2.0;
        }

        // Outputs for Atomic SubSystem: '<S150>/Subscribe'
        //  Ajout d'un waypoint provenant de ROS.
        if (proc_control_node_B.b_varargout_1_i &&
            (proc_control_node_DW.obj_or.i <= 2.0)) {
          // this.poseList(this.i-1,:) = this.processWpt(waypoint.').';
          //  Fonction qui interprete les waypoints reçu par ROS
          //  Determiner le quaternion en fonction des angles d'euler.
          //  Orde de rotation : ZYX.
          //  Reel
          proc_control_node_B.twpt[7] =
            proc_control_node_B.DataTypeConversion1_l[1];

          //  Pre calculs
          proc_control_node_B.Product2_ks = 0.017453292519943295 *
            proc_control_node_B.TmpSignalConversionAtMATLAB[3] / 2.0;
          proc_control_node_B.u2[0] = proc_control_node_B.Product2_ks;
          proc_control_node_B.TmpSignalConversionAtSFun_f[0] =
            proc_control_node_B.Product2_ks;
          proc_control_node_B.Product2_ks = 0.017453292519943295 *
            proc_control_node_B.TmpSignalConversionAtMATLAB[4] / 2.0;
          proc_control_node_B.u2[1] = proc_control_node_B.Product2_ks;
          proc_control_node_B.TmpSignalConversionAtSFun_f[1] =
            proc_control_node_B.Product2_ks;
          proc_control_node_B.Product2_ks = 0.017453292519943295 *
            proc_control_node_B.TmpSignalConversionAtMATLAB[5] / 2.0;
          proc_control_node_B.u2[0] = cos(proc_control_node_B.u2[0]);
          proc_control_node_B.TmpSignalConversionAtSFun_f[0] = sin
            (proc_control_node_B.TmpSignalConversionAtSFun_f[0]);
          proc_control_node_B.u2[1] = cos(proc_control_node_B.u2[1]);
          proc_control_node_B.TmpSignalConversionAtSFun_f[1] = sin
            (proc_control_node_B.TmpSignalConversionAtSFun_f[1]);
          proc_control_node_B.u2[2] = cos(proc_control_node_B.Product2_ks);
          proc_control_node_B.TmpSignalConversionAtSFun_f[2] = sin
            (proc_control_node_B.Product2_ks);
          proc_control_node_B.Product2_ks = proc_control_node_B.u2[0] *
            proc_control_node_B.u2[1];
          proc_control_node_B.Product3_na =
            proc_control_node_B.TmpSignalConversionAtSFun_f[0] *
            proc_control_node_B.TmpSignalConversionAtSFun_f[1];
          proc_control_node_B.q_m[0] = proc_control_node_B.Product2_ks *
            proc_control_node_B.u2[2] + proc_control_node_B.Product3_na *
            proc_control_node_B.TmpSignalConversionAtSFun_f[2];
          proc_control_node_B.q_m[1] = proc_control_node_B.Product2_ks *
            proc_control_node_B.TmpSignalConversionAtSFun_f[2] -
            proc_control_node_B.Product3_na * proc_control_node_B.u2[2];
          proc_control_node_B.Product2_ks =
            proc_control_node_B.TmpSignalConversionAtSFun_f[0] *
            proc_control_node_B.u2[1];
          proc_control_node_B.Product3_na = proc_control_node_B.u2[0] *
            proc_control_node_B.TmpSignalConversionAtSFun_f[1];
          proc_control_node_B.q_m[2] = proc_control_node_B.Product3_na *
            proc_control_node_B.u2[2] + proc_control_node_B.Product2_ks *
            proc_control_node_B.TmpSignalConversionAtSFun_f[2];
          proc_control_node_B.q_m[3] = proc_control_node_B.Product2_ks *
            proc_control_node_B.u2[2] - proc_control_node_B.Product3_na *
            proc_control_node_B.TmpSignalConversionAtSFun_f[2];

          //  rp = quatrotate(quatinv(lq),wpt(1:3)) + lp;
          // rp = rotatepoint(quatinv(lq),wpt(1:3)) + lp;
          //  quaternion partie scalaire
          //  quaternion partie vectoriel
          proc_control_node_B.Product1_a5 = 0.0;
          proc_control_node_B.Product1_dz = 0.0;
          for (proc_control_node_B.i_n = 0; proc_control_node_B.i_n < 3;
               proc_control_node_B.i_n++) {
            proc_control_node_B.Product2_ks =
              proc_control_node_DW.obj_or.poseList[(((proc_control_node_B.i_n +
              4) << 1) + static_cast<int32_T>(proc_control_node_DW.obj_or.i -
              1.0)) - 1];
            proc_control_node_B.Product1_a5 += proc_control_node_B.Product2_ks *
              proc_control_node_B.TmpSignalConversionAtMATLAB[proc_control_node_B.i_n];
            proc_control_node_B.Product1_dz += proc_control_node_B.Product2_ks *
              proc_control_node_B.Product2_ks;
          }

          proc_control_node_B.Product2_ks = 2.0 *
            proc_control_node_B.Product1_a5;
          proc_control_node_B.Product3_na =
            proc_control_node_DW.obj_or.poseList[static_cast<int32_T>
            (proc_control_node_DW.obj_or.i - 1.0) + 5];
          proc_control_node_B.Product1_dz = proc_control_node_B.Product3_na *
            proc_control_node_B.Product3_na - proc_control_node_B.Product1_dz;
          proc_control_node_B.fcn2 = proc_control_node_B.Product3_na * 2.0;

          //  Prendre le quaternion le plus cours
          proc_control_node_B.Product1_a5 = 0.0;
          for (proc_control_node_B.i_n = 0; proc_control_node_B.i_n < 4;
               proc_control_node_B.i_n++) {
            proc_control_node_B.Product1_a5 +=
              proc_control_node_DW.obj_or.poseList[(((proc_control_node_B.i_n +
              3) << 1) + static_cast<int32_T>(proc_control_node_DW.obj_or.i -
              1.0)) - 1] * proc_control_node_B.q_m[proc_control_node_B.i_n];
          }

          if (proc_control_node_B.Product1_a5 > 1.0) {
            proc_control_node_B.Product1_a5 = ((proc_control_node_B.q_m[0] *
              proc_control_node_B.q_m[0] + -proc_control_node_B.q_m[1] *
              -proc_control_node_B.q_m[1]) + -proc_control_node_B.q_m[2] *
              -proc_control_node_B.q_m[2]) + -proc_control_node_B.q_m[3] *
              -proc_control_node_B.q_m[3];
            proc_control_node_B.b_q[0] = proc_control_node_B.q_m[0] /
              proc_control_node_B.Product1_a5;
            proc_control_node_B.b_q[1] = proc_control_node_B.q_m[1] /
              proc_control_node_B.Product1_a5;
            proc_control_node_B.b_q[2] = proc_control_node_B.q_m[2] /
              proc_control_node_B.Product1_a5;
            proc_control_node_B.b_q[3] = proc_control_node_B.q_m[3] /
              proc_control_node_B.Product1_a5;
            proc_control_node_B.dv20[0] = proc_control_node_B.Product3_na;
            proc_control_node_B.dv20[1] = proc_control_node_DW.obj_or.poseList[
              static_cast<int32_T>(proc_control_node_DW.obj_or.i - 1.0) + 7];
            proc_control_node_B.dv20[2] = proc_control_node_DW.obj_or.poseList[
              static_cast<int32_T>(proc_control_node_DW.obj_or.i - 1.0) + 9];
            proc_control_node_B.dv20[3] = proc_control_node_DW.obj_or.poseList[
              static_cast<int32_T>(proc_control_node_DW.obj_or.i - 1.0) + 11];
            proc_control_node_quatmultiply(proc_control_node_B.dv20,
              proc_control_node_B.b_q, proc_control_node_B.rq);

            //  rq= quatmultiply(quatinv(lq),quatconj(q));
          } else {
            proc_control_node_B.Product1_a5 = ((proc_control_node_B.q_m[0] *
              proc_control_node_B.q_m[0] + proc_control_node_B.q_m[1] *
              proc_control_node_B.q_m[1]) + proc_control_node_B.q_m[2] *
              proc_control_node_B.q_m[2]) + proc_control_node_B.q_m[3] *
              proc_control_node_B.q_m[3];
            proc_control_node_B.b_q[0] = proc_control_node_B.q_m[0] /
              proc_control_node_B.Product1_a5;
            proc_control_node_B.b_q[1] = -proc_control_node_B.q_m[1] /
              proc_control_node_B.Product1_a5;
            proc_control_node_B.b_q[2] = -proc_control_node_B.q_m[2] /
              proc_control_node_B.Product1_a5;
            proc_control_node_B.b_q[3] = -proc_control_node_B.q_m[3] /
              proc_control_node_B.Product1_a5;
            proc_control_node_B.dv20[0] = proc_control_node_B.Product3_na;
            proc_control_node_B.dv20[1] = proc_control_node_DW.obj_or.poseList[
              static_cast<int32_T>(proc_control_node_DW.obj_or.i - 1.0) + 7];
            proc_control_node_B.dv20[2] = proc_control_node_DW.obj_or.poseList[
              static_cast<int32_T>(proc_control_node_DW.obj_or.i - 1.0) + 9];
            proc_control_node_B.dv20[3] = proc_control_node_DW.obj_or.poseList[
              static_cast<int32_T>(proc_control_node_DW.obj_or.i - 1.0) + 11];
            proc_control_node_quatmultiply(proc_control_node_B.dv20,
              proc_control_node_B.b_q, proc_control_node_B.rq);

            //  rq = quatmultiply(quatinv(lq),q);
          }

          //  transformer le point en fonction du frame
          proc_control_node_B.TransferFcn_a = rt_roundd_snf
            (proc_control_node_B.DataTypeConversion1_l[0]);
          if (proc_control_node_B.TransferFcn_a < 256.0) {
            if (proc_control_node_B.TransferFcn_a >= 0.0) {
              proc_control_node_B.u_i = static_cast<uint8_T>
                (proc_control_node_B.TransferFcn_a);
            } else {
              proc_control_node_B.u_i = 0U;
            }
          } else {
            proc_control_node_B.u_i = MAX_uint8_T;
          }

          switch (proc_control_node_B.u_i) {
           case 0U:
            //  position et angle absolue
            proc_control_node_B.twpt[0] =
              proc_control_node_B.TmpSignalConversionAtMATLAB[0];
            proc_control_node_B.twpt[1] =
              proc_control_node_B.TmpSignalConversionAtMATLAB[1];
            proc_control_node_B.twpt[2] =
              proc_control_node_B.TmpSignalConversionAtMATLAB[2];
            proc_control_node_B.twpt[3] = proc_control_node_B.q_m[0];
            proc_control_node_B.twpt[4] = proc_control_node_B.q_m[1];
            proc_control_node_B.twpt[5] = proc_control_node_B.q_m[2];
            proc_control_node_B.twpt[6] = proc_control_node_B.q_m[3];
            break;

           case 1U:
            //  position et angle relatif
            proc_control_node_B.Product3_na =
              proc_control_node_DW.obj_or.poseList[static_cast<int32_T>
              (proc_control_node_DW.obj_or.i - 1.0) + 9];
            proc_control_node_B.Product1_a5 =
              proc_control_node_DW.obj_or.poseList[static_cast<int32_T>
              (proc_control_node_DW.obj_or.i - 1.0) + 11];
            proc_control_node_B.t12 = proc_control_node_DW.obj_or.poseList[
              static_cast<int32_T>(proc_control_node_DW.obj_or.i - 1.0) + 7];
            proc_control_node_B.twpt[0] = ((proc_control_node_B.t12 *
              proc_control_node_B.Product2_ks +
              proc_control_node_DW.obj_or.poseList[static_cast<int32_T>
              (proc_control_node_DW.obj_or.i - 1.0) - 1]) +
              proc_control_node_B.Product1_dz *
              proc_control_node_B.TmpSignalConversionAtMATLAB[0]) +
              (proc_control_node_B.Product3_na *
               proc_control_node_B.TmpSignalConversionAtMATLAB[2] -
               proc_control_node_B.Product1_a5 *
               proc_control_node_B.TmpSignalConversionAtMATLAB[1]) *
              proc_control_node_B.fcn2;
            proc_control_node_B.twpt[1] = ((proc_control_node_B.Product3_na *
              proc_control_node_B.Product2_ks +
              proc_control_node_DW.obj_or.poseList[static_cast<int32_T>
              (proc_control_node_DW.obj_or.i - 1.0) + 1]) +
              proc_control_node_B.Product1_dz *
              proc_control_node_B.TmpSignalConversionAtMATLAB[1]) +
              (proc_control_node_B.Product1_a5 *
               proc_control_node_B.TmpSignalConversionAtMATLAB[0] -
               proc_control_node_B.t12 *
               proc_control_node_B.TmpSignalConversionAtMATLAB[2]) *
              proc_control_node_B.fcn2;
            proc_control_node_B.twpt[2] = proc_control_node_DW.obj_or.poseList[
              static_cast<int32_T>(proc_control_node_DW.obj_or.i - 1.0) + 3];
            proc_control_node_B.twpt[3] = proc_control_node_B.rq[0];
            proc_control_node_B.twpt[4] = proc_control_node_B.rq[1];
            proc_control_node_B.twpt[5] = proc_control_node_B.rq[2];
            proc_control_node_B.twpt[6] = proc_control_node_B.rq[3];
            break;

           case 2U:
            //  position relatif et angle absolue
            proc_control_node_B.Product3_na =
              proc_control_node_DW.obj_or.poseList[static_cast<int32_T>
              (proc_control_node_DW.obj_or.i - 1.0) + 9];
            proc_control_node_B.t25 = proc_control_node_DW.obj_or.poseList[
              static_cast<int32_T>(proc_control_node_DW.obj_or.i - 1.0) + 11];
            proc_control_node_B.Product1_a5 =
              proc_control_node_DW.obj_or.poseList[static_cast<int32_T>
              (proc_control_node_DW.obj_or.i - 1.0) + 7];
            proc_control_node_B.twpt[0] = ((proc_control_node_B.Product1_a5 *
              proc_control_node_B.Product2_ks +
              proc_control_node_DW.obj_or.poseList[static_cast<int32_T>
              (proc_control_node_DW.obj_or.i - 1.0) - 1]) +
              proc_control_node_B.Product1_dz *
              proc_control_node_B.TmpSignalConversionAtMATLAB[0]) +
              (proc_control_node_B.Product3_na *
               proc_control_node_B.TmpSignalConversionAtMATLAB[2] -
               proc_control_node_B.t25 *
               proc_control_node_B.TmpSignalConversionAtMATLAB[1]) *
              proc_control_node_B.fcn2;
            proc_control_node_B.twpt[1] = ((proc_control_node_B.Product3_na *
              proc_control_node_B.Product2_ks +
              proc_control_node_DW.obj_or.poseList[static_cast<int32_T>
              (proc_control_node_DW.obj_or.i - 1.0) + 1]) +
              proc_control_node_B.Product1_dz *
              proc_control_node_B.TmpSignalConversionAtMATLAB[1]) +
              (proc_control_node_B.t25 *
               proc_control_node_B.TmpSignalConversionAtMATLAB[0] -
               proc_control_node_B.Product1_a5 *
               proc_control_node_B.TmpSignalConversionAtMATLAB[2]) *
              proc_control_node_B.fcn2;
            proc_control_node_B.twpt[2] = ((proc_control_node_B.t25 *
              proc_control_node_B.Product2_ks +
              proc_control_node_DW.obj_or.poseList[static_cast<int32_T>
              (proc_control_node_DW.obj_or.i - 1.0) + 3]) +
              proc_control_node_B.Product1_dz *
              proc_control_node_B.TmpSignalConversionAtMATLAB[2]) +
              (proc_control_node_B.Product1_a5 *
               proc_control_node_B.TmpSignalConversionAtMATLAB[1] -
               proc_control_node_B.Product3_na *
               proc_control_node_B.TmpSignalConversionAtMATLAB[0]) *
              proc_control_node_B.fcn2;
            proc_control_node_B.twpt[3] = proc_control_node_B.q_m[0];
            proc_control_node_B.twpt[4] = proc_control_node_B.q_m[1];
            proc_control_node_B.twpt[5] = proc_control_node_B.q_m[2];
            proc_control_node_B.twpt[6] = proc_control_node_B.q_m[3];
            break;

           case 3U:
            //  position absolue et angle relatif
            proc_control_node_B.twpt[0] =
              proc_control_node_B.TmpSignalConversionAtMATLAB[0];
            proc_control_node_B.twpt[1] =
              proc_control_node_B.TmpSignalConversionAtMATLAB[1];
            proc_control_node_B.twpt[2] =
              proc_control_node_B.TmpSignalConversionAtMATLAB[2];
            proc_control_node_B.twpt[3] = proc_control_node_B.rq[0];
            proc_control_node_B.twpt[4] = proc_control_node_B.rq[1];
            proc_control_node_B.twpt[5] = proc_control_node_B.rq[2];
            proc_control_node_B.twpt[6] = proc_control_node_B.rq[3];
            break;

           default:
            //  retourne le point précédent
            proc_control_node_B.twpt[0] = proc_control_node_DW.obj_or.poseList[
              static_cast<int32_T>(proc_control_node_DW.obj_or.i - 1.0) - 1];
            proc_control_node_B.twpt[1] = proc_control_node_DW.obj_or.poseList[
              static_cast<int32_T>(proc_control_node_DW.obj_or.i - 1.0) + 1];
            proc_control_node_B.twpt[2] = proc_control_node_DW.obj_or.poseList[
              static_cast<int32_T>(proc_control_node_DW.obj_or.i - 1.0) + 3];
            proc_control_node_B.twpt[3] = proc_control_node_B.Product3_na;
            proc_control_node_B.twpt[4] = proc_control_node_DW.obj_or.poseList[
              static_cast<int32_T>(proc_control_node_DW.obj_or.i - 1.0) + 7];
            proc_control_node_B.twpt[5] = proc_control_node_DW.obj_or.poseList[
              static_cast<int32_T>(proc_control_node_DW.obj_or.i - 1.0) + 9];
            proc_control_node_B.twpt[6] = proc_control_node_DW.obj_or.poseList[
              static_cast<int32_T>(proc_control_node_DW.obj_or.i - 1.0) + 11];
            break;
          }

          for (proc_control_node_B.i_n = 0; proc_control_node_B.i_n < 8;
               proc_control_node_B.i_n++) {
            proc_control_node_DW.obj_or.poseList[(static_cast<int32_T>
              (proc_control_node_DW.obj_or.i) + (proc_control_node_B.i_n << 1))
              - 1] = proc_control_node_B.twpt[proc_control_node_B.i_n];
          }

          proc_control_node_DW.obj_or.i++;
        }

        // End of Outputs for SubSystem: '<S150>/Subscribe'
        if (proc_control_node_DW.Delay1_DSTATE) {
          for (proc_control_node_B.i_n = 0; proc_control_node_B.i_n < 8;
               proc_control_node_B.i_n++) {
            proc_control_node_B.Selector1_tmp = proc_control_node_B.i_n << 1;
            proc_control_node_DW.obj_or.poseList[proc_control_node_B.Selector1_tmp]
              = proc_control_node_DW.obj_or.poseList[(static_cast<int32_T>
              (proc_control_node_DW.obj_or.i - 1.0) +
              proc_control_node_B.Selector1_tmp) - 1];
            proc_control_node_DW.obj_or.poseList[proc_control_node_B.Selector1_tmp
              + 1] = 999.0;
          }

          proc_control_node_DW.obj_or.i = 2.0;
        }

        if (proc_control_node_B.OR1) {
          for (proc_control_node_B.i_n = 0; proc_control_node_B.i_n < 8;
               proc_control_node_B.i_n++) {
            proc_control_node_DW.obj_or.poseList[(proc_control_node_B.i_n << 1)
              + 1] = 999.0;
          }

          proc_control_node_DW.obj_or.poseList[14] = 0.0;
          for (proc_control_node_B.i_n = 0; proc_control_node_B.i_n < 7;
               proc_control_node_B.i_n++) {
            proc_control_node_B.Selector1_tmp = proc_control_node_B.i_n << 1;
            proc_control_node_DW.obj_or.poseList[proc_control_node_B.Selector1_tmp]
              = proc_control_node_B.Transpose[proc_control_node_B.i_n];
            proc_control_node_DW.obj_or.poseList[proc_control_node_B.Selector1_tmp
              + 1] = proc_control_node_B.Transpose[proc_control_node_B.i_n];
          }

          proc_control_node_DW.obj_or.poseList[15] = 1.0;
          proc_control_node_DW.obj_or.i = 2.0;
        }

        // Outputs for Enabled SubSystem: '<S150>/Pre-traitement' incorporates:
        //   EnablePort: '<S171>/Enable'

        // Outputs for Atomic SubSystem: '<S150>/Subscribe'
        if (proc_control_node_B.b_varargout_1_i || proc_control_node_B.OR1) {
          for (proc_control_node_B.i_n = 0; proc_control_node_B.i_n < 2;
               proc_control_node_B.i_n++) {
            for (proc_control_node_B.Selector1_tmp = 0;
                 proc_control_node_B.Selector1_tmp < 8;
                 proc_control_node_B.Selector1_tmp++) {
              // Math: '<S171>/Transpose' incorporates:
              //   MATLABSystem: '<S150>/MATLAB System1'

              proc_control_node_B.Transpose_i[proc_control_node_B.Selector1_tmp
                + (proc_control_node_B.i_n << 3)] =
                proc_control_node_DW.obj_or.poseList
                [(proc_control_node_B.Selector1_tmp << 1) +
                proc_control_node_B.i_n];
            }

            // Selector: '<S171>/Selector1' incorporates:
            //   Selector: '<S171>/Selector'

            proc_control_node_B.Selector1_tmp = proc_control_node_B.i_n << 3;
            proc_control_node_B.Selector1_tmp_c = proc_control_node_B.i_n << 2;

            // Selector: '<S171>/Selector1' incorporates:
            //   Math: '<S171>/Transpose'

            proc_control_node_B.Selector1[proc_control_node_B.Selector1_tmp_c] =
              proc_control_node_B.Transpose_i[proc_control_node_B.Selector1_tmp
              + 3];
            proc_control_node_B.Selector1[proc_control_node_B.Selector1_tmp_c +
              1] =
              proc_control_node_B.Transpose_i[proc_control_node_B.Selector1_tmp
              + 4];
            proc_control_node_B.Selector1[proc_control_node_B.Selector1_tmp_c +
              2] =
              proc_control_node_B.Transpose_i[proc_control_node_B.Selector1_tmp
              + 5];
            proc_control_node_B.Selector1[proc_control_node_B.Selector1_tmp_c +
              3] =
              proc_control_node_B.Transpose_i[proc_control_node_B.Selector1_tmp
              + 6];

            // Selector: '<S171>/Selector' incorporates:
            //   Math: '<S171>/Transpose'

            proc_control_node_B.Selector[3 * proc_control_node_B.i_n] =
              proc_control_node_B.Transpose_i[proc_control_node_B.Selector1_tmp];
            proc_control_node_B.Selector[3 * proc_control_node_B.i_n + 1] =
              proc_control_node_B.Transpose_i[proc_control_node_B.Selector1_tmp
              + 1];
            proc_control_node_B.Selector[3 * proc_control_node_B.i_n + 2] =
              proc_control_node_B.Transpose_i[proc_control_node_B.Selector1_tmp
              + 2];
          }

          // Selector: '<S171>/Selector2' incorporates:
          //   Math: '<S171>/Transpose'

          proc_control_node_B.MatrixConcatenate[1] =
            proc_control_node_B.Transpose_i[15];
          proc_control_node_B.MatrixConcatenate[0] =
            proc_control_node_P.Constant1_Value_l;
          srUpdateBC(proc_control_node_DW.Pretraitement_SubsysRanBC);
        }

        // End of Outputs for SubSystem: '<S150>/Pre-traitement'

        // Outputs for Resettable SubSystem: '<S150>/Trajectory generator' incorporates:
        //   ResetPort: '<S175>/Reset'

        if (proc_control_node_B.b_varargout_1_i &&
            (proc_control_node_PrevZCX.Trajectorygenerator_Reset_ZCE != 1)) {
          // InitializeConditions for DiscreteIntegrator: '<S175>/Discrete-Time Integrator' 
          proc_control_node_DW.DiscreteTimeIntegrator_DSTATE_a =
            proc_control_node_P.DiscreteTimeIntegrator_IC;
        }

        proc_control_node_PrevZCX.Trajectorygenerator_Reset_ZCE =
          proc_control_node_B.b_varargout_1_i;

        // End of Outputs for SubSystem: '<S150>/Subscribe'

        // DiscreteIntegrator: '<S175>/Discrete-Time Integrator' incorporates:
        //   Constant: '<S171>/Constant1'
        //   Constant: '<S175>/Constant'
        //   Logic: '<S150>/OR'
        //   MATLABSystem: '<S172>/SourceBlock'

        proc_control_node_B.Product1_dz =
          proc_control_node_P.DiscreteTimeIntegrator_gainval *
          proc_control_node_P.Constant_Value_en;

        // DiscreteIntegrator: '<S175>/Discrete-Time Integrator'
        proc_control_node_B.fcn2 = proc_control_node_B.Product1_dz +
          proc_control_node_DW.DiscreteTimeIntegrator_DSTATE_a;

        // MATLABSystem: '<S175>/Rotation Trajectory' incorporates:
        //   Concatenate: '<S171>/Matrix Concatenate'
        //   Selector: '<S171>/Selector1'
        //   Selector: '<S175>/Selector1'
        //   Selector: '<S175>/Selector2'

        proc_cont_SystemCore_step_b4nwk(&proc_control_node_DW.obj_gr,
          proc_control_node_B.fcn2, &proc_control_node_B.Selector1[0],
          &proc_control_node_B.Selector1[4],
          proc_control_node_B.MatrixConcatenate,
          proc_control_node_B.RotationTrajectory_o1,
          proc_control_node_B.TmpSignalConversionAtSFun_f,
          proc_control_node_B.u2);

        // MATLABSystem: '<S175>/Polynomial Trajectory1' incorporates:
        //   Concatenate: '<S171>/Matrix Concatenate'
        //   Selector: '<S171>/Selector'

        proc_control_node_B.OR1 = false;
        proc_control_node_B.SourceBlock_o1_j = true;
        proc_control_node_B.i_n = 0;
        exitg1 = false;
        while ((!exitg1) && (proc_control_node_B.i_n < 6)) {
          if (!(proc_control_node_DW.obj_k.VelocityBoundaryCondition[proc_control_node_B.i_n]
                ==
                proc_control_node_P.PolynomialTrajectory1_VelocityB[proc_control_node_B.i_n]))
          {
            proc_control_node_B.SourceBlock_o1_j = false;
            exitg1 = true;
          } else {
            proc_control_node_B.i_n++;
          }
        }

        if (proc_control_node_B.SourceBlock_o1_j) {
          proc_control_node_B.OR1 = true;
        }

        if (!proc_control_node_B.OR1) {
          if (proc_control_node_DW.obj_k.isInitialized == 1) {
            proc_control_node_DW.obj_k.TunablePropsChanged = true;
          }

          for (proc_control_node_B.i_n = 0; proc_control_node_B.i_n < 6;
               proc_control_node_B.i_n++) {
            proc_control_node_DW.obj_k.VelocityBoundaryCondition[proc_control_node_B.i_n]
              =
              proc_control_node_P.PolynomialTrajectory1_VelocityB[proc_control_node_B.i_n];
          }
        }

        if (proc_control_node_DW.obj_k.TunablePropsChanged) {
          proc_control_node_DW.obj_k.TunablePropsChanged = false;
        }

        proc_control_node_cubicpolytraj(proc_control_node_B.Selector,
          proc_control_node_B.MatrixConcatenate,
          proc_control_node_B.MatrixConcatenate,
          proc_control_node_DW.obj_k.VelocityBoundaryCondition,
          proc_control_node_B.Gain_o, proc_control_node_B.a__3,
          proc_control_node_B.a__4, proc_control_node_B.b_q,
          proc_control_node_B.pp_coefs);
        proc_control_node_B.q_m[0] = proc_control_node_B.b_q[0];
        proc_control_node_B.q_m[1] = proc_control_node_B.b_q[1];
        proc_control_node_B.q_m[3] = proc_control_node_B.b_q[3];
        proc_control_node_B.Product3_na = 0.01;
        if (proc_control_node_B.fcn2 > proc_control_node_B.b_q[2]) {
          proc_control_node_B.i_n = 1;
          proc_control_node_B.Selector1_tmp = 1;
        } else {
          proc_control_node_B.i_n = 0;
          proc_control_node_B.Selector1_tmp = 0;
        }

        if ((proc_control_node_B.i_n != 0) && (proc_control_node_B.Selector1_tmp
             != 0)) {
          proc_control_node_B.Product2_ks = (proc_control_node_B.fcn2 -
            proc_control_node_B.b_q[2]) / 2.0;
          if (proc_control_node_B.Product2_ks < 0.01) {
            proc_control_node_B.Product3_na = proc_control_node_B.Product2_ks;
          }
        }

        proc_control_node_B.q_m[2] = proc_control_node_B.b_q[2] +
          proc_control_node_B.Product3_na;
        memset(&proc_control_node_B.dCoefs[0], 0, 36U * sizeof(real_T));
        for (proc_control_node_B.Selector1_tmp = 0;
             proc_control_node_B.Selector1_tmp < 3;
             proc_control_node_B.Selector1_tmp++) {
          for (proc_control_node_B.i_n = 0; proc_control_node_B.i_n < 9;
               proc_control_node_B.i_n++) {
            proc_control_node_B.dCoefs[proc_control_node_B.i_n + 9 *
              (proc_control_node_B.Selector1_tmp + 1)] =
              proc_control_node_B.pp_coefs[proc_control_node_B.Selector1_tmp * 9
              + proc_control_node_B.i_n] * static_cast<real_T>(3 -
              proc_control_node_B.Selector1_tmp);
          }
        }

        // Update for DiscreteIntegrator: '<S175>/Discrete-Time Integrator'
        proc_control_node_DW.DiscreteTimeIntegrator_DSTATE_a =
          proc_control_node_B.Product1_dz + proc_control_node_B.fcn2;

        // End of Outputs for SubSystem: '<S150>/Trajectory generator'

        // MATLABSystem: '<S150>/MATLAB System' incorporates:
        //   Constant: '<S150>/Constant1'
        //   MATLAB Function: '<S150>/MATLAB Function2'
        //   MATLABSystem: '<S175>/Polynomial Trajectory1'
        //   MATLABSystem: '<S175>/Rotation Trajectory'
        //   Math: '<S177>/Transpose'
        //   SignalConversion generated from: '<S150>/Transpose'

        if (proc_control_node_DW.obj.linearConvergence !=
            proc_control_node_P.MATLABSystem_linearConvergence) {
          proc_control_node_DW.obj.linearConvergence =
            proc_control_node_P.MATLABSystem_linearConvergence;
        }

        if (proc_control_node_DW.obj.quaternionConvergence !=
            proc_control_node_P.MATLABSystem_quaternionConverge) {
          proc_control_node_DW.obj.quaternionConvergence =
            proc_control_node_P.MATLABSystem_quaternionConverge;
        }

        if (proc_control_node_DW.obj.TargetThreshold !=
            proc_control_node_P.MATLABSystem_TargetThreshold) {
          proc_control_node_DW.obj.TargetThreshold =
            proc_control_node_P.MATLABSystem_TargetThreshold;
        }

        //  Main execute a chaque iteration.
        //  Implement algorithm. Calculate y as a function of input u and
        //
        if (proc_control_node_DW.obj.init == 0.0) {
          //  Conditions Initiales
          for (proc_control_node_B.i_n = 0; proc_control_node_B.i_n < 7;
               proc_control_node_B.i_n++) {
            proc_control_node_DW.obj.poseBuffer[6001 * proc_control_node_B.i_n] =
              proc_control_node_B.Transpose[proc_control_node_B.i_n];
          }

          proc_control_node_DW.obj.poseBuffer[42007] = 0.0;
          proc_control_node_DW.obj.poseBuffer[48008] = 0.0;
          proc_control_node_DW.obj.poseBuffer[54009] = 0.0;
          proc_control_node_DW.obj.poseBuffer[60010] = 0.0;
          proc_control_node_DW.obj.poseBuffer[66011] = 0.0;
          proc_control_node_DW.obj.poseBuffer[72012] = 0.0;

          // InitCond;
          proc_control_node_DW.obj.bufferCount = 1.0;
          proc_control_node_DW.obj.init = 1.0;
        }

        // this.BufferReset(reset,mp);
        //  Fonction qui traites les nouveau poses.
        //  Insertion des nouveaux points.
        if (proc_control_node_P.Constant1_Value_m[0] == 1.0) {
          // if new == this.generationNumber %new>
          if (proc_control_node_P.Constant1_Value_m[1] +
              proc_control_node_DW.obj.bufferCount < 6001.0) {
            // Outputs for Resettable SubSystem: '<S150>/Trajectory generator' incorporates:
            //   ResetPort: '<S175>/Reset'

            // MATLABSystem: '<S175>/Polynomial Trajectory1'
            proc_control_node_ppval_b4nw(proc_control_node_B.b_q,
              proc_control_node_B.pp_coefs, proc_control_node_B.fcn2,
              proc_control_node_B.Gain_j);
            proc_control_node_ppval_b4nw(proc_control_node_B.q_m,
              proc_control_node_B.dCoefs, proc_control_node_B.fcn2,
              proc_control_node_B.sincos_o1);

            // End of Outputs for SubSystem: '<S150>/Trajectory generator'
            proc_control_node_B.i_n = static_cast<int32_T>
              (proc_control_node_P.Constant1_Value_m[1] +
               proc_control_node_DW.obj.bufferCount) - 1;

            // Outputs for Resettable SubSystem: '<S150>/Trajectory generator' incorporates:
            //   ResetPort: '<S175>/Reset'

            proc_control_node_DW.obj.poseBuffer[proc_control_node_B.i_n] =
              proc_control_node_B.Gain_j[0];
            proc_control_node_DW.obj.poseBuffer[proc_control_node_B.i_n + 6001] =
              proc_control_node_B.Gain_j[1];
            proc_control_node_DW.obj.poseBuffer[proc_control_node_B.i_n + 12002]
              = proc_control_node_B.Gain_j[2];

            // End of Outputs for SubSystem: '<S150>/Trajectory generator'
            proc_control_node_DW.obj.poseBuffer[proc_control_node_B.i_n + 18003]
              = proc_control_node_B.RotationTrajectory_o1[0];
            proc_control_node_DW.obj.poseBuffer[proc_control_node_B.i_n + 24004]
              = proc_control_node_B.RotationTrajectory_o1[1];
            proc_control_node_DW.obj.poseBuffer[proc_control_node_B.i_n + 30005]
              = proc_control_node_B.RotationTrajectory_o1[2];
            proc_control_node_DW.obj.poseBuffer[proc_control_node_B.i_n + 36006]
              = proc_control_node_B.RotationTrajectory_o1[3];

            // Outputs for Resettable SubSystem: '<S150>/Trajectory generator' incorporates:
            //   ResetPort: '<S175>/Reset'

            proc_control_node_DW.obj.poseBuffer[proc_control_node_B.i_n + 42007]
              = proc_control_node_B.sincos_o1[0];
            proc_control_node_DW.obj.poseBuffer[proc_control_node_B.i_n + 60010]
              = proc_control_node_B.TmpSignalConversionAtSFun_f[0];
            proc_control_node_DW.obj.poseBuffer[proc_control_node_B.i_n + 48008]
              = proc_control_node_B.sincos_o1[1];
            proc_control_node_DW.obj.poseBuffer[proc_control_node_B.i_n + 66011]
              = proc_control_node_B.TmpSignalConversionAtSFun_f[1];
            proc_control_node_DW.obj.poseBuffer[proc_control_node_B.i_n + 54009]
              = proc_control_node_B.sincos_o1[2];
            proc_control_node_DW.obj.poseBuffer[proc_control_node_B.i_n + 72012]
              = proc_control_node_B.TmpSignalConversionAtSFun_f[2];

            // End of Outputs for SubSystem: '<S150>/Trajectory generator'
            // this.poseBuffer(this.bufferCount:count + this.bufferCount,:) = pose(1:count+1,:) 
            proc_control_node_DW.obj.bufferCount +=
              proc_control_node_P.Constant1_Value_m[1];
            proc_control_node_DW.obj.generationNumber++;
          } else {
            printf("%s\n", "Problem");
            fflush(stdout);
          }
        }

        TrajectoryManager_SendCurrentPo(&proc_control_node_DW.obj,
          proc_control_node_B.Quaternion);

        // Merge: '<S11>/Merge1' incorporates:
        //   MATLABSystem: '<S150>/MATLAB System'

        //  Fonction qui verifie le target reached
        proc_control_node_B.Merge1 = false;

        // MATLABSystem: '<S150>/MATLAB System' incorporates:
        //   MATLAB Function: '<S150>/MATLAB Function'
        //   SignalConversion generated from: '<S169>/ SFunction '

        //  vérifier le traget reached si la trajectoire est terminé
        if (proc_control_node_DW.obj.done) {
          //  calcule de l'erreur de langle en 3D avec le quaternion
          proc_control_node_B.qRel[0] = ((proc_control_node_DW.obj.poseBuffer
            [18003] * proc_control_node_B.Divide -
            -proc_control_node_DW.obj.poseBuffer[24004] *
            proc_control_node_B.Divide1) - -proc_control_node_DW.obj.poseBuffer
            [30005] * proc_control_node_B.Divide2) -
            -proc_control_node_DW.obj.poseBuffer[36006] *
            proc_control_node_B.Divide3;
          proc_control_node_B.qRel[1] = (proc_control_node_DW.obj.poseBuffer
            [18003] * proc_control_node_B.Divide1 +
            -proc_control_node_DW.obj.poseBuffer[24004] *
            proc_control_node_B.Divide) + (-proc_control_node_DW.obj.poseBuffer
            [30005] * proc_control_node_B.Divide3 -
            -proc_control_node_DW.obj.poseBuffer[36006] *
            proc_control_node_B.Divide2);
          proc_control_node_B.qRel[2] = (proc_control_node_DW.obj.poseBuffer
            [18003] * proc_control_node_B.Divide2 +
            -proc_control_node_DW.obj.poseBuffer[30005] *
            proc_control_node_B.Divide) + (-proc_control_node_DW.obj.poseBuffer
            [36006] * proc_control_node_B.Divide1 -
            -proc_control_node_DW.obj.poseBuffer[24004] *
            proc_control_node_B.Divide3);
          proc_control_node_B.qRel[3] = (proc_control_node_DW.obj.poseBuffer
            [18003] * proc_control_node_B.Divide3 + proc_control_node_B.Divide *
            -proc_control_node_DW.obj.poseBuffer[36006]) +
            (-proc_control_node_DW.obj.poseBuffer[24004] *
             proc_control_node_B.Divide2 - -proc_control_node_DW.obj.poseBuffer
             [30005] * proc_control_node_B.Divide1);

          //  vérifier si le sub est dans la zone de convergence (sphérique / conique) 
          proc_control_node_B.sincos_o1[0] =
            proc_control_node_DW.obj.poseBuffer[0] -
            proc_control_node_B.WorldPosition[0];
          proc_control_node_B.sincos_o1[1] =
            proc_control_node_DW.obj.poseBuffer[6001] -
            proc_control_node_B.WorldPosition[1];
          proc_control_node_B.sincos_o1[2] =
            proc_control_node_DW.obj.poseBuffer[12002] -
            proc_control_node_B.WorldPosition[2];
          if ((proc_control_node_norm_b(proc_control_node_B.sincos_o1) <
               proc_control_node_DW.obj.linearConvergence) && (2.0 *
               rt_atan2d_snf(proc_control_node_norm_b(&proc_control_node_B.qRel
                 [1]), proc_control_node_B.qRel[0]) <
               proc_control_node_DW.obj.quaternionConvergence)) {
            proc_control_node_DW.obj.targetReachedCount++;

            // Merge: '<S11>/Merge1'
            proc_control_node_B.Merge1 =
              (proc_control_node_DW.obj.targetReachedCount * 0.25 >=
               proc_control_node_DW.obj.TargetThreshold);
          }
        } else {
          proc_control_node_DW.obj.targetReachedCount = 0.0;
        }

        // Update for Delay: '<S174>/Delay' incorporates:
        //   Constant: '<S174>/Constant6'

        proc_control_node_DW.Delay_DSTATE_j =
          proc_control_node_P.Constant6_Value;

        // Outputs for Atomic SubSystem: '<S150>/Subscribe'
        // Update for Delay: '<S150>/Delay1' incorporates:
        //   MATLABSystem: '<S172>/SourceBlock'

        proc_control_node_DW.Delay1_DSTATE = proc_control_node_B.b_varargout_1_i;

        // End of Outputs for SubSystem: '<S150>/Subscribe'
        if (rtmIsMajorTimeStep(proc_control_node_M)) {
          srUpdateBC(proc_control_node_DW.singleWptsTrajectory_SubsysRanB);
        }

        // End of Outputs for SubSystem: '<S11>/singleWpts Trajectory'
        break;

       case 3:
        // Outputs for IfAction SubSystem: '<S11>/If Action Subsystem' incorporates:
        //   ActionPort: '<S146>/Action Port'

        // Merge: '<S11>/Merge' incorporates:
        //   Constant: '<S146>/Constant'
        //   MATLAB Function: '<S146>/MATLAB Function1'

        proc_control_no_MATLABFunction1(proc_control_node_P.Constant_Value_cy,
          proc_control_node_B.Quaternion,
          &proc_control_node_B.sf_MATLABFunction1_b);
        if (rtmIsMajorTimeStep(proc_control_node_M)) {
          srUpdateBC(proc_control_node_DW.IfActionSubsystem_SubsysRanBC);
        }

        // End of Outputs for SubSystem: '<S11>/If Action Subsystem'
        break;
      }

      // End of SwitchCase: '<S11>/Switch Case'

      // SwitchCase: '<S9>/Switch Case'
      proc_control_node_B.rtPrevAction =
        proc_control_node_DW.SwitchCase_ActiveSubsystem_c;
      if (rtmIsMajorTimeStep(proc_control_node_M)) {
        switch (proc_control_node_B.Data) {
         case 10:
         case 11:
         case 19:
          proc_control_node_DW.SwitchCase_ActiveSubsystem_c = 0;
          break;

         case 20:
         case 21:
          proc_control_node_DW.SwitchCase_ActiveSubsystem_c = 1;
          break;

         default:
          proc_control_node_DW.SwitchCase_ActiveSubsystem_c = 2;
          break;
        }
      }

      switch (proc_control_node_DW.SwitchCase_ActiveSubsystem_c) {
       case 0:
        if (proc_control_node_DW.SwitchCase_ActiveSubsystem_c !=
            proc_control_node_B.rtPrevAction) {
          // InitializeConditions for IfAction SubSystem: '<S9>/Quaternion Non linear MPC' incorporates:
          //   ActionPort: '<S90>/Action Port'

          // InitializeConditions for SwitchCase: '<S9>/Switch Case' incorporates:
          //   Delay: '<S90>/Delay'
          //   DiscretePulseGenerator: '<S90>/Pulse Generator'

          memcpy(&proc_control_node_DW.Delay_DSTATE_b[0],
                 &proc_control_node_P.Delay_InitialCondition[0], sizeof(real_T) <<
                 3U);
          proc_control_node_DW.clockTickCounter = 0;

          // End of InitializeConditions for SubSystem: '<S9>/Quaternion Non linear MPC' 
          //  Initialize / reset discrete-state properties
        }

        // Outputs for IfAction SubSystem: '<S9>/Quaternion Non linear MPC' incorporates:
        //   ActionPort: '<S90>/Action Port'

        // SignalConversion generated from: '<S90>/MPC manager'
        proc_control_node_B.TmpSignalConversionAtTran_h[3] =
          proc_control_node_B.Divide;
        proc_control_node_B.TmpSignalConversionAtTran_h[4] =
          proc_control_node_B.Divide1;
        proc_control_node_B.TmpSignalConversionAtTran_h[5] =
          proc_control_node_B.Divide2;
        proc_control_node_B.TmpSignalConversionAtTran_h[6] =
          proc_control_node_B.Divide3;
        proc_control_node_B.TmpSignalConversionAtTran_h[7] =
          proc_control_node_B.Sum_i;
        proc_control_node_B.TmpSignalConversionAtTran_h[8] =
          proc_control_node_B.Sum_m;
        proc_control_node_B.TmpSignalConversionAtTran_h[9] =
          proc_control_node_B.Sum;
        proc_control_node_B.TmpSignalConversionAtTran_h[0] =
          proc_control_node_B.WorldPosition[0];
        proc_control_node_B.TmpSignalConversionAtTran_h[10] =
          proc_control_node_B.AngularRate[0];
        proc_control_node_B.TmpSignalConversionAtTran_h[1] =
          proc_control_node_B.WorldPosition[1];
        proc_control_node_B.TmpSignalConversionAtTran_h[11] =
          proc_control_node_B.AngularRate[1];
        proc_control_node_B.TmpSignalConversionAtTran_h[2] =
          proc_control_node_B.WorldPosition[2];
        proc_control_node_B.TmpSignalConversionAtTran_h[12] =
          proc_control_node_B.AngularRate[2];

        // MATLABSystem: '<S90>/MPC manager'
        for (proc_control_node_B.i_n = 0; proc_control_node_B.i_n < 8;
             proc_control_node_B.i_n++) {
          proc_control_node_B.twpt[proc_control_node_B.i_n] =
            proc_control_node_P.mpc.tmin;
          proc_control_node_B.Tmax[proc_control_node_B.i_n] =
            proc_control_node_P.mpc.tmax;
        }

        if (!proc_control_node_isequal_b(proc_control_node_DW.obj_g.Config10,
             proc_control_node_P.Config10)) {
          memcpy(&proc_control_node_DW.obj_g.Config10[0],
                 &proc_control_node_P.Config10[0], 29U * sizeof(real_T));
        }

        if (!proc_control_node_isequal_b(proc_control_node_DW.obj_g.Config19,
             proc_control_node_P.Config19)) {
          memcpy(&proc_control_node_DW.obj_g.Config19[0],
                 &proc_control_node_P.Config19[0], 29U * sizeof(real_T));
        }

        if (!proc_control_node_isequal_b4(proc_control_node_DW.obj_g.Tmin,
             proc_control_node_B.twpt)) {
          memcpy(&proc_control_node_DW.obj_g.Tmin[0], &proc_control_node_B.twpt
                 [0], sizeof(real_T) << 3U);
        }

        if (!proc_control_node_isequal_b4(proc_control_node_DW.obj_g.Tmax,
             proc_control_node_B.Tmax)) {
          memcpy(&proc_control_node_DW.obj_g.Tmax[0], &proc_control_node_B.Tmax
                 [0], sizeof(real_T) << 3U);
        }

        proc_control_node_B.OR1 = false;
        proc_control_node_B.SourceBlock_o1_j = true;
        proc_control_node_B.i_n = 0;
        exitg1 = false;
        while ((!exitg1) && (proc_control_node_B.i_n < 41)) {
          if (!(proc_control_node_DW.obj_g.MecConst[proc_control_node_B.i_n] ==
                proc_control_node_P.constValues[proc_control_node_B.i_n])) {
            proc_control_node_B.SourceBlock_o1_j = false;
            exitg1 = true;
          } else {
            proc_control_node_B.i_n++;
          }
        }

        if (proc_control_node_B.SourceBlock_o1_j) {
          proc_control_node_B.OR1 = true;
        }

        if (!proc_control_node_B.OR1) {
          memcpy(&proc_control_node_DW.obj_g.MecConst[0],
                 &proc_control_node_P.constValues[0], 41U * sizeof(real_T));
        }

        if (!proc_control_node_isequal_b4(proc_control_node_DW.obj_g.mvInit,
             proc_control_node_P.Ui)) {
          memcpy(&proc_control_node_DW.obj_g.mvInit[0], &proc_control_node_P.Ui
                 [0], sizeof(real_T) << 3U);
        }

        if (proc_control_node_DW.obj_g.eInit !=
            proc_control_node_P.MPCmanager_eInit) {
          proc_control_node_DW.obj_g.eInit =
            proc_control_node_P.MPCmanager_eInit;
        }

        //         %% Fonction qui détermine les gain
        switch (proc_control_node_B.Data) {
         case 10U:
          memcpy(&proc_control_node_B.Dynamics[0],
                 &proc_control_node_DW.obj_g.Config10[0], 13U * sizeof(real_T));
          for (proc_control_node_B.i_n = 0; proc_control_node_B.i_n < 8;
               proc_control_node_B.i_n++) {
            proc_control_node_B.twpt[proc_control_node_B.i_n] =
              proc_control_node_DW.obj_g.Config10[(proc_control_node_B.i_n + 14)
              - 1];
            proc_control_node_B.Tmax[proc_control_node_B.i_n] =
              proc_control_node_DW.obj_g.Config10[(proc_control_node_B.i_n + 22)
              - 1];
          }
          break;

         case 19U:
          memcpy(&proc_control_node_B.Dynamics[0],
                 &proc_control_node_DW.obj_g.Config19[0], 13U * sizeof(real_T));
          for (proc_control_node_B.i_n = 0; proc_control_node_B.i_n < 8;
               proc_control_node_B.i_n++) {
            proc_control_node_B.twpt[proc_control_node_B.i_n] =
              proc_control_node_DW.obj_g.Config19[(proc_control_node_B.i_n + 14)
              - 1];
            proc_control_node_B.Tmax[proc_control_node_B.i_n] =
              proc_control_node_DW.obj_g.Config19[(proc_control_node_B.i_n + 22)
              - 1];
          }
          break;

         default:
          memcpy(&proc_control_node_B.Dynamics[0],
                 &proc_control_node_DW.obj_g.Config10[0], 13U * sizeof(real_T));
          for (proc_control_node_B.i_n = 0; proc_control_node_B.i_n < 8;
               proc_control_node_B.i_n++) {
            proc_control_node_B.twpt[proc_control_node_B.i_n] =
              proc_control_node_DW.obj_g.Config10[(proc_control_node_B.i_n + 14)
              - 1];
            proc_control_node_B.Tmax[proc_control_node_B.i_n] =
              proc_control_node_DW.obj_g.Config10[(proc_control_node_B.i_n + 22)
              - 1];
          }
          break;
        }

        //         %% Fonction D'initialisation
        //  Conditions initial
        if (proc_control_node_DW.obj_g.init == 0.0) {
          memcpy(&proc_control_node_DW.obj_g.xInit[0],
                 &proc_control_node_B.TmpSignalConversionAtTran_h[0], 13U *
                 sizeof(real_T));
          proc_control_node_DW.obj_g.init = 1.0;
        }

        // MATLAB Function: '<S94>/NLMPC' incorporates:
        //   Delay: '<S90>/Delay'
        //   MATLABSystem: '<S90>/MPC manager'
        //   Merge: '<S11>/Merge'
        //   Reshape: '<S94>/Reshape'

        proc_znlmpc_generateRuntimeData
          (proc_control_node_B.TmpSignalConversionAtTran_h,
           proc_control_node_DW.Delay_DSTATE_b, proc_control_node_B.Quaternion,
           proc_control_node_B.Dynamics, proc_control_node_B.twpt,
           proc_control_node_B.Tmax, proc_control_node_DW.obj_g.Tmin,
           proc_control_node_DW.obj_g.Tmax, proc_control_node_DW.obj_g.xInit,
           proc_control_node_DW.obj_g.mvInit, proc_control_node_DW.obj_g.eInit,
           &proc_control_node_B.runtimedata, &proc_control_node_B.userdata,
           proc_control_node_B.z0);
        proc_control__znlmpc_getZBounds(&proc_control_node_B.runtimedata,
          proc_control_node_B.zLB, proc_control_node_B.zUB);
        proc_control__znlmpc_getUBounds(&proc_control_node_B.runtimedata,
          proc_control_node_B.A_data, proc_control_node_B.A_size,
          proc_control_node_B.B_data_p, &proc_control_node_B.B_size);
        memcpy(&proc_control_node_B.expl_temp.MVScaledTarget[0],
               &proc_control_node_B.runtimedata.MVScaledTarget[0], sizeof(real_T)
               << 5U);
        memcpy(&proc_control_node_B.expl_temp.MVRateMax[0],
               &proc_control_node_B.runtimedata.MVRateMax[0], sizeof(real_T) <<
               5U);
        memcpy(&proc_control_node_B.expl_temp.MVRateMin[0],
               &proc_control_node_B.runtimedata.MVRateMin[0], sizeof(real_T) <<
               5U);
        memcpy(&proc_control_node_B.expl_temp.MVMax[0],
               &proc_control_node_B.runtimedata.MVMax[0], sizeof(real_T) << 5U);
        memcpy(&proc_control_node_B.expl_temp.MVMin[0],
               &proc_control_node_B.runtimedata.MVMin[0], sizeof(real_T) << 5U);
        memcpy(&proc_control_node_B.expl_temp.StateMax[0],
               &proc_control_node_B.runtimedata.StateMax[0], 52U * sizeof(real_T));
        memcpy(&proc_control_node_B.expl_temp.StateMin[0],
               &proc_control_node_B.runtimedata.StateMin[0], 52U * sizeof(real_T));
        memcpy(&proc_control_node_B.expl_temp.OutputMax[0],
               &proc_control_node_B.runtimedata.OutputMax[0], 52U * sizeof
               (real_T));
        memcpy(&proc_control_node_B.expl_temp.OutputMin[0],
               &proc_control_node_B.runtimedata.OutputMin[0], 52U * sizeof
               (real_T));
        proc_control_node_B.expl_temp.ECRWeight =
          proc_control_node_B.runtimedata.ECRWeight;
        memcpy(&proc_control_node_B.expl_temp.MVRateWeights[0],
               &proc_control_node_B.runtimedata.MVRateWeights[0], sizeof(real_T)
               << 5U);
        memcpy(&proc_control_node_B.expl_temp.MVWeights[0],
               &proc_control_node_B.runtimedata.MVWeights[0], sizeof(real_T) <<
               5U);
        memcpy(&proc_control_node_B.expl_temp.OutputWeights[0],
               &proc_control_node_B.runtimedata.OutputWeights[0], 52U * sizeof
               (real_T));
        memcpy(&proc_control_node_B.expl_temp.ref[0],
               &proc_control_node_B.runtimedata.ref[0], 52U * sizeof(real_T));
        memcpy(&proc_control_node_B.expl_temp.lastMV[0],
               &proc_control_node_B.runtimedata.lastMV[0], sizeof(real_T) << 3U);
        memcpy(&proc_control_node_B.expl_temp.x[0],
               &proc_control_node_B.runtimedata.x[0], 13U * sizeof(real_T));
        memcpy(&proc_control_node_B.expl_temp_c.MVScaledTarget[0],
               &proc_control_node_B.runtimedata.MVScaledTarget[0], sizeof(real_T)
               << 5U);
        memcpy(&proc_control_node_B.expl_temp_c.MVRateMax[0],
               &proc_control_node_B.runtimedata.MVRateMax[0], sizeof(real_T) <<
               5U);
        memcpy(&proc_control_node_B.expl_temp_c.MVRateMin[0],
               &proc_control_node_B.runtimedata.MVRateMin[0], sizeof(real_T) <<
               5U);
        memcpy(&proc_control_node_B.expl_temp_c.MVMax[0],
               &proc_control_node_B.runtimedata.MVMax[0], sizeof(real_T) << 5U);
        memcpy(&proc_control_node_B.expl_temp_c.MVMin[0],
               &proc_control_node_B.runtimedata.MVMin[0], sizeof(real_T) << 5U);
        memcpy(&proc_control_node_B.expl_temp_c.StateMax[0],
               &proc_control_node_B.runtimedata.StateMax[0], 52U * sizeof(real_T));
        memcpy(&proc_control_node_B.expl_temp_c.StateMin[0],
               &proc_control_node_B.runtimedata.StateMin[0], 52U * sizeof(real_T));
        memcpy(&proc_control_node_B.expl_temp_c.OutputMax[0],
               &proc_control_node_B.runtimedata.OutputMax[0], 52U * sizeof
               (real_T));
        memcpy(&proc_control_node_B.expl_temp_c.OutputMin[0],
               &proc_control_node_B.runtimedata.OutputMin[0], 52U * sizeof
               (real_T));
        proc_control_node_B.expl_temp_c.ECRWeight =
          proc_control_node_B.runtimedata.ECRWeight;
        memcpy(&proc_control_node_B.expl_temp_c.MVRateWeights[0],
               &proc_control_node_B.runtimedata.MVRateWeights[0], sizeof(real_T)
               << 5U);
        memcpy(&proc_control_node_B.expl_temp_c.MVWeights[0],
               &proc_control_node_B.runtimedata.MVWeights[0], sizeof(real_T) <<
               5U);
        memcpy(&proc_control_node_B.expl_temp_c.OutputWeights[0],
               &proc_control_node_B.runtimedata.OutputWeights[0], 52U * sizeof
               (real_T));
        memcpy(&proc_control_node_B.expl_temp_c.ref[0],
               &proc_control_node_B.runtimedata.ref[0], 52U * sizeof(real_T));
        memcpy(&proc_control_node_B.expl_temp_c.lastMV[0],
               &proc_control_node_B.runtimedata.lastMV[0], sizeof(real_T) << 3U);
        memcpy(&proc_control_node_B.expl_temp_c.x[0],
               &proc_control_node_B.runtimedata.x[0], 13U * sizeof(real_T));
        proc_control_node_fmincon(&proc_control_node_B.expl_temp,
          &proc_control_node_B.userdata, proc_control_node_B.z0,
          proc_control_node_B.A_data, proc_control_node_B.B_data_p,
          &proc_control_node_B.B_size, proc_control_node_B.zLB,
          &proc_control_node_B.expl_temp_c, &proc_control_node_B.userdata,
          proc_control_node_B.zUB, &proc_control_node_B.Product2_ks,
          &proc_control_node_B.nlpstatus, &proc_control_node_B.Product3_na,
          &proc_control_node_B.Product1_dz, proc_control_node_B.expl_temp_b,
          &proc_control_node_B.fcn2, &proc_control_node_B.Product1_a5,
          &proc_control_node_B.t12, &proc_control_node_B.t25);
        if ((proc_control_node_B.nlpstatus == 0.0) && (proc_control_node_B.fcn2 >
             0.02)) {
          proc_control_node_B.nlpstatus = -2.0;
        }

        proc_control_node_znlmpc_getXUe(proc_control_node_B.zUB,
          proc_control_node_B.TmpSignalConversionAtTran_h, proc_control_node_B.X,
          proc_control_node_B.U, &proc_control_node_B.Product2_ks);
        if (proc_control_node_B.nlpstatus > 0.0) {
          for (proc_control_node_B.i_n = 0; proc_control_node_B.i_n < 8;
               proc_control_node_B.i_n++) {
            proc_control_node_DW.Delay_DSTATE_b[proc_control_node_B.i_n] =
              proc_control_node_B.U[5 * proc_control_node_B.i_n];
          }
        }

        // End of MATLAB Function: '<S94>/NLMPC'

        // Merge: '<S9>/Merge' incorporates:
        //   Delay: '<S90>/Delay'
        //   SignalConversion generated from: '<S90>/mv'

        memcpy(&proc_control_node_B.Merge[0],
               &proc_control_node_DW.Delay_DSTATE_b[0], sizeof(real_T) << 3U);

        // DiscretePulseGenerator: '<S90>/Pulse Generator'
        proc_control_node_B.PulseGenerator =
          (proc_control_node_DW.clockTickCounter <
           proc_control_node_P.PulseGenerator_Duty) &&
          (proc_control_node_DW.clockTickCounter >= 0) ?
          proc_control_node_P.PulseGenerator_Amp : 0.0;

        // DiscretePulseGenerator: '<S90>/Pulse Generator'
        if (proc_control_node_DW.clockTickCounter >=
            proc_control_node_P.PulseGenerator_Period - 1.0) {
          proc_control_node_DW.clockTickCounter = 0;
        } else {
          proc_control_node_DW.clockTickCounter++;
        }

        if (rtmIsMajorTimeStep(proc_control_node_M)) {
          srUpdateBC(proc_control_node_DW.QuaternionNonlinearMPC_SubsysRa);
        }

        // End of Outputs for SubSystem: '<S9>/Quaternion Non linear MPC'
        break;

       case 1:
        // Outputs for IfAction SubSystem: '<S9>/JoyStick OpenLoop' incorporates:
        //   ActionPort: '<S89>/Action Port'

        // SampleTimeMath: '<S91>/TSamp' incorporates:
        //   Merge: '<S11>/Merge'
        //   Selector: '<S89>/Selector'
        //
        //  About '<S91>/TSamp':
        //   y = u * K where K = 1 / ( w * Ts )

        for (proc_control_node_B.i_n = 0; proc_control_node_B.i_n < 6;
             proc_control_node_B.i_n++) {
          proc_control_node_B.Gain_o[proc_control_node_B.i_n] =
            proc_control_node_B.Quaternion[(proc_control_node_B.i_n + 7) << 2] *
            proc_control_node_P.TSamp_WtEt;
        }

        // End of SampleTimeMath: '<S91>/TSamp'

        // MATLABSystem: '<S89>/MATLAB System' incorporates:
        //   Merge: '<S11>/Merge'
        //   Selector: '<S89>/Selector'

        if (proc_control_node_DW.obj_m.k != proc_control_node_P.MATLABSystem_k)
        {
          proc_control_node_DW.obj_m.k = proc_control_node_P.MATLABSystem_k;
        }

        proc_control_node_B.OR1 = false;
        proc_control_node_B.SourceBlock_o1_j = true;
        proc_control_node_B.i_n = 0;
        exitg1 = false;
        while ((!exitg1) && (proc_control_node_B.i_n < 48)) {
          if (!(proc_control_node_DW.obj_m.binv[proc_control_node_B.i_n] ==
                proc_control_node_P.binv[proc_control_node_B.i_n])) {
            proc_control_node_B.SourceBlock_o1_j = false;
            exitg1 = true;
          } else {
            proc_control_node_B.i_n++;
          }
        }

        if (proc_control_node_B.SourceBlock_o1_j) {
          proc_control_node_B.OR1 = true;
        }

        if (!proc_control_node_B.OR1) {
          memcpy(&proc_control_node_DW.obj_m.binv[0], &proc_control_node_P.binv
                 [0], 48U * sizeof(real_T));
        }

        if (proc_control_node_DW.obj_m.mass != proc_control_node_P.physics.mass)
        {
          proc_control_node_DW.obj_m.mass = proc_control_node_P.physics.mass;
        }

        if (proc_control_node_DW.obj_m.volume !=
            proc_control_node_P.physics.volume) {
          proc_control_node_DW.obj_m.volume = proc_control_node_P.physics.volume;
        }

        if (proc_control_node_DW.obj_m.height !=
            proc_control_node_P.physics.height) {
          proc_control_node_DW.obj_m.height = proc_control_node_P.physics.height;
        }

        proc_control_node_B.OR1 = false;
        proc_control_node_B.SourceBlock_o1_j = true;
        proc_control_node_B.i_n = 0;
        exitg1 = false;
        while ((!exitg1) && (proc_control_node_B.i_n < 9)) {
          if (!(proc_control_node_DW.obj_m.I[proc_control_node_B.i_n] ==
                proc_control_node_P.physics.I[proc_control_node_B.i_n])) {
            proc_control_node_B.SourceBlock_o1_j = false;
            exitg1 = true;
          } else {
            proc_control_node_B.i_n++;
          }
        }

        if (proc_control_node_B.SourceBlock_o1_j) {
          proc_control_node_B.OR1 = true;
        }

        if (!proc_control_node_B.OR1) {
          memcpy(&proc_control_node_DW.obj_m.I[0],
                 &proc_control_node_P.physics.I[0], 9U * sizeof(real_T));
        }

        if (!proc_control_node_isequal(proc_control_node_DW.obj_m.RG,
             proc_control_node_P.physics.RG)) {
          proc_control_node_DW.obj_m.RG[0] = proc_control_node_P.physics.RG[0];
          proc_control_node_DW.obj_m.RG[1] = proc_control_node_P.physics.RG[1];
          proc_control_node_DW.obj_m.RG[2] = proc_control_node_P.physics.RG[2];
        }

        if (!proc_control_node_isequal(proc_control_node_DW.obj_m.RB,
             proc_control_node_P.physics.RB)) {
          proc_control_node_DW.obj_m.RB[0] = proc_control_node_P.physics.RB[0];
          proc_control_node_DW.obj_m.RB[1] = proc_control_node_P.physics.RB[1];
          proc_control_node_DW.obj_m.RB[2] = proc_control_node_P.physics.RB[2];
        }

        if (!proc_control_node_isequal_b4nw(proc_control_node_DW.obj_m.AddedMass,
             proc_control_node_P.physics.AddedMass)) {
          for (proc_control_node_B.i_n = 0; proc_control_node_B.i_n < 6;
               proc_control_node_B.i_n++) {
            proc_control_node_DW.obj_m.AddedMass[proc_control_node_B.i_n] =
              proc_control_node_P.physics.AddedMass[proc_control_node_B.i_n];
          }
        }

        if (!proc_control_node_isequal_b4nw(proc_control_node_DW.obj_m.CDL,
             proc_control_node_P.physics.CDL)) {
          for (proc_control_node_B.i_n = 0; proc_control_node_B.i_n < 6;
               proc_control_node_B.i_n++) {
            proc_control_node_DW.obj_m.CDL[proc_control_node_B.i_n] =
              proc_control_node_P.physics.CDL[proc_control_node_B.i_n];
          }
        }

        if (!proc_control_node_isequal_b4nw(proc_control_node_DW.obj_m.CDQ,
             proc_control_node_P.physics.CDQ)) {
          for (proc_control_node_B.i_n = 0; proc_control_node_B.i_n < 6;
               proc_control_node_B.i_n++) {
            proc_control_node_DW.obj_m.CDQ[proc_control_node_B.i_n] =
              proc_control_node_P.physics.CDQ[proc_control_node_B.i_n];
          }
        }

        if (!proc_control_node_isequal(proc_control_node_DW.obj_m.AF,
             proc_control_node_P.physics.AF)) {
          proc_control_node_DW.obj_m.AF[0] = proc_control_node_P.physics.AF[0];
          proc_control_node_DW.obj_m.AF[1] = proc_control_node_P.physics.AF[1];
          proc_control_node_DW.obj_m.AF[2] = proc_control_node_P.physics.AF[2];
        }

        if (proc_control_node_DW.obj_m.g != proc_control_node_P.physics.g) {
          proc_control_node_DW.obj_m.g = proc_control_node_P.physics.g;
        }

        if (proc_control_node_DW.obj_m.rho != proc_control_node_P.physics.rho) {
          proc_control_node_DW.obj_m.rho = proc_control_node_P.physics.rho;
        }

        //  Implement algorithm. Calculate y as a function of input u and
        //  discrete states.
        switch (proc_control_node_B.Data) {
         case 20U:
          //  Open loop avec modèle physique
          //  Construire le vecteur constantes
          proc_control_node_B.constValues[0] = proc_control_node_DW.obj_m.mass;
          proc_control_node_B.constValues[1] = proc_control_node_DW.obj_m.volume;
          proc_control_node_B.constValues[3] = proc_control_node_DW.obj_m.AF[0];
          proc_control_node_B.constValues[6] = proc_control_node_DW.obj_m.I[0];
          proc_control_node_B.constValues[9] = proc_control_node_DW.obj_m.I[1];
          proc_control_node_B.constValues[12] = proc_control_node_DW.obj_m.I[2];
          proc_control_node_B.constValues[15] = proc_control_node_DW.obj_m.RG[0];
          proc_control_node_B.constValues[18] = proc_control_node_DW.obj_m.RB[0];
          proc_control_node_B.constValues[4] = proc_control_node_DW.obj_m.AF[1];
          proc_control_node_B.constValues[7] = proc_control_node_DW.obj_m.I[3];
          proc_control_node_B.constValues[10] = proc_control_node_DW.obj_m.I[4];
          proc_control_node_B.constValues[13] = proc_control_node_DW.obj_m.I[5];
          proc_control_node_B.constValues[16] = proc_control_node_DW.obj_m.RG[1];
          proc_control_node_B.constValues[19] = proc_control_node_DW.obj_m.RB[1];
          proc_control_node_B.constValues[5] = proc_control_node_DW.obj_m.AF[2];
          proc_control_node_B.constValues[8] = proc_control_node_DW.obj_m.I[6];
          proc_control_node_B.constValues[11] = proc_control_node_DW.obj_m.I[7];
          proc_control_node_B.constValues[14] = proc_control_node_DW.obj_m.I[8];
          proc_control_node_B.constValues[17] = proc_control_node_DW.obj_m.RG[2];
          proc_control_node_B.constValues[20] = proc_control_node_DW.obj_m.RB[2];
          proc_control_node_B.constValues[39] = proc_control_node_DW.obj_m.rho;
          proc_control_node_B.constValues[40] = proc_control_node_DW.obj_m.g;

          // construire le vecteur state avec la imu et spaceNAV
          proc_control_node_B.TmpSignalConversionAtTran_h[3] = 1.0;
          proc_control_node_B.TmpSignalConversionAtTran_h[4] = 0.0;
          proc_control_node_B.TmpSignalConversionAtTran_h[5] = 0.0;
          proc_control_node_B.TmpSignalConversionAtTran_h[6] = 0.0;
          for (proc_control_node_B.i_n = 0; proc_control_node_B.i_n < 6;
               proc_control_node_B.i_n++) {
            proc_control_node_B.constValues[proc_control_node_B.i_n + 21] =
              proc_control_node_DW.obj_m.CDL[proc_control_node_B.i_n];
            proc_control_node_B.constValues[proc_control_node_B.i_n + 27] =
              proc_control_node_DW.obj_m.CDQ[proc_control_node_B.i_n];
            proc_control_node_B.constValues[proc_control_node_B.i_n + 33] =
              proc_control_node_DW.obj_m.AddedMass[proc_control_node_B.i_n];
            proc_control_node_B.TmpSignalConversionAtTran_h[proc_control_node_B.i_n
              + 7] = proc_control_node_B.Quaternion[(proc_control_node_B.i_n + 7)
              << 2];
          }

          // [0;0;0;mo(4:7);ref.'];;
          //  Déterminer les matrices du modèle physique
          // AUVMODELMATRICES
          //     [M,C,D,GQ] = AUVMODELMATRICES(IN1,IN2)
          //     This function was generated by the Symbolic Math Toolbox version 8.5. 
          //     10-Jul-2021 18:28:11
          proc_control_node_B.t2 = proc_control_node_B.constValues[6] *
            proc_control_node_B.TmpSignalConversionAtTran_h[10];
          proc_control_node_B.t3 = proc_control_node_B.constValues[9] *
            proc_control_node_B.TmpSignalConversionAtTran_h[10];
          proc_control_node_B.t4 =
            proc_control_node_B.TmpSignalConversionAtTran_h[10] *
            proc_control_node_B.constValues[12];
          proc_control_node_B.t5 = proc_control_node_B.constValues[7] *
            proc_control_node_B.TmpSignalConversionAtTran_h[11];
          proc_control_node_B.t6 = proc_control_node_B.constValues[10] *
            proc_control_node_B.TmpSignalConversionAtTran_h[11];
          proc_control_node_B.t7 =
            proc_control_node_B.TmpSignalConversionAtTran_h[11] *
            proc_control_node_B.constValues[13];
          proc_control_node_B.Product3_na = proc_control_node_B.constValues[8] *
            proc_control_node_B.TmpSignalConversionAtTran_h[12];
          proc_control_node_B.Product1_dz = proc_control_node_B.constValues[11] *
            proc_control_node_B.TmpSignalConversionAtTran_h[12];
          proc_control_node_B.fcn2 =
            proc_control_node_B.TmpSignalConversionAtTran_h[12] *
            proc_control_node_B.constValues[14];
          proc_control_node_B.Product1_a5 =
            proc_control_node_B.TmpSignalConversionAtTran_h[10] *
            proc_control_node_B.constValues[36];
          proc_control_node_B.t12 =
            proc_control_node_B.TmpSignalConversionAtTran_h[11] *
            proc_control_node_B.constValues[37];
          proc_control_node_B.Product2_ks = proc_control_node_B.constValues[0] *
            proc_control_node_B.constValues[15];
          proc_control_node_B.t14 = proc_control_node_B.constValues[0] *
            proc_control_node_B.constValues[16];
          proc_control_node_B.t15 = proc_control_node_B.constValues[0] *
            proc_control_node_B.constValues[17];
          proc_control_node_B.t16 =
            proc_control_node_B.TmpSignalConversionAtTran_h[12] *
            proc_control_node_B.constValues[38];
          proc_control_node_B.t17 =
            proc_control_node_B.TmpSignalConversionAtTran_h[10] *
            proc_control_node_B.constValues[15];
          proc_control_node_B.t21 =
            proc_control_node_B.TmpSignalConversionAtTran_h[11] *
            proc_control_node_B.constValues[16];
          proc_control_node_B.t25 =
            proc_control_node_B.TmpSignalConversionAtTran_h[12] *
            proc_control_node_B.constValues[17];
          proc_control_node_B.t26 =
            proc_control_node_B.TmpSignalConversionAtTran_h[7] *
            proc_control_node_B.constValues[33];
          proc_control_node_B.t27 =
            proc_control_node_B.TmpSignalConversionAtTran_h[8] *
            proc_control_node_B.constValues[34];
          proc_control_node_B.t28 =
            proc_control_node_B.TmpSignalConversionAtTran_h[9] *
            proc_control_node_B.constValues[35];
          proc_control_node_B.t29 = proc_control_node_B.constValues[1] *
            proc_control_node_B.constValues[39];
          proc_control_node_B.TransferFcn_l =
            proc_control_node_B.TmpSignalConversionAtTran_h[5] *
            proc_control_node_B.TmpSignalConversionAtTran_h[6];
          proc_control_node_B.TransferFcn_b =
            proc_control_node_B.TmpSignalConversionAtTran_h[3] *
            proc_control_node_B.TmpSignalConversionAtTran_h[4];
          proc_control_node_B.t65 = proc_control_node_B.TransferFcn_l * 2.0 +
            proc_control_node_B.TransferFcn_b * 2.0;
          proc_control_node_B.fcn3 =
            (proc_control_node_B.TmpSignalConversionAtTran_h[11] *
             proc_control_node_B.constValues[17] +
             proc_control_node_B.TmpSignalConversionAtTran_h[7]) *
            proc_control_node_B.constValues[0];
          proc_control_node_B.t57 =
            (proc_control_node_B.TmpSignalConversionAtTran_h[10] *
             proc_control_node_B.constValues[16] +
             proc_control_node_B.TmpSignalConversionAtTran_h[9]) *
            proc_control_node_B.constValues[0];
          proc_control_node_B.t58 =
            (proc_control_node_B.TmpSignalConversionAtTran_h[12] *
             proc_control_node_B.constValues[15] +
             proc_control_node_B.TmpSignalConversionAtTran_h[8]) *
            proc_control_node_B.constValues[0];
          proc_control_node_B.t62 = (proc_control_node_B.t17 +
            proc_control_node_B.t21) * proc_control_node_B.constValues[0];
          proc_control_node_B.t17 = (proc_control_node_B.t17 +
            proc_control_node_B.t25) * proc_control_node_B.constValues[0];
          proc_control_node_B.t64 = (proc_control_node_B.t21 +
            proc_control_node_B.t25) * proc_control_node_B.constValues[0];
          proc_control_node_B.t21 =
            proc_control_node_B.TmpSignalConversionAtTran_h[4] *
            proc_control_node_B.TmpSignalConversionAtTran_h[6];
          proc_control_node_B.t20 =
            proc_control_node_B.TmpSignalConversionAtTran_h[3] *
            proc_control_node_B.TmpSignalConversionAtTran_h[5];
          proc_control_node_B.t25 = proc_control_node_B.t21 * 2.0 +
            -(proc_control_node_B.t20 * 2.0);
          proc_control_node_B.t70 =
            (proc_control_node_B.TmpSignalConversionAtTran_h[4] *
             proc_control_node_B.TmpSignalConversionAtTran_h[4] * 2.0 +
             proc_control_node_B.TmpSignalConversionAtTran_h[5] *
             proc_control_node_B.TmpSignalConversionAtTran_h[5] * 2.0) - 1.0;

          //  CAlculer la comande
          proc_control_node_B.pp_coefs[0] = -proc_control_node_B.constValues[33]
            + proc_control_node_B.constValues[0];
          proc_control_node_B.pp_coefs[1] = 0.0;
          proc_control_node_B.pp_coefs[2] = 0.0;
          proc_control_node_B.pp_coefs[3] = 0.0;
          proc_control_node_B.pp_coefs[4] = proc_control_node_B.t15;
          proc_control_node_B.pp_coefs[5] = -proc_control_node_B.t14;
          proc_control_node_B.pp_coefs[6] = 0.0;
          proc_control_node_B.pp_coefs[7] = -proc_control_node_B.constValues[34]
            + proc_control_node_B.constValues[0];
          proc_control_node_B.pp_coefs[8] = 0.0;
          proc_control_node_B.pp_coefs[9] = -proc_control_node_B.t15;
          proc_control_node_B.pp_coefs[10] = 0.0;
          proc_control_node_B.pp_coefs[11] = proc_control_node_B.Product2_ks;
          proc_control_node_B.pp_coefs[12] = 0.0;
          proc_control_node_B.pp_coefs[13] = 0.0;
          proc_control_node_B.pp_coefs[14] = -proc_control_node_B.constValues[35]
            + proc_control_node_B.constValues[0];
          proc_control_node_B.pp_coefs[15] = proc_control_node_B.t14;
          proc_control_node_B.pp_coefs[16] = -proc_control_node_B.Product2_ks;
          proc_control_node_B.pp_coefs[17] = 0.0;
          proc_control_node_B.pp_coefs[18] = 0.0;
          proc_control_node_B.pp_coefs[19] = -proc_control_node_B.t15;
          proc_control_node_B.pp_coefs[20] = proc_control_node_B.t14;
          proc_control_node_B.pp_coefs[21] = proc_control_node_B.constValues[6]
            - proc_control_node_B.constValues[36];
          proc_control_node_B.pp_coefs[22] = proc_control_node_B.constValues[9];
          proc_control_node_B.pp_coefs[23] = proc_control_node_B.constValues[12];
          proc_control_node_B.pp_coefs[24] = proc_control_node_B.t15;
          proc_control_node_B.pp_coefs[25] = 0.0;
          proc_control_node_B.pp_coefs[26] = -proc_control_node_B.Product2_ks;
          proc_control_node_B.pp_coefs[27] = proc_control_node_B.constValues[7];
          proc_control_node_B.pp_coefs[28] = proc_control_node_B.constValues[10]
            - proc_control_node_B.constValues[37];
          proc_control_node_B.pp_coefs[29] = proc_control_node_B.constValues[13];
          proc_control_node_B.pp_coefs[30] = -proc_control_node_B.t14;
          proc_control_node_B.pp_coefs[31] = proc_control_node_B.Product2_ks;
          proc_control_node_B.pp_coefs[32] = 0.0;
          proc_control_node_B.pp_coefs[33] = proc_control_node_B.constValues[8];
          proc_control_node_B.pp_coefs[34] = proc_control_node_B.constValues[11];
          proc_control_node_B.pp_coefs[35] = proc_control_node_B.constValues[14]
            - proc_control_node_B.constValues[38];

          // Sum: '<S91>/Diff' incorporates:
          //   Merge: '<S11>/Merge'
          //   SampleTimeMath: '<S91>/TSamp'
          //   Selector: '<S89>/Selector'
          //   UnitDelay: '<S91>/UD'
          //
          //  About '<S91>/TSamp':
          //   y = u * K where K = 1 / ( w * Ts )
          //
          //  Block description for '<S91>/Diff':
          //
          //   Add in CPU
          //
          //  Block description for '<S91>/UD':
          //
          //   Store in Global RAM

          for (proc_control_node_B.i_n = 0; proc_control_node_B.i_n < 6;
               proc_control_node_B.i_n++) {
            proc_control_node_B.a__3[proc_control_node_B.i_n] =
              proc_control_node_B.Gain_o[proc_control_node_B.i_n] -
              proc_control_node_DW.UD_DSTATE[proc_control_node_B.i_n];
          }

          // End of Sum: '<S91>/Diff'
          proc_control_node_B.dCoefs[0] = 0.0;
          proc_control_node_B.dCoefs[1] = 0.0;
          proc_control_node_B.dCoefs[2] = 0.0;
          proc_control_node_B.dCoefs[3] = -proc_control_node_B.t64;
          proc_control_node_B.TransferFcn_a =
            proc_control_node_B.TmpSignalConversionAtTran_h[11] *
            proc_control_node_B.constValues[15] -
            proc_control_node_B.TmpSignalConversionAtTran_h[9];
          proc_control_node_B.dCoefs[4] = proc_control_node_B.TransferFcn_a *
            proc_control_node_B.constValues[0] + proc_control_node_B.t28;
          proc_control_node_B.dCoefs[5] = -proc_control_node_B.t27 +
            proc_control_node_B.t58;
          proc_control_node_B.dCoefs[6] = 0.0;
          proc_control_node_B.dCoefs[7] = 0.0;
          proc_control_node_B.dCoefs[8] = 0.0;
          proc_control_node_B.dCoefs[9] = -proc_control_node_B.t28 +
            proc_control_node_B.t57;
          proc_control_node_B.dCoefs[10] = -proc_control_node_B.t17;
          proc_control_node_B.t19 =
            proc_control_node_B.TmpSignalConversionAtTran_h[12] *
            proc_control_node_B.constValues[16] -
            proc_control_node_B.TmpSignalConversionAtTran_h[7];
          proc_control_node_B.dCoefs[11] = proc_control_node_B.t19 *
            proc_control_node_B.constValues[0] + proc_control_node_B.t26;
          proc_control_node_B.dCoefs[12] = 0.0;
          proc_control_node_B.dCoefs[13] = 0.0;
          proc_control_node_B.dCoefs[14] = 0.0;
          proc_control_node_B.t22 =
            proc_control_node_B.TmpSignalConversionAtTran_h[10] *
            proc_control_node_B.constValues[17] -
            proc_control_node_B.TmpSignalConversionAtTran_h[8];
          proc_control_node_B.dCoefs[15] = proc_control_node_B.t22 *
            proc_control_node_B.constValues[0] + proc_control_node_B.t27;
          proc_control_node_B.dCoefs[16] = -proc_control_node_B.t26 +
            proc_control_node_B.fcn3;
          proc_control_node_B.dCoefs[17] = -proc_control_node_B.t62;
          proc_control_node_B.dCoefs[18] = proc_control_node_B.t64;
          proc_control_node_B.dCoefs[19] = proc_control_node_B.t28 -
            proc_control_node_B.t57;
          proc_control_node_B.dCoefs[20] = proc_control_node_B.t22 *
            -proc_control_node_B.constValues[0] + -proc_control_node_B.t27;
          proc_control_node_B.dCoefs[21] = 0.0;
          proc_control_node_B.dCoefs[22] = ((-proc_control_node_B.t4 -
            proc_control_node_B.t7) - proc_control_node_B.fcn2) +
            proc_control_node_B.t16;
          proc_control_node_B.dCoefs[23] = ((proc_control_node_B.t3 +
            proc_control_node_B.t6) + proc_control_node_B.Product1_dz) -
            proc_control_node_B.t12;
          proc_control_node_B.dCoefs[24] = proc_control_node_B.TransferFcn_a *
            -proc_control_node_B.constValues[0] + -proc_control_node_B.t28;
          proc_control_node_B.dCoefs[25] = proc_control_node_B.t17;
          proc_control_node_B.dCoefs[26] = proc_control_node_B.t26 -
            proc_control_node_B.fcn3;
          proc_control_node_B.dCoefs[27] = ((proc_control_node_B.t4 +
            proc_control_node_B.t7) + proc_control_node_B.fcn2) -
            proc_control_node_B.t16;
          proc_control_node_B.dCoefs[28] = 0.0;
          proc_control_node_B.dCoefs[29] = ((-proc_control_node_B.t2 -
            proc_control_node_B.t5) - proc_control_node_B.Product3_na) +
            proc_control_node_B.Product1_a5;
          proc_control_node_B.dCoefs[30] = proc_control_node_B.t27 -
            proc_control_node_B.t58;
          proc_control_node_B.dCoefs[31] = proc_control_node_B.t19 *
            -proc_control_node_B.constValues[0] + -proc_control_node_B.t26;
          proc_control_node_B.dCoefs[32] = proc_control_node_B.t62;
          proc_control_node_B.dCoefs[33] = ((-proc_control_node_B.t3 -
            proc_control_node_B.t6) - proc_control_node_B.Product1_dz) +
            proc_control_node_B.t12;
          proc_control_node_B.dCoefs[34] = ((proc_control_node_B.t2 +
            proc_control_node_B.t5) + proc_control_node_B.Product3_na) -
            proc_control_node_B.Product1_a5;
          proc_control_node_B.dCoefs[35] = 0.0;
          proc_control_node_B.constValues_d[0] =
            proc_control_node_B.constValues[3] *
            proc_control_node_B.constValues[27] *
            proc_control_node_B.constValues[39] * fabs
            (proc_control_node_B.TmpSignalConversionAtTran_h[7]) / 2.0 +
            proc_control_node_B.constValues[21];
          proc_control_node_B.constValues_d[1] = 0.0;
          proc_control_node_B.constValues_d[2] = 0.0;
          proc_control_node_B.constValues_d[3] = 0.0;
          proc_control_node_B.constValues_d[4] = 0.0;
          proc_control_node_B.constValues_d[5] = 0.0;
          proc_control_node_B.constValues_d[6] = 0.0;
          proc_control_node_B.constValues_d[7] =
            proc_control_node_B.constValues[4] *
            proc_control_node_B.constValues[28] *
            proc_control_node_B.constValues[39] * fabs
            (proc_control_node_B.TmpSignalConversionAtTran_h[8]) / 2.0 +
            proc_control_node_B.constValues[22];
          proc_control_node_B.constValues_d[8] = 0.0;
          proc_control_node_B.constValues_d[9] = 0.0;
          proc_control_node_B.constValues_d[10] = 0.0;
          proc_control_node_B.constValues_d[11] = 0.0;
          proc_control_node_B.constValues_d[12] = 0.0;
          proc_control_node_B.constValues_d[13] = 0.0;
          proc_control_node_B.constValues_d[14] =
            proc_control_node_B.constValues[5] *
            proc_control_node_B.constValues[29] *
            proc_control_node_B.constValues[39] * fabs
            (proc_control_node_B.TmpSignalConversionAtTran_h[9]) / 2.0 +
            proc_control_node_B.constValues[23];
          proc_control_node_B.constValues_d[15] = 0.0;
          proc_control_node_B.constValues_d[16] = 0.0;
          proc_control_node_B.constValues_d[17] = 0.0;
          proc_control_node_B.constValues_d[18] = 0.0;
          proc_control_node_B.constValues_d[19] = 0.0;
          proc_control_node_B.constValues_d[20] = 0.0;
          proc_control_node_B.constValues_d[21] =
            proc_control_node_B.constValues[5] *
            proc_control_node_B.constValues[30] *
            proc_control_node_B.constValues[39] * fabs
            (proc_control_node_B.TmpSignalConversionAtTran_h[10]) / 2.0 +
            proc_control_node_B.constValues[24];
          proc_control_node_B.constValues_d[22] = 0.0;
          proc_control_node_B.constValues_d[23] = 0.0;
          proc_control_node_B.constValues_d[24] = 0.0;
          proc_control_node_B.constValues_d[25] = 0.0;
          proc_control_node_B.constValues_d[26] = 0.0;
          proc_control_node_B.constValues_d[27] = 0.0;
          proc_control_node_B.constValues_d[28] =
            proc_control_node_B.constValues[5] *
            proc_control_node_B.constValues[31] *
            proc_control_node_B.constValues[39] * fabs
            (proc_control_node_B.TmpSignalConversionAtTran_h[11]) / 2.0 +
            proc_control_node_B.constValues[25];
          proc_control_node_B.constValues_d[29] = 0.0;
          proc_control_node_B.constValues_d[30] = 0.0;
          proc_control_node_B.constValues_d[31] = 0.0;
          proc_control_node_B.constValues_d[32] = 0.0;
          proc_control_node_B.constValues_d[33] = 0.0;
          proc_control_node_B.constValues_d[34] = 0.0;
          proc_control_node_B.constValues_d[35] =
            proc_control_node_B.constValues[4] *
            proc_control_node_B.constValues[32] *
            proc_control_node_B.constValues[39] * fabs
            (proc_control_node_B.TmpSignalConversionAtTran_h[12]) / 2.0 +
            proc_control_node_B.constValues[26];
          for (proc_control_node_B.i_n = 0; proc_control_node_B.i_n < 36;
               proc_control_node_B.i_n++) {
            proc_control_node_B.dv8[proc_control_node_B.i_n] =
              proc_control_node_B.dCoefs[proc_control_node_B.i_n] +
              proc_control_node_B.constValues_d[proc_control_node_B.i_n];
          }

          proc_control_node_B.Product3_na = proc_control_node_B.constValues[40] *
            (proc_control_node_B.constValues[0] + -proc_control_node_B.t29);
          proc_control_node_B.constValues_b[0] = (proc_control_node_B.t21 -
            proc_control_node_B.t20) * proc_control_node_B.Product3_na * -2.0;
          proc_control_node_B.constValues_b[1] =
            (proc_control_node_B.TransferFcn_l +
             proc_control_node_B.TransferFcn_b) *
            proc_control_node_B.Product3_na * -2.0;
          proc_control_node_B.constValues_b[2] = proc_control_node_B.Product3_na
            * proc_control_node_B.t70;
          proc_control_node_B.Product3_na = proc_control_node_B.constValues[20] *
            proc_control_node_B.constValues[40];
          proc_control_node_B.Product1_dz = proc_control_node_B.constValues[40] *
            proc_control_node_B.t14;
          proc_control_node_B.fcn2 = proc_control_node_B.constValues[19] *
            proc_control_node_B.constValues[40] * -proc_control_node_B.t29;
          proc_control_node_B.constValues_b[3] =
            ((proc_control_node_B.constValues[40] * proc_control_node_B.t15 *
              proc_control_node_B.t65 + proc_control_node_B.Product1_dz *
              proc_control_node_B.t70) + proc_control_node_B.Product3_na *
             -proc_control_node_B.t29 * proc_control_node_B.t65) +
            proc_control_node_B.fcn2 * proc_control_node_B.t70;
          proc_control_node_B.Product2_ks = proc_control_node_B.constValues[40] *
            -proc_control_node_B.Product2_ks;
          proc_control_node_B.Product1_a5 = proc_control_node_B.constValues[18] *
            proc_control_node_B.constValues[40] * proc_control_node_B.t29;
          proc_control_node_B.constValues_b[4] =
            ((proc_control_node_B.Product2_ks * proc_control_node_B.t70 +
              proc_control_node_B.constValues[40] * -proc_control_node_B.t15 *
              proc_control_node_B.t25) + proc_control_node_B.Product1_a5 *
             proc_control_node_B.t70) + proc_control_node_B.Product3_na *
            proc_control_node_B.t29 * proc_control_node_B.t25;
          proc_control_node_B.constValues_b[5] =
            ((proc_control_node_B.Product1_dz * proc_control_node_B.t25 +
              proc_control_node_B.Product2_ks * proc_control_node_B.t65) +
             proc_control_node_B.Product1_a5 * proc_control_node_B.t65) +
            proc_control_node_B.fcn2 * proc_control_node_B.t25;
          for (proc_control_node_B.i_n = 0; proc_control_node_B.i_n < 6;
               proc_control_node_B.i_n++) {
            proc_control_node_B.a__4[proc_control_node_B.i_n] = 0.0;
            proc_control_node_B.dv19[proc_control_node_B.i_n] = 0.0;
            for (proc_control_node_B.Selector1_tmp = 0;
                 proc_control_node_B.Selector1_tmp < 6;
                 proc_control_node_B.Selector1_tmp++) {
              proc_control_node_B.Selector1_tmp_c = 6 *
                proc_control_node_B.Selector1_tmp + proc_control_node_B.i_n;
              proc_control_node_B.a__4[proc_control_node_B.i_n] +=
                proc_control_node_B.pp_coefs[proc_control_node_B.Selector1_tmp_c]
                * proc_control_node_B.a__3[proc_control_node_B.Selector1_tmp];
              proc_control_node_B.dv19[proc_control_node_B.i_n] +=
                proc_control_node_B.dv8[proc_control_node_B.Selector1_tmp_c] *
                proc_control_node_B.Quaternion
                [(proc_control_node_B.Selector1_tmp + 7) << 2];
            }

            proc_control_node_B.constValues_da[proc_control_node_B.i_n] =
              (proc_control_node_B.a__4[proc_control_node_B.i_n] +
               proc_control_node_B.dv19[proc_control_node_B.i_n]) +
              proc_control_node_B.constValues_b[proc_control_node_B.i_n];
          }

          // MATLABSystem: '<S89>/MATLAB System' incorporates:
          //   Merge: '<S11>/Merge'
          //   Selector: '<S89>/Selector'

          for (proc_control_node_B.i_n = 0; proc_control_node_B.i_n < 8;
               proc_control_node_B.i_n++) {
            proc_control_node_B.MATLABSystem[proc_control_node_B.i_n] = 0.0;
            for (proc_control_node_B.Selector1_tmp = 0;
                 proc_control_node_B.Selector1_tmp < 6;
                 proc_control_node_B.Selector1_tmp++) {
              proc_control_node_B.MATLABSystem[proc_control_node_B.i_n] +=
                proc_control_node_DW.obj_m.binv
                [(proc_control_node_B.Selector1_tmp << 3) +
                proc_control_node_B.i_n] *
                proc_control_node_B.constValues_da[proc_control_node_B.Selector1_tmp];
            }
          }
          break;

         case 21U:
          // MATLABSystem: '<S89>/MATLAB System' incorporates:
          //   Merge: '<S11>/Merge'
          //   Selector: '<S89>/Selector'

          //  Open loop matrice b invese directe
          for (proc_control_node_B.i_n = 0; proc_control_node_B.i_n < 8;
               proc_control_node_B.i_n++) {
            proc_control_node_B.twpt[proc_control_node_B.i_n] = 0.0;
            for (proc_control_node_B.Selector1_tmp = 0;
                 proc_control_node_B.Selector1_tmp < 6;
                 proc_control_node_B.Selector1_tmp++) {
              proc_control_node_B.twpt[proc_control_node_B.i_n] +=
                proc_control_node_DW.obj_m.binv
                [(proc_control_node_B.Selector1_tmp << 3) +
                proc_control_node_B.i_n] * proc_control_node_B.Quaternion
                [(proc_control_node_B.Selector1_tmp + 7) << 2];
            }

            proc_control_node_B.MATLABSystem[proc_control_node_B.i_n] =
              proc_control_node_B.twpt[proc_control_node_B.i_n] *
              proc_control_node_DW.obj_m.k;
          }
          break;

         default:
          // MATLABSystem: '<S89>/MATLAB System'
          memset(&proc_control_node_B.MATLABSystem[0], 0, sizeof(real_T) << 3U);
          break;
        }

        // End of MATLABSystem: '<S89>/MATLAB System'
        // Merge: '<S9>/Merge' incorporates:
        //   MATLABSystem: '<S89>/MATLAB System'
        //   SignalConversion generated from: '<S89>/Out1'

        memcpy(&proc_control_node_B.Merge[0], &proc_control_node_B.MATLABSystem
               [0], sizeof(real_T) << 3U);

        // Update for UnitDelay: '<S91>/UD' incorporates:
        //   SampleTimeMath: '<S91>/TSamp'
        //
        //  About '<S91>/TSamp':
        //   y = u * K where K = 1 / ( w * Ts )
        //
        //  Block description for '<S91>/UD':
        //
        //   Store in Global RAM

        for (proc_control_node_B.i_n = 0; proc_control_node_B.i_n < 6;
             proc_control_node_B.i_n++) {
          proc_control_node_DW.UD_DSTATE[proc_control_node_B.i_n] =
            proc_control_node_B.Gain_o[proc_control_node_B.i_n];
        }

        // End of Update for UnitDelay: '<S91>/UD'
        if (rtmIsMajorTimeStep(proc_control_node_M)) {
          srUpdateBC(proc_control_node_DW.JoyStickOpenLoop_SubsysRanBC);
        }

        // End of Outputs for SubSystem: '<S9>/JoyStick OpenLoop'
        break;

       case 2:
        // Outputs for IfAction SubSystem: '<S9>/IDLE' incorporates:
        //   ActionPort: '<S88>/Action Port'

        // Merge: '<S9>/Merge' incorporates:
        //   Constant: '<S88>/Constant1'
        //   SignalConversion generated from: '<S88>/Out1'

        memcpy(&proc_control_node_B.Merge[0],
               &proc_control_node_P.Constant1_Value[0], sizeof(real_T) << 3U);
        if (rtmIsMajorTimeStep(proc_control_node_M)) {
          srUpdateBC(proc_control_node_DW.IDLE_SubsysRanBC);
        }

        // End of Outputs for SubSystem: '<S9>/IDLE'
        break;
      }

      // End of SwitchCase: '<S9>/Switch Case'
      for (proc_control_node_B.i_n = 0; proc_control_node_B.i_n < 8;
           proc_control_node_B.i_n++) {
        // Saturate: '<S9>/Saturation'
        proc_control_node_B.Product2_ks =
          proc_control_node_B.Merge[proc_control_node_B.i_n];
        if (proc_control_node_B.Product2_ks > proc_control_node_P.mpc.tmax) {
          // Saturate: '<S9>/Saturation'
          proc_control_node_B.Saturation[proc_control_node_B.i_n] =
            proc_control_node_P.mpc.tmax;
        } else if (proc_control_node_B.Product2_ks <
                   proc_control_node_P.mpc.tmin) {
          // Saturate: '<S9>/Saturation'
          proc_control_node_B.Saturation[proc_control_node_B.i_n] =
            proc_control_node_P.mpc.tmin;
        } else {
          // Saturate: '<S9>/Saturation'
          proc_control_node_B.Saturation[proc_control_node_B.i_n] =
            proc_control_node_B.Product2_ks;
        }

        // End of Saturate: '<S9>/Saturation'
      }

      // Lookup_n-D: '<S9>/N to PWM'
      for (proc_control_node_B.i_n = 0; proc_control_node_B.i_n < 8;
           proc_control_node_B.i_n++) {
        proc_control_node_B.bpIdx = plook_u32d_binckpan
          (proc_control_node_B.Saturation[proc_control_node_B.i_n],
           proc_control_node_P.N, 200U,
           &proc_control_node_DW.m_bpIndex[proc_control_node_B.i_n]);
        proc_control_node_B.NtoPWM[proc_control_node_B.i_n] =
          proc_control_node_P.PWM[proc_control_node_B.bpIdx];
      }

      // End of Lookup_n-D: '<S9>/N to PWM'

      // MATLAB Function: '<S12>/Quaternion Normalise'
      proc_contro_QuaternionNormalise(proc_control_node_B.In1_k.Orientation.W,
        proc_control_node_B.In1_k.Orientation.X,
        proc_control_node_B.In1_k.Orientation.Y,
        proc_control_node_B.In1_k.Orientation.Z, proc_control_node_B.y);

      // Outputs for Atomic SubSystem: '<S12>/Subscribe1'
      // MATLABSystem: '<S191>/SourceBlock'
      proc_control_node_B.b_varargout_1_i =
        Sub_proc_control_node_819.getLatestMessage
        (&proc_control_node_B.b_varargout_2_l);

      // Outputs for Enabled SubSystem: '<S191>/Enabled Subsystem' incorporates:
      //   EnablePort: '<S196>/Enable'

      // Switch: '<S194>/Reset' incorporates:
      //   MATLABSystem: '<S191>/SourceBlock'

      if (proc_control_node_B.b_varargout_1_i) {
        srUpdateBC(proc_control_node_DW.EnabledSubsystem_SubsysRanBC_c);

        // Switch: '<S194>/Reset' incorporates:
        //   Constant: '<S194>/Initial Condition'

        proc_control_node_B.Reset =
          proc_control_node_P.MinMaxRunningResettable_vinit;
      } else {
        // Switch: '<S194>/Reset' incorporates:
        //   Memory: '<S194>/Memory'
        //   MinMax: '<S188>/MinMax'

        proc_control_node_B.Reset = (proc_control_node_B.SourceBlock_o1_g ||
          proc_control_node_DW.Memory_PreviousInput);
      }

      // End of Switch: '<S194>/Reset'
      // End of Outputs for SubSystem: '<S191>/Enabled Subsystem'
      // End of Outputs for SubSystem: '<S12>/Subscribe1'

      // Outputs for Enabled SubSystem: '<Root>/Modèle Physique' incorporates:
      //   EnablePort: '<S1>/Enable'

      if (rtmIsMajorTimeStep(proc_control_node_M)) {
        proc_control_node_DW.ModlePhysique_MODE = proc_control_node_B.Reset;
      }

      // End of Outputs for SubSystem: '<Root>/Modèle Physique'
    }

    // Outputs for Enabled SubSystem: '<Root>/Modèle Physique' incorporates:
    //   EnablePort: '<S1>/Enable'

    if (proc_control_node_DW.ModlePhysique_MODE) {
      if (rtmIsMajorTimeStep(proc_control_node_M) &&
          proc_control_node_M->Timing.TaskCounters.TID[5] == 0) {
        // MATLAB Function: '<S1>/MATLAB Function' incorporates:
        //   SignalConversion generated from: '<S14>/ SFunction '

        proc_control_node_B.y_j_c[2] = proc_control_node_B.NtoPWM[7];
        proc_control_node_B.y_j_c[3] = proc_control_node_B.NtoPWM[6];
        proc_control_node_B.y_j_c[0] = proc_control_node_B.NtoPWM[0];
        proc_control_node_B.y_j_c[4] = proc_control_node_B.NtoPWM[4];
        proc_control_node_B.y_j_c[1] = proc_control_node_B.NtoPWM[1];
        proc_control_node_B.y_j_c[5] = proc_control_node_B.NtoPWM[5];
        proc_control_node_B.y_j_c[6] = proc_control_node_B.NtoPWM[3];
        proc_control_node_B.y_j_c[7] = proc_control_node_B.NtoPWM[2];
        for (proc_control_node_B.i_n = 0; proc_control_node_B.i_n < 8;
             proc_control_node_B.i_n++) {
          proc_control_node_B.rtb_y_j_f =
            proc_control_node_B.y_j_c[proc_control_node_B.i_n];
          if (proc_control_node_B.rtb_y_j_f < 1100) {
            proc_control_node_B.rtb_y_j_f = 1500U;
          } else if (proc_control_node_B.rtb_y_j_f > 1900) {
            proc_control_node_B.rtb_y_j_f = 1500U;
          }

          proc_control_node_B.y_j_c[proc_control_node_B.i_n] =
            proc_control_node_B.rtb_y_j_f;
        }

        // End of MATLAB Function: '<S1>/MATLAB Function'

        // Lookup_n-D: '<S15>/ PWM to N'
        for (proc_control_node_B.i_n = 0; proc_control_node_B.i_n < 8;
             proc_control_node_B.i_n++) {
          proc_control_node_B.bpIdx = plook_u32u16_binckpan
            (proc_control_node_B.y_j_c[proc_control_node_B.i_n],
             proc_control_node_P.PWM, 200U,
             &proc_control_node_DW.m_bpIndex_f[proc_control_node_B.i_n]);
          proc_control_node_B.PWMtoN[proc_control_node_B.i_n] =
            proc_control_node_P.N[proc_control_node_B.bpIdx];
        }

        // End of Lookup_n-D: '<S15>/ PWM to N'

        // Lookup_n-D: '<S15>/N to RPM'
        for (proc_control_node_B.i_n = 0; proc_control_node_B.i_n < 8;
             proc_control_node_B.i_n++) {
          proc_control_node_B.bpIdx = plook_u32d_binckpan
            (proc_control_node_B.PWMtoN[proc_control_node_B.i_n],
             proc_control_node_P.N, 200U,
             &proc_control_node_DW.m_bpIndex_m[proc_control_node_B.i_n]);
          proc_control_node_B.Product2_ks =
            proc_control_node_P.RPM[proc_control_node_B.bpIdx];
          if (proc_control_node_B.Product2_ks < 0.0) {
            proc_control_node_B.TransferFcn_a = ceil
              (proc_control_node_B.Product2_ks);
          } else {
            proc_control_node_B.TransferFcn_a = floor
              (proc_control_node_B.Product2_ks);
          }

          if (rtIsNaN(proc_control_node_B.TransferFcn_a) || rtIsInf
              (proc_control_node_B.TransferFcn_a)) {
            proc_control_node_B.TransferFcn_a = 0.0;
          } else {
            proc_control_node_B.TransferFcn_a = fmod
              (proc_control_node_B.TransferFcn_a, 65536.0);
          }

          proc_control_node_B.NtoRPM[proc_control_node_B.i_n] =
            static_cast<uint16_T>(proc_control_node_B.TransferFcn_a < 0.0 ?
            static_cast<int32_T>(static_cast<uint16_T>(-static_cast<int16_T>(
            static_cast<uint16_T>(-proc_control_node_B.TransferFcn_a)))) :
            static_cast<int32_T>(static_cast<uint16_T>
            (proc_control_node_B.TransferFcn_a)));
        }

        // End of Lookup_n-D: '<S15>/N to RPM'
      }

      // Integrator: '<S1>/Integrator1'
      proc_control_node_B.SourceBlock_o1_g = rtsiGetIsOkayToUpdateMode
        (&proc_control_node_M->solverInfo);
      if (proc_control_node_B.SourceBlock_o1_g) {
        proc_control_node_B.SourceBlock_o1_g = (proc_control_node_B.OR &&
          (proc_control_node_PrevZCX.Integrator1_Reset_ZCE != 1));
        proc_control_node_PrevZCX.Integrator1_Reset_ZCE = proc_control_node_B.OR;

        // evaluate zero-crossings
        if (proc_control_node_B.SourceBlock_o1_g ||
            (proc_control_node_DW.Integrator1_IWORK != 0)) {
          proc_control_node_X.Integrator1_CSTATE[0] = proc_control_node_B.y[0];
          proc_control_node_X.Integrator1_CSTATE[1] = proc_control_node_B.y[1];
          proc_control_node_X.Integrator1_CSTATE[2] = proc_control_node_B.y[2];
          proc_control_node_X.Integrator1_CSTATE[3] = proc_control_node_B.y[3];
        }
      }

      // MATLAB Function: '<S1>/Quaternion Normalise' incorporates:
      //   Integrator: '<S1>/Integrator1'

      proc_control_node_B.Product2_ks = 3.3121686421112381E-170;
      proc_control_node_B.Product3_na = fabs
        (proc_control_node_X.Integrator1_CSTATE[0]);
      if (proc_control_node_B.Product3_na > 3.3121686421112381E-170) {
        proc_control_node_B.fcn2 = 1.0;
        proc_control_node_B.Product2_ks = proc_control_node_B.Product3_na;
      } else {
        proc_control_node_B.Product1_dz = proc_control_node_B.Product3_na /
          3.3121686421112381E-170;
        proc_control_node_B.fcn2 = proc_control_node_B.Product1_dz *
          proc_control_node_B.Product1_dz;
      }

      proc_control_node_B.Product3_na = fabs
        (proc_control_node_X.Integrator1_CSTATE[1]);
      if (proc_control_node_B.Product3_na > proc_control_node_B.Product2_ks) {
        proc_control_node_B.Product1_dz = proc_control_node_B.Product2_ks /
          proc_control_node_B.Product3_na;
        proc_control_node_B.fcn2 = proc_control_node_B.fcn2 *
          proc_control_node_B.Product1_dz * proc_control_node_B.Product1_dz +
          1.0;
        proc_control_node_B.Product2_ks = proc_control_node_B.Product3_na;
      } else {
        proc_control_node_B.Product1_dz = proc_control_node_B.Product3_na /
          proc_control_node_B.Product2_ks;
        proc_control_node_B.fcn2 += proc_control_node_B.Product1_dz *
          proc_control_node_B.Product1_dz;
      }

      proc_control_node_B.Product3_na = fabs
        (proc_control_node_X.Integrator1_CSTATE[2]);
      if (proc_control_node_B.Product3_na > proc_control_node_B.Product2_ks) {
        proc_control_node_B.Product1_dz = proc_control_node_B.Product2_ks /
          proc_control_node_B.Product3_na;
        proc_control_node_B.fcn2 = proc_control_node_B.fcn2 *
          proc_control_node_B.Product1_dz * proc_control_node_B.Product1_dz +
          1.0;
        proc_control_node_B.Product2_ks = proc_control_node_B.Product3_na;
      } else {
        proc_control_node_B.Product1_dz = proc_control_node_B.Product3_na /
          proc_control_node_B.Product2_ks;
        proc_control_node_B.fcn2 += proc_control_node_B.Product1_dz *
          proc_control_node_B.Product1_dz;
      }

      proc_control_node_B.Product3_na = fabs
        (proc_control_node_X.Integrator1_CSTATE[3]);
      if (proc_control_node_B.Product3_na > proc_control_node_B.Product2_ks) {
        proc_control_node_B.Product1_dz = proc_control_node_B.Product2_ks /
          proc_control_node_B.Product3_na;
        proc_control_node_B.fcn2 = proc_control_node_B.fcn2 *
          proc_control_node_B.Product1_dz * proc_control_node_B.Product1_dz +
          1.0;
        proc_control_node_B.Product2_ks = proc_control_node_B.Product3_na;
      } else {
        proc_control_node_B.Product1_dz = proc_control_node_B.Product3_na /
          proc_control_node_B.Product2_ks;
        proc_control_node_B.fcn2 += proc_control_node_B.Product1_dz *
          proc_control_node_B.Product1_dz;
      }

      proc_control_node_B.fcn2 = proc_control_node_B.Product2_ks * sqrt
        (proc_control_node_B.fcn2);
      proc_control_node_B.y_f[0] = proc_control_node_X.Integrator1_CSTATE[0] /
        proc_control_node_B.fcn2;
      proc_control_node_B.y_f[1] = proc_control_node_X.Integrator1_CSTATE[1] /
        proc_control_node_B.fcn2;
      proc_control_node_B.y_f[2] = proc_control_node_X.Integrator1_CSTATE[2] /
        proc_control_node_B.fcn2;
      proc_control_node_B.y_f[3] = proc_control_node_X.Integrator1_CSTATE[3] /
        proc_control_node_B.fcn2;

      // End of MATLAB Function: '<S1>/Quaternion Normalise'

      // TransferFcn: '<S20>/Transfer Fcn'
      proc_control_node_B.t29 = proc_control_node_P.TransferFcn_C *
        proc_control_node_X.TransferFcn_CSTATE;

      // TransferFcn: '<S21>/Transfer Fcn'
      proc_control_node_B.t65 = proc_control_node_P.TransferFcn_C_m *
        proc_control_node_X.TransferFcn_CSTATE_g;

      // TransferFcn: '<S22>/Transfer Fcn'
      proc_control_node_B.TransferFcn_a = proc_control_node_P.TransferFcn_C_a *
        proc_control_node_X.TransferFcn_CSTATE_p;

      // TransferFcn: '<S23>/Transfer Fcn'
      proc_control_node_B.t70 = proc_control_node_P.TransferFcn_C_j *
        proc_control_node_X.TransferFcn_CSTATE_k;

      // TransferFcn: '<S24>/Transfer Fcn'
      proc_control_node_B.t14 = proc_control_node_P.TransferFcn_C_d *
        proc_control_node_X.TransferFcn_CSTATE_e;

      // TransferFcn: '<S25>/Transfer Fcn'
      proc_control_node_B.TransferFcn_l = proc_control_node_P.TransferFcn_C_k *
        proc_control_node_X.TransferFcn_CSTATE_kk;

      // TransferFcn: '<S26>/Transfer Fcn'
      proc_control_node_B.TransferFcn_b = proc_control_node_P.TransferFcn_C_g *
        proc_control_node_X.TransferFcn_CSTATE_o;

      // TransferFcn: '<S27>/Transfer Fcn'
      proc_control_node_B.t2 = proc_control_node_P.TransferFcn_C_c *
        proc_control_node_X.TransferFcn_CSTATE_l;
      if (rtmIsMajorTimeStep(proc_control_node_M) &&
          proc_control_node_M->Timing.TaskCounters.TID[6] == 0) {
        // UniformRandomNumber: '<S16>/X Drift'
        proc_control_node_B.XDrift = proc_control_node_DW.XDrift_NextOutput;

        // UniformRandomNumber: '<S16>/Y Drift'
        proc_control_node_B.YDrift = proc_control_node_DW.YDrift_NextOutput;
      }

      if (rtmIsMajorTimeStep(proc_control_node_M) &&
          proc_control_node_M->Timing.TaskCounters.TID[1] == 0) {
        // Constant: '<S16>/Z Drift'
        proc_control_node_B.ZDrift = proc_control_node_P.ZDrift_Value;
      }

      // Sin: '<S16>/X Wave' incorporates:
      //   Sin: '<S16>/Pitch Wave'
      //   Sin: '<S16>/Roll Wave'
      //   Sin: '<S16>/Y Wave'
      //   Sin: '<S16>/Yaw Wave'
      //   Sin: '<S16>/Z Wave'

      proc_control_node_B.Product2_ks = proc_control_node_M->Timing.t[0];

      // Sin: '<S16>/X Wave'
      proc_control_node_B.XWave = sin(proc_control_node_P.wfX *
        proc_control_node_B.Product2_ks + proc_control_node_P.wpX) *
        proc_control_node_P.waX + proc_control_node_P.XWave_Bias;

      // Sin: '<S16>/Y Wave'
      proc_control_node_B.YWave = sin(proc_control_node_P.wfY *
        proc_control_node_B.Product2_ks + proc_control_node_P.wpY) *
        proc_control_node_P.waY + proc_control_node_P.YWave_Bias;

      // Sin: '<S16>/Z Wave'
      proc_control_node_B.ZWave = sin(proc_control_node_P.wfZ *
        proc_control_node_B.Product2_ks + proc_control_node_P.wpZ) *
        proc_control_node_P.waZ + proc_control_node_P.ZWave_Bias;

      // Sum: '<S16>/Sum2'
      proc_control_node_B.TmpSignalConversionAtSFun_f[0] =
        proc_control_node_B.XDrift + proc_control_node_B.XWave;
      proc_control_node_B.TmpSignalConversionAtSFun_f[1] =
        proc_control_node_B.YDrift + proc_control_node_B.YWave;
      proc_control_node_B.TmpSignalConversionAtSFun_f[2] =
        proc_control_node_B.ZDrift + proc_control_node_B.ZWave;

      // Sin: '<S16>/Roll Wave'
      proc_control_node_B.t3 = sin(proc_control_node_P.wfPhi *
        proc_control_node_B.Product2_ks + proc_control_node_P.wpPhi) *
        proc_control_node_P.waPhi + proc_control_node_P.RollWave_Bias;

      // Sin: '<S16>/Pitch Wave'
      proc_control_node_B.t4 = sin(proc_control_node_P.wfTheta *
        proc_control_node_B.Product2_ks + proc_control_node_P.wpTheta) *
        proc_control_node_P.waTheta + proc_control_node_P.PitchWave_Bias;

      // Sin: '<S16>/Yaw Wave'
      proc_control_node_B.t5 = sin(proc_control_node_P.wfPsi *
        proc_control_node_B.Product2_ks + proc_control_node_P.wpPsi) *
        proc_control_node_P.waPsi + proc_control_node_P.YawWave_Bias;

      // SignalConversion generated from: '<S1>/Integrator'
      proc_control_node_B.u2[0] = proc_control_node_B.In1_k.Position.X;
      proc_control_node_B.u2[1] = proc_control_node_B.In1_k.Position.Y;
      proc_control_node_B.u2[2] = proc_control_node_B.In1_k.Position.Z;

      // Integrator: '<S1>/Integrator'
      proc_control_node_B.SourceBlock_o1_g = rtsiGetIsOkayToUpdateMode
        (&proc_control_node_M->solverInfo);
      if (proc_control_node_B.SourceBlock_o1_g) {
        proc_control_node_B.SourceBlock_o1_g = (proc_control_node_B.OR &&
          (proc_control_node_PrevZCX.Integrator_Reset_ZCE != 1));
        proc_control_node_PrevZCX.Integrator_Reset_ZCE = proc_control_node_B.OR;

        // evaluate zero-crossings
        if (proc_control_node_B.SourceBlock_o1_g ||
            (proc_control_node_DW.Integrator_IWORK != 0)) {
          proc_control_node_X.Integrator_CSTATE[0] = proc_control_node_B.u2[0];
          proc_control_node_X.Integrator_CSTATE[1] = proc_control_node_B.u2[1];
          proc_control_node_X.Integrator_CSTATE[2] = proc_control_node_B.u2[2];
        }
      }

      // Integrator: '<S1>/Integrator'
      proc_control_node_B.WorldPosition_g[0] =
        proc_control_node_X.Integrator_CSTATE[0];
      proc_control_node_B.WorldPosition_g[1] =
        proc_control_node_X.Integrator_CSTATE[1];
      proc_control_node_B.WorldPosition_g[2] =
        proc_control_node_X.Integrator_CSTATE[2];
      if (rtmIsMajorTimeStep(proc_control_node_M) &&
          proc_control_node_M->Timing.TaskCounters.TID[1] == 0) {
        // Constant: '<S1>/Initial Body velocity '
        proc_control_node_B.InitialBodyvelocity[0] =
          proc_control_node_P.InitialBodyvelocity_Value[0];
        proc_control_node_B.InitialBodyvelocity[1] =
          proc_control_node_P.InitialBodyvelocity_Value[1];
        proc_control_node_B.InitialBodyvelocity[2] =
          proc_control_node_P.InitialBodyvelocity_Value[2];
      }

      // Integrator: '<S1>/Integrator2'
      proc_control_node_B.SourceBlock_o1_g = rtsiGetIsOkayToUpdateMode
        (&proc_control_node_M->solverInfo);
      if (proc_control_node_B.SourceBlock_o1_g) {
        proc_control_node_B.SourceBlock_o1_g = (proc_control_node_B.OR &&
          (proc_control_node_PrevZCX.Integrator2_Reset_ZCE != 1));
        proc_control_node_PrevZCX.Integrator2_Reset_ZCE = proc_control_node_B.OR;

        // evaluate zero-crossings
        if (proc_control_node_B.SourceBlock_o1_g ||
            (proc_control_node_DW.Integrator2_IWORK != 0)) {
          proc_control_node_X.Integrator2_CSTATE[0] =
            proc_control_node_B.InitialBodyvelocity[0];
          proc_control_node_X.Integrator2_CSTATE[1] =
            proc_control_node_B.InitialBodyvelocity[1];
          proc_control_node_X.Integrator2_CSTATE[2] =
            proc_control_node_B.InitialBodyvelocity[2];
        }
      }

      // Integrator: '<S1>/Integrator2'
      proc_control_node_B.BodyVelocity_i[0] =
        proc_control_node_X.Integrator2_CSTATE[0];
      proc_control_node_B.BodyVelocity_i[1] =
        proc_control_node_X.Integrator2_CSTATE[1];
      proc_control_node_B.BodyVelocity_i[2] =
        proc_control_node_X.Integrator2_CSTATE[2];
      if (rtmIsMajorTimeStep(proc_control_node_M) &&
          proc_control_node_M->Timing.TaskCounters.TID[1] == 0) {
        // Constant: '<S1>/Initial Angular Rates'
        proc_control_node_B.InitialAngularRates[0] =
          proc_control_node_P.InitialAngularRates_Value[0];
        proc_control_node_B.InitialAngularRates[1] =
          proc_control_node_P.InitialAngularRates_Value[1];
        proc_control_node_B.InitialAngularRates[2] =
          proc_control_node_P.InitialAngularRates_Value[2];
      }

      // Integrator: '<S1>/Integrator3'
      proc_control_node_B.SourceBlock_o1_g = rtsiGetIsOkayToUpdateMode
        (&proc_control_node_M->solverInfo);
      if (proc_control_node_B.SourceBlock_o1_g) {
        proc_control_node_B.SourceBlock_o1_g = (proc_control_node_B.OR &&
          (proc_control_node_PrevZCX.Integrator3_Reset_ZCE != 1));
        proc_control_node_PrevZCX.Integrator3_Reset_ZCE = proc_control_node_B.OR;

        // evaluate zero-crossings
        if (proc_control_node_B.SourceBlock_o1_g ||
            (proc_control_node_DW.Integrator3_IWORK != 0)) {
          proc_control_node_X.Integrator3_CSTATE[0] =
            proc_control_node_B.InitialAngularRates[0];
          proc_control_node_X.Integrator3_CSTATE[1] =
            proc_control_node_B.InitialAngularRates[1];
          proc_control_node_X.Integrator3_CSTATE[2] =
            proc_control_node_B.InitialAngularRates[2];
        }
      }

      // Integrator: '<S1>/Integrator3'
      proc_control_node_B.AngularRate_b[0] =
        proc_control_node_X.Integrator3_CSTATE[0];
      proc_control_node_B.AngularRate_b[1] =
        proc_control_node_X.Integrator3_CSTATE[1];
      proc_control_node_B.AngularRate_b[2] =
        proc_control_node_X.Integrator3_CSTATE[2];
      if (rtmIsMajorTimeStep(proc_control_node_M) &&
          proc_control_node_M->Timing.TaskCounters.TID[2] == 0) {
        // MATLAB Function: '<S1>/AUV State Equation' incorporates:
        //   SignalConversion generated from: '<S13>/ SFunction '

        proc_control_node_B.Product3_na = proc_control_node_B.y_f[1] *
          proc_control_node_B.y_f[3];
        proc_control_node_B.Product1_dz = proc_control_node_B.y_f[2] *
          proc_control_node_B.y_f[3];
        proc_control_node_B.fcn2 = proc_control_node_B.y_f[0] *
          proc_control_node_B.y_f[1];
        proc_control_node_B.Product1_a5 = proc_control_node_B.y_f[0] *
          proc_control_node_B.y_f[2];
        proc_control_node_B.t12 = proc_control_node_B.y_f[1] *
          proc_control_node_B.y_f[1];
        proc_control_node_B.Product2_ks = proc_control_node_B.y_f[2] *
          proc_control_node_B.y_f[2];
        proc_control_node_B.t15 = proc_control_node_B.y_f[1] *
          proc_control_node_B.y_f[2] * 2.0;
        proc_control_node_B.t20 = proc_control_node_B.y_f[0] *
          proc_control_node_B.y_f[3] * 2.0;
        proc_control_node_B.t6 = proc_control_node_B.AngularRate_b[1] / 500.0;
        proc_control_node_B.t25 = proc_control_node_B.AngularRate_b[0] / 1000.0;
        proc_control_node_B.fcn3 = proc_control_node_B.AngularRate_b[2] * 0.018;
        proc_control_node_B.t27 = proc_control_node_B.BodyVelocity_i[0] *
          32.4648;
        proc_control_node_B.t58 = proc_control_node_B.BodyVelocity_i[1] *
          43.6156;
        proc_control_node_B.t62 = proc_control_node_B.BodyVelocity_i[2] *
          46.7695;
        proc_control_node_B.t16 = proc_control_node_B.Product3_na * 2.0;
        proc_control_node_B.t17 = proc_control_node_B.Product1_dz * 2.0;
        proc_control_node_B.t64 = proc_control_node_B.fcn2 * 2.0;
        proc_control_node_B.t19 = proc_control_node_B.Product1_a5 * 2.0;
        proc_control_node_B.t21 = proc_control_node_B.t12 * 2.0;
        proc_control_node_B.t22 = proc_control_node_B.Product2_ks * 2.0;
        proc_control_node_B.t23 = proc_control_node_B.y_f[3] *
          proc_control_node_B.y_f[3] * 2.0;
        proc_control_node_B.t28 = proc_control_node_B.t6 +
          proc_control_node_B.fcn3;
        proc_control_node_B.t6 += proc_control_node_B.t25;
        proc_control_node_B.t25 += proc_control_node_B.fcn3;
        proc_control_node_B.t7 = proc_control_node_B.AngularRate_b[1] * 0.558 +
          proc_control_node_B.t27;
        proc_control_node_B.t26 = proc_control_node_B.AngularRate_b[0] * 0.062 +
          proc_control_node_B.t62;
        proc_control_node_B.t57 = proc_control_node_B.AngularRate_b[2] * 0.031 +
          proc_control_node_B.t58;
        proc_control_node_B.t84 = (proc_control_node_B.AngularRate_b[1] / 125.0
          + proc_control_node_B.AngularRate_b[2] / 250.0) +
          proc_control_node_B.AngularRate_b[0] * 0.592;
        proc_control_node_B.t42 = proc_control_node_B.t17 +
          proc_control_node_B.t64;
        proc_control_node_B.t50 = proc_control_node_erf
          (proc_control_node_B.WorldPosition_g[2] * 13.333333333333334 - 2.0);
        proc_control_node_B.fcn3 = (proc_control_node_B.t21 +
          proc_control_node_B.t22) - 1.0;
        proc_control_node_B.t27 = proc_control_node_B.AngularRate_b[2] * 0.062 +
          -proc_control_node_B.t27;
        proc_control_node_B.t58 = proc_control_node_B.AngularRate_b[0] * 0.558 +
          -proc_control_node_B.t58;
        proc_control_node_B.t62 = proc_control_node_B.AngularRate_b[1] * 0.031 +
          -proc_control_node_B.t62;
        proc_control_node_B.t86 = (proc_control_node_B.AngularRate_b[0] / 250.0
          + -(proc_control_node_B.AngularRate_b[1] / 1000.0)) +
          proc_control_node_B.AngularRate_b[2] * 1.8864;
        proc_control_node_B.t87 = (proc_control_node_B.AngularRate_b[0] / 125.0
          + -(proc_control_node_B.AngularRate_b[2] / 1000.0)) +
          proc_control_node_B.AngularRate_b[1] * 1.7228;
        proc_control_node_B.t51 = proc_control_node_B.t16 +
          -proc_control_node_B.t19;
        proc_control_node_B.t74 = proc_control_node_B.t50 * 0.01575;
        proc_control_node_B.t77 = proc_control_node_B.t50 * 15.7185;
        proc_control_node_B.Position_dot[0] = (((proc_control_node_B.t22 +
          proc_control_node_B.t23) - 1.0) * -proc_control_node_B.BodyVelocity_i
          [0] + (proc_control_node_B.t16 + proc_control_node_B.t19) *
          proc_control_node_B.BodyVelocity_i[2]) + (proc_control_node_B.t15 -
          proc_control_node_B.t20) * proc_control_node_B.BodyVelocity_i[1];
        proc_control_node_B.Position_dot[1] = ((proc_control_node_B.t15 +
          proc_control_node_B.t20) * proc_control_node_B.BodyVelocity_i[0] -
          ((proc_control_node_B.t21 + proc_control_node_B.t23) - 1.0) *
          proc_control_node_B.BodyVelocity_i[1]) + (proc_control_node_B.t17 -
          proc_control_node_B.t64) * proc_control_node_B.BodyVelocity_i[2];
        proc_control_node_B.Position_dot[2] = (proc_control_node_B.t51 *
          proc_control_node_B.BodyVelocity_i[0] + proc_control_node_B.t42 *
          proc_control_node_B.BodyVelocity_i[1]) - proc_control_node_B.fcn3 *
          proc_control_node_B.BodyVelocity_i[2];
        proc_control_node_B.Quaternion_dot[0] =
          (proc_control_node_B.AngularRate_b[0] * proc_control_node_B.y_f[1] *
           -0.5 - proc_control_node_B.AngularRate_b[1] *
           proc_control_node_B.y_f[2] / 2.0) -
          proc_control_node_B.AngularRate_b[2] * proc_control_node_B.y_f[3] /
          2.0;
        proc_control_node_B.Quaternion_dot[1] = (proc_control_node_B.y_f[0] *
          proc_control_node_B.AngularRate_b[0] / 2.0 -
          proc_control_node_B.AngularRate_b[1] * proc_control_node_B.y_f[3] /
          2.0) + proc_control_node_B.y_f[2] * proc_control_node_B.AngularRate_b
          [2] / 2.0;
        proc_control_node_B.Quaternion_dot[2] =
          (proc_control_node_B.AngularRate_b[0] * proc_control_node_B.y_f[3] /
           2.0 + proc_control_node_B.y_f[0] * proc_control_node_B.AngularRate_b
           [1] / 2.0) - proc_control_node_B.y_f[1] *
          proc_control_node_B.AngularRate_b[2] / 2.0;
        proc_control_node_B.Quaternion_dot[3] =
          (proc_control_node_B.AngularRate_b[0] * proc_control_node_B.y_f[2] *
           -0.5 + proc_control_node_B.y_f[1] *
           proc_control_node_B.AngularRate_b[1] / 2.0) +
          proc_control_node_B.y_f[0] * proc_control_node_B.AngularRate_b[2] /
          2.0;
        proc_control_node_B.t15 = proc_control_node_B.AngularRate_b[0] *
          proc_control_node_B.t28;
        proc_control_node_B.t16 = (fabs(proc_control_node_B.AngularRate_b[0]) *
          24.333236 + 10.0) * proc_control_node_B.AngularRate_b[0];
        proc_control_node_B.t21 = proc_control_node_B.AngularRate_b[0] *
          proc_control_node_B.t26;
        proc_control_node_B.t17 = proc_control_node_B.AngularRate_b[0] *
          proc_control_node_B.t58;
        proc_control_node_B.t20 = proc_control_node_B.AngularRate_b[0] *
          proc_control_node_B.t86;
        proc_control_node_B.t64 = proc_control_node_B.AngularRate_b[0] *
          proc_control_node_B.t87;
        proc_control_node_B.t19 = (fabs(proc_control_node_B.AngularRate_b[1]) *
          14.5708 + 7.0) * proc_control_node_B.AngularRate_b[1];
        proc_control_node_B.t22 = proc_control_node_B.AngularRate_b[1] *
          proc_control_node_B.t25;
        proc_control_node_B.t23 = proc_control_node_B.AngularRate_b[1] *
          proc_control_node_B.t7;
        proc_control_node_B.t50 = proc_control_node_B.AngularRate_b[1] *
          proc_control_node_B.t62;
        proc_control_node_B.BodyVelocity_dot_tmp =
          proc_control_node_B.AngularRate_b[1] * proc_control_node_B.t84;
        proc_control_node_B.t86 *= proc_control_node_B.AngularRate_b[1];
        proc_control_node_B.BodyVelocity_dot_tmp_i =
          proc_control_node_B.AngularRate_b[2] * proc_control_node_B.t6;
        proc_control_node_B.BodyVelocity_dot_tmp_o = (fabs
          (proc_control_node_B.AngularRate_b[2]) * 11.19756 + 15.0) *
          proc_control_node_B.AngularRate_b[2];
        proc_control_node_B.BodyVelocity_dot_tmp_d =
          proc_control_node_B.AngularRate_b[2] * proc_control_node_B.t27;
        proc_control_node_B.BodyVelocity_dot_tmp_iu =
          proc_control_node_B.AngularRate_b[2] * proc_control_node_B.t57;
        proc_control_node_B.t84 *= proc_control_node_B.AngularRate_b[2];
        proc_control_node_B.t87 *= proc_control_node_B.AngularRate_b[2];
        proc_control_node_B.BodyVelocity_dot_tmp_g = (proc_control_node_B.t77 -
          15.2815) * (proc_control_node_B.Product1_dz + proc_control_node_B.fcn2);
        proc_control_node_B.t42 *= proc_control_node_B.t74 + 0.01575;
        proc_control_node_B.BodyVelocity_dot_tmp_c = (proc_control_node_B.t77 -
          15.2815) * (proc_control_node_B.Product3_na +
                      -proc_control_node_B.Product1_a5);
        proc_control_node_B.t51 *= proc_control_node_B.t74 + 0.01575;
        proc_control_node_B.fcn3 *= proc_control_node_B.t77 - 15.2815;
        proc_control_node_B.t28 *= proc_control_node_B.BodyVelocity_i[0];
        proc_control_node_B.t74 = (fabs(proc_control_node_B.BodyVelocity_i[0]) *
          70.0596 + 45.0) * proc_control_node_B.BodyVelocity_i[0];
        proc_control_node_B.t57 *= proc_control_node_B.BodyVelocity_i[0];
        proc_control_node_B.t62 *= proc_control_node_B.BodyVelocity_i[0];
        proc_control_node_B.t25 *= proc_control_node_B.BodyVelocity_i[1];
        proc_control_node_B.t77 = (fabs(proc_control_node_B.BodyVelocity_i[1]) *
          90.0196 + 60.0) * proc_control_node_B.BodyVelocity_i[1];
        proc_control_node_B.t27 *= proc_control_node_B.BodyVelocity_i[1];
        proc_control_node_B.t26 *= proc_control_node_B.BodyVelocity_i[1];
        proc_control_node_B.t6 *= proc_control_node_B.BodyVelocity_i[2];
        proc_control_node_B.BodyVelocity_dot_tmp_e = (fabs
          (proc_control_node_B.BodyVelocity_i[2]) * 110.155248 + 70.0) *
          proc_control_node_B.BodyVelocity_i[2];
        proc_control_node_B.t7 *= proc_control_node_B.BodyVelocity_i[2];
        proc_control_node_B.t58 *= proc_control_node_B.BodyVelocity_i[2];
        proc_control_node_B.BodyVelocity_dot[0] =
          ((((((((((((((((((((((((((((((((((((((((((((((((((((((((((proc_control_node_B.TmpSignalConversionAtSFun_f
          [0] * 0.030976977065388711 +
          proc_control_node_B.TmpSignalConversionAtSFun_f[1] *
          9.4803055144857715E-7) -
          proc_control_node_B.TmpSignalConversionAtSFun_f[2] *
          6.8231348244175949E-6) + proc_control_node_B.t3 *
          0.0001303522588356414) - proc_control_node_B.t4 * 0.010033314971702871)
          + proc_control_node_B.t5 * 0.0010125044874363649) -
          proc_control_node_B.t29 * 0.00033076834054020519) +
          proc_control_node_B.t65 * 1.8595780444550231E-21) +
          proc_control_node_B.TransferFcn_a * 0.00033506403327449372) +
          proc_control_node_B.t70 * 0.00033363213569639753) -
          proc_control_node_B.t14 * 0.001819638864719295) -
          proc_control_node_B.TransferFcn_l * 0.0018124211550371481) +
          proc_control_node_B.TransferFcn_b * 0.0018538731733468781) +
          proc_control_node_B.t2 * 0.001778186846409557) -
          proc_control_node_B.Product3_na * 0.11107598193630119) -
          proc_control_node_B.Product1_dz * 0.00081126583629370218) -
          proc_control_node_B.fcn2 * 0.00081126583629370218) +
          proc_control_node_B.Product1_a5 * 0.11107598193630119) -
          proc_control_node_B.t12 * 0.0062610285338271466) -
          proc_control_node_B.Product2_ks * 0.0062610285338271466) +
          proc_control_node_B.t29 * 1.4142135623730951 * 0.015171119710606879) +
          proc_control_node_B.t65 * 1.4142135623730951 * 0.014928824155507611) +
          proc_control_node_B.TransferFcn_a * 1.4142135623730951 *
          0.015171119710606879) + proc_control_node_B.t70 * 1.4142135623730951 *
          0.01516372519659284) - proc_control_node_B.t15 * 0.96028628902704993)
          - proc_control_node_B.t16 * 0.0001303522588356414) +
          proc_control_node_B.t21 * 9.4803055144857715E-7) -
          proc_control_node_B.t17 * 6.8231348244175949E-6) -
          proc_control_node_B.t20 * 0.010033314971702871) -
          proc_control_node_B.t64 * 0.0010125044874363649) +
          proc_control_node_B.t19 * 0.010033314971702871) -
          proc_control_node_B.t22 * 2.9388947094905889E-5) -
          proc_control_node_B.t23 * 6.8231348244175949E-6) +
          proc_control_node_B.t50 * 0.030976977065388711) +
          proc_control_node_B.BodyVelocity_dot_tmp * 0.0010125044874363649) -
          proc_control_node_B.t86 * 0.0001303522588356414) +
          proc_control_node_B.BodyVelocity_dot_tmp_i * 0.0002115171795569455) -
          proc_control_node_B.BodyVelocity_dot_tmp_o * 0.0010125044874363649) +
          proc_control_node_B.BodyVelocity_dot_tmp_d * 9.4803055144857715E-7) +
          proc_control_node_B.BodyVelocity_dot_tmp_iu * 0.030976977065388711) +
                             proc_control_node_B.t84 * 0.010033314971702871) +
                            proc_control_node_B.t87 * 0.0001303522588356414) -
                           proc_control_node_B.BodyVelocity_dot_tmp_g *
                           1.860035941942108E-5) - proc_control_node_B.t42 *
                          0.0076571888871557192) -
                         proc_control_node_B.BodyVelocity_dot_tmp_c *
                         0.60776829002292643) - proc_control_node_B.t51 *
                        0.589379797395962) - proc_control_node_B.fcn3 *
                       6.6934952627536608E-5) + proc_control_node_B.t28 *
                      0.0040409200239048832) - proc_control_node_B.t74 *
                     0.030976977065388711) - proc_control_node_B.t57 *
                    0.0010125044874363649) + proc_control_node_B.t62 *
                   0.010033314971702871) - proc_control_node_B.t25 *
                  0.311032764122789) - proc_control_node_B.t77 *
                 9.4803055144857715E-7) - proc_control_node_B.t27 *
                0.0010125044874363649) - proc_control_node_B.t26 *
               0.0001303522588356414) + proc_control_node_B.t6 *
              0.031387639110527318) + proc_control_node_B.BodyVelocity_dot_tmp_e
             * 6.8231348244175949E-6) + proc_control_node_B.t7 *
            0.010033314971702871) - proc_control_node_B.t58 *
           0.0001303522588356414) + 0.0031305142669135729;
        proc_control_node_B.AngularRates_dot[0] =
          ((((((((((((((((((((((((((((((((((((((((((((((((((((((((((proc_control_node_B.TmpSignalConversionAtSFun_f
          [0] * 0.0001303522588356414 +
          proc_control_node_B.TmpSignalConversionAtSFun_f[1] *
          0.021882274381510681) -
          proc_control_node_B.TmpSignalConversionAtSFun_f[2] *
          0.002272431716587712) + proc_control_node_B.t3 * 1.71018810547529) -
          proc_control_node_B.t4 * 0.0080268590155159435) -
          proc_control_node_B.t5 * 0.0039859244840414) + proc_control_node_B.t29
          * 0.0013021350951669831) + proc_control_node_B.t65 *
          6.1932883292401409E-19) - proc_control_node_B.TransferFcn_a *
          0.00131904594055876) - proc_control_node_B.t70 * 0.0013134089920948341)
          - proc_control_node_B.t14 * 0.26767193546582568) +
          proc_control_node_B.TransferFcn_l * 0.26476621250220889) +
          proc_control_node_B.TransferFcn_b * 0.2790736050389333) -
          proc_control_node_B.t2 * 0.27616788207531651) -
          proc_control_node_B.Product3_na * 0.0830290934481406) -
          proc_control_node_B.Product1_dz * 18.72549529020894) -
          proc_control_node_B.fcn2 * 18.72549529020894) +
          proc_control_node_B.Product1_a5 * 0.0830290934481406) -
          proc_control_node_B.t12 * 2.0852233152147792) -
          proc_control_node_B.Product2_ks * 2.0852233152147792) +
          proc_control_node_B.t29 * 1.4142135623730951 * 0.043593198825375247) -
          proc_control_node_B.t65 * 1.4142135623730951 * 0.043051831063235027) +
          proc_control_node_B.TransferFcn_a * 1.4142135623730951 *
          0.043593198825375247) - proc_control_node_B.t70 * 1.4142135623730951 *
          0.043976565543532631) - proc_control_node_B.t15 *
          0.0040409200239048832) - proc_control_node_B.t16 * 1.71018810547529) +
          proc_control_node_B.t21 * 0.021882274381510681) -
          proc_control_node_B.t17 * 0.002272431716587712) -
          proc_control_node_B.t20 * 0.0080268590155159435) +
          proc_control_node_B.t64 * 0.0039859244840414) +
          proc_control_node_B.t19 * 0.0080268590155159435) -
          proc_control_node_B.t22 * 0.678350505826831) - proc_control_node_B.t23
          * 0.002272431716587712) + proc_control_node_B.t50 *
          0.0001303522588356414) - proc_control_node_B.BodyVelocity_dot_tmp *
          0.0039859244840414) - proc_control_node_B.t86 * 1.71018810547529) +
          proc_control_node_B.BodyVelocity_dot_tmp_i * 0.070445383214219059) +
          proc_control_node_B.BodyVelocity_dot_tmp_o * 0.0039859244840414) +
          proc_control_node_B.BodyVelocity_dot_tmp_d * 0.021882274381510681) +
          proc_control_node_B.BodyVelocity_dot_tmp_iu * 0.0001303522588356414) +
                             proc_control_node_B.t84 * 0.0080268590155159435) +
                            proc_control_node_B.t87 * 1.71018810547529) -
                           proc_control_node_B.BodyVelocity_dot_tmp_g *
                           0.42933022336523952) - proc_control_node_B.t42 *
                          100.460348544499) -
                         proc_control_node_B.BodyVelocity_dot_tmp_c *
                         0.0025575113183552841) - proc_control_node_B.t51 *
                        0.47151599980996189) - proc_control_node_B.fcn3 *
                       0.022292555139725449) + proc_control_node_B.t28 *
                      53.015831269733987) - proc_control_node_B.t74 *
                     0.0001303522588356414) + proc_control_node_B.t57 *
                    0.0039859244840414) + proc_control_node_B.t62 *
                   0.0080268590155159435) - proc_control_node_B.t25 *
                  0.2488326294809943) - proc_control_node_B.t77 *
                 0.021882274381510681) + proc_control_node_B.t27 *
                0.0039859244840414) - proc_control_node_B.t26 * 1.71018810547529)
              - proc_control_node_B.t6 * 0.1235636590052834) +
             proc_control_node_B.BodyVelocity_dot_tmp_e * 0.002272431716587712)
            + proc_control_node_B.t7 * 0.0080268590155159435) -
           proc_control_node_B.t58 * 1.71018810547529) + 1.0426116576073889;
        proc_control_node_B.BodyVelocity_dot[1] =
          ((((((((((((((((((((((((((((((((((((((((((((((((((((((((((proc_control_node_B.TmpSignalConversionAtSFun_f
          [0] * 9.4803055144857715E-7 +
          proc_control_node_B.TmpSignalConversionAtSFun_f[1] *
          0.02320783323245932) -
          proc_control_node_B.TmpSignalConversionAtSFun_f[2] *
          2.9076309096921531E-5) + proc_control_node_B.t3 * 0.021882274381510681)
          - proc_control_node_B.t4 * 0.0001026911824132076) -
          proc_control_node_B.t5 * 0.00042780737967584029) +
          proc_control_node_B.t29 * 0.00013975754063522079) +
          proc_control_node_B.t65 * 7.9244610288113972E-21) -
          proc_control_node_B.TransferFcn_a * 0.00014157257363048341) -
          proc_control_node_B.t70 * 0.0001409675626320625) -
          proc_control_node_B.t14 * 0.0034249251816346319) +
          proc_control_node_B.TransferFcn_l * 0.003387750973601051) +
          proc_control_node_B.TransferFcn_b * 0.0035708122797193441) -
          proc_control_node_B.t2 * 0.0035336380716857632) -
          proc_control_node_B.Product3_na * 0.00060385694847962161) -
          proc_control_node_B.Product1_dz * 0.23982646564227009) -
          proc_control_node_B.fcn2 * 0.23982646564227009) +
          proc_control_node_B.Product1_a5 * 0.00060385694847962161) -
          proc_control_node_B.t12 * 0.026680932679612211) -
          proc_control_node_B.Product2_ks * 0.026680932679612211) -
          proc_control_node_B.t29 * 1.4142135623730951 * 0.01090649593858282) +
          proc_control_node_B.t65 * 1.4142135623730951 * 0.011000123045544621) -
          proc_control_node_B.TransferFcn_a * 1.4142135623730951 *
          0.01090649593858282) + proc_control_node_B.t70 * 1.4142135623730951 *
          0.01090087173345982) - proc_control_node_B.t15 * 2.9388947094905889E-5)
          - proc_control_node_B.t16 * 0.021882274381510681) +
          proc_control_node_B.t21 * 0.02320783323245932) -
          proc_control_node_B.t17 * 2.9076309096921531E-5) -
          proc_control_node_B.t20 * 0.0001026911824132076) +
          proc_control_node_B.t64 * 0.00042780737967584029) +
          proc_control_node_B.t19 * 0.0001026911824132076) -
          proc_control_node_B.t22 * 0.71944283020623911) -
          proc_control_node_B.t23 * 2.9076309096921531E-5) +
          proc_control_node_B.t50 * 9.4803055144857715E-7) -
          proc_control_node_B.BodyVelocity_dot_tmp * 0.00042780737967584029) -
          proc_control_node_B.t86 * 0.021882274381510681) +
          proc_control_node_B.BodyVelocity_dot_tmp_i * 0.00090136558200456737) +
          proc_control_node_B.BodyVelocity_dot_tmp_o * 0.00042780737967584029) +
          proc_control_node_B.BodyVelocity_dot_tmp_d * 0.02320783323245932) +
          proc_control_node_B.BodyVelocity_dot_tmp_iu * 9.4803055144857715E-7) +
                             proc_control_node_B.t84 * 0.0001026911824132076) +
                            proc_control_node_B.t87 * 0.021882274381510681) -
                           proc_control_node_B.BodyVelocity_dot_tmp_g *
                           0.45533768802085189) - proc_control_node_B.t42 *
                          1.2854146887555269) -
                         proc_control_node_B.BodyVelocity_dot_tmp_c *
                         1.860035941942108E-5) - proc_control_node_B.t51 *
                        0.0060323141908477191) - proc_control_node_B.fcn3 *
                       0.00028523859224080018) + proc_control_node_B.t28 *
                      0.678350505826831) - proc_control_node_B.t74 *
                     9.4803055144857715E-7) + proc_control_node_B.t57 *
                    0.00042780737967584029) + proc_control_node_B.t62 *
                   0.0001026911824132076) - proc_control_node_B.t25 *
                  0.0031834266548094372) - proc_control_node_B.t77 *
                 0.02320783323245932) + proc_control_node_B.t27 *
                0.00042780737967584029) - proc_control_node_B.t26 *
               0.021882274381510681) - proc_control_node_B.t6 *
              0.013262028769951049) + proc_control_node_B.BodyVelocity_dot_tmp_e
             * 2.9076309096921531E-5) + proc_control_node_B.t7 *
            0.0001026911824132076) - proc_control_node_B.t58 *
           0.021882274381510681) + 0.0133404663398061;
        proc_control_node_B.AngularRates_dot[1] =
          ((((((((((((((((((((((((((((((((((((((((((((((((((((((((((proc_control_node_B.TmpSignalConversionAtSFun_f
          [0] * -0.010033314971702871 -
          proc_control_node_B.TmpSignalConversionAtSFun_f[1] *
          0.0001026911824132076) +
          proc_control_node_B.TmpSignalConversionAtSFun_f[2] *
          0.00039756137245743289) - proc_control_node_B.t3 *
          0.0080268590155159435) + proc_control_node_B.t4 * 0.58374455968341665)
          - proc_control_node_B.t5 * 1.606290206365557E-6) +
          proc_control_node_B.t29 * 5.24748238233168E-7) -
          proc_control_node_B.t65 * 1.083514276897426E-19) -
          proc_control_node_B.TransferFcn_a * 5.3156315041823265E-7) -
          proc_control_node_B.t70 * 5.2929151302328333E-7) +
          proc_control_node_B.t14 * 0.10593667623599359) +
          proc_control_node_B.TransferFcn_l * 0.10537885436940329) -
          proc_control_node_B.TransferFcn_b * 0.10793139553633729) -
          proc_control_node_B.t2 * 0.1033841350690595) +
          proc_control_node_B.Product3_na * 6.3908140435873166) +
          proc_control_node_B.Product1_dz * 0.087876754449678615) +
          proc_control_node_B.fcn2 * 0.087876754449678615) -
          proc_control_node_B.Product1_a5 * 6.3908140435873166) +
          proc_control_node_B.t12 * 0.36480930847148191) +
          proc_control_node_B.Product2_ks * 0.36480930847148191) +
          proc_control_node_B.t29 * 1.4142135623730951 * 0.013457654526727991) +
          proc_control_node_B.t65 * 1.4142135623730951 * 0.013869054980635681) +
          proc_control_node_B.TransferFcn_a * 1.4142135623730951 *
          0.013457654526727991) + proc_control_node_B.t70 * 1.4142135623730951 *
          0.01386868232130781) + proc_control_node_B.t15 * 0.311032764122789) +
          proc_control_node_B.t16 * 0.0080268590155159435) -
          proc_control_node_B.t21 * 0.0001026911824132076) +
          proc_control_node_B.t17 * 0.00039756137245743289) +
          proc_control_node_B.t20 * 0.58374455968341665) +
          proc_control_node_B.t64 * 1.606290206365557E-6) -
          proc_control_node_B.t19 * 0.58374455968341665) +
          proc_control_node_B.t22 * 0.0031834266548094372) +
          proc_control_node_B.t23 * 0.00039756137245743289) -
          proc_control_node_B.t50 * 0.010033314971702871) -
          proc_control_node_B.BodyVelocity_dot_tmp * 1.606290206365557E-6) +
          proc_control_node_B.t86 * 0.0080268590155159435) -
          proc_control_node_B.BodyVelocity_dot_tmp_i * 0.01232440254618042) +
          proc_control_node_B.BodyVelocity_dot_tmp_o * 1.606290206365557E-6) -
          proc_control_node_B.BodyVelocity_dot_tmp_d * 0.0001026911824132076) -
          proc_control_node_B.BodyVelocity_dot_tmp_iu * 0.010033314971702871) -
                             proc_control_node_B.t84 * 0.58374455968341665) -
                            proc_control_node_B.t87 * 0.0080268590155159435) +
                           proc_control_node_B.BodyVelocity_dot_tmp_g *
                           0.002014800998947134) + proc_control_node_B.t42 *
                          0.47151599980996189) +
                         proc_control_node_B.BodyVelocity_dot_tmp_c *
                         0.19685363974481029) + proc_control_node_B.t51 *
                        34.290486373399979) + proc_control_node_B.fcn3 *
                       0.003900077063807416) - proc_control_node_B.t28 *
                      0.2488326294809943) + proc_control_node_B.t74 *
                     0.010033314971702871) + proc_control_node_B.t57 *
                    1.606290206365557E-6) - proc_control_node_B.t62 *
                   0.58374455968341665) + proc_control_node_B.t25 *
                  18.096081350185919) + proc_control_node_B.t77 *
                 0.0001026911824132076) + proc_control_node_B.t27 *
                1.606290206365557E-6) + proc_control_node_B.t26 *
               0.0080268590155159435) - proc_control_node_B.t6 *
              4.9794996397332282E-5) -
             proc_control_node_B.BodyVelocity_dot_tmp_e * 0.00039756137245743289)
            - proc_control_node_B.t7 * 0.58374455968341665) +
           proc_control_node_B.t58 * 0.0080268590155159435) - 0.182404654235741;
        proc_control_node_B.BodyVelocity_dot[2] =
          ((((((((((((((((((((((((((((((((((((((((((((((((((((((((((proc_control_node_B.TmpSignalConversionAtSFun_f
          [0] * -6.8231348244175949E-6 -
          proc_control_node_B.TmpSignalConversionAtSFun_f[1] *
          2.9076309096921531E-5) +
          proc_control_node_B.TmpSignalConversionAtSFun_f[2] *
          0.021384731826702759) - proc_control_node_B.t3 * 0.002272431716587712)
          + proc_control_node_B.t4 * 0.00039756137245743289) +
          proc_control_node_B.t5 * 5.2828771531483014E-6) -
          proc_control_node_B.t29 * 1.725827915740819E-6) -
          proc_control_node_B.t65 * 5.8281975682474322E-18) +
          proc_control_node_B.TransferFcn_a * 1.748241265284163E-6) +
          proc_control_node_B.t70 * 1.740770148765829E-6) -
          proc_control_node_B.t14 * 0.02095639900015615) +
          proc_control_node_B.TransferFcn_l * 0.021100316216985739) -
          proc_control_node_B.TransferFcn_b * 0.021822949502860629) +
          proc_control_node_B.t2 * 0.02167903228603104) +
          proc_control_node_B.Product3_na * 0.004346059700124901) +
          proc_control_node_B.Product1_dz * 0.024881704687475689) +
          proc_control_node_B.fcn2 * 0.024881704687475689) -
          proc_control_node_B.Product1_a5 * 0.004346059700124901) +
          proc_control_node_B.t12 * 0.0030060816152820162) +
          proc_control_node_B.Product2_ks * 0.0030060816152820162) -
          proc_control_node_B.t29 * 1.4142135623730951 * 4.8869263875916949E-5)
          + proc_control_node_B.t65 * 1.4142135623730951 * 6.6264429389244648E-5)
          - proc_control_node_B.TransferFcn_a * 1.4142135623730951 *
          4.8869263875916949E-5) + proc_control_node_B.t70 * 1.4142135623730951 *
          6.7490056888775055E-5) + proc_control_node_B.t15 *
          0.0002115171795569455) + proc_control_node_B.t16 *
          0.002272431716587712) - proc_control_node_B.t21 *
          2.9076309096921531E-5) + proc_control_node_B.t17 *
          0.021384731826702759) + proc_control_node_B.t20 *
          0.00039756137245743289) - proc_control_node_B.t64 *
          5.2828771531483014E-6) - proc_control_node_B.t19 *
          0.00039756137245743289) + proc_control_node_B.t22 *
          0.00090136558200456737) + proc_control_node_B.t23 *
          0.021384731826702759) - proc_control_node_B.t50 *
          6.8231348244175949E-6) + proc_control_node_B.BodyVelocity_dot_tmp *
          5.2828771531483014E-6) + proc_control_node_B.t86 *
          0.002272431716587712) - proc_control_node_B.BodyVelocity_dot_tmp_i *
          0.66292668662778553) - proc_control_node_B.BodyVelocity_dot_tmp_o *
          5.2828771531483014E-6) - proc_control_node_B.BodyVelocity_dot_tmp_d *
          2.9076309096921531E-5) - proc_control_node_B.BodyVelocity_dot_tmp_iu *
          6.8231348244175949E-6) - proc_control_node_B.t84 *
                             0.00039756137245743289) - proc_control_node_B.t87 *
                            0.002272431716587712) +
                           proc_control_node_B.BodyVelocity_dot_tmp_g *
                           0.00057047718448160036) + proc_control_node_B.t42 *
                          0.133487820176676) +
                         proc_control_node_B.BodyVelocity_dot_tmp_c *
                         0.00013386990525507319) + proc_control_node_B.t51 *
                        0.023353661458078809) + proc_control_node_B.fcn3 *
                       0.2097842192199541) - proc_control_node_B.t28 *
                      0.070445383214219059) + proc_control_node_B.t74 *
                     6.8231348244175949E-6) - proc_control_node_B.t57 *
                    5.2828771531483014E-6) - proc_control_node_B.t62 *
                   0.00039756137245743289) + proc_control_node_B.t25 *
                  0.01232440254618042) + proc_control_node_B.t77 *
                 2.9076309096921531E-5) - proc_control_node_B.t27 *
                5.2828771531483014E-6) + proc_control_node_B.t26 *
               0.002272431716587712) + proc_control_node_B.t6 *
              0.00016376919174759729) -
             proc_control_node_B.BodyVelocity_dot_tmp_e * 0.021384731826702759)
            - proc_control_node_B.t7 * 0.00039756137245743289) +
           proc_control_node_B.t58 * 0.002272431716587712) -
          0.0015030408076410081;
        proc_control_node_B.AngularRates_dot[2] =
          ((((((((((((((((((((((((((((((((((((((((((((((((((((((((((proc_control_node_B.TmpSignalConversionAtSFun_f
          [0] * 0.0010125044874363649 -
          proc_control_node_B.TmpSignalConversionAtSFun_f[1] *
          0.00042780737967584029) +
          proc_control_node_B.TmpSignalConversionAtSFun_f[2] *
          5.2828771531483014E-6) - proc_control_node_B.t3 * 0.0039859244840414)
          - proc_control_node_B.t4 * 1.606290206365557E-6) +
          proc_control_node_B.t5 * 0.53015902215788635) -
          proc_control_node_B.t29 * 0.1731941163298826) -
          proc_control_node_B.t65 * 1.4397960202092559E-21) +
          proc_control_node_B.TransferFcn_a * 0.175443390567933) +
          proc_control_node_B.t70 * 0.17469363248858291) +
          proc_control_node_B.t14 * 0.00062021813460420567) -
          proc_control_node_B.TransferFcn_l * 0.0006207996116589) -
          proc_control_node_B.TransferFcn_b * 0.00064672437426625525) +
          proc_control_node_B.t2 * 0.00064730585132094889) -
          proc_control_node_B.Product3_na * 0.64492422651466708) +
          proc_control_node_B.Product1_dz * 0.3660910622711756) +
          proc_control_node_B.fcn2 * 0.3660910622711756) +
          proc_control_node_B.Product1_a5 * 0.64492422651466708) +
          proc_control_node_B.t12 * 0.0048476610015380046) +
          proc_control_node_B.Product2_ks * 0.0048476610015380046) +
          proc_control_node_B.t29 * 1.4142135623730951 * 0.00059255494878017434)
          - proc_control_node_B.t65 * 1.4142135623730951 * 0.1225770464045467) +
          proc_control_node_B.TransferFcn_a * 1.4142135623730951 *
          0.00059255494878017434) + proc_control_node_B.t70 * 1.4142135623730951
          * 0.00041984673608298361) - proc_control_node_B.t15 *
          0.031387639110527318) + proc_control_node_B.t16 * 0.0039859244840414)
          - proc_control_node_B.t21 * 0.00042780737967584029) +
          proc_control_node_B.t17 * 5.2828771531483014E-6) -
          proc_control_node_B.t20 * 1.606290206365557E-6) -
          proc_control_node_B.t64 * 0.53015902215788635) +
          proc_control_node_B.t19 * 1.606290206365557E-6) +
          proc_control_node_B.t22 * 0.013262028769951049) +
          proc_control_node_B.t23 * 5.2828771531483014E-6) +
          proc_control_node_B.t50 * 0.0010125044874363649) +
          proc_control_node_B.BodyVelocity_dot_tmp * 0.53015902215788635) +
          proc_control_node_B.t86 * 0.0039859244840414) -
          proc_control_node_B.BodyVelocity_dot_tmp_i * 0.00016376919174759729) -
          proc_control_node_B.BodyVelocity_dot_tmp_o * 0.53015902215788635) -
          proc_control_node_B.BodyVelocity_dot_tmp_d * 0.00042780737967584029) +
          proc_control_node_B.BodyVelocity_dot_tmp_iu * 0.0010125044874363649) +
                             proc_control_node_B.t84 * 1.606290206365557E-6) -
                            proc_control_node_B.t87 * 0.0039859244840414) +
                           proc_control_node_B.BodyVelocity_dot_tmp_g *
                           0.008393580789239987) + proc_control_node_B.t42 *
                          0.23414229210041551) -
                         proc_control_node_B.BodyVelocity_dot_tmp_c *
                         0.01986533804350149) - proc_control_node_B.t51 *
                        9.4357149063583354E-5) + proc_control_node_B.fcn3 *
                       5.1825024872384838E-5) - proc_control_node_B.t28 *
                      0.1235636590052834) - proc_control_node_B.t74 *
                     0.0010125044874363649) - proc_control_node_B.t57 *
                    0.53015902215788635) + proc_control_node_B.t62 *
                   1.606290206365557E-6) - proc_control_node_B.t25 *
                  4.9794996397332282E-5) + proc_control_node_B.t77 *
                 0.00042780737967584029) - proc_control_node_B.t27 *
                0.53015902215788635) + proc_control_node_B.t26 *
               0.0039859244840414) + proc_control_node_B.t6 * 16.434929686894481)
             - proc_control_node_B.BodyVelocity_dot_tmp_e *
             5.2828771531483014E-6) + proc_control_node_B.t7 *
            1.606290206365557E-6) + proc_control_node_B.t58 * 0.0039859244840414)
          - 0.0024238305007690032;
      }

      // Sum: '<S43>/Sum' incorporates:
      //   Product: '<S43>/Product'
      //   Product: '<S43>/Product1'
      //   Product: '<S43>/Product2'
      //   Product: '<S43>/Product3'
      //   Sum: '<S34>/Sum'

      proc_control_node_B.Product2_ks = ((proc_control_node_B.y_f[0] *
        proc_control_node_B.y_f[0] + proc_control_node_B.y_f[1] *
        proc_control_node_B.y_f[1]) + proc_control_node_B.y_f[2] *
        proc_control_node_B.y_f[2]) + proc_control_node_B.y_f[3] *
        proc_control_node_B.y_f[3];
      if (rtmIsMajorTimeStep(proc_control_node_M) &&
          proc_control_node_M->Timing.TaskCounters.TID[1] == 0) {
        // Math: '<S19>/Transpose2' incorporates:
        //   Product: '<S41>/Divide'
        //   Product: '<S41>/Divide1'
        //   Product: '<S41>/Divide2'
        //   Product: '<S41>/Divide3'
        //   Sum: '<S43>/Sum'
        //   UnaryMinus: '<S42>/Unary Minus'
        //   UnaryMinus: '<S42>/Unary Minus1'
        //   UnaryMinus: '<S42>/Unary Minus2'

        proc_control_node_B.Transpose2[0] = proc_control_node_B.y_f[0] /
          proc_control_node_B.Product2_ks;
        proc_control_node_B.Transpose2[1] = -proc_control_node_B.y_f[1] /
          proc_control_node_B.Product2_ks;
        proc_control_node_B.Transpose2[2] = -proc_control_node_B.y_f[2] /
          proc_control_node_B.Product2_ks;
        proc_control_node_B.Transpose2[3] = -proc_control_node_B.y_f[3] /
          proc_control_node_B.Product2_ks;

        // RandomNumber: '<S28>/White Noise'
        proc_control_node_B.Product_k = proc_control_node_DW.NextOutput;

        // Gain: '<S28>/Output' incorporates:
        //   RandomNumber: '<S28>/White Noise'

        proc_control_node_B.Output = sqrt
          (proc_control_node_P.BandLimitedWhiteNoise_Cov) / 0.1 *
          proc_control_node_DW.NextOutput;
      }

      // Sum: '<S18>/Sum1' incorporates:
      //   Product: '<S30>/Divide'
      //   Product: '<S30>/Divide1'
      //   Product: '<S30>/Divide2'
      //   Product: '<S30>/Divide3'
      //   UnaryMinus: '<S33>/Unary Minus'
      //   UnaryMinus: '<S33>/Unary Minus1'
      //   UnaryMinus: '<S33>/Unary Minus2'

      proc_control_node_B.Quaternion_p[0] = proc_control_node_B.y_f[0] /
        proc_control_node_B.Product2_ks + proc_control_node_B.Output;
      proc_control_node_B.Quaternion_p[1] = -proc_control_node_B.y_f[1] /
        proc_control_node_B.Product2_ks + proc_control_node_B.Output;
      proc_control_node_B.Quaternion_p[2] = -proc_control_node_B.y_f[2] /
        proc_control_node_B.Product2_ks + proc_control_node_B.Output;
      proc_control_node_B.Quaternion_p[3] = -proc_control_node_B.y_f[3] /
        proc_control_node_B.Product2_ks + proc_control_node_B.Output;
      if (rtmIsMajorTimeStep(proc_control_node_M) &&
          proc_control_node_M->Timing.TaskCounters.TID[2] == 0) {
        // Math: '<S19>/Transpose'
        proc_control_node_B.Transpose_d[0] =
          proc_control_node_B.BodyVelocity_dot[0];
        proc_control_node_B.Transpose_d[1] =
          proc_control_node_B.BodyVelocity_dot[1];
        proc_control_node_B.Transpose_d[2] =
          proc_control_node_B.BodyVelocity_dot[2];
      }

      // Gain: '<S19>/Gain'
      proc_control_node_B.Gain_j[0] = proc_control_node_P.Gain_Gain *
        proc_control_node_B.AngularRate_b[0];
      proc_control_node_B.Gain_j[1] = proc_control_node_P.Gain_Gain *
        proc_control_node_B.AngularRate_b[1];
      proc_control_node_B.Gain_j[2] = proc_control_node_P.Gain_Gain *
        proc_control_node_B.AngularRate_b[2];
      if (rtmIsMajorTimeStep(proc_control_node_M) &&
          proc_control_node_M->Timing.TaskCounters.TID[1] == 0) {
        // MATLABSystem: '<S19>/IMU' incorporates:
        //   Math: '<S19>/Transpose'
        //   Math: '<S19>/Transpose2'
        //   ZeroOrderHold: '<S19>/Zero-Order Hold1'

        if (proc_control_node_DW.obj_i.Temperature !=
            proc_control_node_P.IMU_Temperature) {
          proc_control_node_B.SourceBlock_o1_g =
            (proc_control_node_DW.obj_i.isInitialized == 1);
          if (proc_control_node_B.SourceBlock_o1_g) {
            proc_control_node_DW.obj_i.TunablePropsChanged = true;
            proc_control_node_DW.obj_i.tunablePropertyChanged[31] = true;
          }

          proc_control_node_DW.obj_i.Temperature =
            proc_control_node_P.IMU_Temperature;
        }

        if (!proc_control_node_isequal
            (proc_control_node_DW.obj_i.MagneticFieldNED,
             proc_control_node_P.IMU_MagneticFieldNED)) {
          proc_control_node_B.SourceBlock_o1_g =
            (proc_control_node_DW.obj_i.isInitialized == 1);
          if (proc_control_node_B.SourceBlock_o1_g) {
            proc_control_node_DW.obj_i.TunablePropsChanged = true;
            proc_control_node_DW.obj_i.tunablePropertyChanged[0] = true;
          }

          imuSensor_set_MagneticFieldNED(&proc_control_node_DW.obj_i,
            proc_control_node_P.IMU_MagneticFieldNED);
        }

        if (proc_control_node_DW.obj_i.AccelParamsMeasurementRange !=
            proc_control_node_P.IMU_AccelParamsMeasurementRange) {
          proc_control_node_B.SourceBlock_o1_g =
            (proc_control_node_DW.obj_i.isInitialized == 1);
          if (proc_control_node_B.SourceBlock_o1_g) {
            proc_control_node_DW.obj_i.TunablePropsChanged = true;
            proc_control_node_DW.obj_i.tunablePropertyChanged[3] = true;
          }

          proc_control_node_DW.obj_i.AccelParamsMeasurementRange =
            proc_control_node_P.IMU_AccelParamsMeasurementRange;
        }

        if (proc_control_node_DW.obj_i.AccelParamsResolution !=
            proc_control_node_P.IMU_AccelParamsResolution) {
          proc_control_node_B.SourceBlock_o1_g =
            (proc_control_node_DW.obj_i.isInitialized == 1);
          if (proc_control_node_B.SourceBlock_o1_g) {
            proc_control_node_DW.obj_i.TunablePropsChanged = true;
            proc_control_node_DW.obj_i.tunablePropertyChanged[4] = true;
          }

          proc_control_node_DW.obj_i.AccelParamsResolution =
            proc_control_node_P.IMU_AccelParamsResolution;
        }

        if (!proc_control_node_isequal
            (proc_control_node_DW.obj_i.AccelParamsConstantBias,
             proc_control_node_P.IMU_AccelParamsConstantBias)) {
          proc_control_node_B.SourceBlock_o1_g =
            (proc_control_node_DW.obj_i.isInitialized == 1);
          if (proc_control_node_B.SourceBlock_o1_g) {
            proc_control_node_DW.obj_i.TunablePropsChanged = true;
            proc_control_node_DW.obj_i.tunablePropertyChanged[5] = true;
          }

          proc_control_node_DW.obj_i.AccelParamsConstantBias[0] =
            proc_control_node_P.IMU_AccelParamsConstantBias[0];
          proc_control_node_DW.obj_i.AccelParamsConstantBias[1] =
            proc_control_node_P.IMU_AccelParamsConstantBias[1];
          proc_control_node_DW.obj_i.AccelParamsConstantBias[2] =
            proc_control_node_P.IMU_AccelParamsConstantBias[2];
        }

        if (!proc_control_node_isequal
            (proc_control_node_DW.obj_i.AccelParamsAxesMisalignment,
             proc_control_node_P.IMU_AccelParamsAxesMisalignment)) {
          proc_control_node_B.SourceBlock_o1_g =
            (proc_control_node_DW.obj_i.isInitialized == 1);
          if (proc_control_node_B.SourceBlock_o1_g) {
            proc_control_node_DW.obj_i.TunablePropsChanged = true;
            proc_control_node_DW.obj_i.tunablePropertyChanged[6] = true;
          }

          proc_control_node_DW.obj_i.AccelParamsAxesMisalignment[0] =
            proc_control_node_P.IMU_AccelParamsAxesMisalignment[0];
          proc_control_node_DW.obj_i.AccelParamsAxesMisalignment[1] =
            proc_control_node_P.IMU_AccelParamsAxesMisalignment[1];
          proc_control_node_DW.obj_i.AccelParamsAxesMisalignment[2] =
            proc_control_node_P.IMU_AccelParamsAxesMisalignment[2];
        }

        if (!proc_control_node_isequal
            (proc_control_node_DW.obj_i.AccelParamsNoiseDensity,
             proc_control_node_P.IMU_AccelParamsNoiseDensity)) {
          proc_control_node_B.SourceBlock_o1_g =
            (proc_control_node_DW.obj_i.isInitialized == 1);
          if (proc_control_node_B.SourceBlock_o1_g) {
            proc_control_node_DW.obj_i.TunablePropsChanged = true;
            proc_control_node_DW.obj_i.tunablePropertyChanged[7] = true;
          }

          proc_control_node_DW.obj_i.AccelParamsNoiseDensity[0] =
            proc_control_node_P.IMU_AccelParamsNoiseDensity[0];
          proc_control_node_DW.obj_i.AccelParamsNoiseDensity[1] =
            proc_control_node_P.IMU_AccelParamsNoiseDensity[1];
          proc_control_node_DW.obj_i.AccelParamsNoiseDensity[2] =
            proc_control_node_P.IMU_AccelParamsNoiseDensity[2];
        }

        if (!proc_control_node_isequal
            (proc_control_node_DW.obj_i.AccelParamsBiasInstability,
             proc_control_node_P.IMU_AccelParamsBiasInstability)) {
          proc_control_node_B.SourceBlock_o1_g =
            (proc_control_node_DW.obj_i.isInitialized == 1);
          if (proc_control_node_B.SourceBlock_o1_g) {
            proc_control_node_DW.obj_i.TunablePropsChanged = true;
            proc_control_node_DW.obj_i.tunablePropertyChanged[8] = true;
          }

          proc_control_node_DW.obj_i.AccelParamsBiasInstability[0] =
            proc_control_node_P.IMU_AccelParamsBiasInstability[0];
          proc_control_node_DW.obj_i.AccelParamsBiasInstability[1] =
            proc_control_node_P.IMU_AccelParamsBiasInstability[1];
          proc_control_node_DW.obj_i.AccelParamsBiasInstability[2] =
            proc_control_node_P.IMU_AccelParamsBiasInstability[2];
        }

        if (!proc_control_node_isequal
            (proc_control_node_DW.obj_i.AccelParamsRandomWalk,
             proc_control_node_P.IMU_AccelParamsRandomWalk)) {
          proc_control_node_B.SourceBlock_o1_g =
            (proc_control_node_DW.obj_i.isInitialized == 1);
          if (proc_control_node_B.SourceBlock_o1_g) {
            proc_control_node_DW.obj_i.TunablePropsChanged = true;
            proc_control_node_DW.obj_i.tunablePropertyChanged[9] = true;
          }

          proc_control_node_DW.obj_i.AccelParamsRandomWalk[0] =
            proc_control_node_P.IMU_AccelParamsRandomWalk[0];
          proc_control_node_DW.obj_i.AccelParamsRandomWalk[1] =
            proc_control_node_P.IMU_AccelParamsRandomWalk[1];
          proc_control_node_DW.obj_i.AccelParamsRandomWalk[2] =
            proc_control_node_P.IMU_AccelParamsRandomWalk[2];
        }

        if (!proc_control_node_isequal
            (proc_control_node_DW.obj_i.AccelParamsTemperatureBias,
             proc_control_node_P.IMU_AccelParamsTemperatureBias)) {
          proc_control_node_B.SourceBlock_o1_g =
            (proc_control_node_DW.obj_i.isInitialized == 1);
          if (proc_control_node_B.SourceBlock_o1_g) {
            proc_control_node_DW.obj_i.TunablePropsChanged = true;
            proc_control_node_DW.obj_i.tunablePropertyChanged[10] = true;
          }

          proc_control_node_DW.obj_i.AccelParamsTemperatureBias[0] =
            proc_control_node_P.IMU_AccelParamsTemperatureBias[0];
          proc_control_node_DW.obj_i.AccelParamsTemperatureBias[1] =
            proc_control_node_P.IMU_AccelParamsTemperatureBias[1];
          proc_control_node_DW.obj_i.AccelParamsTemperatureBias[2] =
            proc_control_node_P.IMU_AccelParamsTemperatureBias[2];
        }

        if (!proc_control_node_isequal
            (proc_control_node_DW.obj_i.AccelParamsTemperatureScaleFactor,
             proc_control_node_P.IMU_AccelParamsTemperatureScale)) {
          proc_control_node_B.SourceBlock_o1_g =
            (proc_control_node_DW.obj_i.isInitialized == 1);
          if (proc_control_node_B.SourceBlock_o1_g) {
            proc_control_node_DW.obj_i.TunablePropsChanged = true;
            proc_control_node_DW.obj_i.tunablePropertyChanged[11] = true;
          }

          proc_control_node_DW.obj_i.AccelParamsTemperatureScaleFactor[0] =
            proc_control_node_P.IMU_AccelParamsTemperatureScale[0];
          proc_control_node_DW.obj_i.AccelParamsTemperatureScaleFactor[1] =
            proc_control_node_P.IMU_AccelParamsTemperatureScale[1];
          proc_control_node_DW.obj_i.AccelParamsTemperatureScaleFactor[2] =
            proc_control_node_P.IMU_AccelParamsTemperatureScale[2];
        }

        if (proc_control_node_DW.obj_i.GyroParamsMeasurementRange !=
            proc_control_node_P.IMU_GyroParamsMeasurementRange) {
          proc_control_node_B.SourceBlock_o1_g =
            (proc_control_node_DW.obj_i.isInitialized == 1);
          if (proc_control_node_B.SourceBlock_o1_g) {
            proc_control_node_DW.obj_i.TunablePropsChanged = true;
            proc_control_node_DW.obj_i.tunablePropertyChanged[12] = true;
          }

          proc_control_node_DW.obj_i.GyroParamsMeasurementRange =
            proc_control_node_P.IMU_GyroParamsMeasurementRange;
        }

        if (proc_control_node_DW.obj_i.GyroParamsResolution !=
            proc_control_node_P.IMU_GyroParamsResolution) {
          proc_control_node_B.SourceBlock_o1_g =
            (proc_control_node_DW.obj_i.isInitialized == 1);
          if (proc_control_node_B.SourceBlock_o1_g) {
            proc_control_node_DW.obj_i.TunablePropsChanged = true;
            proc_control_node_DW.obj_i.tunablePropertyChanged[13] = true;
          }

          proc_control_node_DW.obj_i.GyroParamsResolution =
            proc_control_node_P.IMU_GyroParamsResolution;
        }

        if (!proc_control_node_isequal
            (proc_control_node_DW.obj_i.GyroParamsConstantBias,
             proc_control_node_P.IMU_GyroParamsConstantBias)) {
          proc_control_node_B.SourceBlock_o1_g =
            (proc_control_node_DW.obj_i.isInitialized == 1);
          if (proc_control_node_B.SourceBlock_o1_g) {
            proc_control_node_DW.obj_i.TunablePropsChanged = true;
            proc_control_node_DW.obj_i.tunablePropertyChanged[14] = true;
          }

          proc_control_node_DW.obj_i.GyroParamsConstantBias[0] =
            proc_control_node_P.IMU_GyroParamsConstantBias[0];
          proc_control_node_DW.obj_i.GyroParamsConstantBias[1] =
            proc_control_node_P.IMU_GyroParamsConstantBias[1];
          proc_control_node_DW.obj_i.GyroParamsConstantBias[2] =
            proc_control_node_P.IMU_GyroParamsConstantBias[2];
        }

        if (!proc_control_node_isequal
            (proc_control_node_DW.obj_i.GyroParamsAxesMisalignment,
             proc_control_node_P.IMU_GyroParamsAxesMisalignment)) {
          proc_control_node_B.SourceBlock_o1_g =
            (proc_control_node_DW.obj_i.isInitialized == 1);
          if (proc_control_node_B.SourceBlock_o1_g) {
            proc_control_node_DW.obj_i.TunablePropsChanged = true;
            proc_control_node_DW.obj_i.tunablePropertyChanged[15] = true;
          }

          proc_control_node_DW.obj_i.GyroParamsAxesMisalignment[0] =
            proc_control_node_P.IMU_GyroParamsAxesMisalignment[0];
          proc_control_node_DW.obj_i.GyroParamsAxesMisalignment[1] =
            proc_control_node_P.IMU_GyroParamsAxesMisalignment[1];
          proc_control_node_DW.obj_i.GyroParamsAxesMisalignment[2] =
            proc_control_node_P.IMU_GyroParamsAxesMisalignment[2];
        }

        if (!proc_control_node_isequal
            (proc_control_node_DW.obj_i.GyroParamsAccelerationBias,
             proc_control_node_P.IMU_GyroParamsAccelerationBias)) {
          proc_control_node_B.SourceBlock_o1_g =
            (proc_control_node_DW.obj_i.isInitialized == 1);
          if (proc_control_node_B.SourceBlock_o1_g) {
            proc_control_node_DW.obj_i.TunablePropsChanged = true;
            proc_control_node_DW.obj_i.tunablePropertyChanged[21] = true;
          }

          proc_control_node_DW.obj_i.GyroParamsAccelerationBias[0] =
            proc_control_node_P.IMU_GyroParamsAccelerationBias[0];
          proc_control_node_DW.obj_i.GyroParamsAccelerationBias[1] =
            proc_control_node_P.IMU_GyroParamsAccelerationBias[1];
          proc_control_node_DW.obj_i.GyroParamsAccelerationBias[2] =
            proc_control_node_P.IMU_GyroParamsAccelerationBias[2];
        }

        if (!proc_control_node_isequal
            (proc_control_node_DW.obj_i.GyroParamsNoiseDensity,
             proc_control_node_P.IMU_GyroParamsNoiseDensity)) {
          proc_control_node_B.SourceBlock_o1_g =
            (proc_control_node_DW.obj_i.isInitialized == 1);
          if (proc_control_node_B.SourceBlock_o1_g) {
            proc_control_node_DW.obj_i.TunablePropsChanged = true;
            proc_control_node_DW.obj_i.tunablePropertyChanged[16] = true;
          }

          proc_control_node_DW.obj_i.GyroParamsNoiseDensity[0] =
            proc_control_node_P.IMU_GyroParamsNoiseDensity[0];
          proc_control_node_DW.obj_i.GyroParamsNoiseDensity[1] =
            proc_control_node_P.IMU_GyroParamsNoiseDensity[1];
          proc_control_node_DW.obj_i.GyroParamsNoiseDensity[2] =
            proc_control_node_P.IMU_GyroParamsNoiseDensity[2];
        }

        if (!proc_control_node_isequal
            (proc_control_node_DW.obj_i.GyroParamsBiasInstability,
             proc_control_node_P.IMU_GyroParamsBiasInstability)) {
          proc_control_node_B.SourceBlock_o1_g =
            (proc_control_node_DW.obj_i.isInitialized == 1);
          if (proc_control_node_B.SourceBlock_o1_g) {
            proc_control_node_DW.obj_i.TunablePropsChanged = true;
            proc_control_node_DW.obj_i.tunablePropertyChanged[17] = true;
          }

          proc_control_node_DW.obj_i.GyroParamsBiasInstability[0] =
            proc_control_node_P.IMU_GyroParamsBiasInstability[0];
          proc_control_node_DW.obj_i.GyroParamsBiasInstability[1] =
            proc_control_node_P.IMU_GyroParamsBiasInstability[1];
          proc_control_node_DW.obj_i.GyroParamsBiasInstability[2] =
            proc_control_node_P.IMU_GyroParamsBiasInstability[2];
        }

        if (!proc_control_node_isequal
            (proc_control_node_DW.obj_i.GyroParamsRandomWalk,
             proc_control_node_P.IMU_GyroParamsRandomWalk)) {
          proc_control_node_B.SourceBlock_o1_g =
            (proc_control_node_DW.obj_i.isInitialized == 1);
          if (proc_control_node_B.SourceBlock_o1_g) {
            proc_control_node_DW.obj_i.TunablePropsChanged = true;
            proc_control_node_DW.obj_i.tunablePropertyChanged[18] = true;
          }

          proc_control_node_DW.obj_i.GyroParamsRandomWalk[0] =
            proc_control_node_P.IMU_GyroParamsRandomWalk[0];
          proc_control_node_DW.obj_i.GyroParamsRandomWalk[1] =
            proc_control_node_P.IMU_GyroParamsRandomWalk[1];
          proc_control_node_DW.obj_i.GyroParamsRandomWalk[2] =
            proc_control_node_P.IMU_GyroParamsRandomWalk[2];
        }

        if (!proc_control_node_isequal
            (proc_control_node_DW.obj_i.GyroParamsTemperatureBias,
             proc_control_node_P.IMU_GyroParamsTemperatureBias)) {
          proc_control_node_B.SourceBlock_o1_g =
            (proc_control_node_DW.obj_i.isInitialized == 1);
          if (proc_control_node_B.SourceBlock_o1_g) {
            proc_control_node_DW.obj_i.TunablePropsChanged = true;
            proc_control_node_DW.obj_i.tunablePropertyChanged[19] = true;
          }

          proc_control_node_DW.obj_i.GyroParamsTemperatureBias[0] =
            proc_control_node_P.IMU_GyroParamsTemperatureBias[0];
          proc_control_node_DW.obj_i.GyroParamsTemperatureBias[1] =
            proc_control_node_P.IMU_GyroParamsTemperatureBias[1];
          proc_control_node_DW.obj_i.GyroParamsTemperatureBias[2] =
            proc_control_node_P.IMU_GyroParamsTemperatureBias[2];
        }

        if (!proc_control_node_isequal
            (proc_control_node_DW.obj_i.GyroParamsTemperatureScaleFactor,
             proc_control_node_P.IMU_GyroParamsTemperatureScaleF)) {
          proc_control_node_B.SourceBlock_o1_g =
            (proc_control_node_DW.obj_i.isInitialized == 1);
          if (proc_control_node_B.SourceBlock_o1_g) {
            proc_control_node_DW.obj_i.TunablePropsChanged = true;
            proc_control_node_DW.obj_i.tunablePropertyChanged[20] = true;
          }

          proc_control_node_DW.obj_i.GyroParamsTemperatureScaleFactor[0] =
            proc_control_node_P.IMU_GyroParamsTemperatureScaleF[0];
          proc_control_node_DW.obj_i.GyroParamsTemperatureScaleFactor[1] =
            proc_control_node_P.IMU_GyroParamsTemperatureScaleF[1];
          proc_control_node_DW.obj_i.GyroParamsTemperatureScaleFactor[2] =
            proc_control_node_P.IMU_GyroParamsTemperatureScaleF[2];
        }

        if (proc_control_node_DW.obj_i.MagParamsMeasurementRange !=
            proc_control_node_P.IMU_MagParamsMeasurementRange) {
          proc_control_node_B.SourceBlock_o1_g =
            (proc_control_node_DW.obj_i.isInitialized == 1);
          if (proc_control_node_B.SourceBlock_o1_g) {
            proc_control_node_DW.obj_i.TunablePropsChanged = true;
            proc_control_node_DW.obj_i.tunablePropertyChanged[22] = true;
          }

          proc_control_node_DW.obj_i.MagParamsMeasurementRange =
            proc_control_node_P.IMU_MagParamsMeasurementRange;
        }

        if (proc_control_node_DW.obj_i.MagParamsResolution !=
            proc_control_node_P.IMU_MagParamsResolution) {
          proc_control_node_B.SourceBlock_o1_g =
            (proc_control_node_DW.obj_i.isInitialized == 1);
          if (proc_control_node_B.SourceBlock_o1_g) {
            proc_control_node_DW.obj_i.TunablePropsChanged = true;
            proc_control_node_DW.obj_i.tunablePropertyChanged[23] = true;
          }

          proc_control_node_DW.obj_i.MagParamsResolution =
            proc_control_node_P.IMU_MagParamsResolution;
        }

        if (!proc_control_node_isequal
            (proc_control_node_DW.obj_i.MagParamsConstantBias,
             proc_control_node_P.IMU_MagParamsConstantBias)) {
          proc_control_node_B.SourceBlock_o1_g =
            (proc_control_node_DW.obj_i.isInitialized == 1);
          if (proc_control_node_B.SourceBlock_o1_g) {
            proc_control_node_DW.obj_i.TunablePropsChanged = true;
            proc_control_node_DW.obj_i.tunablePropertyChanged[24] = true;
          }

          proc_control_node_DW.obj_i.MagParamsConstantBias[0] =
            proc_control_node_P.IMU_MagParamsConstantBias[0];
          proc_control_node_DW.obj_i.MagParamsConstantBias[1] =
            proc_control_node_P.IMU_MagParamsConstantBias[1];
          proc_control_node_DW.obj_i.MagParamsConstantBias[2] =
            proc_control_node_P.IMU_MagParamsConstantBias[2];
        }

        if (!proc_control_node_isequal
            (proc_control_node_DW.obj_i.MagParamsAxesMisalignment,
             proc_control_node_P.IMU_MagParamsAxesMisalignment)) {
          proc_control_node_B.SourceBlock_o1_g =
            (proc_control_node_DW.obj_i.isInitialized == 1);
          if (proc_control_node_B.SourceBlock_o1_g) {
            proc_control_node_DW.obj_i.TunablePropsChanged = true;
            proc_control_node_DW.obj_i.tunablePropertyChanged[25] = true;
          }

          proc_control_node_DW.obj_i.MagParamsAxesMisalignment[0] =
            proc_control_node_P.IMU_MagParamsAxesMisalignment[0];
          proc_control_node_DW.obj_i.MagParamsAxesMisalignment[1] =
            proc_control_node_P.IMU_MagParamsAxesMisalignment[1];
          proc_control_node_DW.obj_i.MagParamsAxesMisalignment[2] =
            proc_control_node_P.IMU_MagParamsAxesMisalignment[2];
        }

        if (!proc_control_node_isequal
            (proc_control_node_DW.obj_i.MagParamsNoiseDensity,
             proc_control_node_P.IMU_MagParamsNoiseDensity)) {
          proc_control_node_B.SourceBlock_o1_g =
            (proc_control_node_DW.obj_i.isInitialized == 1);
          if (proc_control_node_B.SourceBlock_o1_g) {
            proc_control_node_DW.obj_i.TunablePropsChanged = true;
            proc_control_node_DW.obj_i.tunablePropertyChanged[26] = true;
          }

          proc_control_node_DW.obj_i.MagParamsNoiseDensity[0] =
            proc_control_node_P.IMU_MagParamsNoiseDensity[0];
          proc_control_node_DW.obj_i.MagParamsNoiseDensity[1] =
            proc_control_node_P.IMU_MagParamsNoiseDensity[1];
          proc_control_node_DW.obj_i.MagParamsNoiseDensity[2] =
            proc_control_node_P.IMU_MagParamsNoiseDensity[2];
        }

        if (!proc_control_node_isequal
            (proc_control_node_DW.obj_i.MagParamsBiasInstability,
             proc_control_node_P.IMU_MagParamsBiasInstability)) {
          proc_control_node_B.SourceBlock_o1_g =
            (proc_control_node_DW.obj_i.isInitialized == 1);
          if (proc_control_node_B.SourceBlock_o1_g) {
            proc_control_node_DW.obj_i.TunablePropsChanged = true;
            proc_control_node_DW.obj_i.tunablePropertyChanged[27] = true;
          }

          proc_control_node_DW.obj_i.MagParamsBiasInstability[0] =
            proc_control_node_P.IMU_MagParamsBiasInstability[0];
          proc_control_node_DW.obj_i.MagParamsBiasInstability[1] =
            proc_control_node_P.IMU_MagParamsBiasInstability[1];
          proc_control_node_DW.obj_i.MagParamsBiasInstability[2] =
            proc_control_node_P.IMU_MagParamsBiasInstability[2];
        }

        if (!proc_control_node_isequal
            (proc_control_node_DW.obj_i.MagParamsRandomWalk,
             proc_control_node_P.IMU_MagParamsRandomWalk)) {
          proc_control_node_B.SourceBlock_o1_g =
            (proc_control_node_DW.obj_i.isInitialized == 1);
          if (proc_control_node_B.SourceBlock_o1_g) {
            proc_control_node_DW.obj_i.TunablePropsChanged = true;
            proc_control_node_DW.obj_i.tunablePropertyChanged[28] = true;
          }

          proc_control_node_DW.obj_i.MagParamsRandomWalk[0] =
            proc_control_node_P.IMU_MagParamsRandomWalk[0];
          proc_control_node_DW.obj_i.MagParamsRandomWalk[1] =
            proc_control_node_P.IMU_MagParamsRandomWalk[1];
          proc_control_node_DW.obj_i.MagParamsRandomWalk[2] =
            proc_control_node_P.IMU_MagParamsRandomWalk[2];
        }

        if (!proc_control_node_isequal
            (proc_control_node_DW.obj_i.MagParamsTemperatureBias,
             proc_control_node_P.IMU_MagParamsTemperatureBias)) {
          proc_control_node_B.SourceBlock_o1_g =
            (proc_control_node_DW.obj_i.isInitialized == 1);
          if (proc_control_node_B.SourceBlock_o1_g) {
            proc_control_node_DW.obj_i.TunablePropsChanged = true;
            proc_control_node_DW.obj_i.tunablePropertyChanged[29] = true;
          }

          proc_control_node_DW.obj_i.MagParamsTemperatureBias[0] =
            proc_control_node_P.IMU_MagParamsTemperatureBias[0];
          proc_control_node_DW.obj_i.MagParamsTemperatureBias[1] =
            proc_control_node_P.IMU_MagParamsTemperatureBias[1];
          proc_control_node_DW.obj_i.MagParamsTemperatureBias[2] =
            proc_control_node_P.IMU_MagParamsTemperatureBias[2];
        }

        if (!proc_control_node_isequal
            (proc_control_node_DW.obj_i.MagParamsTemperatureScaleFactor,
             proc_control_node_P.IMU_MagParamsTemperatureScaleFa)) {
          proc_control_node_B.SourceBlock_o1_g =
            (proc_control_node_DW.obj_i.isInitialized == 1);
          if (proc_control_node_B.SourceBlock_o1_g) {
            proc_control_node_DW.obj_i.TunablePropsChanged = true;
            proc_control_node_DW.obj_i.tunablePropertyChanged[30] = true;
          }

          proc_control_node_DW.obj_i.MagParamsTemperatureScaleFactor[0] =
            proc_control_node_P.IMU_MagParamsTemperatureScaleFa[0];
          proc_control_node_DW.obj_i.MagParamsTemperatureScaleFactor[1] =
            proc_control_node_P.IMU_MagParamsTemperatureScaleFa[1];
          proc_control_node_DW.obj_i.MagParamsTemperatureScaleFactor[2] =
            proc_control_node_P.IMU_MagParamsTemperatureScaleFa[2];
        }

        proc_control_no_SystemCore_step(&proc_control_node_DW.obj_i,
          proc_control_node_B.Transpose_d, proc_control_node_B.Gain_j,
          proc_control_node_B.Transpose2, proc_control_node_B.sincos_o1,
          proc_control_node_B.TmpSignalConversionAtSFun_f,
          proc_control_node_B.u2);

        // MATLABSystem: '<S19>/AHRS' incorporates:
        //   MATLABSystem: '<S19>/IMU'

        if (proc_control_node_DW.obj_c.AccelerometerNoise !=
            proc_control_node_P.AHRS_AccelerometerNoise) {
          proc_control_node_B.SourceBlock_o1_g =
            (proc_control_node_DW.obj_c.isInitialized == 1);
          if (proc_control_node_B.SourceBlock_o1_g) {
            proc_control_node_DW.obj_c.TunablePropsChanged = true;
          }

          proc_control_node_DW.obj_c.AccelerometerNoise =
            proc_control_node_P.AHRS_AccelerometerNoise;
        }

        if (proc_control_node_DW.obj_c.GyroscopeNoise !=
            proc_control_node_P.AHRS_GyroscopeNoise) {
          proc_control_node_B.SourceBlock_o1_g =
            (proc_control_node_DW.obj_c.isInitialized == 1);
          if (proc_control_node_B.SourceBlock_o1_g) {
            proc_control_node_DW.obj_c.TunablePropsChanged = true;
          }

          proc_control_node_DW.obj_c.GyroscopeNoise =
            proc_control_node_P.AHRS_GyroscopeNoise;
        }

        if (proc_control_node_DW.obj_c.MagnetometerNoise !=
            proc_control_node_P.AHRS_MagnetometerNoise) {
          proc_control_node_B.SourceBlock_o1_g =
            (proc_control_node_DW.obj_c.isInitialized == 1);
          if (proc_control_node_B.SourceBlock_o1_g) {
            proc_control_node_DW.obj_c.TunablePropsChanged = true;
          }

          proc_control_node_DW.obj_c.MagnetometerNoise =
            proc_control_node_P.AHRS_MagnetometerNoise;
        }

        if (proc_control_node_DW.obj_c.GyroscopeDriftNoise !=
            proc_control_node_P.AHRS_GyroscopeDriftNoise) {
          proc_control_node_B.SourceBlock_o1_g =
            (proc_control_node_DW.obj_c.isInitialized == 1);
          if (proc_control_node_B.SourceBlock_o1_g) {
            proc_control_node_DW.obj_c.TunablePropsChanged = true;
          }

          proc_control_node_DW.obj_c.GyroscopeDriftNoise =
            proc_control_node_P.AHRS_GyroscopeDriftNoise;
        }

        if (proc_control_node_DW.obj_c.LinearAccelerationNoise !=
            proc_control_node_P.AHRS_LinearAccelerationNoise) {
          proc_control_node_B.SourceBlock_o1_g =
            (proc_control_node_DW.obj_c.isInitialized == 1);
          if (proc_control_node_B.SourceBlock_o1_g) {
            proc_control_node_DW.obj_c.TunablePropsChanged = true;
          }

          proc_control_node_DW.obj_c.LinearAccelerationNoise =
            proc_control_node_P.AHRS_LinearAccelerationNoise;
        }

        if (proc_control_node_DW.obj_c.MagneticDisturbanceNoise !=
            proc_control_node_P.AHRS_MagneticDisturbanceNoise) {
          proc_control_node_B.SourceBlock_o1_g =
            (proc_control_node_DW.obj_c.isInitialized == 1);
          if (proc_control_node_B.SourceBlock_o1_g) {
            proc_control_node_DW.obj_c.TunablePropsChanged = true;
          }

          proc_control_node_DW.obj_c.MagneticDisturbanceNoise =
            proc_control_node_P.AHRS_MagneticDisturbanceNoise;
        }

        if (proc_control_node_DW.obj_c.LinearAccelerationDecayFactor !=
            proc_control_node_P.AHRS_LinearAccelerationDecayFac) {
          proc_control_node_B.SourceBlock_o1_g =
            (proc_control_node_DW.obj_c.isInitialized == 1);
          if (proc_control_node_B.SourceBlock_o1_g) {
            proc_control_node_DW.obj_c.TunablePropsChanged = true;
          }

          proc_control_node_DW.obj_c.LinearAccelerationDecayFactor =
            proc_control_node_P.AHRS_LinearAccelerationDecayFac;
        }

        if (proc_control_node_DW.obj_c.MagneticDisturbanceDecayFactor !=
            proc_control_node_P.AHRS_MagneticDisturbanceDecayFa) {
          proc_control_node_B.SourceBlock_o1_g =
            (proc_control_node_DW.obj_c.isInitialized == 1);
          if (proc_control_node_B.SourceBlock_o1_g) {
            proc_control_node_DW.obj_c.TunablePropsChanged = true;
          }

          proc_control_node_DW.obj_c.MagneticDisturbanceDecayFactor =
            proc_control_node_P.AHRS_MagneticDisturbanceDecayFa;
        }

        if (proc_control_node_DW.obj_c.ExpectedMagneticFieldStrength !=
            proc_control_node_P.AHRS_ExpectedMagneticFieldStren) {
          proc_control_node_B.SourceBlock_o1_g =
            (proc_control_node_DW.obj_c.isInitialized == 1);
          if (proc_control_node_B.SourceBlock_o1_g) {
            proc_control_node_DW.obj_c.TunablePropsChanged = true;
          }

          proc_control_node_DW.obj_c.ExpectedMagneticFieldStrength =
            proc_control_node_P.AHRS_ExpectedMagneticFieldStren;
        }

        if (proc_control_node_DW.obj_c.TunablePropsChanged) {
          proc_control_node_DW.obj_c.TunablePropsChanged = false;
          proc_control_node_DW.obj_c.pSensorPeriod = 0.01;
          proc_control_node_DW.obj_c.pKalmanPeriod =
            proc_control_node_DW.obj_c.pSensorPeriod;
          proc_control_node_B.Product3_na =
            proc_control_node_DW.obj_c.pKalmanPeriod;
          proc_control_node_B.Product2_ks =
            proc_control_node_DW.obj_c.GyroscopeDriftNoise +
            proc_control_node_DW.obj_c.GyroscopeNoise;
          proc_control_node_B.rtb_sincos_o1_m_idx_0 =
            proc_control_node_B.Product3_na * proc_control_node_B.Product3_na *
            proc_control_node_B.Product2_ks;
          proc_control_node_B.Product_k =
            proc_control_node_B.rtb_sincos_o1_m_idx_0 +
            (proc_control_node_DW.obj_c.AccelerometerNoise +
             proc_control_node_DW.obj_c.LinearAccelerationNoise);
          proc_control_node_B.Product2_ks =
            proc_control_node_B.rtb_sincos_o1_m_idx_0 +
            (proc_control_node_DW.obj_c.MagnetometerNoise +
             proc_control_node_DW.obj_c.MagneticDisturbanceNoise);
          memset(&proc_control_node_DW.obj_c.pQv[0], 0, 36U * sizeof(real_T));
          for (proc_control_node_B.i_n = 0; proc_control_node_B.i_n < 3;
               proc_control_node_B.i_n++) {
            proc_control_node_B.Selector1_tmp = tmp[3 * proc_control_node_B.i_n];
            proc_control_node_DW.obj_c.pQv[6 * proc_control_node_B.i_n] =
              proc_control_node_B.Product_k * static_cast<real_T>
              (proc_control_node_B.Selector1_tmp);
            proc_control_node_B.Selector1_tmp_c = 6 * (proc_control_node_B.i_n +
              3);
            proc_control_node_DW.obj_c.pQv[proc_control_node_B.Selector1_tmp_c +
              3] = proc_control_node_B.Product2_ks * static_cast<real_T>
              (proc_control_node_B.Selector1_tmp);
            proc_control_node_B.Selector1_tmp = tmp[3 * proc_control_node_B.i_n
              + 1];
            proc_control_node_DW.obj_c.pQv[6 * proc_control_node_B.i_n + 1] =
              proc_control_node_B.Product_k * static_cast<real_T>
              (proc_control_node_B.Selector1_tmp);
            proc_control_node_DW.obj_c.pQv[proc_control_node_B.Selector1_tmp_c +
              4] = proc_control_node_B.Product2_ks * static_cast<real_T>
              (proc_control_node_B.Selector1_tmp);
            proc_control_node_B.Selector1_tmp = tmp[3 * proc_control_node_B.i_n
              + 2];
            proc_control_node_DW.obj_c.pQv[6 * proc_control_node_B.i_n + 2] =
              proc_control_node_B.Product_k * static_cast<real_T>
              (proc_control_node_B.Selector1_tmp);
            proc_control_node_DW.obj_c.pQv[proc_control_node_B.Selector1_tmp_c +
              5] = proc_control_node_B.Product2_ks * static_cast<real_T>
              (proc_control_node_B.Selector1_tmp);
          }
        }

        proc_contro_ahrsfilter_stepImpl(&proc_control_node_DW.obj_c,
          proc_control_node_B.sincos_o1,
          proc_control_node_B.TmpSignalConversionAtSFun_f,
          proc_control_node_B.u2, proc_control_node_B.AHRS_o1,
          proc_control_node_B.Gain_j);

        // End of MATLABSystem: '<S19>/AHRS'
        // Gain: '<S29>/Output' incorporates:
        //   RandomNumber: '<S29>/White Noise'

        proc_control_node_B.Output_d = sqrt
          (proc_control_node_P.BandLimitedWhiteNoise1_Cov) / 0.1 *
          proc_control_node_DW.NextOutput_k;

        // Gain: '<S32>/1//2' incorporates:
        //   Constant: '<S18>/ y devant Z haut'

        proc_control_node_B.Product2_ks = proc_control_node_P.u2_Gain *
          proc_control_node_P.ydevantZhaut_Value[0];

        // Trigonometry: '<S32>/sincos'
        proc_control_node_B.rtb_sincos_o1_m_idx_0 = sin
          (proc_control_node_B.Product2_ks);
        proc_control_node_B.fcn2 = cos(proc_control_node_B.Product2_ks);

        // Gain: '<S32>/1//2' incorporates:
        //   Constant: '<S18>/ y devant Z haut'

        proc_control_node_B.Product2_ks = proc_control_node_P.u2_Gain *
          proc_control_node_P.ydevantZhaut_Value[1];

        // Trigonometry: '<S32>/sincos'
        proc_control_node_B.Product1_a5 = sin(proc_control_node_B.Product2_ks);
        proc_control_node_B.rtb_sincos_o2_idx_1 = cos
          (proc_control_node_B.Product2_ks);

        // Gain: '<S32>/1//2' incorporates:
        //   Constant: '<S18>/ y devant Z haut'

        proc_control_node_B.Product2_ks = proc_control_node_P.u2_Gain *
          proc_control_node_P.ydevantZhaut_Value[2];

        // Trigonometry: '<S32>/sincos'
        proc_control_node_B.rtb_sincos_o1_m_idx_2 = sin
          (proc_control_node_B.Product2_ks);
        proc_control_node_B.Product2_ks = cos(proc_control_node_B.Product2_ks);

        // Fcn: '<S32>/q0' incorporates:
        //   Fcn: '<S32>/q3'

        proc_control_node_B.Product3_na = proc_control_node_B.fcn2 *
          proc_control_node_B.rtb_sincos_o2_idx_1;
        proc_control_node_B.Product1_dz =
          proc_control_node_B.rtb_sincos_o1_m_idx_0 *
          proc_control_node_B.Product1_a5;
        proc_control_node_B.Product_k = proc_control_node_B.Product3_na *
          proc_control_node_B.Product2_ks - proc_control_node_B.Product1_dz *
          proc_control_node_B.rtb_sincos_o1_m_idx_2;

        // Fcn: '<S32>/q1' incorporates:
        //   Fcn: '<S32>/q2'

        proc_control_node_B.fcn2 *= proc_control_node_B.Product1_a5;
        proc_control_node_B.rtb_sincos_o2_idx_1 *=
          proc_control_node_B.rtb_sincos_o1_m_idx_0;
        proc_control_node_B.rtb_sincos_o1_m_idx_0 = proc_control_node_B.fcn2 *
          proc_control_node_B.rtb_sincos_o1_m_idx_2 +
          proc_control_node_B.rtb_sincos_o2_idx_1 *
          proc_control_node_B.Product2_ks;

        // Fcn: '<S32>/q2'
        proc_control_node_B.rtb_sincos_o2_idx_1 = proc_control_node_B.fcn2 *
          proc_control_node_B.Product2_ks -
          proc_control_node_B.rtb_sincos_o2_idx_1 *
          proc_control_node_B.rtb_sincos_o1_m_idx_2;

        // Fcn: '<S32>/q3'
        proc_control_node_B.rtb_sincos_o1_m_idx_2 =
          proc_control_node_B.Product3_na *
          proc_control_node_B.rtb_sincos_o1_m_idx_2 +
          proc_control_node_B.Product1_dz * proc_control_node_B.Product2_ks;

        // Sqrt: '<S39>/sqrt' incorporates:
        //   Product: '<S40>/Product'
        //   Product: '<S40>/Product1'
        //   Product: '<S40>/Product2'
        //   Product: '<S40>/Product3'
        //   Sum: '<S40>/Sum'

        proc_control_node_B.Product2_ks = sqrt(((proc_control_node_B.Product_k *
          proc_control_node_B.Product_k +
          proc_control_node_B.rtb_sincos_o1_m_idx_0 *
          proc_control_node_B.rtb_sincos_o1_m_idx_0) +
          proc_control_node_B.rtb_sincos_o2_idx_1 *
          proc_control_node_B.rtb_sincos_o2_idx_1) +
          proc_control_node_B.rtb_sincos_o1_m_idx_2 *
          proc_control_node_B.rtb_sincos_o1_m_idx_2);

        // Product: '<S35>/Product'
        proc_control_node_B.Product_k /= proc_control_node_B.Product2_ks;

        // Product: '<S35>/Product3'
        proc_control_node_B.rtb_sincos_o1_m_idx_2 /=
          proc_control_node_B.Product2_ks;

        // Product: '<S35>/Product1'
        proc_control_node_B.rtb_sincos_o1_m_idx_0 /=
          proc_control_node_B.Product2_ks;

        // Product: '<S35>/Product2'
        proc_control_node_B.rtb_sincos_o2_idx_1 /=
          proc_control_node_B.Product2_ks;

        // Gain: '<S36>/Gain' incorporates:
        //   Product: '<S36>/Product'
        //   Product: '<S36>/Product1'
        //   Sum: '<S36>/Sum1'

        proc_control_node_B.Gain_f = (proc_control_node_B.rtb_sincos_o1_m_idx_0 *
          proc_control_node_B.rtb_sincos_o2_idx_1 +
          proc_control_node_B.Product_k *
          proc_control_node_B.rtb_sincos_o1_m_idx_2) *
          proc_control_node_P.Gain_Gain_c;

        // Gain: '<S36>/Gain1' incorporates:
        //   Product: '<S36>/Product2'
        //   Product: '<S36>/Product3'
        //   Sum: '<S36>/Sum2'

        proc_control_node_B.Gain1_b = (proc_control_node_B.rtb_sincos_o1_m_idx_0
          * proc_control_node_B.rtb_sincos_o1_m_idx_2 -
          proc_control_node_B.Product_k *
          proc_control_node_B.rtb_sincos_o2_idx_1) *
          proc_control_node_P.Gain1_Gain;

        // Gain: '<S36>/Gain2' incorporates:
        //   Constant: '<S36>/Constant'
        //   Product: '<S36>/Product6'
        //   Product: '<S36>/Product7'
        //   Sum: '<S36>/Sum3'

        proc_control_node_B.Gain2_l = ((proc_control_node_P.Constant_Value_nr -
          proc_control_node_B.rtb_sincos_o2_idx_1 *
          proc_control_node_B.rtb_sincos_o2_idx_1) -
          proc_control_node_B.rtb_sincos_o1_m_idx_2 *
          proc_control_node_B.rtb_sincos_o1_m_idx_2) *
          proc_control_node_P.Gain2_Gain;
      }

      // Sum: '<S18>/Sum3' incorporates:
      //   Gain: '<S18>/Gain'

      proc_control_node_B.AngularRate_h[0] = proc_control_node_P.Gain_Gain_i *
        proc_control_node_B.AngularRate_b[0] + proc_control_node_B.Output_d;
      proc_control_node_B.AngularRate_h[1] = proc_control_node_P.Gain_Gain_i *
        proc_control_node_B.AngularRate_b[1] + proc_control_node_B.Output_d;
      proc_control_node_B.AngularRate_h[2] = proc_control_node_P.Gain_Gain_i *
        proc_control_node_B.AngularRate_b[2] + proc_control_node_B.Output_d;

      // Sum: '<S36>/Sum' incorporates:
      //   Product: '<S36>/Product4'
      //   Product: '<S36>/Product5'
      //   Product: '<S36>/Product8'

      proc_control_node_B.Sum_h = (proc_control_node_B.BodyVelocity_i[0] *
        proc_control_node_B.Gain2_l + proc_control_node_B.Gain_f *
        proc_control_node_B.BodyVelocity_i[1]) + proc_control_node_B.Gain1_b *
        proc_control_node_B.BodyVelocity_i[2];
      if (rtmIsMajorTimeStep(proc_control_node_M) &&
          proc_control_node_M->Timing.TaskCounters.TID[1] == 0) {
        // Gain: '<S37>/Gain' incorporates:
        //   Product: '<S37>/Product'
        //   Product: '<S37>/Product1'
        //   Sum: '<S37>/Sum1'

        proc_control_node_B.Gain_e = (proc_control_node_B.rtb_sincos_o1_m_idx_0 *
          proc_control_node_B.rtb_sincos_o2_idx_1 -
          proc_control_node_B.Product_k *
          proc_control_node_B.rtb_sincos_o1_m_idx_2) *
          proc_control_node_P.Gain_Gain_cc;

        // Product: '<S37>/Product3' incorporates:
        //   Product: '<S38>/Product3'

        proc_control_node_B.Product1_dz =
          proc_control_node_B.rtb_sincos_o2_idx_1 *
          proc_control_node_B.rtb_sincos_o1_m_idx_2;

        // Product: '<S37>/Product2' incorporates:
        //   Product: '<S38>/Product2'

        proc_control_node_B.fcn2 = proc_control_node_B.Product_k *
          proc_control_node_B.rtb_sincos_o1_m_idx_0;

        // Gain: '<S37>/Gain1' incorporates:
        //   Product: '<S37>/Product2'
        //   Product: '<S37>/Product3'
        //   Sum: '<S37>/Sum2'

        proc_control_node_B.Gain1_bf = (proc_control_node_B.fcn2 +
          proc_control_node_B.Product1_dz) * proc_control_node_P.Gain1_Gain_b;

        // Product: '<S37>/Product6' incorporates:
        //   Product: '<S38>/Product6'

        proc_control_node_B.Product2_ks =
          proc_control_node_B.rtb_sincos_o1_m_idx_0 *
          proc_control_node_B.rtb_sincos_o1_m_idx_0;

        // Gain: '<S37>/Gain2' incorporates:
        //   Constant: '<S37>/Constant'
        //   Product: '<S37>/Product6'
        //   Product: '<S37>/Product7'
        //   Sum: '<S37>/Sum3'

        proc_control_node_B.Gain2_d = ((proc_control_node_P.Constant_Value_f -
          proc_control_node_B.Product2_ks) -
          proc_control_node_B.rtb_sincos_o1_m_idx_2 *
          proc_control_node_B.rtb_sincos_o1_m_idx_2) *
          proc_control_node_P.Gain2_Gain_c;

        // Gain: '<S38>/Gain' incorporates:
        //   Product: '<S38>/Product'
        //   Product: '<S38>/Product1'
        //   Sum: '<S38>/Sum1'

        proc_control_node_B.Gain_n = (proc_control_node_B.rtb_sincos_o1_m_idx_0 *
          proc_control_node_B.rtb_sincos_o1_m_idx_2 +
          proc_control_node_B.Product_k *
          proc_control_node_B.rtb_sincos_o2_idx_1) *
          proc_control_node_P.Gain_Gain_f;

        // Gain: '<S38>/Gain1' incorporates:
        //   Sum: '<S38>/Sum2'

        proc_control_node_B.Gain1_l = (proc_control_node_B.Product1_dz -
          proc_control_node_B.fcn2) * proc_control_node_P.Gain1_Gain_n;

        // Gain: '<S38>/Gain2' incorporates:
        //   Constant: '<S38>/Constant'
        //   Product: '<S38>/Product7'
        //   Sum: '<S38>/Sum3'

        proc_control_node_B.Gain2_m = ((proc_control_node_P.Constant_Value_pd -
          proc_control_node_B.Product2_ks) -
          proc_control_node_B.rtb_sincos_o2_idx_1 *
          proc_control_node_B.rtb_sincos_o2_idx_1) *
          proc_control_node_P.Gain2_Gain_i;
      }

      // Sum: '<S37>/Sum' incorporates:
      //   Product: '<S37>/Product4'
      //   Product: '<S37>/Product5'
      //   Product: '<S37>/Product8'

      proc_control_node_B.Sum_m0 = (proc_control_node_B.BodyVelocity_i[0] *
        proc_control_node_B.Gain_e + proc_control_node_B.Gain2_d *
        proc_control_node_B.BodyVelocity_i[1]) + proc_control_node_B.Gain1_bf *
        proc_control_node_B.BodyVelocity_i[2];

      // Sum: '<S38>/Sum' incorporates:
      //   Product: '<S38>/Product4'
      //   Product: '<S38>/Product5'
      //   Product: '<S38>/Product8'

      proc_control_node_B.Sum_c = (proc_control_node_B.BodyVelocity_i[0] *
        proc_control_node_B.Gain_n + proc_control_node_B.Gain1_l *
        proc_control_node_B.BodyVelocity_i[1]) + proc_control_node_B.Gain2_m *
        proc_control_node_B.BodyVelocity_i[2];
      if (rtmIsMajorTimeStep(proc_control_node_M) &&
          proc_control_node_M->Timing.TaskCounters.TID[1] == 0) {
      }

      if (rtmIsMajorTimeStep(proc_control_node_M) &&
          proc_control_node_M->Timing.TaskCounters.TID[6] == 0) {
      }

      if (rtmIsMajorTimeStep(proc_control_node_M)) {
        srUpdateBC(proc_control_node_DW.ModlePhysique_SubsysRanBC);
      }
    }

    // End of Outputs for SubSystem: '<Root>/Modèle Physique'
    if (rtmIsMajorTimeStep(proc_control_node_M) &&
        proc_control_node_M->Timing.TaskCounters.TID[5] == 0) {
      // DataTypeConversion: '<S5>/Data Type Conversion1'
      proc_control_node_B.DataTypeConversion1[2] = proc_control_node_B.NtoPWM[7];
      proc_control_node_B.DataTypeConversion1[3] = proc_control_node_B.NtoPWM[6];
      proc_control_node_B.DataTypeConversion1[0] = proc_control_node_B.NtoPWM[0];
      proc_control_node_B.DataTypeConversion1[4] = proc_control_node_B.NtoPWM[4];
      proc_control_node_B.DataTypeConversion1[1] = proc_control_node_B.NtoPWM[1];
      proc_control_node_B.DataTypeConversion1[5] = proc_control_node_B.NtoPWM[5];
      proc_control_node_B.DataTypeConversion1[6] = proc_control_node_B.NtoPWM[3];
      proc_control_node_B.DataTypeConversion1[7] = proc_control_node_B.NtoPWM[2];
    }

    if (rtmIsMajorTimeStep(proc_control_node_M) &&
        proc_control_node_M->Timing.TaskCounters.TID[3] == 0) {
    }

    if (rtmIsMajorTimeStep(proc_control_node_M) &&
        proc_control_node_M->Timing.TaskCounters.TID[5] == 0) {
    }

    if (rtmIsMajorTimeStep(proc_control_node_M) &&
        proc_control_node_M->Timing.TaskCounters.TID[4] == 0) {
      // Gain: '<S83>/Gain2'
      proc_control_node_B.Gain2 = proc_control_node_P.Gain2_Gain_n *
        proc_control_node_B.WorldPosition[0];

      // Gain: '<S83>/Gain1'
      proc_control_node_B.Gain1 = proc_control_node_P.Gain1_Gain_cu *
        proc_control_node_B.WorldPosition[1];

      // Sum: '<S83>/Sum' incorporates:
      //   Constant: '<S83>/Constant'
      //   Gain: '<S83>/Gain'

      proc_control_node_B.Sum_d = proc_control_node_P.Gain_Gain_ac *
        proc_control_node_B.WorldPosition[2] +
        proc_control_node_P.physics.dvlCenterDist;

      // Gain: '<S83>/Gain4'
      proc_control_node_B.Gain4 = proc_control_node_P.Gain4_Gain *
        proc_control_node_B.qW2S[2];

      // Gain: '<S83>/Gain3'
      proc_control_node_B.Gain3 = proc_control_node_P.Gain3_Gain_d *
        proc_control_node_B.qW2S[3];
    }

    if (rtmIsMajorTimeStep(proc_control_node_M) &&
        proc_control_node_M->Timing.TaskCounters.TID[2] == 0) {
      // MATLAB Function: '<S83>/MATLAB Function' incorporates:
      //   Constant: '<S83>/ '
      //   Constant: '<S83>/  '
      //   Constant: '<S85>/Constant'

      proc_control_node_B.msg_o = proc_control_node_P.Constant_Value_py;
      proc_control_node_B.msg_o.ModelName[0] =
        proc_control_node_P.simulation.model_name[0];
      proc_control_node_B.msg_o.ModelName[1] =
        proc_control_node_P.simulation.model_name[1];
      proc_control_node_B.msg_o.ModelName[2] =
        proc_control_node_P.simulation.model_name[2];
      proc_control_node_B.msg_o.ModelName[3] =
        proc_control_node_P.simulation.model_name[3];
      proc_control_node_B.msg_o.ModelName_SL_Info.CurrentLength = 4U;
      for (proc_control_node_B.i_n = 0; proc_control_node_B.i_n < 5;
           proc_control_node_B.i_n++) {
        proc_control_node_B.msg_o.ReferenceFrame[proc_control_node_B.i_n] =
          proc_control_node_P.simulation.reference_frame[proc_control_node_B.i_n];
      }

      proc_control_node_B.msg_o.ReferenceFrame_SL_Info.CurrentLength = 5U;
      proc_control_node_B.msg_o.Pose.Position.X = proc_control_node_B.Gain2;
      proc_control_node_B.msg_o.Pose.Position.Y = proc_control_node_B.Gain1;
      proc_control_node_B.msg_o.Pose.Position.Z = proc_control_node_B.Sum_d;
      proc_control_node_B.msg_o.Pose.Orientation.X = proc_control_node_B.qW2S[1];
      proc_control_node_B.msg_o.Pose.Orientation.Y = proc_control_node_B.Gain4;
      proc_control_node_B.msg_o.Pose.Orientation.Z = proc_control_node_B.Gain3;
      proc_control_node_B.msg_o.Pose.Orientation.W = proc_control_node_B.qW2S[0];

      // End of MATLAB Function: '<S83>/MATLAB Function'

      // Outputs for Atomic SubSystem: '<S83>/Publish'
      // MATLABSystem: '<S87>/SinkBlock'
      Pub_proc_control_node_1173.publish(&proc_control_node_B.msg_o);

      // End of Outputs for SubSystem: '<S83>/Publish'
    }

    // Outputs for Enabled SubSystem: '<Root>/ROS Output' incorporates:
    //   EnablePort: '<S4>/Enable'

    if ((rtmIsMajorTimeStep(proc_control_node_M) &&
         proc_control_node_M->Timing.TaskCounters.TID[5] == 0) &&
        rtmIsMajorTimeStep(proc_control_node_M)) {
      proc_control_node_DW.ROSOutput_MODE = proc_control_node_B.Reset;
    }

    if (proc_control_node_DW.ROSOutput_MODE) {
      // SignalConversion generated from: '<S4>/Output'
      proc_control_node_B.Quaternion_l[0] = proc_control_node_B.y_f[0];
      proc_control_node_B.Quaternion_l[1] = proc_control_node_B.y_f[1];
      proc_control_node_B.Quaternion_l[2] = proc_control_node_B.y_f[2];
      proc_control_node_B.Quaternion_l[3] = proc_control_node_B.y_f[3];

      // SignalConversion generated from: '<S4>/Output'
      proc_control_node_B.WorldPosition_o[0] =
        proc_control_node_B.WorldPosition_g[0];

      // SignalConversion generated from: '<S4>/Output'
      proc_control_node_B.BodyVelocity[0] = proc_control_node_B.BodyVelocity_i[0];

      // SignalConversion generated from: '<S4>/Output'
      proc_control_node_B.AngularRate_m[0] = proc_control_node_B.AngularRate_b[0];

      // SignalConversion generated from: '<S4>/Output'
      proc_control_node_B.WorldPosition_o[1] =
        proc_control_node_B.WorldPosition_g[1];

      // SignalConversion generated from: '<S4>/Output'
      proc_control_node_B.BodyVelocity[1] = proc_control_node_B.BodyVelocity_i[1];

      // SignalConversion generated from: '<S4>/Output'
      proc_control_node_B.AngularRate_m[1] = proc_control_node_B.AngularRate_b[1];

      // SignalConversion generated from: '<S4>/Output'
      proc_control_node_B.WorldPosition_o[2] =
        proc_control_node_B.WorldPosition_g[2];

      // SignalConversion generated from: '<S4>/Output'
      proc_control_node_B.BodyVelocity[2] = proc_control_node_B.BodyVelocity_i[2];

      // SignalConversion generated from: '<S4>/Output'
      proc_control_node_B.AngularRate_m[2] = proc_control_node_B.AngularRate_b[2];
      if (rtmIsMajorTimeStep(proc_control_node_M) &&
          proc_control_node_M->Timing.TaskCounters.TID[2] == 0) {
        // MATLAB Function: '<S52>/MATLAB Function' incorporates:
        //   Sum: '<S52>/Sum'

        proc_control_node_B.msg_p0.Position.X =
          proc_control_node_B.WorldPosition_g[0];
        proc_control_node_B.msg_p0.Position.Y =
          proc_control_node_B.WorldPosition_g[1];
        proc_control_node_B.msg_p0.Position.Z =
          proc_control_node_B.WorldPosition_g[2];
        proc_control_node_B.msg_p0.Orientation.X = proc_control_node_B.y_f[1];
        proc_control_node_B.msg_p0.Orientation.Y = proc_control_node_B.y_f[2];
        proc_control_node_B.msg_p0.Orientation.Z = proc_control_node_B.y_f[3];
        proc_control_node_B.msg_p0.Orientation.W = proc_control_node_B.y_f[0];

        // Outputs for Atomic SubSystem: '<S52>/Publish'
        // MATLABSystem: '<S61>/SinkBlock'
        Pub_proc_control_node_973.publish(&proc_control_node_B.msg_p0);

        // End of Outputs for SubSystem: '<S52>/Publish'
      }

      if (rtmIsMajorTimeStep(proc_control_node_M) &&
          proc_control_node_M->Timing.TaskCounters.TID[4] == 0) {
        // MATLAB Function: '<S50>/MATLAB Function' incorporates:
        //   Constant: '<S53>/Constant'
        //   SignalConversion generated from: '<S54>/ SFunction '

        proc_control_node_B.msg_p = proc_control_node_P.Constant_Value_n;
        proc_control_node_B.msg_p.XVelBtm = proc_control_node_B.Sum_h;
        proc_control_node_B.msg_p.YVelBtm = proc_control_node_B.Sum_m0;
        proc_control_node_B.msg_p.ZVelBtm = proc_control_node_B.Sum_c;

        // Outputs for Atomic SubSystem: '<S50>/Publish'
        // MATLABSystem: '<S55>/SinkBlock'
        Pub_proc_control_node_945.publish(&proc_control_node_B.msg_p);

        // End of Outputs for SubSystem: '<S50>/Publish'

        // MATLAB Function: '<S51>/MATLAB Function' incorporates:
        //   Constant: '<S56>/Constant'

        proc_control_node_B.msg_c = proc_control_node_P.Constant_Value_g;
        proc_control_node_B.msg_c.AngularVelocity.X =
          proc_control_node_B.AngularRate_h[0];
        proc_control_node_B.msg_c.AngularVelocity.Y =
          proc_control_node_B.AngularRate_h[1];
        proc_control_node_B.msg_c.AngularVelocity.Z =
          proc_control_node_B.AngularRate_h[2];
        proc_control_node_B.msg_c.Orientation.X =
          proc_control_node_B.Quaternion_p[1];
        proc_control_node_B.msg_c.Orientation.Y =
          proc_control_node_B.Quaternion_p[2];
        proc_control_node_B.msg_c.Orientation.Z =
          proc_control_node_B.Quaternion_p[3];
        proc_control_node_B.msg_c.Orientation.W =
          proc_control_node_B.Quaternion_p[0];

        // Outputs for Atomic SubSystem: '<S51>/Publish'
        // MATLABSystem: '<S58>/SinkBlock'
        Pub_proc_control_node_951.publish(&proc_control_node_B.msg_c);

        // End of Outputs for SubSystem: '<S51>/Publish'
      }

      if (rtmIsMajorTimeStep(proc_control_node_M) &&
          proc_control_node_M->Timing.TaskCounters.TID[1] == 0) {
      }

      if (rtmIsMajorTimeStep(proc_control_node_M)) {
        srUpdateBC(proc_control_node_DW.ROSOutput_SubsysRanBC);
      }
    }

    // End of Outputs for SubSystem: '<Root>/ROS Output'

    // Outputs for Enabled SubSystem: '<Root>/Plot values' incorporates:
    //   EnablePort: '<S2>/Enable'

    if ((rtmIsMajorTimeStep(proc_control_node_M) &&
         proc_control_node_M->Timing.TaskCounters.TID[5] == 0) &&
        rtmIsMajorTimeStep(proc_control_node_M)) {
      proc_control_node_DW.Plotvalues_MODE = proc_control_node_B.Reset;
    }

    if (proc_control_node_DW.Plotvalues_MODE) {
      if (rtmIsMajorTimeStep(proc_control_node_M) &&
          proc_control_node_M->Timing.TaskCounters.TID[1] == 0) {
      }

      if (rtmIsMajorTimeStep(proc_control_node_M)) {
        srUpdateBC(proc_control_node_DW.Plotvalues_SubsysRanBC);
      }
    }

    // End of Outputs for SubSystem: '<Root>/Plot values'
    if (rtmIsMajorTimeStep(proc_control_node_M) &&
        proc_control_node_M->Timing.TaskCounters.TID[5] == 0) {
      // MATLAB Function: '<S5>/MATLAB Function3' incorporates:
      //   Constant: '<S64>/Constant'
      //   SignalConversion generated from: '<S69>/ SFunction '

      proc_control_node_B.msg = proc_control_node_P.Constant_Value_j;
      proc_control_node_B.msg.Data[2] = proc_control_node_B.NtoPWM[7];
      proc_control_node_B.msg.Data[3] = proc_control_node_B.NtoPWM[6];
      proc_control_node_B.msg.Data[0] = proc_control_node_B.NtoPWM[0];
      proc_control_node_B.msg.Data[4] = proc_control_node_B.NtoPWM[4];
      proc_control_node_B.msg.Data[1] = proc_control_node_B.NtoPWM[1];
      proc_control_node_B.msg.Data[5] = proc_control_node_B.NtoPWM[5];
      proc_control_node_B.msg.Data[6] = proc_control_node_B.NtoPWM[3];
      proc_control_node_B.msg.Data[7] = proc_control_node_B.NtoPWM[2];
      proc_control_node_B.msg.Data_SL_Info.CurrentLength = 8U;

      // Outputs for Atomic SubSystem: '<S5>/Publish2'
      // MATLABSystem: '<S72>/SinkBlock'
      Pub_proc_control_node_1024.publish(&proc_control_node_B.msg);

      // End of Outputs for SubSystem: '<S5>/Publish2'

      // DataTypeConversion: '<S5>/Data Type Conversion2'
      proc_control_node_B.Product_k = fabs(proc_control_node_B.nlpstatus);
      if (proc_control_node_B.Product_k < 4.503599627370496E+15) {
        if (proc_control_node_B.Product_k >= 0.5) {
          proc_control_node_B.TransferFcn_a = floor
            (proc_control_node_B.nlpstatus + 0.5);
        } else {
          proc_control_node_B.TransferFcn_a = proc_control_node_B.nlpstatus *
            0.0;
        }
      } else {
        proc_control_node_B.TransferFcn_a = proc_control_node_B.nlpstatus;
      }

      if (rtIsNaN(proc_control_node_B.TransferFcn_a) || rtIsInf
          (proc_control_node_B.TransferFcn_a)) {
        proc_control_node_B.TransferFcn_a = 0.0;
      } else {
        proc_control_node_B.TransferFcn_a = fmod
          (proc_control_node_B.TransferFcn_a, 256.0);
      }

      // BusAssignment: '<S5>/Bus Assignment' incorporates:
      //   DataTypeConversion: '<S5>/Data Type Conversion2'

      proc_control_node_B.BusAssignment.Data = static_cast<int8_T>
        (proc_control_node_B.TransferFcn_a < 0.0 ? static_cast<int32_T>(
          static_cast<int8_T>(-static_cast<int8_T>(static_cast<uint8_T>
            (-proc_control_node_B.TransferFcn_a)))) : static_cast<int32_T>(
          static_cast<int8_T>(static_cast<uint8_T>
           (proc_control_node_B.TransferFcn_a))));

      // Outputs for Atomic SubSystem: '<S5>/Publish3'
      // MATLABSystem: '<S73>/SinkBlock'
      Pub_proc_control_node_1028.publish(&proc_control_node_B.BusAssignment);

      // End of Outputs for SubSystem: '<S5>/Publish3'

      // BusAssignment: '<S5>/Bus Assignment1' incorporates:
      //   DataTypeConversion: '<S5>/Data Type Conversion3'
      //   Delay: '<S5>/Delay'
      //   Sum: '<S5>/Sum'

      proc_control_node_B.BusAssignment1.Data =
        (proc_control_node_DW.Delay_DSTATE_f -
         proc_control_node_B.PulseGenerator != 0.0);

      // Outputs for Atomic SubSystem: '<S5>/Publish4'
      // MATLABSystem: '<S74>/SinkBlock'
      Pub_proc_control_node_1038.publish(&proc_control_node_B.BusAssignment1);

      // End of Outputs for SubSystem: '<S5>/Publish4'
    }

    if (rtmIsMajorTimeStep(proc_control_node_M) &&
        proc_control_node_M->Timing.TaskCounters.TID[4] == 0) {
      // MATLAB Function: '<S3>/MATLAB Function'
      proc_control_node_B.y_b = (proc_control_node_B.SourceBlock_o1_cz +
        proc_control_node_B.SourceBlock_o1_m >= 2);

      // BusAssignment: '<S6>/Bus Assignment' incorporates:
      //   DataTypeConversion: '<S6>/Cast To Boolean'

      proc_control_node_B.BusAssignment_c.Data = (proc_control_node_B.y_b != 0.0);

      // Outputs for Atomic SubSystem: '<S6>/Publish'
      // MATLABSystem: '<S76>/SinkBlock'
      Pub_proc_control_node_1121.publish(&proc_control_node_B.BusAssignment_c);

      // End of Outputs for SubSystem: '<S6>/Publish'
    }

    if (rtmIsMajorTimeStep(proc_control_node_M) &&
        proc_control_node_M->Timing.TaskCounters.TID[5] == 0) {
      // Outputs for Triggered SubSystem: '<Root>/Send Target Reached ' incorporates:
      //   TriggerPort: '<S7>/Trigger'

      if (rtmIsMajorTimeStep(proc_control_node_M)) {
        if (((proc_control_node_PrevZCX.SendTargetReached_Trig_ZCE == 1) !=
             proc_control_node_B.Merge1) &&
            (proc_control_node_PrevZCX.SendTargetReached_Trig_ZCE != 3)) {
          // BusAssignment: '<S7>/Bus Assignment'
          proc_control_node_B.BusAssignment_o.Data = proc_control_node_B.Merge1;

          // Outputs for Atomic SubSystem: '<S7>/Publish'
          // MATLABSystem: '<S78>/SinkBlock'
          Pub_proc_control_node_794.publish(&proc_control_node_B.BusAssignment_o);

          // End of Outputs for SubSystem: '<S7>/Publish'
          proc_control_node_DW.SendTargetReached_SubsysRanBC = 4;
        }

        proc_control_node_PrevZCX.SendTargetReached_Trig_ZCE =
          proc_control_node_B.Merge1;
      }

      // End of Outputs for SubSystem: '<Root>/Send Target Reached '
    }

    // FirstOrderHold: '<S8>/First Order Hold'
    memcpy(&proc_control_node_B.FirstOrderHold[0], &proc_control_node_DW.Ck[0],
           12U * sizeof(real_T));

    // FirstOrderHold: '<S8>/First Order Hold'
    if (proc_control_node_DW.Tk != (rtInf)) {
      proc_control_node_B.Product3_na = proc_control_node_M->Timing.t[0] -
        proc_control_node_DW.Tk;

      // FirstOrderHold: '<S8>/First Order Hold'
      for (proc_control_node_B.i_n = 0; proc_control_node_B.i_n < 12;
           proc_control_node_B.i_n++) {
        proc_control_node_B.FirstOrderHold[proc_control_node_B.i_n] +=
          proc_control_node_DW.Mk[proc_control_node_B.i_n] *
          proc_control_node_B.Product3_na;
      }
    }

    if (rtmIsMajorTimeStep(proc_control_node_M) &&
        proc_control_node_M->Timing.TaskCounters.TID[3] == 0) {
      // MATLAB Function: '<S8>/MATLAB Function1' incorporates:
      //   Constant: '<S79>/Constant'

      proc_control_node_B.msg_d = proc_control_node_P.Constant_Value_d;
      proc_control_node_B.msg_d.Pose.Pose.Position.X =
        proc_control_node_B.FirstOrderHold[0];
      proc_control_node_B.msg_d.Pose.Pose.Position.Y =
        proc_control_node_B.FirstOrderHold[1];
      proc_control_node_B.msg_d.Pose.Pose.Position.Z =
        proc_control_node_B.FirstOrderHold[2];
      proc_control_node_B.msg_d.Pose.Pose.Orientation.X =
        proc_control_node_B.FirstOrderHold[3];
      proc_control_node_B.msg_d.Pose.Pose.Orientation.Y =
        proc_control_node_B.FirstOrderHold[4];
      proc_control_node_B.msg_d.Pose.Pose.Orientation.Z =
        proc_control_node_B.FirstOrderHold[5];
      proc_control_node_B.msg_d.Twist.Twist.Linear.X =
        proc_control_node_B.FirstOrderHold[6];
      proc_control_node_B.msg_d.Twist.Twist.Linear.Y =
        proc_control_node_B.FirstOrderHold[7];
      proc_control_node_B.msg_d.Twist.Twist.Linear.Z =
        proc_control_node_B.FirstOrderHold[8];
      proc_control_node_B.msg_d.Twist.Twist.Angular.X =
        proc_control_node_B.FirstOrderHold[9];
      proc_control_node_B.msg_d.Twist.Twist.Angular.Y =
        proc_control_node_B.FirstOrderHold[10];
      proc_control_node_B.msg_d.Twist.Twist.Angular.Z =
        proc_control_node_B.FirstOrderHold[11];

      // Outputs for Atomic SubSystem: '<S8>/Publish'
      // MATLABSystem: '<S82>/SinkBlock'
      Pub_proc_control_node_1157.publish(&proc_control_node_B.msg_d);

      // End of Outputs for SubSystem: '<S8>/Publish'
    }

    // FirstOrderHold: '<S5>/First Order Hold1'
    memcpy(&proc_control_node_B.FirstOrderHold1[0], &proc_control_node_DW.Ck_n[0],
           sizeof(real_T) << 3U);

    // FirstOrderHold: '<S5>/First Order Hold1'
    if (proc_control_node_DW.Tk_m != (rtInf)) {
      proc_control_node_B.Product3_na = proc_control_node_M->Timing.t[0] -
        proc_control_node_DW.Tk_m;

      // FirstOrderHold: '<S5>/First Order Hold1'
      for (proc_control_node_B.i_n = 0; proc_control_node_B.i_n < 8;
           proc_control_node_B.i_n++) {
        proc_control_node_B.FirstOrderHold1[proc_control_node_B.i_n] +=
          proc_control_node_DW.Mk_o[proc_control_node_B.i_n] *
          proc_control_node_B.Product3_na;
      }
    }

    if (rtmIsMajorTimeStep(proc_control_node_M) &&
        proc_control_node_M->Timing.TaskCounters.TID[3] == 0) {
      // MATLAB Function: '<S5>/MATLAB Function2' incorporates:
      //   Constant: '<S63>/Constant'

      proc_control_node_B.msg = proc_control_node_P.Constant_Value;
      for (proc_control_node_B.i_n = 0; proc_control_node_B.i_n < 8;
           proc_control_node_B.i_n++) {
        proc_control_node_B.TransferFcn_a = rt_roundd_snf
          (proc_control_node_B.FirstOrderHold1[proc_control_node_B.i_n]);
        if (proc_control_node_B.TransferFcn_a < 65536.0) {
          if (proc_control_node_B.TransferFcn_a >= 0.0) {
            proc_control_node_B.msg.Data[proc_control_node_B.i_n] = static_cast<
              uint16_T>(proc_control_node_B.TransferFcn_a);
          } else {
            proc_control_node_B.msg.Data[proc_control_node_B.i_n] = 0U;
          }
        } else {
          proc_control_node_B.msg.Data[proc_control_node_B.i_n] = MAX_uint16_T;
        }
      }

      proc_control_node_B.msg.Data_SL_Info.CurrentLength = 8U;

      // End of MATLAB Function: '<S5>/MATLAB Function2'

      // Outputs for Atomic SubSystem: '<S5>/Publish1'
      // MATLABSystem: '<S71>/SinkBlock'
      Pub_proc_control_node_1014.publish(&proc_control_node_B.msg);

      // End of Outputs for SubSystem: '<S5>/Publish1'
    }

    // FirstOrderHold: '<S5>/First Order Hold'
    memcpy(&proc_control_node_B.FirstOrderHold_c[0], &proc_control_node_DW.Ck_b
           [0], sizeof(real_T) << 3U);

    // FirstOrderHold: '<S5>/First Order Hold'
    if (proc_control_node_DW.Tk_e != (rtInf)) {
      proc_control_node_B.Product3_na = proc_control_node_M->Timing.t[0] -
        proc_control_node_DW.Tk_e;

      // FirstOrderHold: '<S5>/First Order Hold'
      for (proc_control_node_B.i_n = 0; proc_control_node_B.i_n < 8;
           proc_control_node_B.i_n++) {
        proc_control_node_B.FirstOrderHold_c[proc_control_node_B.i_n] +=
          proc_control_node_DW.Mk_h[proc_control_node_B.i_n] *
          proc_control_node_B.Product3_na;
      }
    }

    if (rtmIsMajorTimeStep(proc_control_node_M) &&
        proc_control_node_M->Timing.TaskCounters.TID[3] == 0) {
      // MATLAB Function: '<S5>/MATLAB Function1' incorporates:
      //   Constant: '<S62>/Constant'

      proc_control_node_B.msg_l0 = proc_control_node_P.Constant_Value_p;
      for (proc_control_node_B.i_n = 0; proc_control_node_B.i_n < 8;
           proc_control_node_B.i_n++) {
        proc_control_node_B.TransferFcn_a = rt_roundd_snf
          (proc_control_node_B.FirstOrderHold_c[proc_control_node_B.i_n]);
        if (proc_control_node_B.TransferFcn_a < 128.0) {
          if (proc_control_node_B.TransferFcn_a >= -128.0) {
            proc_control_node_B.msg_l0.Data[proc_control_node_B.i_n] =
              static_cast<int8_T>(proc_control_node_B.TransferFcn_a);
          } else {
            proc_control_node_B.msg_l0.Data[proc_control_node_B.i_n] =
              MIN_int8_T;
          }
        } else {
          proc_control_node_B.msg_l0.Data[proc_control_node_B.i_n] = MAX_int8_T;
        }
      }

      proc_control_node_B.msg_l0.Data_SL_Info.CurrentLength = 8U;

      // End of MATLAB Function: '<S5>/MATLAB Function1'

      // Outputs for Atomic SubSystem: '<S5>/Publish'
      // MATLABSystem: '<S70>/SinkBlock'
      Pub_proc_control_node_1007.publish(&proc_control_node_B.msg_l0);

      // End of Outputs for SubSystem: '<S5>/Publish'
    }

    if (rtmIsMajorTimeStep(proc_control_node_M) &&
        proc_control_node_M->Timing.TaskCounters.TID[1] == 0) {
    }
  }

  if (rtmIsMajorTimeStep(proc_control_node_M)) {
    real_T err;
    int32_T i;
    boolean_T guard1 = false;
    if (rtmIsMajorTimeStep(proc_control_node_M) &&
        proc_control_node_M->Timing.TaskCounters.TID[4] == 0) {
      // Update for Delay: '<S10>/Delay'
      proc_control_node_DW.Delay_DSTATE[0] = proc_control_node_B.y_g[0];
      proc_control_node_DW.Delay_DSTATE[1] = proc_control_node_B.y_g[1];
      proc_control_node_DW.Delay_DSTATE[2] = proc_control_node_B.y_g[2];

      // Update for DiscreteIntegrator: '<S10>/Discrete-Time Integrator'
      proc_control_node_DW.DiscreteTimeIntegrator_IC_LOADI = 0U;
      proc_control_node_DW.DiscreteTimeIntegrator_DSTATE[0] =
        proc_control_node_P.DiscreteTimeIntegrator_gainva_a *
        proc_control_node_B.Sum_a + proc_control_node_B.WorldPosition[0];
      proc_control_node_DW.DiscreteTimeIntegrator_DSTATE[1] =
        proc_control_node_P.DiscreteTimeIntegrator_gainva_a *
        proc_control_node_B.Sum_g + proc_control_node_B.WorldPosition[1];
      proc_control_node_DW.DiscreteTimeIntegrator_DSTATE[2] =
        proc_control_node_P.DiscreteTimeIntegrator_gainva_a *
        proc_control_node_B.Sum_e + proc_control_node_B.WorldPosition[2];
      proc_control_node_DW.DiscreteTimeIntegrator_PrevRese = static_cast<int8_T>
        (proc_control_node_B.OR);

      // Update for DiscreteIntegrator: '<S10>/Discrete-Time Integrator1'
      proc_control_node_DW.DiscreteTimeIntegrator1_DSTATE =
        proc_control_node_P.DiscreteTimeIntegrator1_gainval * 0.0 +
        proc_control_node_B.BodyPosition;
      proc_control_node_DW.DiscreteTimeIntegrator1_PrevRes = static_cast<int8_T>
        (proc_control_node_B.OR);
    }

    if (rtmIsMajorTimeStep(proc_control_node_M) &&
        proc_control_node_M->Timing.TaskCounters.TID[3] == 0) {
      // Update for DiscreteIntegrator: '<S156>/Integrator' incorporates:
      //   Constant: '<S152>/Constant'

      if (proc_control_node_P.Constant_Value_ji > 0.0) {
        proc_control_node_DW.Integrator_PrevResetState = 1;
      } else if (proc_control_node_P.Constant_Value_ji < 0.0) {
        proc_control_node_DW.Integrator_PrevResetState = -1;
      } else if (proc_control_node_P.Constant_Value_ji == 0.0) {
        proc_control_node_DW.Integrator_PrevResetState = 0;
      } else {
        proc_control_node_DW.Integrator_PrevResetState = 2;
      }

      for (i = 0; i < 6; i++) {
        proc_control_node_DW.Integrator_DSTATE[i] +=
          proc_control_node_P.Integrator_gainval *
          proc_control_node_B.Saturation_h[i];
        if (proc_control_node_DW.Integrator_DSTATE[i] >=
            proc_control_node_P.Integrator_UpperSat) {
          proc_control_node_DW.Integrator_DSTATE[i] =
            proc_control_node_P.Integrator_UpperSat;
        } else if (proc_control_node_DW.Integrator_DSTATE[i] <=
                   proc_control_node_P.Integrator_LowerSat) {
          proc_control_node_DW.Integrator_DSTATE[i] =
            proc_control_node_P.Integrator_LowerSat;
        }

        // Update for DiscreteIntegrator: '<S157>/Integrator' incorporates:
        //   DiscreteIntegrator: '<S156>/Integrator'

        proc_control_node_DW.Integrator_DSTATE_h[i] +=
          proc_control_node_P.Integrator_gainval_a * proc_control_node_B.Sum_n[i];
        if (proc_control_node_DW.Integrator_DSTATE_h[i] >=
            proc_control_node_P.Integrator_UpperSat_p) {
          proc_control_node_DW.Integrator_DSTATE_h[i] =
            proc_control_node_P.Integrator_UpperSat_p;
        } else if (proc_control_node_DW.Integrator_DSTATE_h[i] <=
                   proc_control_node_P.Integrator_LowerSat_j) {
          proc_control_node_DW.Integrator_DSTATE_h[i] =
            proc_control_node_P.Integrator_LowerSat_j;
        }
      }

      // End of Update for DiscreteIntegrator: '<S156>/Integrator'

      // Update for DiscreteIntegrator: '<S157>/Integrator' incorporates:
      //   Constant: '<S152>/Constant1'

      if (proc_control_node_P.Constant1_Value_pt > 0.0) {
        proc_control_node_DW.Integrator_PrevResetState_l = 1;
      } else if (proc_control_node_P.Constant1_Value_pt < 0.0) {
        proc_control_node_DW.Integrator_PrevResetState_l = -1;
      } else if (proc_control_node_P.Constant1_Value_pt == 0.0) {
        proc_control_node_DW.Integrator_PrevResetState_l = 0;
      } else {
        proc_control_node_DW.Integrator_PrevResetState_l = 2;
      }
    }

    if (rtmIsMajorTimeStep(proc_control_node_M) &&
        proc_control_node_M->Timing.TaskCounters.TID[5] == 0) {
      // Update for Memory: '<S194>/Memory'
      proc_control_node_DW.Memory_PreviousInput = proc_control_node_B.Reset;

      // Update for Delay: '<S5>/Delay'
      proc_control_node_DW.Delay_DSTATE_f = proc_control_node_B.PulseGenerator;
    }

    // Update for Enabled SubSystem: '<Root>/Modèle Physique' incorporates:
    //   EnablePort: '<S1>/Enable'

    if (proc_control_node_DW.ModlePhysique_MODE) {
      // Update for Integrator: '<S1>/Integrator1'
      proc_control_node_DW.Integrator1_IWORK = 0;
      if (rtmIsMajorTimeStep(proc_control_node_M) &&
          proc_control_node_M->Timing.TaskCounters.TID[6] == 0) {
        // Update for UniformRandomNumber: '<S16>/X Drift'
        proc_control_node_DW.XDrift_NextOutput = (proc_control_node_P.dMaxX -
          proc_control_node_P.dMinX) * rt_urand_Upu32_Yd_f_pw_snf
          (&proc_control_node_DW.RandSeed) + proc_control_node_P.dMinX;

        // Update for UniformRandomNumber: '<S16>/Y Drift'
        proc_control_node_DW.YDrift_NextOutput = (proc_control_node_P.dMaxY -
          proc_control_node_P.dMinY) * rt_urand_Upu32_Yd_f_pw_snf
          (&proc_control_node_DW.RandSeed_n) + proc_control_node_P.dMinY;
      }

      // Update for Integrator: '<S1>/Integrator'
      proc_control_node_DW.Integrator_IWORK = 0;

      // Update for Integrator: '<S1>/Integrator2'
      proc_control_node_DW.Integrator2_IWORK = 0;

      // Update for Integrator: '<S1>/Integrator3'
      proc_control_node_DW.Integrator3_IWORK = 0;
      if (rtmIsMajorTimeStep(proc_control_node_M) &&
          proc_control_node_M->Timing.TaskCounters.TID[1] == 0) {
        // Update for RandomNumber: '<S28>/White Noise'
        proc_control_node_DW.NextOutput = rt_nrand_Upu32_Yd_f_pw_snf
          (&proc_control_node_DW.RandSeed_g) *
          proc_control_node_P.WhiteNoise_StdDev +
          proc_control_node_P.WhiteNoise_Mean;

        // Update for RandomNumber: '<S29>/White Noise'
        proc_control_node_DW.NextOutput_k = rt_nrand_Upu32_Yd_f_pw_snf
          (&proc_control_node_DW.RandSeed_g2) *
          proc_control_node_P.WhiteNoise_StdDev_f +
          proc_control_node_P.WhiteNoise_Mean_n;
      }
    }

    // End of Update for SubSystem: '<Root>/Modèle Physique'

    // Update for FirstOrderHold: '<S8>/First Order Hold'
    if (rtmIsMajorTimeStep(proc_control_node_M) &&
        proc_control_node_M->Timing.TaskCounters.TID[4] == 0) {
      for (i = 0; i < 12; i++) {
        guard1 = false;
        if (!(proc_control_node_DW.Tk == (rtInf))) {
          if ((proc_control_node_B.TmpSignalConversionAtFirstOrder[i] >= -1.0) &&
              (proc_control_node_B.TmpSignalConversionAtFirstOrder[i] <= 1.0)) {
            proc_control_node_B.tol_cf =
              proc_control_node_P.FirstOrderHold_ErrTol;
          } else if (proc_control_node_B.TmpSignalConversionAtFirstOrder[i] >
                     1.0) {
            proc_control_node_B.tol_cf =
              proc_control_node_B.TmpSignalConversionAtFirstOrder[i] *
              proc_control_node_P.FirstOrderHold_ErrTol;
          } else {
            proc_control_node_B.tol_cf =
              -(proc_control_node_B.TmpSignalConversionAtFirstOrder[i] *
                proc_control_node_P.FirstOrderHold_ErrTol);
          }

          err = proc_control_node_B.FirstOrderHold[i] -
            proc_control_node_B.TmpSignalConversionAtFirstOrder[i];
          if ((err > proc_control_node_B.tol_cf) || (err <
               -proc_control_node_B.tol_cf)) {
            guard1 = true;
          } else {
            proc_control_node_DW.Mk[i] =
              (proc_control_node_B.TmpSignalConversionAtFirstOrder[i] -
               proc_control_node_DW.Uk[i]) / (proc_control_node_M->Timing.t[0] -
              proc_control_node_DW.Tk);
            proc_control_node_DW.Ck[i] = proc_control_node_B.FirstOrderHold[i];
          }
        } else {
          guard1 = true;
        }

        if (guard1) {
          if (proc_control_node_B.TmpSignalConversionAtFirstOrder[i] !=
              proc_control_node_B.FirstOrderHold[i]) {
            rtsiSetBlockStateForSolverChangedAtMajorStep
              (&proc_control_node_M->solverInfo, true);
            rtsiSetContTimeOutputInconsistentWithStateAtMajorStep
              (&proc_control_node_M->solverInfo, true);
          }

          proc_control_node_DW.Ck[i] =
            proc_control_node_B.TmpSignalConversionAtFirstOrder[i];
          proc_control_node_DW.Mk[i] = 0.0;
        }

        proc_control_node_DW.Uk[i] =
          proc_control_node_B.TmpSignalConversionAtFirstOrder[i];
      }

      proc_control_node_DW.Tk = proc_control_node_M->Timing.t[0];
    }

    // End of Update for FirstOrderHold: '<S8>/First Order Hold'

    // Update for FirstOrderHold: '<S5>/First Order Hold1'
    if (rtmIsMajorTimeStep(proc_control_node_M) &&
        proc_control_node_M->Timing.TaskCounters.TID[5] == 0) {
      for (i = 0; i < 8; i++) {
        guard1 = false;
        if (!(proc_control_node_DW.Tk_m == (rtInf))) {
          if ((proc_control_node_B.DataTypeConversion1[i] >= -1.0) &&
              (proc_control_node_B.DataTypeConversion1[i] <= 1.0)) {
            proc_control_node_B.tol_cf =
              proc_control_node_P.FirstOrderHold1_ErrTol;
          } else if (proc_control_node_B.DataTypeConversion1[i] > 1.0) {
            proc_control_node_B.tol_cf =
              proc_control_node_B.DataTypeConversion1[i] *
              proc_control_node_P.FirstOrderHold1_ErrTol;
          } else {
            proc_control_node_B.tol_cf =
              -(proc_control_node_B.DataTypeConversion1[i] *
                proc_control_node_P.FirstOrderHold1_ErrTol);
          }

          err = proc_control_node_B.FirstOrderHold1[i] -
            proc_control_node_B.DataTypeConversion1[i];
          if ((err > proc_control_node_B.tol_cf) || (err <
               -proc_control_node_B.tol_cf)) {
            guard1 = true;
          } else {
            proc_control_node_DW.Mk_o[i] =
              (proc_control_node_B.DataTypeConversion1[i] -
               proc_control_node_DW.Uk_g[i]) / (proc_control_node_M->Timing.t[0]
              - proc_control_node_DW.Tk_m);
            proc_control_node_DW.Ck_n[i] = proc_control_node_B.FirstOrderHold1[i];
          }
        } else {
          guard1 = true;
        }

        if (guard1) {
          if (proc_control_node_B.DataTypeConversion1[i] !=
              proc_control_node_B.FirstOrderHold1[i]) {
            rtsiSetBlockStateForSolverChangedAtMajorStep
              (&proc_control_node_M->solverInfo, true);
            rtsiSetContTimeOutputInconsistentWithStateAtMajorStep
              (&proc_control_node_M->solverInfo, true);
          }

          proc_control_node_DW.Ck_n[i] =
            proc_control_node_B.DataTypeConversion1[i];
          proc_control_node_DW.Mk_o[i] = 0.0;
        }

        proc_control_node_DW.Uk_g[i] = proc_control_node_B.DataTypeConversion1[i];
      }

      proc_control_node_DW.Tk_m = proc_control_node_M->Timing.t[0];

      // Update for FirstOrderHold: '<S5>/First Order Hold' incorporates:
      //   FirstOrderHold: '<S5>/First Order Hold1'

      for (i = 0; i < 8; i++) {
        guard1 = false;
        if (!(proc_control_node_DW.Tk_e == (rtInf))) {
          if ((proc_control_node_B.Saturation[i] >= -1.0) &&
              (proc_control_node_B.Saturation[i] <= 1.0)) {
            proc_control_node_B.tol_cf =
              proc_control_node_P.FirstOrderHold_ErrTol_p;
          } else if (proc_control_node_B.Saturation[i] > 1.0) {
            proc_control_node_B.tol_cf = proc_control_node_B.Saturation[i] *
              proc_control_node_P.FirstOrderHold_ErrTol_p;
          } else {
            proc_control_node_B.tol_cf = -(proc_control_node_B.Saturation[i] *
              proc_control_node_P.FirstOrderHold_ErrTol_p);
          }

          err = proc_control_node_B.FirstOrderHold_c[i] -
            proc_control_node_B.Saturation[i];
          if ((err > proc_control_node_B.tol_cf) || (err <
               -proc_control_node_B.tol_cf)) {
            guard1 = true;
          } else {
            proc_control_node_DW.Mk_h[i] = (proc_control_node_B.Saturation[i] -
              proc_control_node_DW.Uk_h[i]) / (proc_control_node_M->Timing.t[0]
              - proc_control_node_DW.Tk_e);
            proc_control_node_DW.Ck_b[i] =
              proc_control_node_B.FirstOrderHold_c[i];
          }
        } else {
          guard1 = true;
        }

        if (guard1) {
          if (proc_control_node_B.Saturation[i] !=
              proc_control_node_B.FirstOrderHold_c[i]) {
            rtsiSetBlockStateForSolverChangedAtMajorStep
              (&proc_control_node_M->solverInfo, true);
            rtsiSetContTimeOutputInconsistentWithStateAtMajorStep
              (&proc_control_node_M->solverInfo, true);
          }

          proc_control_node_DW.Ck_b[i] = proc_control_node_B.Saturation[i];
          proc_control_node_DW.Mk_h[i] = 0.0;
        }

        proc_control_node_DW.Uk_h[i] = proc_control_node_B.Saturation[i];
      }

      proc_control_node_DW.Tk_e = proc_control_node_M->Timing.t[0];

      // End of Update for FirstOrderHold: '<S5>/First Order Hold'
    }

    // End of Update for FirstOrderHold: '<S5>/First Order Hold1'

    // ContTimeOutputInconsistentWithStateAtMajorOutputFlag is set, need to run a minor output 
    if (rtmIsMajorTimeStep(proc_control_node_M)) {
      if (rtsiGetContTimeOutputInconsistentWithStateAtMajorStep
          (&proc_control_node_M->solverInfo)) {
        rtsiSetSimTimeStep(&proc_control_node_M->solverInfo,MINOR_TIME_STEP);
        rtsiSetContTimeOutputInconsistentWithStateAtMajorStep
          (&proc_control_node_M->solverInfo, false);
        proc_control_node_step();
        rtsiSetSimTimeStep(&proc_control_node_M->solverInfo, MAJOR_TIME_STEP);
      }
    }

    // External mode
    rtExtModeUploadCheckTrigger(7);

    {                                  // Sample time: [0.0s, 0.0s]
      rtExtModeUpload(0, (real_T)proc_control_node_M->Timing.t[0]);
    }

    if (rtmIsMajorTimeStep(proc_control_node_M) &&
        proc_control_node_M->Timing.TaskCounters.TID[1] == 0) {// Sample time: [0.01s, 0.0s] 
      rtExtModeUpload(1, (real_T)((proc_control_node_M->Timing.clockTick1) *
        0.01));
    }

    if (rtmIsMajorTimeStep(proc_control_node_M) &&
        proc_control_node_M->Timing.TaskCounters.TID[2] == 0) {// Sample time: [0.02s, 0.0s] 
      rtExtModeUpload(2, (real_T)((proc_control_node_M->Timing.clockTick2) *
        0.02));
    }

    if (rtmIsMajorTimeStep(proc_control_node_M) &&
        proc_control_node_M->Timing.TaskCounters.TID[3] == 0) {// Sample time: [0.04s, 0.0s] 
      rtExtModeUpload(3, (real_T)((proc_control_node_M->Timing.clockTick3) *
        0.04));
    }

    if (rtmIsMajorTimeStep(proc_control_node_M) &&
        proc_control_node_M->Timing.TaskCounters.TID[4] == 0) {// Sample time: [0.05s, 0.0s] 
      rtExtModeUpload(4, (real_T)((proc_control_node_M->Timing.clockTick4) *
        0.05));
    }

    if (rtmIsMajorTimeStep(proc_control_node_M) &&
        proc_control_node_M->Timing.TaskCounters.TID[5] == 0) {// Sample time: [0.25s, 0.0s] 
      rtExtModeUpload(5, (real_T)((proc_control_node_M->Timing.clockTick5) *
        0.25));
    }

    if (rtmIsMajorTimeStep(proc_control_node_M) &&
        proc_control_node_M->Timing.TaskCounters.TID[6] == 0) {// Sample time: [5.0s, 0.0s] 
      rtExtModeUpload(6, (real_T)((proc_control_node_M->Timing.clockTick6) * 5.0));
    }
  }                                    // end MajorTimeStep

  if (rtmIsMajorTimeStep(proc_control_node_M)) {
    // signal main to stop simulation
    {                                  // Sample time: [0.0s, 0.0s]
      if ((rtmGetTFinal(proc_control_node_M)!=-1) &&
          !((rtmGetTFinal(proc_control_node_M)-
             ((proc_control_node_M->Timing.clockTick1) * 0.01)) >
            ((proc_control_node_M->Timing.clockTick1) * 0.01) * (DBL_EPSILON)))
      {
        rtmSetErrorStatus(proc_control_node_M, "Simulation finished");
      }

      if (rtmGetStopRequested(proc_control_node_M)) {
        rtmSetErrorStatus(proc_control_node_M, "Simulation finished");
      }
    }

    rt_ertODEUpdateContinuousStates(&proc_control_node_M->solverInfo);

    // Update absolute time for base rate
    // The "clockTick0" counts the number of times the code of this task has
    //  been executed. The absolute time is the multiplication of "clockTick0"
    //  and "Timing.stepSize0". Size of "clockTick0" ensures timer will not
    //  overflow during the application lifespan selected.

    ++proc_control_node_M->Timing.clockTick0;
    proc_control_node_M->Timing.t[0] = rtsiGetSolverStopTime
      (&proc_control_node_M->solverInfo);

    {
      // Update absolute timer for sample time: [0.01s, 0.0s]
      // The "clockTick1" counts the number of times the code of this task has
      //  been executed. The resolution of this integer timer is 0.01, which is the step size
      //  of the task. Size of "clockTick1" ensures timer will not overflow during the
      //  application lifespan selected.

      proc_control_node_M->Timing.clockTick1++;
    }

    if (rtmIsMajorTimeStep(proc_control_node_M) &&
        proc_control_node_M->Timing.TaskCounters.TID[2] == 0) {
      // Update absolute timer for sample time: [0.02s, 0.0s]
      // The "clockTick2" counts the number of times the code of this task has
      //  been executed. The resolution of this integer timer is 0.02, which is the step size
      //  of the task. Size of "clockTick2" ensures timer will not overflow during the
      //  application lifespan selected.

      proc_control_node_M->Timing.clockTick2++;
    }

    if (rtmIsMajorTimeStep(proc_control_node_M) &&
        proc_control_node_M->Timing.TaskCounters.TID[3] == 0) {
      // Update absolute timer for sample time: [0.04s, 0.0s]
      // The "clockTick3" counts the number of times the code of this task has
      //  been executed. The resolution of this integer timer is 0.04, which is the step size
      //  of the task. Size of "clockTick3" ensures timer will not overflow during the
      //  application lifespan selected.

      proc_control_node_M->Timing.clockTick3++;
    }

    if (rtmIsMajorTimeStep(proc_control_node_M) &&
        proc_control_node_M->Timing.TaskCounters.TID[4] == 0) {
      // Update absolute timer for sample time: [0.05s, 0.0s]
      // The "clockTick4" counts the number of times the code of this task has
      //  been executed. The resolution of this integer timer is 0.05, which is the step size
      //  of the task. Size of "clockTick4" ensures timer will not overflow during the
      //  application lifespan selected.

      proc_control_node_M->Timing.clockTick4++;
    }

    if (rtmIsMajorTimeStep(proc_control_node_M) &&
        proc_control_node_M->Timing.TaskCounters.TID[5] == 0) {
      // Update absolute timer for sample time: [0.25s, 0.0s]
      // The "clockTick5" counts the number of times the code of this task has
      //  been executed. The resolution of this integer timer is 0.25, which is the step size
      //  of the task. Size of "clockTick5" ensures timer will not overflow during the
      //  application lifespan selected.

      proc_control_node_M->Timing.clockTick5++;
    }

    if (rtmIsMajorTimeStep(proc_control_node_M) &&
        proc_control_node_M->Timing.TaskCounters.TID[6] == 0) {
      // Update absolute timer for sample time: [5.0s, 0.0s]
      // The "clockTick6" counts the number of times the code of this task has
      //  been executed. The resolution of this integer timer is 5.0, which is the step size
      //  of the task. Size of "clockTick6" ensures timer will not overflow during the
      //  application lifespan selected.

      proc_control_node_M->Timing.clockTick6++;
    }

    rate_scheduler();
  }                                    // end MajorTimeStep
}

// Derivatives for root system: '<Root>'
void proc_control_node_derivatives(void)
{
  XDot_proc_control_node_T *_rtXdot;
  _rtXdot = ((XDot_proc_control_node_T *) proc_control_node_M->derivs);

  // Derivatives for Enabled SubSystem: '<Root>/Modèle Physique'
  if (proc_control_node_DW.ModlePhysique_MODE) {
    // Derivatives for Integrator: '<S1>/Integrator1'
    _rtXdot->Integrator1_CSTATE[0] = proc_control_node_B.Quaternion_dot[0];
    _rtXdot->Integrator1_CSTATE[1] = proc_control_node_B.Quaternion_dot[1];
    _rtXdot->Integrator1_CSTATE[2] = proc_control_node_B.Quaternion_dot[2];
    _rtXdot->Integrator1_CSTATE[3] = proc_control_node_B.Quaternion_dot[3];

    // Derivatives for TransferFcn: '<S20>/Transfer Fcn'
    _rtXdot->TransferFcn_CSTATE = 0.0;
    _rtXdot->TransferFcn_CSTATE += proc_control_node_P.TransferFcn_A *
      proc_control_node_X.TransferFcn_CSTATE;
    _rtXdot->TransferFcn_CSTATE += proc_control_node_B.PWMtoN[0];

    // Derivatives for TransferFcn: '<S21>/Transfer Fcn'
    _rtXdot->TransferFcn_CSTATE_g = 0.0;
    _rtXdot->TransferFcn_CSTATE_g += proc_control_node_P.TransferFcn_A_h *
      proc_control_node_X.TransferFcn_CSTATE_g;
    _rtXdot->TransferFcn_CSTATE_g += proc_control_node_B.PWMtoN[1];

    // Derivatives for TransferFcn: '<S22>/Transfer Fcn'
    _rtXdot->TransferFcn_CSTATE_p = 0.0;
    _rtXdot->TransferFcn_CSTATE_p += proc_control_node_P.TransferFcn_A_k *
      proc_control_node_X.TransferFcn_CSTATE_p;
    _rtXdot->TransferFcn_CSTATE_p += proc_control_node_B.PWMtoN[2];

    // Derivatives for TransferFcn: '<S23>/Transfer Fcn'
    _rtXdot->TransferFcn_CSTATE_k = 0.0;
    _rtXdot->TransferFcn_CSTATE_k += proc_control_node_P.TransferFcn_A_j *
      proc_control_node_X.TransferFcn_CSTATE_k;
    _rtXdot->TransferFcn_CSTATE_k += proc_control_node_B.PWMtoN[3];

    // Derivatives for TransferFcn: '<S24>/Transfer Fcn'
    _rtXdot->TransferFcn_CSTATE_e = 0.0;
    _rtXdot->TransferFcn_CSTATE_e += proc_control_node_P.TransferFcn_A_n *
      proc_control_node_X.TransferFcn_CSTATE_e;
    _rtXdot->TransferFcn_CSTATE_e += proc_control_node_B.PWMtoN[4];

    // Derivatives for TransferFcn: '<S25>/Transfer Fcn'
    _rtXdot->TransferFcn_CSTATE_kk = 0.0;
    _rtXdot->TransferFcn_CSTATE_kk += proc_control_node_P.TransferFcn_A_l *
      proc_control_node_X.TransferFcn_CSTATE_kk;
    _rtXdot->TransferFcn_CSTATE_kk += proc_control_node_B.PWMtoN[5];

    // Derivatives for TransferFcn: '<S26>/Transfer Fcn'
    _rtXdot->TransferFcn_CSTATE_o = 0.0;
    _rtXdot->TransferFcn_CSTATE_o += proc_control_node_P.TransferFcn_A_j1 *
      proc_control_node_X.TransferFcn_CSTATE_o;
    _rtXdot->TransferFcn_CSTATE_o += proc_control_node_B.PWMtoN[6];

    // Derivatives for TransferFcn: '<S27>/Transfer Fcn'
    _rtXdot->TransferFcn_CSTATE_l = 0.0;
    _rtXdot->TransferFcn_CSTATE_l += proc_control_node_P.TransferFcn_A_d *
      proc_control_node_X.TransferFcn_CSTATE_l;
    _rtXdot->TransferFcn_CSTATE_l += proc_control_node_B.PWMtoN[7];

    // Derivatives for Integrator: '<S1>/Integrator'
    _rtXdot->Integrator_CSTATE[0] = proc_control_node_B.Position_dot[0];

    // Derivatives for Integrator: '<S1>/Integrator2'
    _rtXdot->Integrator2_CSTATE[0] = proc_control_node_B.BodyVelocity_dot[0];

    // Derivatives for Integrator: '<S1>/Integrator3'
    _rtXdot->Integrator3_CSTATE[0] = proc_control_node_B.AngularRates_dot[0];

    // Derivatives for Integrator: '<S1>/Integrator'
    _rtXdot->Integrator_CSTATE[1] = proc_control_node_B.Position_dot[1];

    // Derivatives for Integrator: '<S1>/Integrator2'
    _rtXdot->Integrator2_CSTATE[1] = proc_control_node_B.BodyVelocity_dot[1];

    // Derivatives for Integrator: '<S1>/Integrator3'
    _rtXdot->Integrator3_CSTATE[1] = proc_control_node_B.AngularRates_dot[1];

    // Derivatives for Integrator: '<S1>/Integrator'
    _rtXdot->Integrator_CSTATE[2] = proc_control_node_B.Position_dot[2];

    // Derivatives for Integrator: '<S1>/Integrator2'
    _rtXdot->Integrator2_CSTATE[2] = proc_control_node_B.BodyVelocity_dot[2];

    // Derivatives for Integrator: '<S1>/Integrator3'
    _rtXdot->Integrator3_CSTATE[2] = proc_control_node_B.AngularRates_dot[2];
  } else {
    {
      real_T *dx;
      int_T i;
      dx = &(((XDot_proc_control_node_T *) proc_control_node_M->derivs)
             ->Integrator1_CSTATE[0]);
      for (i=0; i < 21; i++) {
        dx[i] = 0.0;
      }
    }
  }

  // End of Derivatives for SubSystem: '<Root>/Modèle Physique'
}

// Model initialize function
void proc_control_node_initialize(void)
{
  // Registration code

  // initialize non-finites
  rt_InitInfAndNaN(sizeof(real_T));

  // non-finite (run-time) assignments
  proc_control_node_P.IMU_AccelParamsMeasurementRange = rtInf;
  proc_control_node_P.IMU_GyroParamsMeasurementRange = rtInf;
  proc_control_node_P.IMU_MagParamsMeasurementRange = rtInf;
  proc_control_node_P.Integrator_UpperSat = rtInf;
  proc_control_node_P.Integrator_LowerSat = rtMinusInf;
  proc_control_node_P.Saturation_UpperSat = rtInf;
  proc_control_node_P.Saturation_LowerSat = rtMinusInf;
  proc_control_node_P.Integrator_UpperSat_p = rtInf;
  proc_control_node_P.Integrator_LowerSat_j = rtMinusInf;
  proc_control_node_P.Saturation_UpperSat_n = rtInf;
  proc_control_node_P.Saturation_LowerSat_p = rtMinusInf;
  proc_control_node_P.FirstOrderHold_ErrTol = rtInf;
  proc_control_node_P.FirstOrderHold1_ErrTol = rtInf;
  proc_control_node_P.FirstOrderHold_ErrTol_p = rtInf;

  {
    // Setup solver object
    rtsiSetSimTimeStepPtr(&proc_control_node_M->solverInfo,
                          &proc_control_node_M->Timing.simTimeStep);
    rtsiSetTPtr(&proc_control_node_M->solverInfo, &rtmGetTPtr
                (proc_control_node_M));
    rtsiSetStepSizePtr(&proc_control_node_M->solverInfo,
                       &proc_control_node_M->Timing.stepSize0);
    rtsiSetdXPtr(&proc_control_node_M->solverInfo, &proc_control_node_M->derivs);
    rtsiSetContStatesPtr(&proc_control_node_M->solverInfo, (real_T **)
                         &proc_control_node_M->contStates);
    rtsiSetNumContStatesPtr(&proc_control_node_M->solverInfo,
      &proc_control_node_M->Sizes.numContStates);
    rtsiSetNumPeriodicContStatesPtr(&proc_control_node_M->solverInfo,
      &proc_control_node_M->Sizes.numPeriodicContStates);
    rtsiSetPeriodicContStateIndicesPtr(&proc_control_node_M->solverInfo,
      &proc_control_node_M->periodicContStateIndices);
    rtsiSetPeriodicContStateRangesPtr(&proc_control_node_M->solverInfo,
      &proc_control_node_M->periodicContStateRanges);
    rtsiSetErrorStatusPtr(&proc_control_node_M->solverInfo, (&rtmGetErrorStatus
      (proc_control_node_M)));
    rtsiSetRTModelPtr(&proc_control_node_M->solverInfo, proc_control_node_M);
  }

  rtsiSetSimTimeStep(&proc_control_node_M->solverInfo, MAJOR_TIME_STEP);
  proc_control_node_M->intgData.y = proc_control_node_M->odeY;
  proc_control_node_M->intgData.f[0] = proc_control_node_M->odeF[0];
  proc_control_node_M->intgData.f[1] = proc_control_node_M->odeF[1];
  proc_control_node_M->intgData.f[2] = proc_control_node_M->odeF[2];
  proc_control_node_M->contStates = ((X_proc_control_node_T *)
    &proc_control_node_X);
  rtsiSetSolverData(&proc_control_node_M->solverInfo, static_cast<void *>
                    (&proc_control_node_M->intgData));
  rtsiSetSolverName(&proc_control_node_M->solverInfo,"ode3");
  rtmSetTPtr(proc_control_node_M, &proc_control_node_M->Timing.tArray[0]);
  rtmSetTFinal(proc_control_node_M, -1);
  proc_control_node_M->Timing.stepSize0 = 0.01;
  rtmSetFirstInitCond(proc_control_node_M, 1);

  // External mode info
  proc_control_node_M->Sizes.checksums[0] = (892731744U);
  proc_control_node_M->Sizes.checksums[1] = (2089290880U);
  proc_control_node_M->Sizes.checksums[2] = (2412643030U);
  proc_control_node_M->Sizes.checksums[3] = (765891732U);

  {
    static const sysRanDType rtAlwaysEnabled = SUBSYS_RAN_BC_ENABLE;
    static RTWExtModeInfo rt_ExtModeInfo;
    static const sysRanDType *systemRan[127];
    proc_control_node_M->extModeInfo = (&rt_ExtModeInfo);
    rteiSetSubSystemActiveVectorAddresses(&rt_ExtModeInfo, systemRan);
    systemRan[0] = &rtAlwaysEnabled;
    systemRan[1] = (sysRanDType *)
      &proc_control_node_DW.ModlePhysique_SubsysRanBC;
    systemRan[2] = (sysRanDType *)
      &proc_control_node_DW.ModlePhysique_SubsysRanBC;
    systemRan[3] = (sysRanDType *)
      &proc_control_node_DW.ModlePhysique_SubsysRanBC;
    systemRan[4] = (sysRanDType *)
      &proc_control_node_DW.ModlePhysique_SubsysRanBC;
    systemRan[5] = (sysRanDType *)
      &proc_control_node_DW.ModlePhysique_SubsysRanBC;
    systemRan[6] = (sysRanDType *)
      &proc_control_node_DW.ModlePhysique_SubsysRanBC;
    systemRan[7] = (sysRanDType *)&proc_control_node_DW.Plotvalues_SubsysRanBC;
    systemRan[8] = &rtAlwaysEnabled;
    systemRan[9] = &rtAlwaysEnabled;
    systemRan[10] = (sysRanDType *)
      &proc_control_node_DW.EnabledSubsystem_SubsysRanBC_j;
    systemRan[11] = &rtAlwaysEnabled;
    systemRan[12] = &rtAlwaysEnabled;
    systemRan[13] = (sysRanDType *)
      &proc_control_node_DW.EnabledSubsystem_SubsysRanBC_o;
    systemRan[14] = &rtAlwaysEnabled;
    systemRan[15] = &rtAlwaysEnabled;
    systemRan[16] = (sysRanDType *)&proc_control_node_DW.ROSOutput_SubsysRanBC;
    systemRan[17] = (sysRanDType *)&proc_control_node_DW.ROSOutput_SubsysRanBC;
    systemRan[18] = (sysRanDType *)&proc_control_node_DW.ROSOutput_SubsysRanBC;
    systemRan[19] = (sysRanDType *)&proc_control_node_DW.ROSOutput_SubsysRanBC;
    systemRan[20] = (sysRanDType *)&proc_control_node_DW.ROSOutput_SubsysRanBC;
    systemRan[21] = (sysRanDType *)&proc_control_node_DW.ROSOutput_SubsysRanBC;
    systemRan[22] = (sysRanDType *)&proc_control_node_DW.ROSOutput_SubsysRanBC;
    systemRan[23] = (sysRanDType *)&proc_control_node_DW.ROSOutput_SubsysRanBC;
    systemRan[24] = (sysRanDType *)&proc_control_node_DW.ROSOutput_SubsysRanBC;
    systemRan[25] = (sysRanDType *)&proc_control_node_DW.ROSOutput_SubsysRanBC;
    systemRan[26] = (sysRanDType *)&proc_control_node_DW.ROSOutput_SubsysRanBC;
    systemRan[27] = (sysRanDType *)&proc_control_node_DW.ROSOutput_SubsysRanBC;
    systemRan[28] = (sysRanDType *)&proc_control_node_DW.ROSOutput_SubsysRanBC;
    systemRan[29] = &rtAlwaysEnabled;
    systemRan[30] = &rtAlwaysEnabled;
    systemRan[31] = &rtAlwaysEnabled;
    systemRan[32] = &rtAlwaysEnabled;
    systemRan[33] = &rtAlwaysEnabled;
    systemRan[34] = &rtAlwaysEnabled;
    systemRan[35] = &rtAlwaysEnabled;
    systemRan[36] = &rtAlwaysEnabled;
    systemRan[37] = &rtAlwaysEnabled;
    systemRan[38] = &rtAlwaysEnabled;
    systemRan[39] = &rtAlwaysEnabled;
    systemRan[40] = &rtAlwaysEnabled;
    systemRan[41] = &rtAlwaysEnabled;
    systemRan[42] = &rtAlwaysEnabled;
    systemRan[43] = &rtAlwaysEnabled;
    systemRan[44] = &rtAlwaysEnabled;
    systemRan[45] = &rtAlwaysEnabled;
    systemRan[46] = &rtAlwaysEnabled;
    systemRan[47] = &rtAlwaysEnabled;
    systemRan[48] = &rtAlwaysEnabled;
    systemRan[49] = &rtAlwaysEnabled;
    systemRan[50] = (sysRanDType *)
      &proc_control_node_DW.SendTargetReached_SubsysRanBC;
    systemRan[51] = (sysRanDType *)
      &proc_control_node_DW.SendTargetReached_SubsysRanBC;
    systemRan[52] = (sysRanDType *)
      &proc_control_node_DW.SendTargetReached_SubsysRanBC;
    systemRan[53] = (sysRanDType *)
      &proc_control_node_DW.SendTargetReached_SubsysRanBC;
    systemRan[54] = &rtAlwaysEnabled;
    systemRan[55] = &rtAlwaysEnabled;
    systemRan[56] = &rtAlwaysEnabled;
    systemRan[57] = &rtAlwaysEnabled;
    systemRan[58] = &rtAlwaysEnabled;
    systemRan[59] = &rtAlwaysEnabled;
    systemRan[60] = &rtAlwaysEnabled;
    systemRan[61] = &rtAlwaysEnabled;
    systemRan[62] = (sysRanDType *)&proc_control_node_DW.IDLE_SubsysRanBC;
    systemRan[63] = (sysRanDType *)
      &proc_control_node_DW.JoyStickOpenLoop_SubsysRanBC;
    systemRan[64] = (sysRanDType *)
      &proc_control_node_DW.JoyStickOpenLoop_SubsysRanBC;
    systemRan[65] = (sysRanDType *)
      &proc_control_node_DW.QuaternionNonlinearMPC_SubsysRa;
    systemRan[66] = (sysRanDType *)
      &proc_control_node_DW.QuaternionNonlinearMPC_SubsysRa;
    systemRan[67] = (sysRanDType *)
      &proc_control_node_DW.QuaternionNonlinearMPC_SubsysRa;
    systemRan[68] = &rtAlwaysEnabled;
    systemRan[69] = (sysRanDType *)
      &proc_control_node_DW.IfActionSubsystem_SubsysRanBC_b;
    systemRan[70] = (sysRanDType *)
      &proc_control_node_DW.IfActionSubsystem1_SubsysRanB_a;
    systemRan[71] = (sysRanDType *)
      &proc_control_node_DW.IfActionSubsystem2_SubsysRanB_g;
    systemRan[72] = (sysRanDType *)
      &proc_control_node_DW.IfActionSubsystem_SubsysRanBC;
    systemRan[73] = (sysRanDType *)
      &proc_control_node_DW.IfActionSubsystem_SubsysRanBC;
    systemRan[74] = &rtAlwaysEnabled;
    systemRan[75] = (sysRanDType *)
      &proc_control_node_DW.EnabledSubsystem_SubsysRanBC_m;
    systemRan[76] = &rtAlwaysEnabled;
    systemRan[77] = &rtAlwaysEnabled;
    systemRan[78] = (sysRanDType *)
      &proc_control_node_DW.SubsystemAuto_SubsysRanBC;
    systemRan[79] = (sysRanDType *)
      &proc_control_node_DW.SubsystemAuto_SubsysRanBC;
    systemRan[80] = (sysRanDType *)
      &proc_control_node_DW.EnabledSubsystem_SubsysRanBC_e;
    systemRan[81] = (sysRanDType *)
      &proc_control_node_DW.SubsystemAuto_SubsysRanBC;
    systemRan[82] = (sysRanDType *)
      &proc_control_node_DW.SubsystemAuto_SubsysRanBC;
    systemRan[83] = (sysRanDType *)
      &proc_control_node_DW.EnabledSubsystem_SubsysRanBC_g;
    systemRan[84] = (sysRanDType *)
      &proc_control_node_DW.SubsystemAuto_SubsysRanBC;
    systemRan[85] = (sysRanDType *)
      &proc_control_node_DW.SubsystemAuto_SubsysRanBC;
    systemRan[86] = (sysRanDType *)
      &proc_control_node_DW.EnabledSubsystem_SubsysRanBC_k;
    systemRan[87] = (sysRanDType *)
      &proc_control_node_DW.SubsystemAuto_SubsysRanBC;
    systemRan[88] = (sysRanDType *)
      &proc_control_node_DW.SubsystemAuto_SubsysRanBC;
    systemRan[89] = (sysRanDType *)
      &proc_control_node_DW.Subsystem1.Subsystem1_SubsysRanBC;
    systemRan[90] = (sysRanDType *)&proc_control_node_DW.Subsystem2_SubsysRanBC;
    systemRan[91] = (sysRanDType *)&proc_control_node_DW.Subsystem2_SubsysRanBC;
    systemRan[92] = (sysRanDType *)
      &proc_control_node_DW.SubsystemAuto_SubsysRanBC;
    systemRan[93] = (sysRanDType *)
      &proc_control_node_DW.SubsystemManual_SubsysRanBC;
    systemRan[94] = (sysRanDType *)
      &proc_control_node_DW.SubsystemManual_SubsysRanBC;
    systemRan[95] = (sysRanDType *)
      &proc_control_node_DW.singleWptsTrajectory_SubsysRanB;
    systemRan[96] = (sysRanDType *)
      &proc_control_node_DW.singleWptsTrajectory_SubsysRanB;
    systemRan[97] = (sysRanDType *)
      &proc_control_node_DW.singleWptsTrajectory_SubsysRanB;
    systemRan[98] = (sysRanDType *)
      &proc_control_node_DW.singleWptsTrajectory_SubsysRanB;
    systemRan[99] = (sysRanDType *)
      &proc_control_node_DW.Pretraitement_SubsysRanBC;
    systemRan[100] = (sysRanDType *)
      &proc_control_node_DW.EnabledSubsystem_SubsysRanBC_n;
    systemRan[101] = (sysRanDType *)
      &proc_control_node_DW.singleWptsTrajectory_SubsysRanB;
    systemRan[102] = (sysRanDType *)
      &proc_control_node_DW.singleWptsTrajectory_SubsysRanB;
    systemRan[103] = (sysRanDType *)
      &proc_control_node_DW.Subsystem1_e.Subsystem1_SubsysRanBC;
    systemRan[104] = (sysRanDType *)
      &proc_control_node_DW.IfActionSubsystem_SubsysRanBC_h;
    systemRan[105] = (sysRanDType *)
      &proc_control_node_DW.IfActionSubsystem1_SubsysRanBC;
    systemRan[106] = (sysRanDType *)
      &proc_control_node_DW.IfActionSubsystem2_SubsysRanBC;
    systemRan[107] = (sysRanDType *)
      &proc_control_node_DW.EnabledSubsystem_SubsysRanBC_co;
    systemRan[108] = (sysRanDType *)
      &proc_control_node_DW.singleWptsTrajectory_SubsysRanB;
    systemRan[109] = (sysRanDType *)
      &proc_control_node_DW.singleWptsTrajectory_SubsysRanB;
    systemRan[110] = (sysRanDType *)
      &proc_control_node_DW.singleWptsTrajectory_SubsysRanB;
    systemRan[111] = (sysRanDType *)
      &proc_control_node_DW.singleWptsTrajectory_SubsysRanB;
    systemRan[112] = &rtAlwaysEnabled;
    systemRan[113] = &rtAlwaysEnabled;
    systemRan[114] = &rtAlwaysEnabled;
    systemRan[115] = (sysRanDType *)
      &proc_control_node_DW.EnabledSubsystem_SubsysRanBC_l;
    systemRan[116] = &rtAlwaysEnabled;
    systemRan[117] = &rtAlwaysEnabled;
    systemRan[118] = (sysRanDType *)
      &proc_control_node_DW.EnabledSubsystem_SubsysRanBC_c;
    systemRan[119] = &rtAlwaysEnabled;
    systemRan[120] = &rtAlwaysEnabled;
    systemRan[121] = (sysRanDType *)
      &proc_control_node_DW.EnabledSubsystem_SubsysRanBC_b;
    systemRan[122] = &rtAlwaysEnabled;
    systemRan[123] = &rtAlwaysEnabled;
    systemRan[124] = (sysRanDType *)
      &proc_control_node_DW.EnabledSubsystem_SubsysRanBC;
    systemRan[125] = &rtAlwaysEnabled;
    systemRan[126] = &rtAlwaysEnabled;
    rteiSetModelMappingInfoPtr(proc_control_node_M->extModeInfo,
      &proc_control_node_M->SpecialInfo.mappingInfo);
    rteiSetChecksumsPtr(proc_control_node_M->extModeInfo,
                        proc_control_node_M->Sizes.checksums);
    rteiSetTPtr(proc_control_node_M->extModeInfo, rtmGetTPtr(proc_control_node_M));
  }

  // data type transition information
  {
    static DataTypeTransInfo dtInfo;
    proc_control_node_M->SpecialInfo.mappingInfo = (&dtInfo);
    dtInfo.numDataTypes = 55;
    dtInfo.dataTypeSizes = &rtDataTypeSizes[0];
    dtInfo.dataTypeNames = &rtDataTypeNames[0];

    // Block I/O transition table
    dtInfo.BTransTable = &rtBTransTable;

    // Parameters transition table
    dtInfo.PTransTable = &rtPTransTable;
  }

  {
    int32_T i;
    int32_T t;
    uint32_T tseed;
    boolean_T flag;
    static const char_T tmp[26] = { '/', 'p', 'r', 'o', 'v', 'i', 'd', 'e', 'r',
      '_', 'd', 'v', 'l', '/', 'd', 'v', 'l', '_', 'v', 'e', 'l', 'o', 'c', 'i',
      't', 'y' };

    static const char_T tmp_0[22] = { '/', 'p', 'r', 'o', 'v', 'i', 'd', 'e',
      'r', '_', 'i', 'm', 'u', '/', 'i', 'm', 'u', '_', 'i', 'n', 'f', 'o' };

    static const char_T tmp_1[18] = { '/', 'i', 'n', 'i', 't', 'i', 'a', 'l',
      '_', 'c', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n' };

    static const char_T tmp_2[19] = { '/', 'p', 'r', 'o', 'c', '_', 'n', 'a',
      'v', '/', 'r', 'e', 's', 'e', 't', '_', 'p', 'o', 's' };

    static const char_T tmp_3[22] = { '/', 'p', 'r', 'o', 'c', '_', 'c', 'o',
      'n', 't', 'r', 'o', 'l', '/', 's', 'e', 't', '_', 'm', 'o', 'd', 'e' };

    static const char_T tmp_4[15] = { '/', 's', 'p', 'a', 'c', 'e', 'n', 'a',
      'v', '/', 't', 'w', 'i', 's', 't' };

    static const char_T tmp_5[29] = { '/', 'p', 'r', 'o', 'c', '_', 'c', 'o',
      'n', 't', 'r', 'o', 'l', '/', 'c', 'l', 'e', 'a', 'r', '_', 'w', 'a', 'y',
      'p', 'o', 'i', 'n', 't', 's' };

    static const char_T tmp_6[21] = { 'p', 'r', 'o', 'c', '_', 'c', 'o', 'n',
      't', 'r', 'o', 'l', '/', 'a', 'd', 'd', '_', 'p', 'o', 's', 'e' };

    static const char_T tmp_7[32] = { '/', 'p', 'r', 'o', 'c', '_', 'c', 'o',
      'n', 't', 'r', 'o', 'l', '/', 'c', 'o', 'm', 'p', 'u', 't', 'e', '_', 't',
      'r', 'a', 'j', 'e', 'c', 't', 'o', 'r', 'y' };

    static const real_T tmp_8[33] = { 0.0, 1.0, 0.0, 0.1, 1.0, 0.0, 0.2, 1.0,
      0.0, 0.30000000000000004, 1.0, 0.0, 0.4, 1.0, 0.0, 0.5, 1.0, 0.0, 0.6, 1.0,
      0.0, 0.7, 1.0, 0.0, 0.8, 1.0, 0.0, 0.9, 1.0, 0.0, 1.0, 1.0, 0.0 };

    static const char_T tmp_9[18] = { '/', 'p', 'r', 'o', 'c', '_', 'c', 'o',
      'n', 't', 'r', 'o', 'l', '/', 'k', 'i', 'l', 'l' };

    static const char_T tmp_a[23] = { '/', 'g', 'a', 'z', 'e', 'b', 'o', '/',
      's', 'e', 't', '_', 'm', 'o', 'd', 'e', 'l', '_', 's', 't', 'a', 't', 'e'
    };

    static const char_T tmp_b[8] = { '/', 'p', 'o', 's', '_', 'r', 'o', 't' };

    static const char_T tmp_c[31] = { '/', 'p', 'r', 'o', 'v', 'i', 'd', 'e',
      'r', '_', 't', 'h', 'r', 'u', 's', 't', 'e', 'r', '/', 't', 'h', 'r', 'u',
      's', 't', 'e', 'r', '_', 'p', 'w', 'm' };

    static const char_T tmp_d[23] = { 'p', 'r', 'o', 'c', '_', 'c', 'o', 'n',
      't', 'r', 'o', 'l', '/', 'm', 'p', 'c', '_', 's', 't', 'a', 't', 'u', 's'
    };

    static const char_T tmp_e[26] = { 'p', 'r', 'o', 'c', '_', 'c', 'o', 'n',
      't', 'r', 'o', 'l', '/', 'i', 's', '_', 'm', 'p', 'c', '_', 'a', 'c', 't',
      'i', 'v', 'e' };

    static const char_T tmp_f[22] = { 'p', 'r', 'o', 'c', '_', 'c', 'o', 'n',
      't', 'r', 'o', 'l', '/', 's', 'e', 'n', 's', 'o', 'r', '_', 'o', 'n' };

    static const char_T tmp_g[27] = { 'p', 'r', 'o', 'c', '_', 'c', 'o', 'n',
      't', 'r', 'o', 'l', '/', 't', 'a', 'r', 'g', 'e', 't', '_', 'r', 'e', 'a',
      'c', 'h', 'e', 'd' };

    static const char_T tmp_h[22] = { '/', 't', 'e', 'l', 'e', 'm', 'e', 't',
      'r', 'y', '/', 'a', 'u', 'v', '_', 's', 't', 'a', 't', 'e', 's', '/' };

    static const char_T tmp_i[23] = { '/', 't', 'e', 'l', 'e', 'm', 'e', 't',
      'r', 'y', '/', 't', 'h', 'r', 'u', 's', 't', 'e', 'r', '_', 'p', 'w', 'm'
    };

    static const char_T tmp_j[26] = { '/', 't', 'e', 'l', 'e', 'm', 'e', 't',
      'r', 'y', '/', 't', 'h', 'r', 'u', 's', 't', 'e', 'r', '_', 'n', 'e', 'w',
      't', 'o', 'n' };

    // Start for If: '<S140>/If'
    proc_control_node_DW.If_ActiveSubsystem = -1;

    // Start for SwitchCase: '<S11>/Switch Case'
    proc_control_node_DW.SwitchCase_ActiveSubsystem = -1;

    // Start for SwitchCase: '<S9>/Switch Case'
    proc_control_node_DW.SwitchCase_ActiveSubsystem_c = -1;
    proc_control_node_PrevZCX.Integrator1_Reset_ZCE = UNINITIALIZED_ZCSIG;
    proc_control_node_PrevZCX.Integrator_Reset_ZCE = UNINITIALIZED_ZCSIG;
    proc_control_node_PrevZCX.Integrator2_Reset_ZCE = UNINITIALIZED_ZCSIG;
    proc_control_node_PrevZCX.Integrator3_Reset_ZCE = UNINITIALIZED_ZCSIG;
    proc_control_node_PrevZCX.SendTargetReached_Trig_ZCE = UNINITIALIZED_ZCSIG;
    proc_control_node_PrevZCX.Subsystem2_Trig_ZCE = POS_ZCSIG;
    proc_control_node_PrevZCX.Trajectorygenerator_Reset_ZCE = POS_ZCSIG;

    // InitializeConditions for Delay: '<S10>/Delay'
    proc_control_node_DW.Delay_DSTATE[0] =
      proc_control_node_P.Delay_InitialCondition_a;
    proc_control_node_DW.Delay_DSTATE[1] =
      proc_control_node_P.Delay_InitialCondition_a;
    proc_control_node_DW.Delay_DSTATE[2] =
      proc_control_node_P.Delay_InitialCondition_a;

    // InitializeConditions for DiscreteIntegrator: '<S10>/Discrete-Time Integrator' 
    proc_control_node_DW.DiscreteTimeIntegrator_PrevRese = 2;
    proc_control_node_DW.DiscreteTimeIntegrator_IC_LOADI = 1U;

    // InitializeConditions for DiscreteIntegrator: '<S10>/Discrete-Time Integrator1' 
    proc_control_node_DW.DiscreteTimeIntegrator1_DSTATE =
      proc_control_node_P.DiscreteTimeIntegrator1_IC;
    proc_control_node_DW.DiscreteTimeIntegrator1_PrevRes = 2;
    for (i = 0; i < 6; i++) {
      // InitializeConditions for DiscreteIntegrator: '<S156>/Integrator' incorporates:
      //   Constant: '<S152>/Constant3'

      proc_control_node_DW.Integrator_DSTATE[i] =
        proc_control_node_P.Constant3_Value;
      if (proc_control_node_DW.Integrator_DSTATE[i] >=
          proc_control_node_P.Integrator_UpperSat) {
        proc_control_node_DW.Integrator_DSTATE[i] =
          proc_control_node_P.Integrator_UpperSat;
      } else if (proc_control_node_DW.Integrator_DSTATE[i] <=
                 proc_control_node_P.Integrator_LowerSat) {
        proc_control_node_DW.Integrator_DSTATE[i] =
          proc_control_node_P.Integrator_LowerSat;
      }

      // End of InitializeConditions for DiscreteIntegrator: '<S156>/Integrator' 

      // InitializeConditions for DiscreteIntegrator: '<S157>/Integrator' incorporates:
      //   Constant: '<S152>/Constant2'

      proc_control_node_DW.Integrator_DSTATE_h[i] =
        proc_control_node_P.Constant2_Value;
      if (proc_control_node_DW.Integrator_DSTATE_h[i] >=
          proc_control_node_P.Integrator_UpperSat_p) {
        proc_control_node_DW.Integrator_DSTATE_h[i] =
          proc_control_node_P.Integrator_UpperSat_p;
      } else if (proc_control_node_DW.Integrator_DSTATE_h[i] <=
                 proc_control_node_P.Integrator_LowerSat_j) {
        proc_control_node_DW.Integrator_DSTATE_h[i] =
          proc_control_node_P.Integrator_LowerSat_j;
      }

      // End of InitializeConditions for DiscreteIntegrator: '<S157>/Integrator' 
    }

    // InitializeConditions for Memory: '<S194>/Memory'
    proc_control_node_DW.Memory_PreviousInput =
      proc_control_node_P.MinMaxRunningResettable_vinit;

    // InitializeConditions for Delay: '<S5>/Delay'
    proc_control_node_DW.Delay_DSTATE_f =
      proc_control_node_P.Delay_InitialCondition_h;

    // InitializeConditions for FirstOrderHold: '<S8>/First Order Hold'
    proc_control_node_DW.Tk = (rtInf);
    for (i = 0; i < 12; i++) {
      proc_control_node_DW.Ck[i] = proc_control_node_P.FirstOrderHold_IniOut;
      proc_control_node_DW.Uk[i] = (rtInf);
    }

    // End of InitializeConditions for FirstOrderHold: '<S8>/First Order Hold'

    // InitializeConditions for FirstOrderHold: '<S5>/First Order Hold1'
    proc_control_node_DW.Tk_m = (rtInf);

    // InitializeConditions for FirstOrderHold: '<S5>/First Order Hold'
    proc_control_node_DW.Tk_e = (rtInf);
    for (i = 0; i < 8; i++) {
      // InitializeConditions for FirstOrderHold: '<S5>/First Order Hold1'
      proc_control_node_DW.Ck_n[i] = proc_control_node_P.FirstOrderHold1_IniOut;
      proc_control_node_DW.Uk_g[i] = (rtInf);

      // InitializeConditions for FirstOrderHold: '<S5>/First Order Hold'
      proc_control_node_DW.Ck_b[i] = proc_control_node_P.FirstOrderHold_IniOut_c;
      proc_control_node_DW.Uk_h[i] = (rtInf);
    }

    // SystemInitialize for Atomic SubSystem: '<S3>/Subscribe1'
    // SystemInitialize for Enabled SubSystem: '<S47>/Enabled Subsystem'
    // SystemInitialize for Outport: '<S49>/Out1' incorporates:
    //   Inport: '<S49>/In1'

    proc_control_node_B.In1_h = proc_control_node_P.Out1_Y0_a;

    // End of SystemInitialize for SubSystem: '<S47>/Enabled Subsystem'

    // Start for MATLABSystem: '<S47>/SourceBlock' incorporates:
    //   MATLABSystem: '<S55>/SinkBlock'

    proc_control_node_DW.obj_os.matlabCodegenIsDeleted = false;
    proc_control_node_DW.obj_os.isInitialized = 1;

    // SystemInitialize for Enabled SubSystem: '<Root>/ROS Output'
    // SystemInitialize for Atomic SubSystem: '<S50>/Publish'
    for (i = 0; i < 26; i++) {
      proc_control_node_B.b_zeroDelimTopic_tmp[i] = tmp[i];
    }

    proc_control_node_B.b_zeroDelimTopic_tmp[26] = '\x00';

    // End of SystemInitialize for SubSystem: '<S50>/Publish'
    // End of SystemInitialize for SubSystem: '<Root>/ROS Output'
    for (i = 0; i < 27; i++) {
      proc_control_node_B.b_zeroDelimTopic_e[i] =
        proc_control_node_B.b_zeroDelimTopic_tmp[i];
    }

    Sub_proc_control_node_1050_6.createSubscriber
      (&proc_control_node_B.b_zeroDelimTopic_e[0], 1);
    proc_control_node_DW.obj_os.isSetupComplete = true;

    // End of Start for MATLABSystem: '<S47>/SourceBlock'
    // End of SystemInitialize for SubSystem: '<S3>/Subscribe1'

    // SystemInitialize for Atomic SubSystem: '<S3>/Subscribe'
    // SystemInitialize for Enabled SubSystem: '<S46>/Enabled Subsystem'
    // SystemInitialize for Outport: '<S48>/Out1' incorporates:
    //   Inport: '<S48>/In1'

    proc_control_node_B.In1 = proc_control_node_P.Out1_Y0;

    // End of SystemInitialize for SubSystem: '<S46>/Enabled Subsystem'

    // Start for MATLABSystem: '<S46>/SourceBlock' incorporates:
    //   MATLABSystem: '<S58>/SinkBlock'

    proc_control_node_DW.obj_ai.matlabCodegenIsDeleted = false;
    proc_control_node_DW.obj_ai.isInitialized = 1;

    // SystemInitialize for Enabled SubSystem: '<Root>/ROS Output'
    // SystemInitialize for Atomic SubSystem: '<S51>/Publish'
    for (i = 0; i < 22; i++) {
      proc_control_node_B.b_zeroDelimTopic_tmp_a[i] = tmp_0[i];
    }

    proc_control_node_B.b_zeroDelimTopic_tmp_a[22] = '\x00';

    // End of SystemInitialize for SubSystem: '<S51>/Publish'
    // End of SystemInitialize for SubSystem: '<Root>/ROS Output'
    for (i = 0; i < 23; i++) {
      proc_control_node_B.b_zeroDelimTopic_d[i] =
        proc_control_node_B.b_zeroDelimTopic_tmp_a[i];
    }

    Sub_proc_control_node_1050_5.createSubscriber
      (&proc_control_node_B.b_zeroDelimTopic_d[0], 1);
    proc_control_node_DW.obj_ai.isSetupComplete = true;

    // End of Start for MATLABSystem: '<S46>/SourceBlock'
    // End of SystemInitialize for SubSystem: '<S3>/Subscribe'

    // SystemInitialize for Atomic SubSystem: '<S12>/Subscribe'
    // SystemInitialize for Enabled SubSystem: '<S190>/Enabled Subsystem'
    // SystemInitialize for Outport: '<S195>/Out1' incorporates:
    //   Inport: '<S195>/In1'

    proc_control_node_B.In1_k = proc_control_node_P.Out1_Y0_k;

    // End of SystemInitialize for SubSystem: '<S190>/Enabled Subsystem'

    // Start for MATLABSystem: '<S190>/SourceBlock'
    proc_control_node_DW.obj_iv.matlabCodegenIsDeleted = false;
    proc_control_node_DW.obj_iv.isInitialized = 1;
    for (i = 0; i < 18; i++) {
      proc_control_node_B.b_zeroDelimTopic_en[i] = tmp_1[i];
    }

    proc_control_node_B.b_zeroDelimTopic_en[18] = '\x00';
    Sub_proc_control_node_796.createSubscriber
      (&proc_control_node_B.b_zeroDelimTopic_en[0], 1);
    proc_control_node_DW.obj_iv.isSetupComplete = true;

    // End of Start for MATLABSystem: '<S190>/SourceBlock'
    // End of SystemInitialize for SubSystem: '<S12>/Subscribe'

    // SystemInitialize for Atomic SubSystem: '<S12>/Subscribe3'
    // Start for MATLABSystem: '<S193>/SourceBlock'
    proc_control_node_DW.obj_b.matlabCodegenIsDeleted = false;
    proc_control_node_DW.obj_b.isInitialized = 1;
    for (i = 0; i < 19; i++) {
      proc_control_node_B.b_zeroDelimTopic_ev[i] = tmp_2[i];
    }

    proc_control_node_B.b_zeroDelimTopic_ev[19] = '\x00';
    Sub_proc_control_node_1123.createSubscriber
      (&proc_control_node_B.b_zeroDelimTopic_ev[0], 1);
    proc_control_node_DW.obj_b.isSetupComplete = true;

    // End of Start for MATLABSystem: '<S193>/SourceBlock'
    // End of SystemInitialize for SubSystem: '<S12>/Subscribe3'

    // SystemInitialize for Atomic SubSystem: '<S12>/Subscribe2'
    // SystemInitialize for Enabled SubSystem: '<S192>/Enabled Subsystem'
    // SystemInitialize for Outport: '<S197>/Out1' incorporates:
    //   Inport: '<S197>/In1'

    proc_control_node_B.In1_g = proc_control_node_P.Out1_Y0_ae;

    // End of SystemInitialize for SubSystem: '<S192>/Enabled Subsystem'

    // Start for MATLABSystem: '<S192>/SourceBlock'
    proc_control_node_DW.obj_if.matlabCodegenIsDeleted = false;
    proc_control_node_DW.obj_if.isInitialized = 1;
    for (i = 0; i < 22; i++) {
      proc_control_node_B.b_zeroDelimTopic_d[i] = tmp_3[i];
    }

    proc_control_node_B.b_zeroDelimTopic_d[22] = '\x00';
    Sub_proc_control_node_854.createSubscriber
      (&proc_control_node_B.b_zeroDelimTopic_d[0], 1);
    proc_control_node_DW.obj_if.isSetupComplete = true;

    // End of Start for MATLABSystem: '<S192>/SourceBlock'
    // End of SystemInitialize for SubSystem: '<S12>/Subscribe2'

    // SystemInitialize for Atomic SubSystem: '<S147>/Subscribe2'
    // SystemInitialize for Enabled SubSystem: '<S153>/Enabled Subsystem'
    // SystemInitialize for Outport: '<S158>/Out1' incorporates:
    //   Inport: '<S158>/In1'

    proc_control_node_B.In1_pv = proc_control_node_P.Out1_Y0_b;

    // End of SystemInitialize for SubSystem: '<S153>/Enabled Subsystem'

    // Start for MATLABSystem: '<S153>/SourceBlock'
    proc_control_node_DW.obj_l.matlabCodegenIsDeleted = false;
    proc_control_node_DW.obj_l.isInitialized = 1;
    for (i = 0; i < 15; i++) {
      proc_control_node_B.b_zeroDelimTopic_n[i] = tmp_4[i];
    }

    proc_control_node_B.b_zeroDelimTopic_n[15] = '\x00';
    Sub_proc_control_node_644_1122.createSubscriber
      (&proc_control_node_B.b_zeroDelimTopic_n[0], 2);
    proc_control_node_DW.obj_l.isSetupComplete = true;

    // End of Start for MATLABSystem: '<S153>/SourceBlock'
    // End of SystemInitialize for SubSystem: '<S147>/Subscribe2'
    // InitializeConditions for Delay: '<S148>/Delay'
    proc_control_node_DW.Delay_DSTATE_e =
      proc_control_node_P.Delay_InitialCondition_n;

    // SystemInitialize for Atomic SubSystem: '<S148>/Subscribe2'
    // Start for MATLABSystem: '<S162>/SourceBlock'
    proc_control_node_DW.obj_gw.matlabCodegenIsDeleted = false;
    proc_control_node_DW.obj_gw.isInitialized = 1;
    for (i = 0; i < 29; i++) {
      proc_control_node_B.b_zeroDelimTopic_o[i] = tmp_5[i];
    }

    proc_control_node_B.b_zeroDelimTopic_o[29] = '\x00';
    Sub_proc_control_node_644_946.createSubscriber
      (&proc_control_node_B.b_zeroDelimTopic_o[0], 1);
    proc_control_node_DW.obj_gw.isSetupComplete = true;

    // End of Start for MATLABSystem: '<S162>/SourceBlock'
    // End of SystemInitialize for SubSystem: '<S148>/Subscribe2'

    // SystemInitialize for Atomic SubSystem: '<S148>/Subscribe'
    // SystemInitialize for Enabled SubSystem: '<S160>/Enabled Subsystem'
    // SystemInitialize for Outport: '<S165>/Out1' incorporates:
    //   Inport: '<S165>/In1'

    proc_control_node_B.In1_ph = proc_control_node_P.Out1_Y0_h;

    // End of SystemInitialize for SubSystem: '<S160>/Enabled Subsystem'

    // Start for MATLABSystem: '<S160>/SourceBlock' incorporates:
    //   MATLABSystem: '<S172>/SourceBlock'

    proc_control_node_DW.obj_bo.matlabCodegenIsDeleted = false;
    proc_control_node_DW.obj_bo.isInitialized = 1;

    // SystemInitialize for IfAction SubSystem: '<S11>/singleWpts Trajectory'
    // SystemInitialize for Atomic SubSystem: '<S150>/Subscribe'
    for (i = 0; i < 21; i++) {
      proc_control_node_B.b_zeroDelimTopic_tmp_g[i] = tmp_6[i];
    }

    proc_control_node_B.b_zeroDelimTopic_tmp_g[21] = '\x00';

    // End of SystemInitialize for SubSystem: '<S150>/Subscribe'
    // End of SystemInitialize for SubSystem: '<S11>/singleWpts Trajectory'
    for (i = 0; i < 22; i++) {
      proc_control_node_B.b_zeroDelimTopic_b[i] =
        proc_control_node_B.b_zeroDelimTopic_tmp_g[i];
    }

    Sub_proc_control_node_644_945.createSubscriber
      (&proc_control_node_B.b_zeroDelimTopic_b[0], 1);
    proc_control_node_DW.obj_bo.isSetupComplete = true;

    // End of Start for MATLABSystem: '<S160>/SourceBlock'
    // End of SystemInitialize for SubSystem: '<S148>/Subscribe'

    // SystemInitialize for Enabled SubSystem: '<S148>/Subsystem1'
    proc_control_no_Subsystem1_Init(proc_control_node_B.DataTypeConversion_p,
      proc_control_node_B.DataTypeConversion1_o,
      &proc_control_node_B.DataTypeConversion2_m,
      &proc_control_node_P.Subsystem1);

    // End of SystemInitialize for SubSystem: '<S148>/Subsystem1'

    // SystemInitialize for Atomic SubSystem: '<S148>/Subscribe1'
    // Start for MATLABSystem: '<S161>/SourceBlock'
    proc_control_node_DW.obj_mi.matlabCodegenIsDeleted = false;
    proc_control_node_DW.obj_mi.isInitialized = 1;
    for (i = 0; i < 32; i++) {
      proc_control_node_B.b_zeroDelimTopic[i] = tmp_7[i];
    }

    proc_control_node_B.b_zeroDelimTopic[32] = '\x00';
    Sub_proc_control_node_644_944.createSubscriber
      (&proc_control_node_B.b_zeroDelimTopic[0], 1);
    proc_control_node_DW.obj_mi.isSetupComplete = true;

    // End of Start for MATLABSystem: '<S161>/SourceBlock'
    // End of SystemInitialize for SubSystem: '<S148>/Subscribe1'

    // SystemInitialize for Triggered SubSystem: '<S148>/Subsystem2'
    // Start for MATLABSystem: '<S164>/MATLAB System2'
    for (i = 0; i < 7; i++) {
      proc_control_node_DW.obj_ce.avanceRapide[i] =
        proc_control_node_P.MATLABSystem2_avanceRapide[i];
      proc_control_node_DW.obj_ce.avancePrecision[i] =
        proc_control_node_P.MATLABSystem2_avancePrecision[i];
      proc_control_node_DW.obj_ce.accRapide[i] =
        proc_control_node_P.MATLABSystem2_accRapide[i];
    }

    proc_control_node_DW.obj_ce.accPrecision =
      proc_control_node_P.MATLABSystem2_accPrecision;
    proc_control_node_DW.obj_ce.Ts = proc_control_node_P.MATLABSystem2_Ts;
    proc_control_node_DW.obj_ce.isInitialized = 1;

    //  Perform one-time calculations, such as computing constants
    proc_control_node_DW.obj_ce.computeCount = 0.0;

    // End of Start for MATLABSystem: '<S164>/MATLAB System2'
    // End of SystemInitialize for SubSystem: '<S148>/Subsystem2'

    // Start for MATLABSystem: '<S148>/MATLAB System1'
    //  Initialize / reset discrete-state properties
    // ========================================================================== 
    //  Fonctions Principales
    // ========================================================================== 
    //  Fonction appeler a l'initialisation
    //  Perform one-time calculations, such as computing constants
    for (i = 0; i < 160; i++) {
      proc_control_node_DW.obj_o.poseList[i] = 999.0;
    }

    proc_control_node_DW.obj_o.poseList[0] = 0.0;
    proc_control_node_DW.obj_o.poseList[20] = 0.0;
    proc_control_node_DW.obj_o.poseList[40] = 0.0;
    proc_control_node_DW.obj_o.poseList[60] = 1.0;
    proc_control_node_DW.obj_o.poseList[80] = 0.0;
    proc_control_node_DW.obj_o.poseList[100] = 0.0;
    proc_control_node_DW.obj_o.poseList[120] = 0.0;
    proc_control_node_DW.obj_o.poseList[140] = 0.0;

    // initCond(1,1:7);
    proc_control_node_DW.obj_o.i = 2.0;

    // End of Start for MATLABSystem: '<S148>/MATLAB System1'
    // End of SystemInitialize for SubSystem: '<S11>/SubsystemAuto'

    // SystemInitialize for IfAction SubSystem: '<S11>/singleWpts Trajectory'
    // InitializeConditions for Delay: '<S174>/Delay'
    //         %%
    //  Initialize / reset discrete-state properties
    proc_control_node_DW.Delay_DSTATE_j =
      proc_control_node_P.Delay_InitialCondition_f;

    // InitializeConditions for Delay: '<S150>/Delay1'
    proc_control_node_DW.Delay1_DSTATE =
      proc_control_node_P.Delay1_InitialCondition;

    // SystemInitialize for Enabled SubSystem: '<S174>/Enabled Subsystem'
    for (i = 0; i < 7; i++) {
      // SystemInitialize for Math: '<S177>/Transpose' incorporates:
      //   Outport: '<S177>/y'

      proc_control_node_B.Transpose[i] = proc_control_node_P.y_Y0;
    }

    // End of SystemInitialize for SubSystem: '<S174>/Enabled Subsystem'

    // SystemInitialize for Atomic SubSystem: '<S150>/Subscribe'
    // SystemInitialize for Enabled SubSystem: '<S172>/Enabled Subsystem'
    // SystemInitialize for Outport: '<S176>/Out1' incorporates:
    //   Inport: '<S176>/In1'

    proc_control_node_B.In1_p = proc_control_node_P.Out1_Y0_e;

    // End of SystemInitialize for SubSystem: '<S172>/Enabled Subsystem'

    // Start for MATLABSystem: '<S172>/SourceBlock'
    proc_control_node_DW.obj_a.matlabCodegenIsDeleted = false;
    proc_control_node_DW.obj_a.isInitialized = 1;
    Sub_proc_control_node_644_1168.createSubscriber
      (&proc_control_node_B.b_zeroDelimTopic_tmp_g[0], 1);
    proc_control_node_DW.obj_a.isSetupComplete = true;

    // End of SystemInitialize for SubSystem: '<S150>/Subscribe'

    // SystemInitialize for Enabled SubSystem: '<S150>/Subsystem1'
    proc_control_no_Subsystem1_Init(proc_control_node_B.DataTypeConversion,
      proc_control_node_B.DataTypeConversion1_l,
      &proc_control_node_B.DataTypeConversion2,
      &proc_control_node_P.Subsystem1_e);

    // End of SystemInitialize for SubSystem: '<S150>/Subsystem1'

    // SystemInitialize for Enabled SubSystem: '<S150>/Pre-traitement'
    for (i = 0; i < 6; i++) {
      // SystemInitialize for Selector: '<S171>/Selector' incorporates:
      //   Outport: '<S171>/linWpts'

      proc_control_node_B.Selector[i] = proc_control_node_P.linWpts_Y0;
    }

    for (i = 0; i < 8; i++) {
      // SystemInitialize for Selector: '<S171>/Selector1' incorporates:
      //   Outport: '<S171>/RotWpts'

      proc_control_node_B.Selector1[i] = proc_control_node_P.RotWpts_Y0;
    }

    // SystemInitialize for Concatenate: '<S171>/Matrix Concatenate' incorporates:
    //   Outport: '<S171>/time'

    proc_control_node_B.MatrixConcatenate[0] = proc_control_node_P.time_Y0;
    proc_control_node_B.MatrixConcatenate[1] = proc_control_node_P.time_Y0;

    // End of SystemInitialize for SubSystem: '<S150>/Pre-traitement'
    // InitializeConditions for DiscreteIntegrator: '<S175>/Discrete-Time Integrator' 
    proc_control_node_DW.DiscreteTimeIntegrator_DSTATE_a =
      proc_control_node_P.DiscreteTimeIntegrator_IC;

    // Start for MATLABSystem: '<S175>/Rotation Trajectory'
    memcpy(&proc_control_node_DW.obj_gr.TimeScaling[0], &tmp_8[0], 33U * sizeof
           (real_T));
    proc_control_node_DW.obj_gr.isInitialized = 1;
    proc_control_node_DW.obj_gr.TunablePropsChanged = false;

    // Start for MATLABSystem: '<S175>/Polynomial Trajectory1'
    memset(&proc_control_node_DW.obj_k.AccelerationBoundaryCondition[0], 0, 10U *
           sizeof(real_T));
    proc_control_node_DW.obj_k.isInitialized = 0;
    for (i = 0; i < 6; i++) {
      proc_control_node_DW.obj_k.VelocityBoundaryCondition[i] =
        proc_control_node_P.PolynomialTrajectory1_VelocityB[i];
    }

    proc_control_node_DW.obj_k.isInitialized = 1;
    proc_control_node_DW.obj_k.TunablePropsChanged = false;

    // End of Start for MATLABSystem: '<S175>/Polynomial Trajectory1'
    // End of SystemInitialize for SubSystem: '<S150>/Trajectory generator'

    // Start for MATLABSystem: '<S150>/MATLAB System1'
    // ========================================================================== 
    //  Fonctions Principales
    // ========================================================================== 
    //  Fonction appeler a l'initialisation
    //  Perform one-time calculations, such as computing constants
    for (i = 0; i < 16; i++) {
      proc_control_node_DW.obj_or.poseList[i] = 999.0;
    }

    proc_control_node_DW.obj_or.poseList[0] = 0.0;
    proc_control_node_DW.obj_or.poseList[2] = 0.0;
    proc_control_node_DW.obj_or.poseList[4] = 0.0;
    proc_control_node_DW.obj_or.poseList[6] = 1.0;
    proc_control_node_DW.obj_or.poseList[8] = 0.0;
    proc_control_node_DW.obj_or.poseList[10] = 0.0;
    proc_control_node_DW.obj_or.poseList[12] = 0.0;
    proc_control_node_DW.obj_or.poseList[14] = 0.0;

    // initCond(1,1:7);
    proc_control_node_DW.obj_or.i = 2.0;

    // End of Start for MATLABSystem: '<S150>/MATLAB System1'

    // Start for MATLABSystem: '<S150>/MATLAB System'
    //         %%
    //  Initialize / reset discrete-state properties
    proc_control_node_DW.obj.linearConvergence =
      proc_control_node_P.MATLABSystem_linearConvergence;
    proc_control_node_DW.obj.quaternionConvergence =
      proc_control_node_P.MATLABSystem_quaternionConverge;
    proc_control_node_DW.obj.TargetThreshold =
      proc_control_node_P.MATLABSystem_TargetThreshold;
    proc_control_node_DW.obj.isInitialized = 1;
    pro_TrajectoryManager_setupImpl(&proc_control_node_DW.obj);

    // End of SystemInitialize for SubSystem: '<S11>/singleWpts Trajectory'

    // SystemInitialize for IfAction SubSystem: '<S9>/Quaternion Non linear MPC' 
    // InitializeConditions for Delay: '<S90>/Delay'
    //  Fonction reset
    //  Initialize / reset discrete-state properties
    memcpy(&proc_control_node_DW.Delay_DSTATE_b[0],
           &proc_control_node_P.Delay_InitialCondition[0], sizeof(real_T) << 3U);

    // Start for MATLABSystem: '<S90>/MPC manager'
    memcpy(&proc_control_node_DW.obj_g.Config10[0],
           &proc_control_node_P.Config10[0], 29U * sizeof(real_T));
    memcpy(&proc_control_node_DW.obj_g.Config19[0],
           &proc_control_node_P.Config19[0], 29U * sizeof(real_T));
    for (i = 0; i < 8; i++) {
      proc_control_node_DW.obj_g.Tmin[i] = proc_control_node_P.mpc.tmin;
      proc_control_node_DW.obj_g.Tmax[i] = proc_control_node_P.mpc.tmax;
    }

    memcpy(&proc_control_node_DW.obj_g.MecConst[0],
           &proc_control_node_P.constValues[0], 41U * sizeof(real_T));
    memcpy(&proc_control_node_DW.obj_g.mvInit[0], &proc_control_node_P.Ui[0],
           sizeof(real_T) << 3U);
    proc_control_node_DW.obj_g.eInit = proc_control_node_P.MPCmanager_eInit;
    proc_control_node_DW.obj_g.isInitialized = 1;

    //  Perform one-time calculations, such as computing constants
    proc_control_node_DW.obj_g.init = 0.0;
    memset(&proc_control_node_DW.obj_g.xInit[0], 0, 13U * sizeof(real_T));

    // End of Start for MATLABSystem: '<S90>/MPC manager'

    // SystemInitialize for Outport: '<S90>/Output'
    //  Initialize / reset discrete-state properties
    proc_control_node_B.nlpstatus = proc_control_node_P.Output_Y0_i;

    // SystemInitialize for DiscretePulseGenerator: '<S90>/Pulse Generator' incorporates:
    //   Outport: '<S90>/isActive'

    proc_control_node_B.PulseGenerator = proc_control_node_P.isActive_Y0;

    // End of SystemInitialize for SubSystem: '<S9>/Quaternion Non linear MPC'
    // InitializeConditions for UnitDelay: '<S91>/UD'
    //
    //  Block description for '<S91>/UD':
    //
    //   Store in Global RAM

    for (i = 0; i < 6; i++) {
      proc_control_node_DW.UD_DSTATE[i] =
        proc_control_node_P.DiscreteDerivative_ICPrevScaled;
    }

    // End of InitializeConditions for UnitDelay: '<S91>/UD'

    // Start for MATLABSystem: '<S89>/MATLAB System'
    proc_control_node_DW.obj_m.k = proc_control_node_P.MATLABSystem_k;
    memcpy(&proc_control_node_DW.obj_m.binv[0], &proc_control_node_P.binv[0],
           48U * sizeof(real_T));
    proc_control_node_DW.obj_m.mass = proc_control_node_P.physics.mass;
    proc_control_node_DW.obj_m.volume = proc_control_node_P.physics.volume;
    proc_control_node_DW.obj_m.height = proc_control_node_P.physics.height;
    memcpy(&proc_control_node_DW.obj_m.I[0], &proc_control_node_P.physics.I[0],
           9U * sizeof(real_T));
    proc_control_node_DW.obj_m.RG[0] = proc_control_node_P.physics.RG[0];
    proc_control_node_DW.obj_m.RB[0] = proc_control_node_P.physics.RB[0];
    proc_control_node_DW.obj_m.RG[1] = proc_control_node_P.physics.RG[1];
    proc_control_node_DW.obj_m.RB[1] = proc_control_node_P.physics.RB[1];
    proc_control_node_DW.obj_m.RG[2] = proc_control_node_P.physics.RG[2];
    proc_control_node_DW.obj_m.RB[2] = proc_control_node_P.physics.RB[2];
    for (i = 0; i < 6; i++) {
      proc_control_node_DW.obj_m.AddedMass[i] =
        proc_control_node_P.physics.AddedMass[i];
      proc_control_node_DW.obj_m.CDL[i] = proc_control_node_P.physics.CDL[i];
      proc_control_node_DW.obj_m.CDQ[i] = proc_control_node_P.physics.CDQ[i];
    }

    proc_control_node_DW.obj_m.AF[0] = proc_control_node_P.physics.AF[0];
    proc_control_node_DW.obj_m.AF[1] = proc_control_node_P.physics.AF[1];
    proc_control_node_DW.obj_m.AF[2] = proc_control_node_P.physics.AF[2];
    proc_control_node_DW.obj_m.g = proc_control_node_P.physics.g;
    proc_control_node_DW.obj_m.rho = proc_control_node_P.physics.rho;
    proc_control_node_DW.obj_m.isInitialized = 1;

    // End of Start for MATLABSystem: '<S89>/MATLAB System'
    // End of SystemInitialize for SubSystem: '<S9>/JoyStick OpenLoop'

    // SystemInitialize for Atomic SubSystem: '<S12>/Subscribe1'
    // Start for MATLABSystem: '<S191>/SourceBlock'
    //  Perform one-time calculations, such as computing constants
    // [M,C,D,Gq] = AUVModelMatrices(in1,in2)
    //  Initialize / reset discrete-state properties
    proc_control_node_DW.obj_f.matlabCodegenIsDeleted = false;
    proc_control_node_DW.obj_f.isInitialized = 1;
    for (i = 0; i < 18; i++) {
      proc_control_node_B.b_zeroDelimTopic_en[i] = tmp_9[i];
    }

    proc_control_node_B.b_zeroDelimTopic_en[18] = '\x00';
    Sub_proc_control_node_819.createSubscriber
      (&proc_control_node_B.b_zeroDelimTopic_en[0], 1);
    proc_control_node_DW.obj_f.isSetupComplete = true;

    // End of Start for MATLABSystem: '<S191>/SourceBlock'
    // End of SystemInitialize for SubSystem: '<S12>/Subscribe1'
    // Start for Constant: '<S1>/Initial Body velocity '
    proc_control_node_B.InitialBodyvelocity[0] =
      proc_control_node_P.InitialBodyvelocity_Value[0];

    // Start for Constant: '<S1>/Initial Angular Rates'
    proc_control_node_B.InitialAngularRates[0] =
      proc_control_node_P.InitialAngularRates_Value[0];

    // Start for Constant: '<S1>/Initial Body velocity '
    proc_control_node_B.InitialBodyvelocity[1] =
      proc_control_node_P.InitialBodyvelocity_Value[1];

    // Start for Constant: '<S1>/Initial Angular Rates'
    proc_control_node_B.InitialAngularRates[1] =
      proc_control_node_P.InitialAngularRates_Value[1];

    // Start for Constant: '<S1>/Initial Body velocity '
    proc_control_node_B.InitialBodyvelocity[2] =
      proc_control_node_P.InitialBodyvelocity_Value[2];

    // Start for Constant: '<S1>/Initial Angular Rates'
    proc_control_node_B.InitialAngularRates[2] =
      proc_control_node_P.InitialAngularRates_Value[2];

    // InitializeConditions for Integrator: '<S1>/Integrator1'
    if (rtmIsFirstInitCond(proc_control_node_M)) {
      proc_control_node_X.Integrator1_CSTATE[0] = 0.0;
      proc_control_node_X.Integrator1_CSTATE[1] = 0.0;
      proc_control_node_X.Integrator1_CSTATE[2] = 0.0;
      proc_control_node_X.Integrator1_CSTATE[3] = 0.0;
    }

    proc_control_node_DW.Integrator1_IWORK = 1;

    // End of InitializeConditions for Integrator: '<S1>/Integrator1'

    // InitializeConditions for TransferFcn: '<S20>/Transfer Fcn'
    proc_control_node_X.TransferFcn_CSTATE = 0.0;

    // InitializeConditions for TransferFcn: '<S21>/Transfer Fcn'
    proc_control_node_X.TransferFcn_CSTATE_g = 0.0;

    // InitializeConditions for TransferFcn: '<S22>/Transfer Fcn'
    proc_control_node_X.TransferFcn_CSTATE_p = 0.0;

    // InitializeConditions for TransferFcn: '<S23>/Transfer Fcn'
    proc_control_node_X.TransferFcn_CSTATE_k = 0.0;

    // InitializeConditions for TransferFcn: '<S24>/Transfer Fcn'
    proc_control_node_X.TransferFcn_CSTATE_e = 0.0;

    // InitializeConditions for TransferFcn: '<S25>/Transfer Fcn'
    proc_control_node_X.TransferFcn_CSTATE_kk = 0.0;

    // InitializeConditions for TransferFcn: '<S26>/Transfer Fcn'
    proc_control_node_X.TransferFcn_CSTATE_o = 0.0;

    // InitializeConditions for TransferFcn: '<S27>/Transfer Fcn'
    proc_control_node_X.TransferFcn_CSTATE_l = 0.0;

    // InitializeConditions for UniformRandomNumber: '<S16>/X Drift'
    proc_control_node_B.d2 = floor(proc_control_node_P.dSeedX);
    if (rtIsNaN(proc_control_node_B.d2) || rtIsInf(proc_control_node_B.d2)) {
      proc_control_node_B.d2 = 0.0;
    } else {
      proc_control_node_B.d2 = fmod(proc_control_node_B.d2, 4.294967296E+9);
    }

    tseed = proc_control_node_B.d2 < 0.0 ? static_cast<uint32_T>(-static_cast<
      int32_T>(static_cast<uint32_T>(-proc_control_node_B.d2))) : static_cast<
      uint32_T>(proc_control_node_B.d2);
    i = static_cast<int32_T>(tseed >> 16U);
    t = static_cast<int32_T>(tseed & 32768U);
    proc_control_node_DW.RandSeed = ((((tseed - (static_cast<uint32_T>(i) << 16U))
      + t) << 16U) + t) + i;
    if (proc_control_node_DW.RandSeed < 1U) {
      proc_control_node_DW.RandSeed = 1144108930U;
    } else if (proc_control_node_DW.RandSeed > 2147483646U) {
      proc_control_node_DW.RandSeed = 2147483646U;
    }

    proc_control_node_DW.XDrift_NextOutput = (proc_control_node_P.dMaxX -
      proc_control_node_P.dMinX) * rt_urand_Upu32_Yd_f_pw_snf
      (&proc_control_node_DW.RandSeed) + proc_control_node_P.dMinX;

    // End of InitializeConditions for UniformRandomNumber: '<S16>/X Drift'

    // InitializeConditions for UniformRandomNumber: '<S16>/Y Drift'
    proc_control_node_B.d2 = floor(proc_control_node_P.dSeedY);
    if (rtIsNaN(proc_control_node_B.d2) || rtIsInf(proc_control_node_B.d2)) {
      proc_control_node_B.d2 = 0.0;
    } else {
      proc_control_node_B.d2 = fmod(proc_control_node_B.d2, 4.294967296E+9);
    }

    tseed = proc_control_node_B.d2 < 0.0 ? static_cast<uint32_T>(-static_cast<
      int32_T>(static_cast<uint32_T>(-proc_control_node_B.d2))) : static_cast<
      uint32_T>(proc_control_node_B.d2);
    i = static_cast<int32_T>(tseed >> 16U);
    t = static_cast<int32_T>(tseed & 32768U);
    proc_control_node_DW.RandSeed_n = ((((tseed - (static_cast<uint32_T>(i) <<
      16U)) + t) << 16U) + t) + i;
    if (proc_control_node_DW.RandSeed_n < 1U) {
      proc_control_node_DW.RandSeed_n = 1144108930U;
    } else if (proc_control_node_DW.RandSeed_n > 2147483646U) {
      proc_control_node_DW.RandSeed_n = 2147483646U;
    }

    proc_control_node_DW.YDrift_NextOutput = (proc_control_node_P.dMaxY -
      proc_control_node_P.dMinY) * rt_urand_Upu32_Yd_f_pw_snf
      (&proc_control_node_DW.RandSeed_n) + proc_control_node_P.dMinY;

    // End of InitializeConditions for UniformRandomNumber: '<S16>/Y Drift'

    // InitializeConditions for Integrator: '<S1>/Integrator' incorporates:
    //   Integrator: '<S1>/Integrator2'

    if (rtmIsFirstInitCond(proc_control_node_M)) {
      proc_control_node_X.Integrator_CSTATE[0] = 0.0;
      proc_control_node_X.Integrator_CSTATE[1] = 0.0;
      proc_control_node_X.Integrator_CSTATE[2] = 0.0;
      proc_control_node_X.Integrator2_CSTATE[0] = 0.0;
      proc_control_node_X.Integrator2_CSTATE[1] = 0.0;
      proc_control_node_X.Integrator2_CSTATE[2] = 0.0;
    }

    proc_control_node_DW.Integrator_IWORK = 1;

    // End of InitializeConditions for Integrator: '<S1>/Integrator'

    // InitializeConditions for Integrator: '<S1>/Integrator2'
    proc_control_node_DW.Integrator2_IWORK = 1;

    // InitializeConditions for Integrator: '<S1>/Integrator3'
    if (rtmIsFirstInitCond(proc_control_node_M)) {
      proc_control_node_X.Integrator3_CSTATE[0] = 0.0;
      proc_control_node_X.Integrator3_CSTATE[1] = 0.0;
      proc_control_node_X.Integrator3_CSTATE[2] = 0.0;
    }

    proc_control_node_DW.Integrator3_IWORK = 1;

    // End of InitializeConditions for Integrator: '<S1>/Integrator3'

    // InitializeConditions for RandomNumber: '<S28>/White Noise'
    proc_control_node_B.d2 = floor
      (proc_control_node_P.BandLimitedWhiteNoise_seed);
    if (rtIsNaN(proc_control_node_B.d2) || rtIsInf(proc_control_node_B.d2)) {
      proc_control_node_B.d2 = 0.0;
    } else {
      proc_control_node_B.d2 = fmod(proc_control_node_B.d2, 4.294967296E+9);
    }

    tseed = proc_control_node_B.d2 < 0.0 ? static_cast<uint32_T>(-static_cast<
      int32_T>(static_cast<uint32_T>(-proc_control_node_B.d2))) : static_cast<
      uint32_T>(proc_control_node_B.d2);
    i = static_cast<int32_T>(tseed >> 16U);
    t = static_cast<int32_T>(tseed & 32768U);
    proc_control_node_DW.RandSeed_g = ((((tseed - (static_cast<uint32_T>(i) <<
      16U)) + t) << 16U) + t) + i;
    if (proc_control_node_DW.RandSeed_g < 1U) {
      proc_control_node_DW.RandSeed_g = 1144108930U;
    } else if (proc_control_node_DW.RandSeed_g > 2147483646U) {
      proc_control_node_DW.RandSeed_g = 2147483646U;
    }

    proc_control_node_DW.NextOutput = rt_nrand_Upu32_Yd_f_pw_snf
      (&proc_control_node_DW.RandSeed_g) * proc_control_node_P.WhiteNoise_StdDev
      + proc_control_node_P.WhiteNoise_Mean;

    // End of InitializeConditions for RandomNumber: '<S28>/White Noise'

    // InitializeConditions for RandomNumber: '<S29>/White Noise'
    proc_control_node_B.d2 = floor
      (proc_control_node_P.BandLimitedWhiteNoise1_seed);
    if (rtIsNaN(proc_control_node_B.d2) || rtIsInf(proc_control_node_B.d2)) {
      proc_control_node_B.d2 = 0.0;
    } else {
      proc_control_node_B.d2 = fmod(proc_control_node_B.d2, 4.294967296E+9);
    }

    tseed = proc_control_node_B.d2 < 0.0 ? static_cast<uint32_T>(-static_cast<
      int32_T>(static_cast<uint32_T>(-proc_control_node_B.d2))) : static_cast<
      uint32_T>(proc_control_node_B.d2);
    i = static_cast<int32_T>(tseed >> 16U);
    t = static_cast<int32_T>(tseed & 32768U);
    proc_control_node_DW.RandSeed_g2 = ((((tseed - (static_cast<uint32_T>(i) <<
      16U)) + t) << 16U) + t) + i;
    if (proc_control_node_DW.RandSeed_g2 < 1U) {
      proc_control_node_DW.RandSeed_g2 = 1144108930U;
    } else if (proc_control_node_DW.RandSeed_g2 > 2147483646U) {
      proc_control_node_DW.RandSeed_g2 = 2147483646U;
    }

    proc_control_node_DW.NextOutput_k = rt_nrand_Upu32_Yd_f_pw_snf
      (&proc_control_node_DW.RandSeed_g2) *
      proc_control_node_P.WhiteNoise_StdDev_f +
      proc_control_node_P.WhiteNoise_Mean_n;

    // End of InitializeConditions for RandomNumber: '<S29>/White Noise'

    // Start for MATLABSystem: '<S19>/IMU'
    proc_control_node_DW.obj_i.MagneticFieldNED[0] = 27.555;
    proc_control_node_DW.obj_i.MagneticFieldNED[1] = -2.4169;
    proc_control_node_DW.obj_i.MagneticFieldNED[2] = -16.0849;
    proc_control_node_DW.obj_i.isInitialized = 0;
    for (i = 0; i < 32; i++) {
      proc_control_node_DW.obj_i.tunablePropertyChanged[i] = false;
    }

    flag = (proc_control_node_DW.obj_i.isInitialized == 1);
    if (flag) {
      proc_control_node_DW.obj_i.TunablePropsChanged = true;
      proc_control_node_DW.obj_i.tunablePropertyChanged[2] = true;
    }

    proc_control_node_DW.obj_i.MagneticField[0] =
      proc_control_node_DW.obj_i.MagneticFieldNED[0];
    proc_control_node_DW.obj_i.MagneticField[1] =
      proc_control_node_DW.obj_i.MagneticFieldNED[1];
    proc_control_node_DW.obj_i.MagneticField[2] =
      proc_control_node_DW.obj_i.MagneticFieldNED[2];
    flag = (proc_control_node_DW.obj_i.isInitialized == 1);
    if (flag) {
      proc_control_node_DW.obj_i.TunablePropsChanged = true;
      proc_control_node_DW.obj_i.tunablePropertyChanged[31] = true;
    }

    proc_control_node_DW.obj_i.Temperature = proc_control_node_P.IMU_Temperature;
    flag = (proc_control_node_DW.obj_i.isInitialized == 1);
    if (flag) {
      proc_control_node_DW.obj_i.TunablePropsChanged = true;
      proc_control_node_DW.obj_i.tunablePropertyChanged[0] = true;
    }

    flag = (proc_control_node_DW.obj_i.isInitialized == 1);
    if (flag) {
      proc_control_node_DW.obj_i.TunablePropsChanged = true;
      proc_control_node_DW.obj_i.tunablePropertyChanged[2] = true;
    }

    proc_control_node_DW.obj_i.MagneticField[0] =
      proc_control_node_P.IMU_MagneticFieldNED[0];
    proc_control_node_DW.obj_i.MagneticField[1] =
      proc_control_node_P.IMU_MagneticFieldNED[1];
    proc_control_node_DW.obj_i.MagneticField[2] =
      proc_control_node_P.IMU_MagneticFieldNED[2];
    flag = (proc_control_node_DW.obj_i.isInitialized == 1);
    if (flag) {
      proc_control_node_DW.obj_i.TunablePropsChanged = true;
      proc_control_node_DW.obj_i.tunablePropertyChanged[3] = true;
    }

    proc_control_node_DW.obj_i.AccelParamsMeasurementRange =
      proc_control_node_P.IMU_AccelParamsMeasurementRange;
    flag = (proc_control_node_DW.obj_i.isInitialized == 1);
    if (flag) {
      proc_control_node_DW.obj_i.TunablePropsChanged = true;
      proc_control_node_DW.obj_i.tunablePropertyChanged[4] = true;
    }

    proc_control_node_DW.obj_i.AccelParamsResolution =
      proc_control_node_P.IMU_AccelParamsResolution;
    flag = (proc_control_node_DW.obj_i.isInitialized == 1);
    if (flag) {
      proc_control_node_DW.obj_i.TunablePropsChanged = true;
      proc_control_node_DW.obj_i.tunablePropertyChanged[5] = true;
    }

    proc_control_node_DW.obj_i.AccelParamsConstantBias[0] =
      proc_control_node_P.IMU_AccelParamsConstantBias[0];
    proc_control_node_DW.obj_i.AccelParamsConstantBias[1] =
      proc_control_node_P.IMU_AccelParamsConstantBias[1];
    proc_control_node_DW.obj_i.AccelParamsConstantBias[2] =
      proc_control_node_P.IMU_AccelParamsConstantBias[2];
    flag = (proc_control_node_DW.obj_i.isInitialized == 1);
    if (flag) {
      proc_control_node_DW.obj_i.TunablePropsChanged = true;
      proc_control_node_DW.obj_i.tunablePropertyChanged[6] = true;
    }

    proc_control_node_DW.obj_i.AccelParamsAxesMisalignment[0] =
      proc_control_node_P.IMU_AccelParamsAxesMisalignment[0];
    proc_control_node_DW.obj_i.AccelParamsAxesMisalignment[1] =
      proc_control_node_P.IMU_AccelParamsAxesMisalignment[1];
    proc_control_node_DW.obj_i.AccelParamsAxesMisalignment[2] =
      proc_control_node_P.IMU_AccelParamsAxesMisalignment[2];
    flag = (proc_control_node_DW.obj_i.isInitialized == 1);
    if (flag) {
      proc_control_node_DW.obj_i.TunablePropsChanged = true;
      proc_control_node_DW.obj_i.tunablePropertyChanged[7] = true;
    }

    proc_control_node_DW.obj_i.AccelParamsNoiseDensity[0] =
      proc_control_node_P.IMU_AccelParamsNoiseDensity[0];
    proc_control_node_DW.obj_i.AccelParamsNoiseDensity[1] =
      proc_control_node_P.IMU_AccelParamsNoiseDensity[1];
    proc_control_node_DW.obj_i.AccelParamsNoiseDensity[2] =
      proc_control_node_P.IMU_AccelParamsNoiseDensity[2];
    flag = (proc_control_node_DW.obj_i.isInitialized == 1);
    if (flag) {
      proc_control_node_DW.obj_i.TunablePropsChanged = true;
      proc_control_node_DW.obj_i.tunablePropertyChanged[8] = true;
    }

    proc_control_node_DW.obj_i.AccelParamsBiasInstability[0] =
      proc_control_node_P.IMU_AccelParamsBiasInstability[0];
    proc_control_node_DW.obj_i.AccelParamsBiasInstability[1] =
      proc_control_node_P.IMU_AccelParamsBiasInstability[1];
    proc_control_node_DW.obj_i.AccelParamsBiasInstability[2] =
      proc_control_node_P.IMU_AccelParamsBiasInstability[2];
    flag = (proc_control_node_DW.obj_i.isInitialized == 1);
    if (flag) {
      proc_control_node_DW.obj_i.TunablePropsChanged = true;
      proc_control_node_DW.obj_i.tunablePropertyChanged[9] = true;
    }

    proc_control_node_DW.obj_i.AccelParamsRandomWalk[0] =
      proc_control_node_P.IMU_AccelParamsRandomWalk[0];
    proc_control_node_DW.obj_i.AccelParamsRandomWalk[1] =
      proc_control_node_P.IMU_AccelParamsRandomWalk[1];
    proc_control_node_DW.obj_i.AccelParamsRandomWalk[2] =
      proc_control_node_P.IMU_AccelParamsRandomWalk[2];
    flag = (proc_control_node_DW.obj_i.isInitialized == 1);
    if (flag) {
      proc_control_node_DW.obj_i.TunablePropsChanged = true;
      proc_control_node_DW.obj_i.tunablePropertyChanged[10] = true;
    }

    proc_control_node_DW.obj_i.AccelParamsTemperatureBias[0] =
      proc_control_node_P.IMU_AccelParamsTemperatureBias[0];
    proc_control_node_DW.obj_i.AccelParamsTemperatureBias[1] =
      proc_control_node_P.IMU_AccelParamsTemperatureBias[1];
    proc_control_node_DW.obj_i.AccelParamsTemperatureBias[2] =
      proc_control_node_P.IMU_AccelParamsTemperatureBias[2];
    flag = (proc_control_node_DW.obj_i.isInitialized == 1);
    if (flag) {
      proc_control_node_DW.obj_i.TunablePropsChanged = true;
      proc_control_node_DW.obj_i.tunablePropertyChanged[11] = true;
    }

    proc_control_node_DW.obj_i.AccelParamsTemperatureScaleFactor[0] =
      proc_control_node_P.IMU_AccelParamsTemperatureScale[0];
    proc_control_node_DW.obj_i.AccelParamsTemperatureScaleFactor[1] =
      proc_control_node_P.IMU_AccelParamsTemperatureScale[1];
    proc_control_node_DW.obj_i.AccelParamsTemperatureScaleFactor[2] =
      proc_control_node_P.IMU_AccelParamsTemperatureScale[2];
    flag = (proc_control_node_DW.obj_i.isInitialized == 1);
    if (flag) {
      proc_control_node_DW.obj_i.TunablePropsChanged = true;
      proc_control_node_DW.obj_i.tunablePropertyChanged[12] = true;
    }

    proc_control_node_DW.obj_i.GyroParamsMeasurementRange =
      proc_control_node_P.IMU_GyroParamsMeasurementRange;
    flag = (proc_control_node_DW.obj_i.isInitialized == 1);
    if (flag) {
      proc_control_node_DW.obj_i.TunablePropsChanged = true;
      proc_control_node_DW.obj_i.tunablePropertyChanged[13] = true;
    }

    proc_control_node_DW.obj_i.GyroParamsResolution =
      proc_control_node_P.IMU_GyroParamsResolution;
    flag = (proc_control_node_DW.obj_i.isInitialized == 1);
    if (flag) {
      proc_control_node_DW.obj_i.TunablePropsChanged = true;
      proc_control_node_DW.obj_i.tunablePropertyChanged[14] = true;
    }

    proc_control_node_DW.obj_i.GyroParamsConstantBias[0] =
      proc_control_node_P.IMU_GyroParamsConstantBias[0];
    proc_control_node_DW.obj_i.GyroParamsConstantBias[1] =
      proc_control_node_P.IMU_GyroParamsConstantBias[1];
    proc_control_node_DW.obj_i.GyroParamsConstantBias[2] =
      proc_control_node_P.IMU_GyroParamsConstantBias[2];
    flag = (proc_control_node_DW.obj_i.isInitialized == 1);
    if (flag) {
      proc_control_node_DW.obj_i.TunablePropsChanged = true;
      proc_control_node_DW.obj_i.tunablePropertyChanged[15] = true;
    }

    proc_control_node_DW.obj_i.GyroParamsAxesMisalignment[0] =
      proc_control_node_P.IMU_GyroParamsAxesMisalignment[0];
    proc_control_node_DW.obj_i.GyroParamsAxesMisalignment[1] =
      proc_control_node_P.IMU_GyroParamsAxesMisalignment[1];
    proc_control_node_DW.obj_i.GyroParamsAxesMisalignment[2] =
      proc_control_node_P.IMU_GyroParamsAxesMisalignment[2];
    flag = (proc_control_node_DW.obj_i.isInitialized == 1);
    if (flag) {
      proc_control_node_DW.obj_i.TunablePropsChanged = true;
      proc_control_node_DW.obj_i.tunablePropertyChanged[21] = true;
    }

    proc_control_node_DW.obj_i.GyroParamsAccelerationBias[0] =
      proc_control_node_P.IMU_GyroParamsAccelerationBias[0];
    proc_control_node_DW.obj_i.GyroParamsAccelerationBias[1] =
      proc_control_node_P.IMU_GyroParamsAccelerationBias[1];
    proc_control_node_DW.obj_i.GyroParamsAccelerationBias[2] =
      proc_control_node_P.IMU_GyroParamsAccelerationBias[2];
    flag = (proc_control_node_DW.obj_i.isInitialized == 1);
    if (flag) {
      proc_control_node_DW.obj_i.TunablePropsChanged = true;
      proc_control_node_DW.obj_i.tunablePropertyChanged[16] = true;
    }

    proc_control_node_DW.obj_i.GyroParamsNoiseDensity[0] =
      proc_control_node_P.IMU_GyroParamsNoiseDensity[0];
    proc_control_node_DW.obj_i.GyroParamsNoiseDensity[1] =
      proc_control_node_P.IMU_GyroParamsNoiseDensity[1];
    proc_control_node_DW.obj_i.GyroParamsNoiseDensity[2] =
      proc_control_node_P.IMU_GyroParamsNoiseDensity[2];
    flag = (proc_control_node_DW.obj_i.isInitialized == 1);
    if (flag) {
      proc_control_node_DW.obj_i.TunablePropsChanged = true;
      proc_control_node_DW.obj_i.tunablePropertyChanged[17] = true;
    }

    proc_control_node_DW.obj_i.GyroParamsBiasInstability[0] =
      proc_control_node_P.IMU_GyroParamsBiasInstability[0];
    proc_control_node_DW.obj_i.GyroParamsBiasInstability[1] =
      proc_control_node_P.IMU_GyroParamsBiasInstability[1];
    proc_control_node_DW.obj_i.GyroParamsBiasInstability[2] =
      proc_control_node_P.IMU_GyroParamsBiasInstability[2];
    flag = (proc_control_node_DW.obj_i.isInitialized == 1);
    if (flag) {
      proc_control_node_DW.obj_i.TunablePropsChanged = true;
      proc_control_node_DW.obj_i.tunablePropertyChanged[18] = true;
    }

    proc_control_node_DW.obj_i.GyroParamsRandomWalk[0] =
      proc_control_node_P.IMU_GyroParamsRandomWalk[0];
    proc_control_node_DW.obj_i.GyroParamsRandomWalk[1] =
      proc_control_node_P.IMU_GyroParamsRandomWalk[1];
    proc_control_node_DW.obj_i.GyroParamsRandomWalk[2] =
      proc_control_node_P.IMU_GyroParamsRandomWalk[2];
    flag = (proc_control_node_DW.obj_i.isInitialized == 1);
    if (flag) {
      proc_control_node_DW.obj_i.TunablePropsChanged = true;
      proc_control_node_DW.obj_i.tunablePropertyChanged[19] = true;
    }

    proc_control_node_DW.obj_i.GyroParamsTemperatureBias[0] =
      proc_control_node_P.IMU_GyroParamsTemperatureBias[0];
    proc_control_node_DW.obj_i.GyroParamsTemperatureBias[1] =
      proc_control_node_P.IMU_GyroParamsTemperatureBias[1];
    proc_control_node_DW.obj_i.GyroParamsTemperatureBias[2] =
      proc_control_node_P.IMU_GyroParamsTemperatureBias[2];
    flag = (proc_control_node_DW.obj_i.isInitialized == 1);
    if (flag) {
      proc_control_node_DW.obj_i.TunablePropsChanged = true;
      proc_control_node_DW.obj_i.tunablePropertyChanged[20] = true;
    }

    proc_control_node_DW.obj_i.GyroParamsTemperatureScaleFactor[0] =
      proc_control_node_P.IMU_GyroParamsTemperatureScaleF[0];
    proc_control_node_DW.obj_i.GyroParamsTemperatureScaleFactor[1] =
      proc_control_node_P.IMU_GyroParamsTemperatureScaleF[1];
    proc_control_node_DW.obj_i.GyroParamsTemperatureScaleFactor[2] =
      proc_control_node_P.IMU_GyroParamsTemperatureScaleF[2];
    flag = (proc_control_node_DW.obj_i.isInitialized == 1);
    if (flag) {
      proc_control_node_DW.obj_i.TunablePropsChanged = true;
      proc_control_node_DW.obj_i.tunablePropertyChanged[22] = true;
    }

    proc_control_node_DW.obj_i.MagParamsMeasurementRange =
      proc_control_node_P.IMU_MagParamsMeasurementRange;
    flag = (proc_control_node_DW.obj_i.isInitialized == 1);
    if (flag) {
      proc_control_node_DW.obj_i.TunablePropsChanged = true;
      proc_control_node_DW.obj_i.tunablePropertyChanged[23] = true;
    }

    proc_control_node_DW.obj_i.MagParamsResolution =
      proc_control_node_P.IMU_MagParamsResolution;
    flag = (proc_control_node_DW.obj_i.isInitialized == 1);
    if (flag) {
      proc_control_node_DW.obj_i.TunablePropsChanged = true;
      proc_control_node_DW.obj_i.tunablePropertyChanged[24] = true;
    }

    proc_control_node_DW.obj_i.MagParamsConstantBias[0] =
      proc_control_node_P.IMU_MagParamsConstantBias[0];
    proc_control_node_DW.obj_i.MagParamsConstantBias[1] =
      proc_control_node_P.IMU_MagParamsConstantBias[1];
    proc_control_node_DW.obj_i.MagParamsConstantBias[2] =
      proc_control_node_P.IMU_MagParamsConstantBias[2];
    flag = (proc_control_node_DW.obj_i.isInitialized == 1);
    if (flag) {
      proc_control_node_DW.obj_i.TunablePropsChanged = true;
      proc_control_node_DW.obj_i.tunablePropertyChanged[25] = true;
    }

    proc_control_node_DW.obj_i.MagParamsAxesMisalignment[0] =
      proc_control_node_P.IMU_MagParamsAxesMisalignment[0];
    proc_control_node_DW.obj_i.MagParamsAxesMisalignment[1] =
      proc_control_node_P.IMU_MagParamsAxesMisalignment[1];
    proc_control_node_DW.obj_i.MagParamsAxesMisalignment[2] =
      proc_control_node_P.IMU_MagParamsAxesMisalignment[2];
    flag = (proc_control_node_DW.obj_i.isInitialized == 1);
    if (flag) {
      proc_control_node_DW.obj_i.TunablePropsChanged = true;
      proc_control_node_DW.obj_i.tunablePropertyChanged[26] = true;
    }

    proc_control_node_DW.obj_i.MagParamsNoiseDensity[0] =
      proc_control_node_P.IMU_MagParamsNoiseDensity[0];
    proc_control_node_DW.obj_i.MagParamsNoiseDensity[1] =
      proc_control_node_P.IMU_MagParamsNoiseDensity[1];
    proc_control_node_DW.obj_i.MagParamsNoiseDensity[2] =
      proc_control_node_P.IMU_MagParamsNoiseDensity[2];
    flag = (proc_control_node_DW.obj_i.isInitialized == 1);
    if (flag) {
      proc_control_node_DW.obj_i.TunablePropsChanged = true;
      proc_control_node_DW.obj_i.tunablePropertyChanged[27] = true;
    }

    proc_control_node_DW.obj_i.MagParamsBiasInstability[0] =
      proc_control_node_P.IMU_MagParamsBiasInstability[0];
    proc_control_node_DW.obj_i.MagParamsBiasInstability[1] =
      proc_control_node_P.IMU_MagParamsBiasInstability[1];
    proc_control_node_DW.obj_i.MagParamsBiasInstability[2] =
      proc_control_node_P.IMU_MagParamsBiasInstability[2];
    flag = (proc_control_node_DW.obj_i.isInitialized == 1);
    if (flag) {
      proc_control_node_DW.obj_i.TunablePropsChanged = true;
      proc_control_node_DW.obj_i.tunablePropertyChanged[28] = true;
    }

    proc_control_node_DW.obj_i.MagParamsRandomWalk[0] =
      proc_control_node_P.IMU_MagParamsRandomWalk[0];
    proc_control_node_DW.obj_i.MagParamsRandomWalk[1] =
      proc_control_node_P.IMU_MagParamsRandomWalk[1];
    proc_control_node_DW.obj_i.MagParamsRandomWalk[2] =
      proc_control_node_P.IMU_MagParamsRandomWalk[2];
    flag = (proc_control_node_DW.obj_i.isInitialized == 1);
    if (flag) {
      proc_control_node_DW.obj_i.TunablePropsChanged = true;
      proc_control_node_DW.obj_i.tunablePropertyChanged[29] = true;
    }

    proc_control_node_DW.obj_i.MagParamsTemperatureBias[0] =
      proc_control_node_P.IMU_MagParamsTemperatureBias[0];
    proc_control_node_DW.obj_i.MagParamsTemperatureBias[1] =
      proc_control_node_P.IMU_MagParamsTemperatureBias[1];
    proc_control_node_DW.obj_i.MagParamsTemperatureBias[2] =
      proc_control_node_P.IMU_MagParamsTemperatureBias[2];
    flag = (proc_control_node_DW.obj_i.isInitialized == 1);
    if (flag) {
      proc_control_node_DW.obj_i.TunablePropsChanged = true;
      proc_control_node_DW.obj_i.tunablePropertyChanged[30] = true;
    }

    proc_control_node_DW.obj_i.MagParamsTemperatureScaleFactor[0] =
      proc_control_node_P.IMU_MagParamsTemperatureScaleFa[0];
    proc_control_node_DW.obj_i.MagParamsTemperatureScaleFactor[1] =
      proc_control_node_P.IMU_MagParamsTemperatureScaleFa[1];
    proc_control_node_DW.obj_i.MagParamsTemperatureScaleFactor[2] =
      proc_control_node_P.IMU_MagParamsTemperatureScaleFa[2];
    proc_control_n_SystemCore_setup(&proc_control_node_DW.obj_i);

    // End of Start for MATLABSystem: '<S19>/IMU'

    // InitializeConditions for MATLABSystem: '<S19>/IMU'
    proc_co_IMUSensorBase_resetImpl(&proc_control_node_DW.obj_i);

    // Start for MATLABSystem: '<S19>/AHRS' incorporates:
    //   MATLABSystem: '<S19>/IMU'

    proc_control_node_DW.obj_c.isInitialized = 0;
    flag = (proc_control_node_DW.obj_c.isInitialized == 1);
    if (flag) {
      proc_control_node_DW.obj_c.TunablePropsChanged = true;
    }

    proc_control_node_DW.obj_c.AccelerometerNoise =
      proc_control_node_P.AHRS_AccelerometerNoise;
    flag = (proc_control_node_DW.obj_c.isInitialized == 1);
    if (flag) {
      proc_control_node_DW.obj_c.TunablePropsChanged = true;
    }

    proc_control_node_DW.obj_c.GyroscopeNoise =
      proc_control_node_P.AHRS_GyroscopeNoise;
    flag = (proc_control_node_DW.obj_c.isInitialized == 1);
    if (flag) {
      proc_control_node_DW.obj_c.TunablePropsChanged = true;
    }

    proc_control_node_DW.obj_c.MagnetometerNoise =
      proc_control_node_P.AHRS_MagnetometerNoise;
    flag = (proc_control_node_DW.obj_c.isInitialized == 1);
    if (flag) {
      proc_control_node_DW.obj_c.TunablePropsChanged = true;
    }

    proc_control_node_DW.obj_c.GyroscopeDriftNoise =
      proc_control_node_P.AHRS_GyroscopeDriftNoise;
    flag = (proc_control_node_DW.obj_c.isInitialized == 1);
    if (flag) {
      proc_control_node_DW.obj_c.TunablePropsChanged = true;
    }

    proc_control_node_DW.obj_c.LinearAccelerationNoise =
      proc_control_node_P.AHRS_LinearAccelerationNoise;
    flag = (proc_control_node_DW.obj_c.isInitialized == 1);
    if (flag) {
      proc_control_node_DW.obj_c.TunablePropsChanged = true;
    }

    proc_control_node_DW.obj_c.MagneticDisturbanceNoise =
      proc_control_node_P.AHRS_MagneticDisturbanceNoise;
    flag = (proc_control_node_DW.obj_c.isInitialized == 1);
    if (flag) {
      proc_control_node_DW.obj_c.TunablePropsChanged = true;
    }

    proc_control_node_DW.obj_c.LinearAccelerationDecayFactor =
      proc_control_node_P.AHRS_LinearAccelerationDecayFac;
    flag = (proc_control_node_DW.obj_c.isInitialized == 1);
    if (flag) {
      proc_control_node_DW.obj_c.TunablePropsChanged = true;
    }

    proc_control_node_DW.obj_c.MagneticDisturbanceDecayFactor =
      proc_control_node_P.AHRS_MagneticDisturbanceDecayFa;
    flag = (proc_control_node_DW.obj_c.isInitialized == 1);
    if (flag) {
      proc_control_node_DW.obj_c.TunablePropsChanged = true;
    }

    proc_control_node_DW.obj_c.ExpectedMagneticFieldStrength =
      proc_control_node_P.AHRS_ExpectedMagneticFieldStren;
    proc_control_node_DW.obj_c.isInitialized = 1;
    proc_control_node_DW.obj_c.pInputPrototype[0] =
      proc_control_node_B.rtb_Transpose1_idx_0;
    proc_control_node_DW.obj_c.pInputPrototype[1] =
      proc_control_node_B.rtb_Transpose1_idx_0;
    proc_control_node_DW.obj_c.pInputPrototype[2] =
      proc_control_node_B.rtb_Transpose1_idx_0;
    proc_control_node_DW.obj_c.pSensorPeriod = 0.01;
    proc_control_node_DW.obj_c.pKalmanPeriod =
      proc_control_node_DW.obj_c.pSensorPeriod;
    proc_control_node_DW.obj_c.pRefSys = &proc_control_node_DW.obj_c._pobj0;
    proc_control_node_DW.obj_c.TunablePropsChanged = false;

    // End of Start for MATLABSystem: '<S19>/AHRS'

    // InitializeConditions for MATLABSystem: '<S19>/AHRS'
    proc_c_AHRSFilterBase_resetImpl(&proc_control_node_DW.obj_c);

    // SystemInitialize for Outport: '<S1>/Clean Output'
    proc_control_node_B.y_f[0] = proc_control_node_P.CleanOutput_Y0.Quaternion[0];
    proc_control_node_B.y_f[1] = proc_control_node_P.CleanOutput_Y0.Quaternion[1];
    proc_control_node_B.y_f[2] = proc_control_node_P.CleanOutput_Y0.Quaternion[2];
    proc_control_node_B.y_f[3] = proc_control_node_P.CleanOutput_Y0.Quaternion[3];

    // SystemInitialize for Sum: '<S18>/Sum1' incorporates:
    //   Outport: '<S1>/Sensors Output'

    proc_control_node_B.Quaternion_p[0] =
      proc_control_node_P.SensorsOutput_Y0.Quaternion[0];
    proc_control_node_B.Quaternion_p[1] =
      proc_control_node_P.SensorsOutput_Y0.Quaternion[1];
    proc_control_node_B.Quaternion_p[2] =
      proc_control_node_P.SensorsOutput_Y0.Quaternion[2];
    proc_control_node_B.Quaternion_p[3] =
      proc_control_node_P.SensorsOutput_Y0.Quaternion[3];

    // End of SystemInitialize for SubSystem: '<Root>/Modèle Physique'

    // SystemInitialize for Atomic SubSystem: '<S83>/Publish'
    // Start for MATLABSystem: '<S87>/SinkBlock'
    proc_control_node_DW.obj_d.matlabCodegenIsDeleted = false;
    proc_control_node_DW.obj_d.isInitialized = 1;
    for (i = 0; i < 23; i++) {
      proc_control_node_B.b_zeroDelimTopic_i[i] = tmp_a[i];
    }

    proc_control_node_B.b_zeroDelimTopic_i[23] = '\x00';
    Pub_proc_control_node_1173.createPublisher
      (&proc_control_node_B.b_zeroDelimTopic_i[0], 1);
    proc_control_node_DW.obj_d.isSetupComplete = true;

    // End of Start for MATLABSystem: '<S87>/SinkBlock'
    // End of SystemInitialize for SubSystem: '<S83>/Publish'
    // SystemInitialize for Atomic SubSystem: '<S52>/Publish'
    // Start for MATLABSystem: '<S61>/SinkBlock'
    proc_control_node_DW.obj_dr.matlabCodegenIsDeleted = false;
    proc_control_node_DW.obj_dr.isInitialized = 1;
    for (i = 0; i < 8; i++) {
      proc_control_node_B.b_zeroDelimTopic_ew[i] = tmp_b[i];
    }

    proc_control_node_B.b_zeroDelimTopic_ew[8] = '\x00';
    Pub_proc_control_node_973.createPublisher
      (&proc_control_node_B.b_zeroDelimTopic_ew[0], 1);
    proc_control_node_DW.obj_dr.isSetupComplete = true;

    // End of Start for MATLABSystem: '<S61>/SinkBlock'
    // End of SystemInitialize for SubSystem: '<S52>/Publish'

    // SystemInitialize for Atomic SubSystem: '<S50>/Publish'
    // Start for MATLABSystem: '<S55>/SinkBlock'
    proc_control_node_DW.obj_os4.matlabCodegenIsDeleted = false;
    proc_control_node_DW.obj_os4.isInitialized = 1;
    Pub_proc_control_node_945.createPublisher
      (&proc_control_node_B.b_zeroDelimTopic_tmp[0], 1);
    proc_control_node_DW.obj_os4.isSetupComplete = true;

    // End of SystemInitialize for SubSystem: '<S50>/Publish'

    // SystemInitialize for Atomic SubSystem: '<S51>/Publish'
    // Start for MATLABSystem: '<S58>/SinkBlock'
    proc_control_node_DW.obj_f5.matlabCodegenIsDeleted = false;
    proc_control_node_DW.obj_f5.isInitialized = 1;
    Pub_proc_control_node_951.createPublisher
      (&proc_control_node_B.b_zeroDelimTopic_tmp_a[0], 1);
    proc_control_node_DW.obj_f5.isSetupComplete = true;

    // End of SystemInitialize for SubSystem: '<S51>/Publish'

    // SystemInitialize for SignalConversion generated from: '<S4>/Output' incorporates:
    //   Outport: '<S4>/Output'

    proc_control_node_B.Quaternion_l[0] =
      proc_control_node_P.Output_Y0.Quaternion[0];
    proc_control_node_B.Quaternion_l[1] =
      proc_control_node_P.Output_Y0.Quaternion[1];
    proc_control_node_B.Quaternion_l[2] =
      proc_control_node_P.Output_Y0.Quaternion[2];
    proc_control_node_B.Quaternion_l[3] =
      proc_control_node_P.Output_Y0.Quaternion[3];

    // End of SystemInitialize for SubSystem: '<Root>/ROS Output'
    // SystemInitialize for Atomic SubSystem: '<S5>/Publish2'
    // Start for MATLABSystem: '<S72>/SinkBlock'
    proc_control_node_DW.obj_k0.matlabCodegenIsDeleted = false;
    proc_control_node_DW.obj_k0.isInitialized = 1;
    for (i = 0; i < 31; i++) {
      proc_control_node_B.b_zeroDelimTopic_a[i] = tmp_c[i];
    }

    proc_control_node_B.b_zeroDelimTopic_a[31] = '\x00';
    Pub_proc_control_node_1024.createPublisher
      (&proc_control_node_B.b_zeroDelimTopic_a[0], 1);
    proc_control_node_DW.obj_k0.isSetupComplete = true;

    // End of Start for MATLABSystem: '<S72>/SinkBlock'
    // End of SystemInitialize for SubSystem: '<S5>/Publish2'

    // SystemInitialize for Atomic SubSystem: '<S5>/Publish3'
    // Start for MATLABSystem: '<S73>/SinkBlock'
    proc_control_node_DW.obj_j.matlabCodegenIsDeleted = false;
    proc_control_node_DW.obj_j.isInitialized = 1;
    for (i = 0; i < 23; i++) {
      proc_control_node_B.b_zeroDelimTopic_i[i] = tmp_d[i];
    }

    proc_control_node_B.b_zeroDelimTopic_i[23] = '\x00';
    Pub_proc_control_node_1028.createPublisher
      (&proc_control_node_B.b_zeroDelimTopic_i[0], 1);
    proc_control_node_DW.obj_j.isSetupComplete = true;

    // End of Start for MATLABSystem: '<S73>/SinkBlock'
    // End of SystemInitialize for SubSystem: '<S5>/Publish3'

    // SystemInitialize for Atomic SubSystem: '<S5>/Publish4'
    // Start for MATLABSystem: '<S74>/SinkBlock'
    proc_control_node_DW.obj_p.matlabCodegenIsDeleted = false;
    proc_control_node_DW.obj_p.isInitialized = 1;
    for (i = 0; i < 26; i++) {
      proc_control_node_B.b_zeroDelimTopic_e[i] = tmp_e[i];
    }

    proc_control_node_B.b_zeroDelimTopic_e[26] = '\x00';
    Pub_proc_control_node_1038.createPublisher
      (&proc_control_node_B.b_zeroDelimTopic_e[0], 1);
    proc_control_node_DW.obj_p.isSetupComplete = true;

    // End of Start for MATLABSystem: '<S74>/SinkBlock'
    // End of SystemInitialize for SubSystem: '<S5>/Publish4'

    // SystemInitialize for Atomic SubSystem: '<S6>/Publish'
    // Start for MATLABSystem: '<S76>/SinkBlock'
    proc_control_node_DW.obj_bj.matlabCodegenIsDeleted = false;
    proc_control_node_DW.obj_bj.isInitialized = 1;
    for (i = 0; i < 22; i++) {
      proc_control_node_B.b_zeroDelimTopic_d[i] = tmp_f[i];
    }

    proc_control_node_B.b_zeroDelimTopic_d[22] = '\x00';
    Pub_proc_control_node_1121.createPublisher
      (&proc_control_node_B.b_zeroDelimTopic_d[0], 1);
    proc_control_node_DW.obj_bj.isSetupComplete = true;

    // End of Start for MATLABSystem: '<S76>/SinkBlock'
    // End of SystemInitialize for SubSystem: '<S6>/Publish'

    // SystemInitialize for Merge: '<S11>/Merge1'
    proc_control_node_B.Merge1 = proc_control_node_P.Merge1_InitialOutput;

    // SystemInitialize for Triggered SubSystem: '<Root>/Send Target Reached '
    // SystemInitialize for Atomic SubSystem: '<S7>/Publish'
    // Start for MATLABSystem: '<S78>/SinkBlock'
    proc_control_node_DW.obj_o5.matlabCodegenIsDeleted = false;
    proc_control_node_DW.obj_o5.isInitialized = 1;
    for (i = 0; i < 27; i++) {
      proc_control_node_B.b_zeroDelimTopic_g[i] = tmp_g[i];
    }

    proc_control_node_B.b_zeroDelimTopic_g[27] = '\x00';
    Pub_proc_control_node_794.createPublisher
      (&proc_control_node_B.b_zeroDelimTopic_g[0], 1);
    proc_control_node_DW.obj_o5.isSetupComplete = true;

    // End of Start for MATLABSystem: '<S78>/SinkBlock'
    // End of SystemInitialize for SubSystem: '<S7>/Publish'
    // End of SystemInitialize for SubSystem: '<Root>/Send Target Reached '

    // SystemInitialize for Atomic SubSystem: '<S8>/Publish'
    // Start for MATLABSystem: '<S82>/SinkBlock'
    proc_control_node_DW.obj_lm.matlabCodegenIsDeleted = false;
    proc_control_node_DW.obj_lm.isInitialized = 1;
    for (i = 0; i < 22; i++) {
      proc_control_node_B.b_zeroDelimTopic_d[i] = tmp_h[i];
    }

    proc_control_node_B.b_zeroDelimTopic_d[22] = '\x00';
    Pub_proc_control_node_1157.createPublisher
      (&proc_control_node_B.b_zeroDelimTopic_d[0], 1);
    proc_control_node_DW.obj_lm.isSetupComplete = true;

    // End of Start for MATLABSystem: '<S82>/SinkBlock'
    // End of SystemInitialize for SubSystem: '<S8>/Publish'

    // SystemInitialize for Atomic SubSystem: '<S5>/Publish1'
    // Start for MATLABSystem: '<S71>/SinkBlock'
    proc_control_node_DW.obj_jb.matlabCodegenIsDeleted = false;
    proc_control_node_DW.obj_jb.isInitialized = 1;
    for (i = 0; i < 23; i++) {
      proc_control_node_B.b_zeroDelimTopic_i[i] = tmp_i[i];
    }

    proc_control_node_B.b_zeroDelimTopic_i[23] = '\x00';
    Pub_proc_control_node_1014.createPublisher
      (&proc_control_node_B.b_zeroDelimTopic_i[0], 1);
    proc_control_node_DW.obj_jb.isSetupComplete = true;

    // End of Start for MATLABSystem: '<S71>/SinkBlock'
    // End of SystemInitialize for SubSystem: '<S5>/Publish1'

    // SystemInitialize for Atomic SubSystem: '<S5>/Publish'
    // Start for MATLABSystem: '<S70>/SinkBlock'
    proc_control_node_DW.obj_aj.matlabCodegenIsDeleted = false;
    proc_control_node_DW.obj_aj.isInitialized = 1;
    for (i = 0; i < 26; i++) {
      proc_control_node_B.b_zeroDelimTopic_e[i] = tmp_j[i];
    }

    proc_control_node_B.b_zeroDelimTopic_e[26] = '\x00';
    Pub_proc_control_node_1007.createPublisher
      (&proc_control_node_B.b_zeroDelimTopic_e[0], 1);
    proc_control_node_DW.obj_aj.isSetupComplete = true;

    // End of Start for MATLABSystem: '<S70>/SinkBlock'
    // End of SystemInitialize for SubSystem: '<S5>/Publish'
  }

  // set "at time zero" to false
  if (rtmIsFirstInitCond(proc_control_node_M)) {
    rtmSetFirstInitCond(proc_control_node_M, 0);
  }
}

// Model terminate function
void proc_control_node_terminate(void)
{
  // Terminate for Atomic SubSystem: '<S3>/Subscribe1'
  // Terminate for MATLABSystem: '<S47>/SourceBlock'
  if (!proc_control_node_DW.obj_os.matlabCodegenIsDeleted) {
    proc_control_node_DW.obj_os.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S47>/SourceBlock'
  // End of Terminate for SubSystem: '<S3>/Subscribe1'

  // Terminate for Atomic SubSystem: '<S3>/Subscribe'
  // Terminate for MATLABSystem: '<S46>/SourceBlock'
  if (!proc_control_node_DW.obj_ai.matlabCodegenIsDeleted) {
    proc_control_node_DW.obj_ai.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S46>/SourceBlock'
  // End of Terminate for SubSystem: '<S3>/Subscribe'

  // Terminate for Atomic SubSystem: '<S12>/Subscribe'
  // Terminate for MATLABSystem: '<S190>/SourceBlock'
  if (!proc_control_node_DW.obj_iv.matlabCodegenIsDeleted) {
    proc_control_node_DW.obj_iv.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S190>/SourceBlock'
  // End of Terminate for SubSystem: '<S12>/Subscribe'

  // Terminate for Atomic SubSystem: '<S12>/Subscribe3'
  // Terminate for MATLABSystem: '<S193>/SourceBlock'
  if (!proc_control_node_DW.obj_b.matlabCodegenIsDeleted) {
    proc_control_node_DW.obj_b.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S193>/SourceBlock'
  // End of Terminate for SubSystem: '<S12>/Subscribe3'

  // Terminate for Atomic SubSystem: '<S12>/Subscribe2'
  // Terminate for MATLABSystem: '<S192>/SourceBlock'
  if (!proc_control_node_DW.obj_if.matlabCodegenIsDeleted) {
    proc_control_node_DW.obj_if.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S192>/SourceBlock'
  // End of Terminate for SubSystem: '<S12>/Subscribe2'

  // Terminate for Atomic SubSystem: '<S147>/Subscribe2'
  // Terminate for MATLABSystem: '<S153>/SourceBlock'
  if (!proc_control_node_DW.obj_l.matlabCodegenIsDeleted) {
    proc_control_node_DW.obj_l.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S153>/SourceBlock'
  // End of Terminate for SubSystem: '<S147>/Subscribe2'

  // Terminate for IfAction SubSystem: '<S11>/SubsystemAuto'
  // Terminate for Atomic SubSystem: '<S148>/Subscribe2'
  // Terminate for MATLABSystem: '<S162>/SourceBlock'
  if (!proc_control_node_DW.obj_gw.matlabCodegenIsDeleted) {
    proc_control_node_DW.obj_gw.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S162>/SourceBlock'
  // End of Terminate for SubSystem: '<S148>/Subscribe2'

  // Terminate for Atomic SubSystem: '<S148>/Subscribe'
  // Terminate for MATLABSystem: '<S160>/SourceBlock'
  if (!proc_control_node_DW.obj_bo.matlabCodegenIsDeleted) {
    proc_control_node_DW.obj_bo.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S160>/SourceBlock'
  // End of Terminate for SubSystem: '<S148>/Subscribe'

  // Terminate for Atomic SubSystem: '<S148>/Subscribe1'
  // Terminate for MATLABSystem: '<S161>/SourceBlock'
  if (!proc_control_node_DW.obj_mi.matlabCodegenIsDeleted) {
    proc_control_node_DW.obj_mi.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S161>/SourceBlock'
  // End of Terminate for SubSystem: '<S148>/Subscribe1'
  // End of Terminate for SubSystem: '<S11>/SubsystemAuto'

  // Terminate for IfAction SubSystem: '<S11>/singleWpts Trajectory'
  // Terminate for Atomic SubSystem: '<S150>/Subscribe'
  // Terminate for MATLABSystem: '<S172>/SourceBlock'
  if (!proc_control_node_DW.obj_a.matlabCodegenIsDeleted) {
    proc_control_node_DW.obj_a.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S172>/SourceBlock'
  // End of Terminate for SubSystem: '<S150>/Subscribe'
  // End of Terminate for SubSystem: '<S11>/singleWpts Trajectory'

  // Terminate for Atomic SubSystem: '<S12>/Subscribe1'
  // Terminate for MATLABSystem: '<S191>/SourceBlock'
  if (!proc_control_node_DW.obj_f.matlabCodegenIsDeleted) {
    proc_control_node_DW.obj_f.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S191>/SourceBlock'
  // End of Terminate for SubSystem: '<S12>/Subscribe1'

  // Terminate for Atomic SubSystem: '<S83>/Publish'
  // Terminate for MATLABSystem: '<S87>/SinkBlock'
  if (!proc_control_node_DW.obj_d.matlabCodegenIsDeleted) {
    proc_control_node_DW.obj_d.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S87>/SinkBlock'
  // End of Terminate for SubSystem: '<S83>/Publish'

  // Terminate for Enabled SubSystem: '<Root>/ROS Output'
  // Terminate for Atomic SubSystem: '<S52>/Publish'
  // Terminate for MATLABSystem: '<S61>/SinkBlock'
  if (!proc_control_node_DW.obj_dr.matlabCodegenIsDeleted) {
    proc_control_node_DW.obj_dr.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S61>/SinkBlock'
  // End of Terminate for SubSystem: '<S52>/Publish'

  // Terminate for Atomic SubSystem: '<S50>/Publish'
  // Terminate for MATLABSystem: '<S55>/SinkBlock'
  if (!proc_control_node_DW.obj_os4.matlabCodegenIsDeleted) {
    proc_control_node_DW.obj_os4.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S55>/SinkBlock'
  // End of Terminate for SubSystem: '<S50>/Publish'

  // Terminate for Atomic SubSystem: '<S51>/Publish'
  // Terminate for MATLABSystem: '<S58>/SinkBlock'
  if (!proc_control_node_DW.obj_f5.matlabCodegenIsDeleted) {
    proc_control_node_DW.obj_f5.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S58>/SinkBlock'
  // End of Terminate for SubSystem: '<S51>/Publish'
  // End of Terminate for SubSystem: '<Root>/ROS Output'

  // Terminate for Atomic SubSystem: '<S5>/Publish2'
  // Terminate for MATLABSystem: '<S72>/SinkBlock'
  if (!proc_control_node_DW.obj_k0.matlabCodegenIsDeleted) {
    proc_control_node_DW.obj_k0.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S72>/SinkBlock'
  // End of Terminate for SubSystem: '<S5>/Publish2'

  // Terminate for Atomic SubSystem: '<S5>/Publish3'
  // Terminate for MATLABSystem: '<S73>/SinkBlock'
  if (!proc_control_node_DW.obj_j.matlabCodegenIsDeleted) {
    proc_control_node_DW.obj_j.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S73>/SinkBlock'
  // End of Terminate for SubSystem: '<S5>/Publish3'

  // Terminate for Atomic SubSystem: '<S5>/Publish4'
  // Terminate for MATLABSystem: '<S74>/SinkBlock'
  if (!proc_control_node_DW.obj_p.matlabCodegenIsDeleted) {
    proc_control_node_DW.obj_p.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S74>/SinkBlock'
  // End of Terminate for SubSystem: '<S5>/Publish4'

  // Terminate for Atomic SubSystem: '<S6>/Publish'
  // Terminate for MATLABSystem: '<S76>/SinkBlock'
  if (!proc_control_node_DW.obj_bj.matlabCodegenIsDeleted) {
    proc_control_node_DW.obj_bj.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S76>/SinkBlock'
  // End of Terminate for SubSystem: '<S6>/Publish'

  // Terminate for Triggered SubSystem: '<Root>/Send Target Reached '
  // Terminate for Atomic SubSystem: '<S7>/Publish'
  // Terminate for MATLABSystem: '<S78>/SinkBlock'
  if (!proc_control_node_DW.obj_o5.matlabCodegenIsDeleted) {
    proc_control_node_DW.obj_o5.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S78>/SinkBlock'
  // End of Terminate for SubSystem: '<S7>/Publish'
  // End of Terminate for SubSystem: '<Root>/Send Target Reached '

  // Terminate for Atomic SubSystem: '<S8>/Publish'
  // Terminate for MATLABSystem: '<S82>/SinkBlock'
  if (!proc_control_node_DW.obj_lm.matlabCodegenIsDeleted) {
    proc_control_node_DW.obj_lm.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S82>/SinkBlock'
  // End of Terminate for SubSystem: '<S8>/Publish'

  // Terminate for Atomic SubSystem: '<S5>/Publish1'
  // Terminate for MATLABSystem: '<S71>/SinkBlock'
  if (!proc_control_node_DW.obj_jb.matlabCodegenIsDeleted) {
    proc_control_node_DW.obj_jb.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S71>/SinkBlock'
  // End of Terminate for SubSystem: '<S5>/Publish1'

  // Terminate for Atomic SubSystem: '<S5>/Publish'
  // Terminate for MATLABSystem: '<S70>/SinkBlock'
  if (!proc_control_node_DW.obj_aj.matlabCodegenIsDeleted) {
    proc_control_node_DW.obj_aj.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S70>/SinkBlock'
  // End of Terminate for SubSystem: '<S5>/Publish'
}

//
// File trailer for generated code.
//
// [EOF]
//
