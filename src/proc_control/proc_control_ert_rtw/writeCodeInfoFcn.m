% Autogenerated file: Thu Apr  7 23:11:24 2022
function writeCodeInfoFcn


% Load a ComponentInterface object from IR
codeIRInfoStruct = load('tlc/codeIRInfo.mat');
codeInfo = codeIRInfoStruct.codeInfo;

prmIdxMap = containers.Map;




wr = coder.internal.writeDataInterfacesToCodeDescriptor("proc_control",pwd) ;
wr.writeName(codeInfo.Name);



skippedParameters = [];


                        
        % Structure Elements
        Type_22_R0_V0_C0_EL = [];
                
    % Built-In Type: 0
        Type_0_R0_V0_C1 = coder.types.Double;
        Type_0_R0_V0_C1.Name = 'double';
    Type_0_R0_V0_C1.Identifier = 'real_T';
    Type_0_R0_V0_C1.ReadOnly   = 0;
    Type_0_R0_V0_C1.Volatile   = 0;
        
            % Element # 1
            Type_22_R0_V0_C0_M0 = coder.types.AggregateElement;
            Type_22_R0_V0_C0_M0.Identifier = 'mass';
            Type_22_R0_V0_C0_M0.Type = Type_0_R0_V0_C1;
            Type_22_R0_V0_C0_EL = [Type_22_R0_V0_C0_EL, Type_22_R0_V0_C0_M0];

            % Element # 2
            Type_22_R0_V0_C0_M1 = coder.types.AggregateElement;
            Type_22_R0_V0_C0_M1.Identifier = 'volume';
            Type_22_R0_V0_C0_M1.Type = Type_0_R0_V0_C1;
            Type_22_R0_V0_C0_EL = [Type_22_R0_V0_C0_EL, Type_22_R0_V0_C0_M1];

            % Element # 3
            Type_22_R0_V0_C0_M2 = coder.types.AggregateElement;
            Type_22_R0_V0_C0_M2.Identifier = 'rho';
            Type_22_R0_V0_C0_M2.Type = Type_0_R0_V0_C1;
            Type_22_R0_V0_C0_EL = [Type_22_R0_V0_C0_EL, Type_22_R0_V0_C0_M2];

            % Element # 4
            Type_22_R0_V0_C0_M3 = coder.types.AggregateElement;
            Type_22_R0_V0_C0_M3.Identifier = 'g';
            Type_22_R0_V0_C0_M3.Type = Type_0_R0_V0_C1;
            Type_22_R0_V0_C0_EL = [Type_22_R0_V0_C0_EL, Type_22_R0_V0_C0_M3];

            % Element # 5
            Type_22_R0_V0_C0_M4 = coder.types.AggregateElement;
            Type_22_R0_V0_C0_M4.Identifier = 'dvlCenterDist';
            Type_22_R0_V0_C0_M4.Type = Type_0_R0_V0_C1;
            Type_22_R0_V0_C0_EL = [Type_22_R0_V0_C0_EL, Type_22_R0_V0_C0_M4];

            % Element # 6
            Type_22_R0_V0_C0_M5 = coder.types.AggregateElement;
            Type_22_R0_V0_C0_M5.Identifier = 'height';
            Type_22_R0_V0_C0_M5.Type = Type_0_R0_V0_C1;
            Type_22_R0_V0_C0_EL = [Type_22_R0_V0_C0_EL, Type_22_R0_V0_C0_M5];
                            
    % Built-In Type: 0
        Type_0_R0_V0_C0 = coder.types.Double;
        Type_0_R0_V0_C0.Name = 'double';
    Type_0_R0_V0_C0.Identifier = 'real_T';
    Type_0_R0_V0_C0.ReadOnly   = 0;
    Type_0_R0_V0_C0.Volatile   = 0;
        
    % Matrix Type
    Type_19_R0_V0_C1 = coder.types.Matrix;
    Type_19_R0_V0_C1.BaseType   = Type_0_R0_V0_C0;
        Type_19_R0_V0_C1.Dimensions = [3,3];
        Type_19_R0_V0_C1.SymbolicDimensions = Type_19_R0_V0_C1.SymbolicDimensions;
        
            % Element # 7
            Type_22_R0_V0_C0_M6 = coder.types.AggregateElement;
            Type_22_R0_V0_C0_M6.Identifier = 'I';
            Type_22_R0_V0_C0_M6.Type = Type_19_R0_V0_C1;
            Type_22_R0_V0_C0_EL = [Type_22_R0_V0_C0_EL, Type_22_R0_V0_C0_M6];
            
    % Matrix Type
    Type_20_R0_V0_C1 = coder.types.Matrix;
    Type_20_R0_V0_C1.BaseType   = Type_0_R0_V0_C0;
        Type_20_R0_V0_C1.Dimensions = [1,3];
        Type_20_R0_V0_C1.SymbolicDimensions = Type_20_R0_V0_C1.SymbolicDimensions;
        
            % Element # 8
            Type_22_R0_V0_C0_M7 = coder.types.AggregateElement;
            Type_22_R0_V0_C0_M7.Identifier = 'RG';
            Type_22_R0_V0_C0_M7.Type = Type_20_R0_V0_C1;
            Type_22_R0_V0_C0_EL = [Type_22_R0_V0_C0_EL, Type_22_R0_V0_C0_M7];

            % Element # 9
            Type_22_R0_V0_C0_M8 = coder.types.AggregateElement;
            Type_22_R0_V0_C0_M8.Identifier = 'RB';
            Type_22_R0_V0_C0_M8.Type = Type_20_R0_V0_C1;
            Type_22_R0_V0_C0_EL = [Type_22_R0_V0_C0_EL, Type_22_R0_V0_C0_M8];
            
    % Matrix Type
    Type_21_R0_V0_C1 = coder.types.Matrix;
    Type_21_R0_V0_C1.BaseType   = Type_0_R0_V0_C0;
        Type_21_R0_V0_C1.Dimensions = [1,6];
        Type_21_R0_V0_C1.SymbolicDimensions = Type_21_R0_V0_C1.SymbolicDimensions;
        
            % Element # 10
            Type_22_R0_V0_C0_M9 = coder.types.AggregateElement;
            Type_22_R0_V0_C0_M9.Identifier = 'CDL';
            Type_22_R0_V0_C0_M9.Type = Type_21_R0_V0_C1;
            Type_22_R0_V0_C0_EL = [Type_22_R0_V0_C0_EL, Type_22_R0_V0_C0_M9];

            % Element # 11
            Type_22_R0_V0_C0_M10 = coder.types.AggregateElement;
            Type_22_R0_V0_C0_M10.Identifier = 'CDQ';
            Type_22_R0_V0_C0_M10.Type = Type_21_R0_V0_C1;
            Type_22_R0_V0_C0_EL = [Type_22_R0_V0_C0_EL, Type_22_R0_V0_C0_M10];

            % Element # 12
            Type_22_R0_V0_C0_M11 = coder.types.AggregateElement;
            Type_22_R0_V0_C0_M11.Identifier = 'AF';
            Type_22_R0_V0_C0_M11.Type = Type_20_R0_V0_C1;
            Type_22_R0_V0_C0_EL = [Type_22_R0_V0_C0_EL, Type_22_R0_V0_C0_M11];

            % Element # 13
            Type_22_R0_V0_C0_M12 = coder.types.AggregateElement;
            Type_22_R0_V0_C0_M12.Identifier = 'AddedMass';
            Type_22_R0_V0_C0_M12.Type = Type_21_R0_V0_C1;
            Type_22_R0_V0_C0_EL = [Type_22_R0_V0_C0_EL, Type_22_R0_V0_C0_M12];

            % Element # 14
            Type_22_R0_V0_C0_M13 = coder.types.AggregateElement;
            Type_22_R0_V0_C0_M13.Identifier = 'DepthPose';
            Type_22_R0_V0_C0_M13.Type = Type_20_R0_V0_C1;
            Type_22_R0_V0_C0_EL = [Type_22_R0_V0_C0_EL, Type_22_R0_V0_C0_M13];

            % Element # 15
            Type_22_R0_V0_C0_M14 = coder.types.AggregateElement;
            Type_22_R0_V0_C0_M14.Identifier = 'hydroPose';
            Type_22_R0_V0_C0_M14.Type = Type_20_R0_V0_C1;
            Type_22_R0_V0_C0_EL = [Type_22_R0_V0_C0_EL, Type_22_R0_V0_C0_M14];

            % Element # 16
            Type_22_R0_V0_C0_M15 = coder.types.AggregateElement;
            Type_22_R0_V0_C0_M15.Identifier = 'sonarPose';
            Type_22_R0_V0_C0_M15.Type = Type_20_R0_V0_C1;
            Type_22_R0_V0_C0_EL = [Type_22_R0_V0_C0_EL, Type_22_R0_V0_C0_M15];

            % Element # 17
            Type_22_R0_V0_C0_M16 = coder.types.AggregateElement;
            Type_22_R0_V0_C0_M16.Identifier = 'dvlRotation';
            Type_22_R0_V0_C0_M16.Type = Type_20_R0_V0_C1;
            Type_22_R0_V0_C0_EL = [Type_22_R0_V0_C0_EL, Type_22_R0_V0_C0_M16];
            
        % Structure Elements
        Type_18_R0_V0_C1_EL = [];
            
    % Matrix Type
    Type_17_R0_V0_C1 = coder.types.Matrix;
    Type_17_R0_V0_C1.BaseType   = Type_0_R0_V0_C0;
        Type_17_R0_V0_C1.Dimensions = [8,6];
        Type_17_R0_V0_C1.SymbolicDimensions = Type_17_R0_V0_C1.SymbolicDimensions;
        
            % Element # 1
            Type_18_R0_V0_C1_M0 = coder.types.AggregateElement;
            Type_18_R0_V0_C1_M0.Identifier = 'T';
            Type_18_R0_V0_C1_M0.Type = Type_17_R0_V0_C1;
            Type_18_R0_V0_C1_EL = [Type_18_R0_V0_C1_EL, Type_18_R0_V0_C1_M0];

            % Element # 2
            Type_18_R0_V0_C1_M1 = coder.types.AggregateElement;
            Type_18_R0_V0_C1_M1.Identifier = 'tau';
            Type_18_R0_V0_C1_M1.Type = Type_0_R0_V0_C1;
            Type_18_R0_V0_C1_EL = [Type_18_R0_V0_C1_EL, Type_18_R0_V0_C1_M1];

            % Element # 3
            Type_18_R0_V0_C1_M2 = coder.types.AggregateElement;
            Type_18_R0_V0_C1_M2.Identifier = 'b0';
            Type_18_R0_V0_C1_M2.Type = Type_0_R0_V0_C1;
            Type_18_R0_V0_C1_EL = [Type_18_R0_V0_C1_EL, Type_18_R0_V0_C1_M2];

            % Element # 4
            Type_18_R0_V0_C1_M3 = coder.types.AggregateElement;
            Type_18_R0_V0_C1_M3.Identifier = 'a1';
            Type_18_R0_V0_C1_M3.Type = Type_0_R0_V0_C1;
            Type_18_R0_V0_C1_EL = [Type_18_R0_V0_C1_EL, Type_18_R0_V0_C1_M3];

        % Structure Type
        Type_18_R0_V0_C1 = coder.types.Struct;
        Type_18_R0_V0_C1.Identifier = 'struct_qfomatEQOl7mLQ02Mpt2VE';
        Type_18_R0_V0_C1.Name       = 'struct_qfomatEQOl7mLQ02Mpt2VE';
        Type_18_R0_V0_C1.Elements   = Type_18_R0_V0_C1_EL;
        Type_18_R0_V0_C1.ReadOnly   = 0;
        Type_18_R0_V0_C1.Volatile   = 0;
                Type_18_R0_V0_C1.Checksum   = uint32([3.205142049E+9; 4.174101879E+9; 2.623005089E+9; 3.496814124E+9]);
                    Type_18_R0_V0_C1.TypeChecksum   = uint32([0.0; 0.0; 0.0; 0.0]);

        
            % Element # 18
            Type_22_R0_V0_C0_M17 = coder.types.AggregateElement;
            Type_22_R0_V0_C0_M17.Identifier = 'thruster';
            Type_22_R0_V0_C0_M17.Type = Type_18_R0_V0_C1;
            Type_22_R0_V0_C0_EL = [Type_22_R0_V0_C0_EL, Type_22_R0_V0_C0_M17];

        % Structure Type
        Type_22_R0_V0_C0 = coder.types.Struct;
        Type_22_R0_V0_C0.Identifier = 'struct_PHAFHl5XyXX1OaeSBzWbKD';
        Type_22_R0_V0_C0.Name       = 'struct_PHAFHl5XyXX1OaeSBzWbKD';
        Type_22_R0_V0_C0.Elements   = Type_22_R0_V0_C0_EL;
        Type_22_R0_V0_C0.ReadOnly   = 0;
        Type_22_R0_V0_C0.Volatile   = 0;
                Type_22_R0_V0_C0.Checksum   = uint32([9.4019007E+8; 4.002914125E+9; 3.600984005E+9; 1.271516479E+9]);
                    Type_22_R0_V0_C0.TypeChecksum   = uint32([0.0; 0.0; 0.0; 0.0]);

        
    % Matrix Type
    Type_459_R0_V0_C0 = coder.types.Matrix;
    Type_459_R0_V0_C0.BaseType   = Type_22_R0_V0_C0;
        Type_459_R0_V0_C0.Dimensions = [1,1];
        Type_459_R0_V0_C0.SymbolicDimensions = Type_459_R0_V0_C0.SymbolicDimensions;
        

                        
        % Structure Elements
        Type_61_R0_V0_C0_EL = [];

            % Element # 1
            Type_61_R0_V0_C0_M0 = coder.types.AggregateElement;
            Type_61_R0_V0_C0_M0.Identifier = 'init';
            Type_61_R0_V0_C0_M0.Type = Type_0_R0_V0_C1;
            Type_61_R0_V0_C0_EL = [Type_61_R0_V0_C0_EL, Type_61_R0_V0_C0_M0];
            
        % Structure Elements
        Type_58_R0_V0_C1_EL = [];
            
    % Matrix Type
    Type_56_R0_V0_C1 = coder.types.Matrix;
    Type_56_R0_V0_C1.BaseType   = Type_0_R0_V0_C0;
        Type_56_R0_V0_C1.Dimensions = [1,4];
        Type_56_R0_V0_C1.SymbolicDimensions = Type_56_R0_V0_C1.SymbolicDimensions;
        
            % Element # 1
            Type_58_R0_V0_C1_M0 = coder.types.AggregateElement;
            Type_58_R0_V0_C1_M0.Identifier = 'adapQMpcMode';
            Type_58_R0_V0_C1_M0.Type = Type_56_R0_V0_C1;
            Type_58_R0_V0_C1_EL = [Type_58_R0_V0_C1_EL, Type_58_R0_V0_C1_M0];
            
    % Matrix Type
    Type_57_R0_V0_C1 = coder.types.Matrix;
    Type_57_R0_V0_C1.BaseType   = Type_0_R0_V0_C0;
        Type_57_R0_V0_C1.Dimensions = [1,2];
        Type_57_R0_V0_C1.SymbolicDimensions = Type_57_R0_V0_C1.SymbolicDimensions;
        
            % Element # 2
            Type_58_R0_V0_C1_M1 = coder.types.AggregateElement;
            Type_58_R0_V0_C1_M1.Identifier = 'openLoopMode';
            Type_58_R0_V0_C1_M1.Type = Type_57_R0_V0_C1;
            Type_58_R0_V0_C1_EL = [Type_58_R0_V0_C1_EL, Type_58_R0_V0_C1_M1];

            % Element # 3
            Type_58_R0_V0_C1_M2 = coder.types.AggregateElement;
            Type_58_R0_V0_C1_M2.Identifier = 'LtvQMpcMode';
            Type_58_R0_V0_C1_M2.Type = Type_0_R0_V0_C1;
            Type_58_R0_V0_C1_EL = [Type_58_R0_V0_C1_EL, Type_58_R0_V0_C1_M2];

            % Element # 4
            Type_58_R0_V0_C1_M3 = coder.types.AggregateElement;
            Type_58_R0_V0_C1_M3.Identifier = 'rosGains';
            Type_58_R0_V0_C1_M3.Type = Type_0_R0_V0_C1;
            Type_58_R0_V0_C1_EL = [Type_58_R0_V0_C1_EL, Type_58_R0_V0_C1_M3];

            % Element # 5
            Type_58_R0_V0_C1_M4 = coder.types.AggregateElement;
            Type_58_R0_V0_C1_M4.Identifier = 'NlmpcMode';
            Type_58_R0_V0_C1_M4.Type = Type_0_R0_V0_C1;
            Type_58_R0_V0_C1_EL = [Type_58_R0_V0_C1_EL, Type_58_R0_V0_C1_M4];

            % Element # 6
            Type_58_R0_V0_C1_M5 = coder.types.AggregateElement;
            Type_58_R0_V0_C1_M5.Identifier = 'adapEMpcMode';
            Type_58_R0_V0_C1_M5.Type = Type_0_R0_V0_C1;
            Type_58_R0_V0_C1_EL = [Type_58_R0_V0_C1_EL, Type_58_R0_V0_C1_M5];

        % Structure Type
        Type_58_R0_V0_C1 = coder.types.Struct;
        Type_58_R0_V0_C1.Identifier = 'struct_ufqIMyHD2vQ8RfLYE7OdnG';
        Type_58_R0_V0_C1.Name       = 'struct_ufqIMyHD2vQ8RfLYE7OdnG';
        Type_58_R0_V0_C1.Elements   = Type_58_R0_V0_C1_EL;
        Type_58_R0_V0_C1.ReadOnly   = 0;
        Type_58_R0_V0_C1.Volatile   = 0;
                Type_58_R0_V0_C1.Checksum   = uint32([1.693481398E+9; 1.477057661E+9; 7.69079956E+8; 3.964716149E+9]);
                    Type_58_R0_V0_C1.TypeChecksum   = uint32([0.0; 0.0; 0.0; 0.0]);

        
            % Element # 2
            Type_61_R0_V0_C0_M1 = coder.types.AggregateElement;
            Type_61_R0_V0_C0_M1.Identifier = 'control';
            Type_61_R0_V0_C0_M1.Type = Type_58_R0_V0_C1;
            Type_61_R0_V0_C0_EL = [Type_61_R0_V0_C0_EL, Type_61_R0_V0_C0_M1];
            
        % Structure Elements
        Type_60_R0_V0_C1_EL = [];

            % Element # 1
            Type_60_R0_V0_C1_M0 = coder.types.AggregateElement;
            Type_60_R0_V0_C1_M0.Identifier = 'trajMode';
            Type_60_R0_V0_C1_M0.Type = Type_0_R0_V0_C1;
            Type_60_R0_V0_C1_EL = [Type_60_R0_V0_C1_EL, Type_60_R0_V0_C1_M0];
            
    % Matrix Type
    Type_59_R0_V0_C1 = coder.types.Matrix;
    Type_59_R0_V0_C1.BaseType   = Type_0_R0_V0_C0;
        Type_59_R0_V0_C1.Dimensions = [1,5];
        Type_59_R0_V0_C1.SymbolicDimensions = Type_59_R0_V0_C1.SymbolicDimensions;
        
            % Element # 2
            Type_60_R0_V0_C1_M1 = coder.types.AggregateElement;
            Type_60_R0_V0_C1_M1.Identifier = 'singleWpts';
            Type_60_R0_V0_C1_M1.Type = Type_59_R0_V0_C1;
            Type_60_R0_V0_C1_EL = [Type_60_R0_V0_C1_EL, Type_60_R0_V0_C1_M1];

            % Element # 3
            Type_60_R0_V0_C1_M2 = coder.types.AggregateElement;
            Type_60_R0_V0_C1_M2.Identifier = 'SpaceMouseMode';
            Type_60_R0_V0_C1_M2.Type = Type_20_R0_V0_C1;
            Type_60_R0_V0_C1_EL = [Type_60_R0_V0_C1_EL, Type_60_R0_V0_C1_M2];

        % Structure Type
        Type_60_R0_V0_C1 = coder.types.Struct;
        Type_60_R0_V0_C1.Identifier = 'struct_Fcl3OWFFDL64qkAOtsVYAC';
        Type_60_R0_V0_C1.Name       = 'struct_Fcl3OWFFDL64qkAOtsVYAC';
        Type_60_R0_V0_C1.Elements   = Type_60_R0_V0_C1_EL;
        Type_60_R0_V0_C1.ReadOnly   = 0;
        Type_60_R0_V0_C1.Volatile   = 0;
                Type_60_R0_V0_C1.Checksum   = uint32([1.70042088E+8; 7.13497788E+8; 1.31871346E+9; 3.998217173E+9]);
                    Type_60_R0_V0_C1.TypeChecksum   = uint32([0.0; 0.0; 0.0; 0.0]);

        
            % Element # 3
            Type_61_R0_V0_C0_M2 = coder.types.AggregateElement;
            Type_61_R0_V0_C0_M2.Identifier = 'traj';
            Type_61_R0_V0_C0_M2.Type = Type_60_R0_V0_C1;
            Type_61_R0_V0_C0_EL = [Type_61_R0_V0_C0_EL, Type_61_R0_V0_C0_M2];

        % Structure Type
        Type_61_R0_V0_C0 = coder.types.Struct;
        Type_61_R0_V0_C0.Identifier = 'struct_x7JWpgYpPywnYpZFC6VmZH';
        Type_61_R0_V0_C0.Name       = 'struct_x7JWpgYpPywnYpZFC6VmZH';
        Type_61_R0_V0_C0.Elements   = Type_61_R0_V0_C0_EL;
        Type_61_R0_V0_C0.ReadOnly   = 0;
        Type_61_R0_V0_C0.Volatile   = 0;
                Type_61_R0_V0_C0.Checksum   = uint32([2.917296612E+9; 1.357084299E+9; 3.521440722E+9; 2.600092472E+9]);
                    Type_61_R0_V0_C0.TypeChecksum   = uint32([0.0; 0.0; 0.0; 0.0]);

        
    % Matrix Type
    Type_460_R0_V0_C0 = coder.types.Matrix;
    Type_460_R0_V0_C0.BaseType   = Type_61_R0_V0_C0;
        Type_460_R0_V0_C0.Dimensions = [1,1];
        Type_460_R0_V0_C0.SymbolicDimensions = Type_460_R0_V0_C0.SymbolicDimensions;
        

            
    % Matrix Type
    Type_291_R0_V0_C0 = coder.types.Matrix;
    Type_291_R0_V0_C0.BaseType   = Type_0_R0_V0_C0;
        Type_291_R0_V0_C0.Dimensions = [201,1];
        Type_291_R0_V0_C0.SymbolicDimensions = Type_291_R0_V0_C0.SymbolicDimensions;
        



            
    % Matrix Type
    Type_17_R0_V0_C0 = coder.types.Matrix;
    Type_17_R0_V0_C0.BaseType   = Type_0_R0_V0_C0;
        Type_17_R0_V0_C0.Dimensions = [8,6];
        Type_17_R0_V0_C0.SymbolicDimensions = Type_17_R0_V0_C0.SymbolicDimensions;
        

            
    % Matrix Type
    Type_180_R0_V0_C0 = coder.types.Matrix;
    Type_180_R0_V0_C0.BaseType   = Type_0_R0_V0_C0;
        Type_180_R0_V0_C0.Dimensions = [1,1];
        Type_180_R0_V0_C0.SymbolicDimensions = Type_180_R0_V0_C0.SymbolicDimensions;
        

            
    % Matrix Type
    Type_21_R0_V0_C0 = coder.types.Matrix;
    Type_21_R0_V0_C0.BaseType   = Type_0_R0_V0_C0;
        Type_21_R0_V0_C0.Dimensions = [1,6];
        Type_21_R0_V0_C0.SymbolicDimensions = Type_21_R0_V0_C0.SymbolicDimensions;
        





                            
    % Built-In Type: 5
        Type_5_R0_V0_C0 = coder.types.Int(16,0);
        Type_5_R0_V0_C0.Name = 'uint16';
    Type_5_R0_V0_C0.Identifier = 'uint16_T';
    Type_5_R0_V0_C0.ReadOnly   = 0;
    Type_5_R0_V0_C0.Volatile   = 0;
        
    % Matrix Type
    Type_293_R0_V0_C0 = coder.types.Matrix;
    Type_293_R0_V0_C0.BaseType   = Type_5_R0_V0_C0;
        Type_293_R0_V0_C0.Dimensions = [201,1];
        Type_293_R0_V0_C0.SymbolicDimensions = Type_293_R0_V0_C0.SymbolicDimensions;
        



























                            
    % Built-In Type: 8
        Type_8_R0_V0_C0 = coder.types.Bool;
        Type_8_R0_V0_C0.Name = 'boolean';
    Type_8_R0_V0_C0.Identifier = 'boolean_T';
    Type_8_R0_V0_C0.ReadOnly   = 0;
    Type_8_R0_V0_C0.Volatile   = 0;
        
    % Matrix Type
    Type_184_R0_V0_C0 = coder.types.Matrix;
    Type_184_R0_V0_C0.BaseType   = Type_8_R0_V0_C0;
        Type_184_R0_V0_C0.Dimensions = [1,1];
        Type_184_R0_V0_C0.SymbolicDimensions = Type_184_R0_V0_C0.SymbolicDimensions;
        







            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            































































































































































































































































































































































































































































































































































































































    

    






    





    




















































































































































































































































































































































































































































































































































































































































































































































































































































































































































if ~isempty(skippedParameters)
wr.removeSkippedParameters(codeInfo.Parameters(skippedParameters));
codeInfo.Parameters(skippedParameters) = [];
end


% Handling Right-Click Builds
ss = rtwprivate('getSourceSubsystemHandle',codeInfo.GraphicalPath);
% Check if Rt-Click build, then re-map SIDs
if ~isempty(ss) && rtwprivate('rtwattic','hasSIDMap')
codeInfo = modifyCodeInfoForSubsystemBuild(ss, codeInfo, wr);
end

wr.writeFunctionInterfaces(codeInfo);
wr.writeServerCallPoints(codeInfo);

    wr.InstanceSpecificParameterConstructorFixup;
    


wr.closeRepo();
    if exist('expInports', 'var')
    save codeInfo.mat codeInfo expInports;
    else
    save codeInfo.mat codeInfo;
    end
returnVal = 1;

% End Function: writeCodeInfoFcn

function data = uniquifyDataAccess(list)
data = RTW.DataInterface.empty;
for idx=1:numel(list)
if ~isPresentDI(data, list(idx))
data(end+1) = list(idx); %#ok<AGROW>
end
end
% End Function: uniquifyDataAccess

function isPresent = isPresentDI(list, di)
isPresent = false;
for idx = 1:numel(list)
if isequal(list(idx), di)
isPresent = true;
break
end
end

function idx = getIndexFromTimingInternalId(internalIdVec, internalId)
idx = find(internalIdVec == internalId);
if (isempty(idx) || (length(idx) > 1))
ciMsg = 'Time object cannot be empty';
ciExc = MException('RTW:buildProcess:CodeInfoInternalError',ciMsg);
throw(ciExc);
end
% End Function: getIndexFromTimingInternalId

function checkDataGraphicalNames(ciName, rtwName)
if (strcmp(ciName, rtwName) ~= 1)
ciMsg = ['Name mismatch: ', ciName, ' and ', rtwName];
ciExc = MException('RTW:buildProcess:CodeInfoInternalError',ciMsg);
throw(ciExc);
end
% End Function: checkDataGraphicalNames

function iData = getInternalDataByName(iDataVec, iDataName)
iData = RTW.DataInterface.empty;
for idxData = 1:numel(iDataVec)
if strcmp(iDataName, iDataVec(idxData).GraphicalName)
iData(end+1) = iDataVec(idxData);
break
end
end
if (isempty(iData) || (length(iData) > 1))
ciMsg = 'Internal Data object cannot be empty';
ciExc = MException('RTW:buildProcess:CodeInfoInternalError',ciMsg);
throw(ciExc);
end
% End Function: getInternalDataByName

function iData = getInternalDataByVariableName(iDataVec, iDataVariableName)
iData = RTW.DataInterface.empty;
for idxData = 1:numel(iDataVec)
if strcmp(iDataVariableName, iDataVec(idxData).Implementation.VariableName)
iData = iDataVec(idxData);
break
end
end
if isempty(iData)
ciMsg = 'Internal Data object cannot be empty';
ciExc = MException('RTW:buildProcess:CodeInfoInternalError',ciMsg);
throw(ciExc);
end
% End Function: getInternalDataByVariableName

function codeInfo = modifyCodeInfoForSubsystemBuild(ss, codeInfo, wr)
    % Extract Subsystem Build Map from AtticData
    Subsystem_Build_Mapping = rtwprivate('rtwattic','getSIDMap');

    % Parameters
    for i = 1:length(codeInfo.Parameters)
    sid = codeInfo.Parameters(i).SID;

    sid = Simulink.ID.getSubsystemBuildSID(sid,ss, Subsystem_Build_Mapping);
    wr.updateSIDForSubsystemBuild("Parameter", i, sid, codeInfo.Parameters(i));
    codeInfo.Parameters(i).SID = sid;
    end

    % Data Stores
    for i = 1:length(codeInfo.DataStores)
    sid = codeInfo.DataStores(i).SID;

    sid = Simulink.ID.getSubsystemBuildSID(sid,ss, Subsystem_Build_Mapping);
    codeInfo.DataStores(i).SID = sid;
    wr.updateSIDForSubsystemBuild("DataStore", i, sid);

    end

    % Inports
    for i = 1:length(codeInfo.Inports)
    sid = codeInfo.Inports(i).SID;

    sid = Simulink.ID.getSubsystemBuildSID(sid,ss, Subsystem_Build_Mapping);
    codeInfo.Inports(i).SID = sid;
    wr.updateSIDForSubsystemBuild("Inport", i, sid);

    end

    % Outports
    for i = 1:length(codeInfo.Outports)
    sid = codeInfo.Outports(i).SID;

    sid = Simulink.ID.getSubsystemBuildSID(sid,ss, Subsystem_Build_Mapping);
    codeInfo.Outports(i).SID = sid;
    wr.updateSIDForSubsystemBuild("Outport", i, sid);

    end

