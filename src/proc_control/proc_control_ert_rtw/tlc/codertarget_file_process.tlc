%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%
%% Copyright 2013-2020 The MathWorks, Inc.
%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%selectfile NULL_FILE

%% Need to set the template compliance flag before we can use the API
%assign MATLAB_ROOT = FEVAL("matlabroot")
%assign MAINLIB_ROOT = FEVAL("fullfile", MATLAB_ROOT, "toolbox", "target", "codertarget", "rtw")
%assign ISESBENABLED = FEVAL("codertarget.utils.isESBEnabled", CompiledModel.Name)
%assign ISTSKMGRFOUND = FEVAL("codertarget.utils.isTaskManagerFound", CompiledModel.Name)
%% Reference models in SoC does not include "Task Manager" block. Including, hardware board feature set to make sure, code is being generated for SoC Blockset based hardware board.
%assign HWBOARDFEATURESET = FEVAL("get_param", CompiledModel.Name,"HardwareBoardFeatureSet")
%assign GENERATE_FOR_SOC = ISEQUAL(ISESBENABLED, TLC_TRUE) && (ISEQUAL(ISTSKMGRFOUND, TLC_TRUE) || ISEQUAL(HWBOARDFEATURESET,"SoCBlockset"))
%% SDCARDINBACKGROUNDTASK is a global variable used in mainOS, multiratemultitaskingOS and multiratesingletaskingOS TLCs
%assign ::SDCARDINBACKGROUNDTASK = FEVAL("codertarget.attributes.getAttribute", CompiledModel.Name, "SDCardInBackgroundTask")
%%assign ISTOPMDLBUILD = (CompiledModel.ModelReferenceTargetType == "NONE")
%%
%addincludepath MAINLIB_ROOT
%assign RTOS = FEVAL("codertarget.targethardware.getTargetRTOS", CompiledModel.Name)

%%if ISTOPMDLBUILD && (ExportFunctionsMode != 0 || SLibIsExportFcnDiagram())
    %%<SLibReportErrorWithId("codertarget:build:ExpFcnTopMdlError")> 
    %%assign errTxt = "This model is an export function model. This modeling style is not supported when the Hardware Board is not set to None. Set the Hardware Board to None and generate code again."
    %%<LibReportError(errTxt)> 
%%endif

%if ISEQUAL(RTOS, "Baremetal")
    %include "codertarget_bareboard.tlc"
    %if ISEQUAL(ISESBENABLED, TLC_TRUE) && ISEQUAL(ISTSKMGRFOUND, TLC_TRUE)
        %include "socb_utils.tlc"
        %include "socb_mainwithoutOS.tlc"
        %include "socb_multiratemultitasking.tlc"
        %include "socb_multiratesingletasking.tlc"
    %else
        %include "codertarget_mainwithoutOS.tlc"
        %include "codertarget_multiratemultitasking.tlc"
        %include "codertarget_multiratesingletasking.tlc"
    %endif
%else
    %include "codertarget_OS.tlc"
    %if ISEQUAL(ISESBENABLED, TLC_TRUE) && ISEQUAL(ISTSKMGRFOUND, TLC_TRUE)
        %include "socb_mainOS.tlc"
        %include "socb_multiratemultitaskingOS.tlc"
        %include "socb_multiratesingletaskingOS.tlc"
    %else
        %include "codertarget_mainOS.tlc"
        %include "codertarget_multiratemultitaskingOS.tlc"
        %include "codertarget_multiratesingletaskingOS.tlc"
    %endif
%endif
%include "codertarget_singleratesingletasking.tlc"
%include "codertarget_utils.tlc"

%if FEVAL("codertarget.target.supportsCoderTarget", CompiledModel.Name)
    %assign ::ISCODERTARGET = 1
    %assign ::ProfileGenCode = 0
    %assign ::isProfilePIL = 0
    %assign ::isPIL = 0
    %assign ::isLIB = 0
    %assign tgt = FEVAL("codertarget.target.getTargetName" , CompiledModel.Name)
    %% TODO Zijad - Abstract away from coder target foundation into TI C2000

    %if ISEQUAL(tgt, [])
        %assign ::ISCODERTARGET = 0
        %assign tgt = "unknown target"
    %elseif ISEQUAL(tgt, "IBIS_AMI")
        %assign TGT_ROOT = FEVAL("codertarget.target.getTargetFolder", tgt)
        %assign SERDESTLCDIR = FEVAL("fullfile", TGT_ROOT, "tlc_c")
        %addincludepath SERDESTLCDIR 
        %include "ibis_ami_file_process.tlc" 
    %elseif (ISEQUAL(tgt, "TI C2000") || ISEQUAL(tgt, "Texas Instruments C2000 Concerto")) && ISEQUAL(CompiledModel.ConfigSet.ProdHWDeviceType, "Texas Instruments->C2000")
        %assign ML_ROOT = FEVAL("matlabroot")
        %assign TGT_ROOT = FEVAL("codertarget.target.getTargetFolder", "TI C2000")
        %assign TGT_ROOT = FEVAL("fullfile", TGT_ROOT, "tlc_c")
        %addincludepath TGT_ROOT
        %assign OLDTGTLIB_ROOT = FEVAL("fullfile", ML_ROOT, "toolbox", "idelink", "extensions", "ticcs", "c2000")
        %addincludepath OLDTGTLIB_ROOT   
        %include "tic2000_compatibility.tlc" 
        %if ISEQUAL(IRInfo.sysinfo.tgtPrefs.chipInfo.subFamily, "281x")
            %include "ti_c281x_csl.tlc"
        %else
            %include "ti_c280x_csl.tlc"
        %endif
    %elseif (ISEQUAL(tgt, "TI C2000 SOC")) && ISEQUAL(CompiledModel.ConfigSet.ProdHWDeviceType, "Texas Instruments->C2000")
        %assign ML_ROOT = FEVAL("matlabroot")
        %assign TGT_ROOT = FEVAL("codertarget.target.getTargetFolder", "TI C2000 SOC")
        %assign TGT_ROOT = FEVAL("fullfile", TGT_ROOT, "tlc_c")
        %addincludepath TGT_ROOT
        %include "tic2000_compatibility.tlc" 
        %include "ti_c280x_csl.tlc"
    %endif
%else
    %assign ::ISCODERTARGET = 0
%endif
%if ISEQUAL(::ISCODERTARGET, 1)
    %if GenerateSampleERTMain
        %assign CompiledModel.GenerateSampleERTMain = TLC_FALSE
    %endif
    %if (CompiledModel.ModelReferenceTargetType == "NONE")
        %if !ISEQUAL(tgt, "IBIS_AMI")
            %<SLibCreateMain("ert_main")> 
        %endif
    %endif

    %if (CompiledModel.ModelReferenceTargetType != "NONE")
        %openfile tmpHdrBuf
            #include "MW_target_hardware_resources.h"
        %closefile tmpHdrBuf
        %<SLibCacheCodeToFile("mdl_hdr_custom_incl", tmpHdrBuf)>
    %endif

    %% Custom peripheral header inclusions
    %if ISEQUAL(GENERATE_FOR_SOC, TLC_TRUE)
        %assign periphDefFile = FEVAL("soc.internal.peripherals.utils.getDefFileNameForBoard",CompiledModel.Name)
        %if !ISEMPTY(periphDefFile)
            %openfile tmpPeriphHdr
                %assign PeripheralEntries = FEVAL("soc.internal.peripherals.utils.getPeripheralEntries",CompiledModel.Name)
                %assign DIMs = SIZE(PeripheralEntries)
                %foreach idx = DIMs[1]
                    %assign isPeripheralUsed = FEVAL("soc.internal.peripherals.utils.isPeripheralUsed",CompiledModel.Name,PeripheralEntries[idx])
                    %if ISEQUAL(isPeripheralUsed,TLC_TRUE)
                        %assign dataPeripheralName = FEVAL("soc.internal.peripherals.utils.getPeripheralDataHdrName",CompiledModel.Name,PeripheralEntries[idx])
                        #include "%<dataPeripheralName>"
                    %endif
                %endforeach
            %closefile tmpPeriphHdr
            %<SLibCacheCodeToFile("mdl_hdr_custom_incl", tmpPeriphHdr)>
        %endif
    %endif
%endif 
